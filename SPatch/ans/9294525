
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,20/20] x86: Add support to make use of Secure Memory Encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,20/20] x86: Add support to make use of Secure Memory Encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 22, 2016, 10:39 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160822223908.29880.50365.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9294525/mbox/"
   >mbox</a>
|
   <a href="/patch/9294525/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9294525/">/patch/9294525/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	29E38607F0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:54:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1718228AD2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:54:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0B01F28AE0; Mon, 22 Aug 2016 22:54:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BA36C28AD2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 Aug 2016 22:53:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932503AbcHVWxs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 Aug 2016 18:53:48 -0400
Received: from mail-sn1nam02on0068.outbound.protection.outlook.com
	([104.47.36.68]:55004
	&quot;EHLO NAM02-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1756288AbcHVWxi (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 Aug 2016 18:53:38 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=CgRhzbJpscBXZMKGPTk48oQoSxJeYyNhonq2a1yK7B8=;
	b=R1tXubYBRHsKOzBngOD0Qs9x24tJWq9edp8X6EKU4TMhVeMVNxnwVY2+iEEP/hVp6NTPffwRYWkGMD6PYIwjmvMsuyM7JqPAz88Y/aw6C14yAmCZ0kloT7IE7E1M3/brlsTjizNH/BzEsIAJft6VU/Fx/a3OIppZtXMiBuPItDk=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Thomas.Lendacky@amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	BN6PR12MB1139.namprd12.prod.outlook.com (10.168.226.141) with
	Microsoft SMTP Server (version=TLS1_0,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384) id
	15.1.557.21; Mon, 22 Aug 2016 22:39:10 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [RFC PATCH v2 20/20] x86: Add support to make use of Secure Memory
	Encryption
To: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;kvm@vger.kernel.org&gt;, &lt;linux-doc@vger.kernel.org&gt;,
	&lt;x86@kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;kasan-dev@googlegroups.com&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;iommu@lists.linux-foundation.org&gt;
CC: Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	&quot;Konrad Rzeszutek Wilk&quot; &lt;konrad.wilk@oracle.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	&quot;Andy Lutomirski&quot; &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	&quot;Thomas Gleixner&quot; &lt;tglx@linutronix.de&gt;,
	Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Mon, 22 Aug 2016 17:39:08 -0500
Message-ID: &lt;20160822223908.29880.50365.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20160822223529.29880.50884.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20160822223529.29880.50884.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: SN1PR0701CA0004.namprd07.prod.outlook.com (10.162.96.14)
	To
	BN6PR12MB1139.namprd12.prod.outlook.com (10.168.226.141)
X-MS-Office365-Filtering-Correlation-Id: bc5ceace-4355-46d4-baad-08d3cadd2354
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	2:c5x5M2UNf22zqyNm1fJXKL7wgyDQRp8J3pSmlOpHmTPuJJflDocboho1haSop9Hq9tgHseEdUOXARPTX+Kt/UIND6gO1JpfU2KCUReyM3Jxnzw/AoaKPIkZLdRmgVhbEKlVMv3GoZuIDXPV5WL4iMBZgnmEwIKmDsq+bTn8JjeCpohV0BkoZVbwLPiYdyIKJ;
	3:/JZfoXngofieGxS/yF3oARsdJXJ0ruZL36kETB54ZYVRvK6H9me0kIBQ+zU3/Kyuc48W5tcaNVzyicWBsWdkXz4OkDOfwNllnndX1EKl0NQnrZUs9uAgLQrM3JhJ08JB
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:BN6PR12MB1139;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	25:hDbXOzA+v0nbUUq2+nav6mZU3+g8AeXbTNGkr9tfUmNWPB3dH3tp/rhtXUPINBjr7iljNFCVCWfL97j2LuMe9XaD5//DyFlIKzP2oZ77o/HwY5bzFcl1o7SbDrEUfbeppvYCWCAN9yMDJQHbTeKvqaZEGl7GG2cO0ANrf0htCfefXvqpG/4i35WnPMuLZ9aQiJOPJ5JzMk3bytTh23/lxNyvUHKRiAe6L42XwsdmxDeMqXkJShczvbV0isbXLOa9GwQWHe2PprNvQlcYAnnCqSLuI90bLgLSaa+JpgBI+z8QN1wb+y92+lSpcHmsdqlPsyqIzS2OML1EuKORHPYIhs4qnI6QefIg79O6x8lRmoie0uOPgqalR6Ye2OxCvkir9z+LFvzFUA26Cm/VxvRhMZcZB46ra6psiHr+J600OUFXcPHdPge3e3zu3aMd00Df2QmkBXMht/qKNfY5vEszCbUc50GlSM/rmxT97LRWNzfHocXc+WpNIIskwjZiM7ebq4TTwZ6r5IacBNo/W3lL/6gh9E7t9vVhNfpzFqBBMwUDPk51YCDPv/UriWQWw20SRpmOFxwGaqSQ/tH5SDsy9iIwniVtYKzbRzTneU440zWUI9DdRT3zqK6OLlnmMExPm/8D94n8NDzKly7nnW7BVArEgBKc6MHTsykPdwK8QoC4L6JNCSBKxqhfC4uao/2QaGJlrYgU25tr3mhmsLgxNvmvbNyxP5jOduNQIg5EVRs3AvvE39tDy0niF7gIRFkNqMQ7kPmLcEsQdwL0X+WKXg==
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	31:o0GhDjfAHl3p37UEECJdcuTSaS/TmoxLlETCLaxbA0t8bycYnpXDyEfy4buOxkaw0R8mkbn1E0IpPeUO3eeBCCYp/dWW/SXAP1nJi3ilSh7E1eCDE028ubSafac/9eN+HRw5utcjl9LkTw4X3P9s/iFN/SUEWDNMGWqdVXBJzZS6RMHCES4pAiAkeSvDjkALwl6DQjbwcywgR9ss07vF0Jf7TaUwvFE9U7hFotq32vQ=;
	20:n22wGM2Dj+WnUbhQbydvqWdmer/zIw4ySKfATI8FI68csGwwWn6ZqdlBoYwqavMmeQpXI1SyGJh294kgPOF8zG14vNS7zFNtI9sG38Eb1Ci2dznl35RMxSZS5TlkOB5MNR1iHknqo8IeljAcVsGrPX8nSTVYfajvy4tp/PiVXf2c+E9yzvNrMwVfNzi5h0eRJ7kDGK7kU7aszSiUtN94dbimId+e+OWGiTHjQYreYLiUeznxt4SSD3bUeJz5YcSIPICA9zgUaFOtdb5XwMEThRwh5TaSDMPSpOm2YgGFwXcYNCklwYLBd3sT3C84SDK1cZ1DApvWBlGB7Y7rcfr0mm8ZQupISuCXs7PJ3q+I6QKfql7Q1z3TQ/3NZ+4pfiZrKlvsHrvidz7b+ChcqlrGOZ1rzcNyb/XfbcgcB203cKAdN2xgtXUvbnM0QWar5KFRSKo2daivl+qL5MLjcTCCu0VQAvphWV43lESnkb1PSl3gitBdy9NmINwWUjbwvF3x
X-Microsoft-Antispam-PRVS: &lt;BN6PR12MB11395A9597ABB3A72FFA67B6ECE80@BN6PR12MB1139.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040176)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(6055026);
	SRVR:BN6PR12MB1139; BCL:0; PCL:0; RULEID:; SRVR:BN6PR12MB1139;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	4:5lgyV6URyB+94WTg6KOsvGseqlfZ1q1jwXAAPh1tpU4ABIawLYrq3cNJqEhbhjvuDFNUVfB7Rg2+erSnzLUmlmHlpPTvu2GAaFkuwLDDpzklgOzoksEFi/NpM7Q1zH5oqEjtAFBsUgoQ/AHmn803K1hcN16KY8CfnYrfSCpUx54tDrh8V504xdP45+phxNcSPwaxLuhf1BH4BLTv7d4x4bW+EYaAUc9kp8eX/zTuPztsk2K47ah4UvVMQfGCdrMXi4Kwoowy7M2/K9PC/gveOdFhxTlFytpwm+L9WfRbJTtknQK9aWCR4RHD6H/IFm75OzcJjMseigV0xeQk7zG31CfJwyMA4tIjYmDmuZTVEVaL54O3pnOOjZskNZ1rOwuRc0V+y2Bf4vyATYIC+EROx1Mhz+o+RX5nJ6HE1wBrFu2DHr45rPXY1ot6Fr5fjaQV
X-Forefront-PRVS: 00429279BA
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(7916002)(189002)(199003)(3846002)(5660300001)(97746001)(50986999)(86362001)(6116002)(77096005)(76176999)(54356999)(97736004)(23676002)(586003)(81166006)(8676002)(2950100001)(92566002)(81156014)(5001770100001)(2201001)(53416004)(189998001)(1076002)(83506001)(33646002)(68736007)(2906002)(229853001)(4001350100001)(4326007)(69596002)(47776003)(7416002)(42186005)(7846002)(105586002)(230700001)(66066001)(7736002)(103116003)(50466002)(305945005)(19580405001)(19580395003)(106356001)(101416001)(9686002)(71626007)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BN6PR12MB1139;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; PTR:InfoNoRecords;
	MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtCTjZQUjEyTUIxMTM5OzIzOnFJOVorZkVma0wzbVI1OTBMSHFaVE1FMjI2?=
	=?utf-8?B?RVdidklPeWtjbXhuN3lIV1N4cUpGSXQ5UUNRNXFocEUzU1p1eWwyekVpVUh2?=
	=?utf-8?B?RUVGaEZrekU2bVdWQ0xjNzRWbEhFbTF6WU00M1duMnhRNzZ4N0ROQ2VITS91?=
	=?utf-8?B?R0VtUFpzdzgvVW5wOFR3QkQ5ODI5MmJSbFdQTWY0MUZMVVVSZlBlTStaK2RZ?=
	=?utf-8?B?ZkhwekM4TFN1RlFuNnFUV0Vpd0hTeGdDZmRVVXZ1bysxU3FqMzJSa2orRVd1?=
	=?utf-8?B?ajNPemhDNDlQb2JNMWtqTy9TUCtvbG4yWmZwMnBpeWxDNWYrVDZwMDZQTkNm?=
	=?utf-8?B?alZYV3FQZkM0QnBaNGw3NWl4dEFpOVVzTFhsc0c5bnN0ZFNDdXJ1WmFDcFM5?=
	=?utf-8?B?M2xJT0xmS1h2V0NsMW1LdWRGRTFIZ1lKOXVBOFFEZXdPTzZEc1JUNnQ3UXk2?=
	=?utf-8?B?eERkcnIzQzZhMXA2dnd4S3ZpRVRaaEQ3b3I4alhCZXkyWkliakNTUENoQ002?=
	=?utf-8?B?OWhCQkhwV3RuT0VUK3RSSjFrRVRwMnBwcEE1VGo2YkFHTE1PR3NKZ0wrMnFF?=
	=?utf-8?B?bk42S3F0L2ZMZHJOeTFUMXdmUllqa1JrRlNLUGdzalRVWE1KWHJrTkJMbEhw?=
	=?utf-8?B?d1hqQVQ3VUwwbTIxb2xGWm1KYnFFUnRUcTZmTnlURkZNMlZFRzZxMWJNbzBJ?=
	=?utf-8?B?aElLRk9ON1NYZTlGZENSYnEzdmN1L2VGUDNhS1ViTWd2eW9Kdm4zYUlKYmc2?=
	=?utf-8?B?Q3ZQVkZNRjZmV1p6Ymc0VUIyUGt4NU44YnhYUWwvWEszRVJ0SVNQM1hqRjZv?=
	=?utf-8?B?WWxFZTNjWWdkMnFWZFFLMFcza1JqZG9FeElsVjhRMFI4THplc2pidUJhd3hh?=
	=?utf-8?B?RkZEcjFDMHFjUHlYNHAvdHdXVHZQMnoxelBpQlRoQ0JGUlpHOHdEZmUzdGN6?=
	=?utf-8?B?UFFESGlWMytKNDlQV0RzUGFCQzNIenBjZDNvaGpEZ3lvR1ZiTkZoeEpJd1lI?=
	=?utf-8?B?NXBaV2NrMll2VkQ0cXZsZk9nSk9VRmo4dUdXSlBwOVowSmFCSU5WVEZGV3ds?=
	=?utf-8?B?bjk4bSt2YnZJWTI5WmVCd2JFeklUeTNPRVNWVDRxOU9nMVZsTGI3WVlXMVJv?=
	=?utf-8?B?U2tzSS9vaExUdkI0M2JTc0J5N1NOK2graVhJRDd3eGQyOFAxNFJyWFdOTkdE?=
	=?utf-8?B?V0RISkNSQUpkQ2RoTk01ekc5eEJ0Q2t0bXUvOG93YjhoN3BQRjJua29oRzN3?=
	=?utf-8?B?ZVUxMVpyYStLS0EzVFczTlQ1UVFBeWZxMEZocG1XWkdiTDJ0b3FJc0pSdElR?=
	=?utf-8?B?b0xKUldjYjIrLzNZODVkSjh2ZEsvN2ErRDVSdjJJQmg0cUpKcmFLTm44TG9q?=
	=?utf-8?B?dE5GbXc2d2VESStzSDFCSEtYeFZoOTJOZlRIZVJxc0NoaFR2NFhQNGU1K3oz?=
	=?utf-8?B?bjNaU3FmU2pEc3lZaThMbWtSN0J3LzhWcy8wOUl4T0NQZXdvTzFqbEMxNmx6?=
	=?utf-8?B?WklWMWIwb0VPOGJ1U2kwaGNHY3BVMGdMUjFxYXBxUnJOVDlOVVA3eVhUUXgw?=
	=?utf-8?B?TkFLOXZDeG1FWGkrY2oyUnJ1WmdveVlqYWVvNnVjQzllY2treThWdW5DUGdr?=
	=?utf-8?B?QzRJNDYrL0RVaklYd0F4VFNteU5WUFJiT1dhSHNobHlnb0lRblFCYlJMb3Vn?=
	=?utf-8?B?aklXSlFGS1M5KzNIQU5icTZxRFBwRVlON3ZoeEtrY3ZISzB2N3Jibkc4WHBU?=
	=?utf-8?Q?OBoJY5t9a9gI6Zsr9tfD4TJJ2gXviMhi8KEqk=3D?=
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	6:t2EmnNxEobI7u26MyGWqtm7ZmsXMieO+QObmEG86xkYwtJXuAp1oZirUU13l3koo8T6zJRd2S9yiAIYBxMvB450oC69POdmFun55ASrWIw6syHgAJrlMloqkclv/mFFyt2AkrhnRv5jeeJ3M2jltK2R/5D2w8Ig3wEpjlCq9PolXoSoFEPT4sn/2LMPpzhTdWDauPWsSgUTLJLBxSzlNMhe3MAhlyze+LQolvZeQMWBOv+PLiJnoO146KNZ2K1h3/Ydnt85GH/iMUXR5ilJznqNMGNsOt/iChkI8jyezb0/JCal10lNdzuJvXdaSOrvVykYJDcPVtbB8L9jAR3lixg==;
	5:BxnDzUwWj+SGCBOukiyYzqnXCyJJXsq8XV4DukDoHN1R0opQJZYScYZBIATzd1CmmaDpCr+PP+kGKLNXtBv3uNOtxNUsqj2rUZewnFmTvkgOByYJY1AzUt3TFtGxMSDk0fNG22b+rDu2LKoOC8/x7Q==;
	24:tp3KF3bo4TAbnY2ycRxhnsh+ejHLpnlkEupblMGJ5h9he6iV/mQKCB2hM7nzYE2XCIi9nJlrT5a2DwxpJyagPoHrtATfAYQxilavvWCCk0A=;
	7:7OplTI4GNvGzrA3l1vNYzgO3DReKvjgQn4ebd2R+PhllXBKzomq8aX6CN+QyRbaHRB64CEDFiluUEEUkQ7wNzw10DoDVUpsWk2zSH6T06Aer561Ec/ov6b8s9py1+am8ArGIWQLJxwxaol3FP2naj3w429x5jSDTMKB20vnS5kRQmYagROw81J5/ez8U4o8e6o3YA45EcJTduJJk8gkTF+c2W1IMopYj2kcyxjN8/e+xwrwrN4KNPnNLU6K34tw3
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1139;
	20:L1zeJVukPENlRt+oo4Pe5QPip9b5RJI84T9FbpZy9lNtz8rqkuFKuyfTNlSHPQMb4nJBrBJ/O+GRPVa+asIClveB9nXaqCl6l1x4o6oW3wg0JOEAQQ4t/ZLx22enOYFp8QjT+H2lijcGXzgty5KEmIGUAOJt18OkiMiURmYRFqSNDUNH5G1DkhHHEgS1/IwisM2NLe2RNUle3UaUi1t4iiUMDlJ1Nj7B4KBnTRF3uiHlTuMAwPGAie+Dvc8h3rPr
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 22 Aug 2016 22:39:10.6610
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR12MB1139
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Aug. 22, 2016, 10:39 p.m.</div>
<pre class="content">
This patch adds the support to check if SME has been enabled and if the
mem_encrypt=on command line option is set. If both of these conditions
are true, then the encryption mask is set and the kernel is encrypted
&quot;in place.&quot;
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 Documentation/kernel-parameters.txt |    3 
 arch/x86/kernel/asm-offsets.c       |    2 
 arch/x86/kernel/mem_encrypt.S       |  302 +++++++++++++++++++++++++++++++++++
 arch/x86/mm/mem_encrypt.c           |    2 
 4 files changed, 309 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Sept. 12, 2016, 5:08 p.m.</div>
<pre class="content">
On Mon, Aug 22, 2016 at 05:39:08PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; This patch adds the support to check if SME has been enabled and if the</span>
<span class="quote">&gt; mem_encrypt=on command line option is set. If both of these conditions</span>
<span class="quote">&gt; are true, then the encryption mask is set and the kernel is encrypted</span>
<span class="quote">&gt; &quot;in place.&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  Documentation/kernel-parameters.txt |    3 </span>
<span class="quote">&gt;  arch/x86/kernel/asm-offsets.c       |    2 </span>
<span class="quote">&gt;  arch/x86/kernel/mem_encrypt.S       |  302 +++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c           |    2 </span>
<span class="quote">&gt;  4 files changed, 309 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; index 46c030a..a1986c8 100644</span>
<span class="quote">&gt; --- a/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; +++ b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; @@ -2268,6 +2268,9 @@ bytes respectively. Such letter suffixes can also be entirely omitted.</span>
<span class="quote">&gt;  			memory contents and reserves bad memory</span>
<span class="quote">&gt;  			regions that are detected.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	mem_encrypt=on	[X86_64] Enable memory encryption on processors</span>
<span class="quote">&gt; +			that support this feature.</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	meye.*=		[HW] Set MotionEye Camera parameters</span>
<span class="quote">&gt;  			See Documentation/video4linux/meye.txt.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/asm-offsets.c b/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt; index 2bd5c6f..e485ada 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt; @@ -85,6 +85,8 @@ void common(void) {</span>
<span class="quote">&gt;  	OFFSET(BP_init_size, boot_params, hdr.init_size);</span>
<span class="quote">&gt;  	OFFSET(BP_pref_address, boot_params, hdr.pref_address);</span>
<span class="quote">&gt;  	OFFSET(BP_code32_start, boot_params, hdr.code32_start);</span>
<span class="quote">&gt; +	OFFSET(BP_cmd_line_ptr, boot_params, hdr.cmd_line_ptr);</span>
<span class="quote">&gt; +	OFFSET(BP_ext_cmd_line_ptr, boot_params, ext_cmd_line_ptr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	BLANK();</span>
<span class="quote">&gt;  	DEFINE(PTREGS_SIZE, sizeof(struct pt_regs));</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/mem_encrypt.S b/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt; index f2e0536..bf9f6a9 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt; @@ -12,13 +12,230 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;linux/linkage.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#include &lt;asm/processor-flags.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/page.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/msr.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/asm-offsets.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	.text</span>
<span class="quote">&gt;  	.code64</span>
<span class="quote">&gt;  ENTRY(sme_enable)</span>
<span class="quote">&gt; +#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="quote">&gt; +	/* Check for AMD processor */</span>
<span class="quote">&gt; +	xorl	%eax, %eax</span>
<span class="quote">&gt; +	cpuid</span>
<span class="quote">&gt; +	cmpl    $0x68747541, %ebx	# AuthenticAMD</span>
<span class="quote">&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt; +	cmpl    $0x69746e65, %edx</span>
<span class="quote">&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt; +	cmpl    $0x444d4163, %ecx</span>
<span class="quote">&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Check for memory encryption leaf */</span>
<span class="quote">&gt; +	movl	$0x80000000, %eax</span>
<span class="quote">&gt; +	cpuid</span>
<span class="quote">&gt; +	cmpl	$0x8000001f, %eax</span>
<span class="quote">&gt; +	jb	.Lmem_encrypt_exit</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Check for memory encryption feature:</span>
<span class="quote">&gt; +	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="quote">&gt; +	 *     Secure Memory Encryption support</span>
<span class="quote">&gt; +	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="quote">&gt; +	 *     Pagetable bit position used to indicate encryption</span>
<span class="quote">&gt; +	 *   CPUID Fn8000_001F[EBX] - Bits 11:6</span>
<span class="quote">&gt; +	 *     Reduction in physical address space (in bits) when enabled</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	movl	$0x8000001f, %eax</span>
<span class="quote">&gt; +	cpuid</span>
<span class="quote">&gt; +	bt	$0, %eax</span>
<span class="quote">&gt; +	jnc	.Lmem_encrypt_exit</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* Check if BIOS/UEFI has allowed memory encryption */</span>
<span class="quote">&gt; +	movl	$MSR_K8_SYSCFG, %ecx</span>
<span class="quote">&gt; +	rdmsr</span>
<span class="quote">&gt; +	bt	$MSR_K8_SYSCFG_MEM_ENCRYPT_BIT, %eax</span>
<span class="quote">&gt; +	jnc	.Lmem_encrypt_exit</span>

Like other people suggested, it would be great if this were in C. Should be
actually readable :)
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	/* Check for the mem_encrypt=on command line option */</span>
<span class="quote">&gt; +	push	%rsi			/* Save RSI (real_mode_data) */</span>
<span class="quote">&gt; +	push	%rbx			/* Save CPUID information */</span>
<span class="quote">&gt; +	movl	BP_ext_cmd_line_ptr(%rsi), %ecx</span>
<span class="quote">&gt; +	shlq	$32, %rcx</span>
<span class="quote">&gt; +	movl	BP_cmd_line_ptr(%rsi), %edi</span>
<span class="quote">&gt; +	addq	%rcx, %rdi</span>
<span class="quote">&gt; +	leaq	mem_encrypt_enable_option(%rip), %rsi</span>
<span class="quote">&gt; +	call	cmdline_find_option_bool</span>
<span class="quote">&gt; +	pop	%rbx			/* Restore CPUID information */</span>
<span class="quote">&gt; +	pop	%rsi			/* Restore RSI (real_mode_data) */</span>
<span class="quote">&gt; +	testl	%eax, %eax</span>
<span class="quote">&gt; +	jz	.Lno_mem_encrypt</span>

This too.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	/* Set memory encryption mask */</span>
<span class="quote">&gt; +	movl	%ebx, %ecx</span>
<span class="quote">&gt; +	andl	$0x3f, %ecx</span>
<span class="quote">&gt; +	bts	%ecx, sme_me_mask(%rip)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +.Lno_mem_encrypt:</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * BIOS/UEFI has allowed memory encryption so we need to set</span>
<span class="quote">&gt; +	 * the amount of physical address space reduction even if</span>
<span class="quote">&gt; +	 * the user decides not to use memory encryption.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	movl	%ebx, %ecx</span>
<span class="quote">&gt; +	shrl	$6, %ecx</span>
<span class="quote">&gt; +	andl	$0x3f, %ecx</span>
<span class="quote">&gt; +	movb	%cl, sme_me_loss(%rip)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +.Lmem_encrypt_exit:</span>
<span class="quote">&gt; +#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	ret</span>
<span class="quote">&gt;  ENDPROC(sme_enable)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  ENTRY(sme_encrypt_kernel)</span>

This should be doable too but I guess you&#39;ll have to try it to see.

...
<span class="quote">
&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; index 2f28d87..1154353 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt; @@ -183,6 +183,8 @@ void __init mem_encrypt_init(void)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Make SWIOTLB use an unencrypted DMA area */</span>
<span class="quote">&gt;  	swiotlb_clear_encryption();</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	pr_info(&quot;memory encryption active\n&quot;);</span>

Let&#39;s make it more official with nice caps and so on...

	pr_info(&quot;AMD Secure Memory Encryption active.\n&quot;);
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Sept. 14, 2016, 2:31 p.m.</div>
<pre class="content">
On 09/12/2016 12:08 PM, Borislav Petkov wrote:
<span class="quote">&gt; On Mon, Aug 22, 2016 at 05:39:08PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; This patch adds the support to check if SME has been enabled and if the</span>
<span class="quote">&gt;&gt; mem_encrypt=on command line option is set. If both of these conditions</span>
<span class="quote">&gt;&gt; are true, then the encryption mask is set and the kernel is encrypted</span>
<span class="quote">&gt;&gt; &quot;in place.&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  Documentation/kernel-parameters.txt |    3 </span>
<span class="quote">&gt;&gt;  arch/x86/kernel/asm-offsets.c       |    2 </span>
<span class="quote">&gt;&gt;  arch/x86/kernel/mem_encrypt.S       |  302 +++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;  arch/x86/mm/mem_encrypt.c           |    2 </span>
<span class="quote">&gt;&gt;  4 files changed, 309 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt;&gt; index 46c030a..a1986c8 100644</span>
<span class="quote">&gt;&gt; --- a/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt;&gt; +++ b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt;&gt; @@ -2268,6 +2268,9 @@ bytes respectively. Such letter suffixes can also be entirely omitted.</span>
<span class="quote">&gt;&gt;  			memory contents and reserves bad memory</span>
<span class="quote">&gt;&gt;  			regions that are detected.</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +	mem_encrypt=on	[X86_64] Enable memory encryption on processors</span>
<span class="quote">&gt;&gt; +			that support this feature.</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	meye.*=		[HW] Set MotionEye Camera parameters</span>
<span class="quote">&gt;&gt;  			See Documentation/video4linux/meye.txt.</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kernel/asm-offsets.c b/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt;&gt; index 2bd5c6f..e485ada 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kernel/asm-offsets.c</span>
<span class="quote">&gt;&gt; @@ -85,6 +85,8 @@ void common(void) {</span>
<span class="quote">&gt;&gt;  	OFFSET(BP_init_size, boot_params, hdr.init_size);</span>
<span class="quote">&gt;&gt;  	OFFSET(BP_pref_address, boot_params, hdr.pref_address);</span>
<span class="quote">&gt;&gt;  	OFFSET(BP_code32_start, boot_params, hdr.code32_start);</span>
<span class="quote">&gt;&gt; +	OFFSET(BP_cmd_line_ptr, boot_params, hdr.cmd_line_ptr);</span>
<span class="quote">&gt;&gt; +	OFFSET(BP_ext_cmd_line_ptr, boot_params, ext_cmd_line_ptr);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	BLANK();</span>
<span class="quote">&gt;&gt;  	DEFINE(PTREGS_SIZE, sizeof(struct pt_regs));</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kernel/mem_encrypt.S b/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt;&gt; index f2e0536..bf9f6a9 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kernel/mem_encrypt.S</span>
<span class="quote">&gt;&gt; @@ -12,13 +12,230 @@</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #include &lt;linux/linkage.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +#include &lt;asm/processor-flags.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/page.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/msr.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/asm-offsets.h&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	.text</span>
<span class="quote">&gt;&gt;  	.code64</span>
<span class="quote">&gt;&gt;  ENTRY(sme_enable)</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="quote">&gt;&gt; +	/* Check for AMD processor */</span>
<span class="quote">&gt;&gt; +	xorl	%eax, %eax</span>
<span class="quote">&gt;&gt; +	cpuid</span>
<span class="quote">&gt;&gt; +	cmpl    $0x68747541, %ebx	# AuthenticAMD</span>
<span class="quote">&gt;&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt;&gt; +	cmpl    $0x69746e65, %edx</span>
<span class="quote">&gt;&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt;&gt; +	cmpl    $0x444d4163, %ecx</span>
<span class="quote">&gt;&gt; +	jne     .Lmem_encrypt_exit</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Check for memory encryption leaf */</span>
<span class="quote">&gt;&gt; +	movl	$0x80000000, %eax</span>
<span class="quote">&gt;&gt; +	cpuid</span>
<span class="quote">&gt;&gt; +	cmpl	$0x8000001f, %eax</span>
<span class="quote">&gt;&gt; +	jb	.Lmem_encrypt_exit</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * Check for memory encryption feature:</span>
<span class="quote">&gt;&gt; +	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="quote">&gt;&gt; +	 *     Secure Memory Encryption support</span>
<span class="quote">&gt;&gt; +	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="quote">&gt;&gt; +	 *     Pagetable bit position used to indicate encryption</span>
<span class="quote">&gt;&gt; +	 *   CPUID Fn8000_001F[EBX] - Bits 11:6</span>
<span class="quote">&gt;&gt; +	 *     Reduction in physical address space (in bits) when enabled</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	movl	$0x8000001f, %eax</span>
<span class="quote">&gt;&gt; +	cpuid</span>
<span class="quote">&gt;&gt; +	bt	$0, %eax</span>
<span class="quote">&gt;&gt; +	jnc	.Lmem_encrypt_exit</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Check if BIOS/UEFI has allowed memory encryption */</span>
<span class="quote">&gt;&gt; +	movl	$MSR_K8_SYSCFG, %ecx</span>
<span class="quote">&gt;&gt; +	rdmsr</span>
<span class="quote">&gt;&gt; +	bt	$MSR_K8_SYSCFG_MEM_ENCRYPT_BIT, %eax</span>
<span class="quote">&gt;&gt; +	jnc	.Lmem_encrypt_exit</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Like other people suggested, it would be great if this were in C. Should be</span>
<span class="quote">&gt; actually readable :)</span>

Yup, working on that.  I&#39;ll try and make it all completely C.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Check for the mem_encrypt=on command line option */</span>
<span class="quote">&gt;&gt; +	push	%rsi			/* Save RSI (real_mode_data) */</span>
<span class="quote">&gt;&gt; +	push	%rbx			/* Save CPUID information */</span>
<span class="quote">&gt;&gt; +	movl	BP_ext_cmd_line_ptr(%rsi), %ecx</span>
<span class="quote">&gt;&gt; +	shlq	$32, %rcx</span>
<span class="quote">&gt;&gt; +	movl	BP_cmd_line_ptr(%rsi), %edi</span>
<span class="quote">&gt;&gt; +	addq	%rcx, %rdi</span>
<span class="quote">&gt;&gt; +	leaq	mem_encrypt_enable_option(%rip), %rsi</span>
<span class="quote">&gt;&gt; +	call	cmdline_find_option_bool</span>
<span class="quote">&gt;&gt; +	pop	%rbx			/* Restore CPUID information */</span>
<span class="quote">&gt;&gt; +	pop	%rsi			/* Restore RSI (real_mode_data) */</span>
<span class="quote">&gt;&gt; +	testl	%eax, %eax</span>
<span class="quote">&gt;&gt; +	jz	.Lno_mem_encrypt</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This too.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/* Set memory encryption mask */</span>
<span class="quote">&gt;&gt; +	movl	%ebx, %ecx</span>
<span class="quote">&gt;&gt; +	andl	$0x3f, %ecx</span>
<span class="quote">&gt;&gt; +	bts	%ecx, sme_me_mask(%rip)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +.Lno_mem_encrypt:</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * BIOS/UEFI has allowed memory encryption so we need to set</span>
<span class="quote">&gt;&gt; +	 * the amount of physical address space reduction even if</span>
<span class="quote">&gt;&gt; +	 * the user decides not to use memory encryption.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	movl	%ebx, %ecx</span>
<span class="quote">&gt;&gt; +	shrl	$6, %ecx</span>
<span class="quote">&gt;&gt; +	andl	$0x3f, %ecx</span>
<span class="quote">&gt;&gt; +	movb	%cl, sme_me_loss(%rip)</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +.Lmem_encrypt_exit:</span>
<span class="quote">&gt;&gt; +#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	ret</span>
<span class="quote">&gt;&gt;  ENDPROC(sme_enable)</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  ENTRY(sme_encrypt_kernel)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This should be doable too but I guess you&#39;ll have to try it to see.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; index 2f28d87..1154353 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="quote">&gt;&gt; @@ -183,6 +183,8 @@ void __init mem_encrypt_init(void)</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	/* Make SWIOTLB use an unencrypted DMA area */</span>
<span class="quote">&gt;&gt;  	swiotlb_clear_encryption();</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	pr_info(&quot;memory encryption active\n&quot;);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Let&#39;s make it more official with nice caps and so on...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	pr_info(&quot;AMD Secure Memory Encryption active.\n&quot;);</span>

Will do.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="p_header">index 46c030a..a1986c8 100644</span>
<span class="p_header">--- a/Documentation/kernel-parameters.txt</span>
<span class="p_header">+++ b/Documentation/kernel-parameters.txt</span>
<span class="p_chunk">@@ -2268,6 +2268,9 @@</span> <span class="p_context"> bytes respectively. Such letter suffixes can also be entirely omitted.</span>
 			memory contents and reserves bad memory
 			regions that are detected.
 
<span class="p_add">+	mem_encrypt=on	[X86_64] Enable memory encryption on processors</span>
<span class="p_add">+			that support this feature.</span>
<span class="p_add">+</span>
 	meye.*=		[HW] Set MotionEye Camera parameters
 			See Documentation/video4linux/meye.txt.
 
<span class="p_header">diff --git a/arch/x86/kernel/asm-offsets.c b/arch/x86/kernel/asm-offsets.c</span>
<span class="p_header">index 2bd5c6f..e485ada 100644</span>
<span class="p_header">--- a/arch/x86/kernel/asm-offsets.c</span>
<span class="p_header">+++ b/arch/x86/kernel/asm-offsets.c</span>
<span class="p_chunk">@@ -85,6 +85,8 @@</span> <span class="p_context"> void common(void) {</span>
 	OFFSET(BP_init_size, boot_params, hdr.init_size);
 	OFFSET(BP_pref_address, boot_params, hdr.pref_address);
 	OFFSET(BP_code32_start, boot_params, hdr.code32_start);
<span class="p_add">+	OFFSET(BP_cmd_line_ptr, boot_params, hdr.cmd_line_ptr);</span>
<span class="p_add">+	OFFSET(BP_ext_cmd_line_ptr, boot_params, ext_cmd_line_ptr);</span>
 
 	BLANK();
 	DEFINE(PTREGS_SIZE, sizeof(struct pt_regs));
<span class="p_header">diff --git a/arch/x86/kernel/mem_encrypt.S b/arch/x86/kernel/mem_encrypt.S</span>
<span class="p_header">index f2e0536..bf9f6a9 100644</span>
<span class="p_header">--- a/arch/x86/kernel/mem_encrypt.S</span>
<span class="p_header">+++ b/arch/x86/kernel/mem_encrypt.S</span>
<span class="p_chunk">@@ -12,13 +12,230 @@</span> <span class="p_context"></span>
 
 #include &lt;linux/linkage.h&gt;
 
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
<span class="p_add">+#include &lt;asm/page.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/asm-offsets.h&gt;</span>
<span class="p_add">+</span>
 	.text
 	.code64
 ENTRY(sme_enable)
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	/* Check for AMD processor */</span>
<span class="p_add">+	xorl	%eax, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	cmpl    $0x68747541, %ebx	# AuthenticAMD</span>
<span class="p_add">+	jne     .Lmem_encrypt_exit</span>
<span class="p_add">+	cmpl    $0x69746e65, %edx</span>
<span class="p_add">+	jne     .Lmem_encrypt_exit</span>
<span class="p_add">+	cmpl    $0x444d4163, %ecx</span>
<span class="p_add">+	jne     .Lmem_encrypt_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for memory encryption leaf */</span>
<span class="p_add">+	movl	$0x80000000, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	cmpl	$0x8000001f, %eax</span>
<span class="p_add">+	jb	.Lmem_encrypt_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for memory encryption feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_add">+	 *     Secure Memory Encryption support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 11:6</span>
<span class="p_add">+	 *     Reduction in physical address space (in bits) when enabled</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movl	$0x8000001f, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	bt	$0, %eax</span>
<span class="p_add">+	jnc	.Lmem_encrypt_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if BIOS/UEFI has allowed memory encryption */</span>
<span class="p_add">+	movl	$MSR_K8_SYSCFG, %ecx</span>
<span class="p_add">+	rdmsr</span>
<span class="p_add">+	bt	$MSR_K8_SYSCFG_MEM_ENCRYPT_BIT, %eax</span>
<span class="p_add">+	jnc	.Lmem_encrypt_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check for the mem_encrypt=on command line option */</span>
<span class="p_add">+	push	%rsi			/* Save RSI (real_mode_data) */</span>
<span class="p_add">+	push	%rbx			/* Save CPUID information */</span>
<span class="p_add">+	movl	BP_ext_cmd_line_ptr(%rsi), %ecx</span>
<span class="p_add">+	shlq	$32, %rcx</span>
<span class="p_add">+	movl	BP_cmd_line_ptr(%rsi), %edi</span>
<span class="p_add">+	addq	%rcx, %rdi</span>
<span class="p_add">+	leaq	mem_encrypt_enable_option(%rip), %rsi</span>
<span class="p_add">+	call	cmdline_find_option_bool</span>
<span class="p_add">+	pop	%rbx			/* Restore CPUID information */</span>
<span class="p_add">+	pop	%rsi			/* Restore RSI (real_mode_data) */</span>
<span class="p_add">+	testl	%eax, %eax</span>
<span class="p_add">+	jz	.Lno_mem_encrypt</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Set memory encryption mask */</span>
<span class="p_add">+	movl	%ebx, %ecx</span>
<span class="p_add">+	andl	$0x3f, %ecx</span>
<span class="p_add">+	bts	%ecx, sme_me_mask(%rip)</span>
<span class="p_add">+</span>
<span class="p_add">+.Lno_mem_encrypt:</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * BIOS/UEFI has allowed memory encryption so we need to set</span>
<span class="p_add">+	 * the amount of physical address space reduction even if</span>
<span class="p_add">+	 * the user decides not to use memory encryption.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movl	%ebx, %ecx</span>
<span class="p_add">+	shrl	$6, %ecx</span>
<span class="p_add">+	andl	$0x3f, %ecx</span>
<span class="p_add">+	movb	%cl, sme_me_loss(%rip)</span>
<span class="p_add">+</span>
<span class="p_add">+.Lmem_encrypt_exit:</span>
<span class="p_add">+#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="p_add">+</span>
 	ret
 ENDPROC(sme_enable)
 
 ENTRY(sme_encrypt_kernel)
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	/* If SME is not active then no need to encrypt the kernel */</span>
<span class="p_add">+	cmpq	$0, sme_me_mask(%rip)</span>
<span class="p_add">+	jz	.Lencrypt_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Encrypt the kernel.</span>
<span class="p_add">+	 * Pagetables for performing kernel encryption:</span>
<span class="p_add">+	 *   0x0000000000 - 0x00FFFFFFFF will map just the memory occupied by</span>
<span class="p_add">+	 *				 the kernel as encrypted memory</span>
<span class="p_add">+	 *   0x8000000000 - 0x80FFFFFFFF will map all memory as write-protected,</span>
<span class="p_add">+	 *				 non-encrypted</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * The use of write-protected memory will prevent any of the</span>
<span class="p_add">+	 * non-encrypted memory from being cached.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * 0x00... and 0x80... represent the first and second PGD entries.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * This collection of entries will be created in an area outside</span>
<span class="p_add">+	 * of the area that is being encrypted (outside the kernel) and</span>
<span class="p_add">+	 * requires 11 4K pages:</span>
<span class="p_add">+	 *   1 - PGD</span>
<span class="p_add">+	 *   2 - PUDs (1 for each mapping)</span>
<span class="p_add">+	 *   8 - PMDs (4 for each mapping)</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	leaq	_end(%rip), %rdi</span>
<span class="p_add">+	addq	$~PMD_PAGE_MASK, %rdi</span>
<span class="p_add">+	andq	$PMD_PAGE_MASK, %rdi	/* RDI points to the new PGD */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Clear the pagetable memory */</span>
<span class="p_add">+	movq	%rdi, %rbx		/* Save pointer to PGD */</span>
<span class="p_add">+	movl	$(4096 * 11), %ecx</span>
<span class="p_add">+	xorl	%eax, %eax</span>
<span class="p_add">+	rep	stosb</span>
<span class="p_add">+	movq	%rbx, %rdi		/* Restore pointer to PGD */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Set up PGD entries for the two mappings */</span>
<span class="p_add">+	leaq	(0x1000 + 0x03)(%rdi), %rbx	/* PUD for encrypted kernel */</span>
<span class="p_add">+	movq	%rbx, (%rdi)</span>
<span class="p_add">+	leaq	(0x2000 + 0x03)(%rdi), %rbx	/* PUD for unencrypted kernel */</span>
<span class="p_add">+	movq	%rbx, 8(%rdi)</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Set up PUD entries (4 per mapping) for the two mappings */</span>
<span class="p_add">+	leaq	(0x3000 + 0x03)(%rdi), %rbx	/* PMD for encrypted kernel */</span>
<span class="p_add">+	leaq	(0x7000 + 0x03)(%rdi), %rdx	/* PMD for unencrypted kernel */</span>
<span class="p_add">+	xorq	%rcx, %rcx</span>
<span class="p_add">+1:</span>
<span class="p_add">+	/* Populate the PUD entries in each mapping */</span>
<span class="p_add">+	movq	%rbx, 0x1000(%rdi, %rcx, 8)</span>
<span class="p_add">+	movq	%rdx, 0x2000(%rdi, %rcx, 8)</span>
<span class="p_add">+	addq	$0x1000, %rbx</span>
<span class="p_add">+	addq	$0x1000, %rdx</span>
<span class="p_add">+	incq	%rcx</span>
<span class="p_add">+	cmpq	$4, %rcx</span>
<span class="p_add">+	jb	1b</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Set up PMD entries (4GB worth) for the two mappings.</span>
<span class="p_add">+	 *   For the encrypted kernel mapping, when R11 is above RDX</span>
<span class="p_add">+	 *   and below RDI then we know we are in the kernel and we</span>
<span class="p_add">+	 *   set the encryption mask for that PMD entry.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 *   The use of _PAGE_PAT and _PAGE_PWT will provide for the</span>
<span class="p_add">+	 *   write-protected mapping.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movq	sme_me_mask(%rip), %r10</span>
<span class="p_add">+	movq	$__PAGE_KERNEL_LARGE_EXEC, %r11</span>
<span class="p_add">+	andq	$~_PAGE_GLOBAL, %r11</span>
<span class="p_add">+	movq	%r11, %r12</span>
<span class="p_add">+	andq	$~_PAGE_CACHE_MASK, %r12</span>
<span class="p_add">+	orq	$(_PAGE_PAT | _PAGE_PWT), %r12	/* PA5 index */</span>
<span class="p_add">+	xorq	%rcx, %rcx</span>
<span class="p_add">+	leaq	_text(%rip), %rdx	/* RDX points to start of kernel */</span>
<span class="p_add">+1:</span>
<span class="p_add">+	/* Populate the PMD entries in each mapping */</span>
<span class="p_add">+	movq	%r11, 0x3000(%rdi, %rcx, 8)</span>
<span class="p_add">+	movq	%r12, 0x7000(%rdi, %rcx, 8)</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check if we are in the kernel range, and if so, set the</span>
<span class="p_add">+	 * memory encryption mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	cmpq	%r11, %rdx</span>
<span class="p_add">+	jae	2f</span>
<span class="p_add">+	cmpq	%r11, %rdi</span>
<span class="p_add">+	jbe	2f</span>
<span class="p_add">+	orq	%r10, 0x3000(%rdi, %rcx, 8)</span>
<span class="p_add">+2:</span>
<span class="p_add">+	addq	$PMD_SIZE, %r11</span>
<span class="p_add">+	addq	$PMD_SIZE, %r12</span>
<span class="p_add">+	incq	%rcx</span>
<span class="p_add">+	cmpq	$2048, %rcx</span>
<span class="p_add">+	jb	1b</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Set up a one page stack in the non-encrypted memory area.</span>
<span class="p_add">+	 *   Set RAX to point to the next page in memory after all the</span>
<span class="p_add">+	 *   page tables. The stack grows from the bottom so point to</span>
<span class="p_add">+	 *   the end of the page.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	leaq	(4096 * 11)(%rdi), %rax</span>
<span class="p_add">+	addq	$PAGE_SIZE, %rax</span>
<span class="p_add">+	movq	%rsp, %rbp</span>
<span class="p_add">+	movq	%rax, %rsp</span>
<span class="p_add">+	push	%rbp			/* Save original stack pointer */</span>
<span class="p_add">+</span>
<span class="p_add">+	push	%rsi			/* Save RSI (real mode data) */</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Copy encryption routine into safe memory</span>
<span class="p_add">+	 *   - RAX points to the page after all the page tables and stack</span>
<span class="p_add">+	 *     where the routine will copied</span>
<span class="p_add">+	 *   - RDI points to the PGD table</span>
<span class="p_add">+	 *   - Setup registers for call</span>
<span class="p_add">+	 * and then call it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movq	%rdi, %rbx</span>
<span class="p_add">+</span>
<span class="p_add">+	leaq	.Lencrypt_start(%rip), %rsi</span>
<span class="p_add">+	movq	%rax, %rdi</span>
<span class="p_add">+	movq	$(.Lencrypt_stop - .Lencrypt_start), %rcx</span>
<span class="p_add">+	rep	movsb</span>
<span class="p_add">+</span>
<span class="p_add">+	leaq	_text(%rip), %rsi	/* Kernel start */</span>
<span class="p_add">+	movq	%rbx, %rcx		/* New PGD start */</span>
<span class="p_add">+	subq	%rsi, %rcx		/* Size of area to encrypt */</span>
<span class="p_add">+</span>
<span class="p_add">+	movq	%rsi, %rdi		/* Encrypted kernel space start */</span>
<span class="p_add">+	movq	$1, %rsi</span>
<span class="p_add">+	shlq	$PGDIR_SHIFT, %rsi</span>
<span class="p_add">+	addq	%rdi, %rsi		/* Non-encrypted kernel start */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Call the encryption routine */</span>
<span class="p_add">+	call	*%rax</span>
<span class="p_add">+</span>
<span class="p_add">+	pop	%rsi			/* Restore RSI (real mode data ) */</span>
<span class="p_add">+</span>
<span class="p_add">+	pop	%rsp			/* Restore original stack pointer */</span>
<span class="p_add">+.Lencrypt_exit:</span>
<span class="p_add">+#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="p_add">+</span>
 	ret
 ENDPROC(sme_encrypt_kernel)
 
<span class="p_chunk">@@ -28,6 +245,87 @@</span> <span class="p_context"> ENTRY(sme_get_me_loss)</span>
 	ret
 ENDPROC(sme_get_me_loss)
 
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Routine used to encrypt kernel.</span>
<span class="p_add">+ *   This routine must be run outside of the kernel proper since</span>
<span class="p_add">+ *   the kernel will be encrypted during the process. So this</span>
<span class="p_add">+ *   routine is defined here and then copied to an area outside</span>
<span class="p_add">+ *   of the kernel where it will remain and run un-encrypted</span>
<span class="p_add">+ *   during execution.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *   On entry the registers must be:</span>
<span class="p_add">+ *   - RAX points to this routine</span>
<span class="p_add">+ *   - RBX points to new PGD to use</span>
<span class="p_add">+ *   - RCX contains the kernel length</span>
<span class="p_add">+ *   - RSI points to the non-encrypted kernel space</span>
<span class="p_add">+ *   - RDI points to the encrypted kernel space</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The kernel will be encrypted by copying from the non-encrypted</span>
<span class="p_add">+ * kernel space to a temporary buffer and then copying from the</span>
<span class="p_add">+ * temporary buffer back to the encrypted kernel space. The physical</span>
<span class="p_add">+ * addresses of the two kernel space mappings are the same which</span>
<span class="p_add">+ * results in the kernel being encrypted &quot;in place&quot;.</span>
<span class="p_add">+ */</span>
<span class="p_add">+.Lencrypt_start:</span>
<span class="p_add">+	/* Enable the new page tables */</span>
<span class="p_add">+	mov	%rbx, %cr3</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Flush any global TLBs */</span>
<span class="p_add">+	mov	%cr4, %rbx</span>
<span class="p_add">+	andq	$~X86_CR4_PGE, %rbx</span>
<span class="p_add">+	mov	%rbx, %cr4</span>
<span class="p_add">+	orq	$X86_CR4_PGE, %rbx</span>
<span class="p_add">+	mov	%rbx, %cr4</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Set the PAT register PA5 entry to write-protect */</span>
<span class="p_add">+	push	%rax</span>
<span class="p_add">+	push	%rcx</span>
<span class="p_add">+	movl	$MSR_IA32_CR_PAT, %ecx</span>
<span class="p_add">+	rdmsr</span>
<span class="p_add">+	push	%rdx			/* Save original PAT value */</span>
<span class="p_add">+	andl	$0xffff00ff, %edx	/* Clear PA5 */</span>
<span class="p_add">+	orl	$0x00000500, %edx	/* Set PA5 to WP */</span>
<span class="p_add">+	wrmsr</span>
<span class="p_add">+	pop	%rdx			/* RDX contains original PAT value */</span>
<span class="p_add">+	pop	%rcx</span>
<span class="p_add">+	pop	%rax</span>
<span class="p_add">+</span>
<span class="p_add">+	movq	%rsi, %r10		/* Save source address */</span>
<span class="p_add">+	movq	%rdi, %r11		/* Save destination address */</span>
<span class="p_add">+	movq	%rcx, %r12		/* Save length */</span>
<span class="p_add">+	addq	$PAGE_SIZE, %rax	/* RAX now points to temp copy page */</span>
<span class="p_add">+</span>
<span class="p_add">+	wbinvd				/* Invalidate any cache entries */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Copy/encrypt 2MB at a time */</span>
<span class="p_add">+1:</span>
<span class="p_add">+	movq	%r10, %rsi</span>
<span class="p_add">+	movq	%rax, %rdi</span>
<span class="p_add">+	movq	$PMD_PAGE_SIZE, %rcx</span>
<span class="p_add">+	rep	movsb</span>
<span class="p_add">+</span>
<span class="p_add">+	movq	%rax, %rsi</span>
<span class="p_add">+	movq	%r11, %rdi</span>
<span class="p_add">+	movq	$PMD_PAGE_SIZE, %rcx</span>
<span class="p_add">+	rep	movsb</span>
<span class="p_add">+</span>
<span class="p_add">+	addq	$PMD_PAGE_SIZE, %r10</span>
<span class="p_add">+	addq	$PMD_PAGE_SIZE, %r11</span>
<span class="p_add">+	subq	$PMD_PAGE_SIZE, %r12</span>
<span class="p_add">+	jnz	1b</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Restore PAT register */</span>
<span class="p_add">+	push	%rdx</span>
<span class="p_add">+	movl	$MSR_IA32_CR_PAT, %ecx</span>
<span class="p_add">+	rdmsr</span>
<span class="p_add">+	pop	%rdx</span>
<span class="p_add">+	wrmsr</span>
<span class="p_add">+</span>
<span class="p_add">+	ret</span>
<span class="p_add">+.Lencrypt_stop:</span>
<span class="p_add">+#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="p_add">+</span>
 	.data
 	.align 16
 ENTRY(sme_me_mask)
<span class="p_chunk">@@ -35,3 +333,7 @@</span> <span class="p_context"> ENTRY(sme_me_mask)</span>
 sme_me_loss:
 	.byte	0x00
 	.align	8
<span class="p_add">+</span>
<span class="p_add">+mem_encrypt_enable_option:</span>
<span class="p_add">+	.asciz &quot;mem_encrypt=on&quot;</span>
<span class="p_add">+	.align	8</span>
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 2f28d87..1154353 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -183,6 +183,8 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 
 	/* Make SWIOTLB use an unencrypted DMA area */
 	swiotlb_clear_encryption();
<span class="p_add">+</span>
<span class="p_add">+	pr_info(&quot;memory encryption active\n&quot;);</span>
 }
 
 unsigned long amd_iommu_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



