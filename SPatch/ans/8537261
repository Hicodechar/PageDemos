
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v12,25/29] HMM: split DMA mapping function in two. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v12,25/29] HMM: split DMA mapping function in two.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 8, 2016, 8:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1457469802-11850-26-git-send-email-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8537261/mbox/"
   >mbox</a>
|
   <a href="/patch/8537261/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8537261/">/patch/8537261/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 34704C0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 19:51:48 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id A5A26201C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 19:51:43 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CF009201E4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 19:51:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751822AbcCHTvk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 8 Mar 2016 14:51:40 -0500
Received: from mx1.redhat.com ([209.132.183.28]:37033 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751494AbcCHTrr (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 8 Mar 2016 14:47:47 -0500
Received: from int-mx11.intmail.prod.int.phx2.redhat.com
	(int-mx11.intmail.prod.int.phx2.redhat.com [10.5.11.24])
	by mx1.redhat.com (Postfix) with ESMTPS id 372BFA0B62;
	Tue,  8 Mar 2016 19:47:47 +0000 (UTC)
Received: from xgl-cortex.ml2.eng.bos.redhat.com
	(xgl-cortex.ml2.eng.bos.redhat.com [10.19.160.80])
	by int-mx11.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id u28JkJTg030738; Tue, 8 Mar 2016 14:47:43 -0500
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, &lt;linux-kernel@vger.kernel.org&gt;,
	linux-mm@kvack.org
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;, &lt;joro@8bytes.org&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Johannes Weiner &lt;jweiner@redhat.com&gt;,
	Larry Woodman &lt;lwoodman@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Dave Airlie &lt;airlied@redhat.com&gt;, Brendan Conoboy &lt;blc@redhat.com&gt;,
	Joe Donohue &lt;jdonohue@redhat.com&gt;, Christophe Harle &lt;charle@nvidia.com&gt;,
	Duncan Poole &lt;dpoole@nvidia.com&gt;, Sherry Cheung &lt;SCheung@nvidia.com&gt;,
	Subhash Gutti &lt;sgutti@nvidia.com&gt;, John Hubbard &lt;jhubbard@nvidia.com&gt;,
	Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;,
	Lucien Dunning &lt;ldunning@nvidia.com&gt;,
	Cameron Buschardt &lt;cabuschardt@nvidia.com&gt;,
	Arvind Gopalakrishnan &lt;arvindg@nvidia.com&gt;,
	Haggai Eran &lt;haggaie@mellanox.com&gt;,
	Shachar Raindel &lt;raindel@mellanox.com&gt;, Liran Liss &lt;liranl@mellanox.com&gt;,
	Roland Dreier &lt;roland@purestorage.com&gt;, Ben Sander &lt;ben.sander@amd.com&gt;,
	Greg Stoner &lt;Greg.Stoner@amd.com&gt;, John Bridgman &lt;John.Bridgman@amd.com&gt;,
	Michael Mantor &lt;Michael.Mantor@amd.com&gt;,
	Paul Blinzer &lt;Paul.Blinzer@amd.com&gt;,
	Leonid Shamis &lt;Leonid.Shamis@amd.com&gt;,
	Laurent Morichetti &lt;Laurent.Morichetti@amd.com&gt;,
	Alexander Deucher &lt;Alexander.Deucher@amd.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
Subject: [PATCH v12 25/29] HMM: split DMA mapping function in two.
Date: Tue,  8 Mar 2016 15:43:18 -0500
Message-Id: &lt;1457469802-11850-26-git-send-email-jglisse@redhat.com&gt;
In-Reply-To: &lt;1457469802-11850-1-git-send-email-jglisse@redhat.com&gt;
References: &lt;1457469802-11850-1-git-send-email-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.24
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - March 8, 2016, 8:43 p.m.</div>
<pre class="content">
To be able to reuse the DMA mapping logic, split it in two functions.
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
---
 mm/hmm.c | 120 ++++++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 65 insertions(+), 55 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hmm.c b/mm/hmm.c</span>
<span class="p_header">index d26abe4..07f1ab6 100644</span>
<span class="p_header">--- a/mm/hmm.c</span>
<span class="p_header">+++ b/mm/hmm.c</span>
<span class="p_chunk">@@ -910,76 +910,86 @@</span> <span class="p_context"> static int hmm_mirror_fault_hugetlb_entry(pte_t *ptep,</span>
 	return 0;
 }
 
<span class="p_add">+static int hmm_mirror_dma_map_range(struct hmm_mirror *mirror,</span>
<span class="p_add">+				    dma_addr_t *hmm_pte,</span>
<span class="p_add">+				    spinlock_t *lock,</span>
<span class="p_add">+				    unsigned long npages)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct device *dev = mirror-&gt;device-&gt;dev;</span>
<span class="p_add">+	unsigned long i;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; npages; i++) {</span>
<span class="p_add">+		dma_addr_t dma_addr, pte;</span>
<span class="p_add">+		struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+again:</span>
<span class="p_add">+		pte = ACCESS_ONCE(hmm_pte[i]);</span>
<span class="p_add">+		if (!hmm_pte_test_valid_pfn(&amp;pte) || !hmm_pte_test_select(&amp;pte))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		page = pfn_to_page(hmm_pte_pfn(pte));</span>
<span class="p_add">+		VM_BUG_ON(!page);</span>
<span class="p_add">+		dma_addr = dma_map_page(dev, page, 0, PAGE_SIZE,</span>
<span class="p_add">+					DMA_BIDIRECTIONAL);</span>
<span class="p_add">+		if (dma_mapping_error(dev, dma_addr)) {</span>
<span class="p_add">+			ret = -ENOMEM;</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Make sure we transfer the dirty bit. Note that there</span>
<span class="p_add">+		 * might still be a window for another thread to set</span>
<span class="p_add">+		 * the dirty bit before we check for pte equality. This</span>
<span class="p_add">+		 * will just lead to a useless retry so it is not the</span>
<span class="p_add">+		 * end of the world here.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (lock)</span>
<span class="p_add">+			spin_lock(lock);</span>
<span class="p_add">+		if (hmm_pte_test_dirty(&amp;hmm_pte[i]))</span>
<span class="p_add">+			hmm_pte_set_dirty(&amp;pte);</span>
<span class="p_add">+		if (ACCESS_ONCE(hmm_pte[i]) != pte) {</span>
<span class="p_add">+				if (lock)</span>
<span class="p_add">+					spin_unlock(lock);</span>
<span class="p_add">+				dma_unmap_page(dev, dma_addr, PAGE_SIZE,</span>
<span class="p_add">+					       DMA_BIDIRECTIONAL);</span>
<span class="p_add">+				if (hmm_pte_test_valid_pfn(&amp;hmm_pte[i]))</span>
<span class="p_add">+					goto again;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		hmm_pte[i] = hmm_pte_from_dma_addr(dma_addr);</span>
<span class="p_add">+		if (hmm_pte_test_write(&amp;pte))</span>
<span class="p_add">+			hmm_pte_set_write(&amp;hmm_pte[i]);</span>
<span class="p_add">+		if (hmm_pte_test_dirty(&amp;pte))</span>
<span class="p_add">+			hmm_pte_set_dirty(&amp;hmm_pte[i]);</span>
<span class="p_add">+		if (lock)</span>
<span class="p_add">+			spin_unlock(lock);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int hmm_mirror_dma_map(struct hmm_mirror *mirror,
 			      struct hmm_pt_iter *iter,
 			      unsigned long start,
 			      unsigned long end)
 {
<span class="p_del">-	struct device *dev = mirror-&gt;device-&gt;dev;</span>
 	unsigned long addr;
 	int ret;
 
 	for (ret = 0, addr = start; !ret &amp;&amp; addr &lt; end;) {
<span class="p_del">-		unsigned long i = 0, next = end;</span>
<span class="p_add">+		unsigned long next = end, npages;</span>
 		dma_addr_t *hmm_pte;
<span class="p_add">+		spinlock_t *lock;</span>
 
 		hmm_pte = hmm_pt_iter_populate(iter, addr, &amp;next);
 		if (!hmm_pte)
 			return -ENOENT;
 
<span class="p_del">-		do {</span>
<span class="p_del">-			dma_addr_t dma_addr, pte;</span>
<span class="p_del">-			struct page *page;</span>
<span class="p_del">-</span>
<span class="p_del">-again:</span>
<span class="p_del">-			pte = ACCESS_ONCE(hmm_pte[i]);</span>
<span class="p_del">-			if (!hmm_pte_test_valid_pfn(&amp;pte) ||</span>
<span class="p_del">-			    !hmm_pte_test_select(&amp;pte)) {</span>
<span class="p_del">-				if (!hmm_pte_test_valid_dma(&amp;pte)) {</span>
<span class="p_del">-					ret = -ENOENT;</span>
<span class="p_del">-					break;</span>
<span class="p_del">-				}</span>
<span class="p_del">-				continue;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			page = pfn_to_page(hmm_pte_pfn(pte));</span>
<span class="p_del">-			VM_BUG_ON(!page);</span>
<span class="p_del">-			dma_addr = dma_map_page(dev, page, 0, PAGE_SIZE,</span>
<span class="p_del">-						DMA_BIDIRECTIONAL);</span>
<span class="p_del">-			if (dma_mapping_error(dev, dma_addr)) {</span>
<span class="p_del">-				ret = -ENOMEM;</span>
<span class="p_del">-				break;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			hmm_pt_iter_directory_lock(iter);</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * Make sure we transfer the dirty bit. Note that there</span>
<span class="p_del">-			 * might still be a window for another thread to set</span>
<span class="p_del">-			 * the dirty bit before we check for pte equality. This</span>
<span class="p_del">-			 * will just lead to a useless retry so it is not the</span>
<span class="p_del">-			 * end of the world here.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (hmm_pte_test_dirty(&amp;hmm_pte[i]))</span>
<span class="p_del">-				hmm_pte_set_dirty(&amp;pte);</span>
<span class="p_del">-			if (ACCESS_ONCE(hmm_pte[i]) != pte) {</span>
<span class="p_del">-				hmm_pt_iter_directory_unlock(iter);</span>
<span class="p_del">-				dma_unmap_page(dev, dma_addr, PAGE_SIZE,</span>
<span class="p_del">-					       DMA_BIDIRECTIONAL);</span>
<span class="p_del">-				if (hmm_pte_test_valid_pfn(&amp;pte))</span>
<span class="p_del">-					goto again;</span>
<span class="p_del">-				if (!hmm_pte_test_valid_dma(&amp;pte)) {</span>
<span class="p_del">-					ret = -ENOENT;</span>
<span class="p_del">-					break;</span>
<span class="p_del">-				}</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				hmm_pte[i] = hmm_pte_from_dma_addr(dma_addr);</span>
<span class="p_del">-				if (hmm_pte_test_write(&amp;pte))</span>
<span class="p_del">-					hmm_pte_set_write(&amp;hmm_pte[i]);</span>
<span class="p_del">-				if (hmm_pte_test_dirty(&amp;pte))</span>
<span class="p_del">-					hmm_pte_set_dirty(&amp;hmm_pte[i]);</span>
<span class="p_del">-				hmm_pt_iter_directory_unlock(iter);</span>
<span class="p_del">-			}</span>
<span class="p_del">-		} while (addr += PAGE_SIZE, i++, addr != next &amp;&amp; !ret);</span>
<span class="p_add">+		npages = (next - addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		lock = hmm_pt_iter_directory_lock_ptr(iter);</span>
<span class="p_add">+		ret = hmm_mirror_dma_map_range(mirror, hmm_pte, lock, npages);</span>
<span class="p_add">+		addr = next;</span>
 	}
 
 	return ret;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



