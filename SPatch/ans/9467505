
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,12/15] lockdep: Apply crossrelease to PG_locked lock - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,12/15] lockdep: Apply crossrelease to PG_locked lock</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60821">byungchul park</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 9, 2016, 5:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1481260331-360-13-git-send-email-byungchul.park@lge.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9467505/mbox/"
   >mbox</a>
|
   <a href="/patch/9467505/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9467505/">/patch/9467505/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A2DFD607DA for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Dec 2016 05:17:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 98E432858C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Dec 2016 05:17:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8D94328608; Fri,  9 Dec 2016 05:17:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F367E285F1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  9 Dec 2016 05:17:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933194AbcLIFRc (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 9 Dec 2016 00:17:32 -0500
Received: from LGEAMRELO13.lge.com ([156.147.23.53]:44464 &quot;EHLO
	lgeamrelo13.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753669AbcLIFQh (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 9 Dec 2016 00:16:37 -0500
Received: from unknown (HELO lgeamrelo01.lge.com) (156.147.1.125)
	by 156.147.23.53 with ESMTP; 9 Dec 2016 14:16:35 +0900
X-Original-SENDERIP: 156.147.1.125
X-Original-MAILFROM: byungchul.park@lge.com
Received: from unknown (HELO localhost.localdomain) (10.177.222.33)
	by 156.147.1.125 with ESMTP; 9 Dec 2016 14:16:35 +0900
X-Original-SENDERIP: 10.177.222.33
X-Original-MAILFROM: byungchul.park@lge.com
From: Byungchul Park &lt;byungchul.park@lge.com&gt;
To: peterz@infradead.org, mingo@kernel.org
Cc: tglx@linutronix.de, walken@google.com, boqun.feng@gmail.com,
	kirill@shutemov.name, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org, iamjoonsoo.kim@lge.com,
	akpm@linux-foundation.org, npiggin@gmail.com
Subject: [PATCH v4 12/15] lockdep: Apply crossrelease to PG_locked lock
Date: Fri,  9 Dec 2016 14:12:08 +0900
Message-Id: &lt;1481260331-360-13-git-send-email-byungchul.park@lge.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1481260331-360-1-git-send-email-byungchul.park@lge.com&gt;
References: &lt;1481260331-360-1-git-send-email-byungchul.park@lge.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60821">byungchul park</a> - Dec. 9, 2016, 5:12 a.m.</div>
<pre class="content">
lock_page() and its family can cause deadlock. Nevertheless, it cannot
use the lock correctness validator becasue unlock_page() can be called
in different context from the context calling lock_page(), which
violates lockdep&#39;s assumption without crossrelease feature.

However, thanks to CONFIG_LOCKDEP_CROSSRELEASE, we can apply the lockdep
detector to lock_page(). Applied it.
<span class="signed-off-by">
Signed-off-by: Byungchul Park &lt;byungchul.park@lge.com&gt;</span>
---
 include/linux/mm_types.h |   9 +++++
 include/linux/pagemap.h  | 100 ++++++++++++++++++++++++++++++++++++++++++++---
 lib/Kconfig.debug        |   8 ++++
 mm/filemap.c             |   4 +-
 mm/page_alloc.c          |   3 ++
 5 files changed, 116 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index ca3e517..87db0ac 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -16,6 +16,10 @@</span> <span class="p_context"></span>
 #include &lt;asm/page.h&gt;
 #include &lt;asm/mmu.h&gt;
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef AT_VECTOR_SIZE_ARCH
 #define AT_VECTOR_SIZE_ARCH 0
 #endif
<span class="p_chunk">@@ -220,6 +224,11 @@</span> <span class="p_context"> struct page {</span>
 #ifdef LAST_CPUPID_NOT_IN_PAGE_FLAGS
 	int _last_cpupid;
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+	struct lockdep_map map;</span>
<span class="p_add">+	struct cross_lock xlock;</span>
<span class="p_add">+#endif</span>
 }
 /*
  * The struct page can be forced to be double word aligned so that atomic ops
<span class="p_header">diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h</span>
<span class="p_header">index 0cf6980..dbe7adf 100644</span>
<span class="p_header">--- a/include/linux/pagemap.h</span>
<span class="p_header">+++ b/include/linux/pagemap.h</span>
<span class="p_chunk">@@ -14,6 +14,9 @@</span> <span class="p_context"></span>
 #include &lt;linux/bitops.h&gt;
 #include &lt;linux/hardirq.h&gt; /* for in_interrupt() */
 #include &lt;linux/hugetlb_inline.h&gt;
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#include &lt;linux/lockdep.h&gt;</span>
<span class="p_add">+#endif</span>
 
 /*
  * Bits in mapping-&gt;flags.  The lower __GFP_BITS_SHIFT bits are the page
<span class="p_chunk">@@ -413,26 +416,90 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(struct vm_area_struct *vma,</span>
 	return pgoff;
 }
 
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+#define lock_page_init(p)					\</span>
<span class="p_add">+do {								\</span>
<span class="p_add">+	static struct lock_class_key __key;			\</span>
<span class="p_add">+	lockdep_init_map_crosslock(&amp;(p)-&gt;map, &amp;(p)-&gt;xlock,	\</span>
<span class="p_add">+			&quot;(PG_locked)&quot; #p, &amp;__key, 0);		\</span>
<span class="p_add">+} while (0)</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	lock_acquire_exclusive(&amp;page-&gt;map, 0, try, NULL, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void lock_page_release(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	page = compound_head(page);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * lock_commit_crosslock() is necessary for crosslock</span>
<span class="p_add">+	 * when the lock is released, before lock_release().</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_commit_crosslock(&amp;page-&gt;map);</span>
<span class="p_add">+	lock_release(&amp;page-&gt;map, 0, _RET_IP_);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void lock_page_init(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_free(struct page *page) {}</span>
<span class="p_add">+static inline void lock_page_acquire(struct page *page, int try) {}</span>
<span class="p_add">+static inline void lock_page_release(struct page *page) {}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 extern void __lock_page(struct page *page);
 extern int __lock_page_killable(struct page *page);
 extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,
 				unsigned int flags);
<span class="p_del">-extern void unlock_page(struct page *page);</span>
<span class="p_add">+extern void do_raw_unlock_page(struct page *page);</span>
 
<span class="p_del">-static inline int trylock_page(struct page *page)</span>
<span class="p_add">+static inline void unlock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	lock_page_release(page);</span>
<span class="p_add">+	do_raw_unlock_page(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int do_raw_trylock_page(struct page *page)</span>
 {
 	page = compound_head(page);
 	return (likely(!test_and_set_bit_lock(PG_locked, &amp;page-&gt;flags)));
 }
 
<span class="p_add">+static inline int trylock_page(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (do_raw_trylock_page(page)) {</span>
<span class="p_add">+		lock_page_acquire(page, 1);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * lock_page may only be called if we have the page&#39;s inode pinned.
  */
 static inline void lock_page(struct page *page)
 {
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page))</span>
 		__lock_page(page);
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Acquire() must be after actual lock operation of crosslock.</span>
<span class="p_add">+	 * This way crosslock and other locks can be serialized like,</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 *	CONTEXT 1		CONTEXT 2</span>
<span class="p_add">+	 *	LOCK crosslock</span>
<span class="p_add">+	 *	ACQUIRE crosslock</span>
<span class="p_add">+	 *	  atomic_inc_return</span>
<span class="p_add">+	 *	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="p_add">+	 *				ACQUIRE lock1</span>
<span class="p_add">+	 *				  atomic_read_acquire lock1</span>
<span class="p_add">+	 *				LOCK lock1</span>
<span class="p_add">+	 *				LOCK lock2</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * so that &#39;crosslock -&gt; lock1 -&gt; lock2&#39; can be seen globally.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 }
 
 /*
<span class="p_chunk">@@ -442,9 +509,20 @@</span> <span class="p_context"> static inline void lock_page(struct page *page)</span>
  */
 static inline int lock_page_killable(struct page *page)
 {
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
 	might_sleep();
<span class="p_del">-	if (!trylock_page(page))</span>
<span class="p_del">-		return __lock_page_killable(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!do_raw_trylock_page(page)) {</span>
<span class="p_add">+		ret = __lock_page_killable(page);</span>
<span class="p_add">+		if (ret)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Acquire() must be after actual lock operation of crosslock.</span>
<span class="p_add">+	 * This way crosslock and other locks can be serialized.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	lock_page_acquire(page, 0);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -459,7 +537,17 @@</span> <span class="p_context"> static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,</span>
 				     unsigned int flags)
 {
 	might_sleep();
<span class="p_del">-	return trylock_page(page) || __lock_page_or_retry(page, mm, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (do_raw_trylock_page(page) || __lock_page_or_retry(page, mm, flags)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Acquire() must be after actual lock operation of crosslock.</span>
<span class="p_add">+		 * This way crosslock and other locks can be serialized.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		lock_page_acquire(page, 0);</span>
<span class="p_add">+		return 1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
 }
 
 /*
<span class="p_header">diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug</span>
<span class="p_header">index 3466e57..1926435 100644</span>
<span class="p_header">--- a/lib/Kconfig.debug</span>
<span class="p_header">+++ b/lib/Kconfig.debug</span>
<span class="p_chunk">@@ -1048,6 +1048,14 @@</span> <span class="p_context"> config LOCKDEP_COMPLETE</span>
 	 A deadlock caused by wait_for_completion() and complete() can be
 	 detected by lockdep using crossrelease feature.
 
<span class="p_add">+config LOCKDEP_PAGELOCK</span>
<span class="p_add">+	bool &quot;Lock debugging: allow PG_locked lock to use deadlock detector&quot;</span>
<span class="p_add">+	select LOCKDEP_CROSSRELEASE</span>
<span class="p_add">+	default n</span>
<span class="p_add">+	help</span>
<span class="p_add">+	 PG_locked lock is a kind of crosslock. Using crossrelease feature,</span>
<span class="p_add">+	 PG_locked lock can participate in deadlock detector.</span>
<span class="p_add">+</span>
 config PROVE_LOCKING
 	bool &quot;Lock debugging: prove locking correctness&quot;
 	depends on DEBUG_KERNEL &amp;&amp; TRACE_IRQFLAGS_SUPPORT &amp;&amp; STACKTRACE_SUPPORT &amp;&amp; LOCKDEP_SUPPORT
<span class="p_header">diff --git a/mm/filemap.c b/mm/filemap.c</span>
<span class="p_header">index 20f3b1f..e1f60fd 100644</span>
<span class="p_header">--- a/mm/filemap.c</span>
<span class="p_header">+++ b/mm/filemap.c</span>
<span class="p_chunk">@@ -827,7 +827,7 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(add_page_wait_queue);</span>
  * The mb is necessary to enforce ordering between the clear_bit and the read
  * of the waitqueue (to avoid SMP races with a parallel wait_on_page_locked()).
  */
<span class="p_del">-void unlock_page(struct page *page)</span>
<span class="p_add">+void do_raw_unlock_page(struct page *page)</span>
 {
 	page = compound_head(page);
 	VM_BUG_ON_PAGE(!PageLocked(page), page);
<span class="p_chunk">@@ -835,7 +835,7 @@</span> <span class="p_context"> void unlock_page(struct page *page)</span>
 	smp_mb__after_atomic();
 	wake_up_page(page, PG_locked);
 }
<span class="p_del">-EXPORT_SYMBOL(unlock_page);</span>
<span class="p_add">+EXPORT_SYMBOL(do_raw_unlock_page);</span>
 
 /**
  * end_page_writeback - end writeback against a page
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index 8b3e134..0adc46c 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -5225,6 +5225,9 @@</span> <span class="p_context"> not_early:</span>
 		} else {
 			__init_single_pfn(pfn, zone, nid);
 		}
<span class="p_add">+#ifdef CONFIG_LOCKDEP_PAGELOCK</span>
<span class="p_add">+		lock_page_init(pfn_to_page(pfn));</span>
<span class="p_add">+#endif</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



