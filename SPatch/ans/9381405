
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/6] mm: refactor __purge_vmap_area_lazy - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/6] mm: refactor __purge_vmap_area_lazy</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 18, 2016, 6:56 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1476773771-11470-2-git-send-email-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9381405/mbox/"
   >mbox</a>
|
   <a href="/patch/9381405/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9381405/">/patch/9381405/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	897B2600CA for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:58:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 77BDE2940A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:58:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6C78D2940D; Tue, 18 Oct 2016 06:58:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_WEB autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0C3B12940E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Oct 2016 06:58:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933332AbcJRG6C (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Oct 2016 02:58:02 -0400
Received: from bombadil.infradead.org ([198.137.202.9]:52350 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755998AbcJRG4W (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Oct 2016 02:56:22 -0400
Received: from 213162068076.public.t-mobile.at ([213.162.68.76]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.85_2 #1 (Red Hat
	Linux)) id 1bwOJv-0007AZ-1E; Tue, 18 Oct 2016 06:56:19 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: akpm@linux-foundation.org
Cc: joelaf@google.com, jszhang@marvell.com, chris@chris-wilson.co.uk,
	joaodias@google.com, linux-mm@kvack.org,
	linux-rt-users@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 1/6] mm: refactor __purge_vmap_area_lazy
Date: Tue, 18 Oct 2016 08:56:06 +0200
Message-Id: &lt;1476773771-11470-2-git-send-email-hch@lst.de&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1476773771-11470-1-git-send-email-hch@lst.de&gt;
References: &lt;1476773771-11470-1-git-send-email-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Oct. 18, 2016, 6:56 a.m.</div>
<pre class="content">
Move the purge_lock synchronization to the callers, move the call to
purge_fragmented_blocks_allcpus at the beginning of the function to
the callers that need it, move the force_flush behavior to the caller
that needs it, and pass start and end by value instead of by reference.

No change in behavior.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 mm/vmalloc.c | 80 ++++++++++++++++++++++++++----------------------------------
 1 file changed, 35 insertions(+), 45 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index f2481cb..d045a10 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -601,6 +601,13 @@</span> <span class="p_context"> static unsigned long lazy_max_pages(void)</span>
 
 static atomic_t vmap_lazy_nr = ATOMIC_INIT(0);
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Serialize vmap purging.  There is no actual criticial section protected</span>
<span class="p_add">+ * by this look, but we want to avoid concurrent calls for performance</span>
<span class="p_add">+ * reasons and to make the pcpu_get_vm_areas more deterministic.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static DEFINE_SPINLOCK(vmap_purge_lock);</span>
<span class="p_add">+</span>
 /* for per-CPU blocks */
 static void purge_fragmented_blocks_allcpus(void);
 
<span class="p_chunk">@@ -615,59 +622,36 @@</span> <span class="p_context"> void set_iounmap_nonlazy(void)</span>
 
 /*
  * Purges all lazily-freed vmap areas.
<span class="p_del">- *</span>
<span class="p_del">- * If sync is 0 then don&#39;t purge if there is already a purge in progress.</span>
<span class="p_del">- * If force_flush is 1, then flush kernel TLBs between *start and *end even</span>
<span class="p_del">- * if we found no lazy vmap areas to unmap (callers can use this to optimise</span>
<span class="p_del">- * their own TLB flushing).</span>
<span class="p_del">- * Returns with *start = min(*start, lowest purged address)</span>
<span class="p_del">- *              *end = max(*end, highest purged address)</span>
  */
<span class="p_del">-static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,</span>
<span class="p_del">-					int sync, int force_flush)</span>
<span class="p_add">+static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)</span>
 {
<span class="p_del">-	static DEFINE_SPINLOCK(purge_lock);</span>
 	struct llist_node *valist;
 	struct vmap_area *va;
 	struct vmap_area *n_va;
 	int nr = 0;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * If sync is 0 but force_flush is 1, we&#39;ll go sync anyway but callers</span>
<span class="p_del">-	 * should not expect such behaviour. This just simplifies locking for</span>
<span class="p_del">-	 * the case that isn&#39;t actually used at the moment anyway.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (!sync &amp;&amp; !force_flush) {</span>
<span class="p_del">-		if (!spin_trylock(&amp;purge_lock))</span>
<span class="p_del">-			return;</span>
<span class="p_del">-	} else</span>
<span class="p_del">-		spin_lock(&amp;purge_lock);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (sync)</span>
<span class="p_del">-		purge_fragmented_blocks_allcpus();</span>
<span class="p_add">+	lockdep_assert_held(&amp;vmap_purge_lock);</span>
 
 	valist = llist_del_all(&amp;vmap_purge_list);
 	llist_for_each_entry(va, valist, purge_list) {
<span class="p_del">-		if (va-&gt;va_start &lt; *start)</span>
<span class="p_del">-			*start = va-&gt;va_start;</span>
<span class="p_del">-		if (va-&gt;va_end &gt; *end)</span>
<span class="p_del">-			*end = va-&gt;va_end;</span>
<span class="p_add">+		if (va-&gt;va_start &lt; start)</span>
<span class="p_add">+			start = va-&gt;va_start;</span>
<span class="p_add">+		if (va-&gt;va_end &gt; end)</span>
<span class="p_add">+			end = va-&gt;va_end;</span>
 		nr += (va-&gt;va_end - va-&gt;va_start) &gt;&gt; PAGE_SHIFT;
 	}
 
<span class="p_del">-	if (nr)</span>
<span class="p_del">-		atomic_sub(nr, &amp;vmap_lazy_nr);</span>
<span class="p_add">+	if (!nr)</span>
<span class="p_add">+		return false;</span>
 
<span class="p_del">-	if (nr || force_flush)</span>
<span class="p_del">-		flush_tlb_kernel_range(*start, *end);</span>
<span class="p_add">+	atomic_sub(nr, &amp;vmap_lazy_nr);</span>
<span class="p_add">+	flush_tlb_kernel_range(start, end);</span>
 
<span class="p_del">-	if (nr) {</span>
<span class="p_del">-		spin_lock(&amp;vmap_area_lock);</span>
<span class="p_del">-		llist_for_each_entry_safe(va, n_va, valist, purge_list)</span>
<span class="p_del">-			__free_vmap_area(va);</span>
<span class="p_del">-		spin_unlock(&amp;vmap_area_lock);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	spin_unlock(&amp;purge_lock);</span>
<span class="p_add">+	spin_lock(&amp;vmap_area_lock);</span>
<span class="p_add">+	llist_for_each_entry_safe(va, n_va, valist, purge_list)</span>
<span class="p_add">+		__free_vmap_area(va);</span>
<span class="p_add">+	spin_unlock(&amp;vmap_area_lock);</span>
<span class="p_add">+	return true;</span>
 }
 
 /*
<span class="p_chunk">@@ -676,9 +660,10 @@</span> <span class="p_context"> static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,</span>
  */
 static void try_purge_vmap_area_lazy(void)
 {
<span class="p_del">-	unsigned long start = ULONG_MAX, end = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	__purge_vmap_area_lazy(&amp;start, &amp;end, 0, 0);</span>
<span class="p_add">+	if (spin_trylock(&amp;vmap_purge_lock)) {</span>
<span class="p_add">+		__purge_vmap_area_lazy(ULONG_MAX, 0);</span>
<span class="p_add">+		spin_unlock(&amp;vmap_purge_lock);</span>
<span class="p_add">+	}</span>
 }
 
 /*
<span class="p_chunk">@@ -686,9 +671,10 @@</span> <span class="p_context"> static void try_purge_vmap_area_lazy(void)</span>
  */
 static void purge_vmap_area_lazy(void)
 {
<span class="p_del">-	unsigned long start = ULONG_MAX, end = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	__purge_vmap_area_lazy(&amp;start, &amp;end, 1, 0);</span>
<span class="p_add">+	spin_lock(&amp;vmap_purge_lock);</span>
<span class="p_add">+	purge_fragmented_blocks_allcpus();</span>
<span class="p_add">+	__purge_vmap_area_lazy(ULONG_MAX, 0);</span>
<span class="p_add">+	spin_unlock(&amp;vmap_purge_lock);</span>
 }
 
 /*
<span class="p_chunk">@@ -1094,7 +1080,11 @@</span> <span class="p_context"> void vm_unmap_aliases(void)</span>
 		rcu_read_unlock();
 	}
 
<span class="p_del">-	__purge_vmap_area_lazy(&amp;start, &amp;end, 1, flush);</span>
<span class="p_add">+	spin_lock(&amp;vmap_purge_lock);</span>
<span class="p_add">+	purge_fragmented_blocks_allcpus();</span>
<span class="p_add">+	if (!__purge_vmap_area_lazy(start, end) &amp;&amp; flush)</span>
<span class="p_add">+		flush_tlb_kernel_range(start, end);</span>
<span class="p_add">+	spin_unlock(&amp;vmap_purge_lock);</span>
 }
 EXPORT_SYMBOL_GPL(vm_unmap_aliases);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



