
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,111/127] sparc64 mm: Fix base TSB sizing when hugetlb pages are used - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,111/127] sparc64 mm: Fix base TSB sizing when hugetlb pages are used</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 25, 2016, 8:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;45d934c51dbd7bbc5b2b85b2729d74f1f5752e2f.1480062521.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9446649/mbox/"
   >mbox</a>
|
   <a href="/patch/9446649/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9446649/">/patch/9446649/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	947A560235 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 832D127CF3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 76D2E27EED; Fri, 25 Nov 2016 08:37:04 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DBD2627CF3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 25 Nov 2016 08:36:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753431AbcKYIgo (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 25 Nov 2016 03:36:44 -0500
Received: from mx2.suse.de ([195.135.220.15]:45239 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753382AbcKYIdB (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 25 Nov 2016 03:33:01 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 9E7E4AE1C;
	Fri, 25 Nov 2016 08:31:54 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;David S . Miller&quot; &lt;davem@davemloft.net&gt;, Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 111/127] sparc64 mm: Fix base TSB sizing when hugetlb
	pages are used
Date: Fri, 25 Nov 2016 09:30:24 +0100
Message-Id: &lt;45d934c51dbd7bbc5b2b85b2729d74f1f5752e2f.1480062521.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;f668f2eee98250a2073a4beafdb7f6d1e21c528e.1480062521.git.jslaby@suse.cz&gt;
References: &lt;f668f2eee98250a2073a4beafdb7f6d1e21c528e.1480062521.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1480062521.git.jslaby@suse.cz&gt;
References: &lt;cover.1480062521.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Nov. 25, 2016, 8:30 a.m.</div>
<pre class="content">
<span class="from">From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

[ Upstream commit af1b1a9b36b8f9d583d4b4f90dd8946ed0cd4bd0 ]

do_sparc64_fault() calculates both the base and huge page RSS sizes and
uses this information in calls to tsb_grow().  The calculation for base
page TSB size is not correct if the task uses hugetlb pages.  hugetlb
pages are not accounted for in RSS, therefore the call to get_mm_rss(mm)
does not include hugetlb pages.  However, the number of pages based on
huge_pte_count (which does include hugetlb pages) is subtracted from
this value.  This will result in an artificially small and often negative
RSS calculation.  The base TSB size is then often set to max_tsb_size
as the passed RSS is unsigned, so a negative value looks really big.

THP pages are also accounted for in huge_pte_count, and THP pages are
accounted for in RSS so the calculation in do_sparc64_fault() is correct
if a task only uses THP pages.

A single huge_pte_count is not sufficient for TSB sizing if both hugetlb
and THP pages can be used.  Instead of a single counter, use two:  one
for hugetlb and one for THP.

Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 arch/sparc/include/asm/mmu_64.h |  3 ++-
 arch/sparc/mm/fault_64.c        |  6 +++---
 arch/sparc/mm/hugetlbpage.c     |  4 ++--
 arch/sparc/mm/init_64.c         |  3 ++-
 arch/sparc/mm/tlb.c             |  4 ++--
 arch/sparc/mm/tsb.c             | 14 ++++++++------
 6 files changed, 19 insertions(+), 15 deletions(-)

<span class="p_header">diff --git a/arch/sparc/include/asm/mmu_64.h b/arch/sparc/include/asm/mmu_64.h</span>
<span class="p_header">index f668797ae234..4994815fccc7 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/mmu_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/mmu_64.h</span>
<span class="p_chunk">@@ -92,7 +92,8 @@</span> <span class="p_context"> struct tsb_config {</span>
 typedef struct {
 	spinlock_t		lock;
 	unsigned long		sparc64_ctx_val;
<span class="p_del">-	unsigned long		huge_pte_count;</span>
<span class="p_add">+	unsigned long		hugetlb_pte_count;</span>
<span class="p_add">+	unsigned long		thp_pte_count;</span>
 	struct tsb_config	tsb_block[MM_NUM_TSBS];
 	struct hv_tsb_descr	tsb_descr[MM_NUM_TSBS];
 } mm_context_t;
<span class="p_header">diff --git a/arch/sparc/mm/fault_64.c b/arch/sparc/mm/fault_64.c</span>
<span class="p_header">index c7009d7762b1..a21917c8f44f 100644</span>
<span class="p_header">--- a/arch/sparc/mm/fault_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/fault_64.c</span>
<span class="p_chunk">@@ -478,14 +478,14 @@</span> <span class="p_context"> good_area:</span>
 	up_read(&amp;mm-&gt;mmap_sem);
 
 	mm_rss = get_mm_rss(mm);
<span class="p_del">-#if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="p_del">-	mm_rss -= (mm-&gt;context.huge_pte_count * (HPAGE_SIZE / PAGE_SIZE));</span>
<span class="p_add">+#if defined(CONFIG_TRANSPARENT_HUGEPAGE)</span>
<span class="p_add">+	mm_rss -= (mm-&gt;context.thp_pte_count * (HPAGE_SIZE / PAGE_SIZE));</span>
 #endif
 	if (unlikely(mm_rss &gt;
 		     mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_rss_limit))
 		tsb_grow(mm, MM_TSB_BASE, mm_rss);
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	mm_rss = mm-&gt;context.huge_pte_count;</span>
<span class="p_add">+	mm_rss = mm-&gt;context.hugetlb_pte_count + mm-&gt;context.thp_pte_count;</span>
 	if (unlikely(mm_rss &gt;
 		     mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb_rss_limit)) {
 		if (mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb)
<span class="p_header">diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">index d941cd024f22..387ae1e9b462 100644</span>
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -184,7 +184,7 @@</span> <span class="p_context"> void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,</span>
 	int i;
 
 	if (!pte_present(*ptep) &amp;&amp; pte_present(entry))
<span class="p_del">-		mm-&gt;context.huge_pte_count++;</span>
<span class="p_add">+		mm-&gt;context.hugetlb_pte_count++;</span>
 
 	addr &amp;= HPAGE_MASK;
 	for (i = 0; i &lt; (1 &lt;&lt; HUGETLB_PAGE_ORDER); i++) {
<span class="p_chunk">@@ -203,7 +203,7 @@</span> <span class="p_context"> pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
 
 	entry = *ptep;
 	if (pte_present(entry))
<span class="p_del">-		mm-&gt;context.huge_pte_count--;</span>
<span class="p_add">+		mm-&gt;context.hugetlb_pte_count--;</span>
 
 	addr &amp;= HPAGE_MASK;
 
<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 9633e0706d6e..4650a3840305 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -353,7 +353,8 @@</span> <span class="p_context"> void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *</span>
 	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if (mm-&gt;context.huge_pte_count &amp;&amp; is_hugetlb_pte(pte))</span>
<span class="p_add">+	if ((mm-&gt;context.hugetlb_pte_count || mm-&gt;context.thp_pte_count) &amp;&amp;</span>
<span class="p_add">+	    is_hugetlb_pte(pte))</span>
 		__update_mmu_tsb_insert(mm, MM_TSB_HUGE, REAL_HPAGE_SHIFT,
 					address, pte_val(pte));
 	else
<span class="p_header">diff --git a/arch/sparc/mm/tlb.c b/arch/sparc/mm/tlb.c</span>
<span class="p_header">index c24d0aa2b615..56b820924b07 100644</span>
<span class="p_header">--- a/arch/sparc/mm/tlb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tlb.c</span>
<span class="p_chunk">@@ -166,9 +166,9 @@</span> <span class="p_context"> void set_pmd_at(struct mm_struct *mm, unsigned long addr,</span>
 
 	if ((pmd_val(pmd) ^ pmd_val(orig)) &amp; _PAGE_PMD_HUGE) {
 		if (pmd_val(pmd) &amp; _PAGE_PMD_HUGE)
<span class="p_del">-			mm-&gt;context.huge_pte_count++;</span>
<span class="p_add">+			mm-&gt;context.thp_pte_count++;</span>
 		else
<span class="p_del">-			mm-&gt;context.huge_pte_count--;</span>
<span class="p_add">+			mm-&gt;context.thp_pte_count--;</span>
 
 		/* Do not try to allocate the TSB hash table if we
 		 * don&#39;t have one already.  We have various locks held
<span class="p_header">diff --git a/arch/sparc/mm/tsb.c b/arch/sparc/mm/tsb.c</span>
<span class="p_header">index 10a69f47745a..12f172117043 100644</span>
<span class="p_header">--- a/arch/sparc/mm/tsb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tsb.c</span>
<span class="p_chunk">@@ -467,7 +467,7 @@</span> <span class="p_context"> retry_tsb_alloc:</span>
 int init_new_context(struct task_struct *tsk, struct mm_struct *mm)
 {
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	unsigned long huge_pte_count;</span>
<span class="p_add">+	unsigned long total_huge_pte_count;</span>
 #endif
 	unsigned int i;
 
<span class="p_chunk">@@ -476,12 +476,14 @@</span> <span class="p_context"> int init_new_context(struct task_struct *tsk, struct mm_struct *mm)</span>
 	mm-&gt;context.sparc64_ctx_val = 0UL;
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	/* We reset it to zero because the fork() page copying</span>
<span class="p_add">+	/* We reset them to zero because the fork() page copying</span>
 	 * will re-increment the counters as the parent PTEs are
 	 * copied into the child address space.
 	 */
<span class="p_del">-	huge_pte_count = mm-&gt;context.huge_pte_count;</span>
<span class="p_del">-	mm-&gt;context.huge_pte_count = 0;</span>
<span class="p_add">+	total_huge_pte_count = mm-&gt;context.hugetlb_pte_count +</span>
<span class="p_add">+			 mm-&gt;context.thp_pte_count;</span>
<span class="p_add">+	mm-&gt;context.hugetlb_pte_count = 0;</span>
<span class="p_add">+	mm-&gt;context.thp_pte_count = 0;</span>
 #endif
 
 	/* copy_mm() copies over the parent&#39;s mm_struct before calling
<span class="p_chunk">@@ -497,8 +499,8 @@</span> <span class="p_context"> int init_new_context(struct task_struct *tsk, struct mm_struct *mm)</span>
 	tsb_grow(mm, MM_TSB_BASE, get_mm_rss(mm));
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if (unlikely(huge_pte_count))</span>
<span class="p_del">-		tsb_grow(mm, MM_TSB_HUGE, huge_pte_count);</span>
<span class="p_add">+	if (unlikely(total_huge_pte_count))</span>
<span class="p_add">+		tsb_grow(mm, MM_TSB_HUGE, total_huge_pte_count);</span>
 #endif
 
 	if (unlikely(!mm-&gt;context.tsb_block[MM_TSB_BASE].tsb))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



