
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,3/4] KVM: X86: introduce invalidate_gpa argument to tlb flush - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,3/4] KVM: X86: introduce invalidate_gpa argument to tlb flush</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 13, 2017, 1:33 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1513128784-5924-4-git-send-email-wanpeng.li@hotmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10108565/mbox/"
   >mbox</a>
|
   <a href="/patch/10108565/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10108565/">/patch/10108565/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	70324602B3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Dec 2017 01:33:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 60054205F6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Dec 2017 01:33:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 54BF921327; Wed, 13 Dec 2017 01:33:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7EBF6205F6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 Dec 2017 01:33:51 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752532AbdLMBdr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Dec 2017 20:33:47 -0500
Received: from mail-pg0-f65.google.com ([74.125.83.65]:35851 &quot;EHLO
	mail-pg0-f65.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752460AbdLMBdl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Dec 2017 20:33:41 -0500
Received: by mail-pg0-f65.google.com with SMTP id k134so592965pga.3;
	Tue, 12 Dec 2017 17:33:41 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references
	:mime-version:content-transfer-encoding;
	bh=QcgXOxOB/UbfY2Ncz/hxQ9PqacMHERrwIJXNEpkN7/8=;
	b=N1OyQw4KX7u4TVljxdgnQMC3FkQwwiSKEdT9ubTHm1Jn4unMdS9GViBgDdHGDc5Usv
	fC0rRi25frtpeM43/50ZiHs0gZXiiWefQwy0y11E2sGtPuNdR4Y0IAiDvY6lce//MFHS
	ZCWNITOr2/h4gLELcJ7DHEd5SfqoSQGyLxll7MMc+BabiBWSWhi2Pa8v/KyvglsP61Ys
	22n+9yjYTn7uJxBMTch5rxmPFJRTohxA6yVgNhdR0ZNl5TQLh6hjG2wKE5kL8r3Acfje
	dEQ0fcLwJ3QvagobPPFCIhTao+w+BCsrZs/Ns8K+q3LNjMfeU66/WwwTo5BjPmlFT2rG
	MAjg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references:mime-version:content-transfer-encoding;
	bh=QcgXOxOB/UbfY2Ncz/hxQ9PqacMHERrwIJXNEpkN7/8=;
	b=ZvJKavnkk+WXVXWw4uWCvxz70irRIMkRXkLD2dmg6W09ThD5OYFyXRs6AhXk6m2sUU
	rNYhDtlmmiYOcBhV5gpldk3c693Au1AHzKntmFerOZZlCC/4Zda2lJ7iAoNfaevfIlHb
	i7yEMNJI1TdDNal3I+EVPJlabxQB/TLY4lqZWYgAw8JWtrVtomHdiLjIjk5g6h6kBxkb
	lLtQbK0CehC5H0C81Vh8Y3rchqXZUzdg2XKuma/eDM8uG1qgrx+zCcNcQ2vYxr6ms+pb
	CLnAVwk+Hy+yUC3W4B1s0UcNkW+H4bQD1LS2zvSFO1gXvYduAI1jXBKD9DGs1jUYP57D
	yDOw==
X-Gm-Message-State: AKGB3mL9rRo7dxUBAJ69eS90IxKQ2kXrckVJvaMn0Xig2IYYf9hqz1Pb
	tS8mrprKFJ+1qgrl76rCrkT69w==
X-Google-Smtp-Source: ACJfBouITR7ANfTORrzInDZIV2xusA1muSvyqb9EIDs3DwViCtvZmYLBC2G4SGBtt26zCx0yvTFclA==
X-Received: by 10.98.32.21 with SMTP id g21mr4292026pfg.52.1513128820414;
	Tue, 12 Dec 2017 17:33:40 -0800 (PST)
Received: from localhost ([45.248.77.205]) by smtp.gmail.com with ESMTPSA id
	83sm546705pfq.12.2017.12.12.17.33.38
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 12 Dec 2017 17:33:39 -0800 (PST)
From: Wanpeng Li &lt;kernellwp@gmail.com&gt;
X-Google-Original-From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;
Subject: [PATCH v8 3/4] KVM: X86: introduce invalidate_gpa argument to tlb
	flush
Date: Tue, 12 Dec 2017 17:33:03 -0800
Message-Id: &lt;1513128784-5924-4-git-send-email-wanpeng.li@hotmail.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1513128784-5924-1-git-send-email-wanpeng.li@hotmail.com&gt;
References: &lt;1513128784-5924-1-git-send-email-wanpeng.li@hotmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a> - Dec. 13, 2017, 1:33 a.m.</div>
<pre class="content">
<span class="from">From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>

Introduce a new bool invalidate_gpa argument to kvm_x86_ops-&gt;tlb_flush,
it will be used by later patches to just flush guest tlb.

Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: Radim Krčmář &lt;rkrcmar@redhat.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
---
 arch/x86/include/asm/kvm_host.h |  2 +-
 arch/x86/kvm/svm.c              | 14 +++++++-------
 arch/x86/kvm/vmx.c              | 21 +++++++++++----------
 arch/x86/kvm/x86.c              |  6 +++---
 4 files changed, 22 insertions(+), 21 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Dec. 13, 2017, 1:35 p.m.</div>
<pre class="content">
On Tue, Dec 12, 2017 at 05:33:03PM -0800, Wanpeng Li wrote:
<span class="quote">&gt; From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Introduce a new bool invalidate_gpa argument to kvm_x86_ops-&gt;tlb_flush,</span>
<span class="quote">&gt; it will be used by later patches to just flush guest tlb.</span>

As opposed to what? Will it now also flush host TLB? Why would it ever
want to flush host TLBs?
<span class="quote">
&gt; @@ -4785,7 +4785,7 @@ static int svm_set_tss_addr(struct kvm *kvm, unsigned int addr)</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void svm_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt; +static void svm_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct vcpu_svm *svm = to_svm(vcpu);</span>
<span class="quote">&gt;  </span>

So this is a no-op for SVM.
<span class="quote">
&gt; diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c</span>
<span class="quote">&gt; index ef7d13e..c179175 100644</span>
<span class="quote">&gt; --- a/arch/x86/kvm/vmx.c</span>
<span class="quote">&gt; +++ b/arch/x86/kvm/vmx.c</span>
<span class="quote">&gt; @@ -4140,9 +4140,10 @@ static void exit_lmode(struct kvm_vcpu *vcpu)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline void __vmx_flush_tlb(struct kvm_vcpu *vcpu, int vpid)</span>
<span class="quote">&gt; +static inline void __vmx_flush_tlb(struct kvm_vcpu *vcpu, int vpid,</span>
<span class="quote">&gt; +				bool invalidate_gpa)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	if (enable_ept) {</span>
<span class="quote">&gt; +	if (enable_ept &amp;&amp; (invalidate_gpa || !enable_vpid)) {</span>
<span class="quote">&gt;  		if (!VALID_PAGE(vcpu-&gt;arch.mmu.root_hpa))</span>
<span class="quote">&gt;  			return;</span>
<span class="quote">&gt;  		ept_sync_context(construct_eptp(vcpu, vcpu-&gt;arch.mmu.root_hpa));</span>

And for EPT you explicitly fall back to INVPVID when !gpa.

Why?

This really needs a better changelog; this is incomprehensible.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">index df640fc..46892ba 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -968,7 +968,7 @@</span> <span class="p_context"> struct kvm_x86_ops {</span>
 	unsigned long (*get_rflags)(struct kvm_vcpu *vcpu);
 	void (*set_rflags)(struct kvm_vcpu *vcpu, unsigned long rflags);
 
<span class="p_del">-	void (*tlb_flush)(struct kvm_vcpu *vcpu);</span>
<span class="p_add">+	void (*tlb_flush)(struct kvm_vcpu *vcpu, bool invalidate_gpa);</span>
 
 	void (*run)(struct kvm_vcpu *vcpu);
 	int (*handle_exit)(struct kvm_vcpu *vcpu);
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index 1f3e7f2..14cca8c 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -285,7 +285,7 @@</span> <span class="p_context"> static int vgif = true;</span>
 module_param(vgif, int, 0444);
 
 static void svm_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0);
<span class="p_del">-static void svm_flush_tlb(struct kvm_vcpu *vcpu);</span>
<span class="p_add">+static void svm_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa);</span>
 static void svm_complete_interrupts(struct vcpu_svm *svm);
 
 static int nested_svm_exit_handled(struct vcpu_svm *svm);
<span class="p_chunk">@@ -2035,7 +2035,7 @@</span> <span class="p_context"> static int svm_set_cr4(struct kvm_vcpu *vcpu, unsigned long cr4)</span>
 		return 1;
 
 	if (npt_enabled &amp;&amp; ((old_cr4 ^ cr4) &amp; X86_CR4_PGE))
<span class="p_del">-		svm_flush_tlb(vcpu);</span>
<span class="p_add">+		svm_flush_tlb(vcpu, true);</span>
 
 	vcpu-&gt;arch.cr4 = cr4;
 	if (!npt_enabled)
<span class="p_chunk">@@ -2385,7 +2385,7 @@</span> <span class="p_context"> static void nested_svm_set_tdp_cr3(struct kvm_vcpu *vcpu,</span>
 
 	svm-&gt;vmcb-&gt;control.nested_cr3 = __sme_set(root);
 	mark_dirty(svm-&gt;vmcb, VMCB_NPT);
<span class="p_del">-	svm_flush_tlb(vcpu);</span>
<span class="p_add">+	svm_flush_tlb(vcpu, true);</span>
 }
 
 static void nested_svm_inject_npf_exit(struct kvm_vcpu *vcpu,
<span class="p_chunk">@@ -2989,7 +2989,7 @@</span> <span class="p_context"> static void enter_svm_guest_mode(struct vcpu_svm *svm, u64 vmcb_gpa,</span>
 	svm-&gt;nested.intercept_exceptions = nested_vmcb-&gt;control.intercept_exceptions;
 	svm-&gt;nested.intercept            = nested_vmcb-&gt;control.intercept;
 
<span class="p_del">-	svm_flush_tlb(&amp;svm-&gt;vcpu);</span>
<span class="p_add">+	svm_flush_tlb(&amp;svm-&gt;vcpu, true);</span>
 	svm-&gt;vmcb-&gt;control.int_ctl = nested_vmcb-&gt;control.int_ctl | V_INTR_MASKING_MASK;
 	if (nested_vmcb-&gt;control.int_ctl &amp; V_INTR_MASKING_MASK)
 		svm-&gt;vcpu.arch.hflags |= HF_VINTR_MASK;
<span class="p_chunk">@@ -4785,7 +4785,7 @@</span> <span class="p_context"> static int svm_set_tss_addr(struct kvm *kvm, unsigned int addr)</span>
 	return 0;
 }
 
<span class="p_del">-static void svm_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="p_add">+static void svm_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa)</span>
 {
 	struct vcpu_svm *svm = to_svm(vcpu);
 
<span class="p_chunk">@@ -5076,7 +5076,7 @@</span> <span class="p_context"> static void svm_set_cr3(struct kvm_vcpu *vcpu, unsigned long root)</span>
 
 	svm-&gt;vmcb-&gt;save.cr3 = __sme_set(root);
 	mark_dirty(svm-&gt;vmcb, VMCB_CR);
<span class="p_del">-	svm_flush_tlb(vcpu);</span>
<span class="p_add">+	svm_flush_tlb(vcpu, true);</span>
 }
 
 static void set_tdp_cr3(struct kvm_vcpu *vcpu, unsigned long root)
<span class="p_chunk">@@ -5090,7 +5090,7 @@</span> <span class="p_context"> static void set_tdp_cr3(struct kvm_vcpu *vcpu, unsigned long root)</span>
 	svm-&gt;vmcb-&gt;save.cr3 = kvm_read_cr3(vcpu);
 	mark_dirty(svm-&gt;vmcb, VMCB_CR);
 
<span class="p_del">-	svm_flush_tlb(vcpu);</span>
<span class="p_add">+	svm_flush_tlb(vcpu, true);</span>
 }
 
 static int is_disabled(void)
<span class="p_header">diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c</span>
<span class="p_header">index ef7d13e..c179175 100644</span>
<span class="p_header">--- a/arch/x86/kvm/vmx.c</span>
<span class="p_header">+++ b/arch/x86/kvm/vmx.c</span>
<span class="p_chunk">@@ -4140,9 +4140,10 @@</span> <span class="p_context"> static void exit_lmode(struct kvm_vcpu *vcpu)</span>
 
 #endif
 
<span class="p_del">-static inline void __vmx_flush_tlb(struct kvm_vcpu *vcpu, int vpid)</span>
<span class="p_add">+static inline void __vmx_flush_tlb(struct kvm_vcpu *vcpu, int vpid,</span>
<span class="p_add">+				bool invalidate_gpa)</span>
 {
<span class="p_del">-	if (enable_ept) {</span>
<span class="p_add">+	if (enable_ept &amp;&amp; (invalidate_gpa || !enable_vpid)) {</span>
 		if (!VALID_PAGE(vcpu-&gt;arch.mmu.root_hpa))
 			return;
 		ept_sync_context(construct_eptp(vcpu, vcpu-&gt;arch.mmu.root_hpa));
<span class="p_chunk">@@ -4151,15 +4152,15 @@</span> <span class="p_context"> static inline void __vmx_flush_tlb(struct kvm_vcpu *vcpu, int vpid)</span>
 	}
 }
 
<span class="p_del">-static void vmx_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="p_add">+static void vmx_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa)</span>
 {
<span class="p_del">-	__vmx_flush_tlb(vcpu, to_vmx(vcpu)-&gt;vpid);</span>
<span class="p_add">+	__vmx_flush_tlb(vcpu, to_vmx(vcpu)-&gt;vpid, invalidate_gpa);</span>
 }
 
 static void vmx_flush_tlb_ept_only(struct kvm_vcpu *vcpu)
 {
 	if (enable_ept)
<span class="p_del">-		vmx_flush_tlb(vcpu);</span>
<span class="p_add">+		vmx_flush_tlb(vcpu, true);</span>
 }
 
 static void vmx_decache_cr0_guest_bits(struct kvm_vcpu *vcpu)
<span class="p_chunk">@@ -4357,7 +4358,7 @@</span> <span class="p_context"> static void vmx_set_cr3(struct kvm_vcpu *vcpu, unsigned long cr3)</span>
 		ept_load_pdptrs(vcpu);
 	}
 
<span class="p_del">-	vmx_flush_tlb(vcpu);</span>
<span class="p_add">+	vmx_flush_tlb(vcpu, true);</span>
 	vmcs_writel(GUEST_CR3, guest_cr3);
 }
 
<span class="p_chunk">@@ -7932,7 +7933,7 @@</span> <span class="p_context"> static int handle_invvpid(struct kvm_vcpu *vcpu)</span>
 		return kvm_skip_emulated_instruction(vcpu);
 	}
 
<span class="p_del">-	__vmx_flush_tlb(vcpu, vmx-&gt;nested.vpid02);</span>
<span class="p_add">+	__vmx_flush_tlb(vcpu, vmx-&gt;nested.vpid02, true);</span>
 	nested_vmx_succeed(vcpu);
 
 	return kvm_skip_emulated_instruction(vcpu);
<span class="p_chunk">@@ -10614,11 +10615,11 @@</span> <span class="p_context"> static int prepare_vmcs02(struct kvm_vcpu *vcpu, struct vmcs12 *vmcs12,</span>
 			vmcs_write16(VIRTUAL_PROCESSOR_ID, vmx-&gt;nested.vpid02);
 			if (vmcs12-&gt;virtual_processor_id != vmx-&gt;nested.last_vpid) {
 				vmx-&gt;nested.last_vpid = vmcs12-&gt;virtual_processor_id;
<span class="p_del">-				__vmx_flush_tlb(vcpu, to_vmx(vcpu)-&gt;nested.vpid02);</span>
<span class="p_add">+				__vmx_flush_tlb(vcpu, to_vmx(vcpu)-&gt;nested.vpid02, true);</span>
 			}
 		} else {
 			vmcs_write16(VIRTUAL_PROCESSOR_ID, vmx-&gt;vpid);
<span class="p_del">-			vmx_flush_tlb(vcpu);</span>
<span class="p_add">+			vmx_flush_tlb(vcpu, true);</span>
 		}
 
 	}
<span class="p_chunk">@@ -11323,7 +11324,7 @@</span> <span class="p_context"> static void load_vmcs12_host_state(struct kvm_vcpu *vcpu,</span>
 		 * L1&#39;s vpid. TODO: move to a more elaborate solution, giving
 		 * each L2 its own vpid and exposing the vpid feature to L1.
 		 */
<span class="p_del">-		vmx_flush_tlb(vcpu);</span>
<span class="p_add">+		vmx_flush_tlb(vcpu, true);</span>
 	}
 	/* Restore posted intr vector. */
 	if (nested_cpu_has_posted_intr(vmcs12))
<span class="p_header">diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c</span>
<span class="p_header">index cdf716a..6c7b2bc 100644</span>
<span class="p_header">--- a/arch/x86/kvm/x86.c</span>
<span class="p_header">+++ b/arch/x86/kvm/x86.c</span>
<span class="p_chunk">@@ -6791,10 +6791,10 @@</span> <span class="p_context"> static void vcpu_scan_ioapic(struct kvm_vcpu *vcpu)</span>
 	kvm_x86_ops-&gt;load_eoi_exitmap(vcpu, eoi_exit_bitmap);
 }
 
<span class="p_del">-static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu)</span>
<span class="p_add">+static void kvm_vcpu_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa)</span>
 {
 	++vcpu-&gt;stat.tlb_flush;
<span class="p_del">-	kvm_x86_ops-&gt;tlb_flush(vcpu);</span>
<span class="p_add">+	kvm_x86_ops-&gt;tlb_flush(vcpu, invalidate_gpa);</span>
 }
 
 void kvm_arch_mmu_notifier_invalidate_range(struct kvm *kvm,
<span class="p_chunk">@@ -6865,7 +6865,7 @@</span> <span class="p_context"> static int vcpu_enter_guest(struct kvm_vcpu *vcpu)</span>
 		if (kvm_check_request(KVM_REQ_MMU_SYNC, vcpu))
 			kvm_mmu_sync_roots(vcpu);
 		if (kvm_check_request(KVM_REQ_TLB_FLUSH, vcpu))
<span class="p_del">-			kvm_vcpu_flush_tlb(vcpu);</span>
<span class="p_add">+			kvm_vcpu_flush_tlb(vcpu, true);</span>
 		if (kvm_check_request(KVM_REQ_REPORT_TPR_ACCESS, vcpu)) {
 			vcpu-&gt;run-&gt;exit_reason = KVM_EXIT_TPR_ACCESS;
 			r = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



