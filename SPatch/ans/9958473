
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V6,1/3] dma-mapping: Introduce device_is_coherent() as a helper - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V6,1/3] dma-mapping: Introduce device_is_coherent() as a helper</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=44471">Huacai Chen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 19, 2017, 8:52 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1505811161-25246-1-git-send-email-chenhc@lemote.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9958473/mbox/"
   >mbox</a>
|
   <a href="/patch/9958473/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9958473/">/patch/9958473/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7094460208 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 08:52:05 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3D4571FF12
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 08:52:05 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 31C5F28B4A; Tue, 19 Sep 2017 08:52:05 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8882328A4D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 19 Sep 2017 08:52:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751488AbdISIwC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 19 Sep 2017 04:52:02 -0400
Received: from smtpbgsg2.qq.com ([54.254.200.128]:58829 &quot;EHLO
	smtpbgsg2.qq.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751053AbdISIwB (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 19 Sep 2017 04:52:01 -0400
X-QQ-mid: bizesmtp2t1505811090ty9glny6b
Received: from software.domain.org (unknown [222.92.8.142])
	by esmtp4.qq.com (ESMTP) with 
	id ; Tue, 19 Sep 2017 16:51:20 +0800 (CST)
X-QQ-SSF: 01100000008000F0FNF0B00A0000000
X-QQ-FEAT: TvWUXinvzdhKjjZPQ84uMy84nNJbMt68ErXn31+IKaaBYTScjrYZRuktTp1Qd
	wJQ7WxTos/x6JsstGSreuHe2uGNoPNmcyIMYtMrfE2gV9QqwzIkHTgElmzq2ivs8LQHP352
	hxKGXc0DSLekahUfnF7u4aqOtm4r5n0XmmOQeNLcucZ0trxKx51b4COs+yEzyNwVjhFQ00Q
	A2sC6fPjk1DIgztJ049iGDQidvbrSKL94fUisZi/KGT9ZnwKw4fluNsST/Jy/HmInuureBC
	aKb5liIx1/5i1FdiYqmTPg+oUsVHhoShPQAw==
X-QQ-GoodBg: 0
From: Huacai Chen &lt;chenhc@lemote.com&gt;
To: Christoph Hellwig &lt;hch@lst.de&gt;
Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Fuxin Zhang &lt;zhangfx@lemote.com&gt;, linux-kernel@vger.kernel.org,
	&quot;James E . J . Bottomley&quot; &lt;jejb@linux.vnet.ibm.com&gt;,
	&quot;Martin K . Petersen&quot; &lt;martin.petersen@oracle.com&gt;,
	linux-scsi@vger.kernel.org, Huacai Chen &lt;chenhc@lemote.com&gt;,
	stable@vger.kernel.org
Subject: [PATCH V6 1/3] dma-mapping: Introduce device_is_coherent() as a
	helper
Date: Tue, 19 Sep 2017 16:52:39 +0800
Message-Id: &lt;1505811161-25246-1-git-send-email-chenhc@lemote.com&gt;
X-Mailer: git-send-email 2.7.0
X-QQ-SENDSIZE: 520
Feedback-ID: bizesmtp:lemote.com:qybgforeign:qybgforeign2
X-QQ-Bgrelay: 1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=44471">Huacai Chen</a> - Sept. 19, 2017, 8:52 a.m.</div>
<pre class="content">
We will use device_is_coherent() as a helper function, which will be
used in the next patch.

There is a MIPS-specific plat_device_is_coherent(), but we need a more
generic solution, so add and use a new function pointer in dma_map_ops.

Cc: stable@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Huacai Chen &lt;chenhc@lemote.com&gt;</span>
---
 arch/mips/cavium-octeon/dma-octeon.c               |  3 ++-
 arch/mips/include/asm/mach-generic/dma-coherence.h |  6 +++---
 arch/mips/loongson64/common/dma-swiotlb.c          |  1 +
 arch/mips/mm/dma-default.c                         |  3 ++-
 arch/mips/netlogic/common/nlm-dma.c                |  3 ++-
 include/linux/dma-mapping.h                        | 10 ++++++++++
 6 files changed, 20 insertions(+), 6 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Sept. 21, 2017, 10:47 a.m.</div>
<pre class="content">
On 19/09/17 09:52, Huacai Chen wrote:
<span class="quote">&gt; We will use device_is_coherent() as a helper function, which will be</span>
<span class="quote">&gt; used in the next patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There is a MIPS-specific plat_device_is_coherent(), but we need a more</span>
<span class="quote">&gt; generic solution, so add and use a new function pointer in dma_map_ops.</span>

I think we&#39;re heading in the right direction with the series, but I
still don&#39;t like this patch. I can pretty much guarantee that driver
authors *will* abuse a generic device_is_coherent() API to mean &quot;I can
skip other DMA API calls and just use virt_to_phys()&quot;.

I think it would be far better to allow architectures to provide their
own override of dma_get_cache_alignment(), and let the coherency detail
remain internal to the relevant arch implementations.

[...]
<span class="quote">&gt; @@ -697,6 +698,15 @@ static inline void *dma_zalloc_coherent(struct device *dev, size_t size,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_HAS_DMA</span>
<span class="quote">&gt; +static inline int device_is_coherent(struct device *dev)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="quote">&gt; +	if (ops &amp;&amp; ops-&gt;device_is_coherent)</span>
<span class="quote">&gt; +		return ops-&gt;device_is_coherent(dev);</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		return 1;    /* compatible behavior */</span>

That is also quite scary - if someone now adds a new
dma_get_cache_alignemnt() call and dutifully passes a non-NULL device,
they will now get back an alignment of 1 on all non-coherent platforms
except MIPS: hello data corruption.

Robin.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static inline int dma_get_cache_alignment(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  #ifdef ARCH_DMA_MINALIGN</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=44471">Huacai Chen</a> - Sept. 22, 2017, 2:13 a.m.</div>
<pre class="content">
Hi, Robin,

Before 2.6.36 dma_get_cache_alignment is arch-dependent, and it is unified in commit 4565f0170dfc849b3629c27d7 (&quot;dma-mapping: unify dma_get_cache_alignment implementations&quot;). Should we revert to the old implementation?
 
Huacai
 
------------------ Original ------------------
<span class="from">From:  &quot;Robin Murphy&quot;&lt;robin.murphy@arm.com&gt;;</span>
Date:  Thu, Sep 21, 2017 06:47 PM
To:  &quot;Huacai Chen&quot;&lt;chenhc@lemote.com&gt;; &quot;Christoph Hellwig&quot;&lt;hch@lst.de&gt;; 
Cc:  &quot;Marek Szyprowski&quot;&lt;m.szyprowski@samsung.com&gt;; &quot;Andrew Morton&quot;&lt;akpm@linux-foundation.org&gt;; &quot;Fuxin Zhang&quot;&lt;zhangfx@lemote.com&gt;; &quot;linux-kernel&quot;&lt;linux-kernel@vger.kernel.org&gt;; &quot;James E . J . Bottomley&quot;&lt;jejb@linux.vnet.ibm.com&gt;; &quot;Martin K . Petersen&quot;&lt;martin.petersen@oracle.com&gt;; &quot;linux-scsi&quot;&lt;linux-scsi@vger.kernel.org&gt;; &quot;stable&quot;&lt;stable@vger.kernel.org&gt;; 
Subject:  Re: [PATCH V6 1/3] dma-mapping: Introduce device_is_coherent() as ahelper

 
On 19/09/17 09:52, Huacai Chen wrote:
<span class="quote">&gt; We will use device_is_coherent() as a helper function, which will be</span>
<span class="quote">&gt; used in the next patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There is a MIPS-specific plat_device_is_coherent(), but we need a more</span>
<span class="quote">&gt; generic solution, so add and use a new function pointer in dma_map_ops.</span>

I think we&#39;re heading in the right direction with the series, but I
still don&#39;t like this patch. I can pretty much guarantee that driver
authors *will* abuse a generic device_is_coherent() API to mean &quot;I can
skip other DMA API calls and just use virt_to_phys()&quot;.

I think it would be far better to allow architectures to provide their
own override of dma_get_cache_alignment(), and let the coherency detail
remain internal to the relevant arch implementations.

[...]
<span class="quote">&gt; @@ -697,6 +698,15 @@ static inline void *dma_zalloc_coherent(struct device *dev, size_t size,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_HAS_DMA</span>
<span class="quote">&gt; +static inline int device_is_coherent(struct device *dev)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="quote">&gt; +	if (ops &amp;&amp; ops-&gt;device_is_coherent)</span>
<span class="quote">&gt; +		return ops-&gt;device_is_coherent(dev);</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		return 1;    /* compatible behavior */</span>

That is also quite scary - if someone now adds a new
dma_get_cache_alignemnt() call and dutifully passes a non-NULL device,
they will now get back an alignment of 1 on all non-coherent platforms
except MIPS: hello data corruption.

Robin.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static inline int dma_get_cache_alignment(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  #ifdef ARCH_DMA_MINALIGN</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Sept. 22, 2017, 1:44 p.m.</div>
<pre class="content">
On 22/09/17 03:13, 陈华才 wrote:
<span class="quote">&gt; Hi, Robin,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Before 2.6.36 dma_get_cache_alignment is arch-dependent, and it is unified in commit 4565f0170dfc849b3629c27d7 (&quot;dma-mapping: unify dma_get_cache_alignment implementations&quot;). Should we revert to the old implementation?</span>

Not quite - I mean instead of adding an ops-&gt;device_is_coherent callback
(which cannot really have a safe fallback value either way) and trying
to enforce that dma_get_cache_alignment() should be the only valid
caller, just add an ops-&gt;get_cache_alignment callback directly.

Robin.
<span class="quote">
&gt;  </span>
<span class="quote">&gt; Huacai</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; ------------------ Original ------------------</span>
<span class="quote">&gt; From:  &quot;Robin Murphy&quot;&lt;robin.murphy@arm.com&gt;;</span>
<span class="quote">&gt; Date:  Thu, Sep 21, 2017 06:47 PM</span>
<span class="quote">&gt; To:  &quot;Huacai Chen&quot;&lt;chenhc@lemote.com&gt;; &quot;Christoph Hellwig&quot;&lt;hch@lst.de&gt;; </span>
<span class="quote">&gt; Cc:  &quot;Marek Szyprowski&quot;&lt;m.szyprowski@samsung.com&gt;; &quot;Andrew Morton&quot;&lt;akpm@linux-foundation.org&gt;; &quot;Fuxin Zhang&quot;&lt;zhangfx@lemote.com&gt;; &quot;linux-kernel&quot;&lt;linux-kernel@vger.kernel.org&gt;; &quot;James E . J . Bottomley&quot;&lt;jejb@linux.vnet.ibm.com&gt;; &quot;Martin K . Petersen&quot;&lt;martin.petersen@oracle.com&gt;; &quot;linux-scsi&quot;&lt;linux-scsi@vger.kernel.org&gt;; &quot;stable&quot;&lt;stable@vger.kernel.org&gt;; </span>
<span class="quote">&gt; Subject:  Re: [PATCH V6 1/3] dma-mapping: Introduce device_is_coherent() as ahelper</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; On 19/09/17 09:52, Huacai Chen wrote:</span>
<span class="quote">&gt;&gt; We will use device_is_coherent() as a helper function, which will be</span>
<span class="quote">&gt;&gt; used in the next patch.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; There is a MIPS-specific plat_device_is_coherent(), but we need a more</span>
<span class="quote">&gt;&gt; generic solution, so add and use a new function pointer in dma_map_ops.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think we&#39;re heading in the right direction with the series, but I</span>
<span class="quote">&gt; still don&#39;t like this patch. I can pretty much guarantee that driver</span>
<span class="quote">&gt; authors *will* abuse a generic device_is_coherent() API to mean &quot;I can</span>
<span class="quote">&gt; skip other DMA API calls and just use virt_to_phys()&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think it would be far better to allow architectures to provide their</span>
<span class="quote">&gt; own override of dma_get_cache_alignment(), and let the coherency detail</span>
<span class="quote">&gt; remain internal to the relevant arch implementations.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; @@ -697,6 +698,15 @@ static inline void *dma_zalloc_coherent(struct device *dev, size_t size,</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_HAS_DMA</span>
<span class="quote">&gt;&gt; +static inline int device_is_coherent(struct device *dev)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="quote">&gt;&gt; +	if (ops &amp;&amp; ops-&gt;device_is_coherent)</span>
<span class="quote">&gt;&gt; +		return ops-&gt;device_is_coherent(dev);</span>
<span class="quote">&gt;&gt; +	else</span>
<span class="quote">&gt;&gt; +		return 1;    /* compatible behavior */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That is also quite scary - if someone now adds a new</span>
<span class="quote">&gt; dma_get_cache_alignemnt() call and dutifully passes a non-NULL device,</span>
<span class="quote">&gt; they will now get back an alignment of 1 on all non-coherent platforms</span>
<span class="quote">&gt; except MIPS: hello data corruption.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Robin.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  static inline int dma_get_cache_alignment(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  #ifdef ARCH_DMA_MINALIGN</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Sept. 22, 2017, 1:49 p.m.</div>
<pre class="content">
On Fri, Sep 22, 2017 at 02:44:51PM +0100, Robin Murphy wrote:
<span class="quote">&gt; Not quite - I mean instead of adding an ops-&gt;device_is_coherent callback</span>
<span class="quote">&gt; (which cannot really have a safe fallback value either way) and trying</span>
<span class="quote">&gt; to enforce that dma_get_cache_alignment() should be the only valid</span>
<span class="quote">&gt; caller, just add an ops-&gt;get_cache_alignment callback directly.</span>

Exactly - and then fall back to ARCH_DMA_MINALIGN/1 if the ops vector
is not provided, to keep the existing behavior.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/cavium-octeon/dma-octeon.c b/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_header">index c64bd87..cd1a133 100644</span>
<span class="p_header">--- a/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_header">+++ b/arch/mips/cavium-octeon/dma-octeon.c</span>
<span class="p_chunk">@@ -324,7 +324,8 @@</span> <span class="p_context"> static struct octeon_dma_map_ops _octeon_pci_dma_map_ops = {</span>
 		.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,
 		.sync_sg_for_device = octeon_dma_sync_sg_for_device,
 		.mapping_error = swiotlb_dma_mapping_error,
<span class="p_del">-		.dma_supported = swiotlb_dma_supported</span>
<span class="p_add">+		.dma_supported = swiotlb_dma_supported,</span>
<span class="p_add">+		.device_is_coherent = plat_device_is_coherent</span>
 	},
 };
 
<span class="p_header">diff --git a/arch/mips/loongson64/common/dma-swiotlb.c b/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_header">index 34486c1..c758d9b 100644</span>
<span class="p_header">--- a/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_header">+++ b/arch/mips/loongson64/common/dma-swiotlb.c</span>
<span class="p_chunk">@@ -119,6 +119,7 @@</span> <span class="p_context"> static const struct dma_map_ops loongson_dma_map_ops = {</span>
 	.sync_sg_for_device = loongson_dma_sync_sg_for_device,
 	.mapping_error = swiotlb_dma_mapping_error,
 	.dma_supported = loongson_dma_supported,
<span class="p_add">+	.device_is_coherent = plat_device_is_coherent</span>
 };
 
 void __init plat_swiotlb_setup(void)
<span class="p_header">diff --git a/arch/mips/mm/dma-default.c b/arch/mips/mm/dma-default.c</span>
<span class="p_header">index c01bd20..6e18301 100644</span>
<span class="p_header">--- a/arch/mips/mm/dma-default.c</span>
<span class="p_header">+++ b/arch/mips/mm/dma-default.c</span>
<span class="p_chunk">@@ -407,7 +407,8 @@</span> <span class="p_context"> static const struct dma_map_ops mips_default_dma_map_ops = {</span>
 	.sync_sg_for_cpu = mips_dma_sync_sg_for_cpu,
 	.sync_sg_for_device = mips_dma_sync_sg_for_device,
 	.mapping_error = mips_dma_mapping_error,
<span class="p_del">-	.dma_supported = mips_dma_supported</span>
<span class="p_add">+	.dma_supported = mips_dma_supported,</span>
<span class="p_add">+	.device_is_coherent = plat_device_is_coherent</span>
 };
 
 const struct dma_map_ops *mips_dma_map_ops = &amp;mips_default_dma_map_ops;
<span class="p_header">diff --git a/arch/mips/netlogic/common/nlm-dma.c b/arch/mips/netlogic/common/nlm-dma.c</span>
<span class="p_header">index 0ec9d9d..aa11b27 100644</span>
<span class="p_header">--- a/arch/mips/netlogic/common/nlm-dma.c</span>
<span class="p_header">+++ b/arch/mips/netlogic/common/nlm-dma.c</span>
<span class="p_chunk">@@ -79,7 +79,8 @@</span> <span class="p_context"> const struct dma_map_ops nlm_swiotlb_dma_ops = {</span>
 	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,
 	.sync_sg_for_device = swiotlb_sync_sg_for_device,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_del">-	.dma_supported = swiotlb_dma_supported</span>
<span class="p_add">+	.dma_supported = swiotlb_dma_supported,</span>
<span class="p_add">+	.device_is_coherent = plat_device_is_coherent</span>
 };
 
 void __init plat_swiotlb_setup(void)
<span class="p_header">diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="p_header">index 29ce981..08da227 100644</span>
<span class="p_header">--- a/include/linux/dma-mapping.h</span>
<span class="p_header">+++ b/include/linux/dma-mapping.h</span>
<span class="p_chunk">@@ -131,6 +131,7 @@</span> <span class="p_context"> struct dma_map_ops {</span>
 #ifdef ARCH_HAS_DMA_GET_REQUIRED_MASK
 	u64 (*get_required_mask)(struct device *dev);
 #endif
<span class="p_add">+	int (*device_is_coherent)(struct device *dev);</span>
 	int is_phys;
 };
 
<span class="p_chunk">@@ -697,6 +698,15 @@</span> <span class="p_context"> static inline void *dma_zalloc_coherent(struct device *dev, size_t size,</span>
 }
 
 #ifdef CONFIG_HAS_DMA
<span class="p_add">+static inline int device_is_coherent(struct device *dev)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="p_add">+	if (ops &amp;&amp; ops-&gt;device_is_coherent)</span>
<span class="p_add">+		return ops-&gt;device_is_coherent(dev);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		return 1;    /* compatible behavior */</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline int dma_get_cache_alignment(void)
 {
 #ifdef ARCH_DMA_MINALIGN

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



