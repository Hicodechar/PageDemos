
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/mm] x86/mm: Enable RCU based page table freeing (CONFIG_HAVE_RCU_TABLE_FREE=y) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/mm] x86/mm: Enable RCU based page table freeing (CONFIG_HAVE_RCU_TABLE_FREE=y)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 31, 2017, 9:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-9e52fc2b50de3a1c08b44f94c610fbe998c0031a@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9931719/mbox/"
   >mbox</a>
|
   <a href="/patch/9931719/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9931719/">/patch/9931719/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CC13C602F0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 31 Aug 2017 10:00:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B4042288DD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 31 Aug 2017 10:00:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A8B30288DF; Thu, 31 Aug 2017 10:00:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DFE2A288DD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 31 Aug 2017 10:00:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751602AbdHaKAh (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 31 Aug 2017 06:00:37 -0400
Received: from terminus.zytor.com ([65.50.211.136]:39643 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750790AbdHaKAf (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 31 Aug 2017 06:00:35 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v7V9tRxx010276;
	Thu, 31 Aug 2017 02:55:27 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v7V9tQ9E010265;
	Thu, 31 Aug 2017 02:55:26 -0700
Date: Thu, 31 Aug 2017 02:55:26 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Vitaly Kuznetsov &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-9e52fc2b50de3a1c08b44f94c610fbe998c0031a@git.kernel.org&gt;
Cc: mingo@kernel.org, paulmck@linux.vnet.ibm.com, rostedt@goodmis.org,
	linux-kernel@vger.kernel.org, kys@microsoft.com,
	luto@amacapital.net, torvalds@linux-foundation.org,
	tglx@linutronix.de, Jork.Loeser@microsoft.com,
	sthemmin@microsoft.com, boris.ostrovsky@oracle.com,
	andrew.cooper3@citrix.com, jgross@suse.com, vkuznets@redhat.com,
	peterz@infradead.org, hpa@zytor.com, kirill.shutemov@linux.intel.com
Reply-To: rostedt@goodmis.org, paulmck@linux.vnet.ibm.com,
	mingo@kernel.org, tglx@linutronix.de, sthemmin@microsoft.com,
	Jork.Loeser@microsoft.com, linux-kernel@vger.kernel.org,
	torvalds@linux-foundation.org, luto@amacapital.net,
	kys@microsoft.com, andrew.cooper3@citrix.com, jgross@suse.com,
	boris.ostrovsky@oracle.com, kirill.shutemov@linux.intel.com,
	peterz@infradead.org, vkuznets@redhat.com, hpa@zytor.com
In-Reply-To: &lt;20170828082251.5562-1-vkuznets@redhat.com&gt;
References: &lt;20170828082251.5562-1-vkuznets@redhat.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86/mm: Enable RCU based page table freeing
	(CONFIG_HAVE_RCU_TABLE_FREE=y)
Git-Commit-ID: 9e52fc2b50de3a1c08b44f94c610fbe998c0031a
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Aug. 31, 2017, 9:55 a.m.</div>
<pre class="content">
Commit-ID:  9e52fc2b50de3a1c08b44f94c610fbe998c0031a
Gitweb:     http://git.kernel.org/tip/9e52fc2b50de3a1c08b44f94c610fbe998c0031a
Author:     Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
AuthorDate: Mon, 28 Aug 2017 10:22:51 +0200
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Thu, 31 Aug 2017 11:07:07 +0200

x86/mm: Enable RCU based page table freeing (CONFIG_HAVE_RCU_TABLE_FREE=y)

There&#39;s a subtle bug in how some of the paravirt guest code handles
page table freeing on x86:

On x86 software page table walkers depend on the fact that remote TLB flush
does an IPI: walk is performed lockless but with interrupts disabled and in
case the page table is freed the freeing CPU will get blocked as remote TLB
flush is required. On other architectures which don&#39;t require an IPI to do
remote TLB flush we have an RCU-based mechanism (see
include/asm-generic/tlb.h for more details).

In virtualized environments we may want to override the -&gt;flush_tlb_others
callback in pv_mmu_ops and use a hypercall asking the hypervisor to do a
remote TLB flush for us. This breaks the assumption about IPIs. Xen PV has
been doing this for years and the upcoming remote TLB flush for Hyper-V will
do it too.

This is not safe, as software page table walkers may step on an already
freed page.

Fix the bug by enabling the RCU-based page table freeing mechanism,
CONFIG_HAVE_RCU_TABLE_FREE=y.

Testing with kernbench and mmap/munmap microbenchmarks, and neither showed
any noticeable performance impact.

Suggested-by: Peter Zijlstra &lt;peterz@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="acked-by">Acked-by: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>
<span class="acked-by">Acked-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="acked-by">Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
Cc: Andrew Cooper &lt;andrew.cooper3@citrix.com&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: Jork Loeser &lt;Jork.Loeser@microsoft.com&gt;
Cc: KY Srinivasan &lt;kys@microsoft.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Paul E. McKenney &lt;paulmck@linux.vnet.ibm.com&gt;
Cc: Stephen Hemminger &lt;sthemmin@microsoft.com&gt;
Cc: Steven Rostedt &lt;rostedt@goodmis.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: xen-devel@lists.xenproject.org
Link: http://lkml.kernel.org/r/20170828082251.5562-1-vkuznets@redhat.com
[ Rewrote/fixed/clarified the changelog. ]
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/Kconfig           |  1 +
 arch/x86/include/asm/tlb.h | 14 ++++++++++++++
 arch/x86/mm/pgtable.c      |  8 ++++----
 3 files changed, 19 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index e4844e9..87e4472 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -167,6 +167,7 @@</span> <span class="p_context"> config X86</span>
 	select HAVE_HARDLOCKUP_DETECTOR_PERF	if PERF_EVENTS &amp;&amp; HAVE_PERF_EVENTS_NMI
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
<span class="p_add">+	select HAVE_RCU_TABLE_FREE</span>
 	select HAVE_REGS_AND_STACK_ACCESS_API
 	select HAVE_RELIABLE_STACKTRACE		if X86_64 &amp;&amp; FRAME_POINTER &amp;&amp; STACK_VALIDATION
 	select HAVE_STACK_VALIDATION		if X86_64
<span class="p_header">diff --git a/arch/x86/include/asm/tlb.h b/arch/x86/include/asm/tlb.h</span>
<span class="p_header">index c779730..79a4ca6 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlb.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlb.h</span>
<span class="p_chunk">@@ -15,4 +15,18 @@</span> <span class="p_context"></span>
 
 #include &lt;asm-generic/tlb.h&gt;
 
<span class="p_add">+/*</span>
<span class="p_add">+ * While x86 architecture in general requires an IPI to perform TLB</span>
<span class="p_add">+ * shootdown, enablement code for several hypervisors overrides</span>
<span class="p_add">+ * .flush_tlb_others hook in pv_mmu_ops and implements it by issuing</span>
<span class="p_add">+ * a hypercall. To keep software pagetable walkers safe in this case we</span>
<span class="p_add">+ * switch to RCU based table free (HAVE_RCU_TABLE_FREE). See the comment</span>
<span class="p_add">+ * below &#39;ifdef CONFIG_HAVE_RCU_TABLE_FREE&#39; in include/asm-generic/tlb.h</span>
<span class="p_add">+ * for more details.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void __tlb_remove_table(void *table)</span>
<span class="p_add">+{</span>
<span class="p_add">+	free_page_and_swap_cache(table);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_TLB_H */
<span class="p_header">diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="p_header">index 508a708..218834a 100644</span>
<span class="p_header">--- a/arch/x86/mm/pgtable.c</span>
<span class="p_header">+++ b/arch/x86/mm/pgtable.c</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"> void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
 {
 	pgtable_page_dtor(pte);
 	paravirt_release_pte(page_to_pfn(pte));
<span class="p_del">-	tlb_remove_page(tlb, pte);</span>
<span class="p_add">+	tlb_remove_table(tlb, pte);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 2
<span class="p_chunk">@@ -72,21 +72,21 @@</span> <span class="p_context"> void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
 	tlb-&gt;need_flush_all = 1;
 #endif
 	pgtable_pmd_page_dtor(page);
<span class="p_del">-	tlb_remove_page(tlb, page);</span>
<span class="p_add">+	tlb_remove_table(tlb, page);</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
 void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)
 {
 	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(pud));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(pud));</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 4
 void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)
 {
 	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(p4d));</span>
 }
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



