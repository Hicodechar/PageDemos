
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,22/32] x86, swiotlb: DMA support for memory encryption - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,22/32] x86, swiotlb: DMA support for memory encryption</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 18, 2017, 9:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170418212010.10190.78119.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9686383/mbox/"
   >mbox</a>
|
   <a href="/patch/9686383/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9686383/">/patch/9686383/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CF960602C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Apr 2017 21:20:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BEDC426E4D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Apr 2017 21:20:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B319D27816; Tue, 18 Apr 2017 21:20:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9A47026E4D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 18 Apr 2017 21:20:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758083AbdDRVUi (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 18 Apr 2017 17:20:38 -0400
Received: from mail-bn3nam01on0058.outbound.protection.outlook.com
	([104.47.33.58]:47712
	&quot;EHLO NAM01-BN3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1758055AbdDRVU0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 18 Apr 2017 17:20:26 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=ivfBYJ8HQdoezqpc51Ns9q7MKvdzIoHX8Ic4IN1C6Tg=;
	b=Of5Qr7/xc71lHiQd03VTNhSkqEkrNTmciJ4bXKq9P8jcP2STcLK3pj/PzN2z2IKhZ2Qyap/6LsonI5fEZOc0xbeGCXYbir8KmbhOwcfbQKxxc33oSHq4KqdBcH5kHevkuazWXq7m0q8dIFvF2OZW2dFcdEC0tt5FFXIUw41RyIQ=
Authentication-Results: vger.kernel.org; dkim=none (message not signed)
	header.d=none; vger.kernel.org;
	dmarc=none action=none header.from=amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	BN6PR12MB1137.namprd12.prod.outlook.com (10.168.226.139) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256_P256) id
	15.1.1034.10; Tue, 18 Apr 2017 21:20:12 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [PATCH v5 22/32] x86, swiotlb: DMA support for memory encryption
To: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;kvm@vger.kernel.org&gt;, &lt;linux-doc@vger.kernel.org&gt;,
	&lt;x86@kernel.org&gt;, &lt;kexec@lists.infradead.org&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, &lt;kasan-dev@googlegroups.com&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;iommu@lists.linux-foundation.org&gt;
CC: Rik van Riel &lt;riel@redhat.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;, Larry Woodman &lt;lwoodman@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;, Dave Young &lt;dyoung@redhat.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Tue, 18 Apr 2017 16:20:10 -0500
Message-ID: &lt;20170418212010.10190.78119.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170418211612.10190.82788.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170418211612.10190.82788.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: DM5PR12CA0061.namprd12.prod.outlook.com (10.175.83.151) To
	BN6PR12MB1137.namprd12.prod.outlook.com (10.168.226.139)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 035b5a8a-a398-40eb-e7d5-08d486a0b483
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(48565401081)(201703131423075)(201703031133081);
	SRVR:BN6PR12MB1137; 
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1137;
	3:TduNwUwcii8egF0ezmUsIQXjNDO//U+gALb+Yix8JXHSR6UPIGn+5+yF3DWbNHiB1voj9FODlzA6+Lj4XAk3aCi7jdzNAYruw9CjEWpguDq8HVgvpgEgG5dKzXignCFhFXuWnc8JHpv2Fg85ygwKYudmp+AE0bOo15hFpq9TOEIyprWBVLZNDZCaw4T2uEF+vzBEH+0ecBfnalHw6OY4Xuh1G4M5MG6rLfV09FJBLj5bmpU4FJbhiKOOVrjOA5WxBiEGxS+GzQjZJlKxKvuutG6Blli3juqTGp41yFlHwxrWnZEiGJz9WqBen1Vxi971E+i2ea9LYQiSe/RteaZfZOjFN1uSgYxndEr1jL2BFCE=;
	25:xQ7tfRA5hFyDo9l2/EsrmDUfUc9sxBwi5BLQmkuV5pVvUvSjSeqlSjoZZHJ1ZrZ6b7pfBJWfEZTxX95ZxFkG/+GEmSi8TPAUSRSzHlR5UDLpbnl1ye9S6D67+KfxdnkS6Ku5/ooEiKC6iHXX2OjSP/HMiAyHNRFgMHmQfj3L+pMTaKvdHkYSFSwKR8SEe0P8QaAAG9pSrv6953a5A31qdUDg7nMhCr69LaYrkIJnPKUdJm2YYOIqvwv7hDVA+RJxf2nQ7qIHpqsXd0EjulvRUu8F0PkD1mZKwVqGN0Zy0rj3ikanfDDTx2iHYr7Xj1b2qOn8OuyOboYG6ycuQTOPeLnwIjZE/HGFUod2eW6efsLHEQQFJbJcU4jw9FAWdq61/Dz70gUrZgtGXCirkx8cKbYpiMJQ9vFV2y5gyeHRsIt0UWoACV6a0aPBrrHXFIrKCE954mKJ0NRoNQugKsU+7A==
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1137;
	31:qFpsGUHQeP5z5Vp0rl8rG9GShB5dNkMAZEGyImzdQpDd6RijNvkgmQneHWm0WxPxZK6uQFvLstFHlmzdCAgnx/7mCYRL8lgwgNhOsAh1bGd7KZLBf5VnqSfwtlIVAFu+j4XA6DldDgnOWn4x09SmDXWyBCKneoJ4YrT+n81uFiJ7qPuLAoy/j9h9nxvt707EbcHL/lF0Cgdseb41d6s6eK9aao8t0+v4C7L1mnyAnFs=;
	20:h2vcD0+KPir9GpOLoBwpfXBsNg7BiOjNUsDm5EYE7FsHnNnOrwN8JH0t2fxQoBeqfZ8sPkgrcOX55mKHF/qCKGm2W/mDXT80qvvvbQSzBNB1RQ5xJSbgpP+BPkK7nakNUXY6DI3WMVS9fkVWM8wIBcaHRVpQ1pHd1NERFkdECJjTI554A4DFGAhjjemhB9O3p8UtLk2chA3MRMCXWAteEuw64QzRCHS3i6a5/uNAGW5wuJ7qvYEzaz7hY4SBf6LWsKJX83pj1n/p5VsSPDoRPb3tgeFu6H+cNMu1xRITGWc0A5UNQFipJmz2HPvj/Vo+upyUs907mR3lG+C3dZ0agrT9bnPTGbXCvoLrxbOVnDr38GQ5/JEjJ09RgF/flVoVwiHLobiQ5qaMeRF9da3DE63mVu6Johx4PMlc/bu+2KkyREl/zpCD18ZgeHAWbIWi8Xaccs12wFy/hEuPZaCxPVKTR4P+tMTuSFQcCp6PnENopgKpbQ9Cc+XREKrunUcM
X-Microsoft-Antispam-PRVS: &lt;BN6PR12MB113732781A0F24458CBF31BAEC190@BN6PR12MB1137.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040450)(601004)(2401047)(8121501046)(5005006)(3002001)(10201501046)(93006095)(93001095)(6055026)(6041248)(20161123562025)(201703131423075)(201702281528075)(201703061421075)(20161123560025)(20161123555025)(20161123564025)(6072148);
	SRVR:BN6PR12MB1137; BCL:0; PCL:0; RULEID:; SRVR:BN6PR12MB1137;
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1137;
	4:JZ5qqQsiXmwCrjjTB+MHnfB5sC5Kiyy2I6sULOpougXZD/RhApu6u9YX4vt5GJ22Cw8Lfj9anOgY+isbKk+HmVIEo0Wcq4oMom4ndphVOaT38wQ/TxDPWx/xG/xLbAYcMjKiWVPRsFpl84ZJy9zSk7C8e9mOrqiGIDeJciQmE8D7VQMtOijA/CY1LhXk1xAGMPvShz6tnWp9diN+u3AfBKiAuAVvmc96UhIajLIILRxndLvX5cuz0sQM8ZIowMOlsnsf8mkk0fqpFhJ7qH72ncLcuywiOBIKxSiaertCNfAfRm/9iGENLpqzCDgk6L6Xd40Wi3BleYOg9/yATeq0IMaciWaEGtb4yT9T5VY58G53WRsjIGlzbCIBnOmNozK1CV1dv8GKwUwHsyx7DCjiwj/VyJdwBK+eurpPmzt8h35FsyJTN0+4/YQW16cz2M/474jQi6gISJ2tSJtUGP8EQlSPOlEZRU2TXf5wuvZAezKDCMrpxyVOZt74lA/tyTckNDJb/jE1W3hS2kD8DT05a6EN/v53u+DGAsZU5r3UZemhrmsv60ht0pQckQtp6l6jtOFcg0/bvrrvbIZ6sjyl0LbiER9YvcHdwVJbAdlvmFUTQo2bFpoM/DAwZUBKW6dl23Ix7XrlW0GiH9wCY9/KjyAdNOLBKms3lRYyRyj8sznj95x80xfVVN9TlOWdKaQIV1ahQG6O4Br71JXZFo+Jrdxv4CYZrkE2ztXJaeH6UtWjZI5vHdCh9XhsTDIjV+FIu+mrC9pQpTYPdaP7mRtE6A==
X-Forefront-PRVS: 028166BF91
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(39840400002)(39850400002)(39400400002)(39410400002)(39860400002)(39450400003)(7736002)(575784001)(7406005)(2201001)(6506006)(7416002)(23676002)(53936002)(86362001)(54906002)(5660300001)(9686003)(83506001)(305945005)(81166006)(8676002)(55016002)(42186005)(2950100002)(53416004)(230700001)(50986999)(1076002)(76176999)(103116003)(6116002)(33646002)(97746001)(3846002)(25786009)(47776003)(4001350100001)(50466002)(38730400002)(66066001)(54356999)(2906002)(189998001)(4326008)(921003)(71626007)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BN6PR12MB1137;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; MLV:sfv; LANG:en;
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtCTjZQUjEyTUIxMTM3OzIzOitnMFlvRzMydXgzUnRvaFhQYU54STFtWmpS?=
	=?utf-8?B?NHFPV2NNbkliWWR5MU5MREtRb3Y4enBtdG54UnFRNTRGZEtZQkJ1NmtMeTVP?=
	=?utf-8?B?L2hEOHZoaFkySkJpdlNYMXM4SnpPTE56RDB6dnU0Tm5FVDFFR1k1MmV3Nkl5?=
	=?utf-8?B?eFBPVWlZWTdWc1M2RkY2bFAwdTRhSExSbkl3MzhxdEkvRmFSejJQRXRWL3dp?=
	=?utf-8?B?VzAxd3VwNHNYWUdLMFNpY2dJK2xzeXZURHVXYVZlSlUvQWI3NG03K3lPS05j?=
	=?utf-8?B?Y2ZRRWY5aWxzSm43d2x1NGJodkkrSmhieGdVUjNiK0RMTXNzYkpydzBFMk1N?=
	=?utf-8?B?bG8zd2c3WUZRdFBuZkllTCtSRmFUdVFGZXltbVdGSVV1MzMyMVZUUFBiQWln?=
	=?utf-8?B?SnpKSFQ3VXR5WGdaRWxUVnpZcnVFenFydHgrWXdrNzJ5YmdETnIxSmR0eFhp?=
	=?utf-8?B?cEdHS040UnpJdHlVd05KbHlrMWx5L0I2L0g4Y0VvbmNaVmJua0FjR1V6eUp3?=
	=?utf-8?B?OUVCSHlZU3FSdjl3cHNiOVBXVmhBcnVNWTBMVU16L1RzaHJWVW53Q09Cd0R6?=
	=?utf-8?B?cmZSWFNqT3pJTlhXRGpMRExsNmZXMlhpdmFsK01zdFNtdk9Mem55aUE4NmVM?=
	=?utf-8?B?bmphbCtLZmw5cFVMLzF0c1o5MkpUS2FERlF3ZG1KMm9YVW9qWDhaSDB1dVk4?=
	=?utf-8?B?NGxGc0l6LytCTSt0QjFjK0tUNXhwKzNFRi9vaVgxTFlOcGNVNkhwMWt3WGFG?=
	=?utf-8?B?c3V0R3ZOeFdGWjFYUnNUMkVRT3hvWm5vTGIvZjNoLzZRSmpvMEQydXFBWUEv?=
	=?utf-8?B?WGRKT1FQV2FTWDVqMEpHemw2d05ZRVRsNFNyZGNpTU1CY2tqSnhUQUFjdlc1?=
	=?utf-8?B?d29kWXJIYTlPUFd2UmZVU1p6dUg0RFBVTDQwb3F0M0hPRUJBcVU2UVROenFT?=
	=?utf-8?B?UEdLd2tVNVA1cjlyYm5BVkVpRVFhQTRDajRBdmRFVDFUVnhOQm9WbW5zN24x?=
	=?utf-8?B?RWN6ckpxVFZoUFVXbno1Q2grOXEzUGFGeUtKN1VlbWtreDVCY3lQYnhtY0t1?=
	=?utf-8?B?a25mTUlBNys5Um1qazZKQXZ0YmlsakhrMkU0ZURocTdlTTF3b096VEpZZzcx?=
	=?utf-8?B?VzRndW1GUUowTUsxanliVlNlc0JOdklmTTJxNnpCMnR2Z1JPbW5FQkt0b1g1?=
	=?utf-8?B?MXY1UkQxcFN4U0J6QlZ3VXpoUEdSR0ZRRjJVVE1SSXVFVXAybkFNNGhXN3lv?=
	=?utf-8?B?cUJWRlZSUVA0YVFkQWlwQzU4SnNnc2ZrNGdGd0krMlBrVFUvWDNycWx0em5R?=
	=?utf-8?B?SU9WcnBuZ2kwTlVaV29ldHNrbk9LdzE3bmd3ck1xeVBnM2xCcStWN3VndkQz?=
	=?utf-8?B?OEhMZENBTU51SU83SXMweXlLL29aZEtvQ2E1UlUxOVU1c090OWl0RVBSVGl0?=
	=?utf-8?B?VlUyTHVDNml2L3pURFlYNmhkL1RhSGJWeWd4WTYvemNDMCt5L1RVMVpVbC92?=
	=?utf-8?B?ZjZ0cUJRaUtRNTg2bkg5NCtTc1VqM0hmRlFhR1lCV2dWc0FNVFQzeE9YeUxU?=
	=?utf-8?B?YmhPRlpjRGtiVWF1eGM4bFJqUUpUbTArTWlpTklmaG5rM25hWTFwUjl5WWJu?=
	=?utf-8?B?d2xpdzRnZ0FST043THNETjMzZ25tQnRPNStlUUlFcWRBMVRodzFoSjB3PT0=?=
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1137;
	6:VoYpdof2Dma8jILxnnDG8NNh+HsnWX04a6arP5HdazbKrltslHgCAQPUxm6LRfE/X+zvArwj0GOC2Xd8MYYy0VIIRX18mAXfSqtKtHEhvA6lZTmX3j7Q4WTdcp2UGM1j3FLpTPv5isWWxnyCTN9avxPdjlKALXaqDs9BnEsdvOKZOdsqG+XtOl1gKXS3d0dChVYdD/8fs1YsKlxg6sg0bY5OYkWNLjYUAG9CikQWDv6GvL2aup/FdvDntP+y7ULPUr5baXqfBp1VhCqvJ/WPcJ4Llc7wGsVKLIyph0y18oyHWrscC9NC60Gp7lfPExiNr9D34y+ag1EtAfdRpfLx/EqAwG27BxFnpWNQI5eXsO/8Cw+b49c7udnRiYmWM97rwlvDl7hKrqbDZSN0DDOrbSFaRWHnQKIR5+0h44zboYbeS6kbG3G7CxFzpucNQmNe323XqbgUG5XHCz7QXZQ6xuQ7bI41SmvsWBWCIrDny5o=;
	5:A6BU5VZl6tTW5Y7LSStEmqnDEwgoSm1FV3YTlBUpK3hbLe4CO3rLiv1R4es7SkZCZ+++/OFG7nH4wbwEp5ncI2iV9KhPlD+QxqdDf7sd/raojlUWpeZsh3JpGFPtIHgozAoj6J5B34gGKECy/ON2mQ==;
	24:Q6qoWA3JrJ1yPQSt/AloXpk3gWng94Aov1k8hfuiPNKc1oB4NX7S60KSUA/VxKmpyOlFoaUwDvKRT1QK0FbSh/W8gMAfZIGqYEvtN/hQyao=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; BN6PR12MB1137;
	7:2yglCluYCPsubxk/QPLkYRy/F2XS391zKFBDE0crHqhsK2fBpYUewhSMQfeNv0pd+bsr+ic1NmN+o/jpuxdaFi3m7ZnNsOtT8kxIhPhqLFHizkz9F5VNyOpzGQvSbgnnEy+xSBkduXmI1Y/bU7TvFCLLI57bK5zIkvCFBNqEz4v4uey7n4VXodG+nTYvJZYs6eXQ5ZA0om/EE9WQxJOJBllDmhj9By0c8MtxxmPOaj7GuSNjhsEQxJhdkVqN43odnnGjiNW9/U9mGlyAj0S7EAkYcbRuay7xi+XS4Fi8nRGtWLpREQTzo/VMem7r8SnUvZd66meXVeHTVL877ZCMVA==;
	20:y44IYT/2N7aPCrk/drEnUoQCoLYcuWM6kgVUcb1X1UwWJPoviqdRi02uM1TFa8e1+V8j8quQmqiKD4ngmZyaS45S/EC4zn9SkKv6KcIH1ID1nFFWip3ZoGMa71n3iLHpAi6yHEX1UBE4rsHWUjDbuXxjutbArFIMQG58d9XB8xvj/dQzLVd3r67Wp9K0RQrvWzkMdbOatN+XH74y+ntItd8TxMbMcv6xC64grjQqAPuopnUQ9XK2hvUhvpo/m0JJ
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Apr 2017 21:20:12.7968
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BN6PR12MB1137
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - April 18, 2017, 9:20 p.m.</div>
<pre class="content">
Since DMA addresses will effectively look like 48-bit addresses when the
memory encryption mask is set, SWIOTLB is needed if the DMA mask of the
device performing the DMA does not support 48-bits. SWIOTLB will be
initialized to create decrypted bounce buffers for use by these devices.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/dma-mapping.h |    5 ++-
 arch/x86/include/asm/mem_encrypt.h |    5 +++
 arch/x86/kernel/pci-dma.c          |   11 +++++--
 arch/x86/kernel/pci-nommu.c        |    2 +
 arch/x86/kernel/pci-swiotlb.c      |    8 ++++-
 arch/x86/mm/mem_encrypt.c          |   22 ++++++++++++++
 include/linux/mem_encrypt.h        |   10 ++++++
 include/linux/swiotlb.h            |    1 +
 init/main.c                        |   13 ++++++++
 lib/swiotlb.c                      |   56 +++++++++++++++++++++++++++++++-----
 10 files changed, 116 insertions(+), 17 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - May 16, 2017, 2:27 p.m.</div>
<pre class="content">
On Tue, Apr 18, 2017 at 04:20:10PM -0500, Tom Lendacky wrote:
<span class="quote">&gt; Since DMA addresses will effectively look like 48-bit addresses when the</span>
<span class="quote">&gt; memory encryption mask is set, SWIOTLB is needed if the DMA mask of the</span>
<span class="quote">&gt; device performing the DMA does not support 48-bits. SWIOTLB will be</span>
<span class="quote">&gt; initialized to create decrypted bounce buffers for use by these devices.</span>

Use a verb in the subject:

Subject: x86, swiotlb: Add memory encryption support

or similar.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - May 19, 2017, 7:54 p.m.</div>
<pre class="content">
On 5/16/2017 9:27 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Tue, Apr 18, 2017 at 04:20:10PM -0500, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Since DMA addresses will effectively look like 48-bit addresses when the</span>
<span class="quote">&gt;&gt; memory encryption mask is set, SWIOTLB is needed if the DMA mask of the</span>
<span class="quote">&gt;&gt; device performing the DMA does not support 48-bits. SWIOTLB will be</span>
<span class="quote">&gt;&gt; initialized to create decrypted bounce buffers for use by these devices.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Use a verb in the subject:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Subject: x86, swiotlb: Add memory encryption support</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; or similar.</span>

Will do.

Thanks,
Tom
<span class="quote">
&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">index 08a0838..d75430a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/io.h&gt;
 #include &lt;asm/swiotlb.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
<span class="p_add">+#include &lt;asm/mem_encrypt.h&gt;</span>
 
 #ifdef CONFIG_ISA
 # define ISA_DMA_BIT_MASK DMA_BIT_MASK(24)
<span class="p_chunk">@@ -62,12 +63,12 @@</span> <span class="p_context"> static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)</span>
 
 static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
 {
<span class="p_del">-	return paddr;</span>
<span class="p_add">+	return __sme_set(paddr);</span>
 }
 
 static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
 {
<span class="p_del">-	return daddr;</span>
<span class="p_add">+	return __sme_clr(daddr);</span>
 }
 #endif /* CONFIG_X86_DMA_REMAP */
 
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 130d7fe..0637b4b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -36,6 +36,11 @@</span> <span class="p_context"> void __init sme_early_decrypt(resource_size_t paddr,</span>
 
 void __init sme_early_init(void);
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #ifndef sme_me_mask
<span class="p_header">diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">index 3a216ec..72d96d4 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-dma.c</span>
<span class="p_chunk">@@ -93,9 +93,12 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (gfpflags_allow_blocking(flag)) {
 		page = dma_alloc_from_contiguous(dev, count, get_order(size),
 						 flag);
<span class="p_del">-		if (page &amp;&amp; page_to_phys(page) + size &gt; dma_mask) {</span>
<span class="p_del">-			dma_release_from_contiguous(dev, page, count);</span>
<span class="p_del">-			page = NULL;</span>
<span class="p_add">+		if (page) {</span>
<span class="p_add">+			addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_add">+			if (addr + size &gt; dma_mask) {</span>
<span class="p_add">+				dma_release_from_contiguous(dev, page, count);</span>
<span class="p_add">+				page = NULL;</span>
<span class="p_add">+			}</span>
 		}
 	}
 	/* fallback */
<span class="p_chunk">@@ -104,7 +107,7 @@</span> <span class="p_context"> void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
 	if (!page)
 		return NULL;
 
<span class="p_del">-	addr = page_to_phys(page);</span>
<span class="p_add">+	addr = phys_to_dma(dev, page_to_phys(page));</span>
 	if (addr + size &gt; dma_mask) {
 		__free_pages(page, get_order(size));
 
<span class="p_header">diff --git a/arch/x86/kernel/pci-nommu.c b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">index a88952e..98b576a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-nommu.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-nommu.c</span>
<span class="p_chunk">@@ -30,7 +30,7 @@</span> <span class="p_context"> static dma_addr_t nommu_map_page(struct device *dev, struct page *page,</span>
 				 enum dma_data_direction dir,
 				 unsigned long attrs)
 {
<span class="p_del">-	dma_addr_t bus = page_to_phys(page) + offset;</span>
<span class="p_add">+	dma_addr_t bus = phys_to_dma(dev, page_to_phys(page)) + offset;</span>
 	WARN_ON(size == 0);
 	if (!check_addr(&quot;map_single&quot;, dev, bus, size))
 		return DMA_ERROR_CODE;
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index 1e23577..a75fee7 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -12,6 +12,8 @@</span> <span class="p_context"></span>
 #include &lt;asm/dma.h&gt;
 #include &lt;asm/xen/swiotlb-xen.h&gt;
 #include &lt;asm/iommu_table.h&gt;
<span class="p_add">+#include &lt;asm/mem_encrypt.h&gt;</span>
<span class="p_add">+</span>
 int swiotlb __read_mostly;
 
 void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,
<span class="p_chunk">@@ -64,11 +66,13 @@</span> <span class="p_context"> void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
  * pci_swiotlb_detect_override - set swiotlb to 1 if necessary
  *
  * This returns non-zero if we are forced to use swiotlb (by the boot
<span class="p_del">- * option).</span>
<span class="p_add">+ * option). If memory encryption is enabled then swiotlb will be set</span>
<span class="p_add">+ * to 1 so that bounce buffers are allocated and used for devices that</span>
<span class="p_add">+ * do not support the addressing range required for the encryption mask.</span>
  */
 int __init pci_swiotlb_detect_override(void)
 {
<span class="p_del">-	if (swiotlb_force == SWIOTLB_FORCE)</span>
<span class="p_add">+	if ((swiotlb_force == SWIOTLB_FORCE) || sme_active())</span>
 		swiotlb = 1;
 
 	return swiotlb;
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 2321f05..30b07a3 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -16,11 +16,14 @@</span> <span class="p_context"></span>
 #ifdef CONFIG_AMD_MEM_ENCRYPT
 
 #include &lt;linux/mm.h&gt;
<span class="p_add">+#include &lt;linux/dma-mapping.h&gt;</span>
<span class="p_add">+#include &lt;linux/swiotlb.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/fixmap.h&gt;
 #include &lt;asm/setup.h&gt;
 #include &lt;asm/bootparam.h&gt;
<span class="p_add">+#include &lt;asm/cacheflush.h&gt;</span>
 
 /*
  * Since SME related variables are set early in the boot process they must
<span class="p_chunk">@@ -194,6 +197,25 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/* Architecture __weak replacement functions */</span>
<span class="p_add">+void __init mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!sme_me_mask)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Call into SWIOTLB to update the SWIOTLB DMA buffers */</span>
<span class="p_add">+	swiotlb_update_mem_attributes();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	WARN(PAGE_ALIGN(size) != size,</span>
<span class="p_add">+	     &quot;size is not page-aligned (%#lx)\n&quot;, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make the SWIOTLB buffer area decrypted */</span>
<span class="p_add">+	set_memory_decrypted((unsigned long)vaddr, size &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_encrypt_kernel(void)
 {
 }
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 14a7b9f..3c384d1 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -32,6 +32,16 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
<span class="p_add">+#ifndef __sme_set</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * The __sme_set() and __sme_clr() macros are useful for adding or removing</span>
<span class="p_add">+ * the encryption mask from a value (e.g. when dealing with pagetable</span>
<span class="p_add">+ * entries).</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define __sme_set(x)		((unsigned long)(x) | sme_me_mask)</span>
<span class="p_add">+#define __sme_clr(x)		((unsigned long)(x) &amp; ~sme_me_mask)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif	/* __ASSEMBLY__ */
 
 #endif	/* __MEM_ENCRYPT_H__ */
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 4ee479f..15e7160 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -35,6 +35,7 @@</span> <span class="p_context"> enum swiotlb_force {</span>
 extern unsigned long swiotlb_nr_tbl(void);
 unsigned long swiotlb_size_or_default(void);
 extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);
<span class="p_add">+extern void __init swiotlb_update_mem_attributes(void);</span>
 
 /*
  * Enumeration for sync targets
<span class="p_header">diff --git a/init/main.c b/init/main.c</span>
<span class="p_header">index b0c11cb..e5b4fb7 100644</span>
<span class="p_header">--- a/init/main.c</span>
<span class="p_header">+++ b/init/main.c</span>
<span class="p_chunk">@@ -467,6 +467,10 @@</span> <span class="p_context"> void __init __weak thread_stack_cache_init(void)</span>
 }
 #endif
 
<span class="p_add">+void __init __weak mem_encrypt_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Set up kernel memory allocators
  */
<span class="p_chunk">@@ -614,6 +618,15 @@</span> <span class="p_context"> asmlinkage __visible void __init start_kernel(void)</span>
 	 */
 	locking_selftest();
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This needs to be called before any devices perform DMA</span>
<span class="p_add">+	 * operations that might use the SWIOTLB bounce buffers.</span>
<span class="p_add">+	 * This call will mark the bounce buffers as decrypted so</span>
<span class="p_add">+	 * that their usage will not cause &quot;plain-text&quot; data to be</span>
<span class="p_add">+	 * decrypted when accessed.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mem_encrypt_init();</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (initrd_start &amp;&amp; !initrd_below_start_ok &amp;&amp;
 	    page_to_pfn(virt_to_page((void *)initrd_start)) &lt; min_low_pfn) {
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index a8d74a7..74d6557 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -30,6 +30,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/highmem.h&gt;
 #include &lt;linux/gfp.h&gt;
 #include &lt;linux/scatterlist.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 #include &lt;asm/io.h&gt;
 #include &lt;asm/dma.h&gt;
<span class="p_chunk">@@ -155,6 +156,17 @@</span> <span class="p_context"> unsigned long swiotlb_size_or_default(void)</span>
 	return size ? size : (IO_TLB_DEFAULT_SIZE);
 }
 
<span class="p_add">+void __weak swiotlb_set_mem_attributes(void *vaddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* For swiotlb, clear memory encryption mask from dma addresses */</span>
<span class="p_add">+static dma_addr_t swiotlb_phys_to_dma(struct device *hwdev,</span>
<span class="p_add">+				      phys_addr_t address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __sme_clr(phys_to_dma(hwdev, address));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Note that this doesn&#39;t work with highmem page */
 static dma_addr_t swiotlb_virt_to_bus(struct device *hwdev,
 				      volatile void *address)
<span class="p_chunk">@@ -183,6 +195,31 @@</span> <span class="p_context"> void swiotlb_print_info(void)</span>
 	       bytes &gt;&gt; 20, vstart, vend - 1);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Early SWIOTLB allocation may be too early to allow an architecture to</span>
<span class="p_add">+ * perform the desired operations.  This function allows the architecture to</span>
<span class="p_add">+ * call SWIOTLB when the operations are possible.  It needs to be called</span>
<span class="p_add">+ * before the SWIOTLB memory is used.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void __init swiotlb_update_mem_attributes(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *vaddr;</span>
<span class="p_add">+	unsigned long bytes;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (no_iotlb_memory || late_alloc)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_start);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_nslabs &lt;&lt; IO_TLB_SHIFT);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = phys_to_virt(io_tlb_overflow_buffer);</span>
<span class="p_add">+	bytes = PAGE_ALIGN(io_tlb_overflow);</span>
<span class="p_add">+	swiotlb_set_mem_attributes(vaddr, bytes);</span>
<span class="p_add">+	memset(vaddr, 0, bytes);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)
 {
 	void *v_overflow_buffer;
<span class="p_chunk">@@ -320,6 +357,7 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	io_tlb_start = virt_to_phys(tlb);
 	io_tlb_end = io_tlb_start + bytes;
 
<span class="p_add">+	swiotlb_set_mem_attributes(tlb, bytes);</span>
 	memset(tlb, 0, bytes);
 
 	/*
<span class="p_chunk">@@ -330,6 +368,8 @@</span> <span class="p_context"> int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
 	if (!v_overflow_buffer)
 		goto cleanup2;
 
<span class="p_add">+	swiotlb_set_mem_attributes(v_overflow_buffer, io_tlb_overflow);</span>
<span class="p_add">+	memset(v_overflow_buffer, 0, io_tlb_overflow);</span>
 	io_tlb_overflow_buffer = virt_to_phys(v_overflow_buffer);
 
 	/*
<span class="p_chunk">@@ -581,7 +621,7 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 		return SWIOTLB_MAP_ERROR;
 	}
 
<span class="p_del">-	start_dma_addr = phys_to_dma(hwdev, io_tlb_start);</span>
<span class="p_add">+	start_dma_addr = swiotlb_phys_to_dma(hwdev, io_tlb_start);</span>
 	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size,
 				      dir, attrs);
 }
<span class="p_chunk">@@ -702,7 +742,7 @@</span> <span class="p_context"> void swiotlb_tbl_sync_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 			goto err_warn;
 
 		ret = phys_to_virt(paddr);
<span class="p_del">-		dev_addr = phys_to_dma(hwdev, paddr);</span>
<span class="p_add">+		dev_addr = swiotlb_phys_to_dma(hwdev, paddr);</span>
 
 		/* Confirm address can be DMA&#39;d by device */
 		if (dev_addr + size - 1 &gt; dma_mask) {
<span class="p_chunk">@@ -812,10 +852,10 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	map = map_single(dev, phys, size, dir, attrs);
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
<span class="p_del">-		return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+		return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 	}
 
<span class="p_del">-	dev_addr = phys_to_dma(dev, map);</span>
<span class="p_add">+	dev_addr = swiotlb_phys_to_dma(dev, map);</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (dma_capable(dev, dev_addr, size))
<span class="p_chunk">@@ -824,7 +864,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	attrs |= DMA_ATTR_SKIP_CPU_SYNC;
 	swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);
 
<span class="p_del">-	return phys_to_dma(dev, io_tlb_overflow_buffer);</span>
<span class="p_add">+	return swiotlb_phys_to_dma(dev, io_tlb_overflow_buffer);</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_map_page);
 
<span class="p_chunk">@@ -958,7 +998,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 				sg_dma_len(sgl) = 0;
 				return 0;
 			}
<span class="p_del">-			sg-&gt;dma_address = phys_to_dma(hwdev, map);</span>
<span class="p_add">+			sg-&gt;dma_address = swiotlb_phys_to_dma(hwdev, map);</span>
 		} else
 			sg-&gt;dma_address = dev_addr;
 		sg_dma_len(sg) = sg-&gt;length;
<span class="p_chunk">@@ -1026,7 +1066,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr)
 {
<span class="p_del">-	return (dma_addr == phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
<span class="p_add">+	return (dma_addr == swiotlb_phys_to_dma(hwdev, io_tlb_overflow_buffer));</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_mapping_error);
 
<span class="p_chunk">@@ -1039,6 +1079,6 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 int
 swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_del">-	return phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="p_add">+	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
 }
 EXPORT_SYMBOL(swiotlb_dma_supported);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



