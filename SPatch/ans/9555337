
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V2,7/7] mm: add a separate RSS for MADV_FREE pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V2,7/7] mm: add a separate RSS for MADV_FREE pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 3, 2017, 11:33 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;123396e3b523e8716dfc6fc87a5cea0c124ff29d.1486163864.git.shli@fb.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9555337/mbox/"
   >mbox</a>
|
   <a href="/patch/9555337/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9555337/">/patch/9555337/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B0F6E602B7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Feb 2017 23:34:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A21372818E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Feb 2017 23:34:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 92457200DF; Fri,  3 Feb 2017 23:34:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6C01F200DF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  3 Feb 2017 23:34:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753308AbdBCXe1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 3 Feb 2017 18:34:27 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:41076 &quot;EHLO
	mx0b-00082601.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752889AbdBCXd3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 3 Feb 2017 18:33:29 -0500
Received: from pps.filterd (m0109331.ppops.net [127.0.0.1])
	by mx0a-00082601.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v13NX1eh000515
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 3 Feb 2017 15:33:29 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com;
	h=from : to : cc : subject
	: date : message-id : in-reply-to : references : mime-version :
	content-type; s=facebook;
	bh=SKO2MWZ0LRxztlfGyD//JRPCQ+jkq/NrVyecO0G+TAI=; 
	b=Cd6wXaL8iU6CDNxclmYhRGfBUIkhY2q8pEUwZR226bD2AVt4Z6/QX2aY0PfLZO8pizyU
	3TGwZQxkeH7iCLloyeTX5Kfp231vSSUhqK9oFIEWTdqpUMEKUmtRbd6Ih/4+f8G1VnJ0
	wAcp5g20su/oGNRihTORFzL1ZygAvqF4oGo= 
Received: from mail.thefacebook.com ([199.201.64.23])
	by mx0a-00082601.pphosted.com with ESMTP id 28cxtrgq7r-3
	(version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 03 Feb 2017 15:33:28 -0800
Received: from mx-out.facebook.com (192.168.52.123) by
	PRN-CHUB07.TheFacebook.com (192.168.16.17) with Microsoft SMTP Server
	(TLS) id 14.3.294.0; Fri, 3 Feb 2017 15:33:27 -0800
Received: from facebook.com (2401:db00:21:603d:face:0:19:0)     by
	mx-out.facebook.com (10.223.100.99) with ESMTP id
	28cfe6daea6911e69b7624be05956610-563696d0 for
	&lt;linux-kernel@vger.kernel.org&gt;; Fri, 03 Feb 2017 15:33:26 -0800
Received: by devbig638.prn2.facebook.com (Postfix, from userid 11222)   id
	DE81F42C1876; Fri,  3 Feb 2017 15:33:23 -0800 (PST)
Smtp-Origin-Hostprefix: devbig
From: Shaohua Li &lt;shli@fb.com&gt;
Smtp-Origin-Hostname: devbig638.prn2.facebook.com
To: &lt;linux-kernel@vger.kernel.org&gt;, &lt;linux-mm@kvack.org&gt;
CC: &lt;Kernel-team@fb.com&gt;, &lt;danielmicay@gmail.com&gt;, &lt;mhocko@suse.com&gt;,
	&lt;minchan@kernel.org&gt;, &lt;hughd@google.com&gt;, &lt;hannes@cmpxchg.org&gt;,
	&lt;riel@redhat.com&gt;, &lt;mgorman@techsingularity.net&gt;,
	&lt;akpm@linux-foundation.org&gt;
Smtp-Origin-Cluster: prn2c22
Subject: [PATCH V2 7/7] mm: add a separate RSS for MADV_FREE pages
Date: Fri, 3 Feb 2017 15:33:23 -0800
Message-ID: &lt;123396e3b523e8716dfc6fc87a5cea0c124ff29d.1486163864.git.shli@fb.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;cover.1486163864.git.shli@fb.com&gt;
References: &lt;cover.1486163864.git.shli@fb.com&gt;
X-FB-Internal: Safe
MIME-Version: 1.0
Content-Type: text/plain
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-02-03_16:, , signatures=0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Feb. 3, 2017, 11:33 p.m.</div>
<pre class="content">
Add a separate RSS for MADV_FREE pages. The pages are charged into
MM_ANONPAGES (because they are mapped anon pages) and also charged into
the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to
display the RSS, which userspace can use to determine the RSS excluding
MADV_FREE pages.

The basic idea is to increment the RSS in madvise and decrement in unmap
or page reclaim. There is one limitation. If a page is shared by two
processes, since madvise only has mm cotext of current process, it isn&#39;t
convenient to charge the RSS for both processes. So we don&#39;t charge the
RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a
MADV_FREE page shared by two processes. To make things consistent, we
uncharge the RSS from the source mm in fork.

A new flag is added to indicate if a page is accounted into the RSS. We
can&#39;t use SwapBacked flag to do the determination because we can&#39;t
guarantee the page has SwapBacked flag cleared in madvise. We are
reusing mappedtodisk flag which should not be set for Anon pages.

There are a couple of other places we need to uncharge the RSS,
activate_page and mark_page_accessed. activate_page is used by swap,
where MADV_FREE pages are already not in lazyfree state before going
into swap. mark_page_accessed is mainly used for file pages, but there
are several places it&#39;s used by anonymous pages. I fixed gup, but not
some gpu drivers and kvm. If the drivers use MADV_FREE, we might have
inprecise RSS accounting.

Please note, the accounting is never going to be precise. MADV_FREE page
could be written by userspace without notification to the kernel. The
page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t
real lazyfree page. But since kernel isn&#39;t aware of this, the page is
still accounted as lazyfree, thus the accounting could be incorrect.

Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
<span class="signed-off-by">Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
---
 fs/proc/array.c            |  9 ++++++---
 fs/proc/internal.h         |  3 ++-
 fs/proc/task_mmu.c         |  9 +++++++--
 fs/proc/task_nommu.c       |  4 +++-
 include/linux/mm_types.h   |  1 +
 include/linux/page-flags.h |  6 ++++++
 mm/gup.c                   |  2 ++
 mm/huge_memory.c           |  8 ++++++++
 mm/khugepaged.c            |  2 ++
 mm/madvise.c               |  5 +++++
 mm/memory.c                | 13 +++++++++++--
 mm/migrate.c               |  2 ++
 mm/oom_kill.c              | 10 ++++++----
 mm/rmap.c                  |  3 +++
 14 files changed, 64 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 10, 2017, 1:35 p.m.</div>
<pre class="content">
On Fri 03-02-17 15:33:23, Shaohua Li wrote:
<span class="quote">&gt; Add a separate RSS for MADV_FREE pages. The pages are charged into</span>
<span class="quote">&gt; MM_ANONPAGES (because they are mapped anon pages) and also charged into</span>
<span class="quote">&gt; the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to</span>
<span class="quote">&gt; display the RSS, which userspace can use to determine the RSS excluding</span>
<span class="quote">&gt; MADV_FREE pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The basic idea is to increment the RSS in madvise and decrement in unmap</span>
<span class="quote">&gt; or page reclaim. There is one limitation. If a page is shared by two</span>
<span class="quote">&gt; processes, since madvise only has mm cotext of current process, it isn&#39;t</span>
<span class="quote">&gt; convenient to charge the RSS for both processes. So we don&#39;t charge the</span>
<span class="quote">&gt; RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a</span>
<span class="quote">&gt; MADV_FREE page shared by two processes. To make things consistent, we</span>
<span class="quote">&gt; uncharge the RSS from the source mm in fork.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A new flag is added to indicate if a page is accounted into the RSS. We</span>
<span class="quote">&gt; can&#39;t use SwapBacked flag to do the determination because we can&#39;t</span>
<span class="quote">&gt; guarantee the page has SwapBacked flag cleared in madvise. We are</span>
<span class="quote">&gt; reusing mappedtodisk flag which should not be set for Anon pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There are a couple of other places we need to uncharge the RSS,</span>
<span class="quote">&gt; activate_page and mark_page_accessed. activate_page is used by swap,</span>
<span class="quote">&gt; where MADV_FREE pages are already not in lazyfree state before going</span>
<span class="quote">&gt; into swap. mark_page_accessed is mainly used for file pages, but there</span>
<span class="quote">&gt; are several places it&#39;s used by anonymous pages. I fixed gup, but not</span>
<span class="quote">&gt; some gpu drivers and kvm. If the drivers use MADV_FREE, we might have</span>
<span class="quote">&gt; inprecise RSS accounting.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please note, the accounting is never going to be precise. MADV_FREE page</span>
<span class="quote">&gt; could be written by userspace without notification to the kernel. The</span>
<span class="quote">&gt; page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t</span>
<span class="quote">&gt; real lazyfree page. But since kernel isn&#39;t aware of this, the page is</span>
<span class="quote">&gt; still accounted as lazyfree, thus the accounting could be incorrect.</span>

This is all quite complex and as you say unprecise already. From the
description it is not even clear why do we need it at all. Why is
/proc/&lt;pid&gt;/smaps insufficient? I am also not fun of a new page flag -
even though you managed to recycle an existing one which is a plus.

Thanks
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Feb. 10, 2017, 6:01 p.m.</div>
<pre class="content">
On Fri, Feb 10, 2017 at 02:35:05PM +0100, Michal Hocko wrote:
<span class="quote">&gt; On Fri 03-02-17 15:33:23, Shaohua Li wrote:</span>
<span class="quote">&gt; &gt; Add a separate RSS for MADV_FREE pages. The pages are charged into</span>
<span class="quote">&gt; &gt; MM_ANONPAGES (because they are mapped anon pages) and also charged into</span>
<span class="quote">&gt; &gt; the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to</span>
<span class="quote">&gt; &gt; display the RSS, which userspace can use to determine the RSS excluding</span>
<span class="quote">&gt; &gt; MADV_FREE pages.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The basic idea is to increment the RSS in madvise and decrement in unmap</span>
<span class="quote">&gt; &gt; or page reclaim. There is one limitation. If a page is shared by two</span>
<span class="quote">&gt; &gt; processes, since madvise only has mm cotext of current process, it isn&#39;t</span>
<span class="quote">&gt; &gt; convenient to charge the RSS for both processes. So we don&#39;t charge the</span>
<span class="quote">&gt; &gt; RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a</span>
<span class="quote">&gt; &gt; MADV_FREE page shared by two processes. To make things consistent, we</span>
<span class="quote">&gt; &gt; uncharge the RSS from the source mm in fork.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; A new flag is added to indicate if a page is accounted into the RSS. We</span>
<span class="quote">&gt; &gt; can&#39;t use SwapBacked flag to do the determination because we can&#39;t</span>
<span class="quote">&gt; &gt; guarantee the page has SwapBacked flag cleared in madvise. We are</span>
<span class="quote">&gt; &gt; reusing mappedtodisk flag which should not be set for Anon pages.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; There are a couple of other places we need to uncharge the RSS,</span>
<span class="quote">&gt; &gt; activate_page and mark_page_accessed. activate_page is used by swap,</span>
<span class="quote">&gt; &gt; where MADV_FREE pages are already not in lazyfree state before going</span>
<span class="quote">&gt; &gt; into swap. mark_page_accessed is mainly used for file pages, but there</span>
<span class="quote">&gt; &gt; are several places it&#39;s used by anonymous pages. I fixed gup, but not</span>
<span class="quote">&gt; &gt; some gpu drivers and kvm. If the drivers use MADV_FREE, we might have</span>
<span class="quote">&gt; &gt; inprecise RSS accounting.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please note, the accounting is never going to be precise. MADV_FREE page</span>
<span class="quote">&gt; &gt; could be written by userspace without notification to the kernel. The</span>
<span class="quote">&gt; &gt; page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t</span>
<span class="quote">&gt; &gt; real lazyfree page. But since kernel isn&#39;t aware of this, the page is</span>
<span class="quote">&gt; &gt; still accounted as lazyfree, thus the accounting could be incorrect.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is all quite complex and as you say unprecise already. From the</span>
<span class="quote">&gt; description it is not even clear why do we need it at all. Why is</span>
<span class="quote">&gt; /proc/&lt;pid&gt;/smaps insufficient? I am also not fun of a new page flag -</span>
<span class="quote">&gt; even though you managed to recycle an existing one which is a plus.</span>

We have monitor app running in the system to check other apps&#39; RSS and kill
them if RSS is abnormal. Checking /proc/pid/smaps is too complicated and slow,
don&#39;t think we can go that way. Yes, the accounting isn&#39;t precise, but should
be much better than exporting nothing to userspace.

Thanks,
Shaohua
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 21, 2017, 9:45 a.m.</div>
<pre class="content">
On Fri 10-02-17 10:01:02, Shaohua Li wrote:
<span class="quote">&gt; On Fri, Feb 10, 2017 at 02:35:05PM +0100, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Fri 03-02-17 15:33:23, Shaohua Li wrote:</span>
<span class="quote">&gt; &gt; &gt; Add a separate RSS for MADV_FREE pages. The pages are charged into</span>
<span class="quote">&gt; &gt; &gt; MM_ANONPAGES (because they are mapped anon pages) and also charged into</span>
<span class="quote">&gt; &gt; &gt; the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to</span>
<span class="quote">&gt; &gt; &gt; display the RSS, which userspace can use to determine the RSS excluding</span>
<span class="quote">&gt; &gt; &gt; MADV_FREE pages.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The basic idea is to increment the RSS in madvise and decrement in unmap</span>
<span class="quote">&gt; &gt; &gt; or page reclaim. There is one limitation. If a page is shared by two</span>
<span class="quote">&gt; &gt; &gt; processes, since madvise only has mm cotext of current process, it isn&#39;t</span>
<span class="quote">&gt; &gt; &gt; convenient to charge the RSS for both processes. So we don&#39;t charge the</span>
<span class="quote">&gt; &gt; &gt; RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a</span>
<span class="quote">&gt; &gt; &gt; MADV_FREE page shared by two processes. To make things consistent, we</span>
<span class="quote">&gt; &gt; &gt; uncharge the RSS from the source mm in fork.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; A new flag is added to indicate if a page is accounted into the RSS. We</span>
<span class="quote">&gt; &gt; &gt; can&#39;t use SwapBacked flag to do the determination because we can&#39;t</span>
<span class="quote">&gt; &gt; &gt; guarantee the page has SwapBacked flag cleared in madvise. We are</span>
<span class="quote">&gt; &gt; &gt; reusing mappedtodisk flag which should not be set for Anon pages.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; There are a couple of other places we need to uncharge the RSS,</span>
<span class="quote">&gt; &gt; &gt; activate_page and mark_page_accessed. activate_page is used by swap,</span>
<span class="quote">&gt; &gt; &gt; where MADV_FREE pages are already not in lazyfree state before going</span>
<span class="quote">&gt; &gt; &gt; into swap. mark_page_accessed is mainly used for file pages, but there</span>
<span class="quote">&gt; &gt; &gt; are several places it&#39;s used by anonymous pages. I fixed gup, but not</span>
<span class="quote">&gt; &gt; &gt; some gpu drivers and kvm. If the drivers use MADV_FREE, we might have</span>
<span class="quote">&gt; &gt; &gt; inprecise RSS accounting.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Please note, the accounting is never going to be precise. MADV_FREE page</span>
<span class="quote">&gt; &gt; &gt; could be written by userspace without notification to the kernel. The</span>
<span class="quote">&gt; &gt; &gt; page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t</span>
<span class="quote">&gt; &gt; &gt; real lazyfree page. But since kernel isn&#39;t aware of this, the page is</span>
<span class="quote">&gt; &gt; &gt; still accounted as lazyfree, thus the accounting could be incorrect.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This is all quite complex and as you say unprecise already. From the</span>
<span class="quote">&gt; &gt; description it is not even clear why do we need it at all. Why is</span>
<span class="quote">&gt; &gt; /proc/&lt;pid&gt;/smaps insufficient? I am also not fun of a new page flag -</span>
<span class="quote">&gt; &gt; even though you managed to recycle an existing one which is a plus.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We have monitor app running in the system to check other apps&#39; RSS and kill</span>
<span class="quote">&gt; them if RSS is abnormal. Checking /proc/pid/smaps is too complicated and slow,</span>
<span class="quote">&gt; don&#39;t think we can go that way.</span>

Could you be more specific about why &quot;slow&quot; matters?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Feb. 22, 2017, 12:46 a.m.</div>
<pre class="content">
Hi Shaohua,

On Fri, Feb 03, 2017 at 03:33:23PM -0800, Shaohua Li wrote:
<span class="quote">&gt; Add a separate RSS for MADV_FREE pages. The pages are charged into</span>
<span class="quote">&gt; MM_ANONPAGES (because they are mapped anon pages) and also charged into</span>
<span class="quote">&gt; the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to</span>
<span class="quote">&gt; display the RSS, which userspace can use to determine the RSS excluding</span>
<span class="quote">&gt; MADV_FREE pages.</span>

I&#39;m not sure statm is right place. With definition of statm and considering
your usecase, it would be right place but when I look &quot;stuats&quot;, it already
shows RssAnon, RssFile and RssShmem so I thought we can add RssLazy to it.
It would be more consistent if you don&#39;t have big overhead.
<span class="quote">
&gt; </span>
<span class="quote">&gt; The basic idea is to increment the RSS in madvise and decrement in unmap</span>
<span class="quote">&gt; or page reclaim. There is one limitation. If a page is shared by two</span>
<span class="quote">&gt; processes, since madvise only has mm cotext of current process, it isn&#39;t</span>
<span class="quote">&gt; convenient to charge the RSS for both processes. So we don&#39;t charge the</span>
<span class="quote">&gt; RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a</span>
<span class="quote">&gt; MADV_FREE page shared by two processes. To make things consistent, we</span>
<span class="quote">&gt; uncharge the RSS from the source mm in fork.</span>

I don&#39;t understand why we need new flag.

What&#39;s the problem like handling it normal anon|file|swapent|shmem?
IOW, we can increase in madvise context and increase for child in copy_one_pte
if the pte is still not dirty. And then decrease it in zap_pte_range/
try_to_unmap_one if it finds it&#39;s dirty or discardable.

Although it&#39;s shared by fork, VM can discard it if processes doesn&#39;t
make it dirty.
<span class="quote">
&gt; </span>
<span class="quote">&gt; A new flag is added to indicate if a page is accounted into the RSS. We</span>
<span class="quote">&gt; can&#39;t use SwapBacked flag to do the determination because we can&#39;t</span>
<span class="quote">&gt; guarantee the page has SwapBacked flag cleared in madvise. We are</span>
<span class="quote">&gt; reusing mappedtodisk flag which should not be set for Anon pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There are a couple of other places we need to uncharge the RSS,</span>
<span class="quote">&gt; activate_page and mark_page_accessed. activate_page is used by swap,</span>
<span class="quote">&gt; where MADV_FREE pages are already not in lazyfree state before going</span>
<span class="quote">&gt; into swap. mark_page_accessed is mainly used for file pages, but there</span>
<span class="quote">&gt; are several places it&#39;s used by anonymous pages. I fixed gup, but not</span>
<span class="quote">&gt; some gpu drivers and kvm. If the drivers use MADV_FREE, we might have</span>
<span class="quote">&gt; inprecise RSS accounting.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please note, the accounting is never going to be precise. MADV_FREE page</span>
<span class="quote">&gt; could be written by userspace without notification to the kernel. The</span>
<span class="quote">&gt; page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t</span>
<span class="quote">&gt; real lazyfree page. But since kernel isn&#39;t aware of this, the page is</span>
<span class="quote">&gt; still accounted as lazyfree, thus the accounting could be incorrect.</span>

Right. Lazyfree is not inaccurate without CoW where it&#39;s point to decrease
lazyfree rss count when the store happens so we might be tempted to make
it to Cow at the cost of performance degradation but still it&#39;s not accurate
without making mark_page_accessed be aware of each mm context which is
hard part. So, I agree this stat is useful but don&#39;t want to make it
complicate.

Thanks.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Hugh Dickins &lt;hughd@google.com&gt;</span>
<span class="quote">&gt; Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Cc: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Shaohua Li &lt;shli@fb.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/proc/array.c            |  9 ++++++---</span>
<span class="quote">&gt;  fs/proc/internal.h         |  3 ++-</span>
<span class="quote">&gt;  fs/proc/task_mmu.c         |  9 +++++++--</span>
<span class="quote">&gt;  fs/proc/task_nommu.c       |  4 +++-</span>
<span class="quote">&gt;  include/linux/mm_types.h   |  1 +</span>
<span class="quote">&gt;  include/linux/page-flags.h |  6 ++++++</span>
<span class="quote">&gt;  mm/gup.c                   |  2 ++</span>
<span class="quote">&gt;  mm/huge_memory.c           |  8 ++++++++</span>
<span class="quote">&gt;  mm/khugepaged.c            |  2 ++</span>
<span class="quote">&gt;  mm/madvise.c               |  5 +++++</span>
<span class="quote">&gt;  mm/memory.c                | 13 +++++++++++--</span>
<span class="quote">&gt;  mm/migrate.c               |  2 ++</span>
<span class="quote">&gt;  mm/oom_kill.c              | 10 ++++++----</span>
<span class="quote">&gt;  mm/rmap.c                  |  3 +++</span>
<span class="quote">&gt;  14 files changed, 64 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/proc/array.c b/fs/proc/array.c</span>
<span class="quote">&gt; index 51a4213..c2281f4 100644</span>
<span class="quote">&gt; --- a/fs/proc/array.c</span>
<span class="quote">&gt; +++ b/fs/proc/array.c</span>
<span class="quote">&gt; @@ -583,17 +583,19 @@ int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,</span>
<span class="quote">&gt;  			struct pid *pid, struct task_struct *task)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long size = 0, resident = 0, shared = 0, text = 0, data = 0;</span>
<span class="quote">&gt; +	unsigned long lazyfree = 0;</span>
<span class="quote">&gt;  	struct mm_struct *mm = get_task_mm(task);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (mm) {</span>
<span class="quote">&gt; -		size = task_statm(mm, &amp;shared, &amp;text, &amp;data, &amp;resident);</span>
<span class="quote">&gt; +		size = task_statm(mm, &amp;shared, &amp;text, &amp;data, &amp;resident,</span>
<span class="quote">&gt; +				  &amp;lazyfree);</span>
<span class="quote">&gt;  		mmput(mm);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * For quick read, open code by putting numbers directly</span>
<span class="quote">&gt;  	 * expected format is</span>
<span class="quote">&gt; -	 * seq_printf(m, &quot;%lu %lu %lu %lu 0 %lu 0\n&quot;,</span>
<span class="quote">&gt; -	 *               size, resident, shared, text, data);</span>
<span class="quote">&gt; +	 * seq_printf(m, &quot;%lu %lu %lu %lu 0 %lu 0 %lu\n&quot;,</span>
<span class="quote">&gt; +	 *               size, resident, shared, text, data, lazyfree);</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	seq_put_decimal_ull(m, &quot;&quot;, size);</span>
<span class="quote">&gt;  	seq_put_decimal_ull(m, &quot; &quot;, resident);</span>
<span class="quote">&gt; @@ -602,6 +604,7 @@ int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,</span>
<span class="quote">&gt;  	seq_put_decimal_ull(m, &quot; &quot;, 0);</span>
<span class="quote">&gt;  	seq_put_decimal_ull(m, &quot; &quot;, data);</span>
<span class="quote">&gt;  	seq_put_decimal_ull(m, &quot; &quot;, 0);</span>
<span class="quote">&gt; +	seq_put_decimal_ull(m, &quot; &quot;, lazyfree);</span>
<span class="quote">&gt;  	seq_putc(m, &#39;\n&#39;);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt; diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="quote">&gt; index e2c3c46..6587b9c 100644</span>
<span class="quote">&gt; --- a/fs/proc/internal.h</span>
<span class="quote">&gt; +++ b/fs/proc/internal.h</span>
<span class="quote">&gt; @@ -290,5 +290,6 @@ extern const struct file_operations proc_pagemap_operations;</span>
<span class="quote">&gt;  extern unsigned long task_vsize(struct mm_struct *);</span>
<span class="quote">&gt;  extern unsigned long task_statm(struct mm_struct *,</span>
<span class="quote">&gt;  				unsigned long *, unsigned long *,</span>
<span class="quote">&gt; -				unsigned long *, unsigned long *);</span>
<span class="quote">&gt; +				unsigned long *, unsigned long *,</span>
<span class="quote">&gt; +				unsigned long *);</span>
<span class="quote">&gt;  extern void task_mem(struct seq_file *, struct mm_struct *);</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 8f2423f..f18b568 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -23,9 +23,10 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem;</span>
<span class="quote">&gt; +	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem, lazyfree;</span>
<span class="quote">&gt;  	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	lazyfree = get_mm_counter(mm, MM_LAZYFREEPAGES);</span>
<span class="quote">&gt;  	anon = get_mm_counter(mm, MM_ANONPAGES);</span>
<span class="quote">&gt;  	file = get_mm_counter(mm, MM_FILEPAGES);</span>
<span class="quote">&gt;  	shmem = get_mm_counter(mm, MM_SHMEMPAGES);</span>
<span class="quote">&gt; @@ -59,6 +60,7 @@ void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
<span class="quote">&gt;  		&quot;RssAnon:\t%8lu kB\n&quot;</span>
<span class="quote">&gt;  		&quot;RssFile:\t%8lu kB\n&quot;</span>
<span class="quote">&gt;  		&quot;RssShmem:\t%8lu kB\n&quot;</span>
<span class="quote">&gt; +		&quot;RssLazyfree:\t%8lu kB\n&quot;</span>
<span class="quote">&gt;  		&quot;VmData:\t%8lu kB\n&quot;</span>
<span class="quote">&gt;  		&quot;VmStk:\t%8lu kB\n&quot;</span>
<span class="quote">&gt;  		&quot;VmExe:\t%8lu kB\n&quot;</span>
<span class="quote">&gt; @@ -75,6 +77,7 @@ void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
<span class="quote">&gt;  		anon &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="quote">&gt;  		file &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="quote">&gt;  		shmem &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="quote">&gt; +		lazyfree &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="quote">&gt;  		mm-&gt;data_vm &lt;&lt; (PAGE_SHIFT-10),</span>
<span class="quote">&gt;  		mm-&gt;stack_vm &lt;&lt; (PAGE_SHIFT-10), text, lib,</span>
<span class="quote">&gt;  		ptes &gt;&gt; 10,</span>
<span class="quote">&gt; @@ -90,7 +93,8 @@ unsigned long task_vsize(struct mm_struct *mm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  unsigned long task_statm(struct mm_struct *mm,</span>
<span class="quote">&gt;  			 unsigned long *shared, unsigned long *text,</span>
<span class="quote">&gt; -			 unsigned long *data, unsigned long *resident)</span>
<span class="quote">&gt; +			 unsigned long *data, unsigned long *resident,</span>
<span class="quote">&gt; +			 unsigned long *lazyfree)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	*shared = get_mm_counter(mm, MM_FILEPAGES) +</span>
<span class="quote">&gt;  			get_mm_counter(mm, MM_SHMEMPAGES);</span>
<span class="quote">&gt; @@ -98,6 +102,7 @@ unsigned long task_statm(struct mm_struct *mm,</span>
<span class="quote">&gt;  								&gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	*data = mm-&gt;data_vm + mm-&gt;stack_vm;</span>
<span class="quote">&gt;  	*resident = *shared + get_mm_counter(mm, MM_ANONPAGES);</span>
<span class="quote">&gt; +	*lazyfree = get_mm_counter(mm, MM_LAZYFREEPAGES);</span>
<span class="quote">&gt;  	return mm-&gt;total_vm;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/fs/proc/task_nommu.c b/fs/proc/task_nommu.c</span>
<span class="quote">&gt; index 1ef97cf..50426de 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_nommu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_nommu.c</span>
<span class="quote">&gt; @@ -94,7 +94,8 @@ unsigned long task_vsize(struct mm_struct *mm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  unsigned long task_statm(struct mm_struct *mm,</span>
<span class="quote">&gt;  			 unsigned long *shared, unsigned long *text,</span>
<span class="quote">&gt; -			 unsigned long *data, unsigned long *resident)</span>
<span class="quote">&gt; +			 unsigned long *data, unsigned long *resident,</span>
<span class="quote">&gt; +			 unsigned long *lazyfree)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct vm_area_struct *vma;</span>
<span class="quote">&gt;  	struct vm_region *region;</span>
<span class="quote">&gt; @@ -120,6 +121,7 @@ unsigned long task_statm(struct mm_struct *mm,</span>
<span class="quote">&gt;  	size &gt;&gt;= PAGE_SHIFT;</span>
<span class="quote">&gt;  	size += *text + *data;</span>
<span class="quote">&gt;  	*resident = size;</span>
<span class="quote">&gt; +	*lazyfree = 0;</span>
<span class="quote">&gt;  	return size;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="quote">&gt; index 4f6d440..b6a1428 100644</span>
<span class="quote">&gt; --- a/include/linux/mm_types.h</span>
<span class="quote">&gt; +++ b/include/linux/mm_types.h</span>
<span class="quote">&gt; @@ -376,6 +376,7 @@ enum {</span>
<span class="quote">&gt;  	MM_ANONPAGES,	/* Resident anonymous pages */</span>
<span class="quote">&gt;  	MM_SWAPENTS,	/* Anonymous swap entries */</span>
<span class="quote">&gt;  	MM_SHMEMPAGES,	/* Resident shared memory pages */</span>
<span class="quote">&gt; +	MM_LAZYFREEPAGES, /* Lazyfree pages, also charged into MM_ANONPAGES */</span>
<span class="quote">&gt;  	NR_MM_COUNTERS</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="quote">&gt; index 6b5818d..67c732b 100644</span>
<span class="quote">&gt; --- a/include/linux/page-flags.h</span>
<span class="quote">&gt; +++ b/include/linux/page-flags.h</span>
<span class="quote">&gt; @@ -107,6 +107,8 @@ enum pageflags {</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	__NR_PAGEFLAGS,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	PG_lazyfreeaccounted = PG_mappedtodisk, /* only for anon MADV_FREE pages */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* Filesystems */</span>
<span class="quote">&gt;  	PG_checked = PG_owner_priv_1,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -428,6 +430,10 @@ TESTPAGEFLAG_FALSE(Ksm)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  u64 stable_page_flags(struct page *page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +PAGEFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="quote">&gt; +	TESTSETFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="quote">&gt; +	TESTCLEARFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static inline int PageUptodate(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int ret;</span>
<span class="quote">&gt; diff --git a/mm/gup.c b/mm/gup.c</span>
<span class="quote">&gt; index 40abe4c..e64d990 100644</span>
<span class="quote">&gt; --- a/mm/gup.c</span>
<span class="quote">&gt; +++ b/mm/gup.c</span>
<span class="quote">&gt; @@ -171,6 +171,8 @@ static struct page *follow_page_pte(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		 * mark_page_accessed().</span>
<span class="quote">&gt;  		 */</span>
<span class="quote">&gt;  		mark_page_accessed(page);</span>
<span class="quote">&gt; +		if (PageAnon(page) &amp;&amp; TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +			dec_mm_counter(mm, MM_LAZYFREEPAGES);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	if ((flags &amp; FOLL_MLOCK) &amp;&amp; (vma-&gt;vm_flags &amp; VM_LOCKED)) {</span>
<span class="quote">&gt;  		/* Do not mlock pte-mapped THP */</span>
<span class="quote">&gt; diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="quote">&gt; index ddb9a94..951fa34 100644</span>
<span class="quote">&gt; --- a/mm/huge_memory.c</span>
<span class="quote">&gt; +++ b/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -871,6 +871,8 @@ int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;  	VM_BUG_ON_PAGE(!PageHead(src_page), src_page);</span>
<span class="quote">&gt;  	get_page(src_page);</span>
<span class="quote">&gt;  	page_dup_rmap(src_page, true);</span>
<span class="quote">&gt; +	if (PageAnon(src_page) &amp;&amp; TestClearPageLazyFreeAccounted(src_page))</span>
<span class="quote">&gt; +		add_mm_counter(src_mm, MM_LAZYFREEPAGES, -HPAGE_PMD_NR);</span>
<span class="quote">&gt;  	add_mm_counter(dst_mm, MM_ANONPAGES, HPAGE_PMD_NR);</span>
<span class="quote">&gt;  	atomic_long_inc(&amp;dst_mm-&gt;nr_ptes);</span>
<span class="quote">&gt;  	pgtable_trans_huge_deposit(dst_mm, dst_pmd, pgtable);</span>
<span class="quote">&gt; @@ -1402,6 +1404,8 @@ bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (page_mapcount(page) == 1 &amp;&amp; !TestSetPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +		add_mm_counter(mm, MM_LAZYFREEPAGES, HPAGE_PMD_NR);</span>
<span class="quote">&gt;  	mark_page_lazyfree(page);</span>
<span class="quote">&gt;  	ret = true;</span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt; @@ -1459,6 +1463,9 @@ int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  			pte_free(tlb-&gt;mm, pgtable);</span>
<span class="quote">&gt;  			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="quote">&gt;  			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="quote">&gt; +			if (TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +				add_mm_counter(tlb-&gt;mm, MM_LAZYFREEPAGES,</span>
<span class="quote">&gt; +						-HPAGE_PMD_NR);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt;  			if (arch_needs_pgtable_deposit())</span>
<span class="quote">&gt;  				zap_deposited_table(tlb-&gt;mm, pmd);</span>
<span class="quote">&gt; @@ -1917,6 +1924,7 @@ static void __split_huge_page_tail(struct page *head, int tail,</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_swapbacked) |</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_mlocked) |</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_uptodate) |</span>
<span class="quote">&gt; +			 (1L &lt;&lt; PG_lazyfreeaccounted) |</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_active) |</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_locked) |</span>
<span class="quote">&gt;  			 (1L &lt;&lt; PG_unevictable) |</span>
<span class="quote">&gt; diff --git a/mm/khugepaged.c b/mm/khugepaged.c</span>
<span class="quote">&gt; index a4b499f..e4668db 100644</span>
<span class="quote">&gt; --- a/mm/khugepaged.c</span>
<span class="quote">&gt; +++ b/mm/khugepaged.c</span>
<span class="quote">&gt; @@ -577,6 +577,8 @@ static int __collapse_huge_page_isolate(struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		inc_node_page_state(page,</span>
<span class="quote">&gt;  				NR_ISOLATED_ANON + page_is_file_cache(page));</span>
<span class="quote">&gt; +		if (TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +			dec_mm_counter(vma-&gt;vm_mm, MM_LAZYFREEPAGES);</span>
<span class="quote">&gt;  		VM_BUG_ON_PAGE(!PageLocked(page), page);</span>
<span class="quote">&gt;  		VM_BUG_ON_PAGE(PageLRU(page), page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="quote">&gt; index fe40e93..3c90956 100644</span>
<span class="quote">&gt; --- a/mm/madvise.c</span>
<span class="quote">&gt; +++ b/mm/madvise.c</span>
<span class="quote">&gt; @@ -275,6 +275,7 @@ static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt;  	struct page *page;</span>
<span class="quote">&gt;  	int nr_swap = 0;</span>
<span class="quote">&gt;  	unsigned long next;</span>
<span class="quote">&gt; +	int nr_lazyfree_accounted = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	next = pmd_addr_end(addr, end);</span>
<span class="quote">&gt;  	if (pmd_trans_huge(*pmd))</span>
<span class="quote">&gt; @@ -380,9 +381,13 @@ static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
<span class="quote">&gt;  			set_pte_at(mm, addr, pte, ptent);</span>
<span class="quote">&gt;  			tlb_remove_tlb_entry(tlb, pte, addr);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; +		if (page_mapcount(page) == 1 &amp;&amp;</span>
<span class="quote">&gt; +		    !TestSetPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +			nr_lazyfree_accounted++;</span>
<span class="quote">&gt;  		mark_page_lazyfree(page);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt; +	add_mm_counter(mm, MM_LAZYFREEPAGES, nr_lazyfree_accounted);</span>
<span class="quote">&gt;  	if (nr_swap) {</span>
<span class="quote">&gt;  		if (current-&gt;mm == mm)</span>
<span class="quote">&gt;  			sync_mm_rss(mm);</span>
<span class="quote">&gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt; index cf97d88..e275de1 100644</span>
<span class="quote">&gt; --- a/mm/memory.c</span>
<span class="quote">&gt; +++ b/mm/memory.c</span>
<span class="quote">&gt; @@ -850,7 +850,7 @@ struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="quote">&gt;  static inline unsigned long</span>
<span class="quote">&gt;  copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;  		pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *vma,</span>
<span class="quote">&gt; -		unsigned long addr, int *rss)</span>
<span class="quote">&gt; +		unsigned long addr, int *rss, int *rss_src_lazyfree)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long vm_flags = vma-&gt;vm_flags;</span>
<span class="quote">&gt;  	pte_t pte = *src_pte;</span>
<span class="quote">&gt; @@ -915,6 +915,9 @@ copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;  	if (page) {</span>
<span class="quote">&gt;  		get_page(page);</span>
<span class="quote">&gt;  		page_dup_rmap(page, false);</span>
<span class="quote">&gt; +		if (PageAnon(page) &amp;&amp;</span>
<span class="quote">&gt; +		    TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +			(*rss_src_lazyfree)++;</span>
<span class="quote">&gt;  		rss[mm_counter(page)]++;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -932,10 +935,12 @@ static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;  	spinlock_t *src_ptl, *dst_ptl;</span>
<span class="quote">&gt;  	int progress = 0;</span>
<span class="quote">&gt;  	int rss[NR_MM_COUNTERS];</span>
<span class="quote">&gt; +	int rss_src_lazyfree;</span>
<span class="quote">&gt;  	swp_entry_t entry = (swp_entry_t){0};</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  again:</span>
<span class="quote">&gt;  	init_rss_vec(rss);</span>
<span class="quote">&gt; +	rss_src_lazyfree = 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	dst_pte = pte_alloc_map_lock(dst_mm, dst_pmd, addr, &amp;dst_ptl);</span>
<span class="quote">&gt;  	if (!dst_pte)</span>
<span class="quote">&gt; @@ -963,13 +968,14 @@ static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
<span class="quote">&gt;  			continue;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		entry.val = copy_one_pte(dst_mm, src_mm, dst_pte, src_pte,</span>
<span class="quote">&gt; -							vma, addr, rss);</span>
<span class="quote">&gt; +					vma, addr, rss, &amp;rss_src_lazyfree);</span>
<span class="quote">&gt;  		if (entry.val)</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  		progress += 8;</span>
<span class="quote">&gt;  	} while (dst_pte++, src_pte++, addr += PAGE_SIZE, addr != end);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	arch_leave_lazy_mmu_mode();</span>
<span class="quote">&gt; +	add_mm_counter(src_mm, MM_LAZYFREEPAGES, -rss_src_lazyfree);</span>
<span class="quote">&gt;  	spin_unlock(src_ptl);</span>
<span class="quote">&gt;  	pte_unmap(orig_src_pte);</span>
<span class="quote">&gt;  	add_mm_rss_vec(dst_mm, rss);</span>
<span class="quote">&gt; @@ -1163,6 +1169,9 @@ static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
<span class="quote">&gt;  					mark_page_accessed(page);</span>
<span class="quote">&gt;  			}</span>
<span class="quote">&gt;  			rss[mm_counter(page)]--;</span>
<span class="quote">&gt; +			if (PageAnon(page) &amp;&amp;</span>
<span class="quote">&gt; +			    TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +				rss[MM_LAZYFREEPAGES]--;</span>
<span class="quote">&gt;  			page_remove_rmap(page, false);</span>
<span class="quote">&gt;  			if (unlikely(page_mapcount(page) &lt; 0))</span>
<span class="quote">&gt;  				print_bad_pte(vma, addr, ptent, page);</span>
<span class="quote">&gt; diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="quote">&gt; index eb76f87..6e586d2 100644</span>
<span class="quote">&gt; --- a/mm/migrate.c</span>
<span class="quote">&gt; +++ b/mm/migrate.c</span>
<span class="quote">&gt; @@ -642,6 +642,8 @@ void migrate_page_copy(struct page *newpage, struct page *page)</span>
<span class="quote">&gt;  		SetPageChecked(newpage);</span>
<span class="quote">&gt;  	if (PageMappedToDisk(page))</span>
<span class="quote">&gt;  		SetPageMappedToDisk(newpage);</span>
<span class="quote">&gt; +	if (PageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +		SetPageLazyFreeAccounted(newpage);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Move dirty on pages not done by migrate_page_move_mapping() */</span>
<span class="quote">&gt;  	if (PageDirty(page))</span>
<span class="quote">&gt; diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="quote">&gt; index 51c0918..54e0604 100644</span>
<span class="quote">&gt; --- a/mm/oom_kill.c</span>
<span class="quote">&gt; +++ b/mm/oom_kill.c</span>
<span class="quote">&gt; @@ -528,11 +528,12 @@ static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
<span class="quote">&gt;  					 NULL);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	tlb_finish_mmu(&amp;tlb, 0, -1);</span>
<span class="quote">&gt; -	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
<span class="quote">&gt; +	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB, lazyfree-rss:%lukB\n&quot;,</span>
<span class="quote">&gt;  			task_pid_nr(tsk), tsk-&gt;comm,</span>
<span class="quote">&gt;  			K(get_mm_counter(mm, MM_ANONPAGES)),</span>
<span class="quote">&gt;  			K(get_mm_counter(mm, MM_FILEPAGES)),</span>
<span class="quote">&gt; -			K(get_mm_counter(mm, MM_SHMEMPAGES)));</span>
<span class="quote">&gt; +			K(get_mm_counter(mm, MM_SHMEMPAGES)),</span>
<span class="quote">&gt; +			K(get_mm_counter(mm, MM_LAZYFREEPAGES)));</span>
<span class="quote">&gt;  	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; @@ -878,11 +879,12 @@ static void oom_kill_process(struct oom_control *oc, const char *message)</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	do_send_sig_info(SIGKILL, SEND_SIG_FORCED, victim, true);</span>
<span class="quote">&gt;  	mark_oom_victim(victim);</span>
<span class="quote">&gt; -	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
<span class="quote">&gt; +	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB, lazyfree-rss:%lukB\n&quot;,</span>
<span class="quote">&gt;  		task_pid_nr(victim), victim-&gt;comm, K(victim-&gt;mm-&gt;total_vm),</span>
<span class="quote">&gt;  		K(get_mm_counter(victim-&gt;mm, MM_ANONPAGES)),</span>
<span class="quote">&gt;  		K(get_mm_counter(victim-&gt;mm, MM_FILEPAGES)),</span>
<span class="quote">&gt; -		K(get_mm_counter(victim-&gt;mm, MM_SHMEMPAGES)));</span>
<span class="quote">&gt; +		K(get_mm_counter(victim-&gt;mm, MM_SHMEMPAGES)),</span>
<span class="quote">&gt; +		K(get_mm_counter(victim-&gt;mm, MM_LAZYFREEPAGES)));</span>
<span class="quote">&gt;  	task_unlock(victim);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="quote">&gt; index 5f05926..86c80d7 100644</span>
<span class="quote">&gt; --- a/mm/rmap.c</span>
<span class="quote">&gt; +++ b/mm/rmap.c</span>
<span class="quote">&gt; @@ -1585,6 +1585,9 @@ static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  	put_page(page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  out_unmap:</span>
<span class="quote">&gt; +	/* regardless of success or failure, the page isn&#39;t lazyfree */</span>
<span class="quote">&gt; +	if (PageAnon(page) &amp;&amp; TestClearPageLazyFreeAccounted(page))</span>
<span class="quote">&gt; +		add_mm_counter(mm, MM_LAZYFREEPAGES, -hpage_nr_pages(page));</span>
<span class="quote">&gt;  	pte_unmap_unlock(pte, ptl);</span>
<span class="quote">&gt;  	if (ret != SWAP_FAIL &amp;&amp; ret != SWAP_MLOCK &amp;&amp; !(flags &amp; TTU_MUNLOCK))</span>
<span class="quote">&gt;  		mmu_notifier_invalidate_page(mm, address);</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.9.3</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=117011">Shaohua Li</a> - Feb. 22, 2017, 1:27 a.m.</div>
<pre class="content">
On Wed, Feb 22, 2017 at 09:46:05AM +0900, Minchan Kim wrote:
<span class="quote">&gt; Hi Shaohua,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Fri, Feb 03, 2017 at 03:33:23PM -0800, Shaohua Li wrote:</span>
<span class="quote">&gt; &gt; Add a separate RSS for MADV_FREE pages. The pages are charged into</span>
<span class="quote">&gt; &gt; MM_ANONPAGES (because they are mapped anon pages) and also charged into</span>
<span class="quote">&gt; &gt; the MM_LAZYFREEPAGES. /proc/pid/statm will have an extra field to</span>
<span class="quote">&gt; &gt; display the RSS, which userspace can use to determine the RSS excluding</span>
<span class="quote">&gt; &gt; MADV_FREE pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m not sure statm is right place. With definition of statm and considering</span>
<span class="quote">&gt; your usecase, it would be right place but when I look &quot;stuats&quot;, it already</span>
<span class="quote">&gt; shows RssAnon, RssFile and RssShmem so I thought we can add RssLazy to it.</span>
<span class="quote">&gt; It would be more consistent if you don&#39;t have big overhead.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; The basic idea is to increment the RSS in madvise and decrement in unmap</span>
<span class="quote">&gt; &gt; or page reclaim. There is one limitation. If a page is shared by two</span>
<span class="quote">&gt; &gt; processes, since madvise only has mm cotext of current process, it isn&#39;t</span>
<span class="quote">&gt; &gt; convenient to charge the RSS for both processes. So we don&#39;t charge the</span>
<span class="quote">&gt; &gt; RSS if the mapcount isn&#39;t 1. On the other hand, fork can make a</span>
<span class="quote">&gt; &gt; MADV_FREE page shared by two processes. To make things consistent, we</span>
<span class="quote">&gt; &gt; uncharge the RSS from the source mm in fork.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t understand why we need new flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What&#39;s the problem like handling it normal anon|file|swapent|shmem?</span>
<span class="quote">&gt; IOW, we can increase in madvise context and increase for child in copy_one_pte</span>
<span class="quote">&gt; if the pte is still not dirty. And then decrease it in zap_pte_range/</span>
<span class="quote">&gt; try_to_unmap_one if it finds it&#39;s dirty or discardable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Although it&#39;s shared by fork, VM can discard it if processes doesn&#39;t</span>
<span class="quote">&gt; make it dirty.</span>

The thing is we could madvise the same page twice. madvise context can&#39;t
guarantee we move the page to inactive file list, so we could wrongly increase
the count.
<span class="quote">
&gt; &gt; </span>
<span class="quote">&gt; &gt; A new flag is added to indicate if a page is accounted into the RSS. We</span>
<span class="quote">&gt; &gt; can&#39;t use SwapBacked flag to do the determination because we can&#39;t</span>
<span class="quote">&gt; &gt; guarantee the page has SwapBacked flag cleared in madvise. We are</span>
<span class="quote">&gt; &gt; reusing mappedtodisk flag which should not be set for Anon pages.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; There are a couple of other places we need to uncharge the RSS,</span>
<span class="quote">&gt; &gt; activate_page and mark_page_accessed. activate_page is used by swap,</span>
<span class="quote">&gt; &gt; where MADV_FREE pages are already not in lazyfree state before going</span>
<span class="quote">&gt; &gt; into swap. mark_page_accessed is mainly used for file pages, but there</span>
<span class="quote">&gt; &gt; are several places it&#39;s used by anonymous pages. I fixed gup, but not</span>
<span class="quote">&gt; &gt; some gpu drivers and kvm. If the drivers use MADV_FREE, we might have</span>
<span class="quote">&gt; &gt; inprecise RSS accounting.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please note, the accounting is never going to be precise. MADV_FREE page</span>
<span class="quote">&gt; &gt; could be written by userspace without notification to the kernel. The</span>
<span class="quote">&gt; &gt; page can&#39;t be reclaimed like other clean lazyfree pages. The page isn&#39;t</span>
<span class="quote">&gt; &gt; real lazyfree page. But since kernel isn&#39;t aware of this, the page is</span>
<span class="quote">&gt; &gt; still accounted as lazyfree, thus the accounting could be incorrect.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right. Lazyfree is not inaccurate without CoW where it&#39;s point to decrease</span>
<span class="quote">&gt; lazyfree rss count when the store happens so we might be tempted to make</span>
<span class="quote">&gt; it to Cow at the cost of performance degradation but still it&#39;s not accurate</span>
<span class="quote">&gt; without making mark_page_accessed be aware of each mm context which is</span>
<span class="quote">&gt; hard part. So, I agree this stat is useful but don&#39;t want to make it</span>
<span class="quote">&gt; complicate.</span>

Yes, it only could be accurate with extra pagefault cost, but apparently nobody
wants to pay for it.

I talked to jemalloc guys here. They have concerns about the accounting since
it&#39;s not accurate. I&#39;ll drop the accounting patches in next post. The only
interface which can export accurate info is /proc/pid/smaps, we probably go
that.

Thanks,
Shaohua
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/array.c b/fs/proc/array.c</span>
<span class="p_header">index 51a4213..c2281f4 100644</span>
<span class="p_header">--- a/fs/proc/array.c</span>
<span class="p_header">+++ b/fs/proc/array.c</span>
<span class="p_chunk">@@ -583,17 +583,19 @@</span> <span class="p_context"> int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,</span>
 			struct pid *pid, struct task_struct *task)
 {
 	unsigned long size = 0, resident = 0, shared = 0, text = 0, data = 0;
<span class="p_add">+	unsigned long lazyfree = 0;</span>
 	struct mm_struct *mm = get_task_mm(task);
 
 	if (mm) {
<span class="p_del">-		size = task_statm(mm, &amp;shared, &amp;text, &amp;data, &amp;resident);</span>
<span class="p_add">+		size = task_statm(mm, &amp;shared, &amp;text, &amp;data, &amp;resident,</span>
<span class="p_add">+				  &amp;lazyfree);</span>
 		mmput(mm);
 	}
 	/*
 	 * For quick read, open code by putting numbers directly
 	 * expected format is
<span class="p_del">-	 * seq_printf(m, &quot;%lu %lu %lu %lu 0 %lu 0\n&quot;,</span>
<span class="p_del">-	 *               size, resident, shared, text, data);</span>
<span class="p_add">+	 * seq_printf(m, &quot;%lu %lu %lu %lu 0 %lu 0 %lu\n&quot;,</span>
<span class="p_add">+	 *               size, resident, shared, text, data, lazyfree);</span>
 	 */
 	seq_put_decimal_ull(m, &quot;&quot;, size);
 	seq_put_decimal_ull(m, &quot; &quot;, resident);
<span class="p_chunk">@@ -602,6 +604,7 @@</span> <span class="p_context"> int proc_pid_statm(struct seq_file *m, struct pid_namespace *ns,</span>
 	seq_put_decimal_ull(m, &quot; &quot;, 0);
 	seq_put_decimal_ull(m, &quot; &quot;, data);
 	seq_put_decimal_ull(m, &quot; &quot;, 0);
<span class="p_add">+	seq_put_decimal_ull(m, &quot; &quot;, lazyfree);</span>
 	seq_putc(m, &#39;\n&#39;);
 
 	return 0;
<span class="p_header">diff --git a/fs/proc/internal.h b/fs/proc/internal.h</span>
<span class="p_header">index e2c3c46..6587b9c 100644</span>
<span class="p_header">--- a/fs/proc/internal.h</span>
<span class="p_header">+++ b/fs/proc/internal.h</span>
<span class="p_chunk">@@ -290,5 +290,6 @@</span> <span class="p_context"> extern const struct file_operations proc_pagemap_operations;</span>
 extern unsigned long task_vsize(struct mm_struct *);
 extern unsigned long task_statm(struct mm_struct *,
 				unsigned long *, unsigned long *,
<span class="p_del">-				unsigned long *, unsigned long *);</span>
<span class="p_add">+				unsigned long *, unsigned long *,</span>
<span class="p_add">+				unsigned long *);</span>
 extern void task_mem(struct seq_file *, struct mm_struct *);
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 8f2423f..f18b568 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -23,9 +23,10 @@</span> <span class="p_context"></span>
 
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
<span class="p_del">-	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem;</span>
<span class="p_add">+	unsigned long text, lib, swap, ptes, pmds, anon, file, shmem, lazyfree;</span>
 	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss;
 
<span class="p_add">+	lazyfree = get_mm_counter(mm, MM_LAZYFREEPAGES);</span>
 	anon = get_mm_counter(mm, MM_ANONPAGES);
 	file = get_mm_counter(mm, MM_FILEPAGES);
 	shmem = get_mm_counter(mm, MM_SHMEMPAGES);
<span class="p_chunk">@@ -59,6 +60,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		&quot;RssAnon:\t%8lu kB\n&quot;
 		&quot;RssFile:\t%8lu kB\n&quot;
 		&quot;RssShmem:\t%8lu kB\n&quot;
<span class="p_add">+		&quot;RssLazyfree:\t%8lu kB\n&quot;</span>
 		&quot;VmData:\t%8lu kB\n&quot;
 		&quot;VmStk:\t%8lu kB\n&quot;
 		&quot;VmExe:\t%8lu kB\n&quot;
<span class="p_chunk">@@ -75,6 +77,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		anon &lt;&lt; (PAGE_SHIFT-10),
 		file &lt;&lt; (PAGE_SHIFT-10),
 		shmem &lt;&lt; (PAGE_SHIFT-10),
<span class="p_add">+		lazyfree &lt;&lt; (PAGE_SHIFT-10),</span>
 		mm-&gt;data_vm &lt;&lt; (PAGE_SHIFT-10),
 		mm-&gt;stack_vm &lt;&lt; (PAGE_SHIFT-10), text, lib,
 		ptes &gt;&gt; 10,
<span class="p_chunk">@@ -90,7 +93,8 @@</span> <span class="p_context"> unsigned long task_vsize(struct mm_struct *mm)</span>
 
 unsigned long task_statm(struct mm_struct *mm,
 			 unsigned long *shared, unsigned long *text,
<span class="p_del">-			 unsigned long *data, unsigned long *resident)</span>
<span class="p_add">+			 unsigned long *data, unsigned long *resident,</span>
<span class="p_add">+			 unsigned long *lazyfree)</span>
 {
 	*shared = get_mm_counter(mm, MM_FILEPAGES) +
 			get_mm_counter(mm, MM_SHMEMPAGES);
<span class="p_chunk">@@ -98,6 +102,7 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 								&gt;&gt; PAGE_SHIFT;
 	*data = mm-&gt;data_vm + mm-&gt;stack_vm;
 	*resident = *shared + get_mm_counter(mm, MM_ANONPAGES);
<span class="p_add">+	*lazyfree = get_mm_counter(mm, MM_LAZYFREEPAGES);</span>
 	return mm-&gt;total_vm;
 }
 
<span class="p_header">diff --git a/fs/proc/task_nommu.c b/fs/proc/task_nommu.c</span>
<span class="p_header">index 1ef97cf..50426de 100644</span>
<span class="p_header">--- a/fs/proc/task_nommu.c</span>
<span class="p_header">+++ b/fs/proc/task_nommu.c</span>
<span class="p_chunk">@@ -94,7 +94,8 @@</span> <span class="p_context"> unsigned long task_vsize(struct mm_struct *mm)</span>
 
 unsigned long task_statm(struct mm_struct *mm,
 			 unsigned long *shared, unsigned long *text,
<span class="p_del">-			 unsigned long *data, unsigned long *resident)</span>
<span class="p_add">+			 unsigned long *data, unsigned long *resident,</span>
<span class="p_add">+			 unsigned long *lazyfree)</span>
 {
 	struct vm_area_struct *vma;
 	struct vm_region *region;
<span class="p_chunk">@@ -120,6 +121,7 @@</span> <span class="p_context"> unsigned long task_statm(struct mm_struct *mm,</span>
 	size &gt;&gt;= PAGE_SHIFT;
 	size += *text + *data;
 	*resident = size;
<span class="p_add">+	*lazyfree = 0;</span>
 	return size;
 }
 
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 4f6d440..b6a1428 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -376,6 +376,7 @@</span> <span class="p_context"> enum {</span>
 	MM_ANONPAGES,	/* Resident anonymous pages */
 	MM_SWAPENTS,	/* Anonymous swap entries */
 	MM_SHMEMPAGES,	/* Resident shared memory pages */
<span class="p_add">+	MM_LAZYFREEPAGES, /* Lazyfree pages, also charged into MM_ANONPAGES */</span>
 	NR_MM_COUNTERS
 };
 
<span class="p_header">diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h</span>
<span class="p_header">index 6b5818d..67c732b 100644</span>
<span class="p_header">--- a/include/linux/page-flags.h</span>
<span class="p_header">+++ b/include/linux/page-flags.h</span>
<span class="p_chunk">@@ -107,6 +107,8 @@</span> <span class="p_context"> enum pageflags {</span>
 #endif
 	__NR_PAGEFLAGS,
 
<span class="p_add">+	PG_lazyfreeaccounted = PG_mappedtodisk, /* only for anon MADV_FREE pages */</span>
<span class="p_add">+</span>
 	/* Filesystems */
 	PG_checked = PG_owner_priv_1,
 
<span class="p_chunk">@@ -428,6 +430,10 @@</span> <span class="p_context"> TESTPAGEFLAG_FALSE(Ksm)</span>
 
 u64 stable_page_flags(struct page *page);
 
<span class="p_add">+PAGEFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="p_add">+	TESTSETFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="p_add">+	TESTCLEARFLAG(LazyFreeAccounted, lazyfreeaccounted, PF_ANY)</span>
<span class="p_add">+</span>
 static inline int PageUptodate(struct page *page)
 {
 	int ret;
<span class="p_header">diff --git a/mm/gup.c b/mm/gup.c</span>
<span class="p_header">index 40abe4c..e64d990 100644</span>
<span class="p_header">--- a/mm/gup.c</span>
<span class="p_header">+++ b/mm/gup.c</span>
<span class="p_chunk">@@ -171,6 +171,8 @@</span> <span class="p_context"> static struct page *follow_page_pte(struct vm_area_struct *vma,</span>
 		 * mark_page_accessed().
 		 */
 		mark_page_accessed(page);
<span class="p_add">+		if (PageAnon(page) &amp;&amp; TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+			dec_mm_counter(mm, MM_LAZYFREEPAGES);</span>
 	}
 	if ((flags &amp; FOLL_MLOCK) &amp;&amp; (vma-&gt;vm_flags &amp; VM_LOCKED)) {
 		/* Do not mlock pte-mapped THP */
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index ddb9a94..951fa34 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -871,6 +871,8 @@</span> <span class="p_context"> int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	VM_BUG_ON_PAGE(!PageHead(src_page), src_page);
 	get_page(src_page);
 	page_dup_rmap(src_page, true);
<span class="p_add">+	if (PageAnon(src_page) &amp;&amp; TestClearPageLazyFreeAccounted(src_page))</span>
<span class="p_add">+		add_mm_counter(src_mm, MM_LAZYFREEPAGES, -HPAGE_PMD_NR);</span>
 	add_mm_counter(dst_mm, MM_ANONPAGES, HPAGE_PMD_NR);
 	atomic_long_inc(&amp;dst_mm-&gt;nr_ptes);
 	pgtable_trans_huge_deposit(dst_mm, dst_pmd, pgtable);
<span class="p_chunk">@@ -1402,6 +1404,8 @@</span> <span class="p_context"> bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);
 	}
 
<span class="p_add">+	if (page_mapcount(page) == 1 &amp;&amp; !TestSetPageLazyFreeAccounted(page))</span>
<span class="p_add">+		add_mm_counter(mm, MM_LAZYFREEPAGES, HPAGE_PMD_NR);</span>
 	mark_page_lazyfree(page);
 	ret = true;
 out:
<span class="p_chunk">@@ -1459,6 +1463,9 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 			pte_free(tlb-&gt;mm, pgtable);
 			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);
 			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);
<span class="p_add">+			if (TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+				add_mm_counter(tlb-&gt;mm, MM_LAZYFREEPAGES,</span>
<span class="p_add">+						-HPAGE_PMD_NR);</span>
 		} else {
 			if (arch_needs_pgtable_deposit())
 				zap_deposited_table(tlb-&gt;mm, pmd);
<span class="p_chunk">@@ -1917,6 +1924,7 @@</span> <span class="p_context"> static void __split_huge_page_tail(struct page *head, int tail,</span>
 			 (1L &lt;&lt; PG_swapbacked) |
 			 (1L &lt;&lt; PG_mlocked) |
 			 (1L &lt;&lt; PG_uptodate) |
<span class="p_add">+			 (1L &lt;&lt; PG_lazyfreeaccounted) |</span>
 			 (1L &lt;&lt; PG_active) |
 			 (1L &lt;&lt; PG_locked) |
 			 (1L &lt;&lt; PG_unevictable) |
<span class="p_header">diff --git a/mm/khugepaged.c b/mm/khugepaged.c</span>
<span class="p_header">index a4b499f..e4668db 100644</span>
<span class="p_header">--- a/mm/khugepaged.c</span>
<span class="p_header">+++ b/mm/khugepaged.c</span>
<span class="p_chunk">@@ -577,6 +577,8 @@</span> <span class="p_context"> static int __collapse_huge_page_isolate(struct vm_area_struct *vma,</span>
 		}
 		inc_node_page_state(page,
 				NR_ISOLATED_ANON + page_is_file_cache(page));
<span class="p_add">+		if (TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+			dec_mm_counter(vma-&gt;vm_mm, MM_LAZYFREEPAGES);</span>
 		VM_BUG_ON_PAGE(!PageLocked(page), page);
 		VM_BUG_ON_PAGE(PageLRU(page), page);
 
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index fe40e93..3c90956 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -275,6 +275,7 @@</span> <span class="p_context"> static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
 	struct page *page;
 	int nr_swap = 0;
 	unsigned long next;
<span class="p_add">+	int nr_lazyfree_accounted = 0;</span>
 
 	next = pmd_addr_end(addr, end);
 	if (pmd_trans_huge(*pmd))
<span class="p_chunk">@@ -380,9 +381,13 @@</span> <span class="p_context"> static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
 			set_pte_at(mm, addr, pte, ptent);
 			tlb_remove_tlb_entry(tlb, pte, addr);
 		}
<span class="p_add">+		if (page_mapcount(page) == 1 &amp;&amp;</span>
<span class="p_add">+		    !TestSetPageLazyFreeAccounted(page))</span>
<span class="p_add">+			nr_lazyfree_accounted++;</span>
 		mark_page_lazyfree(page);
 	}
 out:
<span class="p_add">+	add_mm_counter(mm, MM_LAZYFREEPAGES, nr_lazyfree_accounted);</span>
 	if (nr_swap) {
 		if (current-&gt;mm == mm)
 			sync_mm_rss(mm);
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index cf97d88..e275de1 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -850,7 +850,7 @@</span> <span class="p_context"> struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
 static inline unsigned long
 copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 		pte_t *dst_pte, pte_t *src_pte, struct vm_area_struct *vma,
<span class="p_del">-		unsigned long addr, int *rss)</span>
<span class="p_add">+		unsigned long addr, int *rss, int *rss_src_lazyfree)</span>
 {
 	unsigned long vm_flags = vma-&gt;vm_flags;
 	pte_t pte = *src_pte;
<span class="p_chunk">@@ -915,6 +915,9 @@</span> <span class="p_context"> copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	if (page) {
 		get_page(page);
 		page_dup_rmap(page, false);
<span class="p_add">+		if (PageAnon(page) &amp;&amp;</span>
<span class="p_add">+		    TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+			(*rss_src_lazyfree)++;</span>
 		rss[mm_counter(page)]++;
 	}
 
<span class="p_chunk">@@ -932,10 +935,12 @@</span> <span class="p_context"> static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	spinlock_t *src_ptl, *dst_ptl;
 	int progress = 0;
 	int rss[NR_MM_COUNTERS];
<span class="p_add">+	int rss_src_lazyfree;</span>
 	swp_entry_t entry = (swp_entry_t){0};
 
 again:
 	init_rss_vec(rss);
<span class="p_add">+	rss_src_lazyfree = 0;</span>
 
 	dst_pte = pte_alloc_map_lock(dst_mm, dst_pmd, addr, &amp;dst_ptl);
 	if (!dst_pte)
<span class="p_chunk">@@ -963,13 +968,14 @@</span> <span class="p_context"> static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 			continue;
 		}
 		entry.val = copy_one_pte(dst_mm, src_mm, dst_pte, src_pte,
<span class="p_del">-							vma, addr, rss);</span>
<span class="p_add">+					vma, addr, rss, &amp;rss_src_lazyfree);</span>
 		if (entry.val)
 			break;
 		progress += 8;
 	} while (dst_pte++, src_pte++, addr += PAGE_SIZE, addr != end);
 
 	arch_leave_lazy_mmu_mode();
<span class="p_add">+	add_mm_counter(src_mm, MM_LAZYFREEPAGES, -rss_src_lazyfree);</span>
 	spin_unlock(src_ptl);
 	pte_unmap(orig_src_pte);
 	add_mm_rss_vec(dst_mm, rss);
<span class="p_chunk">@@ -1163,6 +1169,9 @@</span> <span class="p_context"> static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
 					mark_page_accessed(page);
 			}
 			rss[mm_counter(page)]--;
<span class="p_add">+			if (PageAnon(page) &amp;&amp;</span>
<span class="p_add">+			    TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+				rss[MM_LAZYFREEPAGES]--;</span>
 			page_remove_rmap(page, false);
 			if (unlikely(page_mapcount(page) &lt; 0))
 				print_bad_pte(vma, addr, ptent, page);
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index eb76f87..6e586d2 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -642,6 +642,8 @@</span> <span class="p_context"> void migrate_page_copy(struct page *newpage, struct page *page)</span>
 		SetPageChecked(newpage);
 	if (PageMappedToDisk(page))
 		SetPageMappedToDisk(newpage);
<span class="p_add">+	if (PageLazyFreeAccounted(page))</span>
<span class="p_add">+		SetPageLazyFreeAccounted(newpage);</span>
 
 	/* Move dirty on pages not done by migrate_page_move_mapping() */
 	if (PageDirty(page))
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 51c0918..54e0604 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -528,11 +528,12 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 					 NULL);
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
<span class="p_del">-	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
<span class="p_add">+	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB, lazyfree-rss:%lukB\n&quot;,</span>
 			task_pid_nr(tsk), tsk-&gt;comm,
 			K(get_mm_counter(mm, MM_ANONPAGES)),
 			K(get_mm_counter(mm, MM_FILEPAGES)),
<span class="p_del">-			K(get_mm_counter(mm, MM_SHMEMPAGES)));</span>
<span class="p_add">+			K(get_mm_counter(mm, MM_SHMEMPAGES)),</span>
<span class="p_add">+			K(get_mm_counter(mm, MM_LAZYFREEPAGES)));</span>
 	up_read(&amp;mm-&gt;mmap_sem);
 
 	/*
<span class="p_chunk">@@ -878,11 +879,12 @@</span> <span class="p_context"> static void oom_kill_process(struct oom_control *oc, const char *message)</span>
 	 */
 	do_send_sig_info(SIGKILL, SEND_SIG_FORCED, victim, true);
 	mark_oom_victim(victim);
<span class="p_del">-	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,</span>
<span class="p_add">+	pr_err(&quot;Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB, lazyfree-rss:%lukB\n&quot;,</span>
 		task_pid_nr(victim), victim-&gt;comm, K(victim-&gt;mm-&gt;total_vm),
 		K(get_mm_counter(victim-&gt;mm, MM_ANONPAGES)),
 		K(get_mm_counter(victim-&gt;mm, MM_FILEPAGES)),
<span class="p_del">-		K(get_mm_counter(victim-&gt;mm, MM_SHMEMPAGES)));</span>
<span class="p_add">+		K(get_mm_counter(victim-&gt;mm, MM_SHMEMPAGES)),</span>
<span class="p_add">+		K(get_mm_counter(victim-&gt;mm, MM_LAZYFREEPAGES)));</span>
 	task_unlock(victim);
 
 	/*
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 5f05926..86c80d7 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1585,6 +1585,9 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	put_page(page);
 
 out_unmap:
<span class="p_add">+	/* regardless of success or failure, the page isn&#39;t lazyfree */</span>
<span class="p_add">+	if (PageAnon(page) &amp;&amp; TestClearPageLazyFreeAccounted(page))</span>
<span class="p_add">+		add_mm_counter(mm, MM_LAZYFREEPAGES, -hpage_nr_pages(page));</span>
 	pte_unmap_unlock(pte, ptl);
 	if (ret != SWAP_FAIL &amp;&amp; ret != SWAP_MLOCK &amp;&amp; !(flags &amp; TTU_MUNLOCK))
 		mmu_notifier_invalidate_page(mm, address);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



