
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4] ARM: early fixmap support for earlycon - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4] ARM: early fixmap support for earlycon</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=71861">Stefan Agner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 16, 2015, 9:51 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1434491507-6208-1-git-send-email-stefan@agner.ch&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6620601/mbox/"
   >mbox</a>
|
   <a href="/patch/6620601/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6620601/">/patch/6620601/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 697FE9F326
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 21:52:14 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 36E29207FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 21:52:13 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CAD59207FC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 16 Jun 2015 21:52:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754850AbbFPVwC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 16 Jun 2015 17:52:02 -0400
Received: from mail.kmu-office.ch ([178.209.48.109]:59513 &quot;EHLO
	mail.kmu-office.ch&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753423AbbFPVvx (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 16 Jun 2015 17:51:53 -0400
Received: from trochilidae.agner.local (195-226-23-243.pool.cyberlink.ch
	[195.226.23.243])
	by mail.kmu-office.ch (Postfix) with ESMTPSA id EF6B95C173B;
	Tue, 16 Jun 2015 23:49:20 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=agner.ch; s=dkim;
	t=1434491361; bh=d8AxbIz0oalz14BDA70+LY0F7mQ4xiFVylF6hVxlJq4=;
	h=From:To:Cc:Subject:Date:From;
	b=ZPyONqiYx5kKN4G8tT+VvkwNfY8DDxw53FT1Mlh44XumGIBDUCzef9680ak72rmSi
	TbNWija0cHKyAO3c43OuOjt+1WOeABolKL6wT6LKGQqhGVDwMQuEKTao2F+wAS6Bi2
	knihMeqWCzxd0GhLC5gevqjCRGaF051BYMr+jFoQ=
From: Stefan Agner &lt;stefan@agner.ch&gt;
To: linux@arm.linux.org.uk
Cc: linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	Stefan Agner &lt;stefan@agner.ch&gt;, Mark Salter &lt;msalter@redhat.com&gt;,
	Kees Cook &lt;keescook@chromium.org&gt;, Laura Abbott &lt;lauraa@codeaurora.org&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;, Rob Herring &lt;robh@kernel.org&gt;
Subject: [PATCH v4] ARM: early fixmap support for earlycon
Date: Tue, 16 Jun 2015 23:51:47 +0200
Message-Id: &lt;1434491507-6208-1-git-send-email-stefan@agner.ch&gt;
X-Mailer: git-send-email 2.4.2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.4 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=71861">Stefan Agner</a> - June 16, 2015, 9:51 p.m.</div>
<pre class="content">
Add early fixmap support, initially to support permanent, fixed
mapping support for early console. A temporary, early pte is
created which is migrated to a permanent mapping in paging_init.
This is also needed since the attributes may change as the memory
types are initialized. The 3MiB range of fixmap spans two pte
tables, but currently only one pte is created for early fixmap
support.

Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since
the index for kmap does not start at zero anymore. This reverts
4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and
FIX_KMAP_END&quot;) to some extent.

Cc: Mark Salter &lt;msalter@redhat.com&gt;
Cc: Russell King &lt;linux@arm.linux.org.uk&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;
Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
<span class="signed-off-by">Signed-off-by: Rob Herring &lt;robh@kernel.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Stefan Agner &lt;stefan@agner.ch&gt;</span>
---
Changes since v3:
- Remove address of on functions
- Clear all pmd&#39;s except early fixmap pmd in devicemaps_init
- Update comment in devicemaps_init since earlycon works now as debug method
- Add comment regarding FIXMAP_PAGE_IO/FIXMAP_PAGE_NOCACHE use

Changes since v2:
- Rebased and tested on rmk/for-next
- Flush TLB&#39;s when clearing the temporary PMD in early_fixmap_shutdown

Changes since v1 (RFC):
- Rebased and tested on v3.19-rc5
- Spelling errors in comments and commit message
- Added Rob&#39;s SOB

 arch/arm/Kconfig              |  3 ++
 arch/arm/include/asm/fixmap.h | 15 +++++++-
 arch/arm/kernel/setup.c       |  3 ++
 arch/arm/mm/highmem.c         |  6 +--
 arch/arm/mm/mmu.c             | 88 +++++++++++++++++++++++++++++++++++++++----
 5 files changed, 104 insertions(+), 11 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=709">Russell King - ARM Linux</a> - June 16, 2015, 10:32 p.m.</div>
<pre class="content">
On Tue, Jun 16, 2015 at 11:51:47PM +0200, Stefan Agner wrote:
<span class="quote">&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt; support.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt; FIX_KMAP_END&quot;) to some extent.</span>

Sorry, this isn&#39;t going to make the next merge window, I&#39;ve closed my
tree at the end of last week to new submissions (because it got too
painful to maintain the for-next branch due to the number of cross-
dependencies between branches.)  The only patches I&#39;ll entertain this
week and throughout the merge window are bug fixes.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=8590">Stephen Boyd</a> - June 16, 2015, 11:22 p.m.</div>
<pre class="content">
On 06/16/2015 02:51 PM, Stefan Agner wrote:
<span class="quote">&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt; support.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Cc: Mark Salter &lt;msalter@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Russell King &lt;linux@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; Cc: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="quote">&gt; Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>
<span class="quote">&gt; Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
<span class="quote">&gt; Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Rob Herring &lt;robh@kernel.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Stefan Agner &lt;stefan@agner.ch&gt;</span>
<span class="quote">&gt;</span>

Works on msm_serial.
<span class="tested-by">
Tested-by: Stephen Boyd &lt;sboyd@codeaurora.org&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - June 17, 2015, 9:33 a.m.</div>
<pre class="content">
On 17 June 2015 at 01:22, Stephen Boyd &lt;sboyd@codeaurora.org&gt; wrote:
<span class="quote">&gt; On 06/16/2015 02:51 PM, Stefan Agner wrote:</span>
<span class="quote">&gt;&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt;&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt;&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt;&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt;&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt;&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt;&gt; support.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt;&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt;&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt;&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Cc: Mark Salter &lt;msalter@redhat.com&gt;</span>
<span class="quote">&gt;&gt; Cc: Russell King &lt;linux@arm.linux.org.uk&gt;</span>
<span class="quote">&gt;&gt; Cc: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="quote">&gt;&gt; Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
<span class="quote">&gt;&gt; Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Rob Herring &lt;robh@kernel.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Stefan Agner &lt;stefan@agner.ch&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Works on msm_serial.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Tested-by: Stephen Boyd &lt;sboyd@codeaurora.org&gt;</span>
<span class="quote">&gt;</span>

I gave this a spin as well, on Arndale, with /chosen/stdout-path set
to &amp;serial_2  and just &#39;earlycon&#39; (without value) passed on the
command line, and it works fine.
<span class="tested-by">
Tested-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=71861">Stefan Agner</a> - June 17, 2015, 11:43 a.m.</div>
<pre class="content">
On 2015-06-17 00:32, Russell King - ARM Linux wrote:
<span class="quote">&gt; On Tue, Jun 16, 2015 at 11:51:47PM +0200, Stefan Agner wrote:</span>
<span class="quote">&gt;&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt;&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt;&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt;&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt;&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt;&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt;&gt; support.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt;&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt;&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt;&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry, this isn&#39;t going to make the next merge window, I&#39;ve closed my</span>
<span class="quote">&gt; tree at the end of last week to new submissions (because it got too</span>
<span class="quote">&gt; painful to maintain the for-next branch due to the number of cross-</span>
<span class="quote">&gt; dependencies between branches.)  The only patches I&#39;ll entertain this</span>
<span class="quote">&gt; week and throughout the merge window are bug fixes.</span>

Ok no problem, I guess it&#39;s anyway a good idea to add it early in the
development cycle so the change gets a bit more testing coverage. Shall
I rebase the patch just after the merge window and send it out again or
add the patch in its current state to your patch tracker?

--
Stefan

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=709">Russell King - ARM Linux</a> - June 17, 2015, 7:43 p.m.</div>
<pre class="content">
On Wed, Jun 17, 2015 at 01:43:17PM +0200, Stefan Agner wrote:
<span class="quote">&gt; On 2015-06-17 00:32, Russell King - ARM Linux wrote:</span>
<span class="quote">&gt; &gt; On Tue, Jun 16, 2015 at 11:51:47PM +0200, Stefan Agner wrote:</span>
<span class="quote">&gt; &gt;&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt; &gt;&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt; &gt;&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt; &gt;&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt; &gt;&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt; &gt;&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt; &gt;&gt; support.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt; &gt;&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt; &gt;&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt; &gt;&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Sorry, this isn&#39;t going to make the next merge window, I&#39;ve closed my</span>
<span class="quote">&gt; &gt; tree at the end of last week to new submissions (because it got too</span>
<span class="quote">&gt; &gt; painful to maintain the for-next branch due to the number of cross-</span>
<span class="quote">&gt; &gt; dependencies between branches.)  The only patches I&#39;ll entertain this</span>
<span class="quote">&gt; &gt; week and throughout the merge window are bug fixes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ok no problem, I guess it&#39;s anyway a good idea to add it early in the</span>
<span class="quote">&gt; development cycle so the change gets a bit more testing coverage. Shall</span>
<span class="quote">&gt; I rebase the patch just after the merge window and send it out again or</span>
<span class="quote">&gt; add the patch in its current state to your patch tracker?</span>

Please rebase (if necessary) on -rc1 and send to the patch tracker if
there are no significant changes to it (I doubt there will be.)  If
everything during the merge window works as it should, -rc1 should
basically be the contents of linux-next just before the merge window
opens, plus any fixes that are needed along the way.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=24481">Heiko Stuebner</a> - June 30, 2015, 12:33 p.m.</div>
<pre class="content">
Am Dienstag, 16. Juni 2015, 23:51:47 schrieb Stefan Agner:
<span class="quote">&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt; support.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Mark Salter &lt;msalter@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Russell King &lt;linux@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; Cc: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="quote">&gt; Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>
<span class="quote">&gt; Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
<span class="quote">&gt; Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Rob Herring &lt;robh@kernel.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Stefan Agner &lt;stefan@agner.ch&gt;</span>

a bit late to the party, but on a rk3288 (Veyron Chromebook) using 8250_dw
<span class="tested-by">Tested-by: Heiko Stuebner &lt;heiko@sntech.de&gt;</span>


Heiko
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=71861">Stefan Agner</a> - July 6, 2015, 6:45 a.m.</div>
<pre class="content">
On 2015-06-17 21:43, Russell King - ARM Linux wrote:
<span class="quote">&gt; On Wed, Jun 17, 2015 at 01:43:17PM +0200, Stefan Agner wrote:</span>
<span class="quote">&gt;&gt; On 2015-06-17 00:32, Russell King - ARM Linux wrote:</span>
<span class="quote">&gt;&gt; &gt; On Tue, Jun 16, 2015 at 11:51:47PM +0200, Stefan Agner wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt; Add early fixmap support, initially to support permanent, fixed</span>
<span class="quote">&gt;&gt; &gt;&gt; mapping support for early console. A temporary, early pte is</span>
<span class="quote">&gt;&gt; &gt;&gt; created which is migrated to a permanent mapping in paging_init.</span>
<span class="quote">&gt;&gt; &gt;&gt; This is also needed since the attributes may change as the memory</span>
<span class="quote">&gt;&gt; &gt;&gt; types are initialized. The 3MiB range of fixmap spans two pte</span>
<span class="quote">&gt;&gt; &gt;&gt; tables, but currently only one pte is created for early fixmap</span>
<span class="quote">&gt;&gt; &gt;&gt; support.</span>
<span class="quote">&gt;&gt; &gt;&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; Re-add FIX_KMAP_BEGIN to the index calculation in highmem.c since</span>
<span class="quote">&gt;&gt; &gt;&gt; the index for kmap does not start at zero anymore. This reverts</span>
<span class="quote">&gt;&gt; &gt;&gt; 4221e2e6b316 (&quot;ARM: 8031/1: fixmap: remove FIX_KMAP_BEGIN and</span>
<span class="quote">&gt;&gt; &gt;&gt; FIX_KMAP_END&quot;) to some extent.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Sorry, this isn&#39;t going to make the next merge window, I&#39;ve closed my</span>
<span class="quote">&gt;&gt; &gt; tree at the end of last week to new submissions (because it got too</span>
<span class="quote">&gt;&gt; &gt; painful to maintain the for-next branch due to the number of cross-</span>
<span class="quote">&gt;&gt; &gt; dependencies between branches.)  The only patches I&#39;ll entertain this</span>
<span class="quote">&gt;&gt; &gt; week and throughout the merge window are bug fixes.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Ok no problem, I guess it&#39;s anyway a good idea to add it early in the</span>
<span class="quote">&gt;&gt; development cycle so the change gets a bit more testing coverage. Shall</span>
<span class="quote">&gt;&gt; I rebase the patch just after the merge window and send it out again or</span>
<span class="quote">&gt;&gt; add the patch in its current state to your patch tracker?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please rebase (if necessary) on -rc1 and send to the patch tracker if</span>
<span class="quote">&gt; there are no significant changes to it (I doubt there will be.)  If</span>
<span class="quote">&gt; everything during the merge window works as it should, -rc1 should</span>
<span class="quote">&gt; basically be the contents of linux-next just before the merge window</span>
<span class="quote">&gt; opens, plus any fixes that are needed along the way.</span>

Added with the additional Tested-by tags to the patch tracker (ID
8399/1). No updates were required.

--
Stefan
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=71861">Stefan Agner</a> - July 30, 2015, 9:02 p.m.</div>
<pre class="content">
On 2015-06-16 23:51, Stefan Agner wrote:
<span class="quote">&gt;  static void __init devicemaps_init(const struct machine_desc *mdesc)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -1231,7 +1272,10 @@ static void __init devicemaps_init(const struct</span>
<span class="quote">&gt; machine_desc *mdesc)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	early_trap_init(vectors);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	for (addr = VMALLOC_START; addr; addr += PMD_SIZE)</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Clear page table except top pmd used by early fixmaps</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	for (addr = VMALLOC_START; addr &lt; (FIXADDR_TOP &amp; PMD_MASK); addr += PMD_SIZE)</span>
<span class="quote">&gt;  		pmd_clear(pmd_off_k(addr));</span>
<span class="quote">&gt;  </span>

Hi Russel,

Checked this again, v4 does the right thing:
FIXADDR_TOP (0xffeff000) &amp; PMD_MASK (0xffe00000) gives us the address of
the top PMD (0xFFE00000). We don&#39;t clear that since that is taken care
of by early fixmap support (early_fixmap_shutdown). v3 used
FIXADDR_START, which also left out the second to top PMD. The 3MiB of
fixmap spawns two PMD&#39;s however only the top PMD is handled by early
fixmap. Hence this was wrong in v3, but is fixed in v4.

Can you reconsider this patch?

--
Stefan
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=709">Russell King - ARM Linux</a> - Aug. 8, 2015, 5:53 p.m.</div>
<pre class="content">
On Thu, Jul 30, 2015 at 11:02:38PM +0200, Stefan Agner wrote:
<span class="quote">&gt; On 2015-06-16 23:51, Stefan Agner wrote:</span>
<span class="quote">&gt; &gt;  static void __init devicemaps_init(const struct machine_desc *mdesc)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; @@ -1231,7 +1272,10 @@ static void __init devicemaps_init(const struct</span>
<span class="quote">&gt; &gt; machine_desc *mdesc)</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	early_trap_init(vectors);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	for (addr = VMALLOC_START; addr; addr += PMD_SIZE)</span>
<span class="quote">&gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; +	 * Clear page table except top pmd used by early fixmaps</span>
<span class="quote">&gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; +	for (addr = VMALLOC_START; addr &lt; (FIXADDR_TOP &amp; PMD_MASK); addr += PMD_SIZE)</span>
<span class="quote">&gt; &gt;  		pmd_clear(pmd_off_k(addr));</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hi Russel,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Checked this again, v4 does the right thing:</span>
<span class="quote">&gt; FIXADDR_TOP (0xffeff000) &amp; PMD_MASK (0xffe00000) gives us the address of</span>
<span class="quote">&gt; the top PMD (0xFFE00000). We don&#39;t clear that since that is taken care</span>
<span class="quote">&gt; of by early fixmap support (early_fixmap_shutdown). v3 used</span>
<span class="quote">&gt; FIXADDR_START, which also left out the second to top PMD. The 3MiB of</span>
<span class="quote">&gt; fixmap spawns two PMD&#39;s however only the top PMD is handled by early</span>
<span class="quote">&gt; fixmap. Hence this was wrong in v3, but is fixed in v4.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you reconsider this patch?</span>

I applied the patch which was in the patch system, and Olof&#39;s builder
reported failures:

        arm.allnoconfig:
:(.init.text+0x7a0): undefined reference to `early_fixmap_init&#39;

        arm.efm32_defconfig:
arch/arm/kernel/setup.c:958: undefined reference to `early_fixmap_init&#39;

        arm.lpc18xx_defconfig:
arch/arm/include/asm/fixmap.h:25:29: error: &#39;L_PTE_YOUNG&#39; undeclared (first use in this function)
arch/arm/include/asm/fixmap.h:25:43: error: &#39;L_PTE_PRESENT&#39; undeclared (first use in this function)
arch/arm/include/asm/fixmap.h:25:59: error: &#39;L_PTE_XN&#39; undeclared (first use in this function)
arch/arm/include/asm/fixmap.h:25:70: error: &#39;L_PTE_DIRTY&#39; undeclared (first use in this function)
arch/arm/include/asm/fixmap.h:30:47: error: &#39;L_PTE_MT_DEV_SHARED&#39; undeclared (first use in this function)
arch/arm/include/asm/fixmap.h:30:69: error: &#39;L_PTE_SHARED&#39; undeclared (first use in this function)

So I&#39;m going to drop it from my tree.  Please resubmit a fixed version,
thanks.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig</span>
<span class="p_header">index d0950ce..ef164a7 100644</span>
<span class="p_header">--- a/arch/arm/Kconfig</span>
<span class="p_header">+++ b/arch/arm/Kconfig</span>
<span class="p_chunk">@@ -186,6 +186,9 @@</span> <span class="p_context"> config ARCH_HAS_ILOG2_U64</span>
 config ARCH_HAS_BANDGAP
 	bool
 
<span class="p_add">+config FIX_EARLYCON_MEM</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config GENERIC_HWEIGHT
 	bool
 	default y
<span class="p_header">diff --git a/arch/arm/include/asm/fixmap.h b/arch/arm/include/asm/fixmap.h</span>
<span class="p_header">index 0415eae..58cfe9f 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/fixmap.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/fixmap.h</span>
<span class="p_chunk">@@ -6,9 +6,13 @@</span> <span class="p_context"></span>
 #define FIXADDR_TOP		(FIXADDR_END - PAGE_SIZE)
 
 #include &lt;asm/kmap_types.h&gt;
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
 
 enum fixed_addresses {
<span class="p_del">-	FIX_KMAP_BEGIN,</span>
<span class="p_add">+	FIX_EARLYCON_MEM_BASE,</span>
<span class="p_add">+	__end_of_permanent_fixed_addresses,</span>
<span class="p_add">+</span>
<span class="p_add">+	FIX_KMAP_BEGIN = __end_of_permanent_fixed_addresses,</span>
 	FIX_KMAP_END = FIX_KMAP_BEGIN + (KM_TYPE_NR * NR_CPUS) - 1,
 
 	/* Support writing RO kernel text via kprobes, jump labels, etc. */
<span class="p_chunk">@@ -18,7 +22,16 @@</span> <span class="p_context"> enum fixed_addresses {</span>
 	__end_of_fixed_addresses
 };
 
<span class="p_add">+#define FIXMAP_PAGE_COMMON	(L_PTE_YOUNG | L_PTE_PRESENT | L_PTE_XN | L_PTE_DIRTY)</span>
<span class="p_add">+</span>
<span class="p_add">+#define FIXMAP_PAGE_NORMAL	(FIXMAP_PAGE_COMMON | L_PTE_MT_WRITEBACK)</span>
<span class="p_add">+</span>
<span class="p_add">+/* Used by set_fixmap_(io|nocache), both meant for mapping a device */</span>
<span class="p_add">+#define FIXMAP_PAGE_IO		(FIXMAP_PAGE_COMMON | L_PTE_MT_DEV_SHARED | L_PTE_SHARED)</span>
<span class="p_add">+#define FIXMAP_PAGE_NOCACHE	FIXMAP_PAGE_IO</span>
<span class="p_add">+</span>
 void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot);
<span class="p_add">+void __init early_fixmap_init(void);</span>
 
 #include &lt;asm-generic/fixmap.h&gt;
 
<span class="p_header">diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c</span>
<span class="p_header">index e6d8c76..6f03beb 100644</span>
<span class="p_header">--- a/arch/arm/kernel/setup.c</span>
<span class="p_header">+++ b/arch/arm/kernel/setup.c</span>
<span class="p_chunk">@@ -37,6 +37,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/cpu.h&gt;
 #include &lt;asm/cputype.h&gt;
 #include &lt;asm/elf.h&gt;
<span class="p_add">+#include &lt;asm/fixmap.h&gt;</span>
 #include &lt;asm/procinfo.h&gt;
 #include &lt;asm/psci.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_chunk">@@ -953,6 +954,8 @@</span> <span class="p_context"> void __init setup_arch(char **cmdline_p)</span>
 	strlcpy(cmd_line, boot_command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = cmd_line;
 
<span class="p_add">+	early_fixmap_init();</span>
<span class="p_add">+</span>
 	parse_early_param();
 
 #ifdef CONFIG_MMU
<span class="p_header">diff --git a/arch/arm/mm/highmem.c b/arch/arm/mm/highmem.c</span>
<span class="p_header">index b98895d..c7097f9 100644</span>
<span class="p_header">--- a/arch/arm/mm/highmem.c</span>
<span class="p_header">+++ b/arch/arm/mm/highmem.c</span>
<span class="p_chunk">@@ -78,7 +78,7 @@</span> <span class="p_context"> void *kmap_atomic(struct page *page)</span>
 
 	type = kmap_atomic_idx_push();
 
<span class="p_del">-	idx = type + KM_TYPE_NR * smp_processor_id();</span>
<span class="p_add">+	idx = FIX_KMAP_BEGIN + type + KM_TYPE_NR * smp_processor_id();</span>
 	vaddr = __fix_to_virt(idx);
 #ifdef CONFIG_DEBUG_HIGHMEM
 	/*
<span class="p_chunk">@@ -105,7 +105,7 @@</span> <span class="p_context"> void __kunmap_atomic(void *kvaddr)</span>
 
 	if (kvaddr &gt;= (void *)FIXADDR_START) {
 		type = kmap_atomic_idx();
<span class="p_del">-		idx = type + KM_TYPE_NR * smp_processor_id();</span>
<span class="p_add">+		idx = FIX_KMAP_BEGIN + type + KM_TYPE_NR * smp_processor_id();</span>
 
 		if (cache_is_vivt())
 			__cpuc_flush_dcache_area((void *)vaddr, PAGE_SIZE);
<span class="p_chunk">@@ -135,7 +135,7 @@</span> <span class="p_context"> void *kmap_atomic_pfn(unsigned long pfn)</span>
 		return page_address(page);
 
 	type = kmap_atomic_idx_push();
<span class="p_del">-	idx = type + KM_TYPE_NR * smp_processor_id();</span>
<span class="p_add">+	idx = FIX_KMAP_BEGIN + type + KM_TYPE_NR * smp_processor_id();</span>
 	vaddr = __fix_to_virt(idx);
 #ifdef CONFIG_DEBUG_HIGHMEM
 	BUG_ON(!pte_none(get_fixmap_pte(vaddr)));
<span class="p_header">diff --git a/arch/arm/mm/mmu.c b/arch/arm/mm/mmu.c</span>
<span class="p_header">index 6ca7d9a..fb9e817 100644</span>
<span class="p_header">--- a/arch/arm/mm/mmu.c</span>
<span class="p_header">+++ b/arch/arm/mm/mmu.c</span>
<span class="p_chunk">@@ -357,6 +357,47 @@</span> <span class="p_context"> const struct mem_type *get_mem_type(unsigned int type)</span>
 }
 EXPORT_SYMBOL(get_mem_type);
 
<span class="p_add">+static pte_t *(*pte_offset_fixmap)(pmd_t *dir, unsigned long addr);</span>
<span class="p_add">+</span>
<span class="p_add">+static pte_t bm_pte[PTRS_PER_PTE + PTE_HWTABLE_PTRS]</span>
<span class="p_add">+	__aligned(PTE_HWTABLE_OFF + PTE_HWTABLE_SIZE) __initdata;</span>
<span class="p_add">+</span>
<span class="p_add">+static pte_t * __init pte_offset_early_fixmap(pmd_t *dir, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return &amp;bm_pte[pte_index(addr)];</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static pte_t *pte_offset_late_fixmap(pmd_t *dir, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return pte_offset_kernel(dir, addr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t * __init fixmap_pmd(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd = pgd_offset_k(addr);</span>
<span class="p_add">+	pud_t *pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	pmd_t *pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+</span>
<span class="p_add">+	return pmd;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void __init early_fixmap_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The early fixmap range spans multiple pmds, for which</span>
<span class="p_add">+	 * we are not prepared:</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	BUILD_BUG_ON((__fix_to_virt(__end_of_permanent_fixed_addresses) &gt;&gt; PMD_SHIFT)</span>
<span class="p_add">+		     != FIXADDR_TOP &gt;&gt; PMD_SHIFT);</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = fixmap_pmd(FIXADDR_TOP);</span>
<span class="p_add">+	pmd_populate_kernel(&amp;init_mm, pmd, bm_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	pte_offset_fixmap = pte_offset_early_fixmap;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * To avoid TLB flush broadcasts, this uses local_flush_tlb_kernel_range().
  * As a result, this can only be called with preemption disabled, as under
<span class="p_chunk">@@ -365,7 +406,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(get_mem_type);</span>
 void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot)
 {
 	unsigned long vaddr = __fix_to_virt(idx);
<span class="p_del">-	pte_t *pte = pte_offset_kernel(pmd_off_k(vaddr), vaddr);</span>
<span class="p_add">+	pte_t *pte = pte_offset_fixmap(pmd_off_k(vaddr), vaddr);</span>
 
 	/* Make sure fixmap region does not exceed available allocation. */
 	BUILD_BUG_ON(FIXADDR_START + (__end_of_fixed_addresses * PAGE_SIZE) &gt;
<span class="p_chunk">@@ -855,7 +896,7 @@</span> <span class="p_context"> static void __init create_mapping(struct map_desc *md)</span>
 	}
 
 	if ((md-&gt;type == MT_DEVICE || md-&gt;type == MT_ROM) &amp;&amp;
<span class="p_del">-	    md-&gt;virtual &gt;= PAGE_OFFSET &amp;&amp;</span>
<span class="p_add">+	    md-&gt;virtual &gt;= PAGE_OFFSET &amp;&amp; md-&gt;virtual &lt; FIXADDR_START &amp;&amp;</span>
 	    (md-&gt;virtual &lt; VMALLOC_START || md-&gt;virtual &gt;= VMALLOC_END)) {
 		pr_warn(&quot;BUG: mapping for 0x%08llx at 0x%08lx out of vmalloc space\n&quot;,
 			(long long)__pfn_to_phys((u64)md-&gt;pfn), md-&gt;virtual);
<span class="p_chunk">@@ -1213,10 +1254,10 @@</span> <span class="p_context"> void __init arm_mm_memblock_reserve(void)</span>
 
 /*
  * Set up the device mappings.  Since we clear out the page tables for all
<span class="p_del">- * mappings above VMALLOC_START, we will remove any debug device mappings.</span>
<span class="p_del">- * This means you have to be careful how you debug this function, or any</span>
<span class="p_del">- * called function.  This means you can&#39;t use any function or debugging</span>
<span class="p_del">- * method which may touch any device, otherwise the kernel _will_ crash.</span>
<span class="p_add">+ * mappings above VMALLOC_START, except early fixmap, we might remove debug</span>
<span class="p_add">+ * device mappings.  This means earlycon can be used to debug this function</span>
<span class="p_add">+ * Any other function or debugging method which may touch any device _will_</span>
<span class="p_add">+ * crash the kernel.</span>
  */
 static void __init devicemaps_init(const struct machine_desc *mdesc)
 {
<span class="p_chunk">@@ -1231,7 +1272,10 @@</span> <span class="p_context"> static void __init devicemaps_init(const struct machine_desc *mdesc)</span>
 
 	early_trap_init(vectors);
 
<span class="p_del">-	for (addr = VMALLOC_START; addr; addr += PMD_SIZE)</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Clear page table except top pmd used by early fixmaps</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for (addr = VMALLOC_START; addr &lt; (FIXADDR_TOP &amp; PMD_MASK); addr += PMD_SIZE)</span>
 		pmd_clear(pmd_off_k(addr));
 
 	/*
<span class="p_chunk">@@ -1483,6 +1527,35 @@</span> <span class="p_context"> void __init early_paging_init(const struct machine_desc *mdesc)</span>
 
 #endif
 
<span class="p_add">+static void __init early_fixmap_shutdown(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+	unsigned long va = fix_to_virt(__end_of_permanent_fixed_addresses - 1);</span>
<span class="p_add">+</span>
<span class="p_add">+	pte_offset_fixmap = pte_offset_late_fixmap;</span>
<span class="p_add">+	pmd_clear(fixmap_pmd(va));</span>
<span class="p_add">+	local_flush_tlb_kernel_page(va);</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; __end_of_permanent_fixed_addresses; i++) {</span>
<span class="p_add">+		pte_t *pte;</span>
<span class="p_add">+		struct map_desc map;</span>
<span class="p_add">+</span>
<span class="p_add">+		map.virtual = fix_to_virt(i);</span>
<span class="p_add">+		pte = pte_offset_early_fixmap(pmd_off_k(map.virtual), map.virtual);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Only i/o device mappings are supported ATM */</span>
<span class="p_add">+		if (pte_none(*pte) ||</span>
<span class="p_add">+		    (pte_val(*pte) &amp; L_PTE_MT_MASK) != L_PTE_MT_DEV_SHARED)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		map.pfn = pte_pfn(*pte);</span>
<span class="p_add">+		map.type = MT_DEVICE;</span>
<span class="p_add">+		map.length = PAGE_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+		create_mapping(&amp;map);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * paging_init() sets up the page tables, initialises the zone memory
  * maps, and sets up the zero page, bad page and bad page tables.
<span class="p_chunk">@@ -1495,6 +1568,7 @@</span> <span class="p_context"> void __init paging_init(const struct machine_desc *mdesc)</span>
 	prepare_page_table();
 	map_lowmem();
 	dma_contiguous_remap();
<span class="p_add">+	early_fixmap_shutdown();</span>
 	devicemaps_init(mdesc);
 	kmap_init();
 	tcm_init();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



