
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v4,19/28] swiotlb: Add warnings for use of bounce buffers with SME - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v4,19/28] swiotlb: Add warnings for use of bounce buffers with SME</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 16, 2017, 3:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170216154619.19244.76653.stgit@tlendack-t1.amdoffice.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9577547/mbox/"
   >mbox</a>
|
   <a href="/patch/9577547/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9577547/">/patch/9577547/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2BA3E60244 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Feb 2017 15:46:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1D0012861B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Feb 2017 15:46:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 118782861D; Thu, 16 Feb 2017 15:46:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 88F3F2861B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Feb 2017 15:46:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932818AbdBPPqp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 16 Feb 2017 10:46:45 -0500
Received: from mail-sn1nam01on0061.outbound.protection.outlook.com
	([104.47.32.61]:48701
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S932605AbdBPPq2 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 16 Feb 2017 10:46:28 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=3t3QfOb55fzCqahJlWmixMG/dtOSnB9D60xvhfmiOsI=;
	b=hS/B5TbCfg4oLVxM/Em47GGdyZrQN0dW5Uh1z7mRB2gRL8rAC9gTCYkYDIV2r5WGy+TOrNQM9brWVqT+sbI7gs0HX8G7UPe0xhMM1BrHnNIyHxjqVAM6tv3bO4jeVmDyWIlIHCcg0opHQSxrz9rN4vO7OPQxtoz59XX4yg7CRzU=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=Thomas.Lendacky@amd.com; 
Received: from tlendack-t1.amdoffice.net (165.204.77.1) by
	DM5PR12MB1146.namprd12.prod.outlook.com (10.168.236.141) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P384) id
	15.1.888.16; Thu, 16 Feb 2017 15:46:22 +0000
From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [RFC PATCH v4 19/28] swiotlb: Add warnings for use of bounce
	buffers with SME
To: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;kvm@vger.kernel.org&gt;, &lt;linux-doc@vger.kernel.org&gt;,
	&lt;x86@kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;kasan-dev@googlegroups.com&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;iommu@lists.linux-foundation.org&gt;
CC: Rik van Riel &lt;riel@redhat.com&gt;,
	Radim =?utf-8?b?S3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Toshimitsu Kani &lt;toshi.kani@hpe.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Matt Fleming &lt;matt@codeblueprint.co.uk&gt;,
	&quot;Michael S. Tsirkin&quot; &lt;mst@redhat.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Larry Woodman &lt;lwoodman@redhat.com&gt;, Dmitry Vyukov &lt;dvyukov@google.com&gt;
Date: Thu, 16 Feb 2017 09:46:19 -0600
Message-ID: &lt;20170216154619.19244.76653.stgit@tlendack-t1.amdoffice.net&gt;
In-Reply-To: &lt;20170216154158.19244.66630.stgit@tlendack-t1.amdoffice.net&gt;
References: &lt;20170216154158.19244.66630.stgit@tlendack-t1.amdoffice.net&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: YTXPR01CA0021.CANPRD01.PROD.OUTLOOK.COM (10.165.183.159)
	To
	DM5PR12MB1146.namprd12.prod.outlook.com (10.168.236.141)
X-MS-Office365-Filtering-Correlation-Id: d2e51325-85bd-4bed-699b-08d45682f672
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0; RULEID:(22001)(48565401081);
	SRVR:DM5PR12MB1146; 
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1146;
	3:yN3EC0xU699vsxaACYc73ThNOMTqh0IOCDXmr6wcL1TQIP1/u4UP6uAOcRy+FAqMeqx69htV84M7XUIFayw5ZyUQeSmHs0SbidwqDMII/PYTIAHn/HvGuLfVT6qGvhVwIjFBA3Vk0ceee0WlXUuJU7si3FS2W7njTXOPYBM6viLexqaV+HuR7xsQXoc848p+L96cv7CBJ2h7NwvGt4Ifc/MBhxCIJ6chwglvNt6u/FTcvn8CTP37WNvzVIyezLftDnANPIT1oldnjrv1jL6A0HTzRi5bN9QgWMN6P6Tv3es=;
	25:Qv+x9OLajEsW0DPCWfvTq7MYL18UgMHjitgsMlYGHV17VmL8mqonMeElmiQ55YT6ittqJNaSg308NnagJXVFG8lseop4OjE9i/Yg/cbzO8FZsb8jqVhTe0hUfKkFxmzmvKnLgY+PWCvR1n93E0jvnMhnJWgWU2OKfP/TXSRcml5qlOzab2m7ATE7c9jhIfc8sqQV5FK6Eg2G6kc+88Zaf5yUzTYL9h3ztRFs44WmAGyz4u/3w0B5F+pFivjI8vYF3omtcrOb8QBjFOjArIUqXIICjv6b3B5aV811/xzKFhbwTJLLPedXtS7XRLDPB+CIbWelF0eWZKOw6J5bUcLnPnVKN4XKchyL2LB5lJB0hBjJacY1t33YlEQUmUYPeMnEHG2b7F71p/4UiIGiXVl0vgYPO035HjpQDU6yqAtxIbVu2a7WbWiBMt4GVHASLfGhrXXC//C9TcBdyR9QWcC1gQ==
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1146;
	31:v7mPdfWmf2JUhe2ROylmK5cfGNZ8PvicOkg4VZsPbBgsUywzpFO0DxlGXeBGtIcIex95lGFuTQXXUeAuyjX+/aJ+SpLOpBS/CT5JMIFpOnsATkcI5FJG/XeMD65jW302FVTHBZFNqjNZEjkS+J+f/iLg9WwaY8sU7J93u5gVblOAZmi615mGD6XcLrI1eyJwe9DaHM6xVspZ5mozlWDsRs05lkqu/vceB2otZd3XqMBU/6Gd8bEjbPSdWX6/39hC;
	20:Ull4Azx0e+Pkp/T4Oe4iciV3UYPWnDmm4znnIYWY34SveDpzp2GKJxVUrmkG96/dPFrJ6oMAlkUhqACIASDZLOzT9wQgcmPLBDEwD6V04WMdDbhmgFJS+GTSEb/eiAYZRf3yMfPM3y804jz/WpmOGGpkEwlxHG1a5s25cAX5CCmmsiGIeT3Ifzu9Ugbsk2Lxnmn4iqDVuIY4Mgf1XR/UexWqnvz9gLbKwBE7CQrwrShm+YAzKdSPD/xRk/660/g6dOftmFS4T6M+YL5VCMDSkJhZ8hLnYrlGx5nYuyuuqcOTaFXsPdh/TC3TvgZqdb5dm6moNz+XBjUWEE6SmxMA6PJy+drRq/JvOhZe/UxD4FM/5u5G0ITah1avJOp88SxuqWkSeEWT+zRfyH5W++/75nlEaTUnnoVbWYVyqvZyng2cmFdOFzDsmHFk84jm9MIjrDgqUUGk3GoHcZ9UKcSZ7Bx0ut7P1Cn/601tIT2Vt5am38UafMKb676JyIaviogR
X-Microsoft-Antispam-PRVS: &lt;DM5PR12MB1146038A552E2E9770273232EC5A0@DM5PR12MB1146.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040375)(601004)(2401047)(8121501046)(5005006)(10201501046)(3002001)(6055026)(6041248)(20161123558025)(20161123562025)(20161123560025)(20161123555025)(20161123564025)(6072148);
	SRVR:DM5PR12MB1146; BCL:0; PCL:0; RULEID:; SRVR:DM5PR12MB1146;
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1146;
	4:c/ozeaMel4Fr8KPHqmx2zYuhDt0C2KkgNQUY0lZAi48Nla9+vxxbmQg73jyf3ItuTfYcMgLGXVzx6sgmJwPH7WdxMcpCK64WhB8GLugntGRh2pINqmL4EFIMffzhJKaOYZ140jJgFdeAYSypXQ+jkGT/y7t4TQvPZn/VS72KZ8BLYSvvzPVbDy7uT8EIwnJFPBkkJL32MA2a+iMfowQyr95TAL6b1McJvLLWWyktXEJogjKdbXJbYkUfv1xpV1vrg0NJCKCEyBZo/RhggoFw6S37ICVw0w9E4vaSHTTU/+XaMIcV8F3PUBghpPty7L3HHd7QJBtz+xj4+aT2c9Snza7DK2d80inRoUjBVIX5d/JwGZdn3qJR/3glFlXL0IgTxzDqxFROrmpiSWivj72g0i1McCSra+JDTRNWIeFAoCcsHwSK+uHJxDo+yPywteYcdtcRSxBBM/qy93G7fa0MnT7/GirdxQT7CgUONvL1Sxn9M2SsL7tvCLhSfI7MMVrdr6SGxskPV/s5tvI3oz1sQmkVj0KVTOXKxWB/tzJ9yN8jq4xYl3ReRIsK7lZ28dEITd5E8t/KDd5nwkXh++YKeAW+8JYUUGeAKcQGQKAjjJIKK9IKaD02j/13HCgtkI3m8En9K/yhq9yx50Eh/PeumHhYtA91rBpDh7FumQIQs+Q=
X-Forefront-PRVS: 0220D4B98D
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6009001)(7916002)(39860400002)(39450400003)(39840400002)(39410400002)(39850400002)(199003)(189002)(2906002)(76176999)(101416001)(50986999)(47776003)(54356999)(6116002)(1076002)(3846002)(6666003)(33646002)(4326007)(2950100002)(389900003)(55016002)(9686003)(54906002)(92566002)(53936002)(5660300001)(25786008)(6506006)(68736007)(305945005)(230700001)(7736002)(81156014)(2201001)(4001350100001)(83506001)(106356001)(66066001)(97736004)(38730400002)(105586002)(189998001)(81166006)(8676002)(42186005)(7416002)(103116003)(86362001)(50466002)(97746001)(69596002)(53416004)(23676002)(71626007)(217873001);
	DIR:OUT; SFP:1101; SCL:1; SRVR:DM5PR12MB1146;
	H:tlendack-t1.amdoffice.net; FPR:; SPF:None; PTR:InfoNoRecords;
	A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtETTVQUjEyTUIxMTQ2OzIzOmlWTXBSNVNkeWg2VmdBMm1JVmJpM2JmaVZq?=
	=?utf-8?B?SStYYVlwYW9aejRSaVRUOXlkTXZtUmdBOHJweTVCaTIyQ3pSdHVjcDdBVHNu?=
	=?utf-8?B?bkJDK2tVNFNyV0txTHA1TlZ5YXAzejZpd2piNjA0ZXBuYlgyWS9hR3JGdzVJ?=
	=?utf-8?B?cVQ3SGZaVXZoRUNyc3p4YSs0a2w1Z1MySytYbE1CWWFBMEZ0Rm9hTG85bVpR?=
	=?utf-8?B?c2hrM1lkY2ozOUMxSkhSa3dSWXRQTTNTdFdRbVNLT1N5VGN1dlFPN2RUN3FD?=
	=?utf-8?B?eDVPbStnVCtBVHBORjBYOVZiYUFsV0t0NEhDSXdEdld3MFRGb0NJTmZFb1oy?=
	=?utf-8?B?MWlEajgzdGNxeTJRTVY1TmsyTC9uNCs0Yk5qd3RuMXZzbmxSU1ZjY050djZ5?=
	=?utf-8?B?TDZOUjArK2kwRVlyMk1QWGYyY09yTGI0WkFYT0xodUpUaUlGOWtHZmk0amtz?=
	=?utf-8?B?SzZoK29XOUM1N1hBZHdPMUtOY2xqekk4eWlZSGg0Skp4NzQrVU9oOVgySVFt?=
	=?utf-8?B?M3NIQThxN0F0SmsxWk5BSldYQ0pDV0dINUpobmJ4dFY4UHh6NjZRUmF3Uzhy?=
	=?utf-8?B?a1dxa2Rwd1pTTm1DSlM0TTBoRm40WjlocVVPdjk4YTRjTmQxMEhQdE02QmNx?=
	=?utf-8?B?dnF2d2JDenFhSWZXSEJNazB2L1h6Nzg1SFU3WEVSR0RDRHFGYmxHcCtVM2VP?=
	=?utf-8?B?OXBublZrbHZwazVYQnY1RS9kR0lNekQ3cEdGcE5tSWNUU1ZRRlFwWnNqUjQr?=
	=?utf-8?B?endIcHdSS2ZkVlJuV0gzckc1TEZ1a3VCM2VycUZmVXNMNEwrU3lOR3Q0NWVa?=
	=?utf-8?B?Sm1tM05qbXZxZCtlU1d1aDYxQ2ZJM3VBTjdybk1kUHA5WEI1UGZCMjB4TTN6?=
	=?utf-8?B?SW55b3NjUUd6cmRrdm9RSTk1cU1oYTJqelF3bVB0TlVTL0xIQTNVRUhZdWt5?=
	=?utf-8?B?YW4rQlNjeEtOU0pCdENBWlk5bWY0d2tZUWtxZ041VUxWMXhoVUpQczlsUFds?=
	=?utf-8?B?VmxrT0RQbWhUYkN5VE5KdFJDOEI1RmJUL2JDUVFZNUhPTS9jdy9DUVk0ZU5V?=
	=?utf-8?B?RlEyOEl0VVloRkVnZ2ozam5MU3E4ek1pRHg5OEhFeEVyQzk2SUMyTXlqSUxW?=
	=?utf-8?B?d2JlNlltRE9ESlNmcldIUGJUcWFUeGNQRmo0c1dwNTVkY1BRb2lBakw2d2Fk?=
	=?utf-8?B?NHlNN0kxSDYraGZGcjNlamFaQ1dVVEhYZGtIQVI1VmZNOEdRS1Bva20zaU1y?=
	=?utf-8?B?UU1MSzV2UG91SnEzU2F0NVMyZC9yRkRESVFwY09UTDJ2bi9zU2tXekRXWXp2?=
	=?utf-8?B?ejVRL0FUMGxMN0FQUHVqT0hnK21iOXFOZHkzaWFwaHBwMTFnNUdvUTdLMUli?=
	=?utf-8?B?VmhJQmlaNW9pdVV0OFhSN2pZeW1PNmlxNmE5Y05tS29HS2dLTVcrakV3VitY?=
	=?utf-8?B?Sk1ic0dYS3ErZDVNcDBYMlUrK1NYUmVzN1FWZllpN3dGSHQ5bzZqbmQ2SW1Y?=
	=?utf-8?B?czVBWDVla3RpYlFzdmlhd2FQWTRranRnaU5OMjM1YThlRTM5UjlnWCtLV2ZO?=
	=?utf-8?B?ejZTZTluZmMwdzBxSE1sWmVEeE04ZWo5KzROYjNZbXBuK29oV3J1TjZiV01M?=
	=?utf-8?B?Wm1iaFZmZ043MTMvRzh5NTl1TTRYb0hWcS8xWWRZbTIxaFYvVk1IVW4xOHNs?=
	=?utf-8?B?S3B0Wlo4OXRibnZTelJyUU53OGprTjZaanVhSU1yRjF1aTFnQkFwUEdEN3BB?=
	=?utf-8?B?Uks3NE5IMWlER2dWa05QRGk1RFlUKyt4YUVWcURCc3VWNFUrS3ZncGtQcFdz?=
	=?utf-8?B?WXNHcmNUc0QzT0g2SUQxQkI0SGR4MXBQQS9zOWhBOGZJN0wyMXllNVhGVTk4?=
	=?utf-8?B?U2I5Umtla1FnSnlYRVduN3dCbTNlRlYrSnZmMFRKUHdVaFVvVWNqN20wTXla?=
	=?utf-8?B?c2Nud2IrVjRRPT0=?=
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1146;
	6:IjXZDV6WGJGGWWX98VFLPK4EXvQ2V0n2dFMcMEvNvOFeanWXBPgDahRUyENTDyXLW27J7Z7r+JeLVz3vQp5gXSAJOUcaHMPJhL+IBqDrfbBVVsuP3/p+FbuD52vdxsh9nloQVnnznyTCKT1DxQZPYwPyn6HAJXheozR5/5HARhN2o4r5PqoESSOKka0uTMw407GPdsN00T7tm9GhDFkwhLY3ildk+p99iqTqTWSR3Um6kaYY3opDBk+BJQ089E6j7BLU6aHkTFRPaqmBDCFpxFGGXirRFjfPw9qzk2PbTCbfGc6PB4g9go/BCGUZuYuyWr/YD04w/oF2twCXphZUV1pfS6wz9ERHvp4Od6349LZbbXDvtVFy1TmH8R2g8uHuV17xzj+fj+uTknLXEC189qRBjBj3iIATDS+7PU7ZD8k=;
	5:bRL3lYlrY6n9f0FtWmEnXXviZI6DEeUsy3tOMcheIGZsCAIxbb6gzS5wo/7HRdvmI/++dFn/FdsG4mcBm4JMnzesumjslc/cZL5nCOAAQyMLgO0zYt6KblXTa0QeZSmLFiNTHsypfKF5G/WCkeIzrA==;
	24:UfW8YB4hLndBqowwx+e4vbPzpLwWOn9ikdZZo11f6LBbVNEgfyHAbQ5cszX8aPGirs1qYvTUqpYsTy1mIefvzCRDTFkTl2rgaqEMSv8ZSOo=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; DM5PR12MB1146;
	7:Cxww8iagSxr54vK1lCCY69+x0GH8eUR+EmaH1HOD9PWSYXcfotSLnslfCecwAddVoLa3XUh9rWsiGNBSTjV7w+PVMsjgxK6MbPju6iKPOOPTXB4BMVpeF51i51wGqAHJlByAMH35TWdUIKh1sIt5SYkObQ9Raav8BzkkzjQDga2drTokzP2ngd5Dgq9KH/vMZPPTjG0M3Me+jHKJ+IZegXTqwHTQ2Q1U5hqfD5l+X4obylNBw4d9KsrdgHHqiTUSG94Ekk6+8zmLghQMraOQ/JrHDY+1okwQSwH5L6bDFkTLTrTg/+4fI5xMc+Rw8WQgCUVwJepnt494iBSmThy25A==;
	20:nYUEp6IZYr3USADzev0j/HKQJxbRtfoxSPk0N81WBVwcN7eD2DOrRyjl7NltweOPPVuAfVcv+xKAhWAy0nLfqQojSlCK/nMuhNn/RhmI6sy4YHyR1YlW5IhE443vNbp2mM50L3V3KSKIJL2f4Nb3ZIZzTvV3d/ESn03t3BpTItmNGe2d7MJe0G+TczeRT41QFo8uZG6m2GlFjRPTbJSbateykKTEcYNRTOWz7xP/zV6/qD6k3iMKSyRvsZK/Br9e
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Feb 2017 15:46:22.3363
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM5PR12MB1146
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Feb. 16, 2017, 3:46 p.m.</div>
<pre class="content">
Add warnings to let the user know when bounce buffers are being used for
DMA when SME is active.  Since the bounce buffers are not in encrypted
memory, these notifications are to allow the user to determine some
appropriate action - if necessary.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
---
 arch/x86/include/asm/mem_encrypt.h |   11 +++++++++++
 include/linux/dma-mapping.h        |   11 +++++++++++
 include/linux/mem_encrypt.h        |    6 ++++++
 lib/swiotlb.c                      |    3 +++
 4 files changed, 31 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3407">Konrad Rzeszutek Wilk</a> - Feb. 17, 2017, 3:59 p.m.</div>
<pre class="content">
On Thu, Feb 16, 2017 at 09:46:19AM -0600, Tom Lendacky wrote:
<span class="quote">&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt; appropriate action - if necessary.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |   11 +++++++++++</span>
<span class="quote">&gt;  include/linux/dma-mapping.h        |   11 +++++++++++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        |    6 ++++++</span>
<span class="quote">&gt;  lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;  4 files changed, 31 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 87e816f..5a17f1b 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -26,6 +26,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  	return (sme_me_mask) ? true : false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;  			      unsigned long size);</span>
<span class="quote">&gt;  void __init sme_early_decrypt(resource_size_t paddr,</span>
<span class="quote">&gt; @@ -53,6 +58,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0ULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; index 10c5a17..130bef7 100644</span>
<span class="quote">&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt; @@ -557,6 +558,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt; +		dev_warn(dev,</span>
<span class="quote">&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>

You can make it one line. But I am wondering if you should use
printk_ratelimit as this may fill the console up.
<span class="quote">
&gt; +</span>
<span class="quote">&gt;  	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -576,6 +582,11 @@ static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	if (!dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt; +		dev_warn(dev,</span>
<span class="quote">&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>

Ditto.
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	dev-&gt;coherent_dma_mask = mask;</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; index 14a7b9f..6829ff1 100644</span>
<span class="quote">&gt; --- a/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt; @@ -28,6 +28,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0ULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="quote">&gt; index c463067..aff9353 100644</span>
<span class="quote">&gt; --- a/lib/swiotlb.c</span>
<span class="quote">&gt; +++ b/lib/swiotlb.c</span>
<span class="quote">&gt; @@ -509,6 +509,9 @@ phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
<span class="quote">&gt;  	if (no_iotlb_memory)</span>
<span class="quote">&gt;  		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	WARN_ONCE(sme_active(),</span>
<span class="quote">&gt; +		  &quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>

How does that help?

As in what can the user do with this?
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	mask = dma_get_seg_boundary(hwdev);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	tbl_dma_addr &amp;= mask;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Feb. 17, 2017, 4:51 p.m.</div>
<pre class="content">
On 2/17/2017 9:59 AM, Konrad Rzeszutek Wilk wrote:
<span class="quote">&gt; On Thu, Feb 16, 2017 at 09:46:19AM -0600, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt;&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt;&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt;&gt; appropriate action - if necessary.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/mem_encrypt.h |   11 +++++++++++</span>
<span class="quote">&gt;&gt;  include/linux/dma-mapping.h        |   11 +++++++++++</span>
<span class="quote">&gt;&gt;  include/linux/mem_encrypt.h        |    6 ++++++</span>
<span class="quote">&gt;&gt;  lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;&gt;  4 files changed, 31 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index 87e816f..5a17f1b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -26,6 +26,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;  	return (sme_me_mask) ? true : false;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt;  			      unsigned long size);</span>
<span class="quote">&gt;&gt;  void __init sme_early_decrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt; @@ -53,6 +58,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	return false;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 0ULL;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static inline void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; index 10c5a17..130bef7 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /**</span>
<span class="quote">&gt;&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt;&gt; @@ -557,6 +558,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;  		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt;&gt; +		dev_warn(dev,</span>
<span class="quote">&gt;&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You can make it one line. But I am wondering if you should use</span>
<span class="quote">&gt; printk_ratelimit as this may fill the console up.</span>

I thought the use of dma_set_mask() was mostly a one time probe/setup
thing so I didn&#39;t think we would get that many of these messages. If
dma_set_mask() is called much more often that that I can change this
to a printk_ratelimit().  I&#39;ll look into it further.
<span class="quote">
&gt;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	*dev-&gt;dma_mask = mask;</span>
<span class="quote">&gt;&gt;  	return 0;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; @@ -576,6 +582,11 @@ static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	if (!dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;  		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt;&gt; +		dev_warn(dev,</span>
<span class="quote">&gt;&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ditto.</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	dev-&gt;coherent_dma_mask = mask;</span>
<span class="quote">&gt;&gt;  	return 0;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index 14a7b9f..6829ff1 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -28,6 +28,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	return false;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 0ULL;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="quote">&gt;&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; index c463067..aff9353 100644</span>
<span class="quote">&gt;&gt; --- a/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; +++ b/lib/swiotlb.c</span>
<span class="quote">&gt;&gt; @@ -509,6 +509,9 @@ phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
<span class="quote">&gt;&gt;  	if (no_iotlb_memory)</span>
<span class="quote">&gt;&gt;  		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +	WARN_ONCE(sme_active(),</span>
<span class="quote">&gt;&gt; +		  &quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; How does that help?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As in what can the user do with this?</span>

It&#39;s meant just to notify the user about the condition. The user could
then decide to use an alternative device that supports a greater DMA
range (I can probably change it to a dev_warn_once() so that a device
is identified).  I would be nice if I could issue this message once per
device that experienced this.  I didn&#39;t see anything that would do
that, though.

Thanks,
Tom
<span class="quote">
&gt;&gt; +</span>
<span class="quote">&gt;&gt;  	mask = dma_get_seg_boundary(hwdev);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	tbl_dma_addr &amp;= mask;</span>
<span class="quote">&gt;&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Feb. 27, 2017, 5:52 p.m.</div>
<pre class="content">
On Thu, Feb 16, 2017 at 09:46:19AM -0600, Tom Lendacky wrote:
<span class="quote">&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt; appropriate action - if necessary.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |   11 +++++++++++</span>
<span class="quote">&gt;  include/linux/dma-mapping.h        |   11 +++++++++++</span>
<span class="quote">&gt;  include/linux/mem_encrypt.h        |    6 ++++++</span>
<span class="quote">&gt;  lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;  4 files changed, 31 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; index 87e816f..5a17f1b 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt; @@ -26,6 +26,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  	return (sme_me_mask) ? true : false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;  			      unsigned long size);</span>
<span class="quote">&gt;  void __init sme_early_decrypt(resource_size_t paddr,</span>
<span class="quote">&gt; @@ -53,6 +58,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0ULL;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; index 10c5a17..130bef7 100644</span>
<span class="quote">&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /**</span>
<span class="quote">&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt; @@ -557,6 +558,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;  		return -EIO;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt; +		dev_warn(dev,</span>
<span class="quote">&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt; +</span>

Yes, definitely _once() here.

It could be extended later to be per-device if the need arises.

Also, a bit above in this function, we test if (ops-&gt;set_dma_mask) so
device drivers which supply even an empty -&gt;set_dma_mask will circumvent
this check.

It probably doesn&#39;t matter all that much right now because the
only driver I see right now defining this method, though, is
ethernet/intel/fm10k/fm10k_pf.c and some other arches&#39; functionality
which is unrelated here.

But still...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80801">Tom Lendacky</a> - Feb. 28, 2017, 11:19 p.m.</div>
<pre class="content">
On 2/27/2017 11:52 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Thu, Feb 16, 2017 at 09:46:19AM -0600, Tom Lendacky wrote:</span>
<span class="quote">&gt;&gt; Add warnings to let the user know when bounce buffers are being used for</span>
<span class="quote">&gt;&gt; DMA when SME is active.  Since the bounce buffers are not in encrypted</span>
<span class="quote">&gt;&gt; memory, these notifications are to allow the user to determine some</span>
<span class="quote">&gt;&gt; appropriate action - if necessary.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/x86/include/asm/mem_encrypt.h |   11 +++++++++++</span>
<span class="quote">&gt;&gt;  include/linux/dma-mapping.h        |   11 +++++++++++</span>
<span class="quote">&gt;&gt;  include/linux/mem_encrypt.h        |    6 ++++++</span>
<span class="quote">&gt;&gt;  lib/swiotlb.c                      |    3 +++</span>
<span class="quote">&gt;&gt;  4 files changed, 31 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; index 87e816f..5a17f1b 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="quote">&gt;&gt; @@ -26,6 +26,11 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;  	return (sme_me_mask) ? true : false;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt;  			      unsigned long size);</span>
<span class="quote">&gt;&gt;  void __init sme_early_decrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt; @@ -53,6 +58,12 @@ static inline bool sme_active(void)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	return false;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline u64 sme_dma_mask(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	return 0ULL;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static inline void __init sme_early_encrypt(resource_size_t paddr,</span>
<span class="quote">&gt;&gt; diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; index 10c5a17..130bef7 100644</span>
<span class="quote">&gt;&gt; --- a/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; +++ b/include/linux/dma-mapping.h</span>
<span class="quote">&gt;&gt; @@ -10,6 +10,7 @@</span>
<span class="quote">&gt;&gt;  #include &lt;linux/scatterlist.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/kmemcheck.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/bug.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mem_encrypt.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /**</span>
<span class="quote">&gt;&gt;   * List of possible attributes associated with a DMA mapping. The semantics</span>
<span class="quote">&gt;&gt; @@ -557,6 +558,11 @@ static inline int dma_set_mask(struct device *dev, u64 mask)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))</span>
<span class="quote">&gt;&gt;  		return -EIO;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="quote">&gt;&gt; +		dev_warn(dev,</span>
<span class="quote">&gt;&gt; +			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yes, definitely _once() here.</span>

Setting the mask is a probe/init type event, so I think not having the
_once() would be better so that all devices that set a mask to something
less than the SME encryption mask would be identified.  This isn&#39;t done
for every DMA, etc.
<span class="quote">
&gt;</span>
<span class="quote">&gt; It could be extended later to be per-device if the need arises.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Also, a bit above in this function, we test if (ops-&gt;set_dma_mask) so</span>
<span class="quote">&gt; device drivers which supply even an empty -&gt;set_dma_mask will circumvent</span>
<span class="quote">&gt; this check.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It probably doesn&#39;t matter all that much right now because the</span>
<span class="quote">&gt; only driver I see right now defining this method, though, is</span>
<span class="quote">&gt; ethernet/intel/fm10k/fm10k_pf.c and some other arches&#39; functionality</span>
<span class="quote">&gt; which is unrelated here.</span>

Device drivers don&#39;t supply set_dma_mask() since that is part of the
dma_map_ops structure. The fm10k_pf.c file function is unrelated to this
(it&#39;s part of an internal driver structure). The dma_map_ops structure
is setup by the arch or an iommu.

Thanks,
Tom
<span class="quote">
&gt;</span>
<span class="quote">&gt; But still...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - March 1, 2017, 11:17 a.m.</div>
<pre class="content">
On Tue, Feb 28, 2017 at 05:19:51PM -0600, Tom Lendacky wrote:
<span class="quote">&gt; Device drivers don&#39;t supply set_dma_mask() since that is part of the</span>
<span class="quote">&gt; dma_map_ops structure. The fm10k_pf.c file function is unrelated to this</span>
<span class="quote">&gt; (it&#39;s part of an internal driver structure). The dma_map_ops structure</span>
<span class="quote">&gt; is setup by the arch or an iommu.</span>

That was certainly a brainfart, sorry.

Joerg explained to me on IRC how the whole dma_map_ops handling is
supposed to be happening.

Thanks.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - March 2, 2017, 5:01 p.m.</div>
<pre class="content">
On 17/02/2017 17:51, Tom Lendacky wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s meant just to notify the user about the condition. The user could</span>
<span class="quote">&gt; then decide to use an alternative device that supports a greater DMA</span>
<span class="quote">&gt; range (I can probably change it to a dev_warn_once() so that a device</span>
<span class="quote">&gt; is identified).  I would be nice if I could issue this message once per</span>
<span class="quote">&gt; device that experienced this.  I didn&#39;t see anything that would do</span>
<span class="quote">&gt; that, though.</span>

dev_warn_once would print once only, not once per device.  But if you
leave the dev_warn elsewhere, this can be just pr_warn_once.

Paolo
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 87e816f..5a17f1b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -26,6 +26,11 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 	return (sme_me_mask) ? true : false;
 }
 
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return ((u64)sme_me_mask &lt;&lt; 1) - 1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init sme_early_encrypt(resource_size_t paddr,
 			      unsigned long size);
 void __init sme_early_decrypt(resource_size_t paddr,
<span class="p_chunk">@@ -53,6 +58,12 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 {
 	return false;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0ULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif
 
 static inline void __init sme_early_encrypt(resource_size_t paddr,
<span class="p_header">diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="p_header">index 10c5a17..130bef7 100644</span>
<span class="p_header">--- a/include/linux/dma-mapping.h</span>
<span class="p_header">+++ b/include/linux/dma-mapping.h</span>
<span class="p_chunk">@@ -10,6 +10,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/kmemcheck.h&gt;
 #include &lt;linux/bug.h&gt;
<span class="p_add">+#include &lt;linux/mem_encrypt.h&gt;</span>
 
 /**
  * List of possible attributes associated with a DMA mapping. The semantics
<span class="p_chunk">@@ -557,6 +558,11 @@</span> <span class="p_context"> static inline int dma_set_mask(struct device *dev, u64 mask)</span>
 
 	if (!dev-&gt;dma_mask || !dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="p_add">+		dev_warn(dev,</span>
<span class="p_add">+			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	*dev-&gt;dma_mask = mask;
 	return 0;
 }
<span class="p_chunk">@@ -576,6 +582,11 @@</span> <span class="p_context"> static inline int dma_set_coherent_mask(struct device *dev, u64 mask)</span>
 {
 	if (!dma_supported(dev, mask))
 		return -EIO;
<span class="p_add">+</span>
<span class="p_add">+	if (sme_active() &amp;&amp; (mask &lt; sme_dma_mask()))</span>
<span class="p_add">+		dev_warn(dev,</span>
<span class="p_add">+			 &quot;SME is active, device will require DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	dev-&gt;coherent_dma_mask = mask;
 	return 0;
 }
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 14a7b9f..6829ff1 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -28,6 +28,12 @@</span> <span class="p_context"> static inline bool sme_active(void)</span>
 {
 	return false;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline u64 sme_dma_mask(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0ULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif
 
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index c463067..aff9353 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -509,6 +509,9 @@</span> <span class="p_context"> phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,</span>
 	if (no_iotlb_memory)
 		panic(&quot;Can not allocate SWIOTLB buffer earlier and can&#39;t now provide you with the DMA bounce buffer&quot;);
 
<span class="p_add">+	WARN_ONCE(sme_active(),</span>
<span class="p_add">+		  &quot;SME is active and system is using DMA bounce buffers\n&quot;);</span>
<span class="p_add">+</span>
 	mask = dma_get_seg_boundary(hwdev);
 
 	tbl_dma_addr &amp;= mask;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



