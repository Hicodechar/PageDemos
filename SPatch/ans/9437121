
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM,v13,13/18] mm/hmm/mirror: device page fault handler - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM,v13,13/18] mm/hmm/mirror: device page fault handler</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 18, 2016, 6:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1479493107-982-14-git-send-email-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9437121/mbox/"
   >mbox</a>
|
   <a href="/patch/9437121/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9437121/">/patch/9437121/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	021E960469 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:19:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E35BF299BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:19:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D6158299C1; Fri, 18 Nov 2016 17:19:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C683D299BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Nov 2016 17:19:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932612AbcKRRTr (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 18 Nov 2016 12:19:47 -0500
Received: from mx1.redhat.com ([209.132.183.28]:39318 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754292AbcKRRRz (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 18 Nov 2016 12:17:55 -0500
Received: from int-mx09.intmail.prod.int.phx2.redhat.com
	(int-mx09.intmail.prod.int.phx2.redhat.com [10.5.11.22])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 387D87EAB8;
	Fri, 18 Nov 2016 17:17:55 +0000 (UTC)
Received: from xgl-cortex.ml2.eng.bos.redhat.com
	(xgl-cortex.ml2.eng.bos.redhat.com [10.19.160.80])
	by int-mx09.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id uAIHHd99016767; Fri, 18 Nov 2016 12:17:54 -0500
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, &lt;linux-kernel@vger.kernel.org&gt;,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;,
	Jatin Kumar &lt;jakumar@nvidia.com&gt;, Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;,
	Sherry Cheung &lt;SCheung@nvidia.com&gt;, Subhash Gutti &lt;sgutti@nvidia.com&gt;
Subject: [HMM v13 13/18] mm/hmm/mirror: device page fault handler
Date: Fri, 18 Nov 2016 13:18:22 -0500
Message-Id: &lt;1479493107-982-14-git-send-email-jglisse@redhat.com&gt;
In-Reply-To: &lt;1479493107-982-1-git-send-email-jglisse@redhat.com&gt;
References: &lt;1479493107-982-1-git-send-email-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.22
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Fri, 18 Nov 2016 17:17:55 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - Nov. 18, 2016, 6:18 p.m.</div>
<pre class="content">
This handle page fault on behalf of device driver, unlike handle_mm_fault()
it does not trigger migration back to system memory for device memory.
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Jatin Kumar &lt;jakumar@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: John Hubbard &lt;jhubbard@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Sherry Cheung &lt;SCheung@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Subhash Gutti &lt;sgutti@nvidia.com&gt;</span>
---
 include/linux/hmm.h |  33 ++++++-
 mm/hmm.c            | 262 +++++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 267 insertions(+), 28 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hmm.h b/include/linux/hmm.h</span>
<span class="p_header">index 9e0f00d..c79abfc 100644</span>
<span class="p_header">--- a/include/linux/hmm.h</span>
<span class="p_header">+++ b/include/linux/hmm.h</span>
<span class="p_chunk">@@ -99,6 +99,7 @@</span> <span class="p_context"> struct hmm;</span>
  * HMM_PFN_WRITE: CPU page table have the write permission set
  * HMM_PFN_ERROR: corresponding CPU page table entry point to poisonous memory
  * HMM_PFN_EMPTY: corresponding CPU page table entry is none (pte_none() true)
<span class="p_add">+ * HMM_PFN_FAULT: use by hmm_vma_fault() to signify which address need faulting</span>
  * HMM_PFN_DEVICE: this is device memory (ie a ZONE_DEVICE page)
  * HMM_PFN_SPECIAL: corresponding CPU page table entry is special ie result of
  *      vm_insert_pfn() or vm_insert_page() and thus should not be mirror by a
<span class="p_chunk">@@ -113,10 +114,11 @@</span> <span class="p_context"> typedef unsigned long hmm_pfn_t;</span>
 #define HMM_PFN_WRITE (1 &lt;&lt; 2)
 #define HMM_PFN_ERROR (1 &lt;&lt; 3)
 #define HMM_PFN_EMPTY (1 &lt;&lt; 4)
<span class="p_del">-#define HMM_PFN_DEVICE (1 &lt;&lt; 5)</span>
<span class="p_del">-#define HMM_PFN_SPECIAL (1 &lt;&lt; 6)</span>
<span class="p_del">-#define HMM_PFN_UNADDRESSABLE (1 &lt;&lt; 7)</span>
<span class="p_del">-#define HMM_PFN_SHIFT 8</span>
<span class="p_add">+#define HMM_PFN_FAULT (1 &lt;&lt; 5)</span>
<span class="p_add">+#define HMM_PFN_DEVICE (1 &lt;&lt; 6)</span>
<span class="p_add">+#define HMM_PFN_SPECIAL (1 &lt;&lt; 7)</span>
<span class="p_add">+#define HMM_PFN_UNADDRESSABLE (1 &lt;&lt; 8)</span>
<span class="p_add">+#define HMM_PFN_SHIFT 9</span>
 
 static inline struct page *hmm_pfn_to_page(hmm_pfn_t pfn)
 {
<span class="p_chunk">@@ -298,6 +300,29 @@</span> <span class="p_context"> int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
 		     hmm_pfn_t *pfns);
 
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Fault memory on behalf of device driver unlike handle_mm_fault() it will not</span>
<span class="p_add">+ * migrate any device memory back to system memory. The hmm_pfn_t array will be</span>
<span class="p_add">+ * updated with fault result and current snapshot of the CPU page table for the</span>
<span class="p_add">+ * range. Note that you must use hmm_range_monitor_start/end() to ascertain if</span>
<span class="p_add">+ * you could use those.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * DO NOT USE hmm_vma_range_lock()/hmm_vma_range_unlock() IT WILL DEADLOCK !</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The mmap_sem must be taken in read mode before entering and it might be drop</span>
<span class="p_add">+ * by the function if that happen the function return false. Otherwise, if the</span>
<span class="p_add">+ * mmap_sem is still held it return true. The return value does not reflect if</span>
<span class="p_add">+ * the fault was successfull or not, you need to inspect the hmm_pfn_t array to</span>
<span class="p_add">+ * determine fault status.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * See function description in mm/hmm.c for documentation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool hmm_vma_fault(struct vm_area_struct *vma,</span>
<span class="p_add">+		   unsigned long start,</span>
<span class="p_add">+		   unsigned long end,</span>
<span class="p_add">+		   hmm_pfn_t *pfns);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /* Below are for HMM internal use only ! Not to be use by device driver ! */
 void hmm_mm_destroy(struct mm_struct *mm);
 
<span class="p_header">diff --git a/mm/hmm.c b/mm/hmm.c</span>
<span class="p_header">index f2ea76b..521adfd 100644</span>
<span class="p_header">--- a/mm/hmm.c</span>
<span class="p_header">+++ b/mm/hmm.c</span>
<span class="p_chunk">@@ -461,6 +461,14 @@</span> <span class="p_context"> bool hmm_vma_range_monitor_end(struct hmm_range *range)</span>
 EXPORT_SYMBOL(hmm_vma_range_monitor_end);
 
 
<span class="p_add">+static void hmm_pfns_error(hmm_pfn_t *pfns,</span>
<span class="p_add">+			   unsigned long addr,</span>
<span class="p_add">+			   unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, pfns++)</span>
<span class="p_add">+		*pfns = HMM_PFN_ERROR;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void hmm_pfns_empty(hmm_pfn_t *pfns,
 			   unsigned long addr,
 			   unsigned long end)
<span class="p_chunk">@@ -477,10 +485,47 @@</span> <span class="p_context"> static void hmm_pfns_special(hmm_pfn_t *pfns,</span>
 		*pfns = HMM_PFN_SPECIAL;
 }
 
<span class="p_del">-static void hmm_vma_walk(struct vm_area_struct *vma,</span>
<span class="p_add">+static void hmm_pfns_clear(hmm_pfn_t *pfns,</span>
<span class="p_add">+			   unsigned long addr,</span>
<span class="p_add">+			   unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long npfns = (end - addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	memset(pfns, 0, sizeof(*pfns) * npfns);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static bool hmm_pfns_fault(hmm_pfn_t *pfns,</span>
<span class="p_add">+			   unsigned long addr,</span>
<span class="p_add">+			   unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, pfns++)</span>
<span class="p_add">+		if (*pfns &amp; HMM_PFN_FAULT)</span>
<span class="p_add">+			return true;</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static bool hmm_vma_do_fault(struct vm_area_struct *vma,</span>
<span class="p_add">+			     unsigned long addr,</span>
<span class="p_add">+			     hmm_pfn_t *pfn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_REMOTE;</span>
<span class="p_add">+	int r;</span>
<span class="p_add">+</span>
<span class="p_add">+	flags |= (*pfn &amp; HMM_PFN_WRITE) ? FAULT_FLAG_WRITE : 0;</span>
<span class="p_add">+	r = handle_mm_fault(vma, addr, flags);</span>
<span class="p_add">+	if (r &amp; VM_FAULT_RETRY)</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	if (r &amp; VM_FAULT_ERROR)</span>
<span class="p_add">+		*pfn = HMM_PFN_ERROR;</span>
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static bool hmm_vma_walk(struct vm_area_struct *vma,</span>
 			 unsigned long start,
 			 unsigned long end,
<span class="p_del">-			 hmm_pfn_t *pfns)</span>
<span class="p_add">+			 hmm_pfn_t *pfns,</span>
<span class="p_add">+			 bool fault)</span>
 {
 	unsigned long addr, next;
 	hmm_pfn_t flag;
<span class="p_chunk">@@ -489,6 +534,7 @@</span> <span class="p_context"> static void hmm_vma_walk(struct vm_area_struct *vma,</span>
 
 	for (addr = start; addr &lt; end; addr = next) {
 		unsigned long i = (addr - start) &gt;&gt; PAGE_SHIFT;
<span class="p_add">+		bool writefault = false;</span>
 		pgd_t *pgdp;
 		pud_t *pudp;
 		pmd_t *pmdp;
<span class="p_chunk">@@ -504,15 +550,37 @@</span> <span class="p_context"> static void hmm_vma_walk(struct vm_area_struct *vma,</span>
 		next = pgd_addr_end(addr, end);
 		pgdp = pgd_offset(vma-&gt;vm_mm, addr);
 		if (pgd_none(*pgdp) || pgd_bad(*pgdp)) {
<span class="p_del">-			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_del">-			continue;</span>
<span class="p_add">+			if (!(vma-&gt;vm_flags &amp; VM_READ)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!fault || !hmm_pfns_fault(&amp;pfns[i], addr, next)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			pudp = pud_alloc(vma-&gt;vm_mm, pgdp, addr);</span>
<span class="p_add">+			if (!pudp) {</span>
<span class="p_add">+				hmm_pfns_error(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
 		}
 
 		next = pud_addr_end(addr, end);
 		pudp = pud_offset(pgdp, addr);
 		if (pud_none(*pudp) || pud_bad(*pudp)) {
<span class="p_del">-			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_del">-			continue;</span>
<span class="p_add">+			if (!(vma-&gt;vm_flags &amp; VM_READ)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!fault || !hmm_pfns_fault(&amp;pfns[i], addr, next)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			pmdp = pmd_alloc(vma-&gt;vm_mm, pudp, addr);</span>
<span class="p_add">+			if (!pmdp) {</span>
<span class="p_add">+				hmm_pfns_error(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
 		}
 
 		next = pmd_addr_end(addr, end);
<span class="p_chunk">@@ -520,8 +588,23 @@</span> <span class="p_context"> static void hmm_vma_walk(struct vm_area_struct *vma,</span>
 		pmd = pmd_read_atomic(pmdp);
 		barrier();
 		if (pmd_none(pmd) || pmd_bad(pmd)) {
<span class="p_del">-			hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_del">-			continue;</span>
<span class="p_add">+			if (!(vma-&gt;vm_flags &amp; VM_READ)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			if (!fault || !hmm_pfns_fault(&amp;pfns[i], addr, next)) {</span>
<span class="p_add">+				hmm_pfns_empty(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Use pte_alloc() instead of pte_alloc_map, because we</span>
<span class="p_add">+			 * can&#39;t run pte_offset_map on the pmd, if an huge pmd</span>
<span class="p_add">+			 * could materialize from under us.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (unlikely(pte_alloc(vma-&gt;vm_mm, pmdp, addr))) {</span>
<span class="p_add">+				hmm_pfns_error(&amp;pfns[i], addr, next);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
 		}
 		if (pmd_trans_huge(pmd) || pmd_devmap(pmd)) {
 			unsigned long pfn = pmd_pfn(pmd) + pte_index(addr);
<span class="p_chunk">@@ -529,12 +612,33 @@</span> <span class="p_context"> static void hmm_vma_walk(struct vm_area_struct *vma,</span>
 
 			if (pmd_protnone(pmd)) {
 				hmm_pfns_clear(&amp;pfns[i], addr, next);
<span class="p_add">+				if (!fault || !(vma-&gt;vm_flags &amp; VM_READ))</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				if (!hmm_pfns_fault(&amp;pfns[i], addr, next))</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+</span>
<span class="p_add">+				if (!hmm_vma_do_fault(vma, addr, &amp;pfns[i]))</span>
<span class="p_add">+					return false;</span>
<span class="p_add">+				/* Start again for current address */</span>
<span class="p_add">+				next = addr;</span>
 				continue;
 			}
 			flags |= pmd_write(*pmdp) ? HMM_PFN_WRITE : 0;
 			flags |= pmd_devmap(pmd) ? HMM_PFN_DEVICE : 0;
<span class="p_del">-			for (; addr &lt; next; addr += PAGE_SIZE, i++, pfn++)</span>
<span class="p_add">+			for (; addr &lt; next; addr += PAGE_SIZE, i++, pfn++) {</span>
<span class="p_add">+				bool fault = pfns[i] &amp; HMM_PFN_FAULT;</span>
<span class="p_add">+				bool write = pfns[i] &amp; HMM_PFN_WRITE;</span>
<span class="p_add">+</span>
 				pfns[i] = hmm_pfn_from_pfn(pfn) | flags;
<span class="p_add">+				if (!fault || !write || flags &amp; HMM_PFN_WRITE)</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				pfns[i] = HMM_PFN_FAULT | HMM_PFN_WRITE;</span>
<span class="p_add">+				if (!hmm_vma_do_fault(vma, addr, &amp;pfns[i]))</span>
<span class="p_add">+					return false;</span>
<span class="p_add">+				/* Start again for current address */</span>
<span class="p_add">+				next = addr;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
 			continue;
 		}
 
<span class="p_chunk">@@ -543,41 +647,91 @@</span> <span class="p_context"> static void hmm_vma_walk(struct vm_area_struct *vma,</span>
 			swp_entry_t entry;
 			pte_t pte = *ptep;
 
<span class="p_del">-			pfns[i] = 0;</span>
<span class="p_del">-</span>
 			if (pte_none(pte)) {
<span class="p_del">-				pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_del">-				continue;</span>
<span class="p_add">+				if (!fault || !(pfns[i] &amp; HMM_PFN_FAULT)) {</span>
<span class="p_add">+					pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				if (!(vma-&gt;vm_flags &amp; VM_READ)) {</span>
<span class="p_add">+					pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				if (!hmm_vma_do_fault(vma, addr, &amp;pfns[i])) {</span>
<span class="p_add">+					hmm_pfns_clear(&amp;pfns[i], addr, end);</span>
<span class="p_add">+					pte_unmap(ptep);</span>
<span class="p_add">+					return false;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				pte = *ptep;</span>
 			}
 
 			entry = pte_to_swp_entry(pte);
 			if (!pte_present(pte) &amp;&amp; !non_swap_entry(entry)) {
<span class="p_del">-				continue;</span>
<span class="p_add">+				if (!fault || !(pfns[i] &amp; HMM_PFN_FAULT)) {</span>
<span class="p_add">+					pfns[i] = 0;</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				if (!(vma-&gt;vm_flags &amp; VM_READ)) {</span>
<span class="p_add">+					pfns[i] = 0;</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				if (!hmm_vma_do_fault(vma, addr, &amp;pfns[i])) {</span>
<span class="p_add">+					hmm_pfns_clear(&amp;pfns[i], addr, end);</span>
<span class="p_add">+					pte_unmap(ptep);</span>
<span class="p_add">+					return false;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				pte = *ptep;</span>
 			}
 
<span class="p_add">+			writefault = (pfns[i]&amp;(HMM_PFN_WRITE|HMM_PFN_FAULT)) ==</span>
<span class="p_add">+				     (HMM_PFN_WRITE|HMM_PFN_FAULT) &amp;&amp; fault;</span>
<span class="p_add">+</span>
 			if (pte_present(pte)) {
 				pfns[i] = hmm_pfn_from_pfn(pte_pfn(pte))|flag;
 				pfns[i] |= pte_write(pte) ? HMM_PFN_WRITE : 0;
<span class="p_del">-				continue;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * This is a special swap entry, ignore migration, use</span>
<span class="p_del">-			 * device and report anything else as error.</span>
<span class="p_del">-			*/</span>
<span class="p_del">-			if (is_device_entry(entry)) {</span>
<span class="p_add">+			} else if (is_device_entry(entry)) {</span>
<span class="p_add">+				/* Do not fault device entry */</span>
 				pfns[i] = hmm_pfn_from_pfn(swp_offset(entry));
 				if (is_write_device_entry(entry))
 					pfns[i] |= HMM_PFN_WRITE;
 				pfns[i] |= HMM_PFN_DEVICE;
 				pfns[i] |= HMM_PFN_UNADDRESSABLE;
 				pfns[i] |= flag;
<span class="p_del">-			} else if (!is_migration_entry(entry)) {</span>
<span class="p_add">+			} else if (is_migration_entry(entry) &amp;&amp; fault) {</span>
<span class="p_add">+				migration_entry_wait(vma-&gt;vm_mm, pmdp, addr);</span>
<span class="p_add">+				/* Start again for current address */</span>
<span class="p_add">+				next = addr;</span>
<span class="p_add">+				ptep++;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				/* Report error for everything else */</span>
 				pfns[i] = HMM_PFN_ERROR;
 			}
<span class="p_add">+			if (!(vma-&gt;vm_flags &amp; VM_READ) ||</span>
<span class="p_add">+			    !(vma-&gt;vm_flags &amp; VM_WRITE)) {</span>
<span class="p_add">+				writefault = false;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			if (writefault &amp;&amp; !(pfns[i] &amp; HMM_PFN_WRITE)) {</span>
<span class="p_add">+				ptep++;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			writefault = false;</span>
 		}
 		pte_unmap(ptep - 1);
<span class="p_add">+</span>
<span class="p_add">+		if (writefault &amp;&amp; (vma-&gt;vm_flags &amp; VM_WRITE)) {</span>
<span class="p_add">+			pfns[i] = HMM_PFN_WRITE | HMM_PFN_FAULT;</span>
<span class="p_add">+			if (!hmm_vma_do_fault(vma, addr, &amp;pfns[i])) {</span>
<span class="p_add">+				return false;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			writefault = false;</span>
<span class="p_add">+			/* Start again for current address */</span>
<span class="p_add">+			next = addr;</span>
<span class="p_add">+		}</span>
 	}
<span class="p_add">+</span>
<span class="p_add">+	return true;</span>
 }
 
 /*
<span class="p_chunk">@@ -613,7 +767,67 @@</span> <span class="p_context"> int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
 	if (end &lt; vma-&gt;vm_start || end &gt; vma-&gt;vm_end)
 		return -EINVAL;
 
<span class="p_del">-	hmm_vma_walk(vma, start, end, pfns);</span>
<span class="p_add">+	hmm_vma_walk(vma, start, end, pfns, false);</span>
 	return 0;
 }
 EXPORT_SYMBOL(hmm_vma_get_pfns);
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * hmm_vma_fault() - try to fault some address in a virtual address range</span>
<span class="p_add">+ * @vma: virtual memory area containing the virtual address range</span>
<span class="p_add">+ * @start: fault range virtual start address (inclusive)</span>
<span class="p_add">+ * @end: fault range virtual end address (exclusive)</span>
<span class="p_add">+ * @pfns: array of hmm_pfn_t, only entry with fault flag set will be faulted</span>
<span class="p_add">+ * Returns: true mmap_sem is still held, false mmap_sem have been release</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This is similar to a regular CPU page fault except that it will not trigger</span>
<span class="p_add">+ * any memory migration if the memory being faulted is not accessible by CPUs.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Only pfn with fault flag set will be faulted and the hmm_pfn_t write flag</span>
<span class="p_add">+ * will be use to determine if it is a write fault or not.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * On error, for one virtual address in the range, the function will set the</span>
<span class="p_add">+ * hmm_pfn_t error flag for the corresponding pfn entry.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Expected use pattern:</span>
<span class="p_add">+ *   retry:</span>
<span class="p_add">+ *      down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+ *      // Find vma and address device wants to fault, initialize hmm_pfn_t</span>
<span class="p_add">+ *      // array accordingly</span>
<span class="p_add">+ *      hmm_vma_range_monitor_start(range, vma, start, end);</span>
<span class="p_add">+ *      if (!hmm_vma_fault(vma, start, end, pfns, allow_retry)) {</span>
<span class="p_add">+ *          hmm_vma_range_monitor_end(range);</span>
<span class="p_add">+ *          // You might want to rate limit or yield to play nicely, you may</span>
<span class="p_add">+ *          // also commit any valid pfn in the array assuming that you are</span>
<span class="p_add">+ *          // getting true from hmm_vma_range_monitor_end()</span>
<span class="p_add">+ *          goto retry;</span>
<span class="p_add">+ *      }</span>
<span class="p_add">+ *      // Take device driver lock that serialize device page table update</span>
<span class="p_add">+ *      driver_lock_device_page_table_update();</span>
<span class="p_add">+ *      if (hmm_vma_range_monitor_end(range)) {</span>
<span class="p_add">+ *          // Commit pfns we got from hmm_vma_fault()</span>
<span class="p_add">+ *      }</span>
<span class="p_add">+ *      driver_unlock_device_page_table_update();</span>
<span class="p_add">+ *      up_read(&amp;mm-&gt;mmap_sem)</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool hmm_vma_fault(struct vm_area_struct *vma,</span>
<span class="p_add">+		   unsigned long start,</span>
<span class="p_add">+		   unsigned long end,</span>
<span class="p_add">+		   hmm_pfn_t *pfns)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* FIXME support hugetlb fs */</span>
<span class="p_add">+	if (is_vm_hugetlb_page(vma) || (vma-&gt;vm_flags &amp; VM_SPECIAL)) {</span>
<span class="p_add">+		hmm_pfns_special(pfns, start, end);</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Sanity check, this really should not happen ! */</span>
<span class="p_add">+	if (start &lt; vma-&gt;vm_start || start &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	if (end &lt; vma-&gt;vm_start || end &gt; vma-&gt;vm_end)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	return hmm_vma_walk(vma, start, end, pfns, true);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(hmm_vma_fault);</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



