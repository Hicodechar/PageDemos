
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,02/09] iommu/ipmmu-vmsa: Add optional root device feature - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,02/09] iommu/ipmmu-vmsa: Add optional root device feature</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 19, 2017, 9:14 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;149786364660.14868.13384595731879361399.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9795547/mbox/"
   >mbox</a>
|
   <a href="/patch/9795547/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9795547/">/patch/9795547/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BC73460381 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 09:18:03 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BA19227C05
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 09:18:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AEF1C283C0; Mon, 19 Jun 2017 09:18:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F3562283BD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 19 Jun 2017 09:18:02 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753899AbdFSJR5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 19 Jun 2017 05:17:57 -0400
Received: from mail-pf0-f194.google.com ([209.85.192.194]:33162 &quot;EHLO
	mail-pf0-f194.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753872AbdFSJRz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 19 Jun 2017 05:17:55 -0400
Received: by mail-pf0-f194.google.com with SMTP id w12so15534921pfk.0;
	Mon, 19 Jun 2017 02:17:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=kEMsbl9YLsAGynMbBBfxDbSEy8tCaOfj87bY0iRAC6o=;
	b=SRQ/1WN6Zja3oG7EiVp9BNOwi2q4nckgFDzLA0YcFbif0VDKlsxLVvRTMXCe4Jn5n+
	0V+x6r4ufeSTBo/Q5dtQzu4LrybR9wpLq9xYhx+ZLB+WoFmXfnCHO9j6sJYbxmGbwTCP
	bU3isAtISIc4bizq6eCd4juHdqwNAX3dM45vbnOy67nU+5cshiVToV8clDKgzsO3e8nP
	izD7gXDxdO80eT1QUMGUM0VF8FCdMFP0Rf4BrqryKIE0MnwgU6FMuxkg4FFT25HNjkob
	wLV9S7c/0TQwZ89xjW25jZsZ6yqWDWhHgdG22ZfXZWrMyMoHtEBavkkHyrkwxu3zHC1J
	+9XQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=kEMsbl9YLsAGynMbBBfxDbSEy8tCaOfj87bY0iRAC6o=;
	b=pqJCB2blK20UBsc9BhxVrhArdtxBDaRK/ELA/mwPcD0+t1XQpdzWMKXoVa4MOuhuV3
	KCCN9gwbTHFTrWuqr/NNq+PaMk0vZjwqthuPQUooMX4e5Vk/q7486WKMAuNVf9eAqg8c
	P5uFH1yi7/NjUDG+MvNJuU8JGtc0R8lY7CAiN989zWJ3APBkH2lR63iFQME1HMXlmxYM
	SE6HodGLHVz/BajxAQAbaMwJutE8tAN5tlNZMw7cxjcUb/o1SWHbOB6PtEeECcWKOoC/
	EN7mfGahUZw5ItCj5RvH+2Pe+dOcGcAgjsj/SXNNHvKCTqBTBCqOCj6s93qYYiHZHaN4
	XqEA==
X-Gm-Message-State: AKS2vOwHuBnakTRgjh0XcRU1euTVxNxJeH795QMrc9HCV+0N8O1BZa/E
	zRUCrsKXgd6BjA==
X-Received: by 10.84.224.71 with SMTP id a7mr15324695plt.67.1497863873954;
	Mon, 19 Jun 2017 02:17:53 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	i14sm19645379pgn.14.2017.06.19.02.17.50
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 19 Jun 2017 02:17:52 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: joro@8bytes.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	linux-kernel@vger.kernel.org, linux-renesas-soc@vger.kernel.org,
	iommu@lists.linux-foundation.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;, robin.murphy@arm.com,
	m.szyprowski@samsung.com
Date: Mon, 19 Jun 2017 18:14:06 +0900
Message-Id: &lt;149786364660.14868.13384595731879361399.sendpatchset@little-apple&gt;
In-Reply-To: &lt;149786362527.14868.2143461703972595839.sendpatchset@little-apple&gt;
References: &lt;149786362527.14868.2143461703972595839.sendpatchset@little-apple&gt;
Subject: [PATCH v4 02/09] iommu/ipmmu-vmsa: Add optional root device feature
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - June 19, 2017, 9:14 a.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Add root device handling to the IPMMU driver by allowing certain
DT compat strings to enable has_cache_leaf_nodes that in turn will
support both root devices with interrupts and leaf devices that
face the actual IPMMU consumer devices.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
---

 Changes since V3:
 - Reworked root finding code to make it easier to follow, thanks Geert!
 
 Changes since V2:
 - Fixed a bug in ipmmu_find_root() when only leaf devices are present
 - Broke out __ipmmu_find_root() to allow -&gt;xlate() check for root devices

 Changes since V1:
 - Moved patch to earlier in the series
 - Updated code to work with recent changes in:
   [PATCH v3 00/06] iommu/ipmmu-vmsa: IPMMU multi-arch update V3

 drivers/iommu/ipmmu-vmsa.c |   95 ++++++++++++++++++++++++++++++++++++--------
 1 file changed, 78 insertions(+), 17 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - June 19, 2017, 5:19 p.m.</div>
<pre class="content">
On 19/06/17 10:14, Magnus Damm wrote:
<span class="quote">&gt; From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add root device handling to the IPMMU driver by allowing certain</span>
<span class="quote">&gt; DT compat strings to enable has_cache_leaf_nodes that in turn will</span>
<span class="quote">&gt; support both root devices with interrupts and leaf devices that</span>
<span class="quote">&gt; face the actual IPMMU consumer devices.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V3:</span>
<span class="quote">&gt;  - Reworked root finding code to make it easier to follow, thanks Geert!</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  Changes since V2:</span>
<span class="quote">&gt;  - Fixed a bug in ipmmu_find_root() when only leaf devices are present</span>
<span class="quote">&gt;  - Broke out __ipmmu_find_root() to allow -&gt;xlate() check for root devices</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V1:</span>
<span class="quote">&gt;  - Moved patch to earlier in the series</span>
<span class="quote">&gt;  - Updated code to work with recent changes in:</span>
<span class="quote">&gt;    [PATCH v3 00/06] iommu/ipmmu-vmsa: IPMMU multi-arch update V3</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  drivers/iommu/ipmmu-vmsa.c |   95 ++++++++++++++++++++++++++++++++++++--------</span>
<span class="quote">&gt;  1 file changed, 78 insertions(+), 17 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- 0015/drivers/iommu/ipmmu-vmsa.c</span>
<span class="quote">&gt; +++ work/drivers/iommu/ipmmu-vmsa.c	2017-06-19 13:59:41.050607110 +0900</span>
<span class="quote">&gt; @@ -36,6 +36,7 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  struct ipmmu_features {</span>
<span class="quote">&gt;  	bool use_ns_alias_offset;</span>
<span class="quote">&gt; +	bool has_cache_leaf_nodes;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  struct ipmmu_vmsa_device {</span>
<span class="quote">&gt; @@ -44,6 +45,7 @@ struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;  	struct iommu_device iommu;</span>
<span class="quote">&gt;  	struct list_head list;</span>
<span class="quote">&gt;  	const struct ipmmu_features *features;</span>
<span class="quote">&gt; +	bool is_leaf;</span>
<span class="quote">&gt;  	unsigned int num_utlbs;</span>
<span class="quote">&gt;  	spinlock_t lock;			/* Protects ctx and domains[] */</span>
<span class="quote">&gt;  	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);</span>
<span class="quote">&gt; @@ -54,6 +56,7 @@ struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  struct ipmmu_vmsa_domain {</span>
<span class="quote">&gt;  	struct ipmmu_vmsa_device *mmu;</span>
<span class="quote">&gt; +	struct ipmmu_vmsa_device *root;</span>

Would it not make more sense for this to be a property of the
ipmmu_device itself, rather than per ipmmu_domain? I may of course have
got the wrong idea of the topology here, but it seems as if mmu-&gt;is_leaf
could be expressed as mmu-&gt;root == mmu vs. mmu-&gt;root == some_other_mmu,
at which point there&#39;s one less thing to worry about in the domain.
<span class="quote">
&gt;  	struct iommu_domain io_domain;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	struct io_pgtable_cfg cfg;</span>
<span class="quote">&gt; @@ -203,6 +206,44 @@ static struct ipmmu_vmsa_iommu_priv *to_</span>
<span class="quote">&gt;  #define IMUASID_ASID0_SHIFT		0</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt; + * Root device handling</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static bool ipmmu_is_root(struct ipmmu_vmsa_device *mmu)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (mmu-&gt;features-&gt;has_cache_leaf_nodes)</span>
<span class="quote">&gt; +		return mmu-&gt;is_leaf ? false : true&gt; +	else</span>
<span class="quote">&gt; +		return true; /* older IPMMU hardware treated as single root */</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static struct ipmmu_vmsa_device *__ipmmu_find_root(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct ipmmu_vmsa_device *mmu;</span>
<span class="quote">&gt; +	struct ipmmu_vmsa_device *root = NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_lock(&amp;ipmmu_devices_lock);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	list_for_each_entry(mmu, &amp;ipmmu_devices, list) {</span>
<span class="quote">&gt; +		if (ipmmu_is_root(mmu)) {</span>
<span class="quote">&gt; +			root = mmu;</span>
<span class="quote">&gt; +			break;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_unlock(&amp;ipmmu_devices_lock);</span>
<span class="quote">&gt; +	return root;</span>
<span class="quote">&gt; +}</span>

I wonder if it might be tidier to use driver_for_each_device() for this,
and remove the local list at the same time as its previous user.

Either way, what happens if things end up hapening in this order:

1: probe leaf IPMMU B
2: probe device X behind IPMMU B
3: create and attach default domain for device X
4: probe root IPMMU A

We know X will defer if B isn&#39;t ready, but it doesn&#39;t seem (at a glance,
admittedly) that there&#39;s anything to enforce the expected probe ordering
between A and B. This seems like another argument for moving the
root/leaf association up to the device level, such that B can look up A
once in its own probe routine, and defer itself if necessary.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +static struct ipmmu_vmsa_device *ipmmu_find_root(struct ipmmu_vmsa_device *leaf)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (ipmmu_is_root(leaf))</span>
<span class="quote">&gt; +		return leaf;</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		return __ipmmu_find_root();</span>

Well actually, looking at that, I think what we have here is a very
long-winded way of implementing this:

static ipmmu_vmsa_device *root;

Yuck.
<span class="quote">
&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/* -----------------------------------------------------------------------------</span>
<span class="quote">&gt;   * Read/Write Access</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -219,13 +260,13 @@ static void ipmmu_write(struct ipmmu_vms</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static u32 ipmmu_ctx_read(struct ipmmu_vmsa_domain *domain, unsigned int reg)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return ipmmu_read(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="quote">&gt; +	return ipmmu_read(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void ipmmu_ctx_write(struct ipmmu_vmsa_domain *domain, unsigned int reg,</span>
<span class="quote">&gt;  			    u32 data)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	ipmmu_write(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="quote">&gt; +	ipmmu_write(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt; @@ -360,7 +401,7 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;  	 * TODO: Add support for coherent walk through CCI with DVM and remove</span>
<span class="quote">&gt;  	 * cache handling. For now, delegate it to the io-pgtable code.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;dev;</span>
<span class="quote">&gt; +	domain-&gt;cfg.iommu_dev = domain-&gt;root-&gt;dev;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	domain-&gt;iop = alloc_io_pgtable_ops(ARM_32_LPAE_S1, &amp;domain-&gt;cfg,</span>
<span class="quote">&gt;  					   domain);</span>
<span class="quote">&gt; @@ -370,7 +411,7 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Find an unused context.</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="quote">&gt; +	ret = ipmmu_domain_allocate_context(domain-&gt;root, domain);</span>
<span class="quote">&gt;  	if (ret == IPMMU_CTX_MAX) {</span>
<span class="quote">&gt;  		free_io_pgtable_ops(domain-&gt;iop);</span>
<span class="quote">&gt;  		return -EBUSY;</span>
<span class="quote">&gt; @@ -441,7 +482,7 @@ static void ipmmu_domain_destroy_context</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);</span>
<span class="quote">&gt;  	ipmmu_tlb_sync(domain);</span>
<span class="quote">&gt; -	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="quote">&gt; +	ipmmu_domain_free_context(domain-&gt;root, domain-&gt;context_id);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt; @@ -555,7 +596,7 @@ static int ipmmu_attach_device(struct io</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
<span class="quote">&gt;  	struct iommu_fwspec *fwspec = dev-&gt;iommu_fwspec;</span>
<span class="quote">&gt; -	struct ipmmu_vmsa_device *mmu = priv-&gt;mmu;</span>
<span class="quote">&gt; +	struct ipmmu_vmsa_device *root, *mmu = priv-&gt;mmu;</span>
<span class="quote">&gt;  	struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);</span>
<span class="quote">&gt;  	unsigned long flags;</span>
<span class="quote">&gt;  	unsigned int i;</span>
<span class="quote">&gt; @@ -566,11 +607,18 @@ static int ipmmu_attach_device(struct io</span>
<span class="quote">&gt;  		return -ENXIO;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	root = ipmmu_find_root(priv-&gt;mmu);</span>
<span class="quote">&gt; +	if (!root) {</span>
<span class="quote">&gt; +		dev_err(dev, &quot;Unable to locate root IPMMU\n&quot;);</span>
<span class="quote">&gt; +		return -EAGAIN;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	spin_lock_irqsave(&amp;domain-&gt;lock, flags);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!domain-&gt;mmu) {</span>
<span class="quote">&gt;  		/* The domain hasn&#39;t been used yet, initialize it. */</span>
<span class="quote">&gt;  		domain-&gt;mmu = mmu;</span>
<span class="quote">&gt; +		domain-&gt;root = root;</span>
<span class="quote">&gt;  		ret = ipmmu_domain_init_context(domain);</span>
<span class="quote">&gt;  	} else if (domain-&gt;mmu != mmu) {</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt; @@ -911,6 +959,7 @@ static void ipmmu_device_reset(struct ip</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static const struct ipmmu_features ipmmu_features_default = {</span>
<span class="quote">&gt;  	.use_ns_alias_offset = true,</span>
<span class="quote">&gt; +	.has_cache_leaf_nodes = false,</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static const struct of_device_id ipmmu_of_ids[] = {</span>
<span class="quote">&gt; @@ -965,19 +1014,31 @@ static int ipmmu_probe(struct platform_d</span>
<span class="quote">&gt;  		mmu-&gt;base += IM_NS_ALIAS_OFFSET;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	irq = platform_get_irq(pdev, 0);</span>
<span class="quote">&gt; -	if (irq &lt; 0) {</span>
<span class="quote">&gt; -		dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="quote">&gt; -		return irq;</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="quote">&gt; -			       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="quote">&gt; -	if (ret &lt; 0) {</span>
<span class="quote">&gt; -		dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="quote">&gt; -		return ret;</span>
<span class="quote">&gt; -	}</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Determine if this IPMMU instance is a leaf device by checking</span>
<span class="quote">&gt; +	 * if the renesas,ipmmu-main property exists or not.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (mmu-&gt;features-&gt;has_cache_leaf_nodes &amp;&amp;</span>
<span class="quote">&gt; +	    of_find_property(pdev-&gt;dev.of_node, &quot;renesas,ipmmu-main&quot;, NULL))</span>
<span class="quote">&gt; +		mmu-&gt;is_leaf = true;</span>

Given my previous comments:

	if (mmu-&gt;features-&gt;has_cache_leaf_nodes) {
		root_np = of_parse_phandle(pdev-&gt;dev.of_node,
					&quot;renesas,ipmmu-main&quot;, 0)
		if (root_np) {
			root_pdev = of_find_device_by_phandle(root_np);
			mmu-&gt;root = platform_get_drvdata(root_pdev);
		} else {
			mmu-&gt;root = mmu;
		}
	}

or something along those lines?

Robin.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	/* Root devices have mandatory IRQs */</span>
<span class="quote">&gt; +	if (ipmmu_is_root(mmu)) {</span>
<span class="quote">&gt; +		if (irq &lt; 0) {</span>
<span class="quote">&gt; +			dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="quote">&gt; +			return irq;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	ipmmu_device_reset(mmu);</span>
<span class="quote">&gt; +		ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="quote">&gt; +				       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="quote">&gt; +		if (ret &lt; 0) {</span>
<span class="quote">&gt; +			dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="quote">&gt; +			return ret;</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ipmmu_device_reset(mmu);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	ret = iommu_device_register(&amp;mmu-&gt;iommu);</span>
<span class="quote">&gt;  	if (ret)</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - Oct. 16, 2017, 12:47 p.m.</div>
<pre class="content">
Hi Robin,

On Tue, Jun 20, 2017 at 2:19 AM, Robin Murphy &lt;robin.murphy@arm.com&gt; wrote:
<span class="quote">&gt; On 19/06/17 10:14, Magnus Damm wrote:</span>
<span class="quote">&gt;&gt; From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Add root device handling to the IPMMU driver by allowing certain</span>
<span class="quote">&gt;&gt; DT compat strings to enable has_cache_leaf_nodes that in turn will</span>
<span class="quote">&gt;&gt; support both root devices with interrupts and leaf devices that</span>
<span class="quote">&gt;&gt; face the actual IPMMU consumer devices.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  Changes since V3:</span>
<span class="quote">&gt;&gt;  - Reworked root finding code to make it easier to follow, thanks Geert!</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  Changes since V2:</span>
<span class="quote">&gt;&gt;  - Fixed a bug in ipmmu_find_root() when only leaf devices are present</span>
<span class="quote">&gt;&gt;  - Broke out __ipmmu_find_root() to allow -&gt;xlate() check for root devices</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  Changes since V1:</span>
<span class="quote">&gt;&gt;  - Moved patch to earlier in the series</span>
<span class="quote">&gt;&gt;  - Updated code to work with recent changes in:</span>
<span class="quote">&gt;&gt;    [PATCH v3 00/06] iommu/ipmmu-vmsa: IPMMU multi-arch update V3</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  drivers/iommu/ipmmu-vmsa.c |   95 ++++++++++++++++++++++++++++++++++++--------</span>
<span class="quote">&gt;&gt;  1 file changed, 78 insertions(+), 17 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; --- 0015/drivers/iommu/ipmmu-vmsa.c</span>
<span class="quote">&gt;&gt; +++ work/drivers/iommu/ipmmu-vmsa.c   2017-06-19 13:59:41.050607110 +0900</span>
<span class="quote">&gt;&gt; @@ -36,6 +36,7 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  struct ipmmu_features {</span>
<span class="quote">&gt;&gt;       bool use_ns_alias_offset;</span>
<span class="quote">&gt;&gt; +     bool has_cache_leaf_nodes;</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;&gt; @@ -44,6 +45,7 @@ struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;&gt;       struct iommu_device iommu;</span>
<span class="quote">&gt;&gt;       struct list_head list;</span>
<span class="quote">&gt;&gt;       const struct ipmmu_features *features;</span>
<span class="quote">&gt;&gt; +     bool is_leaf;</span>
<span class="quote">&gt;&gt;       unsigned int num_utlbs;</span>
<span class="quote">&gt;&gt;       spinlock_t lock;                        /* Protects ctx and domains[] */</span>
<span class="quote">&gt;&gt;       DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);</span>
<span class="quote">&gt;&gt; @@ -54,6 +56,7 @@ struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  struct ipmmu_vmsa_domain {</span>
<span class="quote">&gt;&gt;       struct ipmmu_vmsa_device *mmu;</span>
<span class="quote">&gt;&gt; +     struct ipmmu_vmsa_device *root;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Would it not make more sense for this to be a property of the</span>
<span class="quote">&gt; ipmmu_device itself, rather than per ipmmu_domain? I may of course have</span>
<span class="quote">&gt; got the wrong idea of the topology here, but it seems as if mmu-&gt;is_leaf</span>
<span class="quote">&gt; could be expressed as mmu-&gt;root == mmu vs. mmu-&gt;root == some_other_mmu,</span>
<span class="quote">&gt; at which point there&#39;s one less thing to worry about in the domain.</span>

Yes, you are right! Please have a look at patch 2 in V5 that is doing that.
<span class="quote">
&gt;&gt;       struct iommu_domain io_domain;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       struct io_pgtable_cfg cfg;</span>
<span class="quote">&gt;&gt; @@ -203,6 +206,44 @@ static struct ipmmu_vmsa_iommu_priv *to_</span>
<span class="quote">&gt;&gt;  #define IMUASID_ASID0_SHIFT          0</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt; + * Root device handling</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static bool ipmmu_is_root(struct ipmmu_vmsa_device *mmu)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     if (mmu-&gt;features-&gt;has_cache_leaf_nodes)</span>
<span class="quote">&gt;&gt; +             return mmu-&gt;is_leaf ? false : true&gt; +   else</span>
<span class="quote">&gt;&gt; +             return true; /* older IPMMU hardware treated as single root */</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static struct ipmmu_vmsa_device *__ipmmu_find_root(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     struct ipmmu_vmsa_device *mmu;</span>
<span class="quote">&gt;&gt; +     struct ipmmu_vmsa_device *root = NULL;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     spin_lock(&amp;ipmmu_devices_lock);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     list_for_each_entry(mmu, &amp;ipmmu_devices, list) {</span>
<span class="quote">&gt;&gt; +             if (ipmmu_is_root(mmu)) {</span>
<span class="quote">&gt;&gt; +                     root = mmu;</span>
<span class="quote">&gt;&gt; +                     break;</span>
<span class="quote">&gt;&gt; +             }</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +     spin_unlock(&amp;ipmmu_devices_lock);</span>
<span class="quote">&gt;&gt; +     return root;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I wonder if it might be tidier to use driver_for_each_device() for this,</span>
<span class="quote">&gt; and remove the local list at the same time as its previous user.</span>

Yep, also included in V5.
<span class="quote">
&gt; Either way, what happens if things end up hapening in this order:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 1: probe leaf IPMMU B</span>
<span class="quote">&gt; 2: probe device X behind IPMMU B</span>
<span class="quote">&gt; 3: create and attach default domain for device X</span>
<span class="quote">&gt; 4: probe root IPMMU A</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We know X will defer if B isn&#39;t ready, but it doesn&#39;t seem (at a glance,</span>
<span class="quote">&gt; admittedly) that there&#39;s anything to enforce the expected probe ordering</span>
<span class="quote">&gt; between A and B. This seems like another argument for moving the</span>
<span class="quote">&gt; root/leaf association up to the device level, such that B can look up A</span>
<span class="quote">&gt; once in its own probe routine, and defer itself if necessary.</span>

There used to be code to check for presence of root device inside
xlate() in &quot;[PATCH v4 09/09] iommu/ipmmu-vmsa: Hook up r8a7795 DT
matching code&quot; however in V5 I&#39;m deferring probe of non-root devices
to handle this.
<span class="quote">
&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static struct ipmmu_vmsa_device *ipmmu_find_root(struct ipmmu_vmsa_device *leaf)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +     if (ipmmu_is_root(leaf))</span>
<span class="quote">&gt;&gt; +             return leaf;</span>
<span class="quote">&gt;&gt; +     else</span>
<span class="quote">&gt;&gt; +             return __ipmmu_find_root();</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Well actually, looking at that, I think what we have here is a very</span>
<span class="quote">&gt; long-winded way of implementing this:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; static ipmmu_vmsa_device *root;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Yuck.</span>

The code has been reworked a bit in V5 but I did not go all the way to
single global variable.
<span class="quote">
&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +/* -----------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt;   * Read/Write Access</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -219,13 +260,13 @@ static void ipmmu_write(struct ipmmu_vms</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static u32 ipmmu_ctx_read(struct ipmmu_vmsa_domain *domain, unsigned int reg)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     return ipmmu_read(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="quote">&gt;&gt; +     return ipmmu_read(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static void ipmmu_ctx_write(struct ipmmu_vmsa_domain *domain, unsigned int reg,</span>
<span class="quote">&gt;&gt;                           u32 data)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -     ipmmu_write(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="quote">&gt;&gt; +     ipmmu_write(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt; @@ -360,7 +401,7 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;&gt;        * TODO: Add support for coherent walk through CCI with DVM and remove</span>
<span class="quote">&gt;&gt;        * cache handling. For now, delegate it to the io-pgtable code.</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt; -     domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;dev;</span>
<span class="quote">&gt;&gt; +     domain-&gt;cfg.iommu_dev = domain-&gt;root-&gt;dev;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       domain-&gt;iop = alloc_io_pgtable_ops(ARM_32_LPAE_S1, &amp;domain-&gt;cfg,</span>
<span class="quote">&gt;&gt;                                          domain);</span>
<span class="quote">&gt;&gt; @@ -370,7 +411,7 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;&gt;       /*</span>
<span class="quote">&gt;&gt;        * Find an unused context.</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt; -     ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="quote">&gt;&gt; +     ret = ipmmu_domain_allocate_context(domain-&gt;root, domain);</span>
<span class="quote">&gt;&gt;       if (ret == IPMMU_CTX_MAX) {</span>
<span class="quote">&gt;&gt;               free_io_pgtable_ops(domain-&gt;iop);</span>
<span class="quote">&gt;&gt;               return -EBUSY;</span>
<span class="quote">&gt;&gt; @@ -441,7 +482,7 @@ static void ipmmu_domain_destroy_context</span>
<span class="quote">&gt;&gt;        */</span>
<span class="quote">&gt;&gt;       ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);</span>
<span class="quote">&gt;&gt;       ipmmu_tlb_sync(domain);</span>
<span class="quote">&gt;&gt; -     ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="quote">&gt;&gt; +     ipmmu_domain_free_context(domain-&gt;root, domain-&gt;context_id);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* -----------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt; @@ -555,7 +596,7 @@ static int ipmmu_attach_device(struct io</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;       struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);</span>
<span class="quote">&gt;&gt;       struct iommu_fwspec *fwspec = dev-&gt;iommu_fwspec;</span>
<span class="quote">&gt;&gt; -     struct ipmmu_vmsa_device *mmu = priv-&gt;mmu;</span>
<span class="quote">&gt;&gt; +     struct ipmmu_vmsa_device *root, *mmu = priv-&gt;mmu;</span>
<span class="quote">&gt;&gt;       struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);</span>
<span class="quote">&gt;&gt;       unsigned long flags;</span>
<span class="quote">&gt;&gt;       unsigned int i;</span>
<span class="quote">&gt;&gt; @@ -566,11 +607,18 @@ static int ipmmu_attach_device(struct io</span>
<span class="quote">&gt;&gt;               return -ENXIO;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +     root = ipmmu_find_root(priv-&gt;mmu);</span>
<span class="quote">&gt;&gt; +     if (!root) {</span>
<span class="quote">&gt;&gt; +             dev_err(dev, &quot;Unable to locate root IPMMU\n&quot;);</span>
<span class="quote">&gt;&gt; +             return -EAGAIN;</span>
<span class="quote">&gt;&gt; +     }</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;       spin_lock_irqsave(&amp;domain-&gt;lock, flags);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       if (!domain-&gt;mmu) {</span>
<span class="quote">&gt;&gt;               /* The domain hasn&#39;t been used yet, initialize it. */</span>
<span class="quote">&gt;&gt;               domain-&gt;mmu = mmu;</span>
<span class="quote">&gt;&gt; +             domain-&gt;root = root;</span>
<span class="quote">&gt;&gt;               ret = ipmmu_domain_init_context(domain);</span>
<span class="quote">&gt;&gt;       } else if (domain-&gt;mmu != mmu) {</span>
<span class="quote">&gt;&gt;               /*</span>
<span class="quote">&gt;&gt; @@ -911,6 +959,7 @@ static void ipmmu_device_reset(struct ip</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static const struct ipmmu_features ipmmu_features_default = {</span>
<span class="quote">&gt;&gt;       .use_ns_alias_offset = true,</span>
<span class="quote">&gt;&gt; +     .has_cache_leaf_nodes = false,</span>
<span class="quote">&gt;&gt;  };</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static const struct of_device_id ipmmu_of_ids[] = {</span>
<span class="quote">&gt;&gt; @@ -965,19 +1014,31 @@ static int ipmmu_probe(struct platform_d</span>
<span class="quote">&gt;&gt;               mmu-&gt;base += IM_NS_ALIAS_OFFSET;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;       irq = platform_get_irq(pdev, 0);</span>
<span class="quote">&gt;&gt; -     if (irq &lt; 0) {</span>
<span class="quote">&gt;&gt; -             dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="quote">&gt;&gt; -             return irq;</span>
<span class="quote">&gt;&gt; -     }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="quote">&gt;&gt; -                            dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="quote">&gt;&gt; -     if (ret &lt; 0) {</span>
<span class="quote">&gt;&gt; -             dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="quote">&gt;&gt; -             return ret;</span>
<span class="quote">&gt;&gt; -     }</span>
<span class="quote">&gt;&gt; +     /*</span>
<span class="quote">&gt;&gt; +      * Determine if this IPMMU instance is a leaf device by checking</span>
<span class="quote">&gt;&gt; +      * if the renesas,ipmmu-main property exists or not.</span>
<span class="quote">&gt;&gt; +      */</span>
<span class="quote">&gt;&gt; +     if (mmu-&gt;features-&gt;has_cache_leaf_nodes &amp;&amp;</span>
<span class="quote">&gt;&gt; +         of_find_property(pdev-&gt;dev.of_node, &quot;renesas,ipmmu-main&quot;, NULL))</span>
<span class="quote">&gt;&gt; +             mmu-&gt;is_leaf = true;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Given my previous comments:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (mmu-&gt;features-&gt;has_cache_leaf_nodes) {</span>
<span class="quote">&gt;                 root_np = of_parse_phandle(pdev-&gt;dev.of_node,</span>
<span class="quote">&gt;                                         &quot;renesas,ipmmu-main&quot;, 0)</span>
<span class="quote">&gt;                 if (root_np) {</span>
<span class="quote">&gt;                         root_pdev = of_find_device_by_phandle(root_np);</span>
<span class="quote">&gt;                         mmu-&gt;root = platform_get_drvdata(root_pdev);</span>
<span class="quote">&gt;                 } else {</span>
<span class="quote">&gt;                         mmu-&gt;root = mmu;</span>
<span class="quote">&gt;                 }</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; or something along those lines?</span>

When ditching the is_leaf variable and using deferred probing I
reworked to code above. Getting the phandle like you are pointing out
above looks promising. I also need to have a look at your series
&quot;[PATCH 0/4] ipmmu-vmsa cleanup&quot;, hopefully I can find some time next
week in between talks at ELC. Hope to see you there!

Cheers,

/ magnus
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0015/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2017-06-19 13:59:41.050607110 +0900</span>
<span class="p_chunk">@@ -36,6 +36,7 @@</span> <span class="p_context"></span>
 
 struct ipmmu_features {
 	bool use_ns_alias_offset;
<span class="p_add">+	bool has_cache_leaf_nodes;</span>
 };
 
 struct ipmmu_vmsa_device {
<span class="p_chunk">@@ -44,6 +45,7 @@</span> <span class="p_context"> struct ipmmu_vmsa_device {</span>
 	struct iommu_device iommu;
 	struct list_head list;
 	const struct ipmmu_features *features;
<span class="p_add">+	bool is_leaf;</span>
 	unsigned int num_utlbs;
 	spinlock_t lock;			/* Protects ctx and domains[] */
 	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);
<span class="p_chunk">@@ -54,6 +56,7 @@</span> <span class="p_context"> struct ipmmu_vmsa_device {</span>
 
 struct ipmmu_vmsa_domain {
 	struct ipmmu_vmsa_device *mmu;
<span class="p_add">+	struct ipmmu_vmsa_device *root;</span>
 	struct iommu_domain io_domain;
 
 	struct io_pgtable_cfg cfg;
<span class="p_chunk">@@ -203,6 +206,44 @@</span> <span class="p_context"> static struct ipmmu_vmsa_iommu_priv *to_</span>
 #define IMUASID_ASID0_SHIFT		0
 
 /* -----------------------------------------------------------------------------
<span class="p_add">+ * Root device handling</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static bool ipmmu_is_root(struct ipmmu_vmsa_device *mmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (mmu-&gt;features-&gt;has_cache_leaf_nodes)</span>
<span class="p_add">+		return mmu-&gt;is_leaf ? false : true;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		return true; /* older IPMMU hardware treated as single root */</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct ipmmu_vmsa_device *__ipmmu_find_root(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct ipmmu_vmsa_device *mmu;</span>
<span class="p_add">+	struct ipmmu_vmsa_device *root = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;ipmmu_devices_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each_entry(mmu, &amp;ipmmu_devices, list) {</span>
<span class="p_add">+		if (ipmmu_is_root(mmu)) {</span>
<span class="p_add">+			root = mmu;</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock(&amp;ipmmu_devices_lock);</span>
<span class="p_add">+	return root;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct ipmmu_vmsa_device *ipmmu_find_root(struct ipmmu_vmsa_device *leaf)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (ipmmu_is_root(leaf))</span>
<span class="p_add">+		return leaf;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		return __ipmmu_find_root();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* -----------------------------------------------------------------------------</span>
  * Read/Write Access
  */
 
<span class="p_chunk">@@ -219,13 +260,13 @@</span> <span class="p_context"> static void ipmmu_write(struct ipmmu_vms</span>
 
 static u32 ipmmu_ctx_read(struct ipmmu_vmsa_domain *domain, unsigned int reg)
 {
<span class="p_del">-	return ipmmu_read(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="p_add">+	return ipmmu_read(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
 }
 
 static void ipmmu_ctx_write(struct ipmmu_vmsa_domain *domain, unsigned int reg,
 			    u32 data)
 {
<span class="p_del">-	ipmmu_write(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="p_add">+	ipmmu_write(domain-&gt;root, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -360,7 +401,7 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	 * TODO: Add support for coherent walk through CCI with DVM and remove
 	 * cache handling. For now, delegate it to the io-pgtable code.
 	 */
<span class="p_del">-	domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;dev;</span>
<span class="p_add">+	domain-&gt;cfg.iommu_dev = domain-&gt;root-&gt;dev;</span>
 
 	domain-&gt;iop = alloc_io_pgtable_ops(ARM_32_LPAE_S1, &amp;domain-&gt;cfg,
 					   domain);
<span class="p_chunk">@@ -370,7 +411,7 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	/*
 	 * Find an unused context.
 	 */
<span class="p_del">-	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="p_add">+	ret = ipmmu_domain_allocate_context(domain-&gt;root, domain);</span>
 	if (ret == IPMMU_CTX_MAX) {
 		free_io_pgtable_ops(domain-&gt;iop);
 		return -EBUSY;
<span class="p_chunk">@@ -441,7 +482,7 @@</span> <span class="p_context"> static void ipmmu_domain_destroy_context</span>
 	 */
 	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);
 	ipmmu_tlb_sync(domain);
<span class="p_del">-	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="p_add">+	ipmmu_domain_free_context(domain-&gt;root, domain-&gt;context_id);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -555,7 +596,7 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 {
 	struct ipmmu_vmsa_iommu_priv *priv = to_priv(dev);
 	struct iommu_fwspec *fwspec = dev-&gt;iommu_fwspec;
<span class="p_del">-	struct ipmmu_vmsa_device *mmu = priv-&gt;mmu;</span>
<span class="p_add">+	struct ipmmu_vmsa_device *root, *mmu = priv-&gt;mmu;</span>
 	struct ipmmu_vmsa_domain *domain = to_vmsa_domain(io_domain);
 	unsigned long flags;
 	unsigned int i;
<span class="p_chunk">@@ -566,11 +607,18 @@</span> <span class="p_context"> static int ipmmu_attach_device(struct io</span>
 		return -ENXIO;
 	}
 
<span class="p_add">+	root = ipmmu_find_root(priv-&gt;mmu);</span>
<span class="p_add">+	if (!root) {</span>
<span class="p_add">+		dev_err(dev, &quot;Unable to locate root IPMMU\n&quot;);</span>
<span class="p_add">+		return -EAGAIN;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	spin_lock_irqsave(&amp;domain-&gt;lock, flags);
 
 	if (!domain-&gt;mmu) {
 		/* The domain hasn&#39;t been used yet, initialize it. */
 		domain-&gt;mmu = mmu;
<span class="p_add">+		domain-&gt;root = root;</span>
 		ret = ipmmu_domain_init_context(domain);
 	} else if (domain-&gt;mmu != mmu) {
 		/*
<span class="p_chunk">@@ -911,6 +959,7 @@</span> <span class="p_context"> static void ipmmu_device_reset(struct ip</span>
 
 static const struct ipmmu_features ipmmu_features_default = {
 	.use_ns_alias_offset = true,
<span class="p_add">+	.has_cache_leaf_nodes = false,</span>
 };
 
 static const struct of_device_id ipmmu_of_ids[] = {
<span class="p_chunk">@@ -965,19 +1014,31 @@</span> <span class="p_context"> static int ipmmu_probe(struct platform_d</span>
 		mmu-&gt;base += IM_NS_ALIAS_OFFSET;
 
 	irq = platform_get_irq(pdev, 0);
<span class="p_del">-	if (irq &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_del">-		return irq;</span>
<span class="p_del">-	}</span>
 
<span class="p_del">-	ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_del">-			       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_del">-	if (ret &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Determine if this IPMMU instance is a leaf device by checking</span>
<span class="p_add">+	 * if the renesas,ipmmu-main property exists or not.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mmu-&gt;features-&gt;has_cache_leaf_nodes &amp;&amp;</span>
<span class="p_add">+	    of_find_property(pdev-&gt;dev.of_node, &quot;renesas,ipmmu-main&quot;, NULL))</span>
<span class="p_add">+		mmu-&gt;is_leaf = true;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Root devices have mandatory IRQs */</span>
<span class="p_add">+	if (ipmmu_is_root(mmu)) {</span>
<span class="p_add">+		if (irq &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_add">+			return irq;</span>
<span class="p_add">+		}</span>
 
<span class="p_del">-	ipmmu_device_reset(mmu);</span>
<span class="p_add">+		ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_add">+				       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_add">+		if (ret &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ipmmu_device_reset(mmu);</span>
<span class="p_add">+	}</span>
 
 	ret = iommu_device_register(&amp;mmu-&gt;iommu);
 	if (ret)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



