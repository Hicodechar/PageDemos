
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,4/9] iommu/vt-d: Add iommu do invalidate function - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,4/9] iommu/vt-d: Add iommu do invalidate function</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 14, 2017, 10:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497478983-77580-5-git-send-email-jacob.jun.pan@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9787541/mbox/"
   >mbox</a>
|
   <a href="/patch/9787541/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9787541/">/patch/9787541/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B5A9A602D9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 22:22:03 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A9F4028472
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 22:22:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9DAB9284F6; Wed, 14 Jun 2017 22:22:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2D40E28472
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 22:22:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752806AbdFNWWA (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Jun 2017 18:22:00 -0400
Received: from mga11.intel.com ([192.55.52.93]:13653 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752626AbdFNWV5 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Jun 2017 18:21:57 -0400
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	14 Jun 2017 15:21:56 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.39,341,1493708400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1160605270&quot;
Received: from jacob-builder.jf.intel.com ([10.7.199.158])
	by fmsmga001.fm.intel.com with ESMTP; 14 Jun 2017 15:21:56 -0700
From: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;
To: iommu@lists.linux-foundation.org, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, David Woodhouse &lt;dwmw2@infradead.org&gt;
Cc: &quot;Liu, Yi L&quot; &lt;yi.l.liu@intel.com&gt;, Lan Tianyu &lt;tianyu.lan@intel.com&gt;,
	&quot;Tian, Kevin&quot; &lt;kevin.tian@intel.com&gt;, Raj Ashok &lt;ashok.raj@intel.com&gt;,
	Alex Williamson &lt;alex.williamson@redhat.com&gt;,
	Jean Delvare &lt;khali@linux-fr.org&gt;,
	Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;, Liu@vger.kernel.org,
	Yi L &lt;yi.l.liu@linux.intel.com&gt;
Subject: [RFC 4/9] iommu/vt-d: Add iommu do invalidate function
Date: Wed, 14 Jun 2017 15:22:58 -0700
Message-Id: &lt;1497478983-77580-5-git-send-email-jacob.jun.pan@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1497478983-77580-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
References: &lt;1497478983-77580-1-git-send-email-jacob.jun.pan@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7040">Jacob Pan</a> - June 14, 2017, 10:22 p.m.</div>
<pre class="content">
This patch adds Intel VT-d specific function to implement
iommu_do_invalidate API.

The use case is for supporting caching structure invalidation
of assigned SVM capable devices. Emulated IOMMU exposes queue
invalidation capability and passes down all descriptors from the guest
to the physical IOMMU.

The assumption is that guest to host device ID mapping should be
resolved prior to calling IOMMU driver. Based on the device handle,
host IOMMU driver can replace certain fields before submit to the
invalidation queue.
<span class="signed-off-by">
Signed-off-by: Liu, Yi L &lt;yi.l.liu@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Ashok Raj &lt;ashok.raj@intel.com&gt;</span>
---
 drivers/iommu/intel-iommu.c | 41 +++++++++++++++++++++++++++++++++++++++++
 include/linux/intel-iommu.h | 11 ++++++++++-
 2 files changed, 51 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7781">Alex Williamson</a> - June 22, 2017, 10:52 p.m.</div>
<pre class="content">
On Wed, 14 Jun 2017 15:22:58 -0700
Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt; wrote:
<span class="quote">
&gt; This patch adds Intel VT-d specific function to implement</span>
<span class="quote">&gt; iommu_do_invalidate API.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The use case is for supporting caching structure invalidation</span>
<span class="quote">&gt; of assigned SVM capable devices. Emulated IOMMU exposes queue</span>
<span class="quote">&gt; invalidation capability and passes down all descriptors from the guest</span>
<span class="quote">&gt; to the physical IOMMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The assumption is that guest to host device ID mapping should be</span>
<span class="quote">&gt; resolved prior to calling IOMMU driver. Based on the device handle,</span>
<span class="quote">&gt; host IOMMU driver can replace certain fields before submit to the</span>
<span class="quote">&gt; invalidation queue.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Liu, Yi L &lt;yi.l.liu@linux.intel.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Jacob Pan &lt;jacob.jun.pan@linux.intel.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Ashok Raj &lt;ashok.raj@intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/iommu/intel-iommu.c | 41 +++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  include/linux/intel-iommu.h | 11 ++++++++++-</span>
<span class="quote">&gt;  2 files changed, 51 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; index 1d5d9ab9..6b8e997 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/intel-iommu.c</span>
<span class="quote">&gt; @@ -5127,6 +5127,46 @@ static void intel_iommu_detach_device(struct iommu_domain *domain,</span>
<span class="quote">&gt;  	dmar_remove_one_dev_info(to_dmar_domain(domain), dev);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static int intel_iommu_do_invalidate(struct iommu_domain *domain,</span>
<span class="quote">&gt; +		struct device *dev, struct tlb_invalidate_info *inv_info)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct intel_iommu *iommu;</span>
<span class="quote">&gt; +	struct dmar_domain *dmar_domain = to_dmar_domain(domain);</span>
<span class="quote">&gt; +	struct intel_invalidate_data *inv_data;</span>
<span class="quote">&gt; +	struct qi_desc *qi;</span>
<span class="quote">&gt; +	u16 did;</span>
<span class="quote">&gt; +	u8 bus, devfn;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (!inv_info || !dmar_domain || (inv_info-&gt;model != INTEL_IOMMU))</span>
<span class="quote">&gt; +		return -EINVAL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	iommu = device_to_iommu(dev, &amp;bus, &amp;devfn);</span>
<span class="quote">&gt; +	if (!iommu)</span>
<span class="quote">&gt; +		return -ENODEV;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	inv_data = (struct intel_invalidate_data *)&amp;inv_info-&gt;opaque;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* check SID */</span>

dev_is_pci()!
<span class="quote">
&gt; +	if (PCI_DEVID(bus, devfn) != inv_data-&gt;sid)</span>
<span class="quote">&gt; +		return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	qi = &amp;inv_data-&gt;inv_desc;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	switch (qi-&gt;low &amp; QI_TYPE_MASK) {</span>
<span class="quote">&gt; +	case QI_DIOTLB_TYPE:</span>
<span class="quote">&gt; +	case QI_DEIOTLB_TYPE:</span>
<span class="quote">&gt; +		/* for device IOTLB, we just let it pass through */</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	default:</span>
<span class="quote">&gt; +		did = dmar_domain-&gt;iommu_did[iommu-&gt;seq_id];</span>
<span class="quote">&gt; +		qi-&gt;low &amp;= ~QI_DID_MASK;</span>
<span class="quote">&gt; +		qi-&gt;low |= QI_DID(did);</span>
<span class="quote">&gt; +		break;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return qi_submit_sync(qi, iommu);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int intel_iommu_map(struct iommu_domain *domain,</span>
<span class="quote">&gt;  			   unsigned long iova, phys_addr_t hpa,</span>
<span class="quote">&gt;  			   size_t size, int iommu_prot)</span>
<span class="quote">&gt; @@ -5546,6 +5586,7 @@ const struct iommu_ops intel_iommu_ops = {</span>
<span class="quote">&gt;  #ifdef CONFIG_INTEL_IOMMU_SVM</span>
<span class="quote">&gt;  	.bind_pasid_table	= intel_iommu_bind_pasid_table,</span>
<span class="quote">&gt;  	.unbind_pasid_table	= intel_iommu_unbind_pasid_table,</span>
<span class="quote">&gt; +	.do_invalidate		= intel_iommu_do_invalidate,</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	.map			= intel_iommu_map,</span>
<span class="quote">&gt;  	.unmap			= intel_iommu_unmap,</span>
<span class="quote">&gt; diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h</span>
<span class="quote">&gt; index 485a5b4..8df6c91 100644</span>
<span class="quote">&gt; --- a/include/linux/intel-iommu.h</span>
<span class="quote">&gt; +++ b/include/linux/intel-iommu.h</span>
<span class="quote">&gt; @@ -31,7 +31,6 @@</span>
<span class="quote">&gt;  #include &lt;linux/list.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/iommu.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/io-64-nonatomic-lo-hi.h&gt;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/iommu.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -258,6 +257,10 @@ enum {</span>
<span class="quote">&gt;  #define QI_PGRP_RESP_TYPE	0x9</span>
<span class="quote">&gt;  #define QI_PSTRM_RESP_TYPE	0xa</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#define QI_DID(did)		(((u64)did &amp; 0xffff) &lt;&lt; 16)</span>
<span class="quote">&gt; +#define QI_DID_MASK		GENMASK(31, 16)</span>
<span class="quote">&gt; +#define QI_TYPE_MASK		GENMASK(3, 0)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #define QI_IEC_SELECTIVE	(((u64)1) &lt;&lt; 4)</span>
<span class="quote">&gt;  #define QI_IEC_IIDEX(idx)	(((u64)(idx &amp; 0xffff) &lt;&lt; 32))</span>
<span class="quote">&gt;  #define QI_IEC_IM(m)		(((u64)(m &amp; 0x1f) &lt;&lt; 27))</span>
<span class="quote">&gt; @@ -489,6 +492,12 @@ extern int intel_iommu_enable_pasid(struct intel_iommu *iommu, struct intel_svm_</span>
<span class="quote">&gt;  extern struct intel_iommu *intel_svm_device_to_iommu(struct device *dev);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +struct intel_invalidate_data {</span>
<span class="quote">&gt; +	u16 sid;</span>
<span class="quote">&gt; +	u32 pasid;</span>
<span class="quote">&gt; +	struct qi_desc inv_desc;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>

If userspace is ever going to construct this to pass it through vfio,
it&#39;ll need to be defined in UAPI.
<span class="quote">
&gt;  extern const struct attribute_group *intel_iommu_groups[];</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #endif</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="p_header">index 1d5d9ab9..6b8e997 100644</span>
<span class="p_header">--- a/drivers/iommu/intel-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/intel-iommu.c</span>
<span class="p_chunk">@@ -5127,6 +5127,46 @@</span> <span class="p_context"> static void intel_iommu_detach_device(struct iommu_domain *domain,</span>
 	dmar_remove_one_dev_info(to_dmar_domain(domain), dev);
 }
 
<span class="p_add">+static int intel_iommu_do_invalidate(struct iommu_domain *domain,</span>
<span class="p_add">+		struct device *dev, struct tlb_invalidate_info *inv_info)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct intel_iommu *iommu;</span>
<span class="p_add">+	struct dmar_domain *dmar_domain = to_dmar_domain(domain);</span>
<span class="p_add">+	struct intel_invalidate_data *inv_data;</span>
<span class="p_add">+	struct qi_desc *qi;</span>
<span class="p_add">+	u16 did;</span>
<span class="p_add">+	u8 bus, devfn;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!inv_info || !dmar_domain || (inv_info-&gt;model != INTEL_IOMMU))</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	iommu = device_to_iommu(dev, &amp;bus, &amp;devfn);</span>
<span class="p_add">+	if (!iommu)</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	inv_data = (struct intel_invalidate_data *)&amp;inv_info-&gt;opaque;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* check SID */</span>
<span class="p_add">+	if (PCI_DEVID(bus, devfn) != inv_data-&gt;sid)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	qi = &amp;inv_data-&gt;inv_desc;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (qi-&gt;low &amp; QI_TYPE_MASK) {</span>
<span class="p_add">+	case QI_DIOTLB_TYPE:</span>
<span class="p_add">+	case QI_DEIOTLB_TYPE:</span>
<span class="p_add">+		/* for device IOTLB, we just let it pass through */</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		did = dmar_domain-&gt;iommu_did[iommu-&gt;seq_id];</span>
<span class="p_add">+		qi-&gt;low &amp;= ~QI_DID_MASK;</span>
<span class="p_add">+		qi-&gt;low |= QI_DID(did);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return qi_submit_sync(qi, iommu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int intel_iommu_map(struct iommu_domain *domain,
 			   unsigned long iova, phys_addr_t hpa,
 			   size_t size, int iommu_prot)
<span class="p_chunk">@@ -5546,6 +5586,7 @@</span> <span class="p_context"> const struct iommu_ops intel_iommu_ops = {</span>
 #ifdef CONFIG_INTEL_IOMMU_SVM
 	.bind_pasid_table	= intel_iommu_bind_pasid_table,
 	.unbind_pasid_table	= intel_iommu_unbind_pasid_table,
<span class="p_add">+	.do_invalidate		= intel_iommu_do_invalidate,</span>
 #endif
 	.map			= intel_iommu_map,
 	.unmap			= intel_iommu_unmap,
<span class="p_header">diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h</span>
<span class="p_header">index 485a5b4..8df6c91 100644</span>
<span class="p_header">--- a/include/linux/intel-iommu.h</span>
<span class="p_header">+++ b/include/linux/intel-iommu.h</span>
<span class="p_chunk">@@ -31,7 +31,6 @@</span> <span class="p_context"></span>
 #include &lt;linux/list.h&gt;
 #include &lt;linux/iommu.h&gt;
 #include &lt;linux/io-64-nonatomic-lo-hi.h&gt;
<span class="p_del">-</span>
 #include &lt;asm/cacheflush.h&gt;
 #include &lt;asm/iommu.h&gt;
 
<span class="p_chunk">@@ -258,6 +257,10 @@</span> <span class="p_context"> enum {</span>
 #define QI_PGRP_RESP_TYPE	0x9
 #define QI_PSTRM_RESP_TYPE	0xa
 
<span class="p_add">+#define QI_DID(did)		(((u64)did &amp; 0xffff) &lt;&lt; 16)</span>
<span class="p_add">+#define QI_DID_MASK		GENMASK(31, 16)</span>
<span class="p_add">+#define QI_TYPE_MASK		GENMASK(3, 0)</span>
<span class="p_add">+</span>
 #define QI_IEC_SELECTIVE	(((u64)1) &lt;&lt; 4)
 #define QI_IEC_IIDEX(idx)	(((u64)(idx &amp; 0xffff) &lt;&lt; 32))
 #define QI_IEC_IM(m)		(((u64)(m &amp; 0x1f) &lt;&lt; 27))
<span class="p_chunk">@@ -489,6 +492,12 @@</span> <span class="p_context"> extern int intel_iommu_enable_pasid(struct intel_iommu *iommu, struct intel_svm_</span>
 extern struct intel_iommu *intel_svm_device_to_iommu(struct device *dev);
 #endif
 
<span class="p_add">+struct intel_invalidate_data {</span>
<span class="p_add">+	u16 sid;</span>
<span class="p_add">+	u32 pasid;</span>
<span class="p_add">+	struct qi_desc inv_desc;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 extern const struct attribute_group *intel_iommu_groups[];
 
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



