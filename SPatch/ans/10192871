
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/pti] x86/speculation: Use Indirect Branch Prediction Barrier in context switch - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/pti] x86/speculation: Use Indirect Branch Prediction Barrier in context switch</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 30, 2018, 10:39 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10192871/mbox/"
   >mbox</a>
|
   <a href="/patch/10192871/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10192871/">/patch/10192871/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4460F6020C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 22:41:11 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2E09327FAE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 22:41:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2268327FB3; Tue, 30 Jan 2018 22:41:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5B12D27FAE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 22:41:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753563AbeA3Wkx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 30 Jan 2018 17:40:53 -0500
Received: from terminus.zytor.com ([65.50.211.136]:56789 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753009AbeA3Wkv (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 30 Jan 2018 17:40:51 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id w0UMdjIQ003611;
	Tue, 30 Jan 2018 14:39:45 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id w0UMdj7M003608;
	Tue, 30 Jan 2018 14:39:45 -0800
Date: Tue, 30 Jan 2018 14:39:45 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Tim Chen &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7@git.kernel.org&gt;
Cc: tim.c.chen@linux.intel.com, dwmw@amazon.co.uk, hpa@zytor.com,
	mingo@kernel.org, linux-kernel@vger.kernel.org, tglx@linutronix.de
Reply-To: mingo@kernel.org, hpa@zytor.com, tim.c.chen@linux.intel.com,
	dwmw@amazon.co.uk, linux-kernel@vger.kernel.org, tglx@linutronix.de
In-Reply-To: &lt;1517263487-3708-1-git-send-email-dwmw@amazon.co.uk&gt;
References: &lt;1517263487-3708-1-git-send-email-dwmw@amazon.co.uk&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/pti] x86/speculation: Use Indirect Branch Prediction
	Barrier in context switch
Git-Commit-ID: 18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Jan. 30, 2018, 10:39 p.m.</div>
<pre class="content">
Commit-ID:  18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7
Gitweb:     https://git.kernel.org/tip/18bf3c3ea8ece8f03b6fc58508f2dfd23c7711c7
Author:     Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
AuthorDate: Mon, 29 Jan 2018 22:04:47 +0000
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Tue, 30 Jan 2018 23:09:21 +0100

x86/speculation: Use Indirect Branch Prediction Barrier in context switch

Flush indirect branches when switching into a process that marked itself
non dumpable. This protects high value processes like gpg better,
without having too high performance overhead.

If done na√Øvely, we could switch to a kernel idle thread and then back
to the original process, such as:

    process A -&gt; idle -&gt; process A

In such scenario, we do not have to do IBPB here even though the process
is non-dumpable, as we are switching back to the same process after a
hiatus.

To avoid the redundant IBPB, which is expensive, we track the last mm
user context ID. The cost is to have an extra u64 mm context id to track
the last mm we were using before switching to the init_mm used by idle.
Avoiding the extra IBPB is probably worth the extra memory for this
common scenario.

For those cases where tlb_defer_switch_to_init_mm() returns true (non
PCID), lazy tlb will defer switch to init_mm, so we will not be changing
the mm for the process A -&gt; idle -&gt; process A switch. So IBPB will be
skipped for this case.

Thanks to the reviewers and Andy Lutomirski for the suggestion of
using ctx_id which got rid of the problem of mm pointer recycling.
<span class="signed-off-by">
Signed-off-by: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
Cc: ak@linux.intel.com
Cc: karahmed@amazon.de
Cc: arjan@linux.intel.com
Cc: torvalds@linux-foundation.org
Cc: linux@dominikbrodowski.net
Cc: peterz@infradead.org
Cc: bp@alien8.de
Cc: luto@kernel.org
Cc: pbonzini@redhat.com
Cc: gregkh@linux-foundation.org
Link: https://lkml.kernel.org/r/1517263487-3708-1-git-send-email-dwmw@amazon.co.uk

---
 arch/x86/include/asm/tlbflush.h |  2 ++
 arch/x86/mm/tlb.c               | 33 ++++++++++++++++++++++++++++++++-
 2 files changed, 34 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=308">David Woodhouse</a> - Feb. 5, 2018, 2:18 p.m.</div>
<pre class="content">
On Tue, 2018-01-30 at 14:39 -0800, tip-bot for Tim Chen wrote:
<span class="quote">&gt; Thanks to the reviewers and Andy Lutomirski for the suggestion of</span>
<span class="quote">&gt; using ctx_id which got rid of the problem of mm pointer recycling.</span>

That one doesn&#39;t backport well to 4.9. Suggestions welcome.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index d33e4a2..2b8f18c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -174,6 +174,8 @@</span> <span class="p_context"> struct tlb_state {</span>
 	struct mm_struct *loaded_mm;
 	u16 loaded_mm_asid;
 	u16 next_asid;
<span class="p_add">+	/* last user mm&#39;s ctx id */</span>
<span class="p_add">+	u64 last_ctx_id;</span>
 
 	/*
 	 * We can be in one of several states:
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 5bfe61a..012d026 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -6,13 +6,14 @@</span> <span class="p_context"></span>
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/export.h&gt;
 #include &lt;linux/cpu.h&gt;
<span class="p_add">+#include &lt;linux/debugfs.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/mmu_context.h&gt;
<span class="p_add">+#include &lt;asm/nospec-branch.h&gt;</span>
 #include &lt;asm/cache.h&gt;
 #include &lt;asm/apic.h&gt;
 #include &lt;asm/uv/uv.h&gt;
<span class="p_del">-#include &lt;linux/debugfs.h&gt;</span>
 
 /*
  *	TLB flushing, formerly SMP-only
<span class="p_chunk">@@ -247,6 +248,27 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	} else {
 		u16 new_asid;
 		bool need_flush;
<span class="p_add">+		u64 last_ctx_id = this_cpu_read(cpu_tlbstate.last_ctx_id);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Avoid user/user BTB poisoning by flushing the branch</span>
<span class="p_add">+		 * predictor when switching between processes. This stops</span>
<span class="p_add">+		 * one process from doing Spectre-v2 attacks on another.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * As an optimization, flush indirect branches only when</span>
<span class="p_add">+		 * switching into processes that disable dumping. This</span>
<span class="p_add">+		 * protects high value processes like gpg, without having</span>
<span class="p_add">+		 * too high performance overhead. IBPB is *expensive*!</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * This will not flush branches when switching into kernel</span>
<span class="p_add">+		 * threads. It will also not flush if we switch to idle</span>
<span class="p_add">+		 * thread and back to the same process. It will flush if we</span>
<span class="p_add">+		 * switch to a different non-dumpable process.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (tsk &amp;&amp; tsk-&gt;mm &amp;&amp;</span>
<span class="p_add">+		    tsk-&gt;mm-&gt;context.ctx_id != last_ctx_id &amp;&amp;</span>
<span class="p_add">+		    get_dumpable(tsk-&gt;mm) != SUID_DUMP_USER)</span>
<span class="p_add">+			indirect_branch_prediction_barrier();</span>
 
 		if (IS_ENABLED(CONFIG_VMAP_STACK)) {
 			/*
<span class="p_chunk">@@ -292,6 +314,14 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);
 		}
 
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Record last user mm&#39;s context id, so we can avoid</span>
<span class="p_add">+		 * flushing branch buffer with IBPB if we switch back</span>
<span class="p_add">+		 * to the same user.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (next != &amp;init_mm)</span>
<span class="p_add">+			this_cpu_write(cpu_tlbstate.last_ctx_id, next-&gt;context.ctx_id);</span>
<span class="p_add">+</span>
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
 		this_cpu_write(cpu_tlbstate.loaded_mm_asid, new_asid);
 	}
<span class="p_chunk">@@ -369,6 +399,7 @@</span> <span class="p_context"> void initialize_tlbstate_and_flush(void)</span>
 	write_cr3(build_cr3(mm-&gt;pgd, 0));
 
 	/* Reinitialize tlbstate. */
<span class="p_add">+	this_cpu_write(cpu_tlbstate.last_ctx_id, mm-&gt;context.ctx_id);</span>
 	this_cpu_write(cpu_tlbstate.loaded_mm_asid, 0);
 	this_cpu_write(cpu_tlbstate.next_asid, 1);
 	this_cpu_write(cpu_tlbstate.ctxs[0].ctx_id, mm-&gt;context.ctx_id);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



