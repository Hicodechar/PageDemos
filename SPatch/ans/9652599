
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RESEND] mm/hugetlb: Don&#39;t call region_abort if region_chg fails - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RESEND] mm/hugetlb: Don&#39;t call region_abort if region_chg fails</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 29, 2017, 9:08 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1490821682-23228-1-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9652599/mbox/"
   >mbox</a>
|
   <a href="/patch/9652599/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9652599/">/patch/9652599/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	409F1602C8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Mar 2017 21:09:46 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3370C28560
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Mar 2017 21:09:46 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 281D828567; Wed, 29 Mar 2017 21:09:46 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RCVD_IN_SORBS_SPAM,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5A10A28560
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 29 Mar 2017 21:09:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933103AbdC2VJU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 29 Mar 2017 17:09:20 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:33961 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932707AbdC2VIT (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 29 Mar 2017 17:08:19 -0400
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v2TL88IG025836
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 29 Mar 2017 21:08:08 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id v2TL87p8007597
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Wed, 29 Mar 2017 21:08:07 GMT
Received: from abhmp0011.oracle.com (abhmp0011.oracle.com [141.146.116.17])
	by userv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	v2TL86dY012718; Wed, 29 Mar 2017 21:08:06 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 29 Mar 2017 14:08:06 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Cc: Dmitry Vyukov &lt;dvyukov@google.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH RESEND] mm/hugetlb: Don&#39;t call region_abort if region_chg
	fails
Date: Wed, 29 Mar 2017 14:08:02 -0700
Message-Id: &lt;1490821682-23228-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.7.4
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 29, 2017, 9:08 p.m.</div>
<pre class="content">
Resending because of typo in Andrew&#39;s e-mail when first sent

Changes to hugetlbfs reservation maps is a two step process.  The first
step is a call to region_chg to determine what needs to be changed, and
prepare that change.  This should be followed by a call to call to
region_add to commit the change, or region_abort to abort the change.

The error path in hugetlb_reserve_pages called region_abort after a
failed call to region_chg.  As a result, the adds_in_progress counter
in the reservation map is off by 1.  This is caught by a VM_BUG_ON
in resv_map_release when the reservation map is freed.

syzkaller fuzzer found this bug, that resulted in the following:

 kernel BUG at mm/hugetlb.c:742!
 Call Trace:
  hugetlbfs_evict_inode+0x7b/0xa0 fs/hugetlbfs/inode.c:493
  evict+0x481/0x920 fs/inode.c:553
  iput_final fs/inode.c:1515 [inline]
  iput+0x62b/0xa20 fs/inode.c:1542
  hugetlb_file_setup+0x593/0x9f0 fs/hugetlbfs/inode.c:1306
  newseg+0x422/0xd30 ipc/shm.c:575
  ipcget_new ipc/util.c:285 [inline]
  ipcget+0x21e/0x580 ipc/util.c:639
  SYSC_shmget ipc/shm.c:673 [inline]
  SyS_shmget+0x158/0x230 ipc/shm.c:657
  entry_SYSCALL_64_fastpath+0x1f/0xc2
 RIP: resv_map_release+0x265/0x330 mm/hugetlb.c:742

Reported-by: Dmitry Vyukov &lt;dvyukov@google.com&gt;
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="acked-by">Acked-by: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;</span>
---
 mm/hugetlb.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - March 29, 2017, 9:17 p.m.</div>
<pre class="content">
On Wed, 29 Mar 2017 14:08:02 -0700 Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">
&gt; Resending because of typo in Andrew&#39;s e-mail when first sent</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes to hugetlbfs reservation maps is a two step process.  The first</span>
<span class="quote">&gt; step is a call to region_chg to determine what needs to be changed, and</span>
<span class="quote">&gt; prepare that change.  This should be followed by a call to call to</span>
<span class="quote">&gt; region_add to commit the change, or region_abort to abort the change.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The error path in hugetlb_reserve_pages called region_abort after a</span>
<span class="quote">&gt; failed call to region_chg.  As a result, the adds_in_progress counter</span>
<span class="quote">&gt; in the reservation map is off by 1.  This is caught by a VM_BUG_ON</span>
<span class="quote">&gt; in resv_map_release when the reservation map is freed.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; syzkaller fuzzer found this bug, that resulted in the following:</span>

I&#39;ll change the above to

: syzkaller fuzzer (when using an injected kmalloc failure) found this bug,
: that resulted in the following:

it&#39;s important, because this bug won&#39;t be triggered (at all easily, at
least) in real-world workloads.
<span class="quote">
&gt;  kernel BUG at mm/hugetlb.c:742!</span>
<span class="quote">&gt;  Call Trace:</span>
<span class="quote">&gt;   hugetlbfs_evict_inode+0x7b/0xa0 fs/hugetlbfs/inode.c:493</span>
<span class="quote">&gt;   evict+0x481/0x920 fs/inode.c:553</span>
<span class="quote">&gt;   iput_final fs/inode.c:1515 [inline]</span>
<span class="quote">&gt;   iput+0x62b/0xa20 fs/inode.c:1542</span>
<span class="quote">&gt;   hugetlb_file_setup+0x593/0x9f0 fs/hugetlbfs/inode.c:1306</span>
<span class="quote">&gt;   newseg+0x422/0xd30 ipc/shm.c:575</span>
<span class="quote">&gt;   ipcget_new ipc/util.c:285 [inline]</span>
<span class="quote">&gt;   ipcget+0x21e/0x580 ipc/util.c:639</span>
<span class="quote">&gt;   SYSC_shmget ipc/shm.c:673 [inline]</span>
<span class="quote">&gt;   SyS_shmget+0x158/0x230 ipc/shm.c:657</span>
<span class="quote">&gt;   entry_SYSCALL_64_fastpath+0x1f/0xc2</span>
<span class="quote">&gt;  RIP: resv_map_release+0x265/0x330 mm/hugetlb.c:742</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72902">Dmitry Vyukov</a> - March 30, 2017, 12:28 p.m.</div>
<pre class="content">
On Wed, Mar 29, 2017 at 11:17 PM, Andrew Morton
&lt;akpm@linux-foundation.org&gt; wrote:
<span class="quote">&gt; On Wed, 29 Mar 2017 14:08:02 -0700 Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Resending because of typo in Andrew&#39;s e-mail when first sent</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Changes to hugetlbfs reservation maps is a two step process.  The first</span>
<span class="quote">&gt;&gt; step is a call to region_chg to determine what needs to be changed, and</span>
<span class="quote">&gt;&gt; prepare that change.  This should be followed by a call to call to</span>
<span class="quote">&gt;&gt; region_add to commit the change, or region_abort to abort the change.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The error path in hugetlb_reserve_pages called region_abort after a</span>
<span class="quote">&gt;&gt; failed call to region_chg.  As a result, the adds_in_progress counter</span>
<span class="quote">&gt;&gt; in the reservation map is off by 1.  This is caught by a VM_BUG_ON</span>
<span class="quote">&gt;&gt; in resv_map_release when the reservation map is freed.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; syzkaller fuzzer found this bug, that resulted in the following:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;ll change the above to</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; : syzkaller fuzzer (when using an injected kmalloc failure) found this bug,</span>
<span class="quote">&gt; : that resulted in the following:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; it&#39;s important, because this bug won&#39;t be triggered (at all easily, at</span>
<span class="quote">&gt; least) in real-world workloads.</span>

I wonder if memory-constrained cgroups make such bugs much easier to trigger.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 30, 2017, 8:20 p.m.</div>
<pre class="content">
On 03/30/2017 05:28 AM, Dmitry Vyukov wrote:
<span class="quote">&gt; On Wed, Mar 29, 2017 at 11:17 PM, Andrew Morton</span>
<span class="quote">&gt; &lt;akpm@linux-foundation.org&gt; wrote:</span>
<span class="quote">&gt;&gt; On Wed, 29 Mar 2017 14:08:02 -0700 Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; syzkaller fuzzer found this bug, that resulted in the following:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;ll change the above to</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; : syzkaller fuzzer (when using an injected kmalloc failure) found this bug,</span>
<span class="quote">&gt;&gt; : that resulted in the following:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; it&#39;s important, because this bug won&#39;t be triggered (at all easily, at</span>
<span class="quote">&gt;&gt; least) in real-world workloads.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I wonder if memory-constrained cgroups make such bugs much easier to trigger.</span>
<span class="quote">&gt; </span>

I think you might expose some bugs with memory-constrained cgroups.  However,
it is unlikely you could trigger this bug using that method.

In this bug the injected kmalloc failure was for a 32 byte allocation.  My
guess is that it would be very very unlikely/lucky to have the allocations
done by other routines on the stack succeed, and have this 32 byte allocation
fail.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=728">Vegard Nossum</a> - April 10, 2017, 9:38 p.m.</div>
<pre class="content">
On 29 March 2017 at 23:08, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:
<span class="quote">&gt; Changes to hugetlbfs reservation maps is a two step process.  The first</span>
<span class="quote">&gt; step is a call to region_chg to determine what needs to be changed, and</span>
<span class="quote">&gt; prepare that change.  This should be followed by a call to call to</span>
<span class="quote">&gt; region_add to commit the change, or region_abort to abort the change.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The error path in hugetlb_reserve_pages called region_abort after a</span>
<span class="quote">&gt; failed call to region_chg.  As a result, the adds_in_progress counter</span>
<span class="quote">&gt; in the reservation map is off by 1.  This is caught by a VM_BUG_ON</span>
<span class="quote">&gt; in resv_map_release when the reservation map is freed.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; syzkaller fuzzer found this bug, that resulted in the following:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  kernel BUG at mm/hugetlb.c:742!</span>
<span class="quote">&gt;  Call Trace:</span>
<span class="quote">&gt;   hugetlbfs_evict_inode+0x7b/0xa0 fs/hugetlbfs/inode.c:493</span>
<span class="quote">&gt;   evict+0x481/0x920 fs/inode.c:553</span>
<span class="quote">&gt;   iput_final fs/inode.c:1515 [inline]</span>
<span class="quote">&gt;   iput+0x62b/0xa20 fs/inode.c:1542</span>
<span class="quote">&gt;   hugetlb_file_setup+0x593/0x9f0 fs/hugetlbfs/inode.c:1306</span>
<span class="quote">&gt;   newseg+0x422/0xd30 ipc/shm.c:575</span>
<span class="quote">&gt;   ipcget_new ipc/util.c:285 [inline]</span>
<span class="quote">&gt;   ipcget+0x21e/0x580 ipc/util.c:639</span>
<span class="quote">&gt;   SYSC_shmget ipc/shm.c:673 [inline]</span>
<span class="quote">&gt;   SyS_shmget+0x158/0x230 ipc/shm.c:657</span>
<span class="quote">&gt;   entry_SYSCALL_64_fastpath+0x1f/0xc2</span>
<span class="quote">&gt;  RIP: resv_map_release+0x265/0x330 mm/hugetlb.c:742</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Reported-by: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; Acked-by: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 4 +++-</span>
<span class="quote">&gt;  1 file changed, 3 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index c7025c1..c65d45c 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -4233,7 +4233,9 @@ int hugetlb_reserve_pages(struct inode *inode,</span>
<span class="quote">&gt;         return 0;</span>
<span class="quote">&gt;  out_err:</span>
<span class="quote">&gt;         if (!vma || vma-&gt;vm_flags &amp; VM_MAYSHARE)</span>
<span class="quote">&gt; -               region_abort(resv_map, from, to);</span>
<span class="quote">&gt; +               /* Don&#39;t call region_abort if region_chg failed */</span>
<span class="quote">&gt; +               if (chg &gt;= 0)</span>
<span class="quote">&gt; +                       region_abort(resv_map, from, to);</span>
<span class="quote">&gt;         if (vma &amp;&amp; is_vma_resv_set(vma, HPAGE_RESV_OWNER))</span>
<span class="quote">&gt;                 kref_put(&amp;resv_map-&gt;refs, resv_map_release);</span>
<span class="quote">&gt;         return ret;</span>

Hi guys,

I&#39;m running into this on latest linus/master:

kernel BUG at mm/hugetlb.c:742!
invalid opcode: 0000 [#1] SMP KASAN
CPU: 3 PID: 20281 Comm: syz-executor0 Not tainted 4.11.0-rc6 #335
Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
Ubuntu-1.8.2-1ubuntu1 04/01/2014
task: ffff880064f30dc0 task.stack: ffff880065b38000
RIP: 0010:resv_map_release+0x1cb/0x270
RSP: 0018:ffff880065b3fc38 EFLAGS: 00010287
RAX: 0000000000010000 RBX: ffff88006b5fe418 RCX: ffffc90001b52000
RDX: 00000000000005de RSI: ffffffff8172026b RDI: ffff88006b5fe410
RBP: ffff880065b3fc78 R08: ffff880065b3f958 R09: 0000000000000000
R10: 0000000000000000 R11: 0000000000000000 R12: dffffc0000000000
R13: ffff88006b5fe418 R14: ffff88006b5fe418 R15: ffff88006b5fe418
FS:  00007f21647c5700(0000) GS:ffff88006d100000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: 0000000000460750 CR3: 000000005d123000 CR4: 00000000000006e0
Call Trace:
 hugetlbfs_evict_inode+0x80/0xa0
 ? hugetlbfs_setattr+0x3c0/0x3c0
 evict+0x24a/0x620
 iput+0x48f/0x8c0
 dentry_unlink_inode+0x31f/0x4d0
 __dentry_kill+0x292/0x5e0
 dput+0x730/0x830
 __fput+0x438/0x720
 ____fput+0x1a/0x20
 task_work_run+0xfe/0x180
 exit_to_usermode_loop+0x133/0x150
 syscall_return_slowpath+0x184/0x1c0
 entry_SYSCALL_64_fastpath+0xab/0xad

To reproduce:

mmap(0, 0x2000, 0, 0x40031, 0xffffffffffffffffULL, 0x8000000000000000ULL);

Curiously enough, it&#39;s the patch from this thread (i.e. commit
ff8c0c53c47530ffea82c22a0a6df6332b56c957) that introduces it,
according to git bisect. Reverting the commit from linus/master fixes
the problem.

Also found by syzcaller (no fault injections this time).


Vegard
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - April 10, 2017, 11:37 p.m.</div>
<pre class="content">
On 04/10/2017 02:38 PM, Vegard Nossum wrote:
<span class="quote">&gt; On 29 March 2017 at 23:08, Mike Kravetz &lt;mike.kravetz@oracle.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Changes to hugetlbfs reservation maps is a two step process.  The first</span>
<span class="quote">&gt;&gt; step is a call to region_chg to determine what needs to be changed, and</span>
<span class="quote">&gt;&gt; prepare that change.  This should be followed by a call to call to</span>
<span class="quote">&gt;&gt; region_add to commit the change, or region_abort to abort the change.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The error path in hugetlb_reserve_pages called region_abort after a</span>
<span class="quote">&gt;&gt; failed call to region_chg.  As a result, the adds_in_progress counter</span>
<span class="quote">&gt;&gt; in the reservation map is off by 1.  This is caught by a VM_BUG_ON</span>
<span class="quote">&gt;&gt; in resv_map_release when the reservation map is freed.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; syzkaller fuzzer found this bug, that resulted in the following:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  kernel BUG at mm/hugetlb.c:742!</span>
<span class="quote">&gt;&gt;  Call Trace:</span>
<span class="quote">&gt;&gt;   hugetlbfs_evict_inode+0x7b/0xa0 fs/hugetlbfs/inode.c:493</span>
<span class="quote">&gt;&gt;   evict+0x481/0x920 fs/inode.c:553</span>
<span class="quote">&gt;&gt;   iput_final fs/inode.c:1515 [inline]</span>
<span class="quote">&gt;&gt;   iput+0x62b/0xa20 fs/inode.c:1542</span>
<span class="quote">&gt;&gt;   hugetlb_file_setup+0x593/0x9f0 fs/hugetlbfs/inode.c:1306</span>
<span class="quote">&gt;&gt;   newseg+0x422/0xd30 ipc/shm.c:575</span>
<span class="quote">&gt;&gt;   ipcget_new ipc/util.c:285 [inline]</span>
<span class="quote">&gt;&gt;   ipcget+0x21e/0x580 ipc/util.c:639</span>
<span class="quote">&gt;&gt;   SYSC_shmget ipc/shm.c:673 [inline]</span>
<span class="quote">&gt;&gt;   SyS_shmget+0x158/0x230 ipc/shm.c:657</span>
<span class="quote">&gt;&gt;   entry_SYSCALL_64_fastpath+0x1f/0xc2</span>
<span class="quote">&gt;&gt;  RIP: resv_map_release+0x265/0x330 mm/hugetlb.c:742</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Reported-by: Dmitry Vyukov &lt;dvyukov@google.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  mm/hugetlb.c | 4 +++-</span>
<span class="quote">&gt;&gt;  1 file changed, 3 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; index c7025c1..c65d45c 100644</span>
<span class="quote">&gt;&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt;&gt; @@ -4233,7 +4233,9 @@ int hugetlb_reserve_pages(struct inode *inode,</span>
<span class="quote">&gt;&gt;         return 0;</span>
<span class="quote">&gt;&gt;  out_err:</span>
<span class="quote">&gt;&gt;         if (!vma || vma-&gt;vm_flags &amp; VM_MAYSHARE)</span>
<span class="quote">&gt;&gt; -               region_abort(resv_map, from, to);</span>
<span class="quote">&gt;&gt; +               /* Don&#39;t call region_abort if region_chg failed */</span>
<span class="quote">&gt;&gt; +               if (chg &gt;= 0)</span>
<span class="quote">&gt;&gt; +                       region_abort(resv_map, from, to);</span>
<span class="quote">&gt;&gt;         if (vma &amp;&amp; is_vma_resv_set(vma, HPAGE_RESV_OWNER))</span>
<span class="quote">&gt;&gt;                 kref_put(&amp;resv_map-&gt;refs, resv_map_release);</span>
<span class="quote">&gt;&gt;         return ret;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hi guys,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m running into this on latest linus/master:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; kernel BUG at mm/hugetlb.c:742!</span>
<span class="quote">&gt; invalid opcode: 0000 [#1] SMP KASAN</span>
<span class="quote">&gt; CPU: 3 PID: 20281 Comm: syz-executor0 Not tainted 4.11.0-rc6 #335</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS</span>
<span class="quote">&gt; Ubuntu-1.8.2-1ubuntu1 04/01/2014</span>
<span class="quote">&gt; task: ffff880064f30dc0 task.stack: ffff880065b38000</span>
<span class="quote">&gt; RIP: 0010:resv_map_release+0x1cb/0x270</span>
<span class="quote">&gt; RSP: 0018:ffff880065b3fc38 EFLAGS: 00010287</span>
<span class="quote">&gt; RAX: 0000000000010000 RBX: ffff88006b5fe418 RCX: ffffc90001b52000</span>
<span class="quote">&gt; RDX: 00000000000005de RSI: ffffffff8172026b RDI: ffff88006b5fe410</span>
<span class="quote">&gt; RBP: ffff880065b3fc78 R08: ffff880065b3f958 R09: 0000000000000000</span>
<span class="quote">&gt; R10: 0000000000000000 R11: 0000000000000000 R12: dffffc0000000000</span>
<span class="quote">&gt; R13: ffff88006b5fe418 R14: ffff88006b5fe418 R15: ffff88006b5fe418</span>
<span class="quote">&gt; FS:  00007f21647c5700(0000) GS:ffff88006d100000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; CR2: 0000000000460750 CR3: 000000005d123000 CR4: 00000000000006e0</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  hugetlbfs_evict_inode+0x80/0xa0</span>
<span class="quote">&gt;  ? hugetlbfs_setattr+0x3c0/0x3c0</span>
<span class="quote">&gt;  evict+0x24a/0x620</span>
<span class="quote">&gt;  iput+0x48f/0x8c0</span>
<span class="quote">&gt;  dentry_unlink_inode+0x31f/0x4d0</span>
<span class="quote">&gt;  __dentry_kill+0x292/0x5e0</span>
<span class="quote">&gt;  dput+0x730/0x830</span>
<span class="quote">&gt;  __fput+0x438/0x720</span>
<span class="quote">&gt;  ____fput+0x1a/0x20</span>
<span class="quote">&gt;  task_work_run+0xfe/0x180</span>
<span class="quote">&gt;  exit_to_usermode_loop+0x133/0x150</span>
<span class="quote">&gt;  syscall_return_slowpath+0x184/0x1c0</span>
<span class="quote">&gt;  entry_SYSCALL_64_fastpath+0xab/0xad</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To reproduce:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mmap(0, 0x2000, 0, 0x40031, 0xffffffffffffffffULL, 0x8000000000000000ULL);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Curiously enough, it&#39;s the patch from this thread (i.e. commit</span>
<span class="quote">&gt; ff8c0c53c47530ffea82c22a0a6df6332b56c957) that introduces it,</span>
<span class="quote">&gt; according to git bisect. Reverting the commit from linus/master fixes</span>
<span class="quote">&gt; the problem.</span>

Thanks for finding this.

I do not think commit ff8c0c53 is the root cause of this BUG/issue.

Due to the very high offset (0x8000000000000000ULL) passed to mmap, there
is some overflow and/or truncation of values happening before getting to
the hugetlbfs reservation code.  The routine hugetlb_reserve_pages() is
passed a negative page offset value (from=4398046511104, to=-4398046511103).
Bad!!!  The routine region_chg() takes these values to determine how many
reservations are needed and calculates/returns a negative value.  This
appears as an error.  So, the code from commit ff8c0c53 prevents the call
to region_abort(), adds_in_progress does not get decremented and we hit the
BUG.

We should have never calculated and acted upon negative page offsets.  It
was just &#39;lucky&#39; that things appeared to work before this commit.  I have
not yet determined all the things that could have gone wrong when passing
around these incorrect values.

I believe commit ff8c0c53 should remain.  I will start working on a fix
to this overflow and/or truncation of page offsets.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index c7025c1..c65d45c 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -4233,7 +4233,9 @@</span> <span class="p_context"> int hugetlb_reserve_pages(struct inode *inode,</span>
 	return 0;
 out_err:
 	if (!vma || vma-&gt;vm_flags &amp; VM_MAYSHARE)
<span class="p_del">-		region_abort(resv_map, from, to);</span>
<span class="p_add">+		/* Don&#39;t call region_abort if region_chg failed */</span>
<span class="p_add">+		if (chg &gt;= 0)</span>
<span class="p_add">+			region_abort(resv_map, from, to);</span>
 	if (vma &amp;&amp; is_vma_resv_set(vma, HPAGE_RESV_OWNER))
 		kref_put(&amp;resv_map-&gt;refs, resv_map_release);
 	return ret;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



