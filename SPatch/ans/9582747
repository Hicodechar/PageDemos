
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv3,33/33] mm, x86: introduce PR_SET_MAX_VADDR and PR_GET_MAX_VADDR - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv3,33/33] mm, x86: introduce PR_SET_MAX_VADDR and PR_GET_MAX_VADDR</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 20, 2017, 1:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170220131515.GA9502@node.shutemov.name&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9582747/mbox/"
   >mbox</a>
|
   <a href="/patch/9582747/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9582747/">/patch/9582747/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	642A8604A0 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Feb 2017 13:15:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 54E72286A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Feb 2017 13:15:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4923428870; Mon, 20 Feb 2017 13:15:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 72751286A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 20 Feb 2017 13:15:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753317AbdBTNPW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 20 Feb 2017 08:15:22 -0500
Received: from mail-wr0-f194.google.com ([209.85.128.194]:34887 &quot;EHLO
	mail-wr0-f194.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752622AbdBTNPU (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 20 Feb 2017 08:15:20 -0500
Received: by mail-wr0-f194.google.com with SMTP id q39so11911224wrb.2
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 20 Feb 2017 05:15:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=shutemov-name.20150623.gappssmtp.com; s=20150623;
	h=date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=HfBHWLEDoexVm4RTPMw7SJrEKFrFrUQ0g1RD2DthkkM=;
	b=NESPD6xi8F5qJw0Cubyn7K7MNsYpJbZyE8FyA1RCnWjy2RuQbxRAAeENrD4xRBus8p
	6pZEJ5tvpuEZa6JIOXKFwWywBBH7qLpOiq4QE4rPL5W58jLEp7lZqUR0ym5Zs937v7U2
	mUM1OL8/8WrkZ66btQ+NFTQ8i+7btnuip/KsdgoJGZB260kVUCeHxtVxtUWGWW+GFtsl
	o/JTxT5BpzT7824Q8rHIQPkubhQgizTp1zvaKETmeWKYDehn0CxT3DGYJMkaz80VVwao
	asYsepW8c/nXDY7SKKG58fHWfGd0pk60mp4Z0veIadLhNMyvEQz03hbZRzbM2VAvgXM9
	BI4w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=HfBHWLEDoexVm4RTPMw7SJrEKFrFrUQ0g1RD2DthkkM=;
	b=kivHzGO6UMIQ5Ne9bTG0raDKRiq3tdKANWH4Z3spsq8YXFQ2MlKwCOjAjF5zkmn0Nx
	CDBdAgIG35xBHwcWdSaztijM3fyG7KEwPeM2vAElu/DJIvEHuaEqEDZ5W+ROaX+qr4/y
	kQ5CV4S8qWF4BWVyGeEjQXpwvNPU0AewM33UDSbWdk9KOUJP2cXgQ7rmS5XSlVuUmHPt
	ygyILAhLAoqg8Skjrcl7TCj34pQxi16d+f5cxNuoVkchz9aO2EceLzUW0Uu2jVoZG56k
	/c77ZU5cf+nq2g2fHpM7wHAFX8s6XA1PkoSoljqYqQxrV8t/wyvobXmWxQXQLpa3BkJc
	KgOA==
X-Gm-Message-State: AMke39mkrd12hr8108XN95FmZmY/BInhHKbz3UHcvh9fOE/pG1afZyOITKJnIllVyh0YcQ==
X-Received: by 10.223.136.143 with SMTP id f15mr4673395wrf.68.1487596518424; 
	Mon, 20 Feb 2017 05:15:18 -0800 (PST)
Received: from node.shutemov.name ([178.121.229.174])
	by smtp.gmail.com with ESMTPSA id
	136sm13450715wms.32.2017.02.20.05.15.17
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 20 Feb 2017 05:15:17 -0800 (PST)
Received: by node.shutemov.name (Postfix, from userid 1000)
	id 0AC5C640B705; Mon, 20 Feb 2017 16:15:16 +0300 (+03)
Date: Mon, 20 Feb 2017 16:15:16 +0300
From: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	the arch/x86 maintainers &lt;x86@kernel.org&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	linux-mm &lt;linux-mm@kvack.org&gt;,
	Linux Kernel Mailing List &lt;linux-kernel@vger.kernel.org&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Linux API &lt;linux-api@vger.kernel.org&gt;
Subject: Re: [PATCHv3 33/33] mm, x86: introduce PR_SET_MAX_VADDR and
	PR_GET_MAX_VADDR
Message-ID: &lt;20170220131515.GA9502@node.shutemov.name&gt;
References: &lt;20170217141328.164563-1-kirill.shutemov@linux.intel.com&gt;
	&lt;20170217141328.164563-34-kirill.shutemov@linux.intel.com&gt;
	&lt;CA+55aFwgbHxV-Ha2n1H=Z7P6bgcQ3D8aW=fr8ZrQ5OnvZ1vOYg@mail.gmail.com&gt;
	&lt;20170218092133.GA17471@node.shutemov.name&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20170218092133.GA17471@node.shutemov.name&gt;
User-Agent: Mutt/1.5.23.1 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 20, 2017, 1:15 p.m.</div>
<pre class="content">
On Sat, Feb 18, 2017 at 12:21:33PM +0300, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Fri, Feb 17, 2017 at 12:02:13PM -0800, Linus Torvalds wrote:</span>
<span class="quote">&gt; &gt; I also get he feeling that the whole thing is unnecessary. I&#39;m</span>
<span class="quote">&gt; &gt; wondering if we should just instead say that the whole 47 vs 56-bit</span>
<span class="quote">&gt; &gt; virtual address is _purely_ about &quot;get_unmapped_area()&quot;, and nothing</span>
<span class="quote">&gt; &gt; else.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; IOW, I&#39;m wondering if we can&#39;t just say that</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  - if the processor and kernel support 56-bit user address space, then</span>
<span class="quote">&gt; &gt; you can *always* use the whole space</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;  - but by default, get_unmapped_area() will only return mappings that</span>
<span class="quote">&gt; &gt; fit in the 47 bit address space.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; So if you use MAP_FIXED and give an address in the high range, it will</span>
<span class="quote">&gt; &gt; just always work, and the MM will always consider the task size to be</span>
<span class="quote">&gt; &gt; the full address space.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; But for the common case where a process does no use MAP_FIXED, the</span>
<span class="quote">&gt; &gt; kernel will never give a high address by default, and you have to do</span>
<span class="quote">&gt; &gt; the process control thing to say &quot;I want those high addresses&quot;.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hmm?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; In other words, I&#39;d like to at least start out trying to keep the</span>
<span class="quote">&gt; &gt; differences between the 47-bit and 56-bit models as simple and minimal</span>
<span class="quote">&gt; &gt; as possible. Not make such a big deal out of it.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We already have &quot;arch_get_unmapped_area()&quot; that controls the whole</span>
<span class="quote">&gt; &gt; &quot;what will non-MAP_FIXED mmap allocations return&quot;, so I&#39;d hope that</span>
<span class="quote">&gt; &gt; the above kind of semantics could be done without *any* actual</span>
<span class="quote">&gt; &gt; TASK_SIZE changes _anywhere_ in the VM code.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Comments?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Okay, below is my try on implementing this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve chosen to respect hint address even without MAP_FIXED, but only if</span>
<span class="quote">&gt; it doesn&#39;t collide with other mappings. Otherwise, fallback to look for</span>
<span class="quote">&gt; unmapped area within 47-bit window.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Interaction with MPX would requires more work. I&#39;m not yet sure what is the</span>
<span class="quote">&gt; right way to address it.</span>

I *think* this should do the trick for MPX too.

Dave, could you check if it looks reasonable for you?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Feb. 21, 2017, 8:46 p.m.</div>
<pre class="content">
Let me make sure I&#39;m grokking what you&#39;re trying to do here.

On 02/20/2017 05:15 AM, Kirill A. Shutemov wrote:
<span class="quote">&gt; +/* MPX cannot handle addresses above 47-bits yet. */</span>
<span class="quote">&gt; +unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="quote">&gt; +		unsigned long flags)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (!kernel_managing_mpx_tables(current-&gt;mm))</span>
<span class="quote">&gt; +		return addr;</span>
<span class="quote">&gt; +	if (addr + len &lt;= DEFAULT_MAP_WINDOW)</span>
<span class="quote">&gt; +		return addr;</span>

At this point, we know MPX management is on and the hint is for memory
above DEFAULT_MAP_WINDOW?
<span class="quote">
&gt; +	if (flags &amp; MAP_FIXED)</span>
<span class="quote">&gt; +		return -ENOMEM;</span>

... and if it&#39;s a MAP_FIXED request, fail it.
<span class="quote">
&gt; +	if (len &gt; DEFAULT_MAP_WINDOW)</span>
<span class="quote">&gt; +		return -ENOMEM;</span>

What is this case for?  If addr+len wraps?
<span class="quote">
&gt; +	/* Look for unmap area within DEFAULT_MAP_WINDOW */</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>

Otherwise, blow away the hint, which we know is high and needs to
be discarded?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Feb. 22, 2017, 1:04 p.m.</div>
<pre class="content">
On Tue, Feb 21, 2017 at 12:46:55PM -0800, Dave Hansen wrote:
<span class="quote">&gt; Let me make sure I&#39;m grokking what you&#39;re trying to do here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 02/20/2017 05:15 AM, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; +/* MPX cannot handle addresses above 47-bits yet. */</span>
<span class="quote">&gt; &gt; +unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="quote">&gt; &gt; +		unsigned long flags)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	if (!kernel_managing_mpx_tables(current-&gt;mm))</span>
<span class="quote">&gt; &gt; +		return addr;</span>
<span class="quote">&gt; &gt; +	if (addr + len &lt;= DEFAULT_MAP_WINDOW)</span>
<span class="quote">&gt; &gt; +		return addr;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; At this point, we know MPX management is on and the hint is for memory</span>
<span class="quote">&gt; above DEFAULT_MAP_WINDOW?</span>

Right.
<span class="quote">
&gt; &gt; +	if (flags &amp; MAP_FIXED)</span>
<span class="quote">&gt; &gt; +		return -ENOMEM;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ... and if it&#39;s a MAP_FIXED request, fail it.</span>

Yep.
<span class="quote">
&gt; &gt; +	if (len &gt; DEFAULT_MAP_WINDOW)</span>
<span class="quote">&gt; &gt; +		return -ENOMEM;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What is this case for?  If addr+len wraps?</span>

If len is too big to fit into DEFAULT_MAP_WINDOW there&#39;s no point in
resetting hint address as we know we can&#39;t satisfy it -- fail early.
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; +	/* Look for unmap area within DEFAULT_MAP_WINDOW */</span>
<span class="quote">&gt; &gt; +	return 0;</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Otherwise, blow away the hint, which we know is high and needs to</span>
<span class="quote">&gt; be discarded?</span>

Right.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="p_header">index e7f155c3045e..9c6315d9aa34 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/elf.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/elf.h</span>
<span class="p_chunk">@@ -250,7 +250,7 @@</span> <span class="p_context"> extern int force_personality32;</span>
    the loader.  We need to make sure that it is out of the way of the program
    that it will &quot;exec&quot;, and that there is sufficient room for the brk.  */
 
<span class="p_del">-#define ELF_ET_DYN_BASE		(TASK_SIZE / 3 * 2)</span>
<span class="p_add">+#define ELF_ET_DYN_BASE		(DEFAULT_MAP_WINDOW / 3 * 2)</span>
 
 /* This yields a mask that user programs can use to figure out what
    instruction set this CPU supports.  This could be done in user space,
<span class="p_header">diff --git a/arch/x86/include/asm/mpx.h b/arch/x86/include/asm/mpx.h</span>
<span class="p_header">index 0b416d4cf73b..b722499f6aba 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mpx.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mpx.h</span>
<span class="p_chunk">@@ -71,6 +71,9 @@</span> <span class="p_context"> static inline void mpx_mm_init(struct mm_struct *mm)</span>
 }
 void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,
 		      unsigned long start, unsigned long end);
<span class="p_add">+</span>
<span class="p_add">+unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="p_add">+		unsigned long flags);</span>
 #else
 static inline siginfo_t *mpx_generate_siginfo(struct pt_regs *regs)
 {
<span class="p_chunk">@@ -92,6 +95,12 @@</span> <span class="p_context"> static inline void mpx_notify_unmap(struct mm_struct *mm,</span>
 				    unsigned long start, unsigned long end)
 {
 }
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long mpx_unmapped_area_check(unsigned long addr,</span>
<span class="p_add">+		unsigned long len, unsigned long flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return addr;</span>
<span class="p_add">+}</span>
 #endif /* CONFIG_X86_INTEL_MPX */
 
 #endif /* _ASM_X86_MPX_H */
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index e6cfe7ba2d65..492548c87cb1 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -789,6 +789,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  */
 #define TASK_SIZE		PAGE_OFFSET
 #define TASK_SIZE_MAX		TASK_SIZE
<span class="p_add">+#define DEFAULT_MAP_WINDOW	TASK_SIZE</span>
 #define STACK_TOP		TASK_SIZE
 #define STACK_TOP_MAX		STACK_TOP
 
<span class="p_chunk">@@ -828,7 +829,9 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  * particular problem by preventing anything from being mapped
  * at the maximum canonical address.
  */
<span class="p_del">-#define TASK_SIZE_MAX	((1UL &lt;&lt; 47) - PAGE_SIZE)</span>
<span class="p_add">+#define TASK_SIZE_MAX	((1UL &lt;&lt; __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)</span>
<span class="p_add">+</span>
<span class="p_add">+#define DEFAULT_MAP_WINDOW	((1UL &lt;&lt; 47) - PAGE_SIZE)</span>
 
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
<span class="p_chunk">@@ -841,7 +844,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
 #define TASK_SIZE_OF(child)	((test_tsk_thread_flag(child, TIF_ADDR32)) ? \
 					IA32_PAGE_OFFSET : TASK_SIZE_MAX)
 
<span class="p_del">-#define STACK_TOP		TASK_SIZE</span>
<span class="p_add">+#define STACK_TOP		DEFAULT_MAP_WINDOW</span>
 #define STACK_TOP_MAX		TASK_SIZE_MAX
 
 #define INIT_THREAD  {						\
<span class="p_chunk">@@ -863,7 +866,7 @@</span> <span class="p_context"> extern void start_thread(struct pt_regs *regs, unsigned long new_ip,</span>
  * This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
  */
<span class="p_del">-#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 3))</span>
<span class="p_add">+#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(DEFAULT_MAP_WINDOW / 3))</span>
 
 #define KSTK_EIP(task)		(task_pt_regs(task)-&gt;ip)
 
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index a55ed63b9f91..df7bfc635941 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/ia32.h&gt;
 #include &lt;asm/syscalls.h&gt;
<span class="p_add">+#include &lt;asm/mpx.h&gt;</span>
 
 /*
  * Align a virtual address to avoid aliasing in the I$ on AMD F15h.
<span class="p_chunk">@@ -128,6 +129,10 @@</span> <span class="p_context"> arch_get_unmapped_area(struct file *filp, unsigned long addr,</span>
 	struct vm_unmapped_area_info info;
 	unsigned long begin, end;
 
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	if (flags &amp; MAP_FIXED)
 		return addr;
 
<span class="p_chunk">@@ -147,7 +152,7 @@</span> <span class="p_context"> arch_get_unmapped_area(struct file *filp, unsigned long addr,</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = begin;
<span class="p_del">-	info.high_limit = end;</span>
<span class="p_add">+	info.high_limit = min(end, DEFAULT_MAP_WINDOW);</span>
 	info.align_mask = 0;
 	info.align_offset = pgoff &lt;&lt; PAGE_SHIFT;
 	if (filp) {
<span class="p_chunk">@@ -167,6 +172,10 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 	unsigned long addr = addr0;
 	struct vm_unmapped_area_info info;
 
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	/* requested length too big for entire address space */
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 2ae8584b44c7..329d653f7238 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/tlb.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/pgalloc.h&gt;
<span class="p_add">+#include &lt;asm/mpx.h&gt;</span>
 
 #if 0	/* This is just for testing */
 struct page *
<span class="p_chunk">@@ -82,7 +83,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_bottomup(struct file *file,</span>
 	info.flags = 0;
 	info.length = len;
 	info.low_limit = current-&gt;mm-&gt;mmap_legacy_base;
<span class="p_del">-	info.high_limit = TASK_SIZE;</span>
<span class="p_add">+	info.high_limit = DEFAULT_MAP_WINDOW;</span>
 	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);
 	info.align_offset = 0;
 	return vm_unmapped_area(&amp;info);
<span class="p_chunk">@@ -114,7 +115,7 @@</span> <span class="p_context"> static unsigned long hugetlb_get_unmapped_area_topdown(struct file *file,</span>
 		VM_BUG_ON(addr != -ENOMEM);
 		info.flags = 0;
 		info.low_limit = TASK_UNMAPPED_BASE;
<span class="p_del">-		info.high_limit = TASK_SIZE;</span>
<span class="p_add">+		info.high_limit = DEFAULT_MAP_WINDOW;</span>
 		addr = vm_unmapped_area(&amp;info);
 	}
 
<span class="p_chunk">@@ -131,6 +132,11 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 
 	if (len &amp; ~huge_page_mask(h))
 		return -EINVAL;
<span class="p_add">+</span>
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
 
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index d2dc0438d654..a29a830ad341 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -52,7 +52,7 @@</span> <span class="p_context"> static unsigned long stack_maxrandom_size(void)</span>
  * Leave an at least ~128 MB hole with possible stack randomization.
  */
 #define MIN_GAP (128*1024*1024UL + stack_maxrandom_size())
<span class="p_del">-#define MAX_GAP (TASK_SIZE/6*5)</span>
<span class="p_add">+#define MAX_GAP (DEFAULT_MAP_WINDOW/6*5)</span>
 
 static int mmap_is_legacy(void)
 {
<span class="p_chunk">@@ -90,7 +90,7 @@</span> <span class="p_context"> static unsigned long mmap_base(unsigned long rnd)</span>
 	else if (gap &gt; MAX_GAP)
 		gap = MAX_GAP;
 
<span class="p_del">-	return PAGE_ALIGN(TASK_SIZE - gap - rnd);</span>
<span class="p_add">+	return PAGE_ALIGN(DEFAULT_MAP_WINDOW - gap - rnd);</span>
 }
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mpx.c b/arch/x86/mm/mpx.c</span>
<span class="p_header">index af59f808742f..794b26661711 100644</span>
<span class="p_header">--- a/arch/x86/mm/mpx.c</span>
<span class="p_header">+++ b/arch/x86/mm/mpx.c</span>
<span class="p_chunk">@@ -354,10 +354,19 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	 */
 	bd_base = mpx_get_bounds_dir();
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_add">+</span>
<span class="p_add">+	/* MPX doesn&#39;t support addresses above 47-bits yet. */</span>
<span class="p_add">+	if (find_vma(mm, DEFAULT_MAP_WINDOW)) {</span>
<span class="p_add">+		pr_warn_once(&quot;%s (%d): MPX cannot handle addresses &quot;</span>
<span class="p_add">+				&quot;above 47-bits. Disabling.&quot;,</span>
<span class="p_add">+				current-&gt;comm, current-&gt;pid);</span>
<span class="p_add">+		ret = -ENXIO;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
 	mm-&gt;context.bd_addr = bd_base;
 	if (mm-&gt;context.bd_addr == MPX_INVALID_BOUNDS_DIR)
 		ret = -ENXIO;
<span class="p_del">-</span>
<span class="p_add">+out:</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 	return ret;
 }
<span class="p_chunk">@@ -1037,3 +1046,20 @@</span> <span class="p_context"> void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	if (ret)
 		force_sig(SIGSEGV, current);
 }
<span class="p_add">+</span>
<span class="p_add">+/* MPX cannot handle addresses above 47-bits yet. */</span>
<span class="p_add">+unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="p_add">+		unsigned long flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!kernel_managing_mpx_tables(current-&gt;mm))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+	if (addr + len &lt;= DEFAULT_MAP_WINDOW)</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+	if (flags &amp; MAP_FIXED)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+	if (len &gt; DEFAULT_MAP_WINDOW)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Look for unmap area within DEFAULT_MAP_WINDOW */</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



