
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM-v25,16/19] mm/migrate: support un-addressable ZONE_DEVICE page in migration v3 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM-v25,16/19] mm/migrate: support un-addressable ZONE_DEVICE page in migration v3</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 17, 2017, 12:05 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170817000548.32038-17-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9904757/mbox/"
   >mbox</a>
|
   <a href="/patch/9904757/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9904757/">/patch/9904757/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	075E360231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:07:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EDE7228955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:07:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E16B428A72; Thu, 17 Aug 2017 00:07:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F298928955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:07:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752608AbdHQAHS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Aug 2017 20:07:18 -0400
Received: from mx1.redhat.com ([209.132.183.28]:54118 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752357AbdHQAGW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Aug 2017 20:06:22 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 0F5DB6B343;
	Thu, 17 Aug 2017 00:06:22 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 0F5DB6B343
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx04.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=jglisse@redhat.com
Received: from localhost.localdomain.com (ovpn-120-132.rdu2.redhat.com
	[10.10.120.132])
	by smtp.corp.redhat.com (Postfix) with ESMTP id B91E65C7A7;
	Thu, 17 Aug 2017 00:06:20 +0000 (UTC)
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	David Nellans &lt;dnellans@nvidia.com&gt;,
	Balbir Singh &lt;bsingharora@gmail.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [HMM-v25 16/19] mm/migrate: support un-addressable ZONE_DEVICE page
	in migration v3
Date: Wed, 16 Aug 2017 20:05:45 -0400
Message-Id: &lt;20170817000548.32038-17-jglisse@redhat.com&gt;
In-Reply-To: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
References: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.28]);
	Thu, 17 Aug 2017 00:06:22 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - Aug. 17, 2017, 12:05 a.m.</div>
<pre class="content">
Allow to unmap and restore special swap entry of un-addressable
ZONE_DEVICE memory.

Changed since v2:
  - un-conditionaly allow device private memory to be migrated (it can
    not be pin to pointless to check reference count).
Changed since v1:
  - s/device unaddressable/device private/
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
Cc: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
---
 include/linux/migrate.h |  10 +++-
 mm/migrate.c            | 149 +++++++++++++++++++++++++++++++++++++++---------
 mm/page_vma_mapped.c    |  10 ++++
 mm/rmap.c               |  25 ++++++++
 4 files changed, 164 insertions(+), 30 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/migrate.h b/include/linux/migrate.h</span>
<span class="p_header">index 8f73cebfc3f5..8dc8f0a3f1af 100644</span>
<span class="p_header">--- a/include/linux/migrate.h</span>
<span class="p_header">+++ b/include/linux/migrate.h</span>
<span class="p_chunk">@@ -159,12 +159,18 @@</span> <span class="p_context"> static inline int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 
 #ifdef CONFIG_MIGRATION
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Watch out for PAE architecture, which has an unsigned long, and might not</span>
<span class="p_add">+ * have enough bits to store all physical address and flags. So far we have</span>
<span class="p_add">+ * enough room for all our flags.</span>
<span class="p_add">+ */</span>
 #define MIGRATE_PFN_VALID	(1UL &lt;&lt; 0)
 #define MIGRATE_PFN_MIGRATE	(1UL &lt;&lt; 1)
 #define MIGRATE_PFN_LOCKED	(1UL &lt;&lt; 2)
 #define MIGRATE_PFN_WRITE	(1UL &lt;&lt; 3)
<span class="p_del">-#define MIGRATE_PFN_ERROR	(1UL &lt;&lt; 4)</span>
<span class="p_del">-#define MIGRATE_PFN_SHIFT	5</span>
<span class="p_add">+#define MIGRATE_PFN_DEVICE	(1UL &lt;&lt; 4)</span>
<span class="p_add">+#define MIGRATE_PFN_ERROR	(1UL &lt;&lt; 5)</span>
<span class="p_add">+#define MIGRATE_PFN_SHIFT	6</span>
 
 static inline struct page *migrate_pfn_to_page(unsigned long mpfn)
 {
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 57d1fa7a8e62..6c8a9826da32 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -36,6 +36,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb.h&gt;
 #include &lt;linux/hugetlb_cgroup.h&gt;
 #include &lt;linux/gfp.h&gt;
<span class="p_add">+#include &lt;linux/memremap.h&gt;</span>
 #include &lt;linux/balloon_compaction.h&gt;
 #include &lt;linux/mmu_notifier.h&gt;
 #include &lt;linux/page_idle.h&gt;
<span class="p_chunk">@@ -236,7 +237,13 @@</span> <span class="p_context"> static bool remove_migration_pte(struct page *page, struct vm_area_struct *vma,</span>
 		if (is_write_migration_entry(entry))
 			pte = maybe_mkwrite(pte, vma);
 
<span class="p_del">-		flush_dcache_page(new);</span>
<span class="p_add">+		if (unlikely(is_zone_device_page(new)) &amp;&amp;</span>
<span class="p_add">+		    is_device_private_page(new)) {</span>
<span class="p_add">+			entry = make_device_private_entry(new, pte_write(pte));</span>
<span class="p_add">+			pte = swp_entry_to_pte(entry);</span>
<span class="p_add">+		} else</span>
<span class="p_add">+			flush_dcache_page(new);</span>
<span class="p_add">+</span>
 #ifdef CONFIG_HUGETLB_PAGE
 		if (PageHuge(new)) {
 			pte = pte_mkhuge(pte);
<span class="p_chunk">@@ -2216,17 +2223,40 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 		pte = *ptep;
 		pfn = pte_pfn(pte);
 
<span class="p_del">-		if (!pte_present(pte)) {</span>
<span class="p_add">+		if (pte_none(pte)) {</span>
 			mpfn = pfn = 0;
 			goto next;
 		}
 
<span class="p_add">+		if (!pte_present(pte)) {</span>
<span class="p_add">+			mpfn = pfn = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Only care about unaddressable device page special</span>
<span class="p_add">+			 * page table entry. Other special swap entries are not</span>
<span class="p_add">+			 * migratable, and we ignore regular swapped page.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			entry = pte_to_swp_entry(pte);</span>
<span class="p_add">+			if (!is_device_private_entry(entry))</span>
<span class="p_add">+				goto next;</span>
<span class="p_add">+</span>
<span class="p_add">+			page = device_private_entry_to_page(entry);</span>
<span class="p_add">+			mpfn = migrate_pfn(page_to_pfn(page))|</span>
<span class="p_add">+				MIGRATE_PFN_DEVICE | MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+			if (is_write_device_private_entry(entry))</span>
<span class="p_add">+				mpfn |= MIGRATE_PFN_WRITE;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			page = vm_normal_page(migrate-&gt;vma, addr, pte);</span>
<span class="p_add">+			mpfn = migrate_pfn(pfn) | MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+			mpfn |= pte_write(pte) ? MIGRATE_PFN_WRITE : 0;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		/* FIXME support THP */
<span class="p_del">-		page = vm_normal_page(migrate-&gt;vma, addr, pte);</span>
 		if (!page || !page-&gt;mapping || PageTransCompound(page)) {
 			mpfn = pfn = 0;
 			goto next;
 		}
<span class="p_add">+		pfn = page_to_pfn(page);</span>
 
 		/*
 		 * By getting a reference on the page we pin it and that blocks
<span class="p_chunk">@@ -2239,8 +2269,6 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 		 */
 		get_page(page);
 		migrate-&gt;cpages++;
<span class="p_del">-		mpfn = migrate_pfn(pfn) | MIGRATE_PFN_MIGRATE;</span>
<span class="p_del">-		mpfn |= pte_write(pte) ? MIGRATE_PFN_WRITE : 0;</span>
 
 		/*
 		 * Optimize for the common case where page is only mapped once
<span class="p_chunk">@@ -2267,10 +2295,13 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 			 */
 			page_remove_rmap(page, false);
 			put_page(page);
<span class="p_del">-			unmapped++;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (pte_present(pte))</span>
<span class="p_add">+				unmapped++;</span>
 		}
 
 next:
<span class="p_add">+		migrate-&gt;dst[migrate-&gt;npages] = 0;</span>
 		migrate-&gt;src[migrate-&gt;npages++] = mpfn;
 	}
 	arch_leave_lazy_mmu_mode();
<span class="p_chunk">@@ -2340,6 +2371,28 @@</span> <span class="p_context"> static bool migrate_vma_check_page(struct page *page)</span>
 	if (PageCompound(page))
 		return false;
 
<span class="p_add">+	/* Page from ZONE_DEVICE have one extra reference */</span>
<span class="p_add">+	if (is_zone_device_page(page)) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Private page can never be pin as they have no valid pte and</span>
<span class="p_add">+		 * GUP will fail for those. Yet if there is a pending migration</span>
<span class="p_add">+		 * a thread might try to wait on the pte migration entry and</span>
<span class="p_add">+		 * will bump the page reference count. Sadly there is no way to</span>
<span class="p_add">+		 * differentiate a regular pin from migration wait. Hence to</span>
<span class="p_add">+		 * avoid 2 racing thread trying to migrate back to CPU to enter</span>
<span class="p_add">+		 * infinite loop (one stoping migration because the other is</span>
<span class="p_add">+		 * waiting on pte migration entry). We always return true here.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * FIXME proper solution is to rework migration_entry_wait() so</span>
<span class="p_add">+		 * it does not need to take a reference on page.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (is_device_private_page(page))</span>
<span class="p_add">+			return true;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Other ZONE_DEVICE memory type are not supported */</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if ((page_count(page) - extra) &gt; page_mapcount(page))
 		return false;
 
<span class="p_chunk">@@ -2390,24 +2443,30 @@</span> <span class="p_context"> static void migrate_vma_prepare(struct migrate_vma *migrate)</span>
 			migrate-&gt;src[i] |= MIGRATE_PFN_LOCKED;
 		}
 
<span class="p_del">-		if (!PageLRU(page) &amp;&amp; allow_drain) {</span>
<span class="p_del">-			/* Drain CPU&#39;s pagevec */</span>
<span class="p_del">-			lru_add_drain_all();</span>
<span class="p_del">-			allow_drain = false;</span>
<span class="p_del">-		}</span>
<span class="p_add">+		/* ZONE_DEVICE pages are not on LRU */</span>
<span class="p_add">+		if (!is_zone_device_page(page)) {</span>
<span class="p_add">+			if (!PageLRU(page) &amp;&amp; allow_drain) {</span>
<span class="p_add">+				/* Drain CPU&#39;s pagevec */</span>
<span class="p_add">+				lru_add_drain_all();</span>
<span class="p_add">+				allow_drain = false;</span>
<span class="p_add">+			}</span>
 
<span class="p_del">-		if (isolate_lru_page(page)) {</span>
<span class="p_del">-			if (remap) {</span>
<span class="p_del">-				migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;</span>
<span class="p_del">-				migrate-&gt;cpages--;</span>
<span class="p_del">-				restore++;</span>
<span class="p_del">-			} else {</span>
<span class="p_del">-				migrate-&gt;src[i] = 0;</span>
<span class="p_del">-				unlock_page(page);</span>
<span class="p_del">-				migrate-&gt;cpages--;</span>
<span class="p_del">-				put_page(page);</span>
<span class="p_add">+			if (isolate_lru_page(page)) {</span>
<span class="p_add">+				if (remap) {</span>
<span class="p_add">+					migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+					migrate-&gt;cpages--;</span>
<span class="p_add">+					restore++;</span>
<span class="p_add">+				} else {</span>
<span class="p_add">+					migrate-&gt;src[i] = 0;</span>
<span class="p_add">+					unlock_page(page);</span>
<span class="p_add">+					migrate-&gt;cpages--;</span>
<span class="p_add">+					put_page(page);</span>
<span class="p_add">+				}</span>
<span class="p_add">+				continue;</span>
 			}
<span class="p_del">-			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* Drop the reference we took in collect */</span>
<span class="p_add">+			put_page(page);</span>
 		}
 
 		if (!migrate_vma_check_page(page)) {
<span class="p_chunk">@@ -2416,14 +2475,19 @@</span> <span class="p_context"> static void migrate_vma_prepare(struct migrate_vma *migrate)</span>
 				migrate-&gt;cpages--;
 				restore++;
 
<span class="p_del">-				get_page(page);</span>
<span class="p_del">-				putback_lru_page(page);</span>
<span class="p_add">+				if (!is_zone_device_page(page)) {</span>
<span class="p_add">+					get_page(page);</span>
<span class="p_add">+					putback_lru_page(page);</span>
<span class="p_add">+				}</span>
 			} else {
 				migrate-&gt;src[i] = 0;
 				unlock_page(page);
 				migrate-&gt;cpages--;
 
<span class="p_del">-				putback_lru_page(page);</span>
<span class="p_add">+				if (!is_zone_device_page(page))</span>
<span class="p_add">+					putback_lru_page(page);</span>
<span class="p_add">+				else</span>
<span class="p_add">+					put_page(page);</span>
 			}
 		}
 	}
<span class="p_chunk">@@ -2494,7 +2558,10 @@</span> <span class="p_context"> static void migrate_vma_unmap(struct migrate_vma *migrate)</span>
 		unlock_page(page);
 		restore--;
 
<span class="p_del">-		putback_lru_page(page);</span>
<span class="p_add">+		if (is_zone_device_page(page))</span>
<span class="p_add">+			put_page(page);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			putback_lru_page(page);</span>
 	}
 }
 
<span class="p_chunk">@@ -2525,6 +2592,26 @@</span> <span class="p_context"> static void migrate_vma_pages(struct migrate_vma *migrate)</span>
 
 		mapping = page_mapping(page);
 
<span class="p_add">+		if (is_zone_device_page(newpage)) {</span>
<span class="p_add">+			if (is_device_private_page(newpage)) {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * For now only support private anonymous when</span>
<span class="p_add">+				 * migrating to un-addressable device memory.</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				if (mapping) {</span>
<span class="p_add">+					migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+					continue;</span>
<span class="p_add">+				}</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * Other types of ZONE_DEVICE page are not</span>
<span class="p_add">+				 * supported.</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		r = migrate_page(mapping, newpage, page, MIGRATE_SYNC_NO_COPY);
 		if (r != MIGRATEPAGE_SUCCESS)
 			migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;
<span class="p_chunk">@@ -2565,11 +2652,17 @@</span> <span class="p_context"> static void migrate_vma_finalize(struct migrate_vma *migrate)</span>
 		unlock_page(page);
 		migrate-&gt;cpages--;
 
<span class="p_del">-		putback_lru_page(page);</span>
<span class="p_add">+		if (is_zone_device_page(page))</span>
<span class="p_add">+			put_page(page);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			putback_lru_page(page);</span>
 
 		if (newpage != page) {
 			unlock_page(newpage);
<span class="p_del">-			putback_lru_page(newpage);</span>
<span class="p_add">+			if (is_zone_device_page(newpage))</span>
<span class="p_add">+				put_page(newpage);</span>
<span class="p_add">+			else</span>
<span class="p_add">+				putback_lru_page(newpage);</span>
 		}
 	}
 }
<span class="p_header">diff --git a/mm/page_vma_mapped.c b/mm/page_vma_mapped.c</span>
<span class="p_header">index 3bd3008db4cb..6a03946469a9 100644</span>
<span class="p_header">--- a/mm/page_vma_mapped.c</span>
<span class="p_header">+++ b/mm/page_vma_mapped.c</span>
<span class="p_chunk">@@ -48,6 +48,7 @@</span> <span class="p_context"> static bool check_pte(struct page_vma_mapped_walk *pvmw)</span>
 		if (!is_swap_pte(*pvmw-&gt;pte))
 			return false;
 		entry = pte_to_swp_entry(*pvmw-&gt;pte);
<span class="p_add">+</span>
 		if (!is_migration_entry(entry))
 			return false;
 		if (migration_entry_to_page(entry) - pvmw-&gt;page &gt;=
<span class="p_chunk">@@ -60,6 +61,15 @@</span> <span class="p_context"> static bool check_pte(struct page_vma_mapped_walk *pvmw)</span>
 		WARN_ON_ONCE(1);
 #endif
 	} else {
<span class="p_add">+		if (is_swap_pte(*pvmw-&gt;pte)) {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+			entry = pte_to_swp_entry(*pvmw-&gt;pte);</span>
<span class="p_add">+			if (is_device_private_entry(entry) &amp;&amp;</span>
<span class="p_add">+			    device_private_entry_to_page(entry) == pvmw-&gt;page)</span>
<span class="p_add">+				return true;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		if (!pte_present(*pvmw-&gt;pte))
 			return false;
 
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 2c55e7b8f8f4..60e47a96cdbd 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -63,6 +63,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb.h&gt;
 #include &lt;linux/backing-dev.h&gt;
 #include &lt;linux/page_idle.h&gt;
<span class="p_add">+#include &lt;linux/memremap.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 
<span class="p_chunk">@@ -1330,6 +1331,10 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	if ((flags &amp; TTU_MUNLOCK) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_LOCKED))
 		return true;
 
<span class="p_add">+	if (IS_ENABLED(CONFIG_MIGRATION) &amp;&amp; (flags &amp; TTU_MIGRATION) &amp;&amp;</span>
<span class="p_add">+	    is_zone_device_page(page) &amp;&amp; !is_device_private_page(page))</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
 	if (flags &amp; TTU_SPLIT_HUGE_PMD) {
 		split_huge_pmd_address(vma, address,
 				flags &amp; TTU_SPLIT_FREEZE, page);
<span class="p_chunk">@@ -1378,6 +1383,26 @@</span> <span class="p_context"> static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 		subpage = page - page_to_pfn(page) + pte_pfn(*pvmw.pte);
 		address = pvmw.address;
 
<span class="p_add">+		if (IS_ENABLED(CONFIG_MIGRATION) &amp;&amp;</span>
<span class="p_add">+		    (flags &amp; TTU_MIGRATION) &amp;&amp;</span>
<span class="p_add">+		    is_zone_device_page(page)) {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+			pte_t swp_pte;</span>
<span class="p_add">+</span>
<span class="p_add">+			pteval = ptep_get_and_clear(mm, address, pvmw.pte);</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Store the pfn of the page in a special migration</span>
<span class="p_add">+			 * pte. do_swap_page() will wait until the migration</span>
<span class="p_add">+			 * pte is removed and then restart fault handling.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			entry = make_migration_entry(page, 0);</span>
<span class="p_add">+			swp_pte = swp_entry_to_pte(entry);</span>
<span class="p_add">+			if (pte_soft_dirty(pteval))</span>
<span class="p_add">+				swp_pte = pte_swp_mksoft_dirty(swp_pte);</span>
<span class="p_add">+			set_pte_at(mm, address, pvmw.pte, swp_pte);</span>
<span class="p_add">+			goto discard;</span>
<span class="p_add">+		}</span>
 
 		if (!(flags &amp; TTU_IGNORE_ACCESS)) {
 			if (ptep_clear_flush_young_notify(vma, address,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



