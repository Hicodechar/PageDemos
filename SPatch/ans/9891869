
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,09/10] mm: add a user_virt_to_phys symbol - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,09/10] mm: add a user_virt_to_phys symbol</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 9, 2017, 8:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170809200755.11234-10-tycho@docker.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9891869/mbox/"
   >mbox</a>
|
   <a href="/patch/9891869/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9891869/">/patch/9891869/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	67E3460363 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:09:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 597122898B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:09:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4E58F28A84; Wed,  9 Aug 2017 20:09:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8F872289E2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:09:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752228AbdHIUJK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 9 Aug 2017 16:09:10 -0400
Received: from mail-io0-f178.google.com ([209.85.223.178]:38299 &quot;EHLO
	mail-io0-f178.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752184AbdHIUJG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 9 Aug 2017 16:09:06 -0400
Received: by mail-io0-f178.google.com with SMTP id g71so2249857ioe.5
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 09 Aug 2017 13:09:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=docker.com; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=/ejsu5XCLe8S/YK69gwLtoRl+eiAB+8LsJt/VoWMKzQ=;
	b=Qm4BcEP3GblXYVfIFki8Jamf8+Yn3WhSYKIlV2XkP3Nx8N2vxrE9RW9lv/xwXRQRoa
	ahNWeoh5Wos+fnL6SCSMIPf2tDwVV1uo5DKwjBnmIBgQ2lg2DYStngb+CcQdAJ8exHUb
	MiUhLuhChss2nhlSG8GjttANH9hk659VJDkRk=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=/ejsu5XCLe8S/YK69gwLtoRl+eiAB+8LsJt/VoWMKzQ=;
	b=DQR3JTaTai568f5AmaDm8eI4QMSow9kiT7O4ufb6a29e9ir2F/PjZjcCkGH2cIAnA5
	jZEX4rKDsMh5McDTQPkk6VOWdCtMvQi0vM59oWtVZuCf5k8zQ4lCNEs29tGyIRmAQDtm
	A4QoeM32a1dIaS5heNH2cFmnvYNWOMBJWqo5BzE1T9ZdOdjTwnSIxx/yo5vndaS4jYm7
	5E6D1VrHo0WHRoyLi/mgrwKiPudE7hMxKFAbe7ku+YrD2Hu0TBtD3hHEI6oA+MLcBxe5
	/V3bMdrp4xqmQmH+hwVoXbIQq02iYI+kC3GzrNjQGBmb90McZMgaxOO0uLwx3daLZkwh
	1nfg==
X-Gm-Message-State: AIVw113iQbIxSQL5dew1mrHsZdWQzZw/60gRygAYDNNFnas5L5HoQo2S
	j5g7MyVCtBm3urSAeG6Nyg==
X-Received: by 10.107.16.100 with SMTP id y97mr7499112ioi.117.1502309345385; 
	Wed, 09 Aug 2017 13:09:05 -0700 (PDT)
Received: from localhost.localdomain ([8.24.24.129])
	by smtp.gmail.com with ESMTPSA id
	p63sm2324422itg.32.2017.08.09.13.09.04
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 09 Aug 2017 13:09:04 -0700 (PDT)
From: Tycho Andersen &lt;tycho@docker.com&gt;
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, kernel-hardening@lists.openwall.com,
	Marco Benatto &lt;marco.antonio.780@gmail.com&gt;,
	Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;,
	Tycho Andersen &lt;tycho@docker.com&gt;
Subject: [PATCH v5 09/10] mm: add a user_virt_to_phys symbol
Date: Wed,  9 Aug 2017 14:07:54 -0600
Message-Id: &lt;20170809200755.11234-10-tycho@docker.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170809200755.11234-1-tycho@docker.com&gt;
References: &lt;20170809200755.11234-1-tycho@docker.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 9, 2017, 8:07 p.m.</div>
<pre class="content">
We need someting like this for testing XPFO. Since it&#39;s architecture
specific, putting it in the test code is slightly awkward, so let&#39;s make it
an arch-specific symbol and export it for use in LKDTM.
<span class="signed-off-by">
Signed-off-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="tested-by">Tested-by: Marco Benatto &lt;marco.antonio.780@gmail.com&gt;</span>
---
 arch/arm64/mm/xpfo.c | 51 ++++++++++++++++++++++++++++++++++++++++++++++
 arch/x86/mm/xpfo.c   | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/xpfo.h |  4 ++++
 3 files changed, 112 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/xpfo.c b/arch/arm64/mm/xpfo.c</span>
<span class="p_header">index c4deb2b720cf..a221799a9242 100644</span>
<span class="p_header">--- a/arch/arm64/mm/xpfo.c</span>
<span class="p_header">+++ b/arch/arm64/mm/xpfo.c</span>
<span class="p_chunk">@@ -107,3 +107,54 @@</span> <span class="p_context"> inline void xpfo_dma_map_unmap_area(bool map, const void *addr, size_t size,</span>
 
 	local_irq_restore(flags);
 }
<span class="p_add">+</span>
<span class="p_add">+/* Convert a user space virtual address to a physical address.</span>
<span class="p_add">+ * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="p_add">+ * arch/x86/mm/pageattr.c</span>
<span class="p_add">+ */</span>
<span class="p_add">+phys_addr_t user_virt_to_phys(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t phys_addr;</span>
<span class="p_add">+	unsigned long offset;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_sect(*pud) || !pud_present(*pud)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PUD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_sect(*pmd) || !pmd_present(*pmd)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pmd_pfn(*pmd) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PMD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pte =  pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	phys_addr = (phys_addr_t)pte_pfn(*pte) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	offset = addr &amp; ~PAGE_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return (phys_addr_t)(phys_addr | offset);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(user_virt_to_phys);</span>
<span class="p_header">diff --git a/arch/x86/mm/xpfo.c b/arch/x86/mm/xpfo.c</span>
<span class="p_header">index 3635b37f2fc5..a1344f27406c 100644</span>
<span class="p_header">--- a/arch/x86/mm/xpfo.c</span>
<span class="p_header">+++ b/arch/x86/mm/xpfo.c</span>
<span class="p_chunk">@@ -94,3 +94,60 @@</span> <span class="p_context"> inline void xpfo_flush_kernel_page(struct page *page, int order)</span>
 
 	flush_tlb_kernel_range(kaddr, kaddr + (1 &lt;&lt; order) * size);
 }
<span class="p_add">+</span>
<span class="p_add">+/* Convert a user space virtual address to a physical address.</span>
<span class="p_add">+ * Shamelessly copied from slow_virt_to_phys() and lookup_address() in</span>
<span class="p_add">+ * arch/x86/mm/pageattr.c</span>
<span class="p_add">+ */</span>
<span class="p_add">+phys_addr_t user_virt_to_phys(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t phys_addr;</span>
<span class="p_add">+	unsigned long offset;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(current-&gt;mm, addr);</span>
<span class="p_add">+	if (pgd_none(*pgd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (p4d_large(*p4d) || !p4d_present(*p4d)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)p4d_pfn(*p4d) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~P4D_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
<span class="p_add">+	if (pud_none(*pud))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pud_large(*pud) || !pud_present(*pud)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pud_pfn(*pud) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PUD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (pmd_none(*pmd))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_large(*pmd) || !pmd_present(*pmd)) {</span>
<span class="p_add">+		phys_addr = (unsigned long)pmd_pfn(*pmd) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+		offset = addr &amp; ~PMD_MASK;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pte =  pte_offset_kernel(pmd, addr);</span>
<span class="p_add">+	phys_addr = (phys_addr_t)pte_pfn(*pte) &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	offset = addr &amp; ~PAGE_MASK;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return (phys_addr_t)(phys_addr | offset);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(user_virt_to_phys);</span>
<span class="p_header">diff --git a/include/linux/xpfo.h b/include/linux/xpfo.h</span>
<span class="p_header">index 6b61f7b820f4..449cd8dbf064 100644</span>
<span class="p_header">--- a/include/linux/xpfo.h</span>
<span class="p_header">+++ b/include/linux/xpfo.h</span>
<span class="p_chunk">@@ -16,6 +16,8 @@</span> <span class="p_context"></span>
 
 #ifdef CONFIG_XPFO
 
<span class="p_add">+#include &lt;linux/types.h&gt;</span>
<span class="p_add">+</span>
 extern struct page_ext_operations page_xpfo_ops;
 
 void set_kpte(void *kaddr, struct page *page, pgprot_t prot);
<span class="p_chunk">@@ -29,6 +31,8 @@</span> <span class="p_context"> void xpfo_free_pages(struct page *page, int order);</span>
 
 bool xpfo_page_is_unmapped(struct page *page);
 
<span class="p_add">+extern phys_addr_t user_virt_to_phys(unsigned long addr);</span>
<span class="p_add">+</span>
 #else /* !CONFIG_XPFO */
 
 static inline void xpfo_kmap(void *kaddr, struct page *page) { }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



