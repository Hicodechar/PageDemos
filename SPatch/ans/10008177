
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,02/09] iommu/ipmmu-vmsa: Add optional root device feature - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,02/09] iommu/ipmmu-vmsa: Add optional root device feature</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 16, 2017, 12:29 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;150815697605.32763.17929024813073986910.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10008177/mbox/"
   >mbox</a>
|
   <a href="/patch/10008177/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10008177/">/patch/10008177/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F29F860230 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 12:31:40 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E7B192841C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 12:31:40 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DC3492845E; Mon, 16 Oct 2017 12:31:40 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED, FREEMAIL_FROM, RCVD_IN_DNSWL_HI,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 583BA2841C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 12:31:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752703AbdJPMbi (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Oct 2017 08:31:38 -0400
Received: from mail-pg0-f67.google.com ([74.125.83.67]:44803 &quot;EHLO
	mail-pg0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752362AbdJPMbg (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Oct 2017 08:31:36 -0400
Received: by mail-pg0-f67.google.com with SMTP id j3so6694588pga.1;
	Mon, 16 Oct 2017 05:31:36 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=Vd0e3Q4Oe4MBdLFGiVUJkqJjBI9/CIC0/A2ZjEKYz58=;
	b=syppwk8d7f2Q3XPHeRmHoqOlHQbEvdWOWELSHv4tsphdGY//3K0ETK3KaeClRHy/c6
	ezLH1TSpBbhsyVcMoT0fPpnSfBCAkp3PFPXl0A56OKEwIF2QI4JGYTB7kJBitcI24eQ4
	QV8jt8Kw+f7ns58z6fpavWPgfd7OHhr1J5XGq19KIJaZy6ph0I/p6PbBjJQEsaB0YXE8
	UOQCAiY9S5digAC/EAizJoMkrFDTiBwPq+tSsCg0pGyzZiJNdUvFILDMX5x76N5bFnJu
	4HUeE/Ze4PHmUYOgQGr+znX+cZuV0If+tAi3cuX4hjxK+OYQRKelMz4D6J5qRO3Utw7j
	Rh+w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=Vd0e3Q4Oe4MBdLFGiVUJkqJjBI9/CIC0/A2ZjEKYz58=;
	b=UNBg59aNRsKs4arpYeHQ8CEQQYpQ04jCAIoT+S5ReJlbx14UTmeYjkWUEE0CFCTtix
	VHiIG1wEmrE7e2saM4okCdOAaxmknt8T9a9hbh8yH4GqktKaz5q11ZzayZ4OFfdmW0nf
	QvbH0KK8NJqu3lwPE3wy+ZTaW+KgoqUCChNgw7n8Ca8Xwy7A+KygpEcJfAHkfmxlwB5G
	JH3YhafRMpJssa2evYJ1Ps5v+56GikSOCO8Zp860DghZoEBadViNN7pVVnSiqTgh3ZGJ
	5FSPLg40wCu7yUCP8GHfV09hYqlgrxs0GbULjTFrR3uUcZCHnZ2wmma9y3iP9C8X0mXC
	nkDQ==
X-Gm-Message-State: AMCzsaXCu7X0YeyQooSexLGM9hCZtstJJp3t8+a1wnE/Qah6BuvPXrai
	omvU2mQa7NA82Av4uApbVmQ=
X-Google-Smtp-Source: AOwi7QAnFJdJBuj48R4P4aeQt3saOQEwmZqp4arIlC8jm8D/XTyFh7/zX/QD2xepHd6jqzuETvVrlQ==
X-Received: by 10.84.252.141 with SMTP id y13mr8631992pll.295.1508157096261; 
	Mon, 16 Oct 2017 05:31:36 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	d12sm12953547pgt.16.2017.10.16.05.31.32
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Mon, 16 Oct 2017 05:31:34 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: joro@8bytes.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	linux-kernel@vger.kernel.org, linux-renesas-soc@vger.kernel.org,
	iommu@lists.linux-foundation.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;, robin.murphy@arm.com,
	m.szyprowski@samsung.com
Date: Mon, 16 Oct 2017 21:29:36 +0900
Message-Id: &lt;150815697605.32763.17929024813073986910.sendpatchset@little-apple&gt;
In-Reply-To: &lt;150815695455.32763.1660214306749693609.sendpatchset@little-apple&gt;
References: &lt;150815695455.32763.1660214306749693609.sendpatchset@little-apple&gt;
Subject: [PATCH v5 02/09] iommu/ipmmu-vmsa: Add optional root device feature
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - Oct. 16, 2017, 12:29 p.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Add root device handling to the IPMMU driver by allowing certain
DT compat strings to enable has_cache_leaf_nodes that in turn will
support both root devices with interrupts and leaf devices that
face the actual IPMMU consumer devices.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
---

 Changes since V4: (Many thanks to Robin for feedback)
 - Put the root pointer under struct ipmmu_vmsa_device
 - Drop is_leaf flag
 - Use driver_for_each_device instead of local list of devices
 - Return -EPROBE_DEFER to hook up root device first

 Changes since V3:
 - Reworked root finding code to make it easier to follow, thanks Geert!
 
 Changes since V2:
 - Fixed a bug in ipmmu_find_root() when only leaf devices are present
 - Broke out __ipmmu_find_root() to allow -&gt;xlate() check for root devices

 Changes since V1:
 - Moved patch to earlier in the series
 - Updated code to work with recent changes in:
   [PATCH v3 00/06] iommu/ipmmu-vmsa: IPMMU multi-arch update V3

 drivers/iommu/ipmmu-vmsa.c |   90 +++++++++++++++++++++++++++++++++++---------
 1 file changed, 73 insertions(+), 17 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0009/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2017-10-16 19:43:27.020607110 +0900</span>
<span class="p_chunk">@@ -36,12 +36,14 @@</span> <span class="p_context"></span>
 
 struct ipmmu_features {
 	bool use_ns_alias_offset;
<span class="p_add">+	bool has_cache_leaf_nodes;</span>
 };
 
 struct ipmmu_vmsa_device {
 	struct device *dev;
 	void __iomem *base;
 	struct iommu_device iommu;
<span class="p_add">+	struct ipmmu_vmsa_device *root;</span>
 	const struct ipmmu_features *features;
 	unsigned int num_utlbs;
 	spinlock_t lock;			/* Protects ctx and domains[] */
<span class="p_chunk">@@ -199,6 +201,36 @@</span> <span class="p_context"> static struct ipmmu_vmsa_iommu_priv *to_</span>
 #define IMUASID_ASID0_SHIFT		0
 
 /* -----------------------------------------------------------------------------
<span class="p_add">+ * Root device handling</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+static struct platform_driver ipmmu_driver;</span>
<span class="p_add">+</span>
<span class="p_add">+static bool ipmmu_is_root(struct ipmmu_vmsa_device *mmu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return mmu-&gt;root == mmu;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int __ipmmu_check_device(struct device *dev, void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct ipmmu_vmsa_device *mmu = dev_get_drvdata(dev);</span>
<span class="p_add">+	struct ipmmu_vmsa_device **rootp = data;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ipmmu_is_root(mmu))</span>
<span class="p_add">+		*rootp = mmu;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static struct ipmmu_vmsa_device *ipmmu_find_root(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct ipmmu_vmsa_device *root = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	return driver_for_each_device(&amp;ipmmu_driver.driver, NULL, &amp;root,</span>
<span class="p_add">+				      __ipmmu_check_device) == 0 ? root : NULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* -----------------------------------------------------------------------------</span>
  * Read/Write Access
  */
 
<span class="p_chunk">@@ -215,13 +247,15 @@</span> <span class="p_context"> static void ipmmu_write(struct ipmmu_vms</span>
 
 static u32 ipmmu_ctx_read(struct ipmmu_vmsa_domain *domain, unsigned int reg)
 {
<span class="p_del">-	return ipmmu_read(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
<span class="p_add">+	return ipmmu_read(domain-&gt;mmu-&gt;root,</span>
<span class="p_add">+			  domain-&gt;context_id * IM_CTX_SIZE + reg);</span>
 }
 
 static void ipmmu_ctx_write(struct ipmmu_vmsa_domain *domain, unsigned int reg,
 			    u32 data)
 {
<span class="p_del">-	ipmmu_write(domain-&gt;mmu, domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
<span class="p_add">+	ipmmu_write(domain-&gt;mmu-&gt;root,</span>
<span class="p_add">+		    domain-&gt;context_id * IM_CTX_SIZE + reg, data);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -369,12 +403,12 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	 * TODO: Add support for coherent walk through CCI with DVM and remove
 	 * cache handling. For now, delegate it to the io-pgtable code.
 	 */
<span class="p_del">-	domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;dev;</span>
<span class="p_add">+	domain-&gt;cfg.iommu_dev = domain-&gt;mmu-&gt;root-&gt;dev;</span>
 
 	/*
 	 * Find an unused context.
 	 */
<span class="p_del">-	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="p_add">+	ret = ipmmu_domain_allocate_context(domain-&gt;mmu-&gt;root, domain);</span>
 	if (ret == IPMMU_CTX_MAX)
 		return -EBUSY;
 
<span class="p_chunk">@@ -383,7 +417,8 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	domain-&gt;iop = alloc_io_pgtable_ops(ARM_32_LPAE_S1, &amp;domain-&gt;cfg,
 					   domain);
 	if (!domain-&gt;iop) {
<span class="p_del">-		ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="p_add">+		ipmmu_domain_free_context(domain-&gt;mmu-&gt;root,</span>
<span class="p_add">+					  domain-&gt;context_id);</span>
 		return -EINVAL;
 	}
 
<span class="p_chunk">@@ -437,7 +472,7 @@</span> <span class="p_context"> static void ipmmu_domain_destroy_context</span>
 	 */
 	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);
 	ipmmu_tlb_sync(domain);
<span class="p_del">-	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="p_add">+	ipmmu_domain_free_context(domain-&gt;mmu-&gt;root, domain-&gt;context_id);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -917,6 +952,7 @@</span> <span class="p_context"> static void ipmmu_device_reset(struct ip</span>
 
 static const struct ipmmu_features ipmmu_features_default = {
 	.use_ns_alias_offset = true,
<span class="p_add">+	.has_cache_leaf_nodes = false,</span>
 };
 
 static const struct of_device_id ipmmu_of_ids[] = {
<span class="p_chunk">@@ -971,19 +1007,39 @@</span> <span class="p_context"> static int ipmmu_probe(struct platform_d</span>
 		mmu-&gt;base += IM_NS_ALIAS_OFFSET;
 
 	irq = platform_get_irq(pdev, 0);
<span class="p_del">-	if (irq &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_del">-		return irq;</span>
<span class="p_del">-	}</span>
 
<span class="p_del">-	ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_del">-			       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_del">-	if (ret &lt; 0) {</span>
<span class="p_del">-		dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_del">-		return ret;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Determine if this IPMMU instance is a root device by checking for</span>
<span class="p_add">+	 * the lack of has_cache_leaf_nodes flag or renesas,ipmmu-main property.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!mmu-&gt;features-&gt;has_cache_leaf_nodes ||</span>
<span class="p_add">+	    !of_find_property(pdev-&gt;dev.of_node, &quot;renesas,ipmmu-main&quot;, NULL))</span>
<span class="p_add">+		mmu-&gt;root = mmu;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		mmu-&gt;root = ipmmu_find_root();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Wait until the root device has been registered for sure.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!mmu-&gt;root)</span>
<span class="p_add">+		return -EPROBE_DEFER;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Root devices have mandatory IRQs */</span>
<span class="p_add">+	if (ipmmu_is_root(mmu)) {</span>
<span class="p_add">+		if (irq &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;no IRQ found\n&quot;);</span>
<span class="p_add">+			return irq;</span>
<span class="p_add">+		}</span>
 
<span class="p_del">-	ipmmu_device_reset(mmu);</span>
<span class="p_add">+		ret = devm_request_irq(&amp;pdev-&gt;dev, irq, ipmmu_irq, 0,</span>
<span class="p_add">+				       dev_name(&amp;pdev-&gt;dev), mmu);</span>
<span class="p_add">+		if (ret &lt; 0) {</span>
<span class="p_add">+			dev_err(&amp;pdev-&gt;dev, &quot;failed to request IRQ %d\n&quot;, irq);</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ipmmu_device_reset(mmu);</span>
<span class="p_add">+	}</span>
 
 	ret = iommu_device_sysfs_add(&amp;mmu-&gt;iommu, &amp;pdev-&gt;dev, NULL,
 				     dev_name(&amp;pdev-&gt;dev));

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



