
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[10/15] IB/core: disable memory registration of fileystem-dax vmas - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [10/15] IB/core: disable memory registration of fileystem-dax vmas</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=320">Dan Williams</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 31, 2017, 11:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;150949214929.24061.10464887309708944817.stgit@dwillia2-desk3.amr.corp.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10035683/mbox/"
   >mbox</a>
|
   <a href="/patch/10035683/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10035683/">/patch/10035683/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D455960327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:29:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C905427FA1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:29:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BDAEB28B38; Tue, 31 Oct 2017 23:29:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4780028161
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:29:00 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933231AbdJaX27 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 31 Oct 2017 19:28:59 -0400
Received: from mga06.intel.com ([134.134.136.31]:51062 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933163AbdJaX2z (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 31 Oct 2017 19:28:55 -0400
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
	by orsmga104.jf.intel.com with ESMTP; 31 Oct 2017 16:28:54 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,326,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;330306675&quot;
Received: from dwillia2-desk3.jf.intel.com (HELO
	dwillia2-desk3.amr.corp.intel.com) ([10.54.39.125])
	by fmsmga004.fm.intel.com with ESMTP; 31 Oct 2017 16:28:53 -0700
Subject: [PATCH 10/15] IB/core: disable memory registration of fileystem-dax
	vmas
From: Dan Williams &lt;dan.j.williams@intel.com&gt;
To: linux-nvdimm@lists.01.org
Cc: Sean Hefty &lt;sean.hefty@intel.com&gt;, linux-xfs@vger.kernel.org,
	akpm@linux-foundation.org, linux-rdma@vger.kernel.org,
	linux-kernel@vger.kernel.org, Jeff Moyer &lt;jmoyer@redhat.com&gt;,
	stable@vger.kernel.org, hch@lst.de,
	Jason Gunthorpe &lt;jgunthorpe@obsidianresearch.com&gt;,
	linux-mm@kvack.org, Doug Ledford &lt;dledford@redhat.com&gt;,
	linux-fsdevel@vger.kernel.org,
	Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;,
	Hal Rosenstock &lt;hal.rosenstock@gmail.com&gt;
Date: Tue, 31 Oct 2017 16:22:29 -0700
Message-ID: &lt;150949214929.24061.10464887309708944817.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
In-Reply-To: &lt;150949209290.24061.6283157778959640151.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
References: &lt;150949209290.24061.6283157778959640151.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
User-Agent: StGit/0.17.1-9-g687f
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=320">Dan Williams</a> - Oct. 31, 2017, 11:22 p.m.</div>
<pre class="content">
Until there is a solution to the dma-to-dax vs truncate problem it is
not safe to allow RDMA to create long standing memory registrations
against filesytem-dax vmas. Device-dax vmas do not have this problem and
are explicitly allowed.

This is temporary until a &quot;memory registration with layout-lease&quot;
mechanism can be implemented, and is limited to non-ODP (On Demand
Paging) capable RDMA devices.

Cc: Sean Hefty &lt;sean.hefty@intel.com&gt;
Cc: Doug Ledford &lt;dledford@redhat.com&gt;
Cc: Hal Rosenstock &lt;hal.rosenstock@gmail.com&gt;
Cc: Jeff Moyer &lt;jmoyer@redhat.com&gt;
Cc: Christoph Hellwig &lt;hch@lst.de&gt;
Cc: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;
Cc: Jason Gunthorpe &lt;jgunthorpe@obsidianresearch.com&gt;
Cc: &lt;linux-rdma@vger.kernel.org&gt;
Cc: &lt;stable@vger.kernel.org&gt;
<span class="signed-off-by">Signed-off-by: Dan Williams &lt;dan.j.williams@intel.com&gt;</span>
---
 drivers/infiniband/core/umem.c |   49 +++++++++++++++++++++++++++++++---------
 1 file changed, 38 insertions(+), 11 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Nov. 2, 2017, 8:13 p.m.</div>
<pre class="content">
Any chance we could add a new get_user_pages_longerm or similar
helper instead of opencoding this in the various callers?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=320">Dan Williams</a> - Nov. 2, 2017, 9:06 p.m.</div>
<pre class="content">
On Thu, Nov 2, 2017 at 1:13 PM, Christoph Hellwig &lt;hch@lst.de&gt; wrote:
<span class="quote">&gt; Any chance we could add a new get_user_pages_longerm or similar</span>
<span class="quote">&gt; helper instead of opencoding this in the various callers?</span>

Sounds like a great idea to me, I&#39;ll take a look...
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/infiniband/core/umem.c b/drivers/infiniband/core/umem.c</span>
<span class="p_header">index 21e60b1e2ff4..c30d286c1f24 100644</span>
<span class="p_header">--- a/drivers/infiniband/core/umem.c</span>
<span class="p_header">+++ b/drivers/infiniband/core/umem.c</span>
<span class="p_chunk">@@ -147,19 +147,21 @@</span> <span class="p_context"> struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,</span>
 	umem-&gt;hugetlb   = 1;
 
 	page_list = (struct page **) __get_free_page(GFP_KERNEL);
<span class="p_del">-	if (!page_list) {</span>
<span class="p_del">-		put_pid(umem-&gt;pid);</span>
<span class="p_del">-		kfree(umem);</span>
<span class="p_del">-		return ERR_PTR(-ENOMEM);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if (!page_list)</span>
<span class="p_add">+		goto err_pagelist;</span>
 
 	/*
<span class="p_del">-	 * if we can&#39;t alloc the vma_list, it&#39;s not so bad;</span>
<span class="p_del">-	 * just assume the memory is not hugetlb memory</span>
<span class="p_add">+	 * If DAX is enabled we need the vma to protect against</span>
<span class="p_add">+	 * registering filesystem-dax memory. Otherwise we can tolerate</span>
<span class="p_add">+	 * a failure to allocate the vma_list and just assume that all</span>
<span class="p_add">+	 * vmas are not hugetlb-vmas.</span>
 	 */
 	vma_list = (struct vm_area_struct **) __get_free_page(GFP_KERNEL);
<span class="p_del">-	if (!vma_list)</span>
<span class="p_add">+	if (!vma_list) {</span>
<span class="p_add">+		if (IS_ENABLED(CONFIG_FS_DAX))</span>
<span class="p_add">+			goto err_vmalist;</span>
 		umem-&gt;hugetlb = 0;
<span class="p_add">+	}</span>
 
 	npages = ib_umem_num_pages(umem);
 
<span class="p_chunk">@@ -199,15 +201,34 @@</span> <span class="p_context"> struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,</span>
 		if (ret &lt; 0)
 			goto out;
 
<span class="p_del">-		umem-&gt;npages += ret;</span>
 		cur_base += ret * PAGE_SIZE;
 		npages   -= ret;
 
 		for_each_sg(sg_list_start, sg, ret, i) {
<span class="p_del">-			if (vma_list &amp;&amp; !is_vm_hugetlb_page(vma_list[i]))</span>
<span class="p_del">-				umem-&gt;hugetlb = 0;</span>
<span class="p_add">+			struct vm_area_struct *vma;</span>
<span class="p_add">+			struct inode *inode;</span>
 
 			sg_set_page(sg, page_list[i], PAGE_SIZE, 0);
<span class="p_add">+			umem-&gt;npages++;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!vma_list)</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			vma = vma_list[i];</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!is_vm_hugetlb_page(vma))</span>
<span class="p_add">+				umem-&gt;hugetlb = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!vma_is_dax(vma))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* device-dax is safe for rdma... */</span>
<span class="p_add">+			inode = file_inode(vma-&gt;vm_file);</span>
<span class="p_add">+			if (inode-&gt;i_mode == S_IFCHR)</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* ...filesystem-dax is not. */</span>
<span class="p_add">+			ret = -EOPNOTSUPP;</span>
<span class="p_add">+			goto out;</span>
 		}
 
 		/* preparing for next loop */
<span class="p_chunk">@@ -242,6 +263,12 @@</span> <span class="p_context"> struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,</span>
 	free_page((unsigned long) page_list);
 
 	return ret &lt; 0 ? ERR_PTR(ret) : umem;
<span class="p_add">+err_vmalist:</span>
<span class="p_add">+	free_page((unsigned long) page_list);</span>
<span class="p_add">+err_pagelist:</span>
<span class="p_add">+	put_pid(umem-&gt;pid);</span>
<span class="p_add">+	kfree(umem);</span>
<span class="p_add">+	return ERR_PTR(-ENOMEM);</span>
 }
 EXPORT_SYMBOL(ib_umem_get);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



