
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,5/9] mm, page_owner: track and print last migrate reason - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,5/9] mm, page_owner: track and print last migrate reason</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2015, 12:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1448368581-6923-6-git-send-email-vbabka@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7690191/mbox/"
   >mbox</a>
|
   <a href="/patch/7690191/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7690191/">/patch/7690191/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 4D7B9BF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 12:39:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 4979F207D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 12:39:49 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 14003207DF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Nov 2015 12:39:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754208AbbKXMjq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 Nov 2015 07:39:46 -0500
Received: from mx2.suse.de ([195.135.220.15]:51625 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753472AbbKXMgo (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 Nov 2015 07:36:44 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 96273AD20;
	Tue, 24 Nov 2015 12:35:18 +0000 (UTC)
From: Vlastimil Babka &lt;vbabka@suse.cz&gt;
To: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;
Subject: [PATCH v2 5/9] mm, page_owner: track and print last migrate reason
Date: Tue, 24 Nov 2015 13:36:17 +0100
Message-Id: &lt;1448368581-6923-6-git-send-email-vbabka@suse.cz&gt;
X-Mailer: git-send-email 2.6.3
In-Reply-To: &lt;1448368581-6923-1-git-send-email-vbabka@suse.cz&gt;
References: &lt;1448368581-6923-1-git-send-email-vbabka@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Nov. 24, 2015, 12:36 p.m.</div>
<pre class="content">
During migration, page_owner info is now copied with the rest of the page, so
the stacktrace leading to free page allocation during migration is overwritten.
For debugging purposes, it might be however useful to know that the page has
been migrated since its initial allocation. This might happen many times during
the lifetime for different reasons and fully tracking this, especially with
stacktraces would incur extra memory costs. As a compromise, store and print
the migrate_reason of the last migration that occured to the page. This is
enough to distinguish compaction, numa balancing etc.

Example page_owner entry after the patch:

Page allocated via order 0, mask 0x24280ca
PFN 669757 type Reclaimable Block 1308 type Reclaimable Flags    UDLA
 [&lt;ffffffff81164e8a&gt;] __alloc_pages_nodemask+0x15a/0xa30
 [&lt;ffffffff811ad435&gt;] alloc_pages_vma+0xb5/0x250
 [&lt;ffffffff8118ba54&gt;] handle_mm_fault+0x1304/0x1820
 [&lt;ffffffff81051213&gt;] __do_page_fault+0x183/0x3f0
 [&lt;ffffffff810514a2&gt;] do_page_fault+0x22/0x30
 [&lt;ffffffff81573ba8&gt;] page_fault+0x28/0x30
 [&lt;ffffffffffffffff&gt;] 0xffffffffffffffff
Page has been migrated, last migrate reason: compaction
<span class="signed-off-by">
Signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
---
 include/linux/migrate.h    |  6 +++++-
 include/linux/page_ext.h   |  1 +
 include/linux/page_owner.h |  9 +++++++++
 mm/migrate.c               | 20 +++++++++++++++++---
 mm/page_owner.c            | 17 +++++++++++++++++
 5 files changed, 49 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57221">Joonsoo Kim</a> - Nov. 25, 2015, 8:13 a.m.</div>
<pre class="content">
On Tue, Nov 24, 2015 at 01:36:17PM +0100, Vlastimil Babka wrote:
<span class="quote">&gt; During migration, page_owner info is now copied with the rest of the page, so</span>
<span class="quote">&gt; the stacktrace leading to free page allocation during migration is overwritten.</span>
<span class="quote">&gt; For debugging purposes, it might be however useful to know that the page has</span>
<span class="quote">&gt; been migrated since its initial allocation. This might happen many times during</span>
<span class="quote">&gt; the lifetime for different reasons and fully tracking this, especially with</span>
<span class="quote">&gt; stacktraces would incur extra memory costs. As a compromise, store and print</span>
<span class="quote">&gt; the migrate_reason of the last migration that occured to the page. This is</span>
<span class="quote">&gt; enough to distinguish compaction, numa balancing etc.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Example page_owner entry after the patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Page allocated via order 0, mask 0x24280ca</span>
<span class="quote">&gt; PFN 669757 type Reclaimable Block 1308 type Reclaimable Flags    UDLA</span>
<span class="quote">&gt;  [&lt;ffffffff81164e8a&gt;] __alloc_pages_nodemask+0x15a/0xa30</span>
<span class="quote">&gt;  [&lt;ffffffff811ad435&gt;] alloc_pages_vma+0xb5/0x250</span>
<span class="quote">&gt;  [&lt;ffffffff8118ba54&gt;] handle_mm_fault+0x1304/0x1820</span>
<span class="quote">&gt;  [&lt;ffffffff81051213&gt;] __do_page_fault+0x183/0x3f0</span>
<span class="quote">&gt;  [&lt;ffffffff810514a2&gt;] do_page_fault+0x22/0x30</span>
<span class="quote">&gt;  [&lt;ffffffff81573ba8&gt;] page_fault+0x28/0x30</span>
<span class="quote">&gt;  [&lt;ffffffffffffffff&gt;] 0xffffffffffffffff</span>
<span class="quote">&gt; Page has been migrated, last migrate reason: compaction</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  include/linux/migrate.h    |  6 +++++-</span>
<span class="quote">&gt;  include/linux/page_ext.h   |  1 +</span>
<span class="quote">&gt;  include/linux/page_owner.h |  9 +++++++++</span>
<span class="quote">&gt;  mm/migrate.c               | 20 +++++++++++++++++---</span>
<span class="quote">&gt;  mm/page_owner.c            | 17 +++++++++++++++++</span>
<span class="quote">&gt;  5 files changed, 49 insertions(+), 4 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/linux/migrate.h b/include/linux/migrate.h</span>
<span class="quote">&gt; index cac1c09..ab92a8c 100644</span>
<span class="quote">&gt; --- a/include/linux/migrate.h</span>
<span class="quote">&gt; +++ b/include/linux/migrate.h</span>
<span class="quote">&gt; @@ -23,9 +23,13 @@ enum migrate_reason {</span>
<span class="quote">&gt;  	MR_SYSCALL,		/* also applies to cpusets */</span>
<span class="quote">&gt;  	MR_MEMPOLICY_MBIND,</span>
<span class="quote">&gt;  	MR_NUMA_MISPLACED,</span>
<span class="quote">&gt; -	MR_CMA</span>
<span class="quote">&gt; +	MR_CMA,</span>
<span class="quote">&gt; +	MR_TYPES</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/* In mm/migrate.c; also keep sync with include/trace/events/migrate.h */</span>
<span class="quote">&gt; +extern char * migrate_reason_names[MR_TYPES];</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #ifdef CONFIG_MIGRATION</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern void putback_movable_pages(struct list_head *l);</span>
<span class="quote">&gt; diff --git a/include/linux/page_ext.h b/include/linux/page_ext.h</span>
<span class="quote">&gt; index 17f118a..e1fe7cf 100644</span>
<span class="quote">&gt; --- a/include/linux/page_ext.h</span>
<span class="quote">&gt; +++ b/include/linux/page_ext.h</span>
<span class="quote">&gt; @@ -45,6 +45,7 @@ struct page_ext {</span>
<span class="quote">&gt;  	unsigned int order;</span>
<span class="quote">&gt;  	gfp_t gfp_mask;</span>
<span class="quote">&gt;  	unsigned int nr_entries;</span>
<span class="quote">&gt; +	int last_migrate_reason;</span>
<span class="quote">&gt;  	unsigned long trace_entries[8];</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt; diff --git a/include/linux/page_owner.h b/include/linux/page_owner.h</span>
<span class="quote">&gt; index 6440daa..555893b 100644</span>
<span class="quote">&gt; --- a/include/linux/page_owner.h</span>
<span class="quote">&gt; +++ b/include/linux/page_owner.h</span>
<span class="quote">&gt; @@ -12,6 +12,7 @@ extern void __set_page_owner(struct page *page,</span>
<span class="quote">&gt;  			unsigned int order, gfp_t gfp_mask);</span>
<span class="quote">&gt;  extern gfp_t __get_page_owner_gfp(struct page *page);</span>
<span class="quote">&gt;  extern void __copy_page_owner(struct page *oldpage, struct page *newpage);</span>
<span class="quote">&gt; +extern void __set_page_owner_migrate_reason(struct page *page, int reason);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline void reset_page_owner(struct page *page, unsigned int order)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -38,6 +39,11 @@ static inline void copy_page_owner(struct page *oldpage, struct page *newpage)</span>
<span class="quote">&gt;  	if (static_branch_unlikely(&amp;page_owner_inited))</span>
<span class="quote">&gt;  		__copy_page_owner(oldpage, newpage);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (static_branch_unlikely(&amp;page_owner_inited))</span>
<span class="quote">&gt; +		__set_page_owner_migrate_reason(page, reason);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #else</span>
<span class="quote">&gt;  static inline void reset_page_owner(struct page *page, unsigned int order)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -53,5 +59,8 @@ static inline gfp_t get_page_owner_gfp(struct page *page)</span>
<span class="quote">&gt;  static inline void copy_page_owner(struct page *oldpage, struct page *newpage)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif /* CONFIG_PAGE_OWNER */</span>
<span class="quote">&gt;  #endif /* __LINUX_PAGE_OWNER_H */</span>
<span class="quote">&gt; diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="quote">&gt; index 863a0f1..12e9ab9 100644</span>
<span class="quote">&gt; --- a/mm/migrate.c</span>
<span class="quote">&gt; +++ b/mm/migrate.c</span>
<span class="quote">&gt; @@ -47,6 +47,16 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &quot;internal.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +char *migrate_reason_names[MR_TYPES] = {</span>
<span class="quote">&gt; +	&quot;compaction&quot;,</span>
<span class="quote">&gt; +	&quot;memory_failure&quot;,</span>
<span class="quote">&gt; +	&quot;memory_hotplug&quot;,</span>
<span class="quote">&gt; +	&quot;syscall_or_cpuset&quot;,</span>
<span class="quote">&gt; +	&quot;mempolicy_mbind&quot;,</span>
<span class="quote">&gt; +	&quot;numa_misplaced&quot;,</span>
<span class="quote">&gt; +	&quot;cma&quot;,</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * migrate_prep() needs to be called before we start compiling a list of pages</span>
<span class="quote">&gt;   * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is</span>
<span class="quote">&gt; @@ -955,8 +965,10 @@ static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	rc = __unmap_and_move(page, newpage, force, mode);</span>
<span class="quote">&gt; -	if (rc == MIGRATEPAGE_SUCCESS)</span>
<span class="quote">&gt; +	if (rc == MIGRATEPAGE_SUCCESS) {</span>
<span class="quote">&gt;  		put_new_page = NULL;</span>
<span class="quote">&gt; +		set_page_owner_migrate_reason(newpage, reason);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  out:</span>
<span class="quote">&gt;  	if (rc != -EAGAIN) {</span>
<span class="quote">&gt; @@ -1021,7 +1033,7 @@ static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
<span class="quote">&gt;  static int unmap_and_move_huge_page(new_page_t get_new_page,</span>
<span class="quote">&gt;  				free_page_t put_new_page, unsigned long private,</span>
<span class="quote">&gt;  				struct page *hpage, int force,</span>
<span class="quote">&gt; -				enum migrate_mode mode)</span>
<span class="quote">&gt; +				enum migrate_mode mode, int reason)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int rc = -EAGAIN;</span>
<span class="quote">&gt;  	int *result = NULL;</span>
<span class="quote">&gt; @@ -1079,6 +1091,7 @@ static int unmap_and_move_huge_page(new_page_t get_new_page,</span>
<span class="quote">&gt;  	if (rc == MIGRATEPAGE_SUCCESS) {</span>
<span class="quote">&gt;  		hugetlb_cgroup_migrate(hpage, new_hpage);</span>
<span class="quote">&gt;  		put_new_page = NULL;</span>
<span class="quote">&gt; +		set_page_owner_migrate_reason(new_hpage, reason);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	unlock_page(hpage);</span>
<span class="quote">&gt; @@ -1151,7 +1164,7 @@ int migrate_pages(struct list_head *from, new_page_t get_new_page,</span>
<span class="quote">&gt;  			if (PageHuge(page))</span>
<span class="quote">&gt;  				rc = unmap_and_move_huge_page(get_new_page,</span>
<span class="quote">&gt;  						put_new_page, private, page,</span>
<span class="quote">&gt; -						pass &gt; 2, mode);</span>
<span class="quote">&gt; +						pass &gt; 2, mode, reason);</span>
<span class="quote">&gt;  			else</span>
<span class="quote">&gt;  				rc = unmap_and_move(get_new_page, put_new_page,</span>
<span class="quote">&gt;  						private, page, pass &gt; 2, mode,</span>
<span class="quote">&gt; @@ -1842,6 +1855,7 @@ int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
<span class="quote">&gt;  	set_page_memcg(new_page, page_memcg(page));</span>
<span class="quote">&gt;  	set_page_memcg(page, NULL);</span>
<span class="quote">&gt;  	page_remove_rmap(page, true);</span>
<span class="quote">&gt; +	set_page_owner_migrate_reason(new_page, MR_NUMA_MISPLACED);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	spin_unlock(ptl);</span>
<span class="quote">&gt;  	mmu_notifier_invalidate_range_end(mm, mmun_start, mmun_end);</span>
<span class="quote">&gt; diff --git a/mm/page_owner.c b/mm/page_owner.c</span>
<span class="quote">&gt; index f571e55..59fd6f1 100644</span>
<span class="quote">&gt; --- a/mm/page_owner.c</span>
<span class="quote">&gt; +++ b/mm/page_owner.c</span>
<span class="quote">&gt; @@ -6,6 +6,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/stacktrace.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/page_owner.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/jump_label.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/migrate.h&gt;</span>
<span class="quote">&gt;  #include &quot;internal.h&quot;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static bool page_owner_disabled = true;</span>
<span class="quote">&gt; @@ -73,10 +74,18 @@ void __set_page_owner(struct page *page, unsigned int order, gfp_t gfp_mask)</span>
<span class="quote">&gt;  	page_ext-&gt;order = order;</span>
<span class="quote">&gt;  	page_ext-&gt;gfp_mask = gfp_mask;</span>
<span class="quote">&gt;  	page_ext-&gt;nr_entries = trace.nr_entries;</span>
<span class="quote">&gt; +	page_ext-&gt;last_migrate_reason = -1;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	__set_bit(PAGE_EXT_OWNER, &amp;page_ext-&gt;flags);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void __set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct page_ext *page_ext = lookup_page_ext(page);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	page_ext-&gt;last_migrate_reason = reason;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  gfp_t __get_page_owner_gfp(struct page *page)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct page_ext *page_ext = lookup_page_ext(page);</span>
<span class="quote">&gt; @@ -161,6 +170,14 @@ print_page_owner(char __user *buf, size_t count, unsigned long pfn,</span>
<span class="quote">&gt;  	if (ret &gt;= count)</span>
<span class="quote">&gt;  		goto err;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (page_ext-&gt;last_migrate_reason != -1) {</span>
<span class="quote">&gt; +		ret += snprintf(kbuf + ret, count - ret,</span>
<span class="quote">&gt; +			&quot;Page has been migrated, last migrate reason: %s\n&quot;,</span>
<span class="quote">&gt; +			migrate_reason_names[page_ext-&gt;last_migrate_reason]);</span>
<span class="quote">&gt; +		if (ret &gt;= count)</span>
<span class="quote">&gt; +			goto err;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>

migrate_reason_names is defined if CONFIG_MIGRATION is enabled so
it would cause build failure in case of !CONFIG_MIGRATION and
CONFIG_PAGE_OWNER.

Thanks.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/migrate.h b/include/linux/migrate.h</span>
<span class="p_header">index cac1c09..ab92a8c 100644</span>
<span class="p_header">--- a/include/linux/migrate.h</span>
<span class="p_header">+++ b/include/linux/migrate.h</span>
<span class="p_chunk">@@ -23,9 +23,13 @@</span> <span class="p_context"> enum migrate_reason {</span>
 	MR_SYSCALL,		/* also applies to cpusets */
 	MR_MEMPOLICY_MBIND,
 	MR_NUMA_MISPLACED,
<span class="p_del">-	MR_CMA</span>
<span class="p_add">+	MR_CMA,</span>
<span class="p_add">+	MR_TYPES</span>
 };
 
<span class="p_add">+/* In mm/migrate.c; also keep sync with include/trace/events/migrate.h */</span>
<span class="p_add">+extern char * migrate_reason_names[MR_TYPES];</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MIGRATION
 
 extern void putback_movable_pages(struct list_head *l);
<span class="p_header">diff --git a/include/linux/page_ext.h b/include/linux/page_ext.h</span>
<span class="p_header">index 17f118a..e1fe7cf 100644</span>
<span class="p_header">--- a/include/linux/page_ext.h</span>
<span class="p_header">+++ b/include/linux/page_ext.h</span>
<span class="p_chunk">@@ -45,6 +45,7 @@</span> <span class="p_context"> struct page_ext {</span>
 	unsigned int order;
 	gfp_t gfp_mask;
 	unsigned int nr_entries;
<span class="p_add">+	int last_migrate_reason;</span>
 	unsigned long trace_entries[8];
 #endif
 };
<span class="p_header">diff --git a/include/linux/page_owner.h b/include/linux/page_owner.h</span>
<span class="p_header">index 6440daa..555893b 100644</span>
<span class="p_header">--- a/include/linux/page_owner.h</span>
<span class="p_header">+++ b/include/linux/page_owner.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"> extern void __set_page_owner(struct page *page,</span>
 			unsigned int order, gfp_t gfp_mask);
 extern gfp_t __get_page_owner_gfp(struct page *page);
 extern void __copy_page_owner(struct page *oldpage, struct page *newpage);
<span class="p_add">+extern void __set_page_owner_migrate_reason(struct page *page, int reason);</span>
 
 static inline void reset_page_owner(struct page *page, unsigned int order)
 {
<span class="p_chunk">@@ -38,6 +39,11 @@</span> <span class="p_context"> static inline void copy_page_owner(struct page *oldpage, struct page *newpage)</span>
 	if (static_branch_unlikely(&amp;page_owner_inited))
 		__copy_page_owner(oldpage, newpage);
 }
<span class="p_add">+static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (static_branch_unlikely(&amp;page_owner_inited))</span>
<span class="p_add">+		__set_page_owner_migrate_reason(page, reason);</span>
<span class="p_add">+}</span>
 #else
 static inline void reset_page_owner(struct page *page, unsigned int order)
 {
<span class="p_chunk">@@ -53,5 +59,8 @@</span> <span class="p_context"> static inline gfp_t get_page_owner_gfp(struct page *page)</span>
 static inline void copy_page_owner(struct page *oldpage, struct page *newpage)
 {
 }
<span class="p_add">+static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif /* CONFIG_PAGE_OWNER */
 #endif /* __LINUX_PAGE_OWNER_H */
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 863a0f1..12e9ab9 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -47,6 +47,16 @@</span> <span class="p_context"></span>
 
 #include &quot;internal.h&quot;
 
<span class="p_add">+char *migrate_reason_names[MR_TYPES] = {</span>
<span class="p_add">+	&quot;compaction&quot;,</span>
<span class="p_add">+	&quot;memory_failure&quot;,</span>
<span class="p_add">+	&quot;memory_hotplug&quot;,</span>
<span class="p_add">+	&quot;syscall_or_cpuset&quot;,</span>
<span class="p_add">+	&quot;mempolicy_mbind&quot;,</span>
<span class="p_add">+	&quot;numa_misplaced&quot;,</span>
<span class="p_add">+	&quot;cma&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 /*
  * migrate_prep() needs to be called before we start compiling a list of pages
  * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is
<span class="p_chunk">@@ -955,8 +965,10 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 	}
 
 	rc = __unmap_and_move(page, newpage, force, mode);
<span class="p_del">-	if (rc == MIGRATEPAGE_SUCCESS)</span>
<span class="p_add">+	if (rc == MIGRATEPAGE_SUCCESS) {</span>
 		put_new_page = NULL;
<span class="p_add">+		set_page_owner_migrate_reason(newpage, reason);</span>
<span class="p_add">+	}</span>
 
 out:
 	if (rc != -EAGAIN) {
<span class="p_chunk">@@ -1021,7 +1033,7 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 static int unmap_and_move_huge_page(new_page_t get_new_page,
 				free_page_t put_new_page, unsigned long private,
 				struct page *hpage, int force,
<span class="p_del">-				enum migrate_mode mode)</span>
<span class="p_add">+				enum migrate_mode mode, int reason)</span>
 {
 	int rc = -EAGAIN;
 	int *result = NULL;
<span class="p_chunk">@@ -1079,6 +1091,7 @@</span> <span class="p_context"> static int unmap_and_move_huge_page(new_page_t get_new_page,</span>
 	if (rc == MIGRATEPAGE_SUCCESS) {
 		hugetlb_cgroup_migrate(hpage, new_hpage);
 		put_new_page = NULL;
<span class="p_add">+		set_page_owner_migrate_reason(new_hpage, reason);</span>
 	}
 
 	unlock_page(hpage);
<span class="p_chunk">@@ -1151,7 +1164,7 @@</span> <span class="p_context"> int migrate_pages(struct list_head *from, new_page_t get_new_page,</span>
 			if (PageHuge(page))
 				rc = unmap_and_move_huge_page(get_new_page,
 						put_new_page, private, page,
<span class="p_del">-						pass &gt; 2, mode);</span>
<span class="p_add">+						pass &gt; 2, mode, reason);</span>
 			else
 				rc = unmap_and_move(get_new_page, put_new_page,
 						private, page, pass &gt; 2, mode,
<span class="p_chunk">@@ -1842,6 +1855,7 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 	set_page_memcg(new_page, page_memcg(page));
 	set_page_memcg(page, NULL);
 	page_remove_rmap(page, true);
<span class="p_add">+	set_page_owner_migrate_reason(new_page, MR_NUMA_MISPLACED);</span>
 
 	spin_unlock(ptl);
 	mmu_notifier_invalidate_range_end(mm, mmun_start, mmun_end);
<span class="p_header">diff --git a/mm/page_owner.c b/mm/page_owner.c</span>
<span class="p_header">index f571e55..59fd6f1 100644</span>
<span class="p_header">--- a/mm/page_owner.c</span>
<span class="p_header">+++ b/mm/page_owner.c</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/stacktrace.h&gt;
 #include &lt;linux/page_owner.h&gt;
 #include &lt;linux/jump_label.h&gt;
<span class="p_add">+#include &lt;linux/migrate.h&gt;</span>
 #include &quot;internal.h&quot;
 
 static bool page_owner_disabled = true;
<span class="p_chunk">@@ -73,10 +74,18 @@</span> <span class="p_context"> void __set_page_owner(struct page *page, unsigned int order, gfp_t gfp_mask)</span>
 	page_ext-&gt;order = order;
 	page_ext-&gt;gfp_mask = gfp_mask;
 	page_ext-&gt;nr_entries = trace.nr_entries;
<span class="p_add">+	page_ext-&gt;last_migrate_reason = -1;</span>
 
 	__set_bit(PAGE_EXT_OWNER, &amp;page_ext-&gt;flags);
 }
 
<span class="p_add">+void __set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page_ext *page_ext = lookup_page_ext(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	page_ext-&gt;last_migrate_reason = reason;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 gfp_t __get_page_owner_gfp(struct page *page)
 {
 	struct page_ext *page_ext = lookup_page_ext(page);
<span class="p_chunk">@@ -161,6 +170,14 @@</span> <span class="p_context"> print_page_owner(char __user *buf, size_t count, unsigned long pfn,</span>
 	if (ret &gt;= count)
 		goto err;
 
<span class="p_add">+	if (page_ext-&gt;last_migrate_reason != -1) {</span>
<span class="p_add">+		ret += snprintf(kbuf + ret, count - ret,</span>
<span class="p_add">+			&quot;Page has been migrated, last migrate reason: %s\n&quot;,</span>
<span class="p_add">+			migrate_reason_names[page_ext-&gt;last_migrate_reason]);</span>
<span class="p_add">+		if (ret &gt;= count)</span>
<span class="p_add">+			goto err;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	ret += snprintf(kbuf + ret, count - ret, &quot;\n&quot;);
 	if (ret &gt;= count)
 		goto err;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



