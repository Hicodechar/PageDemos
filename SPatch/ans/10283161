
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[03/14] x86: use dma-direct - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [03/14] x86: use dma-direct</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 14, 2018, 5:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180314175213.20256-4-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10283161/mbox/"
   >mbox</a>
|
   <a href="/patch/10283161/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10283161/">/patch/10283161/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	76C4760621 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:56:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 66A812855C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:56:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5B1682856E; Wed, 14 Mar 2018 17:56:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 31FA32855C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Mar 2018 17:55:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932222AbeCNRz4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Mar 2018 13:55:56 -0400
Received: from bombadil.infradead.org ([198.137.202.133]:55196 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751526AbeCNRwf (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Mar 2018 13:52:35 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=9Lalfck394N6MtVWV3q42s+aTebtApgsUnfiLqpOZOU=;
	b=ODQEFsksMAU7v/sq95+awXd8m
	5kYpZh4X1yOk1BF03B55J2tFHTs5crJ6+Rtb/HzfaadAM9tJ7pqJxRNbHCT1mJTO976czZ3Rp0sE5
	W4CstZkXJbplavYrWuO4Ownq5njGCPQmtmYLx/PuYZ2Sir+4Bq6lr5wT7hpoB/eM/eKDZAWIqm+vg
	IuePdyLEJI9CHGyPyY8WNrH+MRwUlg/Nb19zs7aorfeWX8tipHfmL6vaQvlAj5XbX6YLxASgJr2jH
	5iiARSh1yHL14AA5iHbVJfo57gHjD/eYzldjS3/ovkpb9JqqnCGgcb7OXx5GNh/XUXC/0E3eMyZDi
	5VWvYCxhw==;
Received: from 178.114.241.23.wireless.dyn.drei.com ([178.114.241.23]
	helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.90_1 #2 (Red Hat
	Linux)) id 1ewAZg-0000Ib-Lr; Wed, 14 Mar 2018 17:52:29 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: x86@kernel.org
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	David Woodhouse &lt;dwmw2@infradead.org&gt;, Muli Ben-Yehuda &lt;mulix@mulix.org&gt;,
	Jon Mason &lt;jdmason@kudzu.us&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Subject: [PATCH 03/14] x86: use dma-direct
Date: Wed, 14 Mar 2018 18:52:02 +0100
Message-Id: &lt;20180314175213.20256-4-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20180314175213.20256-1-hch@lst.de&gt;
References: &lt;20180314175213.20256-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 14, 2018, 5:52 p.m.</div>
<pre class="content">
The generic dma-direct implementation is now functionally equivalent to
the x86 nommu dma_map implementation, so switch over to using it.

Note that the various iommu drivers are switched from x86_dma_supported
to dma_direct_supported to provide identical functionality, although the
checks looks fairly questionable for at least some of them.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 arch/x86/Kconfig                   |  1 +
 arch/x86/include/asm/dma-mapping.h |  8 -----
 arch/x86/include/asm/iommu.h       |  3 --
 arch/x86/kernel/Makefile           |  2 +-
 arch/x86/kernel/amd_gart_64.c      |  7 ++--
 arch/x86/kernel/pci-calgary_64.c   |  3 +-
 arch/x86/kernel/pci-dma.c          | 66 +-------------------------------------
 arch/x86/kernel/pci-swiotlb.c      |  5 ++-
 arch/x86/pci/sta2x11-fixup.c       |  2 +-
 drivers/iommu/amd_iommu.c          |  7 ++--
 drivers/iommu/intel-iommu.c        |  3 +-
 11 files changed, 17 insertions(+), 90 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - March 15, 2018, 8:56 a.m.</div>
<pre class="content">
On Wed, 14 Mar 2018, Christoph Hellwig wrote:
<span class="quote">
&gt; The generic dma-direct implementation is now functionally equivalent to</span>
<span class="quote">&gt; the x86 nommu dma_map implementation, so switch over to using it.</span>

Can you please convert the various drivers first and then remove the
unused code?
<span class="quote">
&gt; Note that the various iommu drivers are switched from x86_dma_supported</span>
<span class="quote">&gt; to dma_direct_supported to provide identical functionality, although the</span>
<span class="quote">&gt; checks looks fairly questionable for at least some of them.</span>

Can you please elaborate? From the above it&#39;s not clear which checks you
are referring to. If you convert these drivers seperately then explicit
information about your concerns wants to be in the changelogs.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - March 15, 2018, 11:53 a.m.</div>
<pre class="content">
On Thu, Mar 15, 2018 at 09:56:13AM +0100, Thomas Gleixner wrote:
<span class="quote">&gt; On Wed, 14 Mar 2018, Christoph Hellwig wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; The generic dma-direct implementation is now functionally equivalent to</span>
<span class="quote">&gt; &gt; the x86 nommu dma_map implementation, so switch over to using it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you please convert the various drivers first and then remove the</span>
<span class="quote">&gt; unused code?</span>

Which various drivers?
<span class="quote">
&gt; &gt; Note that the various iommu drivers are switched from x86_dma_supported</span>
<span class="quote">&gt; &gt; to dma_direct_supported to provide identical functionality, although the</span>
<span class="quote">&gt; &gt; checks looks fairly questionable for at least some of them.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you please elaborate? From the above it&#39;s not clear which checks you</span>
<span class="quote">&gt; are referring to. If you convert these drivers seperately then explicit</span>
<span class="quote">&gt; information about your concerns wants to be in the changelogs.</span>

This bit:

	/* Copied from i386. Doesn&#39;t make much sense, because it will
	   only work for pci_alloc_coherent.
	   The caller just has to use GFP_DMA in this case. */
	if (mask &lt; DMA_BIT_MASK(24))
		return 0;

in x86_dma_supported, or the equivalent bit in dma_direct_supported.
Kept for bug to bug compatibility, but I guess I should reword or
just drop the changelog bit іf it causes confusion.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 0fa71a78ec99..10f482beda1b 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -83,6 +83,7 @@</span> <span class="p_context"> config X86</span>
 	select CLOCKSOURCE_VALIDATE_LAST_CYCLE
 	select CLOCKSOURCE_WATCHDOG
 	select DCACHE_WORD_ACCESS
<span class="p_add">+	select DMA_DIRECT_OPS</span>
 	select EDAC_ATOMIC_SCRUB
 	select EDAC_SUPPORT
 	select GENERIC_CLOCKEVENTS
<span class="p_header">diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">index 545bf3721bc0..df9816b385eb 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/dma-mapping.h</span>
<span class="p_chunk">@@ -36,14 +36,6 @@</span> <span class="p_context"> int arch_dma_supported(struct device *dev, u64 mask);</span>
 bool arch_dma_alloc_attrs(struct device **dev, gfp_t *gfp);
 #define arch_dma_alloc_attrs arch_dma_alloc_attrs
 
<span class="p_del">-extern void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
<span class="p_del">-					dma_addr_t *dma_addr, gfp_t flag,</span>
<span class="p_del">-					unsigned long attrs);</span>
<span class="p_del">-</span>
<span class="p_del">-extern void dma_generic_free_coherent(struct device *dev, size_t size,</span>
<span class="p_del">-				      void *vaddr, dma_addr_t dma_addr,</span>
<span class="p_del">-				      unsigned long attrs);</span>
<span class="p_del">-</span>
 static inline gfp_t dma_alloc_coherent_gfp_flags(struct device *dev, gfp_t gfp)
 {
 	if (dev-&gt;coherent_dma_mask &lt;= DMA_BIT_MASK(24))
<span class="p_header">diff --git a/arch/x86/include/asm/iommu.h b/arch/x86/include/asm/iommu.h</span>
<span class="p_header">index 1e5d5d92eb40..baedab8ac538 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/iommu.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/iommu.h</span>
<span class="p_chunk">@@ -2,13 +2,10 @@</span> <span class="p_context"></span>
 #ifndef _ASM_X86_IOMMU_H
 #define _ASM_X86_IOMMU_H
 
<span class="p_del">-extern const struct dma_map_ops nommu_dma_ops;</span>
 extern int force_iommu, no_iommu;
 extern int iommu_detected;
 extern int iommu_pass_through;
 
<span class="p_del">-int x86_dma_supported(struct device *dev, u64 mask);</span>
<span class="p_del">-</span>
 /* 10 seconds */
 #define DMAR_OPERATION_TIMEOUT ((cycles_t) tsc_khz*10*1000)
 
<span class="p_header">diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile</span>
<span class="p_header">index 29786c87e864..2e8c8a09ecab 100644</span>
<span class="p_header">--- a/arch/x86/kernel/Makefile</span>
<span class="p_header">+++ b/arch/x86/kernel/Makefile</span>
<span class="p_chunk">@@ -57,7 +57,7 @@</span> <span class="p_context"> obj-$(CONFIG_X86_ESPFIX64)	+= espfix_64.o</span>
 obj-$(CONFIG_SYSFS)	+= ksysfs.o
 obj-y			+= bootflag.o e820.o
 obj-y			+= pci-dma.o quirks.o topology.o kdebugfs.o
<span class="p_del">-obj-y			+= alternative.o i8253.o pci-nommu.o hw_breakpoint.o</span>
<span class="p_add">+obj-y			+= alternative.o i8253.o hw_breakpoint.o</span>
 obj-y			+= tsc.o tsc_msr.o io_delay.o rtc.o
 obj-y			+= pci-iommu_table.o
 obj-y			+= resource.o
<span class="p_header">diff --git a/arch/x86/kernel/amd_gart_64.c b/arch/x86/kernel/amd_gart_64.c</span>
<span class="p_header">index ecd486cb06ab..52e3abcf3e70 100644</span>
<span class="p_header">--- a/arch/x86/kernel/amd_gart_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/amd_gart_64.c</span>
<span class="p_chunk">@@ -501,8 +501,7 @@</span> <span class="p_context"> gart_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_addr,</span>
 		}
 		__free_pages(page, get_order(size));
 	} else
<span class="p_del">-		return dma_generic_alloc_coherent(dev, size, dma_addr, flag,</span>
<span class="p_del">-						  attrs);</span>
<span class="p_add">+		return dma_direct_alloc(dev, size, dma_addr, flag, attrs);</span>
 
 	return NULL;
 }
<span class="p_chunk">@@ -513,7 +512,7 @@</span> <span class="p_context"> gart_free_coherent(struct device *dev, size_t size, void *vaddr,</span>
 		   dma_addr_t dma_addr, unsigned long attrs)
 {
 	gart_unmap_page(dev, dma_addr, size, DMA_BIDIRECTIONAL, 0);
<span class="p_del">-	dma_generic_free_coherent(dev, size, vaddr, dma_addr, attrs);</span>
<span class="p_add">+	dma_direct_free(dev, size, vaddr, dma_addr, attrs);</span>
 }
 
 static int gart_mapping_error(struct device *dev, dma_addr_t dma_addr)
<span class="p_chunk">@@ -705,7 +704,7 @@</span> <span class="p_context"> static const struct dma_map_ops gart_dma_ops = {</span>
 	.alloc				= gart_alloc_coherent,
 	.free				= gart_free_coherent,
 	.mapping_error			= gart_mapping_error,
<span class="p_del">-	.dma_supported			= x86_dma_supported,</span>
<span class="p_add">+	.dma_supported			= dma_direct_supported,</span>
 };
 
 static void gart_iommu_shutdown(void)
<span class="p_header">diff --git a/arch/x86/kernel/pci-calgary_64.c b/arch/x86/kernel/pci-calgary_64.c</span>
<span class="p_header">index 35c461f21815..5647853053bd 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-calgary_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-calgary_64.c</span>
<span class="p_chunk">@@ -33,6 +33,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/string.h&gt;
 #include &lt;linux/crash_dump.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/dma-direct.h&gt;</span>
 #include &lt;linux/bitmap.h&gt;
 #include &lt;linux/pci_ids.h&gt;
 #include &lt;linux/pci.h&gt;
<span class="p_chunk">@@ -493,7 +494,7 @@</span> <span class="p_context"> static const struct dma_map_ops calgary_dma_ops = {</span>
 	.map_page = calgary_map_page,
 	.unmap_page = calgary_unmap_page,
 	.mapping_error = calgary_mapping_error,
<span class="p_del">-	.dma_supported = x86_dma_supported,</span>
<span class="p_add">+	.dma_supported = dma_direct_supported,</span>
 };
 
 static inline void __iomem * busno_to_bbar(unsigned char num)
<span class="p_header">diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">index b59820872ec7..db0b88ea8d1b 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-dma.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-dma.c</span>
<span class="p_chunk">@@ -18,7 +18,7 @@</span> <span class="p_context"></span>
 
 static int forbid_dac __read_mostly;
 
<span class="p_del">-const struct dma_map_ops *dma_ops = &amp;nommu_dma_ops;</span>
<span class="p_add">+const struct dma_map_ops *dma_ops = &amp;dma_direct_ops;</span>
 EXPORT_SYMBOL(dma_ops);
 
 static int iommu_sac_force __read_mostly;
<span class="p_chunk">@@ -76,60 +76,6 @@</span> <span class="p_context"> void __init pci_iommu_alloc(void)</span>
 		}
 	}
 }
<span class="p_del">-void *dma_generic_alloc_coherent(struct device *dev, size_t size,</span>
<span class="p_del">-				 dma_addr_t *dma_addr, gfp_t flag,</span>
<span class="p_del">-				 unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	dma_addr_t addr;</span>
<span class="p_del">-</span>
<span class="p_del">-again:</span>
<span class="p_del">-	page = NULL;</span>
<span class="p_del">-	/* CMA can be used only in the context which permits sleeping */</span>
<span class="p_del">-	if (gfpflags_allow_blocking(flag)) {</span>
<span class="p_del">-		page = dma_alloc_from_contiguous(dev, count, get_order(size),</span>
<span class="p_del">-						 flag);</span>
<span class="p_del">-		if (page) {</span>
<span class="p_del">-			addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_del">-			if (addr + size &gt; dev-&gt;coherent_dma_mask) {</span>
<span class="p_del">-				dma_release_from_contiguous(dev, page, count);</span>
<span class="p_del">-				page = NULL;</span>
<span class="p_del">-			}</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-	/* fallback */</span>
<span class="p_del">-	if (!page)</span>
<span class="p_del">-		page = alloc_pages_node(dev_to_node(dev), flag, get_order(size));</span>
<span class="p_del">-	if (!page)</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-	addr = phys_to_dma(dev, page_to_phys(page));</span>
<span class="p_del">-	if (addr + size &gt; dev-&gt;coherent_dma_mask) {</span>
<span class="p_del">-		__free_pages(page, get_order(size));</span>
<span class="p_del">-</span>
<span class="p_del">-		if (dev-&gt;coherent_dma_mask &lt; DMA_BIT_MASK(32) &amp;&amp;</span>
<span class="p_del">-		    !(flag &amp; GFP_DMA)) {</span>
<span class="p_del">-			flag = (flag &amp; ~GFP_DMA32) | GFP_DMA;</span>
<span class="p_del">-			goto again;</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		return NULL;</span>
<span class="p_del">-	}</span>
<span class="p_del">-	memset(page_address(page), 0, size);</span>
<span class="p_del">-	*dma_addr = addr;</span>
<span class="p_del">-	return page_address(page);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-void dma_generic_free_coherent(struct device *dev, size_t size, void *vaddr,</span>
<span class="p_del">-			       dma_addr_t dma_addr, unsigned long attrs)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned int count = PAGE_ALIGN(size) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	struct page *page = virt_to_page(vaddr);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!dma_release_from_contiguous(dev, page, count))</span>
<span class="p_del">-		free_pages((unsigned long)vaddr, get_order(size));</span>
<span class="p_del">-}</span>
 
 bool arch_dma_alloc_attrs(struct device **dev, gfp_t *gfp)
 {
<span class="p_chunk">@@ -243,16 +189,6 @@</span> <span class="p_context"> int arch_dma_supported(struct device *dev, u64 mask)</span>
 }
 EXPORT_SYMBOL(arch_dma_supported);
 
<span class="p_del">-int x86_dma_supported(struct device *dev, u64 mask)</span>
<span class="p_del">-{</span>
<span class="p_del">-	/* Copied from i386. Doesn&#39;t make much sense, because it will</span>
<span class="p_del">-	   only work for pci_alloc_coherent.</span>
<span class="p_del">-	   The caller just has to use GFP_DMA in this case. */</span>
<span class="p_del">-	if (mask &lt; DMA_BIT_MASK(24))</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-	return 1;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int __init pci_iommu_init(void)
 {
 	struct iommu_table_entry *p;
<span class="p_header">diff --git a/arch/x86/kernel/pci-swiotlb.c b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">index 0ee0f8f34251..bcb6a9bf64ad 100644</span>
<span class="p_header">--- a/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_header">+++ b/arch/x86/kernel/pci-swiotlb.c</span>
<span class="p_chunk">@@ -30,8 +30,7 @@</span> <span class="p_context"> void *x86_swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 	 */
 	flags |= __GFP_NOWARN;
 
<span class="p_del">-	vaddr = dma_generic_alloc_coherent(hwdev, size, dma_handle, flags,</span>
<span class="p_del">-					   attrs);</span>
<span class="p_add">+	vaddr = dma_direct_alloc(hwdev, size, dma_handle, flags, attrs);</span>
 	if (vaddr)
 		return vaddr;
 
<span class="p_chunk">@@ -45,7 +44,7 @@</span> <span class="p_context"> void x86_swiotlb_free_coherent(struct device *dev, size_t size,</span>
 	if (is_swiotlb_buffer(dma_to_phys(dev, dma_addr)))
 		swiotlb_free_coherent(dev, size, vaddr, dma_addr);
 	else
<span class="p_del">-		dma_generic_free_coherent(dev, size, vaddr, dma_addr, attrs);</span>
<span class="p_add">+		dma_direct_free(dev, size, vaddr, dma_addr, attrs);</span>
 }
 
 static const struct dma_map_ops x86_swiotlb_dma_ops = {
<span class="p_header">diff --git a/arch/x86/pci/sta2x11-fixup.c b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">index 75577c1490c4..6c712fe11bdc 100644</span>
<span class="p_header">--- a/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_header">+++ b/arch/x86/pci/sta2x11-fixup.c</span>
<span class="p_chunk">@@ -193,7 +193,7 @@</span> <span class="p_context"> static const struct dma_map_ops sta2x11_dma_ops = {</span>
 	.sync_sg_for_cpu = swiotlb_sync_sg_for_cpu,
 	.sync_sg_for_device = swiotlb_sync_sg_for_device,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_del">-	.dma_supported = x86_dma_supported,</span>
<span class="p_add">+	.dma_supported = dma_direct_supported,</span>
 };
 
 /* At setup time, we use our own ops if the device is a ConneXt one */
<span class="p_header">diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c</span>
<span class="p_header">index 74788fdeb773..0bf19423b588 100644</span>
<span class="p_header">--- a/drivers/iommu/amd_iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/amd_iommu.c</span>
<span class="p_chunk">@@ -28,6 +28,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/debugfs.h&gt;
 #include &lt;linux/scatterlist.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
<span class="p_add">+#include &lt;linux/dma-direct.h&gt;</span>
 #include &lt;linux/iommu-helper.h&gt;
 #include &lt;linux/iommu.h&gt;
 #include &lt;linux/delay.h&gt;
<span class="p_chunk">@@ -2193,7 +2194,7 @@</span> <span class="p_context"> static int amd_iommu_add_device(struct device *dev)</span>
 				dev_name(dev));
 
 		iommu_ignore_device(dev);
<span class="p_del">-		dev-&gt;dma_ops = &amp;nommu_dma_ops;</span>
<span class="p_add">+		dev-&gt;dma_ops = &amp;dma_direct_ops;</span>
 		goto out;
 	}
 	init_iommu_group(dev);
<span class="p_chunk">@@ -2680,7 +2681,7 @@</span> <span class="p_context"> static void free_coherent(struct device *dev, size_t size,</span>
  */
 static int amd_iommu_dma_supported(struct device *dev, u64 mask)
 {
<span class="p_del">-	if (!x86_dma_supported(dev, mask))</span>
<span class="p_add">+	if (!dma_direct_supported(dev, mask))</span>
 		return 0;
 	return check_device(dev);
 }
<span class="p_chunk">@@ -2794,7 +2795,7 @@</span> <span class="p_context"> int __init amd_iommu_init_dma_ops(void)</span>
 	 * continue to be SWIOTLB.
 	 */
 	if (!swiotlb)
<span class="p_del">-		dma_ops = &amp;nommu_dma_ops;</span>
<span class="p_add">+		dma_ops = &amp;dma_direct_ops;</span>
 
 	if (amd_iommu_unmap_flush)
 		pr_info(&quot;AMD-Vi: IO/TLB flush on unmap enabled\n&quot;);
<span class="p_header">diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c</span>
<span class="p_header">index 582fd01cb7d1..fd899b2a12bb 100644</span>
<span class="p_header">--- a/drivers/iommu/intel-iommu.c</span>
<span class="p_header">+++ b/drivers/iommu/intel-iommu.c</span>
<span class="p_chunk">@@ -45,6 +45,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/pci-ats.h&gt;
 #include &lt;linux/memblock.h&gt;
 #include &lt;linux/dma-contiguous.h&gt;
<span class="p_add">+#include &lt;linux/dma-direct.h&gt;</span>
 #include &lt;linux/crash_dump.h&gt;
 #include &lt;asm/irq_remapping.h&gt;
 #include &lt;asm/cacheflush.h&gt;
<span class="p_chunk">@@ -3871,7 +3872,7 @@</span> <span class="p_context"> const struct dma_map_ops intel_dma_ops = {</span>
 	.unmap_page = intel_unmap_page,
 	.mapping_error = intel_mapping_error,
 #ifdef CONFIG_X86
<span class="p_del">-	.dma_supported = x86_dma_supported,</span>
<span class="p_add">+	.dma_supported = dma_direct_supported,</span>
 #endif
 };
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



