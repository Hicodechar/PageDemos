
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm: BUG in page_move_anon_rmap - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm: BUG in page_move_anon_rmap</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 4, 2016, 11:10 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.LSU.2.11.1607041551550.25497@eggly.anvils&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9213211/mbox/"
   >mbox</a>
|
   <a href="/patch/9213211/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9213211/">/patch/9213211/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AB5B76048B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Jul 2016 23:11:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A00D9287D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Jul 2016 23:11:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 911B0287D5; Mon,  4 Jul 2016 23:11:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E90B0287D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Jul 2016 23:11:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754096AbcGDXLK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Jul 2016 19:11:10 -0400
Received: from mail-oi0-f47.google.com ([209.85.218.47]:32852 &quot;EHLO
	mail-oi0-f47.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753864AbcGDXLD (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Jul 2016 19:11:03 -0400
Received: by mail-oi0-f47.google.com with SMTP id u201so208962647oie.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Mon, 04 Jul 2016 16:11:03 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20120113;
	h=date:from:to:cc:subject:in-reply-to:message-id:references
	:user-agent:mime-version;
	bh=cVc+9wQXboAtwejsdqJywD0DplPeXuFWic1n9xFSmWI=;
	b=OtBuiNm8PIBxSUO+L/LPRESme5y9HJKXjRQtHa1kLEXY4xol5TUHK4Z5OdIjHvoCOZ
	Idz4g7gQRCyXs6q5CnUrgRrSHG5zxs44HOwPKWWmLIJXKBYk1Et0zRnUmiEK1EPJojXj
	L5RvS/uUeUJX5yLJNf2Js9KQEJKXLJYNOF8kIuEjs1Hip3F7ewDuaFwZqhi9Xq3ZzRpp
	LahjTamuVqLN3gD8cHFOLzW3RQbJUegBQXVTkALTAyK9vXLe6MK3CTYjj2Yvaw6aVI7B
	jm3K98VcgPOTwJphS3ILLeyqjb/R9Ow3W8awKRdNrdi4W9JPdo+MImRBXEaygVI+ClNn
	3PcA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:in-reply-to:message-id
	:references:user-agent:mime-version;
	bh=cVc+9wQXboAtwejsdqJywD0DplPeXuFWic1n9xFSmWI=;
	b=cPz9y93i9zFqlE2loBq6JDRsOIKsLkXZ4TRhb+j1a6z1rUbadr7lm5EBGlJ3GbHjgl
	rkUuhwLNZofXMNsEBGe4CcHXhtyHt0pAcLABxqZMtX4cHWWWOY3AtLN48fWqVsIQ5WDX
	Gj9kCJwwH14UK47bhOcPRb/Bf5iizYdWvk63jdtAXefOqS4+5vG9dop8V7rIqOcf5d/c
	4C/UWxCDiG7dMDCcfROTCOgcYVX64lu3YCyazjPeT9jYbf6K+tOlg+R13ee63VSelQIK
	7sGyB8EoNpokKUst8maFF7gMO3ktg4JLnRXNgZmVg45gvNE9x8lHuP8+yx6f4Lny38y7
	yuBg==
X-Gm-Message-State: ALyK8tKWgH2gIVlDJZ2SDpkNu8ipl0Z3G1MMj6YjqccDS9VMjoFgE3w2L6bYYAfw72X1mneM
X-Received: by 10.202.51.215 with SMTP id z206mr8394385oiz.86.1467673862311; 
	Mon, 04 Jul 2016 16:11:02 -0700 (PDT)
Received: from eggly.attlocal.net
	(172-10-233-147.lightspeed.sntcca.sbcglobal.net. [172.10.233.147])
	by smtp.gmail.com with ESMTPSA id
	v72sm4459795oif.28.2016.07.04.16.11.00
	(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Mon, 04 Jul 2016 16:11:01 -0700 (PDT)
Date: Mon, 4 Jul 2016 16:10:53 -0700 (PDT)
From: Hugh Dickins &lt;hughd@google.com&gt;
X-X-Sender: hugh@eggly.anvils
To: Dmitry Vyukov &lt;dvyukov@google.com&gt;
cc: &quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Andrey Ryabinin &lt;aryabinin@virtuozzo.com&gt;,
	Konstantin Khlebnikov &lt;koct9i@gmail.com&gt;,
	Greg Thelen &lt;gthelen@google.com&gt;, Suleiman Souhlal &lt;suleiman@google.com&gt;,
	syzkaller &lt;syzkaller@googlegroups.com&gt;,
	Kostya Serebryany &lt;kcc@google.com&gt;,
	Alexander Potapenko &lt;glider@google.com&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;
Subject: Re: mm: BUG in page_move_anon_rmap
In-Reply-To: &lt;CACT4Y+Y9rhgTCuFbg5f4KHzR-_p4-mf4sVn4zoa-3hnY6iEmMQ@mail.gmail.com&gt;
Message-ID: &lt;alpine.LSU.2.11.1607041551550.25497@eggly.anvils&gt;
References: &lt;CACT4Y+Y9rhgTCuFbg5f4KHzR-_p4-mf4sVn4zoa-3hnY6iEmMQ@mail.gmail.com&gt;
User-Agent: Alpine 2.11 (LSU 23 2013-08-11)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - July 4, 2016, 11:10 p.m.</div>
<pre class="content">
On Fri, 1 Jul 2016, Dmitry Vyukov wrote:
<span class="quote">&gt; Hello,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am getting the following crashes while running syzkaller fuzzer on</span>
<span class="quote">&gt; 00bf377d19ad3d80cbc7a036521279a86e397bfb (Jun 29). So far I did not</span>
<span class="quote">&gt; manage to reproduce it outside of fuzzer, but fuzzer hits it once per</span>
<span class="quote">&gt; hour or so.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; flags: 0xfffe0000044079(locked|uptodate|dirty|lru|active|head|swapbacked)</span>
<span class="quote">&gt; page dumped because: VM_BUG_ON_PAGE(page-&gt;index !=</span>
<span class="quote">&gt; linear_page_index(vma, address))</span>
<span class="quote">&gt; page-&gt;mem_cgroup:ffff88003e829be0</span>
<span class="quote">&gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; kernel BUG at mm/rmap.c:1103!</span>
<span class="quote">&gt; invalid opcode: 0000 [#2] SMP DEBUG_PAGEALLOC KASAN</span>
<span class="quote">&gt; Modules linked in:</span>
<span class="quote">&gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; task: ffff8800342f46c0 ti: ffff880034008000 task.ti: ffff880034008000</span>
<span class="quote">&gt; RIP: 0010:[&lt;ffffffff817693d8&gt;] [&lt;ffffffff817693d8&gt;]</span>
<span class="quote">&gt; page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; RSP: 0000:ffff88003400fad0  EFLAGS: 00010286</span>
<span class="quote">&gt; RAX: ffff8800342f46c0 RBX: ffffea0000928000 RCX: 0000000000000000</span>
<span class="quote">&gt; RDX: 0000000000000000 RSI: ffff88003ec16de8 RDI: ffffed0006801f41</span>
<span class="quote">&gt; RBP: ffff88003400fb00 R08: 0000000000000001 R09: 0000000000000000</span>
<span class="quote">&gt; R10: 0000000000000000 R11: ffffed000fffea01 R12: ffff88006776b8e8</span>
<span class="quote">&gt; R13: 001000000c829e00 R14: ffff88006247c3e8 R15: 000000000c829e00</span>
<span class="quote">&gt; FS:  00007f7627bc5700(0000) GS:ffff88003ec00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; CR2: 000000c829fd8000 CR3: 0000000034b23000 CR4: 00000000000006f0</span>
<span class="quote">&gt; Stack:</span>
<span class="quote">&gt;  ffffea0000928000 ffffea000092f600 ffff88006776b8e8 ffffea0000928000</span>
<span class="quote">&gt;  ffffea0000928001 000000c829fd8000 ffff88003400fc38 ffffffff8173a25f</span>
<span class="quote">&gt;  0000000000000086 ffff88003400fbd0 ffffea0000928001 ffff880036cd3ec0</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; Code: 0b e8 dd d5 e2 ff 48 c7 c6 40 f7 d0 86 48 89 df e8 2e 4a fc ff</span>
<span class="quote">&gt; 0f 0b e8 c7 d5 e2 ff 48 c7 c6 c0 f7 d0 86 48 89 df e8 18 4a fc ff &lt;0f&gt;</span>
<span class="quote">&gt; 0b e8 b1 d5 e2 ff 4c 89 ee 4c 89 e7 e8 96 80 02 00 49 89 c5</span>
<span class="quote">&gt; RIP  [&lt;ffffffff817693d8&gt;] page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt;  RSP &lt;ffff88003400fad0&gt;</span>
<span class="quote">&gt; ---[ end trace b6c02a1136e2a9ec ]---</span>
<span class="quote">&gt; BUG: sleeping function called from invalid context at include/linux/sched.h:2955</span>
<span class="quote">&gt; in_atomic(): 1, irqs_disabled(): 0, pid: 7043, name: syz-fuzzer</span>
<span class="quote">&gt; lockdep is turned off.</span>
<span class="quote">&gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt;  ffffffff880b58e0 ffff88003400f5c0 ffffffff82cc924f ffffffff342f46c0</span>
<span class="quote">&gt;  fffffbfff1016b1c ffff8800342f46c0 0000000000001b83 0000000000000000</span>
<span class="quote">&gt;  0000000000000000 dffffc0000000000 ffff88003400f5e8 ffffffff813efbfb</span>
<span class="quote">&gt; Call Trace:</span>
<span class="quote">&gt;  [&lt;     inline     &gt;] __dump_stack lib/dump_stack.c:15</span>
<span class="quote">&gt;  [&lt;ffffffff82cc924f&gt;] dump_stack+0x12e/0x18f lib/dump_stack.c:51</span>
<span class="quote">&gt;  [&lt;ffffffff813efbfb&gt;] ___might_sleep+0x27b/0x3a0 kernel/sched/core.c:7573</span>
<span class="quote">&gt;  [&lt;ffffffff813efdb0&gt;] __might_sleep+0x90/0x1a0 kernel/sched/core.c:7535</span>
<span class="quote">&gt;  [&lt;     inline     &gt;] threadgroup_change_begin include/linux/sched.h:2955</span>
<span class="quote">&gt;  [&lt;ffffffff813a175f&gt;] exit_signals+0x7f/0x430 kernel/signal.c:2392</span>
<span class="quote">&gt;  [&lt;ffffffff8137a6a4&gt;] do_exit+0x234/0x2c80 kernel/exit.c:701</span>
<span class="quote">&gt;  [&lt;ffffffff81204331&gt;] oops_end+0xa1/0xd0 arch/x86/kernel/dumpstack.c:250</span>
<span class="quote">&gt;  [&lt;ffffffff812045c6&gt;] die+0x46/0x60 arch/x86/kernel/dumpstack.c:308</span>
<span class="quote">&gt;  [&lt;     inline     &gt;] do_trap_no_signal arch/x86/kernel/traps.c:192</span>
<span class="quote">&gt;  [&lt;ffffffff811fd9f2&gt;] do_trap+0x192/0x380 arch/x86/kernel/traps.c:238</span>
<span class="quote">&gt;  [&lt;ffffffff811fde4e&gt;] do_error_trap+0x11e/0x280 arch/x86/kernel/traps.c:275</span>
<span class="quote">&gt;  [&lt;ffffffff811ff18b&gt;] do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:288</span>
<span class="quote">&gt;  [&lt;ffffffff86a9cf0e&gt;] invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:761</span>
<span class="quote">&gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; note: syz-fuzzer[7043] exited with preempt_count 1</span>

I think 0798d3c022dc (&quot;mm: thp: avoid false positive VM_BUG_ON_PAGE in
page_move_anon_rmap()&quot;) is flawed.  It would certainly be interesting
to hear whether this patch fixes your crashes:


But if it does work, I&#39;m not sure that we really want to extend
linear_page_index() to go in a backward direction, just for this case.

I think I&#39;d prefer to skip page_move_anon_rmap()&#39;s linear_page_index()
check in the PageTransHuge case; or, indeed, remove that check (and
the address arg) completely - address plays no further part there.
But let&#39;s wait to see what Kirill prefers before committing.

Hugh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - July 5, 2016, 1:21 p.m.</div>
<pre class="content">
On Mon, Jul 04, 2016 at 04:10:53PM -0700, Hugh Dickins wrote:
<span class="quote">&gt; On Fri, 1 Jul 2016, Dmitry Vyukov wrote:</span>
<span class="quote">&gt; &gt; Hello,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I am getting the following crashes while running syzkaller fuzzer on</span>
<span class="quote">&gt; &gt; 00bf377d19ad3d80cbc7a036521279a86e397bfb (Jun 29). So far I did not</span>
<span class="quote">&gt; &gt; manage to reproduce it outside of fuzzer, but fuzzer hits it once per</span>
<span class="quote">&gt; &gt; hour or so.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; flags: 0xfffe0000044079(locked|uptodate|dirty|lru|active|head|swapbacked)</span>
<span class="quote">&gt; &gt; page dumped because: VM_BUG_ON_PAGE(page-&gt;index !=</span>
<span class="quote">&gt; &gt; linear_page_index(vma, address))</span>
<span class="quote">&gt; &gt; page-&gt;mem_cgroup:ffff88003e829be0</span>
<span class="quote">&gt; &gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; &gt; kernel BUG at mm/rmap.c:1103!</span>
<span class="quote">&gt; &gt; invalid opcode: 0000 [#2] SMP DEBUG_PAGEALLOC KASAN</span>
<span class="quote">&gt; &gt; Modules linked in:</span>
<span class="quote">&gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt; task: ffff8800342f46c0 ti: ffff880034008000 task.ti: ffff880034008000</span>
<span class="quote">&gt; &gt; RIP: 0010:[&lt;ffffffff817693d8&gt;] [&lt;ffffffff817693d8&gt;]</span>
<span class="quote">&gt; &gt; page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt; RSP: 0000:ffff88003400fad0  EFLAGS: 00010286</span>
<span class="quote">&gt; &gt; RAX: ffff8800342f46c0 RBX: ffffea0000928000 RCX: 0000000000000000</span>
<span class="quote">&gt; &gt; RDX: 0000000000000000 RSI: ffff88003ec16de8 RDI: ffffed0006801f41</span>
<span class="quote">&gt; &gt; RBP: ffff88003400fb00 R08: 0000000000000001 R09: 0000000000000000</span>
<span class="quote">&gt; &gt; R10: 0000000000000000 R11: ffffed000fffea01 R12: ffff88006776b8e8</span>
<span class="quote">&gt; &gt; R13: 001000000c829e00 R14: ffff88006247c3e8 R15: 000000000c829e00</span>
<span class="quote">&gt; &gt; FS:  00007f7627bc5700(0000) GS:ffff88003ec00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; &gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; &gt; CR2: 000000c829fd8000 CR3: 0000000034b23000 CR4: 00000000000006f0</span>
<span class="quote">&gt; &gt; Stack:</span>
<span class="quote">&gt; &gt;  ffffea0000928000 ffffea000092f600 ffff88006776b8e8 ffffea0000928000</span>
<span class="quote">&gt; &gt;  ffffea0000928001 000000c829fd8000 ffff88003400fc38 ffffffff8173a25f</span>
<span class="quote">&gt; &gt;  0000000000000086 ffff88003400fbd0 ffffea0000928001 ffff880036cd3ec0</span>
<span class="quote">&gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt; Code: 0b e8 dd d5 e2 ff 48 c7 c6 40 f7 d0 86 48 89 df e8 2e 4a fc ff</span>
<span class="quote">&gt; &gt; 0f 0b e8 c7 d5 e2 ff 48 c7 c6 c0 f7 d0 86 48 89 df e8 18 4a fc ff &lt;0f&gt;</span>
<span class="quote">&gt; &gt; 0b e8 b1 d5 e2 ff 4c 89 ee 4c 89 e7 e8 96 80 02 00 49 89 c5</span>
<span class="quote">&gt; &gt; RIP  [&lt;ffffffff817693d8&gt;] page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt;  RSP &lt;ffff88003400fad0&gt;</span>
<span class="quote">&gt; &gt; ---[ end trace b6c02a1136e2a9ec ]---</span>
<span class="quote">&gt; &gt; BUG: sleeping function called from invalid context at include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt; in_atomic(): 1, irqs_disabled(): 0, pid: 7043, name: syz-fuzzer</span>
<span class="quote">&gt; &gt; lockdep is turned off.</span>
<span class="quote">&gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt;  ffffffff880b58e0 ffff88003400f5c0 ffffffff82cc924f ffffffff342f46c0</span>
<span class="quote">&gt; &gt;  fffffbfff1016b1c ffff8800342f46c0 0000000000001b83 0000000000000000</span>
<span class="quote">&gt; &gt;  0000000000000000 dffffc0000000000 ffff88003400f5e8 ffffffff813efbfb</span>
<span class="quote">&gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt;  [&lt;     inline     &gt;] __dump_stack lib/dump_stack.c:15</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff82cc924f&gt;] dump_stack+0x12e/0x18f lib/dump_stack.c:51</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff813efbfb&gt;] ___might_sleep+0x27b/0x3a0 kernel/sched/core.c:7573</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff813efdb0&gt;] __might_sleep+0x90/0x1a0 kernel/sched/core.c:7535</span>
<span class="quote">&gt; &gt;  [&lt;     inline     &gt;] threadgroup_change_begin include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff813a175f&gt;] exit_signals+0x7f/0x430 kernel/signal.c:2392</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8137a6a4&gt;] do_exit+0x234/0x2c80 kernel/exit.c:701</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff81204331&gt;] oops_end+0xa1/0xd0 arch/x86/kernel/dumpstack.c:250</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff812045c6&gt;] die+0x46/0x60 arch/x86/kernel/dumpstack.c:308</span>
<span class="quote">&gt; &gt;  [&lt;     inline     &gt;] do_trap_no_signal arch/x86/kernel/traps.c:192</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff811fd9f2&gt;] do_trap+0x192/0x380 arch/x86/kernel/traps.c:238</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff811fde4e&gt;] do_error_trap+0x11e/0x280 arch/x86/kernel/traps.c:275</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff811ff18b&gt;] do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:288</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff86a9cf0e&gt;] invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:761</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt; note: syz-fuzzer[7043] exited with preempt_count 1</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think 0798d3c022dc (&quot;mm: thp: avoid false positive VM_BUG_ON_PAGE in</span>
<span class="quote">&gt; page_move_anon_rmap()&quot;) is flawed.  It would certainly be interesting</span>
<span class="quote">&gt; to hear whether this patch fixes your crashes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- 4.7-rc6/include/linux/pagemap.h	2016-05-29 15:47:38.303064058 -0700</span>
<span class="quote">&gt; +++ linux/include/linux/pagemap.h	2016-07-04 15:44:46.635147739 -0700</span>
<span class="quote">&gt; @@ -408,7 +408,7 @@ static inline pgoff_t linear_page_index(</span>
<span class="quote">&gt;  	pgoff_t pgoff;</span>
<span class="quote">&gt;  	if (unlikely(is_vm_hugetlb_page(vma)))</span>
<span class="quote">&gt;  		return linear_hugepage_index(vma, address);</span>
<span class="quote">&gt; -	pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; +	pgoff = (long)(address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	pgoff += vma-&gt;vm_pgoff;</span>
<span class="quote">&gt;  	return pgoff;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; But if it does work, I&#39;m not sure that we really want to extend</span>
<span class="quote">&gt; linear_page_index() to go in a backward direction, just for this case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think I&#39;d prefer to skip page_move_anon_rmap()&#39;s linear_page_index()</span>
<span class="quote">&gt; check in the PageTransHuge case; or, indeed, remove that check (and</span>
<span class="quote">&gt; the address arg) completely - address plays no further part there.</span>
<span class="quote">&gt; But let&#39;s wait to see what Kirill prefers before committing.</span>

Yeah, I would rather kill the VM_BUG_ON_PAGE() altogether and simplify
page_move_anon_rmap() interface. It doesn&#39;t make sense to add even more
glue to get the assert work.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - July 8, 2016, 6:58 p.m.</div>
<pre class="content">
Hi Dmitry,

On Tue, 5 Jul 2016, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Mon, Jul 04, 2016 at 04:10:53PM -0700, Hugh Dickins wrote:</span>
<span class="quote">&gt; &gt; On Fri, 1 Jul 2016, Dmitry Vyukov wrote:</span>
<span class="quote">&gt; &gt; &gt; Hello,</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I am getting the following crashes while running syzkaller fuzzer on</span>
<span class="quote">&gt; &gt; &gt; 00bf377d19ad3d80cbc7a036521279a86e397bfb (Jun 29). So far I did not</span>
<span class="quote">&gt; &gt; &gt; manage to reproduce it outside of fuzzer, but fuzzer hits it once per</span>
<span class="quote">&gt; &gt; &gt; hour or so.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; flags: 0xfffe0000044079(locked|uptodate|dirty|lru|active|head|swapbacked)</span>
<span class="quote">&gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(page-&gt;index !=</span>
<span class="quote">&gt; &gt; &gt; linear_page_index(vma, address))</span>
<span class="quote">&gt; &gt; &gt; page-&gt;mem_cgroup:ffff88003e829be0</span>
<span class="quote">&gt; &gt; &gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; &gt; &gt; kernel BUG at mm/rmap.c:1103!</span>
<span class="quote">&gt; &gt; &gt; invalid opcode: 0000 [#2] SMP DEBUG_PAGEALLOC KASAN</span>
<span class="quote">&gt; &gt; &gt; Modules linked in:</span>
<span class="quote">&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt; &gt; task: ffff8800342f46c0 ti: ffff880034008000 task.ti: ffff880034008000</span>
<span class="quote">&gt; &gt; &gt; RIP: 0010:[&lt;ffffffff817693d8&gt;] [&lt;ffffffff817693d8&gt;]</span>
<span class="quote">&gt; &gt; &gt; page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt; &gt; RSP: 0000:ffff88003400fad0  EFLAGS: 00010286</span>
<span class="quote">&gt; &gt; &gt; RAX: ffff8800342f46c0 RBX: ffffea0000928000 RCX: 0000000000000000</span>
<span class="quote">&gt; &gt; &gt; RDX: 0000000000000000 RSI: ffff88003ec16de8 RDI: ffffed0006801f41</span>
<span class="quote">&gt; &gt; &gt; RBP: ffff88003400fb00 R08: 0000000000000001 R09: 0000000000000000</span>
<span class="quote">&gt; &gt; &gt; R10: 0000000000000000 R11: ffffed000fffea01 R12: ffff88006776b8e8</span>
<span class="quote">&gt; &gt; &gt; R13: 001000000c829e00 R14: ffff88006247c3e8 R15: 000000000c829e00</span>
<span class="quote">&gt; &gt; &gt; FS:  00007f7627bc5700(0000) GS:ffff88003ec00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; &gt; &gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; &gt; &gt; CR2: 000000c829fd8000 CR3: 0000000034b23000 CR4: 00000000000006f0</span>
<span class="quote">&gt; &gt; &gt; Stack:</span>
<span class="quote">&gt; &gt; &gt;  ffffea0000928000 ffffea000092f600 ffff88006776b8e8 ffffea0000928000</span>
<span class="quote">&gt; &gt; &gt;  ffffea0000928001 000000c829fd8000 ffff88003400fc38 ffffffff8173a25f</span>
<span class="quote">&gt; &gt; &gt;  0000000000000086 ffff88003400fbd0 ffffea0000928001 ffff880036cd3ec0</span>
<span class="quote">&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt; &gt; Code: 0b e8 dd d5 e2 ff 48 c7 c6 40 f7 d0 86 48 89 df e8 2e 4a fc ff</span>
<span class="quote">&gt; &gt; &gt; 0f 0b e8 c7 d5 e2 ff 48 c7 c6 c0 f7 d0 86 48 89 df e8 18 4a fc ff &lt;0f&gt;</span>
<span class="quote">&gt; &gt; &gt; 0b e8 b1 d5 e2 ff 4c 89 ee 4c 89 e7 e8 96 80 02 00 49 89 c5</span>
<span class="quote">&gt; &gt; &gt; RIP  [&lt;ffffffff817693d8&gt;] page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt; &gt;  RSP &lt;ffff88003400fad0&gt;</span>
<span class="quote">&gt; &gt; &gt; ---[ end trace b6c02a1136e2a9ec ]---</span>
<span class="quote">&gt; &gt; &gt; BUG: sleeping function called from invalid context at include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt; &gt; in_atomic(): 1, irqs_disabled(): 0, pid: 7043, name: syz-fuzzer</span>
<span class="quote">&gt; &gt; &gt; lockdep is turned off.</span>
<span class="quote">&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt; &gt;  ffffffff880b58e0 ffff88003400f5c0 ffffffff82cc924f ffffffff342f46c0</span>
<span class="quote">&gt; &gt; &gt;  fffffbfff1016b1c ffff8800342f46c0 0000000000001b83 0000000000000000</span>
<span class="quote">&gt; &gt; &gt;  0000000000000000 dffffc0000000000 ffff88003400f5e8 ffffffff813efbfb</span>
<span class="quote">&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt; &gt;  [&lt;     inline     &gt;] __dump_stack lib/dump_stack.c:15</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff82cc924f&gt;] dump_stack+0x12e/0x18f lib/dump_stack.c:51</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff813efbfb&gt;] ___might_sleep+0x27b/0x3a0 kernel/sched/core.c:7573</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff813efdb0&gt;] __might_sleep+0x90/0x1a0 kernel/sched/core.c:7535</span>
<span class="quote">&gt; &gt; &gt;  [&lt;     inline     &gt;] threadgroup_change_begin include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff813a175f&gt;] exit_signals+0x7f/0x430 kernel/signal.c:2392</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8137a6a4&gt;] do_exit+0x234/0x2c80 kernel/exit.c:701</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81204331&gt;] oops_end+0xa1/0xd0 arch/x86/kernel/dumpstack.c:250</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff812045c6&gt;] die+0x46/0x60 arch/x86/kernel/dumpstack.c:308</span>
<span class="quote">&gt; &gt; &gt;  [&lt;     inline     &gt;] do_trap_no_signal arch/x86/kernel/traps.c:192</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff811fd9f2&gt;] do_trap+0x192/0x380 arch/x86/kernel/traps.c:238</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff811fde4e&gt;] do_error_trap+0x11e/0x280 arch/x86/kernel/traps.c:275</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff811ff18b&gt;] do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:288</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff86a9cf0e&gt;] invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:761</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt; &gt; note: syz-fuzzer[7043] exited with preempt_count 1</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think 0798d3c022dc (&quot;mm: thp: avoid false positive VM_BUG_ON_PAGE in</span>
<span class="quote">&gt; &gt; page_move_anon_rmap()&quot;) is flawed.  It would certainly be interesting</span>
<span class="quote">&gt; &gt; to hear whether this patch fixes your crashes:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; --- 4.7-rc6/include/linux/pagemap.h	2016-05-29 15:47:38.303064058 -0700</span>
<span class="quote">&gt; &gt; +++ linux/include/linux/pagemap.h	2016-07-04 15:44:46.635147739 -0700</span>
<span class="quote">&gt; &gt; @@ -408,7 +408,7 @@ static inline pgoff_t linear_page_index(</span>
<span class="quote">&gt; &gt;  	pgoff_t pgoff;</span>
<span class="quote">&gt; &gt;  	if (unlikely(is_vm_hugetlb_page(vma)))</span>
<span class="quote">&gt; &gt;  		return linear_hugepage_index(vma, address);</span>
<span class="quote">&gt; &gt; -	pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; &gt; +	pgoff = (long)(address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; &gt;  	pgoff += vma-&gt;vm_pgoff;</span>
<span class="quote">&gt; &gt;  	return pgoff;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; But if it does work, I&#39;m not sure that we really want to extend</span>
<span class="quote">&gt; &gt; linear_page_index() to go in a backward direction, just for this case.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think I&#39;d prefer to skip page_move_anon_rmap()&#39;s linear_page_index()</span>
<span class="quote">&gt; &gt; check in the PageTransHuge case; or, indeed, remove that check (and</span>
<span class="quote">&gt; &gt; the address arg) completely - address plays no further part there.</span>
<span class="quote">&gt; &gt; But let&#39;s wait to see what Kirill prefers before committing.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah, I would rather kill the VM_BUG_ON_PAGE() altogether and simplify</span>
<span class="quote">&gt; page_move_anon_rmap() interface. It doesn&#39;t make sense to add even more</span>
<span class="quote">&gt; glue to get the assert work.</span>

Kirill and I agree on what the final patch should be like, but I don&#39;t
want to post that until we&#39;ve heard back from you whether the &quot;(long)&quot;
patch above works - if it does work, fine, we go ahead with removing a
check which has never shown anything but its own problems; but if the
&quot;(long)&quot; patch does not work, then we need to worry and keep the check.

Hugh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72902">Dmitry Vyukov</a> - July 11, 2016, 11:01 a.m.</div>
<pre class="content">
On Fri, Jul 8, 2016 at 8:58 PM, Hugh Dickins &lt;hughd@google.com&gt; wrote:
<span class="quote">&gt; Hi Dmitry,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On Tue, 5 Jul 2016, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt;&gt; On Mon, Jul 04, 2016 at 04:10:53PM -0700, Hugh Dickins wrote:</span>
<span class="quote">&gt;&gt; &gt; On Fri, 1 Jul 2016, Dmitry Vyukov wrote:</span>
<span class="quote">&gt;&gt; &gt; &gt; Hello,</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; I am getting the following crashes while running syzkaller fuzzer on</span>
<span class="quote">&gt;&gt; &gt; &gt; 00bf377d19ad3d80cbc7a036521279a86e397bfb (Jun 29). So far I did not</span>
<span class="quote">&gt;&gt; &gt; &gt; manage to reproduce it outside of fuzzer, but fuzzer hits it once per</span>
<span class="quote">&gt;&gt; &gt; &gt; hour or so.</span>
<span class="quote">&gt;&gt; &gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; flags: 0xfffe0000044079(locked|uptodate|dirty|lru|active|head|swapbacked)</span>
<span class="quote">&gt;&gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(page-&gt;index !=</span>
<span class="quote">&gt;&gt; &gt; &gt; linear_page_index(vma, address))</span>
<span class="quote">&gt;&gt; &gt; &gt; page-&gt;mem_cgroup:ffff88003e829be0</span>
<span class="quote">&gt;&gt; &gt; &gt; ------------[ cut here ]------------</span>
<span class="quote">&gt;&gt; &gt; &gt; kernel BUG at mm/rmap.c:1103!</span>
<span class="quote">&gt;&gt; &gt; &gt; invalid opcode: 0000 [#2] SMP DEBUG_PAGEALLOC KASAN</span>
<span class="quote">&gt;&gt; &gt; &gt; Modules linked in:</span>
<span class="quote">&gt;&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt;&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt;&gt; &gt; &gt; task: ffff8800342f46c0 ti: ffff880034008000 task.ti: ffff880034008000</span>
<span class="quote">&gt;&gt; &gt; &gt; RIP: 0010:[&lt;ffffffff817693d8&gt;] [&lt;ffffffff817693d8&gt;]</span>
<span class="quote">&gt;&gt; &gt; &gt; page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt;&gt; &gt; &gt; RSP: 0000:ffff88003400fad0  EFLAGS: 00010286</span>
<span class="quote">&gt;&gt; &gt; &gt; RAX: ffff8800342f46c0 RBX: ffffea0000928000 RCX: 0000000000000000</span>
<span class="quote">&gt;&gt; &gt; &gt; RDX: 0000000000000000 RSI: ffff88003ec16de8 RDI: ffffed0006801f41</span>
<span class="quote">&gt;&gt; &gt; &gt; RBP: ffff88003400fb00 R08: 0000000000000001 R09: 0000000000000000</span>
<span class="quote">&gt;&gt; &gt; &gt; R10: 0000000000000000 R11: ffffed000fffea01 R12: ffff88006776b8e8</span>
<span class="quote">&gt;&gt; &gt; &gt; R13: 001000000c829e00 R14: ffff88006247c3e8 R15: 000000000c829e00</span>
<span class="quote">&gt;&gt; &gt; &gt; FS:  00007f7627bc5700(0000) GS:ffff88003ec00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt;&gt; &gt; &gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt;&gt; &gt; &gt; CR2: 000000c829fd8000 CR3: 0000000034b23000 CR4: 00000000000006f0</span>
<span class="quote">&gt;&gt; &gt; &gt; Stack:</span>
<span class="quote">&gt;&gt; &gt; &gt;  ffffea0000928000 ffffea000092f600 ffff88006776b8e8 ffffea0000928000</span>
<span class="quote">&gt;&gt; &gt; &gt;  ffffea0000928001 000000c829fd8000 ffff88003400fc38 ffffffff8173a25f</span>
<span class="quote">&gt;&gt; &gt; &gt;  0000000000000086 ffff88003400fbd0 ffffea0000928001 ffff880036cd3ec0</span>
<span class="quote">&gt;&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt;&gt; &gt; &gt; Code: 0b e8 dd d5 e2 ff 48 c7 c6 40 f7 d0 86 48 89 df e8 2e 4a fc ff</span>
<span class="quote">&gt;&gt; &gt; &gt; 0f 0b e8 c7 d5 e2 ff 48 c7 c6 c0 f7 d0 86 48 89 df e8 18 4a fc ff &lt;0f&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; 0b e8 b1 d5 e2 ff 4c 89 ee 4c 89 e7 e8 96 80 02 00 49 89 c5</span>
<span class="quote">&gt;&gt; &gt; &gt; RIP  [&lt;ffffffff817693d8&gt;] page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt;&gt; &gt; &gt;  RSP &lt;ffff88003400fad0&gt;</span>
<span class="quote">&gt;&gt; &gt; &gt; ---[ end trace b6c02a1136e2a9ec ]---</span>
<span class="quote">&gt;&gt; &gt; &gt; BUG: sleeping function called from invalid context at include/linux/sched.h:2955</span>
<span class="quote">&gt;&gt; &gt; &gt; in_atomic(): 1, irqs_disabled(): 0, pid: 7043, name: syz-fuzzer</span>
<span class="quote">&gt;&gt; &gt; &gt; lockdep is turned off.</span>
<span class="quote">&gt;&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt;&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt;&gt; &gt; &gt;  ffffffff880b58e0 ffff88003400f5c0 ffffffff82cc924f ffffffff342f46c0</span>
<span class="quote">&gt;&gt; &gt; &gt;  fffffbfff1016b1c ffff8800342f46c0 0000000000001b83 0000000000000000</span>
<span class="quote">&gt;&gt; &gt; &gt;  0000000000000000 dffffc0000000000 ffff88003400f5e8 ffffffff813efbfb</span>
<span class="quote">&gt;&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __dump_stack lib/dump_stack.c:15</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff82cc924f&gt;] dump_stack+0x12e/0x18f lib/dump_stack.c:51</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff813efbfb&gt;] ___might_sleep+0x27b/0x3a0 kernel/sched/core.c:7573</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff813efdb0&gt;] __might_sleep+0x90/0x1a0 kernel/sched/core.c:7535</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] threadgroup_change_begin include/linux/sched.h:2955</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff813a175f&gt;] exit_signals+0x7f/0x430 kernel/signal.c:2392</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8137a6a4&gt;] do_exit+0x234/0x2c80 kernel/exit.c:701</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff81204331&gt;] oops_end+0xa1/0xd0 arch/x86/kernel/dumpstack.c:250</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff812045c6&gt;] die+0x46/0x60 arch/x86/kernel/dumpstack.c:308</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] do_trap_no_signal arch/x86/kernel/traps.c:192</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff811fd9f2&gt;] do_trap+0x192/0x380 arch/x86/kernel/traps.c:238</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff811fde4e&gt;] do_error_trap+0x11e/0x280 arch/x86/kernel/traps.c:275</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff811ff18b&gt;] do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:288</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff86a9cf0e&gt;] invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:761</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt;&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt;&gt; &gt; &gt; note: syz-fuzzer[7043] exited with preempt_count 1</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I think 0798d3c022dc (&quot;mm: thp: avoid false positive VM_BUG_ON_PAGE in</span>
<span class="quote">&gt;&gt; &gt; page_move_anon_rmap()&quot;) is flawed.  It would certainly be interesting</span>
<span class="quote">&gt;&gt; &gt; to hear whether this patch fixes your crashes:</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; --- 4.7-rc6/include/linux/pagemap.h 2016-05-29 15:47:38.303064058 -0700</span>
<span class="quote">&gt;&gt; &gt; +++ linux/include/linux/pagemap.h   2016-07-04 15:44:46.635147739 -0700</span>
<span class="quote">&gt;&gt; &gt; @@ -408,7 +408,7 @@ static inline pgoff_t linear_page_index(</span>
<span class="quote">&gt;&gt; &gt;     pgoff_t pgoff;</span>
<span class="quote">&gt;&gt; &gt;     if (unlikely(is_vm_hugetlb_page(vma)))</span>
<span class="quote">&gt;&gt; &gt;             return linear_hugepage_index(vma, address);</span>
<span class="quote">&gt;&gt; &gt; -   pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt; &gt; +   pgoff = (long)(address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;&gt; &gt;     pgoff += vma-&gt;vm_pgoff;</span>
<span class="quote">&gt;&gt; &gt;     return pgoff;</span>
<span class="quote">&gt;&gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; But if it does work, I&#39;m not sure that we really want to extend</span>
<span class="quote">&gt;&gt; &gt; linear_page_index() to go in a backward direction, just for this case.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; I think I&#39;d prefer to skip page_move_anon_rmap()&#39;s linear_page_index()</span>
<span class="quote">&gt;&gt; &gt; check in the PageTransHuge case; or, indeed, remove that check (and</span>
<span class="quote">&gt;&gt; &gt; the address arg) completely - address plays no further part there.</span>
<span class="quote">&gt;&gt; &gt; But let&#39;s wait to see what Kirill prefers before committing.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Yeah, I would rather kill the VM_BUG_ON_PAGE() altogether and simplify</span>
<span class="quote">&gt;&gt; page_move_anon_rmap() interface. It doesn&#39;t make sense to add even more</span>
<span class="quote">&gt;&gt; glue to get the assert work.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Kirill and I agree on what the final patch should be like, but I don&#39;t</span>
<span class="quote">&gt; want to post that until we&#39;ve heard back from you whether the &quot;(long)&quot;</span>
<span class="quote">&gt; patch above works - if it does work, fine, we go ahead with removing a</span>
<span class="quote">&gt; check which has never shown anything but its own problems; but if the</span>
<span class="quote">&gt; &quot;(long)&quot; patch does not work, then we need to worry and keep the check.</span>


Sorry for the delay. Yes, it seems to fix the issue. I see no crashes
when I would expect to see a dozen of them.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7851">Hugh Dickins</a> - July 12, 2016, 11:44 a.m.</div>
<pre class="content">
On Mon, 11 Jul 2016, Dmitry Vyukov wrote:
<span class="quote">&gt; On Fri, Jul 8, 2016 at 8:58 PM, Hugh Dickins &lt;hughd@google.com&gt; wrote:</span>
<span class="quote">&gt; &gt; Hi Dmitry,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; On Tue, 5 Jul 2016, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt;&gt; On Mon, Jul 04, 2016 at 04:10:53PM -0700, Hugh Dickins wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; On Fri, 1 Jul 2016, Dmitry Vyukov wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Hello,</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; I am getting the following crashes while running syzkaller fuzzer on</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; 00bf377d19ad3d80cbc7a036521279a86e397bfb (Jun 29). So far I did not</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; manage to reproduce it outside of fuzzer, but fuzzer hits it once per</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; hour or so.</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; flags: 0xfffe0000044079(locked|uptodate|dirty|lru|active|head|swapbacked)</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; page dumped because: VM_BUG_ON_PAGE(page-&gt;index !=</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; linear_page_index(vma, address))</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; page-&gt;mem_cgroup:ffff88003e829be0</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; ------------[ cut here ]------------</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; kernel BUG at mm/rmap.c:1103!</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; invalid opcode: 0000 [#2] SMP DEBUG_PAGEALLOC KASAN</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Modules linked in:</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; task: ffff8800342f46c0 ti: ffff880034008000 task.ti: ffff880034008000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RIP: 0010:[&lt;ffffffff817693d8&gt;] [&lt;ffffffff817693d8&gt;]</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RSP: 0000:ffff88003400fad0  EFLAGS: 00010286</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RAX: ffff8800342f46c0 RBX: ffffea0000928000 RCX: 0000000000000000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RDX: 0000000000000000 RSI: ffff88003ec16de8 RDI: ffffed0006801f41</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RBP: ffff88003400fb00 R08: 0000000000000001 R09: 0000000000000000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; R10: 0000000000000000 R11: ffffed000fffea01 R12: ffff88006776b8e8</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; R13: 001000000c829e00 R14: ffff88006247c3e8 R15: 000000000c829e00</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; FS:  00007f7627bc5700(0000) GS:ffff88003ec00000(0000) knlGS:0000000000000000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; CR2: 000000c829fd8000 CR3: 0000000034b23000 CR4: 00000000000006f0</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Stack:</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  ffffea0000928000 ffffea000092f600 ffff88006776b8e8 ffffea0000928000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  ffffea0000928001 000000c829fd8000 ffff88003400fc38 ffffffff8173a25f</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  0000000000000086 ffff88003400fbd0 ffffea0000928001 ffff880036cd3ec0</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Code: 0b e8 dd d5 e2 ff 48 c7 c6 40 f7 d0 86 48 89 df e8 2e 4a fc ff</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; 0f 0b e8 c7 d5 e2 ff 48 c7 c6 c0 f7 d0 86 48 89 df e8 18 4a fc ff &lt;0f&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; 0b e8 b1 d5 e2 ff 4c 89 ee 4c 89 e7 e8 96 80 02 00 49 89 c5</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; RIP  [&lt;ffffffff817693d8&gt;] page_move_anon_rmap+0x278/0x310 mm/rmap.c:1103</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  RSP &lt;ffff88003400fad0&gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; ---[ end trace b6c02a1136e2a9ec ]---</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; BUG: sleeping function called from invalid context at include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; in_atomic(): 1, irqs_disabled(): 0, pid: 7043, name: syz-fuzzer</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; lockdep is turned off.</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; CPU: 0 PID: 7043 Comm: syz-fuzzer Tainted: G      D         4.7.0-rc5+ #22</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  ffffffff880b58e0 ffff88003400f5c0 ffffffff82cc924f ffffffff342f46c0</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  fffffbfff1016b1c ffff8800342f46c0 0000000000001b83 0000000000000000</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  0000000000000000 dffffc0000000000 ffff88003400f5e8 ffffffff813efbfb</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; Call Trace:</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __dump_stack lib/dump_stack.c:15</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff82cc924f&gt;] dump_stack+0x12e/0x18f lib/dump_stack.c:51</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff813efbfb&gt;] ___might_sleep+0x27b/0x3a0 kernel/sched/core.c:7573</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff813efdb0&gt;] __might_sleep+0x90/0x1a0 kernel/sched/core.c:7535</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] threadgroup_change_begin include/linux/sched.h:2955</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff813a175f&gt;] exit_signals+0x7f/0x430 kernel/signal.c:2392</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8137a6a4&gt;] do_exit+0x234/0x2c80 kernel/exit.c:701</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff81204331&gt;] oops_end+0xa1/0xd0 arch/x86/kernel/dumpstack.c:250</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff812045c6&gt;] die+0x46/0x60 arch/x86/kernel/dumpstack.c:308</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] do_trap_no_signal arch/x86/kernel/traps.c:192</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff811fd9f2&gt;] do_trap+0x192/0x380 arch/x86/kernel/traps.c:238</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff811fde4e&gt;] do_error_trap+0x11e/0x280 arch/x86/kernel/traps.c:275</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff811ff18b&gt;] do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:288</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff86a9cf0e&gt;] invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:761</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8173a25f&gt;] do_wp_page+0x7df/0x1c90 mm/memory.c:2402</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff817404f5&gt;] handle_pte_fault+0x1e85/0x4960 mm/memory.c:3381</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;     inline     &gt;] __handle_mm_fault mm/memory.c:3489</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8174443b&gt;] handle_mm_fault+0xeab/0x11a0 mm/memory.c:3518</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff81290f77&gt;] __do_page_fault+0x457/0xbb0 arch/x86/mm/fault.c:1356</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff8129181f&gt;] trace_do_page_fault+0xdf/0x5b0 arch/x86/mm/fault.c:1449</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff81281c24&gt;] do_async_page_fault+0x14/0xd0 arch/x86/kernel/kvm.c:265</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt;  [&lt;ffffffff86a9d538&gt;] async_page_fault+0x28/0x30 arch/x86/entry/entry_64.S:923</span>
<span class="quote">&gt; &gt;&gt; &gt; &gt; note: syz-fuzzer[7043] exited with preempt_count 1</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; I think 0798d3c022dc (&quot;mm: thp: avoid false positive VM_BUG_ON_PAGE in</span>
<span class="quote">&gt; &gt;&gt; &gt; page_move_anon_rmap()&quot;) is flawed.  It would certainly be interesting</span>
<span class="quote">&gt; &gt;&gt; &gt; to hear whether this patch fixes your crashes:</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; --- 4.7-rc6/include/linux/pagemap.h 2016-05-29 15:47:38.303064058 -0700</span>
<span class="quote">&gt; &gt;&gt; &gt; +++ linux/include/linux/pagemap.h   2016-07-04 15:44:46.635147739 -0700</span>
<span class="quote">&gt; &gt;&gt; &gt; @@ -408,7 +408,7 @@ static inline pgoff_t linear_page_index(</span>
<span class="quote">&gt; &gt;&gt; &gt;     pgoff_t pgoff;</span>
<span class="quote">&gt; &gt;&gt; &gt;     if (unlikely(is_vm_hugetlb_page(vma)))</span>
<span class="quote">&gt; &gt;&gt; &gt;             return linear_hugepage_index(vma, address);</span>
<span class="quote">&gt; &gt;&gt; &gt; -   pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; &gt;&gt; &gt; +   pgoff = (long)(address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt; &gt;&gt; &gt;     pgoff += vma-&gt;vm_pgoff;</span>
<span class="quote">&gt; &gt;&gt; &gt;     return pgoff;</span>
<span class="quote">&gt; &gt;&gt; &gt;  }</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; But if it does work, I&#39;m not sure that we really want to extend</span>
<span class="quote">&gt; &gt;&gt; &gt; linear_page_index() to go in a backward direction, just for this case.</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; I think I&#39;d prefer to skip page_move_anon_rmap()&#39;s linear_page_index()</span>
<span class="quote">&gt; &gt;&gt; &gt; check in the PageTransHuge case; or, indeed, remove that check (and</span>
<span class="quote">&gt; &gt;&gt; &gt; the address arg) completely - address plays no further part there.</span>
<span class="quote">&gt; &gt;&gt; &gt; But let&#39;s wait to see what Kirill prefers before committing.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Yeah, I would rather kill the VM_BUG_ON_PAGE() altogether and simplify</span>
<span class="quote">&gt; &gt;&gt; page_move_anon_rmap() interface. It doesn&#39;t make sense to add even more</span>
<span class="quote">&gt; &gt;&gt; glue to get the assert work.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Kirill and I agree on what the final patch should be like, but I don&#39;t</span>
<span class="quote">&gt; &gt; want to post that until we&#39;ve heard back from you whether the &quot;(long)&quot;</span>
<span class="quote">&gt; &gt; patch above works - if it does work, fine, we go ahead with removing a</span>
<span class="quote">&gt; &gt; check which has never shown anything but its own problems; but if the</span>
<span class="quote">&gt; &gt; &quot;(long)&quot; patch does not work, then we need to worry and keep the check.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry for the delay. Yes, it seems to fix the issue. I see no crashes</span>
<span class="quote">&gt; when I would expect to see a dozen of them.</span>

Thanks a lot, Dmitry, that&#39;s very reassuring: patch follows, not touching
linear_page_index(), but removing the problem VM_BUG_ON_PAGE().

Hugh
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 4.7-rc6/include/linux/pagemap.h	2016-05-29 15:47:38.303064058 -0700</span>
<span class="p_header">+++ linux/include/linux/pagemap.h	2016-07-04 15:44:46.635147739 -0700</span>
<span class="p_chunk">@@ -408,7 +408,7 @@</span> <span class="p_context"> static inline pgoff_t linear_page_index(</span>
 	pgoff_t pgoff;
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		return linear_hugepage_index(vma, address);
<span class="p_del">-	pgoff = (address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	pgoff = (long)(address - vma-&gt;vm_start) &gt;&gt; PAGE_SHIFT;</span>
 	pgoff += vma-&gt;vm_pgoff;
 	return pgoff;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



