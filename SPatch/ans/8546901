
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[for-next,02/12] tracing: Remove duplicate checks for online CPUs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [for-next,02/12] tracing: Remove duplicate checks for online CPUs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 9, 2016, 2:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160309144744.350974705@goodmis.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8546901/mbox/"
   >mbox</a>
|
   <a href="/patch/8546901/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8546901/">/patch/8546901/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id DB5C0C0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 14:50:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 19EBA20204
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 14:50:50 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3D81E20211
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Mar 2016 14:50:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933147AbcCIOuo (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 9 Mar 2016 09:50:44 -0500
Received: from mail.kernel.org ([198.145.29.136]:37530 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932918AbcCIOrs (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 9 Mar 2016 09:47:48 -0500
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id D8B1A202DD;
	Wed,  9 Mar 2016 14:47:46 +0000 (UTC)
Received: from gandalf.local.home (cpe-67-246-153-56.stny.res.rr.com
	[67.246.153.56])
	(using TLSv1.2 with cipher AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 5D7E420204;
	Wed,  9 Mar 2016 14:47:45 +0000 (UTC)
Received: from rostedt by gandalf.local.home with local (Exim 4.86)
	(envelope-from &lt;rostedt@goodmis.org&gt;)
	id 1adfOq-0006Zz-DF; Wed, 09 Mar 2016 09:47:44 -0500
Message-Id: &lt;20160309144744.350974705@goodmis.org&gt;
User-Agent: quilt/0.61-1
Date: Wed, 09 Mar 2016 09:46:27 -0500
From: Steven Rostedt &lt;rostedt@goodmis.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Ingo Molnar &lt;mingo@kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Shreyas B. Prabhu&quot; &lt;shreyas@linux.vnet.ibm.com&gt;
Subject: [for-next][PATCH 02/12] tracing: Remove duplicate checks for online
	CPUs
References: &lt;20160309144625.888964064@goodmis.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=0002-tracing-Remove-duplicate-checks-for-online-CPUs.patch
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - March 9, 2016, 2:46 p.m.</div>
<pre class="content">
<span class="from">From: &quot;Steven Rostedt (Red Hat)&quot; &lt;rostedt@goodmis.org&gt;</span>

Some trace events have conditions that check if the current CPU is online or
not before recording the tracepoint. That&#39;s because certain trace events are
in locations that can be called as the CPU is going offline and when RCU no
longer monitors it (like kfree and friends). The check was added because
trace events require RCU to be active.

This is a trace event infrastructure issue and not something that individual
trace events should worry about. The tracepoint.h code now has added a check
to see if the current CPU is considered online, and it only does the
tracepoint if it is. There&#39;s no more need for individual trace events to
also include this check. It is now redundant.

Cc: Shreyas B. Prabhu &lt;shreyas@linux.vnet.ibm.com&gt;
<span class="signed-off-by">Signed-off-by: Steven Rostedt &lt;rostedt@goodmis.org&gt;</span>
---
 include/trace/events/kmem.h | 42 ++++--------------------------------------
 include/trace/events/tlb.h  |  4 +---
 2 files changed, 5 insertions(+), 41 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/trace/events/kmem.h b/include/trace/events/kmem.h</span>
<span class="p_header">index f7554fd7fc62..325b2a9b1959 100644</span>
<span class="p_header">--- a/include/trace/events/kmem.h</span>
<span class="p_header">+++ b/include/trace/events/kmem.h</span>
<span class="p_chunk">@@ -140,42 +140,19 @@</span> <span class="p_context"> DEFINE_EVENT(kmem_free, kfree,</span>
 	TP_ARGS(call_site, ptr)
 );
 
<span class="p_del">-DEFINE_EVENT_CONDITION(kmem_free, kmem_cache_free,</span>
<span class="p_add">+DEFINE_EVENT(kmem_free, kmem_cache_free,</span>
 
 	TP_PROTO(unsigned long call_site, const void *ptr),
 
<span class="p_del">-	TP_ARGS(call_site, ptr),</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_del">-	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_del">-	 * offline cpus, filter such calls out.</span>
<span class="p_del">-	 * While this trace can be called from a preemptable section,</span>
<span class="p_del">-	 * it has no impact on the condition since tasks can migrate</span>
<span class="p_del">-	 * only from online cpus to other online cpus. Thus its safe</span>
<span class="p_del">-	 * to use raw_smp_processor_id.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	TP_CONDITION(cpu_online(raw_smp_processor_id()))</span>
<span class="p_add">+	TP_ARGS(call_site, ptr)</span>
 );
 
<span class="p_del">-TRACE_EVENT_CONDITION(mm_page_free,</span>
<span class="p_add">+TRACE_EVENT(mm_page_free,</span>
 
 	TP_PROTO(struct page *page, unsigned int order),
 
 	TP_ARGS(page, order),
 
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_del">-	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_del">-	 * offline cpus, filter such calls out.</span>
<span class="p_del">-	 * While this trace can be called from a preemptable section,</span>
<span class="p_del">-	 * it has no impact on the condition since tasks can migrate</span>
<span class="p_del">-	 * only from online cpus to other online cpus. Thus its safe</span>
<span class="p_del">-	 * to use raw_smp_processor_id.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	TP_CONDITION(cpu_online(raw_smp_processor_id())),</span>
<span class="p_del">-</span>
 	TP_STRUCT__entry(
 		__field(	unsigned long,	pfn		)
 		__field(	unsigned int,	order		)
<span class="p_chunk">@@ -276,23 +253,12 @@</span> <span class="p_context"> DEFINE_EVENT(mm_page, mm_page_alloc_zone_locked,</span>
 	TP_ARGS(page, order, migratetype)
 );
 
<span class="p_del">-TRACE_EVENT_CONDITION(mm_page_pcpu_drain,</span>
<span class="p_add">+TRACE_EVENT(mm_page_pcpu_drain,</span>
 
 	TP_PROTO(struct page *page, unsigned int order, int migratetype),
 
 	TP_ARGS(page, order, migratetype),
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_del">-	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_del">-	 * offline cpus, filter such calls out.</span>
<span class="p_del">-	 * While this trace can be called from a preemptable section,</span>
<span class="p_del">-	 * it has no impact on the condition since tasks can migrate</span>
<span class="p_del">-	 * only from online cpus to other online cpus. Thus its safe</span>
<span class="p_del">-	 * to use raw_smp_processor_id.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	TP_CONDITION(cpu_online(raw_smp_processor_id())),</span>
<span class="p_del">-</span>
 	TP_STRUCT__entry(
 		__field(	unsigned long,	pfn		)
 		__field(	unsigned int,	order		)
<span class="p_header">diff --git a/include/trace/events/tlb.h b/include/trace/events/tlb.h</span>
<span class="p_header">index bc8815f45f3b..9d14b1992108 100644</span>
<span class="p_header">--- a/include/trace/events/tlb.h</span>
<span class="p_header">+++ b/include/trace/events/tlb.h</span>
<span class="p_chunk">@@ -34,13 +34,11 @@</span> <span class="p_context"> TLB_FLUSH_REASON</span>
 #define EM(a,b)		{ a, b },
 #define EMe(a,b)	{ a, b }
 
<span class="p_del">-TRACE_EVENT_CONDITION(tlb_flush,</span>
<span class="p_add">+TRACE_EVENT(tlb_flush,</span>
 
 	TP_PROTO(int reason, unsigned long pages),
 	TP_ARGS(reason, pages),
 
<span class="p_del">-	TP_CONDITION(cpu_online(smp_processor_id())),</span>
<span class="p_del">-</span>
 	TP_STRUCT__entry(
 		__field(	  int, reason)
 		__field(unsigned long,  pages)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



