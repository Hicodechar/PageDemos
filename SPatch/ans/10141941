
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/6] mm, hugetlb: unify core page allocation accounting and initialization - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/6] mm, hugetlb: unify core page allocation accounting and initialization</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 9:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103093213.26329-2-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10141941/mbox/"
   >mbox</a>
|
   <a href="/patch/10141941/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10141941/">/patch/10141941/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CE8D46034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:36:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B65912903B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:36:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B4FD92903E; Wed,  3 Jan 2018 09:36:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 056102903B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 09:36:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752264AbeACJgE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 04:36:04 -0500
Received: from mail-pl0-f66.google.com ([209.85.160.66]:46604 &quot;EHLO
	mail-pl0-f66.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751949AbeACJc3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 04:32:29 -0500
Received: by mail-pl0-f66.google.com with SMTP id i6so914185plt.13
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Jan 2018 01:32:28 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=m91D16RdrFHmaX/9BIhDOFVaCGB2zDMJkMCjOB25JUE=;
	b=m+5cK9ePC7Tduj5BHxiecx/LvooF7GodayOwN6zzQYawEQgFyHWetujnJj9aXKGIhj
	E38/QJSzJNH4twWQSkJyZpqoMyTx8rhhBh9t4gmfsGgAea62DH9GHztNZqTvZuEUxcq9
	26PSbUvEN8oP5MmV87tnUidrKQr5hCHD5Hg+VBpM7VoaCWgIw0w7QNfggoTS14yrmE14
	92eaQZQIcYCz9fGpPZkUD2+mxMLG4kEfelnWASqHwfsFaDNfrZyCdlWmLGWsCu8gcFIE
	279NH/jZnmaRLf5GXTqTgRuIF1t3ZICsZJ0Hvgf8HsjLrVb+Spb+6C/nIE9iTTYC0bky
	mtgQ==
X-Gm-Message-State: AKGB3mLWYGDv5erwydtXwmq7X8wXn3qhHjn37NEVSh8qqr0xorZX94OU
	uuB3MIAhNacDz2O2h/hz2mY=
X-Google-Smtp-Source: ACJfBos5M8BWr1yEswrUrRKUhEwIpvrTMBesYl72SU3NrE0cOaLkNn5dWHhWkuOSGVnD8HQHSWymNw==
X-Received: by 10.159.194.197 with SMTP id u5mr844718plz.448.1514971948275; 
	Wed, 03 Jan 2018 01:32:28 -0800 (PST)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	c2sm1790628pgq.48.2018.01.03.01.32.26
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 03 Jan 2018 01:32:27 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: &lt;linux-mm@kvack.org&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 1/6] mm,
	hugetlb: unify core page allocation accounting and initialization
Date: Wed,  3 Jan 2018 10:32:08 +0100
Message-Id: &lt;20180103093213.26329-2-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
References: &lt;20180103093213.26329-1-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 3, 2018, 9:32 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

hugetlb allocator has two entry points to the page allocator
- alloc_fresh_huge_page_node
- __hugetlb_alloc_buddy_huge_page

The two differ very subtly in two aspects. The first one doesn&#39;t care
about HTLB_BUDDY_* stats and it doesn&#39;t initialize the huge page.
prep_new_huge_page is not used because it not only initializes hugetlb
specific stuff but because it also put_page and releases the page to
the hugetlb pool which is not what is required in some contexts. This
makes things more complicated than necessary.

Simplify things by a) removing the page allocator entry point duplicity
and only keep __hugetlb_alloc_buddy_huge_page and b) make
prep_new_huge_page more reusable by removing the put_page which moves
the page to the allocator pool. All current callers are updated to call
put_page explicitly. Later patches will add new callers which won&#39;t
need it.

This patch shouldn&#39;t introduce any functional change.
<span class="reviewed-by">
Reviewed-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 mm/hugetlb.c | 61 +++++++++++++++++++++++++++++-------------------------------
 1 file changed, 29 insertions(+), 32 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 4137fb67cd79..a8959667f539 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1157,6 +1157,7 @@</span> <span class="p_context"> static struct page *alloc_fresh_gigantic_page_node(struct hstate *h, int nid)</span>
 	if (page) {
 		prep_compound_gigantic_page(page, huge_page_order(h));
 		prep_new_huge_page(h, page, nid);
<span class="p_add">+		put_page(page); /* free it into the hugepage allocator */</span>
 	}
 
 	return page;
<span class="p_chunk">@@ -1304,7 +1305,6 @@</span> <span class="p_context"> static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)</span>
 	h-&gt;nr_huge_pages++;
 	h-&gt;nr_huge_pages_node[nid]++;
 	spin_unlock(&amp;hugetlb_lock);
<span class="p_del">-	put_page(page); /* free it into the hugepage allocator */</span>
 }
 
 static void prep_compound_gigantic_page(struct page *page, unsigned int order)
<span class="p_chunk">@@ -1381,41 +1381,49 @@</span> <span class="p_context"> pgoff_t __basepage_index(struct page *page)</span>
 	return (index &lt;&lt; compound_order(page_head)) + compound_idx;
 }
 
<span class="p_del">-static struct page *alloc_fresh_huge_page_node(struct hstate *h, int nid)</span>
<span class="p_add">+static struct page *__hugetlb_alloc_buddy_huge_page(struct hstate *h,</span>
<span class="p_add">+		gfp_t gfp_mask, int nid, nodemask_t *nmask)</span>
 {
<span class="p_add">+	int order = huge_page_order(h);</span>
 	struct page *page;
 
<span class="p_del">-	page = __alloc_pages_node(nid,</span>
<span class="p_del">-		htlb_alloc_mask(h)|__GFP_COMP|__GFP_THISNODE|</span>
<span class="p_del">-						__GFP_RETRY_MAYFAIL|__GFP_NOWARN,</span>
<span class="p_del">-		huge_page_order(h));</span>
<span class="p_del">-	if (page) {</span>
<span class="p_del">-		prep_new_huge_page(h, page, nid);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	gfp_mask |= __GFP_COMP|__GFP_RETRY_MAYFAIL|__GFP_NOWARN;</span>
<span class="p_add">+	if (nid == NUMA_NO_NODE)</span>
<span class="p_add">+		nid = numa_mem_id();</span>
<span class="p_add">+	page = __alloc_pages_nodemask(gfp_mask, order, nid, nmask);</span>
<span class="p_add">+	if (page)</span>
<span class="p_add">+		__count_vm_event(HTLB_BUDDY_PGALLOC);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		__count_vm_event(HTLB_BUDDY_PGALLOC_FAIL);</span>
 
 	return page;
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Allocates a fresh page to the hugetlb allocator pool in the node interleaved</span>
<span class="p_add">+ * manner.</span>
<span class="p_add">+ */</span>
 static int alloc_fresh_huge_page(struct hstate *h, nodemask_t *nodes_allowed)
 {
 	struct page *page;
 	int nr_nodes, node;
<span class="p_del">-	int ret = 0;</span>
<span class="p_add">+	gfp_t gfp_mask = htlb_alloc_mask(h) | __GFP_THISNODE;</span>
 
 	for_each_node_mask_to_alloc(h, nr_nodes, node, nodes_allowed) {
<span class="p_del">-		page = alloc_fresh_huge_page_node(h, node);</span>
<span class="p_del">-		if (page) {</span>
<span class="p_del">-			ret = 1;</span>
<span class="p_add">+		page = __hugetlb_alloc_buddy_huge_page(h, gfp_mask,</span>
<span class="p_add">+				node, nodes_allowed);</span>
<span class="p_add">+		if (page)</span>
 			break;
<span class="p_del">-		}</span>
<span class="p_add">+</span>
 	}
 
<span class="p_del">-	if (ret)</span>
<span class="p_del">-		count_vm_event(HTLB_BUDDY_PGALLOC);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		count_vm_event(HTLB_BUDDY_PGALLOC_FAIL);</span>
<span class="p_add">+	if (!page)</span>
<span class="p_add">+		return 0;</span>
 
<span class="p_del">-	return ret;</span>
<span class="p_add">+	prep_new_huge_page(h, page, page_to_nid(page));</span>
<span class="p_add">+	put_page(page); /* free it into the hugepage allocator */</span>
<span class="p_add">+</span>
<span class="p_add">+	return 1;</span>
 }
 
 /*
<span class="p_chunk">@@ -1523,17 +1531,6 @@</span> <span class="p_context"> int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
 	return rc;
 }
 
<span class="p_del">-static struct page *__hugetlb_alloc_buddy_huge_page(struct hstate *h,</span>
<span class="p_del">-		gfp_t gfp_mask, int nid, nodemask_t *nmask)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int order = huge_page_order(h);</span>
<span class="p_del">-</span>
<span class="p_del">-	gfp_mask |= __GFP_COMP|__GFP_RETRY_MAYFAIL|__GFP_NOWARN;</span>
<span class="p_del">-	if (nid == NUMA_NO_NODE)</span>
<span class="p_del">-		nid = numa_mem_id();</span>
<span class="p_del">-	return __alloc_pages_nodemask(gfp_mask, order, nid, nmask);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static struct page *__alloc_buddy_huge_page(struct hstate *h, gfp_t gfp_mask,
 		int nid, nodemask_t *nmask)
 {
<span class="p_chunk">@@ -1589,11 +1586,9 @@</span> <span class="p_context"> static struct page *__alloc_buddy_huge_page(struct hstate *h, gfp_t gfp_mask,</span>
 		 */
 		h-&gt;nr_huge_pages_node[r_nid]++;
 		h-&gt;surplus_huge_pages_node[r_nid]++;
<span class="p_del">-		__count_vm_event(HTLB_BUDDY_PGALLOC);</span>
 	} else {
 		h-&gt;nr_huge_pages--;
 		h-&gt;surplus_huge_pages--;
<span class="p_del">-		__count_vm_event(HTLB_BUDDY_PGALLOC_FAIL);</span>
 	}
 	spin_unlock(&amp;hugetlb_lock);
 
<span class="p_chunk">@@ -2148,6 +2143,8 @@</span> <span class="p_context"> static void __init gather_bootmem_prealloc(void)</span>
 		prep_compound_huge_page(page, h-&gt;order);
 		WARN_ON(PageReserved(page));
 		prep_new_huge_page(h, page, page_to_nid(page));
<span class="p_add">+		put_page(page); /* free it into the hugepage allocator */</span>
<span class="p_add">+</span>
 		/*
 		 * If we had gigantic hugepages allocated at boot time, we need
 		 * to restore the &#39;stolen&#39; pages to totalram_pages in order to

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



