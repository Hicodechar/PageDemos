
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part2,v5,18/31] KVM: SVM: VMRUN should use assosiated ASID when SEV is enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part2,v5,18/31] KVM: SVM: VMRUN should use assosiated ASID when SEV is enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 4, 2017, 1:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171004131412.13038-19-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9984649/mbox/"
   >mbox</a>
|
   <a href="/patch/9984649/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9984649/">/patch/9984649/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	2C6E060237 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 13:20:25 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1C32128AF8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 13:20:25 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0F95E28AFD; Wed,  4 Oct 2017 13:20:25 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B23AB28AF8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  4 Oct 2017 13:20:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752771AbdJDNUK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 4 Oct 2017 09:20:10 -0400
Received: from mail-cys01nam02on0084.outbound.protection.outlook.com
	([104.47.37.84]:31550
	&quot;EHLO NAM02-CY1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752375AbdJDNPW (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 4 Oct 2017 09:15:22 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=/jd2Xxo4dJDkm6tMwLsSK0Z2QYpv4dDiTG3BOYgNkrs=;
	b=VgRrUgn70+iDeK4AAFAP+d/FgFNmPYgjo767tXQNSYJ9Of64yOBgiTXqdpt1vjmjebmPNGjqGtjYG11Qxk5gRZEbbvykq2ajTAUmaLKEU8dSsG/FyHZQBct73zS8dHf8Tj5M3G13FlJpVYauGysvxEJq/kFVadQOqJFH7JKDZzA=
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	SN1PR12MB0160.namprd12.prod.outlook.com (10.162.3.147) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Wed, 4 Oct 2017 13:15:11 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: x86@kernel.org, kvm@vger.kernel.org, linux-kernel@vger.kernel.org
Cc: Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Joerg Roedel &lt;joro@8bytes.org&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [Part2 PATCH v5 18/31] KVM: SVM: VMRUN should use assosiated ASID
	when SEV is enabled
Date: Wed,  4 Oct 2017 08:13:59 -0500
Message-Id: &lt;20171004131412.13038-19-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20171004131412.13038-1-brijesh.singh@amd.com&gt;
References: &lt;20171004131412.13038-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: MWHPR2201CA0056.namprd22.prod.outlook.com (10.172.59.30)
	To SN1PR12MB0160.namprd12.prod.outlook.com (10.162.3.147)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 9d640366-1dd3-459e-1de5-08d50b29f229
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:SN1PR12MB0160; 
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0160;
	3:KD6+vt9sxuUgqulS9qaMrvFgy4DHOL96qMP4yu8tzYtSHTkPOVBOuYVzfEleiMC/xRWhM0JfcpqPA5haJgPd2rDTCYiM4qQUZp0m3XI6AbH33QrGmpC/dv3tWnUPjeG/bGoCdIYUiWR5rX8TwVFJ9A+dFzCsa3Bk0vWjeqYUV4DyHFKuwAHMM8DEyiIQ5mjETKui6QdESGBsPdiCwKWUN3CcbmNvs8ucW1JcnTO2vQAZyQf0r15etI0xCinWLCwQ;
	25:YADYIJUC+JJ+O0f6jIadNKellTb8kWxCoJ0XOBChvVTQtpUUbodzFNZUInhEbsx9hxYNeUVFkywG3ZpQnABb26pI1dpQDm872YSwAwXS7Fo2RWwouNN2fsqU7iBK8ii7pUX9sZ8iPbipEcE54FFEiADW9e4yjG5DwdW2TEtOHVI9yCdafiastcLUgcx6dX36LSLy5EcUBGxIVA6V2dzKuhoHzSG1WV5TfRjbRBQcnUjlbkTi0xn1RHJiDPDAqEFTNklIM/TxPMPq6Hmz5HuHc19nIkQ21bvkPVTWTATTMxfesqmik7VfR+35LWQN2iqPImCvXYYpDbmgKZ9I8Ue3Xw==;
	31:gS0aWhGbutSIC3EYLlpvXipmoKUlUaoI2ZFne2YEUOqzh3Lqq2KCsw7aBssrtlYLxSPXzhtXiOlHh0Nrtlwqt5/DvGL7Joq7rLH6U3O9jYmYeCPNzp23NrzYcMKo2qa+l8M1GA+/uaXeO+OSPRSz5Ypf3El6TXdcmEG+Wr6MC1oDVAQ3+3xJfaoyF05oMlS72cVDYrE3+gVX+d6pt9dMrrViUMiHsQCPSlCstCaFVDY=
X-MS-TrafficTypeDiagnostic: SN1PR12MB0160:
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0160;
	20:FimuKvsGuF0saJbuJk876CKul+495SMWbsx8D+rhEGsFmgVnn56Taybw1AYkyNPSr98Xd9EYKXZMY5DQc3OPktAYZHRGKUV48PefN3knB3326rWW7gILySd0jOrwvJ5e+KwZnjsAFIo0AcLhk0Ha29n0y88q/KIoH1DseAoJ47/LYf7R/aZ3Q/VKqWig5NZOxany7/umuORBvdsBaRwztb135tLzQssZHv1tHCFp1TXXu9i3Fn76NNxeqnBDqxudVCLIptfyCrwcPGYCfZITZsb0obzJbMLmlKd4HrNw+je5BQwb4BjKRSpytvro30S0ItVKcxa1dkcYMtOXDBtZKl1HwCztZFV6kVp4I7kLdLO0r5Ff2ws3gk/q3Ev5/79Eiz/NFmUhQrDLYodx6mM4FtAjWx40nkpnOMKZYrwSsLzQjxIG1Sk/wfAljGg5TwXaa53HFVMZX88cCDdDmpr9ZqYFFPNu+05OKXIvDPHmkxtEngnWNlyxutSgsUj4O3Id;
	4:GjjtBDGlP9svNoneWe+9wP9kuX2BYuLdt6ocKkduYesFkzosZoAWLG6ZkLQQsEH+DAoF8aYpnCkRArJLcqTTjkLhdHcwozSV7bweB4Ja0KhoE7T+nI9nBq8VqlIs7MD1QUCM73wh5q6jIlmY6hJ/aNaMNrXVQM8B6QVHBJOuUZh5yPTfSJFnIMCV4qSuJhmqCYPXrRiRVvyF7+dDzz41WEexOj+xnTrWWYa/g8sfPp1EaA+GznRZZTaEClvMwhEYIeo8/dxBamCU65bxQCw3A0393SGXDAaV0Fig9YVeIqBsRtlA5j+xNToNcT3qMS5R
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;SN1PR12MB016010DA44C4FE14F43725BBE5730@SN1PR12MB0160.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(100000703101)(100105400095)(3002001)(93006095)(93001095)(10201501046)(6055026)(6041248)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123564025)(20161123562025)(20161123555025)(20161123560025)(20161123558100)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN1PR12MB0160; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN1PR12MB0160; 
X-Forefront-PRVS: 0450A714CB
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(39860400002)(346002)(376002)(199003)(189002)(97736004)(86362001)(23676002)(76176999)(53936002)(50986999)(1076002)(6116002)(3846002)(478600001)(36756003)(47776003)(101416001)(33646002)(6486002)(66066001)(189998001)(68736007)(105586002)(53416004)(50466002)(4326008)(54906003)(8936002)(305945005)(6666003)(2870700001)(81166006)(5660300001)(81156014)(25786009)(2906002)(8676002)(7736002)(2950100002)(7416002)(50226002)(106356001)(316002)(16526018);
	DIR:OUT; SFP:1101; SCL:1; SRVR:SN1PR12MB0160;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtTTjFQUjEyTUIwMTYwOzIzOkdERXlVa2hjQkIzU1Q0WEExdDNGV0pPNzRw?=
	=?utf-8?B?T3c1V1ZlSG1UREpCMzJ3QTJDVTJMQTNXakY0WmoxTy9WYjZyM0RLODRRWXNN?=
	=?utf-8?B?bDBuVitrZTZPZzBzSXNtN0hzWW9zR1BZQXdWSVM5KzlONDhFN0RRUkpmSThS?=
	=?utf-8?B?MjRzSWROT3owTWFNWWlPcE9scEx1RUp1ZjEzOFB6Z1lGTlA2bW9ieFEwc2Ri?=
	=?utf-8?B?USszRzNWdnM0aVE5dFo2T05EY3hsNE1GcGVpbGl1MldLTVNRZ1J6c3oxK1pv?=
	=?utf-8?B?NXRKNDBaQTBPdWdVL1ZDaTAwdmI5TWRoYlRUOGcvZDkrVnhnVmFDc1Q4N2h4?=
	=?utf-8?B?OHc3RDhqNWNtOFhEY3pQU1krLzFKbjFrRHFhaE85ZkJOTmtRaE8xRUhFbEJB?=
	=?utf-8?B?eEpqd0RUQ2V5aGlnRVdySkFsZGk1ZjhacTkxM3E5OXo1ODE0NGVld2xFc3py?=
	=?utf-8?B?RzEzdUxlcUJpdVk4UDVhLzIva1ROVEkyU1dVcElQdnMvVmdIbXRzR2RNcVFj?=
	=?utf-8?B?YnJrTkVISGlNV21CNGJ4cmUzTmMvVkVsWEdPLzM3bWQrM1p6alY1dDdMQTA2?=
	=?utf-8?B?NXVOOHFzU1lpclREZVEvWXY1RVd4Q1dhUkI0WldvV1ZCS1M5OEdsMVJtblpY?=
	=?utf-8?B?Vkt3dWw0K2lYbG5LWk9EUThURFY4VDhvWmVDeGwwcThOSXM0ZVoyMW55MU5R?=
	=?utf-8?B?SjhIeVlPN3lsRUlOQTd3dVhaU2k2dnJ1QTkxSTFFem53RENuMGJTY0tiYXFv?=
	=?utf-8?B?c3RjZWt3UEhMZE5EVE1QY2xTWTlNTHhFeHVBZllxN0Nqak1kSElYUGQza2xN?=
	=?utf-8?B?aGNZSVpnVjdCQ1ZSV2VTRnk4Y1FnRm5KU0hOeXpTcThJT01RMXh1R1RSVFdm?=
	=?utf-8?B?VzRodVdjZFh1VkFINW9OekhsZ3B0N1B6cUs4RzRYUEpNM3pOT3ZreVI0Rzk4?=
	=?utf-8?B?RWhwcHZVS0IxL0lTcnh5TXM5SHE5QkZyT2p3dHNHYVhDREVmVlkrbEF4dGFr?=
	=?utf-8?B?dEdCd1NIY3hZcXlZcWJYdzlnbkVRV044MCsxcnNIR3g1UEN2TE1OOEZucFdx?=
	=?utf-8?B?QmY0Z2F2TVNwS2YvOWpxcHl3T2U2UFFyUWZ3VXNUaFVISktVSlpHRG96M1Vx?=
	=?utf-8?B?MUt3N1dEMWFEMDJGSnZ5cVpsSGQ2SGQ1UWVSNjl5MU9WOGg0U2wzeUhoeUxh?=
	=?utf-8?B?ck9IT2NTVThlSk51Ry9ybkNyV0NEcFRGTDdGWmpFaWNlUmg5aEVERE9xb2xQ?=
	=?utf-8?B?VzduTDlET05INytWN2tZM2FzdS9IMm5hZFF1SVh3MlNIRDAwTUcrSlB1TlFk?=
	=?utf-8?B?cnBEcEo1UnRaeHVqa3RvQS9SdWZDZmtJQTN0OTVGaWl2SWlvY0Z2ZWhzTWFr?=
	=?utf-8?B?TzNwYXk4QUFSQTI1dWI0QWpWL08vUVNSblJkS0ZlTVU0aFJrVFZqQmVGQ3NQ?=
	=?utf-8?Q?uFGfmj9AMSAOsuUR3Fui6sDJguD?=
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0160;
	6:umaEySUXCG3AeSYFfOQl+Exe+KBqrKooD9LejuouXbh7Ncs6NzuybJ7bHYSoM2LCECsuLWiRMZ6S0gSCXFKGWBeurNrg7iVQm2yKJpyVOwt8HfybGzKaj7sNM4IkpudFHcjq5U2IcXC0y14fG0pGcFnRwXpH2fT0l55RkuNHOqxKXe+pbkHnIobmzHr4jg6mm3kA2WoxEeH4ALF6NWPnM094hidKpkxAxWovs3FlBa6ZLrjF0wpRtDhKAre6p+japi/0kkrCpheXWpaiyibI/TAKEdespxgAlzleuMGTkx07AF7ks72beWsJSmvY20lV4I+E8gg4UVp00thsBhDDrA==;
	5:JBO3tC9xAe6PK5FNJ0LF1iJffvzIhcxlYX6JqzGNcb1aNfajX2znlk4RVEsCP+6mchk6fQRaWXw7oWDiKJ9FrHtQHIRfRC/eI3H2X6egmGhIbo5zdNZdtkMCtzfeaHcZdfetZyiyTO+AuP/5xrh6kw==;
	24:kAr0JabGtinNYBysQhPJm5q6JtXlrnZ45+OBP58dN21U5kA+Zoc+UVbrlpK+zQs+M6stawhYy1An2KwfKmwtGNIEf4EdHgNs3Of6qKENM/o=;
	7:3Byc3ikpQpUWsDK3po81ZMvoKMye60Vi+gukq+ccWxTTVf+AX5+UgIx4SSwD+ktcRn7TV6OyzemFM5+XgAKK2UP/rEAFi7a7loF5iE+vfUf9mCExz1L5qnQXkk+hNhVnfGJbWrNjGQFL0HMFc7tcT6GaOrEkFLxsvhF96YB6iDEp13XvGCg/qDq8cmh7gRM1jZP9L6al4wVeIVcX4vtRS9Tsb4GKFrBYC6FcWXwtDns=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN1PR12MB0160;
	20:KmOsa1M4aUb2ATTCfwfCfSTj67dCeT4lH4EnDT2pl63nAzhoHtk72kdVM0fs095DpY0LDwvzVQgYwsXVrN6WRJglxWwWOT2ljug22tjt5hhHn7+qWp0KUzcES5UoueZeHp7+svngmSSmFWbuwRYPdcgBu93JW6tWZdubfG2Vk05k7rruNF93iurOj88d78PndLGBus5sNTOeaqgmNFrQ5VqrLGyQOa3+Q/Qm2gEYXWc/diCE11bI51Hfgo0bRa//
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 04 Oct 2017 13:15:11.1357
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN1PR12MB0160
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Oct. 4, 2017, 1:13 p.m.</div>
<pre class="content">
SEV hardware uses ASIDs to associate memory encryption key with the
guest VM. During the guest creation time, SEV VM use SEV_CMD_ACTIVATE
command to bind a particular ASID to the guest. Lets make sure that the
VMCB is programmed with the bound ASID before a VMRUN.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;
Cc: Joerg Roedel &lt;joro@8bytes.org&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Cc: x86@kernel.org
Cc: kvm@vger.kernel.org
Cc: linux-kernel@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/kvm/svm.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 56 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Oct. 14, 2017, 9:27 a.m.</div>
<pre class="content">
On Wed, Oct 04, 2017 at 08:13:59AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; SEV hardware uses ASIDs to associate memory encryption key with the</span>
<span class="quote">&gt; guest VM. During the guest creation time, SEV VM use SEV_CMD_ACTIVATE</span>
<span class="quote">&gt; command to bind a particular ASID to the guest. Lets make sure that the</span>
<span class="quote">&gt; VMCB is programmed with the bound ASID before a VMRUN.</span>

Some minor corrections:

&quot;SEV hardware uses ASIDs to associate a memory encryption key with a
guest VM. During guest creation, a SEV VM uses the SEV_CMD_ACTIVATE
command to bind a particular ASID to the guest. Lets make sure that the
VMCB is programmed with the bound ASID before a VMRUN.&quot;
<span class="quote">
&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Joerg Roedel &lt;joro@8bytes.org&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: kvm@vger.kernel.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/kvm/svm.c | 58 ++++++++++++++++++++++++++++++++++++++++++++++++++++--</span>
<span class="quote">&gt;  1 file changed, 56 insertions(+), 2 deletions(-)</span>

With that:
<span class="reviewed-by">
Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index 7f3179555a57..a1388e74149f 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -213,6 +213,9 @@</span> <span class="p_context"> struct vcpu_svm {</span>
 	 */
 	struct list_head ir_list;
 	spinlock_t ir_list_lock;
<span class="p_add">+</span>
<span class="p_add">+	/* which host CPU was used for running this vcpu */</span>
<span class="p_add">+	unsigned int last_cpu;</span>
 };
 
 /*
<span class="p_chunk">@@ -340,6 +343,13 @@</span> <span class="p_context"> static inline bool sev_guest(struct kvm *kvm)</span>
 	return sev-&gt;active;
 }
 
<span class="p_add">+static inline int sev_get_asid(struct kvm *kvm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm_sev_info *sev = &amp;kvm-&gt;arch.sev_info;</span>
<span class="p_add">+</span>
<span class="p_add">+	return sev-&gt;asid;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void mark_all_dirty(struct vmcb *vmcb)
 {
 	vmcb-&gt;control.clean = 0;
<span class="p_chunk">@@ -550,6 +560,9 @@</span> <span class="p_context"> struct svm_cpu_data {</span>
 	struct kvm_ldttss_desc *tss_desc;
 
 	struct page *save_area;
<span class="p_add">+</span>
<span class="p_add">+	/* index = sev_asid, value = vmcb pointer */</span>
<span class="p_add">+	struct vmcb **sev_vmcbs;</span>
 };
 
 static DEFINE_PER_CPU(struct svm_cpu_data *, svm_data);
<span class="p_chunk">@@ -863,6 +876,7 @@</span> <span class="p_context"> static void svm_cpu_uninit(int cpu)</span>
 		return;
 
 	per_cpu(svm_data, raw_smp_processor_id()) = NULL;
<span class="p_add">+	kfree(sd-&gt;sev_vmcbs);</span>
 	__free_page(sd-&gt;save_area);
 	kfree(sd);
 }
<span class="p_chunk">@@ -876,11 +890,18 @@</span> <span class="p_context"> static int svm_cpu_init(int cpu)</span>
 	if (!sd)
 		return -ENOMEM;
 	sd-&gt;cpu = cpu;
<span class="p_del">-	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	r = -ENOMEM;
<span class="p_add">+	sd-&gt;save_area = alloc_page(GFP_KERNEL);</span>
 	if (!sd-&gt;save_area)
 		goto err_1;
 
<span class="p_add">+	if (svm_sev_enabled()) {</span>
<span class="p_add">+		r = -ENOMEM;</span>
<span class="p_add">+		sd-&gt;sev_vmcbs = kmalloc((max_sev_asid + 1) * sizeof(void *), GFP_KERNEL);</span>
<span class="p_add">+		if (!sd-&gt;sev_vmcbs)</span>
<span class="p_add">+			goto err_1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	per_cpu(svm_data, cpu) = sd;
 
 	return 0;
<span class="p_chunk">@@ -1514,7 +1535,8 @@</span> <span class="p_context"> static void sev_firmware_exit(void)</span>
 static void sev_asid_free(struct kvm *kvm)
 {
 	struct kvm_sev_info *sev = &amp;kvm-&gt;arch.sev_info;
<span class="p_del">-	int pos, asid;</span>
<span class="p_add">+	struct svm_cpu_data *sd;</span>
<span class="p_add">+	int pos, asid, cpu;</span>
 
 	if (!svm_sev_enabled())
 		return;
<span class="p_chunk">@@ -1522,6 +1544,11 @@</span> <span class="p_context"> static void sev_asid_free(struct kvm *kvm)</span>
 	asid = sev-&gt;asid;
 	pos = asid - 1;
 	clear_bit(pos, sev_asid_bitmap);
<span class="p_add">+</span>
<span class="p_add">+	for_each_possible_cpu(cpu) {</span>
<span class="p_add">+		sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+		sd-&gt;sev_vmcbs[pos] = NULL;</span>
<span class="p_add">+	}</span>
 }
 
 static void sev_vm_destroy(struct kvm *kvm)
<span class="p_chunk">@@ -4456,12 +4483,39 @@</span> <span class="p_context"> static void reload_tss(struct kvm_vcpu *vcpu)</span>
 	load_TR_desc();
 }
 
<span class="p_add">+static void pre_sev_run(struct vcpu_svm *svm, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+	int asid = sev_get_asid(svm-&gt;vcpu.kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Assign the asid allocated with this SEV guest */</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.asid = asid;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Flush guest TLB:</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * 1) when different VMCB for the same ASID is to be run on the same host CPU.</span>
<span class="p_add">+	 * 2) or this VMCB was executed on different host CPU in previous VMRUNs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sd-&gt;sev_vmcbs[asid] == svm-&gt;vmcb &amp;&amp;</span>
<span class="p_add">+	    svm-&gt;last_cpu == cpu)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm-&gt;last_cpu = cpu;</span>
<span class="p_add">+	sd-&gt;sev_vmcbs[asid] = svm-&gt;vmcb;</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.tlb_ctl = TLB_CONTROL_FLUSH_ASID;</span>
<span class="p_add">+	mark_dirty(svm-&gt;vmcb, VMCB_ASID);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void pre_svm_run(struct vcpu_svm *svm)
 {
 	int cpu = raw_smp_processor_id();
 
 	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
 
<span class="p_add">+	if (sev_guest(svm-&gt;vcpu.kvm))</span>
<span class="p_add">+		return pre_sev_run(svm, cpu);</span>
<span class="p_add">+</span>
 	/* FIXME: handle wraparound of asid_generation */
 	if (svm-&gt;asid_generation != sd-&gt;asid_generation)
 		new_asid(svm, sd);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



