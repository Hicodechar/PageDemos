
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,36/37] KPTI: Rename to PAGE_TABLE_ISOLATION - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,36/37] KPTI: Rename to PAGE_TABLE_ISOLATION</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 8:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180103195058.693189785@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10143245/mbox/"
   >mbox</a>
|
   <a href="/patch/10143245/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10143245/">/patch/10143245/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C1AB16034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:25:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B5F71292EE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:25:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AA23B292F4; Wed,  3 Jan 2018 20:25:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BE6FC292EE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 20:25:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752421AbeACUZW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 15:25:22 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:33192 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752199AbeACUN1 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 15:13:27 -0500
Received: from localhost (LFbn-1-12258-90.w90-92.abo.wanadoo.fr
	[90.92.71.90])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id BC0C0BCF;
	Wed,  3 Jan 2018 20:13:26 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Kees Cook &lt;keescook@chromium.org&gt;
Subject: [PATCH 4.4 36/37] KPTI: Rename to PAGE_TABLE_ISOLATION
Date: Wed,  3 Jan 2018 21:11:42 +0100
Message-Id: &lt;20180103195058.693189785@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.15.1
In-Reply-To: &lt;20180103195056.837404126@linuxfoundation.org&gt;
References: &lt;20180103195056.837404126@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 3, 2018, 8:11 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Kees Cook &lt;keescook@chromium.org&gt;</span>

This renames CONFIG_KAISER to CONFIG_PAGE_TABLE_ISOLATION.
<span class="signed-off-by">
Signed-off-by: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 arch/x86/boot/compressed/misc.h           |    2 +-
 arch/x86/entry/entry_64.S                 |   12 ++++++------
 arch/x86/include/asm/cpufeature.h         |    2 +-
 arch/x86/include/asm/kaiser.h             |   12 ++++++------
 arch/x86/include/asm/pgtable.h            |    4 ++--
 arch/x86/include/asm/pgtable_64.h         |    4 ++--
 arch/x86/include/asm/pgtable_types.h      |    2 +-
 arch/x86/include/asm/tlbflush.h           |    2 +-
 arch/x86/kernel/cpu/perf_event_intel_ds.c |    4 ++--
 arch/x86/kernel/head_64.S                 |    2 +-
 arch/x86/mm/Makefile                      |    2 +-
 include/linux/kaiser.h                    |    6 +++---
 include/linux/percpu-defs.h               |    2 +-
 security/Kconfig                          |    2 +-
 14 files changed, 29 insertions(+), 29 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/boot/compressed/misc.h</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/misc.h</span>
<span class="p_chunk">@@ -9,7 +9,7 @@</span> <span class="p_context"></span>
  */
 #undef CONFIG_PARAVIRT
 #undef CONFIG_PARAVIRT_SPINLOCKS
<span class="p_del">-#undef CONFIG_KAISER</span>
<span class="p_add">+#undef CONFIG_PAGE_TABLE_ISOLATION</span>
 #undef CONFIG_KASAN
 
 #include &lt;linux/linkage.h&gt;
<span class="p_header">--- a/arch/x86/entry/entry_64.S</span>
<span class="p_header">+++ b/arch/x86/entry/entry_64.S</span>
<span class="p_chunk">@@ -1043,7 +1043,7 @@</span> <span class="p_context"> ENTRY(paranoid_entry)</span>
 	SWAPGS
 	xorl	%ebx, %ebx
 1:
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/*
 	 * We might have come in between a swapgs and a SWITCH_KERNEL_CR3
 	 * on entry, or between a SWITCH_USER_CR3 and a swapgs on exit.
<span class="p_chunk">@@ -1083,7 +1083,7 @@</span> <span class="p_context"> ENTRY(paranoid_exit)</span>
 	DISABLE_INTERRUPTS(CLBR_NONE)
 	TRACE_IRQS_OFF_DEBUG
 	TRACE_IRQS_IRETQ_DEBUG
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/* No ALTERNATIVE for X86_FEATURE_KAISER: paranoid_entry sets %ebx */
 	testl	$2, %ebx			/* SWITCH_USER_CR3 needed? */
 	jz	paranoid_exit_no_switch
<span class="p_chunk">@@ -1314,7 +1314,7 @@</span> <span class="p_context"> ENTRY(nmi)</span>
 
 	movq	%rsp, %rdi
 	movq	$-1, %rsi
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/* Unconditionally use kernel CR3 for do_nmi() */
 	/* %rax is saved above, so OK to clobber here */
 	ALTERNATIVE &quot;jmp 2f&quot;, &quot;movq %cr3, %rax&quot;, X86_FEATURE_KAISER
<span class="p_chunk">@@ -1328,7 +1328,7 @@</span> <span class="p_context"> ENTRY(nmi)</span>
 #endif
 	call	do_nmi
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/*
 	 * Unconditionally restore CR3.  I know we return to
 	 * kernel code that needs user CR3, but do we ever return
<span class="p_chunk">@@ -1558,7 +1558,7 @@</span> <span class="p_context"> end_repeat_nmi:</span>
 1:
 	movq	%rsp, %rdi
 	movq	$-1, %rsi
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/* Unconditionally use kernel CR3 for do_nmi() */
 	/* %rax is saved above, so OK to clobber here */
 	ALTERNATIVE &quot;jmp 2f&quot;, &quot;movq %cr3, %rax&quot;, X86_FEATURE_KAISER
<span class="p_chunk">@@ -1574,7 +1574,7 @@</span> <span class="p_context"> end_repeat_nmi:</span>
 	/* paranoidentry do_nmi, 0; without TRACE_IRQS_OFF */
 	call	do_nmi
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	/*
 	 * Unconditionally restore CR3.  We might be returning to
 	 * kernel code that needs user CR3, like just just before
<span class="p_header">--- a/arch/x86/include/asm/cpufeature.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeature.h</span>
<span class="p_chunk">@@ -201,7 +201,7 @@</span> <span class="p_context"></span>
 #define X86_FEATURE_INTEL_PT	( 7*32+15) /* Intel Processor Trace */
 
 /* Because the ALTERNATIVE scheme is for members of the X86_FEATURE club... */
<span class="p_del">-#define X86_FEATURE_KAISER	( 7*32+31) /* CONFIG_KAISER w/o nokaiser */</span>
<span class="p_add">+#define X86_FEATURE_KAISER	( 7*32+31) /* CONFIG_PAGE_TABLE_ISOLATION w/o nokaiser */</span>
 
 /* Virtualization flags: Linux defined, word 8 */
 #define X86_FEATURE_TPR_SHADOW  ( 8*32+ 0) /* Intel TPR Shadow */
<span class="p_header">--- a/arch/x86/include/asm/kaiser.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kaiser.h</span>
<span class="p_chunk">@@ -20,7 +20,7 @@</span> <span class="p_context"></span>
 #define KAISER_SHADOW_PGD_OFFSET 0x1000
 
 #ifdef __ASSEMBLY__
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 
 .macro _SWITCH_TO_KERNEL_CR3 reg
 movq %cr3, \reg
<span class="p_chunk">@@ -69,7 +69,7 @@</span> <span class="p_context"> movq PER_CPU_VAR(unsafe_stack_register_b</span>
 8:
 .endm
 
<span class="p_del">-#else /* CONFIG_KAISER */</span>
<span class="p_add">+#else /* CONFIG_PAGE_TABLE_ISOLATION */</span>
 
 .macro SWITCH_KERNEL_CR3
 .endm
<span class="p_chunk">@@ -78,11 +78,11 @@</span> <span class="p_context"> movq PER_CPU_VAR(unsafe_stack_register_b</span>
 .macro SWITCH_KERNEL_CR3_NO_STACK
 .endm
 
<span class="p_del">-#endif /* CONFIG_KAISER */</span>
<span class="p_add">+#endif /* CONFIG_PAGE_TABLE_ISOLATION */</span>
 
 #else /* __ASSEMBLY__ */
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 /*
  * Upon kernel/user mode switch, it may happen that the address
  * space has to be switched before the registers have been
<span class="p_chunk">@@ -100,10 +100,10 @@</span> <span class="p_context"> extern void __init kaiser_check_boottime</span>
 #else
 #define kaiser_enabled	0
 static inline void __init kaiser_check_boottime_disable(void) {}
<span class="p_del">-#endif /* CONFIG_KAISER */</span>
<span class="p_add">+#endif /* CONFIG_PAGE_TABLE_ISOLATION */</span>
 
 /*
<span class="p_del">- * Kaiser function prototypes are needed even when CONFIG_KAISER is not set,</span>
<span class="p_add">+ * Kaiser function prototypes are needed even when CONFIG_PAGE_TABLE_ISOLATION is not set,</span>
  * so as to build with tests on kaiser_enabled instead of #ifdefs.
  */
 
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -18,7 +18,7 @@</span> <span class="p_context"></span>
 #ifndef __ASSEMBLY__
 #include &lt;asm/x86_init.h&gt;
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 extern int kaiser_enabled;
 #else
 #define kaiser_enabled 0
<span class="p_chunk">@@ -872,7 +872,7 @@</span> <span class="p_context"> static inline void pmdp_set_wrprotect(st</span>
 static inline void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
 {
 	memcpy(dst, src, count * sizeof(pgd_t));
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	if (kaiser_enabled) {
 		/* Clone the shadow pgd part as well */
 		memcpy(native_get_shadow_pgd(dst),
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -106,7 +106,7 @@</span> <span class="p_context"> static inline void native_pud_clear(pud_</span>
 	native_set_pud(pud, native_make_pud(0));
 }
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 extern pgd_t kaiser_set_shadow_pgd(pgd_t *pgdp, pgd_t pgd);
 
 static inline pgd_t *native_get_shadow_pgd(pgd_t *pgdp)
<span class="p_chunk">@@ -127,7 +127,7 @@</span> <span class="p_context"> static inline pgd_t *native_get_shadow_p</span>
 	BUILD_BUG_ON(1);
 	return NULL;
 }
<span class="p_del">-#endif /* CONFIG_KAISER */</span>
<span class="p_add">+#endif /* CONFIG_PAGE_TABLE_ISOLATION */</span>
 
 static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
<span class="p_header">--- a/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_chunk">@@ -109,7 +109,7 @@</span> <span class="p_context"></span>
 #define X86_CR3_PCID_MASK       (X86_CR3_PCID_NOFLUSH | X86_CR3_PCID_ASID_MASK)
 #define X86_CR3_PCID_ASID_KERN  (_AC(0x0,UL))
 
<span class="p_del">-#if defined(CONFIG_KAISER) &amp;&amp; defined(CONFIG_X86_64)</span>
<span class="p_add">+#if defined(CONFIG_PAGE_TABLE_ISOLATION) &amp;&amp; defined(CONFIG_X86_64)</span>
 /* Let X86_CR3_PCID_ASID_USER be usable for the X86_CR3_PCID_NOFLUSH bit */
 #define X86_CR3_PCID_ASID_USER	(_AC(0x80,UL))
 
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -135,7 +135,7 @@</span> <span class="p_context"> static inline void cr4_set_bits_and_upda</span>
  * Declare a couple of kaiser interfaces here for convenience,
  * to avoid the need for asm/kaiser.h in unexpected places.
  */
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 extern int kaiser_enabled;
 extern void kaiser_setup_pcid(void);
 extern void kaiser_flush_tlb_on_return_to_user(void);
<span class="p_header">--- a/arch/x86/kernel/cpu/perf_event_intel_ds.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/perf_event_intel_ds.c</span>
<span class="p_chunk">@@ -274,7 +274,7 @@</span> <span class="p_context"> static DEFINE_PER_CPU(void *, insn_buffe</span>
 
 static void *dsalloc(size_t size, gfp_t flags, int node)
 {
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	unsigned int order = get_order(size);
 	struct page *page;
 	unsigned long addr;
<span class="p_chunk">@@ -295,7 +295,7 @@</span> <span class="p_context"> static void *dsalloc(size_t size, gfp_t</span>
 
 static void dsfree(const void *buffer, size_t size)
 {
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 	if (!buffer)
 		return;
 	kaiser_remove_mapping((unsigned long)buffer, size);
<span class="p_header">--- a/arch/x86/kernel/head_64.S</span>
<span class="p_header">+++ b/arch/x86/kernel/head_64.S</span>
<span class="p_chunk">@@ -441,7 +441,7 @@</span> <span class="p_context"> early_idt_ripmsg:</span>
 	.balign	PAGE_SIZE; \
 GLOBAL(name)
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 /*
  * Each PGD needs to be 8k long and 8k aligned.  We do not
  * ever go out to userspace with these, so we do not
<span class="p_header">--- a/arch/x86/mm/Makefile</span>
<span class="p_header">+++ b/arch/x86/mm/Makefile</span>
<span class="p_chunk">@@ -32,4 +32,4 @@</span> <span class="p_context"> obj-$(CONFIG_ACPI_NUMA)		+= srat.o</span>
 obj-$(CONFIG_NUMA_EMU)		+= numa_emulation.o
 
 obj-$(CONFIG_X86_INTEL_MPX)	+= mpx.o
<span class="p_del">-obj-$(CONFIG_KAISER)		+= kaiser.o</span>
<span class="p_add">+obj-$(CONFIG_PAGE_TABLE_ISOLATION)		+= kaiser.o</span>
<span class="p_header">--- a/include/linux/kaiser.h</span>
<span class="p_header">+++ b/include/linux/kaiser.h</span>
<span class="p_chunk">@@ -1,7 +1,7 @@</span> <span class="p_context"></span>
 #ifndef _LINUX_KAISER_H
 #define _LINUX_KAISER_H
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 #include &lt;asm/kaiser.h&gt;
 
 static inline int kaiser_map_thread_stack(void *stack)
<span class="p_chunk">@@ -24,7 +24,7 @@</span> <span class="p_context"> static inline void kaiser_unmap_thread_s</span>
 #else
 
 /*
<span class="p_del">- * These stubs are used whenever CONFIG_KAISER is off, which</span>
<span class="p_add">+ * These stubs are used whenever CONFIG_PAGE_TABLE_ISOLATION is off, which</span>
  * includes architectures that support KAISER, but have it disabled.
  */
 
<span class="p_chunk">@@ -48,5 +48,5 @@</span> <span class="p_context"> static inline void kaiser_unmap_thread_s</span>
 {
 }
 
<span class="p_del">-#endif /* !CONFIG_KAISER */</span>
<span class="p_add">+#endif /* !CONFIG_PAGE_TABLE_ISOLATION */</span>
 #endif /* _LINUX_KAISER_H */
<span class="p_header">--- a/include/linux/percpu-defs.h</span>
<span class="p_header">+++ b/include/linux/percpu-defs.h</span>
<span class="p_chunk">@@ -35,7 +35,7 @@</span> <span class="p_context"></span>
 
 #endif
 
<span class="p_del">-#ifdef CONFIG_KAISER</span>
<span class="p_add">+#ifdef CONFIG_PAGE_TABLE_ISOLATION</span>
 #define USER_MAPPED_SECTION &quot;..user_mapped&quot;
 #else
 #define USER_MAPPED_SECTION &quot;&quot;
<span class="p_header">--- a/security/Kconfig</span>
<span class="p_header">+++ b/security/Kconfig</span>
<span class="p_chunk">@@ -31,7 +31,7 @@</span> <span class="p_context"> config SECURITY</span>
 
 	  If you are unsure how to answer this question, answer N.
 
<span class="p_del">-config KAISER</span>
<span class="p_add">+config PAGE_TABLE_ISOLATION</span>
 	bool &quot;Remove the kernel mapping in user mode&quot;
 	default y
 	depends on X86_64 &amp;&amp; SMP

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



