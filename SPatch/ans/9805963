
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/6] mm, tree wide: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL with more useful semantic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/6] mm, tree wide: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL with more useful semantic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 23, 2017, 8:53 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170623085345.11304-3-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9805963/mbox/"
   >mbox</a>
|
   <a href="/patch/9805963/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9805963/">/patch/9805963/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	63C2C6086C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 08:57:39 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 53669286A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 08:57:39 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 47C242872E; Fri, 23 Jun 2017 08:57:39 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9756A286A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 23 Jun 2017 08:57:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754583AbdFWI5A (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 23 Jun 2017 04:57:00 -0400
Received: from mail-wr0-f193.google.com ([209.85.128.193]:34255 &quot;EHLO
	mail-wr0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754001AbdFWIyA (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 23 Jun 2017 04:54:00 -0400
Received: by mail-wr0-f193.google.com with SMTP id k67so10844055wrc.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 23 Jun 2017 01:53:59 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=ztiEdvuJzvhovHR45+hzUkWUtha4Okw8zWgYc7/mgGg=;
	b=r81BpBYpGqB0yiTrfWEDQv83i35TyiwFZy/3F2TDCQJHWT29D8YLu9lPaknwhvM34C
	Dy1ttkR1Ni0l4iABh0I1aCTOH0PYZTu8A0keozTHe9rAt2+Dc1Soigd9ST/wYyznjkoX
	qcjNaYXNmOB8wfcRgwhhxjGlnJ2JgRStwd3BPvh7KgXZ95g6U5bPNz7+9CZs1vXwf+5X
	TZJ6snr21SfOQrRAU3wR2CEdUzRJWu/PByADwsZcjtZMuGlIPNcOUiiN/4agfCNYIc2X
	CjRedexuSpemqqJEJ3WrmzyPwOnQs9lVHeofS7VT9rGEoSlnZ+TU/LwMKJIvJ+veJtpX
	aUSQ==
X-Gm-Message-State: AKS2vOzjwWSkzqdk3LpSRetAK5IrX3+QdVPIqBQmB1XyfTxQEKuBwRaK
	z+n1L64Qjec6hBDe
X-Received: by 10.28.54.204 with SMTP id y73mr4623573wmh.53.1498208038667;
	Fri, 23 Jun 2017 01:53:58 -0700 (PDT)
Received: from tiehlicka.suse.cz (prg-ext-pat.suse.com. [213.151.95.130])
	by smtp.gmail.com with ESMTPSA id
	g2sm4352331wrg.69.2017.06.23.01.53.57
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 23 Jun 2017 01:53:58 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, NeilBrown &lt;neilb@suse.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, &lt;linux-mm@kvack.org&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 2/6] mm,
	tree wide: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL with more
	useful semantic
Date: Fri, 23 Jun 2017 10:53:41 +0200
Message-Id: &lt;20170623085345.11304-3-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170623085345.11304-1-mhocko@kernel.org&gt;
References: &lt;20170623085345.11304-1-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 23, 2017, 8:53 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

__GFP_REPEAT was designed to allow retry-but-eventually-fail semantic to
the page allocator. This has been true but only for allocations requests
larger than PAGE_ALLOC_COSTLY_ORDER. It has been always ignored for
smaller sizes. This is a bit unfortunate because there is no way to
express the same semantic for those requests and they are considered too
important to fail so they might end up looping in the page allocator for
ever, similarly to GFP_NOFAIL requests.

Now that the whole tree has been cleaned up and accidental or misled
usage of __GFP_REPEAT flag has been removed for !costly requests we can
give the original flag a better name and more importantly a more useful
semantic. Let&#39;s rename it to __GFP_RETRY_MAYFAIL which tells the user that
the allocator would try really hard but there is no promise of a
success. This will work independent of the order and overrides the
default allocator behavior. Page allocator users have several levels of
guarantee vs. cost options (take GFP_KERNEL as an example)
- GFP_KERNEL &amp; ~__GFP_RECLAIM - optimistic allocation without _any_
  attempt to free memory at all. The most light weight mode which even
  doesn&#39;t kick the background reclaim. Should be used carefully because
  it might deplete the memory and the next user might hit the more
  aggressive reclaim
- GFP_KERNEL &amp; ~__GFP_DIRECT_RECLAIM (or GFP_NOWAIT)- optimistic
  allocation without any attempt to free memory from the current context
  but can wake kswapd to reclaim memory if the zone is below the low
  watermark. Can be used from either atomic contexts or when the request
  is a performance optimization and there is another fallback for a slow
  path.
- (GFP_KERNEL|__GFP_HIGH) &amp; ~__GFP_DIRECT_RECLAIM (aka GFP_ATOMIC) - non
  sleeping allocation with an expensive fallback so it can access some
  portion of memory reserves. Usually used from interrupt/bh context with
  an expensive slow path fallback.
- GFP_KERNEL - both background and direct reclaim are allowed and the
  _default_ page allocator behavior is used. That means that !costly
  allocation requests are basically nofail (unless the requesting task
  is killed by the OOM killer) and costly will fail early rather than
  cause disruptive reclaim.
- GFP_KERNEL | __GFP_NORETRY - overrides the default allocator behavior and
  all allocation requests fail early rather than cause disruptive
  reclaim (one round of reclaim in this implementation). The OOM killer
  is not invoked.
- GFP_KERNEL | __GFP_RETRY_MAYFAIL - overrides the default allocator behavior
  and all allocation requests try really hard. The request will fail if the
  reclaim cannot make any progress. The OOM killer won&#39;t be triggered.
- GFP_KERNEL | __GFP_NOFAIL - overrides the default allocator behavior
  and all allocation requests will loop endlessly until they
  succeed. This might be really dangerous especially for larger orders.

Existing users of __GFP_REPEAT are changed to __GFP_RETRY_MAYFAIL because
they already had their semantic. No new users are added.
__alloc_pages_slowpath is changed to bail out for __GFP_RETRY_MAYFAIL if
there is no progress and we have already passed the OOM point. This
means that all the reclaim opportunities have been exhausted except the
most disruptive one (the OOM killer) and a user defined fallback
behavior is more sensible than keep retrying in the page allocator.

Changes since RFC
- udpate documentation wording as per Neil Brown
<span class="signed-off-by">
Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 Documentation/DMA-ISA-LPC.txt                |  2 +-
 arch/powerpc/include/asm/book3s/64/pgalloc.h |  2 +-
 arch/powerpc/kvm/book3s_64_mmu_hv.c          |  2 +-
 drivers/mmc/host/wbsd.c                      |  2 +-
 drivers/s390/char/vmcp.c                     |  2 +-
 drivers/target/target_core_transport.c       |  2 +-
 drivers/vhost/net.c                          |  2 +-
 drivers/vhost/scsi.c                         |  2 +-
 drivers/vhost/vsock.c                        |  2 +-
 include/linux/gfp.h                          | 55 +++++++++++++++++++++-------
 include/linux/slab.h                         |  3 +-
 include/trace/events/mmflags.h               |  2 +-
 mm/hugetlb.c                                 |  4 +-
 mm/internal.h                                |  2 +-
 mm/page_alloc.c                              | 14 +++++--
 mm/sparse-vmemmap.c                          |  4 +-
 mm/util.c                                    |  6 +--
 mm/vmalloc.c                                 |  2 +-
 mm/vmscan.c                                  |  8 ++--
 net/core/dev.c                               |  6 +--
 net/core/skbuff.c                            |  2 +-
 net/sched/sch_fq.c                           |  2 +-
 tools/perf/builtin-kmem.c                    |  2 +-
 23 files changed, 84 insertions(+), 46 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - June 26, 2017, 11:45 a.m.</div>
<pre class="content">
On 06/23/2017 10:53 AM, Michal Hocko wrote:
<span class="quote">&gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; __GFP_REPEAT was designed to allow retry-but-eventually-fail semantic to</span>
<span class="quote">&gt; the page allocator. This has been true but only for allocations requests</span>
<span class="quote">&gt; larger than PAGE_ALLOC_COSTLY_ORDER. It has been always ignored for</span>
<span class="quote">&gt; smaller sizes. This is a bit unfortunate because there is no way to</span>
<span class="quote">&gt; express the same semantic for those requests and they are considered too</span>
<span class="quote">&gt; important to fail so they might end up looping in the page allocator for</span>
<span class="quote">&gt; ever, similarly to GFP_NOFAIL requests.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Now that the whole tree has been cleaned up and accidental or misled</span>
<span class="quote">&gt; usage of __GFP_REPEAT flag has been removed for !costly requests we can</span>
<span class="quote">&gt; give the original flag a better name and more importantly a more useful</span>
<span class="quote">&gt; semantic. Let&#39;s rename it to __GFP_RETRY_MAYFAIL which tells the user that</span>
<span class="quote">&gt; the allocator would try really hard but there is no promise of a</span>
<span class="quote">&gt; success. This will work independent of the order and overrides the</span>
<span class="quote">&gt; default allocator behavior. Page allocator users have several levels of</span>
<span class="quote">&gt; guarantee vs. cost options (take GFP_KERNEL as an example)</span>
<span class="quote">&gt; - GFP_KERNEL &amp; ~__GFP_RECLAIM - optimistic allocation without _any_</span>
<span class="quote">&gt;   attempt to free memory at all. The most light weight mode which even</span>
<span class="quote">&gt;   doesn&#39;t kick the background reclaim. Should be used carefully because</span>
<span class="quote">&gt;   it might deplete the memory and the next user might hit the more</span>
<span class="quote">&gt;   aggressive reclaim</span>
<span class="quote">&gt; - GFP_KERNEL &amp; ~__GFP_DIRECT_RECLAIM (or GFP_NOWAIT)- optimistic</span>
<span class="quote">&gt;   allocation without any attempt to free memory from the current context</span>
<span class="quote">&gt;   but can wake kswapd to reclaim memory if the zone is below the low</span>
<span class="quote">&gt;   watermark. Can be used from either atomic contexts or when the request</span>
<span class="quote">&gt;   is a performance optimization and there is another fallback for a slow</span>
<span class="quote">&gt;   path.</span>
<span class="quote">&gt; - (GFP_KERNEL|__GFP_HIGH) &amp; ~__GFP_DIRECT_RECLAIM (aka GFP_ATOMIC) - non</span>
<span class="quote">&gt;   sleeping allocation with an expensive fallback so it can access some</span>
<span class="quote">&gt;   portion of memory reserves. Usually used from interrupt/bh context with</span>
<span class="quote">&gt;   an expensive slow path fallback.</span>
<span class="quote">&gt; - GFP_KERNEL - both background and direct reclaim are allowed and the</span>
<span class="quote">&gt;   _default_ page allocator behavior is used. That means that !costly</span>
<span class="quote">&gt;   allocation requests are basically nofail (unless the requesting task</span>
<span class="quote">&gt;   is killed by the OOM killer)</span>

Should we explicitly point out that failure must be handled? After lots
of talking about &quot;too small to fail&quot;, people might get the wrong impression.
<span class="quote">
&gt; and costly will fail early rather than</span>
<span class="quote">&gt;   cause disruptive reclaim.</span>
<span class="quote">&gt; - GFP_KERNEL | __GFP_NORETRY - overrides the default allocator behavior and</span>
<span class="quote">&gt;   all allocation requests fail early rather than cause disruptive</span>
<span class="quote">&gt;   reclaim (one round of reclaim in this implementation). The OOM killer</span>
<span class="quote">&gt;   is not invoked.</span>
<span class="quote">&gt; - GFP_KERNEL | __GFP_RETRY_MAYFAIL - overrides the default allocator behavior</span>
<span class="quote">&gt;   and all allocation requests try really hard. The request will fail if the</span>
<span class="quote">&gt;   reclaim cannot make any progress. The OOM killer won&#39;t be triggered.</span>
<span class="quote">&gt; - GFP_KERNEL | __GFP_NOFAIL - overrides the default allocator behavior</span>
<span class="quote">&gt;   and all allocation requests will loop endlessly until they</span>
<span class="quote">&gt;   succeed. This might be really dangerous especially for larger orders.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Existing users of __GFP_REPEAT are changed to __GFP_RETRY_MAYFAIL because</span>
<span class="quote">&gt; they already had their semantic. No new users are added.</span>
<span class="quote">&gt; __alloc_pages_slowpath is changed to bail out for __GFP_RETRY_MAYFAIL if</span>
<span class="quote">&gt; there is no progress and we have already passed the OOM point. This</span>
<span class="quote">&gt; means that all the reclaim opportunities have been exhausted except the</span>
<span class="quote">&gt; most disruptive one (the OOM killer) and a user defined fallback</span>
<span class="quote">&gt; behavior is more sensible than keep retrying in the page allocator.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes since RFC</span>
<span class="quote">&gt; - udpate documentation wording as per Neil Brown</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="acked-by">
Acked-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>

Some more minor comments below:

...
<span class="quote">
&gt; diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="quote">&gt; index 4c6656f1fee7..6be1f836b69e 100644</span>
<span class="quote">&gt; --- a/include/linux/gfp.h</span>
<span class="quote">&gt; +++ b/include/linux/gfp.h</span>
<span class="quote">&gt; @@ -25,7 +25,7 @@ struct vm_area_struct;</span>
<span class="quote">&gt;  #define ___GFP_FS		0x80u</span>
<span class="quote">&gt;  #define ___GFP_COLD		0x100u</span>
<span class="quote">&gt;  #define ___GFP_NOWARN		0x200u</span>
<span class="quote">&gt; -#define ___GFP_REPEAT		0x400u</span>
<span class="quote">&gt; +#define ___GFP_RETRY_MAYFAIL		0x400u</span>

Seems like one tab too many, the end result is off:
(sigh, tabs are not only error prone, but also we make less money due to
them, I heard)

#define ___GFP_NOWARN           0x200u
#define ___GFP_RETRY_MAYFAIL            0x400u
#define ___GFP_NOFAIL           0x800u
<span class="quote">

&gt;  #define ___GFP_NOFAIL		0x800u</span>
<span class="quote">&gt;  #define ___GFP_NORETRY		0x1000u</span>
<span class="quote">&gt;  #define ___GFP_MEMALLOC		0x2000u</span>
<span class="quote">&gt; @@ -136,26 +136,55 @@ struct vm_area_struct;</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt;   * __GFP_RECLAIM is shorthand to allow/forbid both direct and kswapd reclaim.</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt; - * __GFP_REPEAT: Try hard to allocate the memory, but the allocation attempt</span>
<span class="quote">&gt; - *   _might_ fail.  This depends upon the particular VM implementation.</span>
<span class="quote">&gt; + * The default allocator behavior depends on the request size. We have a concept</span>
<span class="quote">&gt; + * of so called costly allocations (with order &gt; PAGE_ALLOC_COSTLY_ORDER).</span>
<span class="quote">&gt; + * !costly allocations are too essential to fail so they are implicitly</span>
<span class="quote">&gt; + * non-failing (with some exceptions like OOM victims might fail) by default while</span>

Again, emphasize need for error handling?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - June 26, 2017, 11:53 a.m.</div>
<pre class="content">
On 06/23/2017 10:53 AM, Michal Hocko wrote:
...
<span class="quote">
&gt; diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="quote">&gt; index 4c6656f1fee7..6be1f836b69e 100644</span>
<span class="quote">&gt; --- a/include/linux/gfp.h</span>
<span class="quote">&gt; +++ b/include/linux/gfp.h</span>
<span class="quote">&gt; @@ -25,7 +25,7 @@ struct vm_area_struct;</span>
<span class="quote">&gt;  #define ___GFP_FS		0x80u</span>
<span class="quote">&gt;  #define ___GFP_COLD		0x100u</span>
<span class="quote">&gt;  #define ___GFP_NOWARN		0x200u</span>
<span class="quote">&gt; -#define ___GFP_REPEAT		0x400u</span>
<span class="quote">&gt; +#define ___GFP_RETRY_MAYFAIL		0x400u</span>
<span class="quote">&gt;  #define ___GFP_NOFAIL		0x800u</span>
<span class="quote">&gt;  #define ___GFP_NORETRY		0x1000u</span>
<span class="quote">&gt;  #define ___GFP_MEMALLOC		0x2000u</span>
<span class="quote">&gt; @@ -136,26 +136,55 @@ struct vm_area_struct;</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt;   * __GFP_RECLAIM is shorthand to allow/forbid both direct and kswapd reclaim.</span>
<span class="quote">&gt;   *</span>
<span class="quote">&gt; - * __GFP_REPEAT: Try hard to allocate the memory, but the allocation attempt</span>
<span class="quote">&gt; - *   _might_ fail.  This depends upon the particular VM implementation.</span>
<span class="quote">&gt; + * The default allocator behavior depends on the request size. We have a concept</span>
<span class="quote">&gt; + * of so called costly allocations (with order &gt; PAGE_ALLOC_COSTLY_ORDER).</span>
<span class="quote">&gt; + * !costly allocations are too essential to fail so they are implicitly</span>
<span class="quote">&gt; + * non-failing (with some exceptions like OOM victims might fail) by default while</span>
<span class="quote">&gt; + * costly requests try to be not disruptive and back off even without invoking</span>
<span class="quote">&gt; + * the OOM killer. The following three modifiers might be used to override some of</span>
<span class="quote">&gt; + * these implicit rules</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * __GFP_NORETRY: The VM implementation will try only very lightweight</span>
<span class="quote">&gt; + *   memory direct reclaim to get some memory under memory pressure (thus</span>
<span class="quote">&gt; + *   it can sleep). It will avoid disruptive actions like OOM killer. The</span>
<span class="quote">&gt; + *   caller must handle the failure which is quite likely to happen under</span>
<span class="quote">&gt; + *   heavy memory pressure. The flag is suitable when failure can easily be</span>
<span class="quote">&gt; + *   handled at small cost, such as reduced throughput</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * __GFP_RETRY_MAYFAIL: The VM implementation will retry memory reclaim</span>
<span class="quote">&gt; + *   procedures that have previously failed if there is some indication</span>
<span class="quote">&gt; + *   that progress has been made else where.  It can wait for other</span>
<span class="quote">&gt; + *   tasks to attempt high level approaches to freeing memory such as</span>
<span class="quote">&gt; + *   compaction (which removes fragmentation) and page-out.</span>
<span class="quote">&gt; + *   There is still a definite limit to the number of retries, but it is</span>
<span class="quote">&gt; + *   a larger limit than with __GFP_NORERY.</span>

Also, __GFP_NORETRY ^ (for grep purposes).
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 26, 2017, 12:14 p.m.</div>
<pre class="content">
On Mon 26-06-17 13:45:19, Vlastimil Babka wrote:
<span class="quote">&gt; On 06/23/2017 10:53 AM, Michal Hocko wrote:</span>
[...]
<span class="quote">&gt; &gt; - GFP_KERNEL - both background and direct reclaim are allowed and the</span>
<span class="quote">&gt; &gt;   _default_ page allocator behavior is used. That means that !costly</span>
<span class="quote">&gt; &gt;   allocation requests are basically nofail (unless the requesting task</span>
<span class="quote">&gt; &gt;   is killed by the OOM killer)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Should we explicitly point out that failure must be handled? After lots</span>
<span class="quote">&gt; of talking about &quot;too small to fail&quot;, people might get the wrong impression.</span>

OK. What about the following.
&quot;That means that !costly allocation requests are basically nofail but
there is no guarantee of thaat behavior so failures have to be checked
properly by callers (e.g. OOM killer victim is allowed to fail
currently).
<span class="quote">
&gt; &gt; and costly will fail early rather than</span>
<span class="quote">&gt; &gt;   cause disruptive reclaim.</span>
<span class="quote">&gt; &gt; - GFP_KERNEL | __GFP_NORETRY - overrides the default allocator behavior and</span>
<span class="quote">&gt; &gt;   all allocation requests fail early rather than cause disruptive</span>
<span class="quote">&gt; &gt;   reclaim (one round of reclaim in this implementation). The OOM killer</span>
<span class="quote">&gt; &gt;   is not invoked.</span>
<span class="quote">&gt; &gt; - GFP_KERNEL | __GFP_RETRY_MAYFAIL - overrides the default allocator behavior</span>
<span class="quote">&gt; &gt;   and all allocation requests try really hard. The request will fail if the</span>
<span class="quote">&gt; &gt;   reclaim cannot make any progress. The OOM killer won&#39;t be triggered.</span>
<span class="quote">&gt; &gt; - GFP_KERNEL | __GFP_NOFAIL - overrides the default allocator behavior</span>
<span class="quote">&gt; &gt;   and all allocation requests will loop endlessly until they</span>
<span class="quote">&gt; &gt;   succeed. This might be really dangerous especially for larger orders.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Existing users of __GFP_REPEAT are changed to __GFP_RETRY_MAYFAIL because</span>
<span class="quote">&gt; &gt; they already had their semantic. No new users are added.</span>
<span class="quote">&gt; &gt; __alloc_pages_slowpath is changed to bail out for __GFP_RETRY_MAYFAIL if</span>
<span class="quote">&gt; &gt; there is no progress and we have already passed the OOM point. This</span>
<span class="quote">&gt; &gt; means that all the reclaim opportunities have been exhausted except the</span>
<span class="quote">&gt; &gt; most disruptive one (the OOM killer) and a user defined fallback</span>
<span class="quote">&gt; &gt; behavior is more sensible than keep retrying in the page allocator.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Changes since RFC</span>
<span class="quote">&gt; &gt; - udpate documentation wording as per Neil Brown</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Acked-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>

Thanks!
<span class="quote">
&gt; Some more minor comments below:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="quote">&gt; &gt; index 4c6656f1fee7..6be1f836b69e 100644</span>
<span class="quote">&gt; &gt; --- a/include/linux/gfp.h</span>
<span class="quote">&gt; &gt; +++ b/include/linux/gfp.h</span>
<span class="quote">&gt; &gt; @@ -25,7 +25,7 @@ struct vm_area_struct;</span>
<span class="quote">&gt; &gt;  #define ___GFP_FS		0x80u</span>
<span class="quote">&gt; &gt;  #define ___GFP_COLD		0x100u</span>
<span class="quote">&gt; &gt;  #define ___GFP_NOWARN		0x200u</span>
<span class="quote">&gt; &gt; -#define ___GFP_REPEAT		0x400u</span>
<span class="quote">&gt; &gt; +#define ___GFP_RETRY_MAYFAIL		0x400u</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Seems like one tab too many, the end result is off:</span>

will fix
<span class="quote">
&gt; (sigh, tabs are not only error prone, but also we make less money due to</span>
<span class="quote">&gt; them, I heard)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; #define ___GFP_NOWARN           0x200u</span>
<span class="quote">&gt; #define ___GFP_RETRY_MAYFAIL            0x400u</span>
<span class="quote">&gt; #define ___GFP_NOFAIL           0x800u</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;  #define ___GFP_NOFAIL		0x800u</span>
<span class="quote">&gt; &gt;  #define ___GFP_NORETRY		0x1000u</span>
<span class="quote">&gt; &gt;  #define ___GFP_MEMALLOC		0x2000u</span>
<span class="quote">&gt; &gt; @@ -136,26 +136,55 @@ struct vm_area_struct;</span>
<span class="quote">&gt; &gt;   *</span>
<span class="quote">&gt; &gt;   * __GFP_RECLAIM is shorthand to allow/forbid both direct and kswapd reclaim.</span>
<span class="quote">&gt; &gt;   *</span>
<span class="quote">&gt; &gt; - * __GFP_REPEAT: Try hard to allocate the memory, but the allocation attempt</span>
<span class="quote">&gt; &gt; - *   _might_ fail.  This depends upon the particular VM implementation.</span>
<span class="quote">&gt; &gt; + * The default allocator behavior depends on the request size. We have a concept</span>
<span class="quote">&gt; &gt; + * of so called costly allocations (with order &gt; PAGE_ALLOC_COSTLY_ORDER).</span>
<span class="quote">&gt; &gt; + * !costly allocations are too essential to fail so they are implicitly</span>
<span class="quote">&gt; &gt; + * non-failing (with some exceptions like OOM victims might fail) by default while</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Again, emphasize need for error handling?</span>

the same wording as above?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - June 26, 2017, 12:17 p.m.</div>
<pre class="content">
On 06/26/2017 02:14 PM, Michal Hocko wrote:
<span class="quote">&gt; On Mon 26-06-17 13:45:19, Vlastimil Babka wrote:</span>
<span class="quote">&gt;&gt; On 06/23/2017 10:53 AM, Michal Hocko wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; - GFP_KERNEL - both background and direct reclaim are allowed and the</span>
<span class="quote">&gt;&gt;&gt;   _default_ page allocator behavior is used. That means that !costly</span>
<span class="quote">&gt;&gt;&gt;   allocation requests are basically nofail (unless the requesting task</span>
<span class="quote">&gt;&gt;&gt;   is killed by the OOM killer)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Should we explicitly point out that failure must be handled? After lots</span>
<span class="quote">&gt;&gt; of talking about &quot;too small to fail&quot;, people might get the wrong impression.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; OK. What about the following.</span>
<span class="quote">&gt; &quot;That means that !costly allocation requests are basically nofail but</span>
<span class="quote">&gt; there is no guarantee of thaat behavior so failures have to be checked</span>

                           that
<span class="quote">
&gt; properly by callers (e.g. OOM killer victim is allowed to fail</span>
<span class="quote">&gt; currently).</span>

Looks good, thanks!
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/DMA-ISA-LPC.txt b/Documentation/DMA-ISA-LPC.txt</span>
<span class="p_header">index c41331398752..7a065ac4a9d1 100644</span>
<span class="p_header">--- a/Documentation/DMA-ISA-LPC.txt</span>
<span class="p_header">+++ b/Documentation/DMA-ISA-LPC.txt</span>
<span class="p_chunk">@@ -42,7 +42,7 @@</span> <span class="p_context"> requirements you pass the flag GFP_DMA to kmalloc.</span>
 
 Unfortunately the memory available for ISA DMA is scarce so unless you
 allocate the memory during boot-up it&#39;s a good idea to also pass
<span class="p_del">-__GFP_REPEAT and __GFP_NOWARN to make the allocator try a bit harder.</span>
<span class="p_add">+__GFP_RETRY_MAYFAIL and __GFP_NOWARN to make the allocator try a bit harder.</span>
 
 (This scarcity also means that you should allocate the buffer as
 early as possible and not release it until the driver is unloaded.)
<span class="p_header">diff --git a/arch/powerpc/include/asm/book3s/64/pgalloc.h b/arch/powerpc/include/asm/book3s/64/pgalloc.h</span>
<span class="p_header">index 20b1485ff1e8..e2329db9d6f4 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/book3s/64/pgalloc.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/book3s/64/pgalloc.h</span>
<span class="p_chunk">@@ -56,7 +56,7 @@</span> <span class="p_context"> static inline pgd_t *radix__pgd_alloc(struct mm_struct *mm)</span>
 	return (pgd_t *)__get_free_page(pgtable_gfp_flags(mm, PGALLOC_GFP));
 #else
 	struct page *page;
<span class="p_del">-	page = alloc_pages(pgtable_gfp_flags(mm, PGALLOC_GFP | __GFP_REPEAT),</span>
<span class="p_add">+	page = alloc_pages(pgtable_gfp_flags(mm, PGALLOC_GFP | __GFP_RETRY_MAYFAIL),</span>
 				4);
 	if (!page)
 		return NULL;
<span class="p_header">diff --git a/arch/powerpc/kvm/book3s_64_mmu_hv.c b/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_header">index 710e491206ed..8cb0190e2a73 100644</span>
<span class="p_header">--- a/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_header">+++ b/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_chunk">@@ -93,7 +93,7 @@</span> <span class="p_context"> int kvmppc_allocate_hpt(struct kvm_hpt_info *info, u32 order)</span>
 	}
 
 	if (!hpt)
<span class="p_del">-		hpt = __get_free_pages(GFP_KERNEL|__GFP_ZERO|__GFP_REPEAT</span>
<span class="p_add">+		hpt = __get_free_pages(GFP_KERNEL|__GFP_ZERO|__GFP_RETRY_MAYFAIL</span>
 				       |__GFP_NOWARN, order - PAGE_SHIFT);
 
 	if (!hpt)
<span class="p_header">diff --git a/drivers/mmc/host/wbsd.c b/drivers/mmc/host/wbsd.c</span>
<span class="p_header">index e15a9733fcfd..9668616faf16 100644</span>
<span class="p_header">--- a/drivers/mmc/host/wbsd.c</span>
<span class="p_header">+++ b/drivers/mmc/host/wbsd.c</span>
<span class="p_chunk">@@ -1386,7 +1386,7 @@</span> <span class="p_context"> static void wbsd_request_dma(struct wbsd_host *host, int dma)</span>
 	 * order for ISA to be able to DMA to it.
 	 */
 	host-&gt;dma_buffer = kmalloc(WBSD_DMA_SIZE,
<span class="p_del">-		GFP_NOIO | GFP_DMA | __GFP_REPEAT | __GFP_NOWARN);</span>
<span class="p_add">+		GFP_NOIO | GFP_DMA | __GFP_RETRY_MAYFAIL | __GFP_NOWARN);</span>
 	if (!host-&gt;dma_buffer)
 		goto free;
 
<span class="p_header">diff --git a/drivers/s390/char/vmcp.c b/drivers/s390/char/vmcp.c</span>
<span class="p_header">index 65f5a794f26d..98749fa817da 100644</span>
<span class="p_header">--- a/drivers/s390/char/vmcp.c</span>
<span class="p_header">+++ b/drivers/s390/char/vmcp.c</span>
<span class="p_chunk">@@ -98,7 +98,7 @@</span> <span class="p_context"> vmcp_write(struct file *file, const char __user *buff, size_t count,</span>
 	}
 	if (!session-&gt;response)
 		session-&gt;response = (char *)__get_free_pages(GFP_KERNEL
<span class="p_del">-						| __GFP_REPEAT | GFP_DMA,</span>
<span class="p_add">+						| __GFP_RETRY_MAYFAIL | GFP_DMA,</span>
 						get_order(session-&gt;bufsize));
 	if (!session-&gt;response) {
 		mutex_unlock(&amp;session-&gt;mutex);
<span class="p_header">diff --git a/drivers/target/target_core_transport.c b/drivers/target/target_core_transport.c</span>
<span class="p_header">index a5ecec8f3996..9cea1eb8f019 100644</span>
<span class="p_header">--- a/drivers/target/target_core_transport.c</span>
<span class="p_header">+++ b/drivers/target/target_core_transport.c</span>
<span class="p_chunk">@@ -252,7 +252,7 @@</span> <span class="p_context"> int transport_alloc_session_tags(struct se_session *se_sess,</span>
 	int rc;
 
 	se_sess-&gt;sess_cmd_map = kzalloc(tag_num * tag_size,
<span class="p_del">-					GFP_KERNEL | __GFP_NOWARN | __GFP_REPEAT);</span>
<span class="p_add">+					GFP_KERNEL | __GFP_NOWARN | __GFP_RETRY_MAYFAIL);</span>
 	if (!se_sess-&gt;sess_cmd_map) {
 		se_sess-&gt;sess_cmd_map = vzalloc(tag_num * tag_size);
 		if (!se_sess-&gt;sess_cmd_map) {
<span class="p_header">diff --git a/drivers/vhost/net.c b/drivers/vhost/net.c</span>
<span class="p_header">index e3d7ea1288c6..06d044862e58 100644</span>
<span class="p_header">--- a/drivers/vhost/net.c</span>
<span class="p_header">+++ b/drivers/vhost/net.c</span>
<span class="p_chunk">@@ -897,7 +897,7 @@</span> <span class="p_context"> static int vhost_net_open(struct inode *inode, struct file *f)</span>
 	struct sk_buff **queue;
 	int i;
 
<span class="p_del">-	n = kvmalloc(sizeof *n, GFP_KERNEL | __GFP_REPEAT);</span>
<span class="p_add">+	n = kvmalloc(sizeof *n, GFP_KERNEL | __GFP_RETRY_MAYFAIL);</span>
 	if (!n)
 		return -ENOMEM;
 	vqs = kmalloc(VHOST_NET_VQ_MAX * sizeof(*vqs), GFP_KERNEL);
<span class="p_header">diff --git a/drivers/vhost/scsi.c b/drivers/vhost/scsi.c</span>
<span class="p_header">index 679f8960db4b..046f6d280af5 100644</span>
<span class="p_header">--- a/drivers/vhost/scsi.c</span>
<span class="p_header">+++ b/drivers/vhost/scsi.c</span>
<span class="p_chunk">@@ -1399,7 +1399,7 @@</span> <span class="p_context"> static int vhost_scsi_open(struct inode *inode, struct file *f)</span>
 	struct vhost_virtqueue **vqs;
 	int r = -ENOMEM, i;
 
<span class="p_del">-	vs = kzalloc(sizeof(*vs), GFP_KERNEL | __GFP_NOWARN | __GFP_REPEAT);</span>
<span class="p_add">+	vs = kzalloc(sizeof(*vs), GFP_KERNEL | __GFP_NOWARN | __GFP_RETRY_MAYFAIL);</span>
 	if (!vs) {
 		vs = vzalloc(sizeof(*vs));
 		if (!vs)
<span class="p_header">diff --git a/drivers/vhost/vsock.c b/drivers/vhost/vsock.c</span>
<span class="p_header">index 3f63e03de8e8..c9de9c41aa97 100644</span>
<span class="p_header">--- a/drivers/vhost/vsock.c</span>
<span class="p_header">+++ b/drivers/vhost/vsock.c</span>
<span class="p_chunk">@@ -508,7 +508,7 @@</span> <span class="p_context"> static int vhost_vsock_dev_open(struct inode *inode, struct file *file)</span>
 	/* This struct is large and allocation could fail, fall back to vmalloc
 	 * if there is no other way.
 	 */
<span class="p_del">-	vsock = kvmalloc(sizeof(*vsock), GFP_KERNEL | __GFP_REPEAT);</span>
<span class="p_add">+	vsock = kvmalloc(sizeof(*vsock), GFP_KERNEL | __GFP_RETRY_MAYFAIL);</span>
 	if (!vsock)
 		return -ENOMEM;
 
<span class="p_header">diff --git a/include/linux/gfp.h b/include/linux/gfp.h</span>
<span class="p_header">index 4c6656f1fee7..6be1f836b69e 100644</span>
<span class="p_header">--- a/include/linux/gfp.h</span>
<span class="p_header">+++ b/include/linux/gfp.h</span>
<span class="p_chunk">@@ -25,7 +25,7 @@</span> <span class="p_context"> struct vm_area_struct;</span>
 #define ___GFP_FS		0x80u
 #define ___GFP_COLD		0x100u
 #define ___GFP_NOWARN		0x200u
<span class="p_del">-#define ___GFP_REPEAT		0x400u</span>
<span class="p_add">+#define ___GFP_RETRY_MAYFAIL		0x400u</span>
 #define ___GFP_NOFAIL		0x800u
 #define ___GFP_NORETRY		0x1000u
 #define ___GFP_MEMALLOC		0x2000u
<span class="p_chunk">@@ -136,26 +136,55 @@</span> <span class="p_context"> struct vm_area_struct;</span>
  *
  * __GFP_RECLAIM is shorthand to allow/forbid both direct and kswapd reclaim.
  *
<span class="p_del">- * __GFP_REPEAT: Try hard to allocate the memory, but the allocation attempt</span>
<span class="p_del">- *   _might_ fail.  This depends upon the particular VM implementation.</span>
<span class="p_add">+ * The default allocator behavior depends on the request size. We have a concept</span>
<span class="p_add">+ * of so called costly allocations (with order &gt; PAGE_ALLOC_COSTLY_ORDER).</span>
<span class="p_add">+ * !costly allocations are too essential to fail so they are implicitly</span>
<span class="p_add">+ * non-failing (with some exceptions like OOM victims might fail) by default while</span>
<span class="p_add">+ * costly requests try to be not disruptive and back off even without invoking</span>
<span class="p_add">+ * the OOM killer. The following three modifiers might be used to override some of</span>
<span class="p_add">+ * these implicit rules</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * __GFP_NORETRY: The VM implementation will try only very lightweight</span>
<span class="p_add">+ *   memory direct reclaim to get some memory under memory pressure (thus</span>
<span class="p_add">+ *   it can sleep). It will avoid disruptive actions like OOM killer. The</span>
<span class="p_add">+ *   caller must handle the failure which is quite likely to happen under</span>
<span class="p_add">+ *   heavy memory pressure. The flag is suitable when failure can easily be</span>
<span class="p_add">+ *   handled at small cost, such as reduced throughput</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * __GFP_RETRY_MAYFAIL: The VM implementation will retry memory reclaim</span>
<span class="p_add">+ *   procedures that have previously failed if there is some indication</span>
<span class="p_add">+ *   that progress has been made else where.  It can wait for other</span>
<span class="p_add">+ *   tasks to attempt high level approaches to freeing memory such as</span>
<span class="p_add">+ *   compaction (which removes fragmentation) and page-out.</span>
<span class="p_add">+ *   There is still a definite limit to the number of retries, but it is</span>
<span class="p_add">+ *   a larger limit than with __GFP_NORERY.</span>
<span class="p_add">+ *   Allocations with this flag may fail, but only when there is</span>
<span class="p_add">+ *   genuinely little unused memory. While these allocations do not</span>
<span class="p_add">+ *   directly trigger the OOM killer, their failure indicates that</span>
<span class="p_add">+ *   the system is likely to need to use the OOM killer soon.  The</span>
<span class="p_add">+ *   caller must handle failure, but can reasonably do so by failing</span>
<span class="p_add">+ *   a higher-level request, or completing it only in a much less</span>
<span class="p_add">+ *   efficient manner.</span>
<span class="p_add">+ *   If the allocation does fail, and the caller is in a position to</span>
<span class="p_add">+ *   free some non-essential memory, doing so could benefit the system</span>
<span class="p_add">+ *   as a whole.</span>
  *
  * __GFP_NOFAIL: The VM implementation _must_ retry infinitely: the caller
<span class="p_del">- *   cannot handle allocation failures. New users should be evaluated carefully</span>
<span class="p_del">- *   (and the flag should be used only when there is no reasonable failure</span>
<span class="p_del">- *   policy) but it is definitely preferable to use the flag rather than</span>
<span class="p_del">- *   opencode endless loop around allocator.</span>
<span class="p_del">- *</span>
<span class="p_del">- * __GFP_NORETRY: The VM implementation must not retry indefinitely and will</span>
<span class="p_del">- *   return NULL when direct reclaim and memory compaction have failed to allow</span>
<span class="p_del">- *   the allocation to succeed.  The OOM killer is not called with the current</span>
<span class="p_del">- *   implementation.</span>
<span class="p_add">+ *   cannot handle allocation failures. The allocation could block</span>
<span class="p_add">+ *   indefinitely but will never return with failure. Testing for</span>
<span class="p_add">+ *   failure is pointless.</span>
<span class="p_add">+ *   New users should be evaluated carefully (and the flag should be</span>
<span class="p_add">+ *   used only when there is no reasonable failure policy) but it is</span>
<span class="p_add">+ *   definitely preferable to use the flag rather than opencode endless</span>
<span class="p_add">+ *   loop around allocator.</span>
<span class="p_add">+ *   Using this flag for costly allocations is _highly_ discouraged.</span>
  */
 #define __GFP_IO	((__force gfp_t)___GFP_IO)
 #define __GFP_FS	((__force gfp_t)___GFP_FS)
 #define __GFP_DIRECT_RECLAIM	((__force gfp_t)___GFP_DIRECT_RECLAIM) /* Caller can reclaim */
 #define __GFP_KSWAPD_RECLAIM	((__force gfp_t)___GFP_KSWAPD_RECLAIM) /* kswapd can wake */
 #define __GFP_RECLAIM ((__force gfp_t)(___GFP_DIRECT_RECLAIM|___GFP_KSWAPD_RECLAIM))
<span class="p_del">-#define __GFP_REPEAT	((__force gfp_t)___GFP_REPEAT)</span>
<span class="p_add">+#define __GFP_RETRY_MAYFAIL	((__force gfp_t)___GFP_RETRY_MAYFAIL)</span>
 #define __GFP_NOFAIL	((__force gfp_t)___GFP_NOFAIL)
 #define __GFP_NORETRY	((__force gfp_t)___GFP_NORETRY)
 
<span class="p_header">diff --git a/include/linux/slab.h b/include/linux/slab.h</span>
<span class="p_header">index 04a7f7993e67..41473df6dfb0 100644</span>
<span class="p_header">--- a/include/linux/slab.h</span>
<span class="p_header">+++ b/include/linux/slab.h</span>
<span class="p_chunk">@@ -471,7 +471,8 @@</span> <span class="p_context"> static __always_inline void *kmalloc_large(size_t size, gfp_t flags)</span>
  *
  * %__GFP_NOWARN - If allocation fails, don&#39;t issue any warnings.
  *
<span class="p_del">- * %__GFP_REPEAT - If allocation fails initially, try once more before failing.</span>
<span class="p_add">+ * %__GFP_RETRY_MAYFAIL - Try really hard to succeed the allocation but fail</span>
<span class="p_add">+ *   eventually.</span>
  *
  * There are other flags available as well, but these are not intended
  * for general use, and so are not documented here. For a full list of
<span class="p_header">diff --git a/include/trace/events/mmflags.h b/include/trace/events/mmflags.h</span>
<span class="p_header">index 10e3663a75a6..8e50d01c645f 100644</span>
<span class="p_header">--- a/include/trace/events/mmflags.h</span>
<span class="p_header">+++ b/include/trace/events/mmflags.h</span>
<span class="p_chunk">@@ -34,7 +34,7 @@</span> <span class="p_context"></span>
 	{(unsigned long)__GFP_FS,		&quot;__GFP_FS&quot;},		\
 	{(unsigned long)__GFP_COLD,		&quot;__GFP_COLD&quot;},		\
 	{(unsigned long)__GFP_NOWARN,		&quot;__GFP_NOWARN&quot;},	\
<span class="p_del">-	{(unsigned long)__GFP_REPEAT,		&quot;__GFP_REPEAT&quot;},	\</span>
<span class="p_add">+	{(unsigned long)__GFP_RETRY_MAYFAIL,	&quot;__GFP_RETRY_MAYFAIL&quot;},	\</span>
 	{(unsigned long)__GFP_NOFAIL,		&quot;__GFP_NOFAIL&quot;},	\
 	{(unsigned long)__GFP_NORETRY,		&quot;__GFP_NORETRY&quot;},	\
 	{(unsigned long)__GFP_COMP,		&quot;__GFP_COMP&quot;},		\
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 907786581812..c9e1734a371f 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1385,7 +1385,7 @@</span> <span class="p_context"> static struct page *alloc_fresh_huge_page_node(struct hstate *h, int nid)</span>
 
 	page = __alloc_pages_node(nid,
 		htlb_alloc_mask(h)|__GFP_COMP|__GFP_THISNODE|
<span class="p_del">-						__GFP_REPEAT|__GFP_NOWARN,</span>
<span class="p_add">+						__GFP_RETRY_MAYFAIL|__GFP_NOWARN,</span>
 		huge_page_order(h));
 	if (page) {
 		prep_new_huge_page(h, page, nid);
<span class="p_chunk">@@ -1534,7 +1534,7 @@</span> <span class="p_context"> static struct page *__hugetlb_alloc_buddy_huge_page(struct hstate *h,</span>
 		struct vm_area_struct *vma, unsigned long addr, int nid)
 {
 	int order = huge_page_order(h);
<span class="p_del">-	gfp_t gfp = htlb_alloc_mask(h)|__GFP_COMP|__GFP_REPEAT|__GFP_NOWARN;</span>
<span class="p_add">+	gfp_t gfp = htlb_alloc_mask(h)|__GFP_COMP|__GFP_RETRY_MAYFAIL|__GFP_NOWARN;</span>
 	unsigned int cpuset_mems_cookie;
 
 	/*
<span class="p_header">diff --git a/mm/internal.h b/mm/internal.h</span>
<span class="p_header">index 0e4f558412fb..24d88f084705 100644</span>
<span class="p_header">--- a/mm/internal.h</span>
<span class="p_header">+++ b/mm/internal.h</span>
<span class="p_chunk">@@ -23,7 +23,7 @@</span> <span class="p_context"></span>
  * hints such as HIGHMEM usage.
  */
 #define GFP_RECLAIM_MASK (__GFP_RECLAIM|__GFP_HIGH|__GFP_IO|__GFP_FS|\
<span class="p_del">-			__GFP_NOWARN|__GFP_REPEAT|__GFP_NOFAIL|\</span>
<span class="p_add">+			__GFP_NOWARN|__GFP_RETRY_MAYFAIL|__GFP_NOFAIL|\</span>
 			__GFP_NORETRY|__GFP_MEMALLOC|__GFP_NOMEMALLOC|\
 			__GFP_ATOMIC)
 
<span class="p_header">diff --git a/mm/page_alloc.c b/mm/page_alloc.c</span>
<span class="p_header">index b896897dcda7..b92e438046ad 100644</span>
<span class="p_header">--- a/mm/page_alloc.c</span>
<span class="p_header">+++ b/mm/page_alloc.c</span>
<span class="p_chunk">@@ -3281,6 +3281,14 @@</span> <span class="p_context"> __alloc_pages_may_oom(gfp_t gfp_mask, unsigned int order,</span>
 	/* The OOM killer will not help higher order allocs */
 	if (order &gt; PAGE_ALLOC_COSTLY_ORDER)
 		goto out;
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We have already exhausted all our reclaim opportunities without any</span>
<span class="p_add">+	 * success so it is time to admit defeat. We will skip the OOM killer</span>
<span class="p_add">+	 * because it is very likely that the caller has a more reasonable</span>
<span class="p_add">+	 * fallback than shooting a random task.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (gfp_mask &amp; __GFP_RETRY_MAYFAIL)</span>
<span class="p_add">+		goto out;</span>
 	/* The OOM killer does not needlessly kill tasks for lowmem */
 	if (ac-&gt;high_zoneidx &lt; ZONE_NORMAL)
 		goto out;
<span class="p_chunk">@@ -3410,7 +3418,7 @@</span> <span class="p_context"> should_compact_retry(struct alloc_context *ac, int order, int alloc_flags,</span>
 	}
 
 	/*
<span class="p_del">-	 * !costly requests are much more important than __GFP_REPEAT</span>
<span class="p_add">+	 * !costly requests are much more important than __GFP_RETRY_MAYFAIL</span>
 	 * costly ones because they are de facto nofail and invoke OOM
 	 * killer to move on while costly can fail and users are ready
 	 * to cope with that. 1/4 retries is rather arbitrary but we
<span class="p_chunk">@@ -3917,9 +3925,9 @@</span> <span class="p_context"> __alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,</span>
 
 	/*
 	 * Do not retry costly high order allocations unless they are
<span class="p_del">-	 * __GFP_REPEAT</span>
<span class="p_add">+	 * __GFP_RETRY_MAYFAIL</span>
 	 */
<span class="p_del">-	if (costly_order &amp;&amp; !(gfp_mask &amp; __GFP_REPEAT))</span>
<span class="p_add">+	if (costly_order &amp;&amp; !(gfp_mask &amp; __GFP_RETRY_MAYFAIL))</span>
 		goto nopage;
 
 	if (should_reclaim_retry(gfp_mask, order, ac, alloc_flags,
<span class="p_header">diff --git a/mm/sparse-vmemmap.c b/mm/sparse-vmemmap.c</span>
<span class="p_header">index a56c3989f773..c50b1a14d55e 100644</span>
<span class="p_header">--- a/mm/sparse-vmemmap.c</span>
<span class="p_header">+++ b/mm/sparse-vmemmap.c</span>
<span class="p_chunk">@@ -56,11 +56,11 @@</span> <span class="p_context"> void * __meminit vmemmap_alloc_block(unsigned long size, int node)</span>
 
 		if (node_state(node, N_HIGH_MEMORY))
 			page = alloc_pages_node(
<span class="p_del">-				node, GFP_KERNEL | __GFP_ZERO | __GFP_REPEAT,</span>
<span class="p_add">+				node, GFP_KERNEL | __GFP_ZERO | __GFP_RETRY_MAYFAIL,</span>
 				get_order(size));
 		else
 			page = alloc_pages(
<span class="p_del">-				GFP_KERNEL | __GFP_ZERO | __GFP_REPEAT,</span>
<span class="p_add">+				GFP_KERNEL | __GFP_ZERO | __GFP_RETRY_MAYFAIL,</span>
 				get_order(size));
 		if (page)
 			return page_address(page);
<span class="p_header">diff --git a/mm/util.c b/mm/util.c</span>
<span class="p_header">index 26be6407abd7..6520f2d4a226 100644</span>
<span class="p_header">--- a/mm/util.c</span>
<span class="p_header">+++ b/mm/util.c</span>
<span class="p_chunk">@@ -339,7 +339,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(vm_mmap);</span>
  * Uses kmalloc to get the memory but if the allocation fails then falls back
  * to the vmalloc allocator. Use kvfree for freeing the memory.
  *
<span class="p_del">- * Reclaim modifiers - __GFP_NORETRY and __GFP_NOFAIL are not supported. __GFP_REPEAT</span>
<span class="p_add">+ * Reclaim modifiers - __GFP_NORETRY and __GFP_NOFAIL are not supported. __GFP_RETRY_MAYFAIL</span>
  * is supported only for large (&gt;32kB) allocations, and it should be used only if
  * kmalloc is preferable to the vmalloc fallback, due to visible performance drawbacks.
  *
<span class="p_chunk">@@ -367,11 +367,11 @@</span> <span class="p_context"> void *kvmalloc_node(size_t size, gfp_t flags, int node)</span>
 		kmalloc_flags |= __GFP_NOWARN;
 
 		/*
<span class="p_del">-		 * We have to override __GFP_REPEAT by __GFP_NORETRY for !costly</span>
<span class="p_add">+		 * We have to override __GFP_RETRY_MAYFAIL by __GFP_NORETRY for !costly</span>
 		 * requests because there is no other way to tell the allocator
 		 * that we want to fail rather than retry endlessly.
 		 */
<span class="p_del">-		if (!(kmalloc_flags &amp; __GFP_REPEAT) ||</span>
<span class="p_add">+		if (!(kmalloc_flags &amp; __GFP_RETRY_MAYFAIL) ||</span>
 				(size &lt;= PAGE_SIZE &lt;&lt; PAGE_ALLOC_COSTLY_ORDER))
 			kmalloc_flags |= __GFP_NORETRY;
 	}
<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index 6016ab079e2b..8698c1c86c4d 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -1795,7 +1795,7 @@</span> <span class="p_context"> void *__vmalloc_node_range(unsigned long size, unsigned long align,</span>
  *	allocator with @gfp_mask flags.  Map them into contiguous
  *	kernel virtual space, using a pagetable protection of @prot.
  *
<span class="p_del">- *	Reclaim modifiers in @gfp_mask - __GFP_NORETRY, __GFP_REPEAT</span>
<span class="p_add">+ *	Reclaim modifiers in @gfp_mask - __GFP_NORETRY, __GFP_RETRY_MAYFAIL</span>
  *	and __GFP_NOFAIL are not supported
  *
  *	Any use of gfp flags outside of GFP_KERNEL should be consulted
<span class="p_header">diff --git a/mm/vmscan.c b/mm/vmscan.c</span>
<span class="p_header">index f84cdd3751e1..efc9da21c5e6 100644</span>
<span class="p_header">--- a/mm/vmscan.c</span>
<span class="p_header">+++ b/mm/vmscan.c</span>
<span class="p_chunk">@@ -2506,18 +2506,18 @@</span> <span class="p_context"> static inline bool should_continue_reclaim(struct pglist_data *pgdat,</span>
 		return false;
 
 	/* Consider stopping depending on scan and reclaim activity */
<span class="p_del">-	if (sc-&gt;gfp_mask &amp; __GFP_REPEAT) {</span>
<span class="p_add">+	if (sc-&gt;gfp_mask &amp; __GFP_RETRY_MAYFAIL) {</span>
 		/*
<span class="p_del">-		 * For __GFP_REPEAT allocations, stop reclaiming if the</span>
<span class="p_add">+		 * For __GFP_RETRY_MAYFAIL allocations, stop reclaiming if the</span>
 		 * full LRU list has been scanned and we are still failing
 		 * to reclaim pages. This full LRU scan is potentially
<span class="p_del">-		 * expensive but a __GFP_REPEAT caller really wants to succeed</span>
<span class="p_add">+		 * expensive but a __GFP_RETRY_MAYFAIL caller really wants to succeed</span>
 		 */
 		if (!nr_reclaimed &amp;&amp; !nr_scanned)
 			return false;
 	} else {
 		/*
<span class="p_del">-		 * For non-__GFP_REPEAT allocations which can presumably</span>
<span class="p_add">+		 * For non-__GFP_RETRY_MAYFAIL allocations which can presumably</span>
 		 * fail without consequence, stop if we failed to reclaim
 		 * any pages from the last SWAP_CLUSTER_MAX number of
 		 * pages that were scanned. This will return to the
<span class="p_header">diff --git a/net/core/dev.c b/net/core/dev.c</span>
<span class="p_header">index df7637733e3c..550c27a2efcd 100644</span>
<span class="p_header">--- a/net/core/dev.c</span>
<span class="p_header">+++ b/net/core/dev.c</span>
<span class="p_chunk">@@ -7370,7 +7370,7 @@</span> <span class="p_context"> static int netif_alloc_rx_queues(struct net_device *dev)</span>
 
 	BUG_ON(count &lt; 1);
 
<span class="p_del">-	rx = kvzalloc(sz, GFP_KERNEL | __GFP_REPEAT);</span>
<span class="p_add">+	rx = kvzalloc(sz, GFP_KERNEL | __GFP_RETRY_MAYFAIL);</span>
 	if (!rx)
 		return -ENOMEM;
 
<span class="p_chunk">@@ -7410,7 +7410,7 @@</span> <span class="p_context"> static int netif_alloc_netdev_queues(struct net_device *dev)</span>
 	if (count &lt; 1 || count &gt; 0xffff)
 		return -EINVAL;
 
<span class="p_del">-	tx = kvzalloc(sz, GFP_KERNEL | __GFP_REPEAT);</span>
<span class="p_add">+	tx = kvzalloc(sz, GFP_KERNEL | __GFP_RETRY_MAYFAIL);</span>
 	if (!tx)
 		return -ENOMEM;
 
<span class="p_chunk">@@ -7951,7 +7951,7 @@</span> <span class="p_context"> struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,</span>
 	/* ensure 32-byte alignment of whole construct */
 	alloc_size += NETDEV_ALIGN - 1;
 
<span class="p_del">-	p = kvzalloc(alloc_size, GFP_KERNEL | __GFP_REPEAT);</span>
<span class="p_add">+	p = kvzalloc(alloc_size, GFP_KERNEL | __GFP_RETRY_MAYFAIL);</span>
 	if (!p)
 		return NULL;
 
<span class="p_header">diff --git a/net/core/skbuff.c b/net/core/skbuff.c</span>
<span class="p_header">index f75897a33fa4..2bff10a20bc9 100644</span>
<span class="p_header">--- a/net/core/skbuff.c</span>
<span class="p_header">+++ b/net/core/skbuff.c</span>
<span class="p_chunk">@@ -4747,7 +4747,7 @@</span> <span class="p_context"> struct sk_buff *alloc_skb_with_frags(unsigned long header_len,</span>
 
 	gfp_head = gfp_mask;
 	if (gfp_head &amp; __GFP_DIRECT_RECLAIM)
<span class="p_del">-		gfp_head |= __GFP_REPEAT;</span>
<span class="p_add">+		gfp_head |= __GFP_RETRY_MAYFAIL;</span>
 
 	*errcode = -ENOBUFS;
 	skb = alloc_skb(header_len, gfp_head);
<span class="p_header">diff --git a/net/sched/sch_fq.c b/net/sched/sch_fq.c</span>
<span class="p_header">index 147fde73a0f5..263d16e3219e 100644</span>
<span class="p_header">--- a/net/sched/sch_fq.c</span>
<span class="p_header">+++ b/net/sched/sch_fq.c</span>
<span class="p_chunk">@@ -648,7 +648,7 @@</span> <span class="p_context"> static int fq_resize(struct Qdisc *sch, u32 log)</span>
 		return 0;
 
 	/* If XPS was setup, we can allocate memory on right NUMA node */
<span class="p_del">-	array = kvmalloc_node(sizeof(struct rb_root) &lt;&lt; log, GFP_KERNEL | __GFP_REPEAT,</span>
<span class="p_add">+	array = kvmalloc_node(sizeof(struct rb_root) &lt;&lt; log, GFP_KERNEL | __GFP_RETRY_MAYFAIL,</span>
 			      netdev_queue_numa_node_read(sch-&gt;dev_queue));
 	if (!array)
 		return -ENOMEM;
<span class="p_header">diff --git a/tools/perf/builtin-kmem.c b/tools/perf/builtin-kmem.c</span>
<span class="p_header">index 9409c9464667..c4222ea452e9 100644</span>
<span class="p_header">--- a/tools/perf/builtin-kmem.c</span>
<span class="p_header">+++ b/tools/perf/builtin-kmem.c</span>
<span class="p_chunk">@@ -643,7 +643,7 @@</span> <span class="p_context"> static const struct {</span>
 	{ &quot;__GFP_FS&quot;,			&quot;F&quot; },
 	{ &quot;__GFP_COLD&quot;,			&quot;CO&quot; },
 	{ &quot;__GFP_NOWARN&quot;,		&quot;NWR&quot; },
<span class="p_del">-	{ &quot;__GFP_REPEAT&quot;,		&quot;R&quot; },</span>
<span class="p_add">+	{ &quot;__GFP_RETRY_MAYFAIL&quot;,	&quot;R&quot; },</span>
 	{ &quot;__GFP_NOFAIL&quot;,		&quot;NF&quot; },
 	{ &quot;__GFP_NORETRY&quot;,		&quot;NR&quot; },
 	{ &quot;__GFP_COMP&quot;,			&quot;C&quot; },

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



