
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 10, 2017, 11:57 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170110115755.19102-1-aleksey.makarov@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9507039/mbox/"
   >mbox</a>
|
   <a href="/patch/9507039/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9507039/">/patch/9507039/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B9357606E1 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 11:58:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AD9D828461
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 11:58:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A2880284BE; Tue, 10 Jan 2017 11:58:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8A61B28461
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 10 Jan 2017 11:58:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S967021AbdAJL6P (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 10 Jan 2017 06:58:15 -0500
Received: from mail-wm0-f48.google.com ([74.125.82.48]:38577 &quot;EHLO
	mail-wm0-f48.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755206AbdAJL6N (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 10 Jan 2017 06:58:13 -0500
Received: by mail-wm0-f48.google.com with SMTP id k184so157909508wme.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 10 Jan 2017 03:58:12 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id;
	bh=iUPWVGM6xLKVW4ZZsX9AJqlzHUGfXnP/fstM1A2Bmkc=;
	b=NzxrJNaYdUNSyk3t++qeCx3I42HRP3moqBnC3jE1QNz3GjWUVNmWlpMMH1vfswAhv0
	O/E/5ldbYfcoeyDhtGhEWQ+y2lE9rpK0sRriXidrdrDvtLfY0GRX4k1BBF2+jpW3ZZbz
	e3RXdrt3DzcO61pJfRDUZknAgzUfVwd6IK7qo=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=iUPWVGM6xLKVW4ZZsX9AJqlzHUGfXnP/fstM1A2Bmkc=;
	b=Mwk+rEGaPNpd4XwAz3PXPu3y5yHRp1YyZSKM7gXO/E+104nj8MYztKjNXsCpdzqhXi
	yCdRpg0IIglLylQv+fLIyb8OVhQG4m4DXWuBBiqk4AjGytROfQVUC09YAaap6ILh8qp/
	gt1xK+tIgSTuryD59fi/e/8T1W2uq5IVQf56sVRDdE1fKuJoPPb2EtxnN7YG+W8zu/Gz
	QMra+rrgwOpNgSKA4cAhFOWPjkHrRM0BxNqIYetgm+aRxX+xXakvl7a2z6dKkpHg1iTa
	mDV8MWfMUq6xqouGuBWNsRYuVedCAz5yCheQs8Xds/Y8m702SlHmySdOsJ6D0sblrFJh
	IBJw==
X-Gm-Message-State: AIkVDXKbpEPHmbNWgYmXrmWzdV5n29ry3eGRB6hTy4KbnA8PiWpu16FUulKGSeA7A0Cl3HRe
X-Received: by 10.28.197.77 with SMTP id v74mr1772712wmf.98.1484049491171;
	Tue, 10 Jan 2017 03:58:11 -0800 (PST)
Received: from localhost.localdomain ([109.172.149.148])
	by smtp.gmail.com with ESMTPSA id
	c133sm3426246wme.12.2017.01.10.03.58.09
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Tue, 10 Jan 2017 03:58:10 -0800 (PST)
From: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: iommu@lists.linux-foundation.org,
	linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org,
	Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;
Subject: [RFC PATCH] IOMMU: SMMUv2: Support for Extended Stream ID (16 bit)
Date: Tue, 10 Jan 2017 15:57:52 +0400
Message-Id: &lt;20170110115755.19102-1-aleksey.makarov@linaro.org&gt;
X-Mailer: git-send-email 2.11.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a> - Jan. 10, 2017, 11:57 a.m.</div>
<pre class="content">
Enable the Extended Stream ID feature when available.

This patch on top of series &quot;[PATCH v7 00/19] KVM PCIe/MSI passthrough
on ARM/ARM64 and IOVA reserved regions&quot; by Eric Auger allows
to passthrough an external PCIe network card on a ThunderX server
successfully.

Without this patch that card caused a warning like

	pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)

during boot.
<span class="signed-off-by">
Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
---
 drivers/iommu/arm-smmu.c | 53 +++++++++++++++++++++++++++++++++---------------
 1 file changed, 37 insertions(+), 16 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Jan. 11, 2017, 2:15 p.m.</div>
<pre class="content">
On 10/01/17 11:57, Aleksey Makarov wrote:
<span class="quote">&gt; Enable the Extended Stream ID feature when available.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch on top of series &quot;[PATCH v7 00/19] KVM PCIe/MSI passthrough</span>
<span class="quote">&gt; on ARM/ARM64 and IOVA reserved regions&quot; by Eric Auger allows</span>
<span class="quote">&gt; to passthrough an external PCIe network card on a ThunderX server</span>
<span class="quote">&gt; successfully.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Without this patch that card caused a warning like</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; during boot.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/iommu/arm-smmu.c | 53 +++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;  1 file changed, 37 insertions(+), 16 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; index 13d26009b8e0..d160c12828f4 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/arm-smmu.c</span>
<span class="quote">&gt; @@ -24,6 +24,7 @@</span>
<span class="quote">&gt;   *	- v7/v8 long-descriptor format</span>
<span class="quote">&gt;   *	- Non-secure access to the SMMU</span>
<span class="quote">&gt;   *	- Context fault reporting</span>
<span class="quote">&gt; + *	- Extended Stream ID (16 bit)</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt</span>
<span class="quote">&gt; @@ -87,6 +88,7 @@</span>
<span class="quote">&gt;  #define sCR0_CLIENTPD			(1 &lt;&lt; 0)</span>
<span class="quote">&gt;  #define sCR0_GFRE			(1 &lt;&lt; 1)</span>
<span class="quote">&gt;  #define sCR0_GFIE			(1 &lt;&lt; 2)</span>
<span class="quote">&gt; +#define sCR0_EXIDENABLE			(1 &lt;&lt; 3)</span>
<span class="quote">&gt;  #define sCR0_GCFGFRE			(1 &lt;&lt; 4)</span>
<span class="quote">&gt;  #define sCR0_GCFGFIE			(1 &lt;&lt; 5)</span>
<span class="quote">&gt;  #define sCR0_USFCFG			(1 &lt;&lt; 10)</span>
<span class="quote">&gt; @@ -126,6 +128,7 @@</span>
<span class="quote">&gt;  #define ID0_NUMIRPT_MASK		0xff</span>
<span class="quote">&gt;  #define ID0_NUMSIDB_SHIFT		9</span>
<span class="quote">&gt;  #define ID0_NUMSIDB_MASK		0xf</span>
<span class="quote">&gt; +#define ID0_EXIDS			(1 &lt;&lt; 8)</span>
<span class="quote">&gt;  #define ID0_NUMSMRG_SHIFT		0</span>
<span class="quote">&gt;  #define ID0_NUMSMRG_MASK		0xff</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -169,6 +172,7 @@</span>
<span class="quote">&gt;  #define ARM_SMMU_GR0_S2CR(n)		(0xc00 + ((n) &lt;&lt; 2))</span>
<span class="quote">&gt;  #define S2CR_CBNDX_SHIFT		0</span>
<span class="quote">&gt;  #define S2CR_CBNDX_MASK			0xff</span>
<span class="quote">&gt; +#define S2CR_EXIDVALID			(1 &lt;&lt; 10)</span>
<span class="quote">&gt;  #define S2CR_TYPE_SHIFT			16</span>
<span class="quote">&gt;  #define S2CR_TYPE_MASK			0x3</span>
<span class="quote">&gt;  enum arm_smmu_s2cr_type {</span>
<span class="quote">&gt; @@ -354,6 +358,7 @@ struct arm_smmu_device {</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH64_64K	(1 &lt;&lt; 9)</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_L	(1 &lt;&lt; 10)</span>
<span class="quote">&gt;  #define ARM_SMMU_FEAT_FMT_AARCH32_S	(1 &lt;&lt; 11)</span>
<span class="quote">&gt; +#define ARM_SMMU_FEAT_EXIDS		(1 &lt;&lt; 12)</span>
<span class="quote">&gt;  	u32				features;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)</span>
<span class="quote">&gt; @@ -1051,7 +1056,7 @@ static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;  	struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;</span>
<span class="quote">&gt;  	u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (smr-&gt;valid)</span>
<span class="quote">&gt; +	if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
<span class="quote">&gt;  		reg |= SMR_VALID;</span>
<span class="quote">&gt;  	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -1063,6 +1068,9 @@ static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
<span class="quote">&gt;  		  (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |</span>
<span class="quote">&gt;  		  (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="quote">&gt; +	    smmu-&gt;smrs[idx].valid)</span>
<span class="quote">&gt; +		reg |= S2CR_EXIDVALID;</span>
<span class="quote">&gt;  	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -1674,6 +1682,9 @@ static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)</span>
<span class="quote">&gt;  		reg |= sCR0_VMID16EN;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="quote">&gt; +		reg |= sCR0_EXIDENABLE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/* Push the button */</span>
<span class="quote">&gt;  	__arm_smmu_tlb_sync(smmu);</span>
<span class="quote">&gt;  	writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);</span>
<span class="quote">&gt; @@ -1761,7 +1772,12 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Max. number of entries we have for stream matching/indexing */</span>
<span class="quote">&gt; -	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt; +	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="quote">&gt; +		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="quote">&gt; +		size = (1 &lt;&lt; 16);</span>

Unnecessary parentheses.
<span class="quote">
&gt; +	} else {</span>
<span class="quote">&gt; +		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt; +	}</span>

Given what the architecture says about the relationship between EXIDS
and NUMSIDB, I suppose an even shorter version could be:

	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS)
		size *= 2;

but I&#39;m not sure that&#39;s actually any nicer to read.
<span class="quote">
&gt;  	smmu-&gt;streamid_mask = size - 1;</span>
<span class="quote">&gt;  	if (id &amp; ID0_SMS) {</span>
<span class="quote">&gt;  		u32 smr;</span>
<span class="quote">&gt; @@ -1774,20 +1790,25 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;  			return -ENODEV;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		/*</span>
<span class="quote">&gt; -		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt; -		 * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt; -		 * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt; -		 */</span>
<span class="quote">&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; -		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; +		if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) {</span>
<span class="quote">&gt; +			smmu-&gt;smr_mask_mask = smmu-&gt;streamid_mask;</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt; +			/*</span>
<span class="quote">&gt; +			 * SMR.ID bits may not be preserved if the corresponding</span>
<span class="quote">&gt; +			 * MASK bits are set, so check each one separately.</span>
<span class="quote">&gt; +			 * We can reject masters later if they try to claim IDs</span>
<span class="quote">&gt; +			 * outside these masks.</span>
<span class="quote">&gt; +			 */</span>
<span class="quote">&gt; +			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; +			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +			smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; +			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt; +			smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt; +		}</span>

This hunk is quite possibly wrong. I don&#39;t see any guarantee in the
architecture that all EXMASK/EXID bits *must* be implemented, and even
so there&#39;s still no harm in the driver determining that experimentally.
It looks like we need a bit of refactoring such that we move the probing
of SMR fields to after counting and allocating the SME structures, then
in the EXIDS case we can explicitly clear the SMEs and poke EXIDENABLE
inbetween.

Robin.
<span class="quote">
&gt;  </span>
<span class="quote">&gt;  		/* Zero-initialised to mark as invalid */</span>
<span class="quote">&gt;  		smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=149931">Aleksey Makarov</a> - Jan. 16, 2017, 2:09 p.m.</div>
<pre class="content">
On 01/11/2017 05:15 PM, Robin Murphy wrote:
<span class="quote">&gt; On 10/01/17 11:57, Aleksey Makarov wrote:</span>
<span class="quote">&gt;&gt; Enable the Extended Stream ID feature when available.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch on top of series &quot;[PATCH v7 00/19] KVM PCIe/MSI passthrough</span>
<span class="quote">&gt;&gt; on ARM/ARM64 and IOVA reserved regions&quot; by Eric Auger allows</span>
<span class="quote">&gt;&gt; to passthrough an external PCIe network card on a ThunderX server</span>
<span class="quote">&gt;&gt; successfully.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Without this patch that card caused a warning like</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; 	pci 0006:90:00.0: stream ID 0x9000 out of range for SMMU (0x7fff)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; during boot.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Aleksey Makarov &lt;aleksey.makarov@linaro.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  drivers/iommu/arm-smmu.c | 53 +++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;&gt;  1 file changed, 37 insertions(+), 16 deletions(-)</span>
<span class="quote">&gt;&gt;</span>

[...]
<span class="quote">
&gt;&gt; @@ -1761,7 +1772,12 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;  			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	/* Max. number of entries we have for stream matching/indexing */</span>
<span class="quote">&gt;&gt; -	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt;&gt; +	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="quote">&gt;&gt; +		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="quote">&gt;&gt; +		size = (1 &lt;&lt; 16);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Unnecessary parentheses.</span>

Thank you
<span class="quote">
&gt;&gt; +	} else {</span>
<span class="quote">&gt;&gt; +		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Given what the architecture says about the relationship between EXIDS</span>
<span class="quote">&gt; and NUMSIDB, I suppose an even shorter version could be:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS)</span>
<span class="quote">&gt; 		size *= 2;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; but I&#39;m not sure that&#39;s actually any nicer to read.</span>

I think it is not nicer: the one who reads this needs to know what is the value of NUMSIDB
in the case id &amp; ID0_EXIDS == true; and also this makes the code depend on this, i. e.
on the correct implementation of hardware.

So I would like to leave it as is.  If you are not agree, I will change it.
<span class="quote">
&gt;&gt;  	smmu-&gt;streamid_mask = size - 1;</span>
<span class="quote">&gt;&gt;  	if (id &amp; ID0_SMS) {</span>
<span class="quote">&gt;&gt;  		u32 smr;</span>
<span class="quote">&gt;&gt; @@ -1774,20 +1790,25 @@ static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
<span class="quote">&gt;&gt;  			return -ENODEV;</span>
<span class="quote">&gt;&gt;  		}</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -		/*</span>
<span class="quote">&gt;&gt; -		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="quote">&gt;&gt; -		 * bits are set, so check each one separately. We can reject</span>
<span class="quote">&gt;&gt; -		 * masters later if they try to claim IDs outside these masks.</span>
<span class="quote">&gt;&gt; -		 */</span>
<span class="quote">&gt;&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt; -		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; -		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; -		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; +		if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) {</span>
<span class="quote">&gt;&gt; +			smmu-&gt;smr_mask_mask = smmu-&gt;streamid_mask;</span>
<span class="quote">&gt;&gt; +		} else {</span>
<span class="quote">&gt;&gt; +			/*</span>
<span class="quote">&gt;&gt; +			 * SMR.ID bits may not be preserved if the corresponding</span>
<span class="quote">&gt;&gt; +			 * MASK bits are set, so check each one separately.</span>
<span class="quote">&gt;&gt; +			 * We can reject masters later if they try to claim IDs</span>
<span class="quote">&gt;&gt; +			 * outside these masks.</span>
<span class="quote">&gt;&gt; +			 */</span>
<span class="quote">&gt;&gt; +			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; +			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +			smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; +			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="quote">&gt;&gt; +			smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="quote">&gt;&gt; +		}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This hunk is quite possibly wrong. I don&#39;t see any guarantee in the</span>
<span class="quote">&gt; architecture that all EXMASK/EXID bits *must* be implemented, and even</span>
<span class="quote">&gt; so there&#39;s still no harm in the driver determining that experimentally.</span>
<span class="quote">&gt; It looks like we need a bit of refactoring such that we move the probing</span>
<span class="quote">&gt; of SMR fields to after counting and allocating the SME structures, then</span>
<span class="quote">&gt; in the EXIDS case we can explicitly clear the SMEs and poke EXIDENABLE</span>
<span class="quote">&gt; inbetween.</span>

I am not quite sure I understand where you are suggesting to poke EXIDENABLE.
I am going to send v2 of the patch, I&#39;d appreciate if you would review that please.

Thank you for review
Aleksey Makarov
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="p_header">index 13d26009b8e0..d160c12828f4 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu.c</span>
<span class="p_chunk">@@ -24,6 +24,7 @@</span> <span class="p_context"></span>
  *	- v7/v8 long-descriptor format
  *	- Non-secure access to the SMMU
  *	- Context fault reporting
<span class="p_add">+ *	- Extended Stream ID (16 bit)</span>
  */
 
 #define pr_fmt(fmt) &quot;arm-smmu: &quot; fmt
<span class="p_chunk">@@ -87,6 +88,7 @@</span> <span class="p_context"></span>
 #define sCR0_CLIENTPD			(1 &lt;&lt; 0)
 #define sCR0_GFRE			(1 &lt;&lt; 1)
 #define sCR0_GFIE			(1 &lt;&lt; 2)
<span class="p_add">+#define sCR0_EXIDENABLE			(1 &lt;&lt; 3)</span>
 #define sCR0_GCFGFRE			(1 &lt;&lt; 4)
 #define sCR0_GCFGFIE			(1 &lt;&lt; 5)
 #define sCR0_USFCFG			(1 &lt;&lt; 10)
<span class="p_chunk">@@ -126,6 +128,7 @@</span> <span class="p_context"></span>
 #define ID0_NUMIRPT_MASK		0xff
 #define ID0_NUMSIDB_SHIFT		9
 #define ID0_NUMSIDB_MASK		0xf
<span class="p_add">+#define ID0_EXIDS			(1 &lt;&lt; 8)</span>
 #define ID0_NUMSMRG_SHIFT		0
 #define ID0_NUMSMRG_MASK		0xff
 
<span class="p_chunk">@@ -169,6 +172,7 @@</span> <span class="p_context"></span>
 #define ARM_SMMU_GR0_S2CR(n)		(0xc00 + ((n) &lt;&lt; 2))
 #define S2CR_CBNDX_SHIFT		0
 #define S2CR_CBNDX_MASK			0xff
<span class="p_add">+#define S2CR_EXIDVALID			(1 &lt;&lt; 10)</span>
 #define S2CR_TYPE_SHIFT			16
 #define S2CR_TYPE_MASK			0x3
 enum arm_smmu_s2cr_type {
<span class="p_chunk">@@ -354,6 +358,7 @@</span> <span class="p_context"> struct arm_smmu_device {</span>
 #define ARM_SMMU_FEAT_FMT_AARCH64_64K	(1 &lt;&lt; 9)
 #define ARM_SMMU_FEAT_FMT_AARCH32_L	(1 &lt;&lt; 10)
 #define ARM_SMMU_FEAT_FMT_AARCH32_S	(1 &lt;&lt; 11)
<span class="p_add">+#define ARM_SMMU_FEAT_EXIDS		(1 &lt;&lt; 12)</span>
 	u32				features;
 
 #define ARM_SMMU_OPT_SECURE_CFG_ACCESS (1 &lt;&lt; 0)
<span class="p_chunk">@@ -1051,7 +1056,7 @@</span> <span class="p_context"> static void arm_smmu_write_smr(struct arm_smmu_device *smmu, int idx)</span>
 	struct arm_smmu_smr *smr = smmu-&gt;smrs + idx;
 	u32 reg = smr-&gt;id &lt;&lt; SMR_ID_SHIFT | smr-&gt;mask &lt;&lt; SMR_MASK_SHIFT;
 
<span class="p_del">-	if (smr-&gt;valid)</span>
<span class="p_add">+	if (!(smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) &amp;&amp; smr-&gt;valid)</span>
 		reg |= SMR_VALID;
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_SMR(idx));
 }
<span class="p_chunk">@@ -1063,6 +1068,9 @@</span> <span class="p_context"> static void arm_smmu_write_s2cr(struct arm_smmu_device *smmu, int idx)</span>
 		  (s2cr-&gt;cbndx &amp; S2CR_CBNDX_MASK) &lt;&lt; S2CR_CBNDX_SHIFT |
 		  (s2cr-&gt;privcfg &amp; S2CR_PRIVCFG_MASK) &lt;&lt; S2CR_PRIVCFG_SHIFT;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS &amp;&amp; smmu-&gt;smrs &amp;&amp;</span>
<span class="p_add">+	    smmu-&gt;smrs[idx].valid)</span>
<span class="p_add">+		reg |= S2CR_EXIDVALID;</span>
 	writel_relaxed(reg, ARM_SMMU_GR0(smmu) + ARM_SMMU_GR0_S2CR(idx));
 }
 
<span class="p_chunk">@@ -1674,6 +1682,9 @@</span> <span class="p_context"> static void arm_smmu_device_reset(struct arm_smmu_device *smmu)</span>
 	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_VMID16)
 		reg |= sCR0_VMID16EN;
 
<span class="p_add">+	if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS)</span>
<span class="p_add">+		reg |= sCR0_EXIDENABLE;</span>
<span class="p_add">+</span>
 	/* Push the button */
 	__arm_smmu_tlb_sync(smmu);
 	writel(reg, ARM_SMMU_GR0_NS(smmu) + ARM_SMMU_GR0_sCR0);
<span class="p_chunk">@@ -1761,7 +1772,12 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			   &quot;\t(IDR0.CTTW overridden by FW configuration)\n&quot;);
 
 	/* Max. number of entries we have for stream matching/indexing */
<span class="p_del">-	size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	if (smmu-&gt;version == ARM_SMMU_V2 &amp;&amp; id &amp; ID0_EXIDS) {</span>
<span class="p_add">+		smmu-&gt;features |= ARM_SMMU_FEAT_EXIDS;</span>
<span class="p_add">+		size = (1 &lt;&lt; 16);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		size = 1 &lt;&lt; ((id &gt;&gt; ID0_NUMSIDB_SHIFT) &amp; ID0_NUMSIDB_MASK);</span>
<span class="p_add">+	}</span>
 	smmu-&gt;streamid_mask = size - 1;
 	if (id &amp; ID0_SMS) {
 		u32 smr;
<span class="p_chunk">@@ -1774,20 +1790,25 @@</span> <span class="p_context"> static int arm_smmu_device_cfg_probe(struct arm_smmu_device *smmu)</span>
 			return -ENODEV;
 		}
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * SMR.ID bits may not be preserved if the corresponding MASK</span>
<span class="p_del">-		 * bits are set, so check each one separately. We can reject</span>
<span class="p_del">-		 * masters later if they try to claim IDs outside these masks.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_del">-</span>
<span class="p_del">-		smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_del">-		writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_del">-		smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_add">+		if (smmu-&gt;features &amp; ARM_SMMU_FEAT_EXIDS) {</span>
<span class="p_add">+			smmu-&gt;smr_mask_mask = smmu-&gt;streamid_mask;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * SMR.ID bits may not be preserved if the corresponding</span>
<span class="p_add">+			 * MASK bits are set, so check each one separately.</span>
<span class="p_add">+			 * We can reject masters later if they try to claim IDs</span>
<span class="p_add">+			 * outside these masks.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_ID_SHIFT;</span>
<span class="p_add">+			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+			smmu-&gt;streamid_mask = smr &gt;&gt; SMR_ID_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+			smr = smmu-&gt;streamid_mask &lt;&lt; SMR_MASK_SHIFT;</span>
<span class="p_add">+			writel_relaxed(smr, gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+			smr = readl_relaxed(gr0_base + ARM_SMMU_GR0_SMR(0));</span>
<span class="p_add">+			smmu-&gt;smr_mask_mask = smr &gt;&gt; SMR_MASK_SHIFT;</span>
<span class="p_add">+		}</span>
 
 		/* Zero-initialised to mark as invalid */
 		smmu-&gt;smrs = devm_kcalloc(smmu-&gt;dev, size, sizeof(*smmu-&gt;smrs),

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



