
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,2/7] mm: migrate: fix barriers around tlb_flush_pending - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,2/7] mm: migrate: fix barriers around tlb_flush_pending</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 2, 2017, 12:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170802000818.4760-3-namit@vmware.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9876105/mbox/"
   >mbox</a>
|
   <a href="/patch/9876105/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9876105/">/patch/9876105/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D555560390 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:05 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C8491286BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:05 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BD1FF28751; Wed,  2 Aug 2017 07:34:05 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.4 required=2.0 tests=BAYES_00, DATE_IN_PAST_06_12,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 34C58286BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  2 Aug 2017 07:34:05 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752041AbdHBHdu (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 2 Aug 2017 03:33:50 -0400
Received: from ex13-edg-ou-002.vmware.com ([208.91.0.190]:32797 &quot;EHLO
	EX13-EDG-OU-002.vmware.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751104AbdHBHdr (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 2 Aug 2017 03:33:47 -0400
Received: from sc9-mailhost3.vmware.com (10.113.161.73) by
	EX13-EDG-OU-002.vmware.com (10.113.208.156) with Microsoft SMTP
	Server id 15.0.1156.6; Wed, 2 Aug 2017 00:18:11 -0700
Received: from sc2-haas01-esx0118.eng.vmware.com
	(sc2-haas01-esx0118.eng.vmware.com [10.172.44.118])
	by sc9-mailhost3.vmware.com (Postfix) with ESMTP id 8AF72405FC;
	Wed,  2 Aug 2017 00:18:42 -0700 (PDT)
From: Nadav Amit &lt;namit@vmware.com&gt;
To: &lt;linux-mm@kvack.org&gt;
CC: &lt;nadav.amit@gmail.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;akpm@linux-foundation.org&gt;, Nadav Amit &lt;namit@vmware.com&gt;,
	Minchan Kim &lt;minchan@kernel.org&gt;,
	Sergey Senozhatsky &lt;sergey.senozhatsky@gmail.com&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;
Subject: [PATCH v6 2/7] mm: migrate: fix barriers around tlb_flush_pending
Date: Tue, 1 Aug 2017 17:08:13 -0700
Message-ID: &lt;20170802000818.4760-3-namit@vmware.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170802000818.4760-1-namit@vmware.com&gt;
References: &lt;20170802000818.4760-1-namit@vmware.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
Received-SPF: None (EX13-EDG-OU-002.vmware.com: namit@vmware.com does not
	designate permitted sender hosts)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=159401">Nadav Amit</a> - Aug. 2, 2017, 12:08 a.m.</div>
<pre class="content">
Reading tlb_flush_pending while the page-table lock is taken does not
require a barrier, since the lock/unlock already acts as a barrier.
Removing the barrier in mm_tlb_flush_pending() to address this issue.

However, migrate_misplaced_transhuge_page() calls mm_tlb_flush_pending()
while the page-table lock is already released, which may present a
problem on architectures with weak memory model (PPC). To deal with this
case, a new parameter is added to mm_tlb_flush_pending() to indicate
if it is read without the page-table lock taken, and calling
smp_mb__after_unlock_lock() in this case.

Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Sergey Senozhatsky &lt;sergey.senozhatsky@gmail.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
<span class="signed-off-by">
Signed-off-by: Nadav Amit &lt;namit@vmware.com&gt;</span>
<span class="acked-by">Acked-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
---
 include/linux/mm_types.h | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index f5263dd0f1bc..2956513619a7 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -522,12 +522,12 @@</span> <span class="p_context"> static inline cpumask_t *mm_cpumask(struct mm_struct *mm)</span>
 /*
  * Memory barriers to keep this state in sync are graciously provided by
  * the page table locks, outside of which no page table modifications happen.
<span class="p_del">- * The barriers below prevent the compiler from re-ordering the instructions</span>
<span class="p_del">- * around the memory barriers that are already present in the code.</span>
<span class="p_add">+ * The barriers are used to ensure the order between tlb_flush_pending updates,</span>
<span class="p_add">+ * which happen while the lock is not taken, and the PTE updates, which happen</span>
<span class="p_add">+ * while the lock is taken, are serialized.</span>
  */
 static inline bool mm_tlb_flush_pending(struct mm_struct *mm)
 {
<span class="p_del">-	barrier();</span>
 	return atomic_read(&amp;mm-&gt;tlb_flush_pending) &gt; 0;
 }
 
<span class="p_chunk">@@ -550,7 +550,13 @@</span> <span class="p_context"> static inline void inc_tlb_flush_pending(struct mm_struct *mm)</span>
 /* Clearing is done after a TLB flush, which also provides a barrier. */
 static inline void dec_tlb_flush_pending(struct mm_struct *mm)
 {
<span class="p_del">-	barrier();</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Guarantee that the tlb_flush_pending does not not leak into the</span>
<span class="p_add">+	 * critical section, since we must order the PTE change and changes to</span>
<span class="p_add">+	 * the pending TLB flush indication. We could have relied on TLB flush</span>
<span class="p_add">+	 * as a memory barrier, but this behavior is not clearly documented.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	smp_mb__before_atomic();</span>
 	atomic_dec(&amp;mm-&gt;tlb_flush_pending);
 }
 #else

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



