
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,2/4] KVM: Add paravirt remote TLB flush - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,2/4] KVM: Add paravirt remote TLB flush</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 10, 2017, 9:49 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1510307387-14812-3-git-send-email-wanpeng.li@hotmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10052711/mbox/"
   >mbox</a>
|
   <a href="/patch/10052711/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10052711/">/patch/10052711/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5AB9260365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 09:51:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 38E8B2AEE0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 09:51:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2DE832B226; Fri, 10 Nov 2017 09:51:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AF3AA2AEE0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Nov 2017 09:51:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752558AbdKJJvl (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 10 Nov 2017 04:51:41 -0500
Received: from mail-pg0-f66.google.com ([74.125.83.66]:45660 &quot;EHLO
	mail-pg0-f66.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752408AbdKJJt6 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 10 Nov 2017 04:49:58 -0500
Received: by mail-pg0-f66.google.com with SMTP id l19so4438029pgo.2;
	Fri, 10 Nov 2017 01:49:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references
	:mime-version:content-transfer-encoding;
	bh=Yx+peeFexZeRjhBaHxz09RN1nC7cXGQfhRc/qaSMP8E=;
	b=uHBftunkr2PR5C3+1rRzatO6Tp38hEvjD8A88snNBTLEy99smCEDGpptVbM63qF7gb
	wNQqcZUi2JU5Tb8YDfeu00rcWIlpKFO7G3JllLa/jfTFtzVI1mFxRWEYrJ5U006AG2Pr
	Ph0GlDLHZ2+5ExZ7jTG37YkCuuMkbf7IjlexwV1kX+mSVvJ7NAvpvZyGUeenhE0sA192
	SWq9LG8A4GywUkS+BUlkmt7Z+S+D8HxOZS7+379QSNcwqAXrnCpc5Xh3Vq0LRgL6526n
	T2MzcXwg/dtjOjU284cW0fGmltSkXW6VwfAZrc0xjG1Jfb0MakkE1JnjyDPtMnW+fyq0
	Rg6A==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references:mime-version:content-transfer-encoding;
	bh=Yx+peeFexZeRjhBaHxz09RN1nC7cXGQfhRc/qaSMP8E=;
	b=fKlAWy4XG890ByI349mtVbRf4iy29Cu1c9zJyBEqQaJsgOPopgqoh+4znAcIrW6vPP
	h/JqgXxE8Sl6wUUQJAWmr7VRLap1MxiJeDX9TErIoNnvuSsK4ulUM7tcz5GrcAxlUa3u
	7ECT7JYnBmmTr6dfVMz8ARdy8MNyJMWSZ72oO3ljzjLtjjQQIyz6AdQVMGWWb4GGsB2C
	mpSgO6G7+hdlnoSxTBWswO36LCgYfBR+mOQsk9smenA6QIvIFSnocDUqRpqCKPvTHBBP
	IVgZziGAW5ZYiwTzVoHgtpdn4J+9gB62bAs/XqkmbzNwzfiYJNkvXd8DsB8WJ53Gbt/6
	XU+g==
X-Gm-Message-State: AJaThX6TPy+3SbiF8TfcIhMwk6UJm9DObtYOF8eV/Hy1bSIqi4Ze5noJ
	Os9XLrRUduORT6tftnsipdHhgQ==
X-Google-Smtp-Source: ABhQp+RzirrbZRfWx68JAVIvGypQoFcl9VKrvt57Gkyh1T0OwOvV3whCpjUp38kU5AKH4FcHCmoaQg==
X-Received: by 10.101.64.9 with SMTP id f9mr3610040pgp.114.1510307398087;
	Fri, 10 Nov 2017 01:49:58 -0800 (PST)
Received: from localhost ([203.205.141.123])
	by smtp.gmail.com with ESMTPSA id
	k24sm18545309pfj.151.2017.11.10.01.49.56
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 10 Nov 2017 01:49:57 -0800 (PST)
From: Wanpeng Li &lt;kernellwp@gmail.com&gt;
X-Google-Original-From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;
To: linux-kernel@vger.kernel.org, kvm@vger.kernel.org
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;
Subject: [PATCH v3 2/4] KVM: Add paravirt remote TLB flush
Date: Fri, 10 Nov 2017 01:49:45 -0800
Message-Id: &lt;1510307387-14812-3-git-send-email-wanpeng.li@hotmail.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1510307387-14812-1-git-send-email-wanpeng.li@hotmail.com&gt;
References: &lt;1510307387-14812-1-git-send-email-wanpeng.li@hotmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a> - Nov. 10, 2017, 9:49 a.m.</div>
<pre class="content">
<span class="from">From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>

Remote flushing api&#39;s does a busy wait which is fine in bare-metal
scenario. But with-in the guest, the vcpus might have been pre-empted
or blocked. In this scenario, the initator vcpu would end up
busy-waiting for a long amount of time.

This patch set implements para-virt flush tlbs making sure that it
does not wait for vcpus that are sleeping. And all the sleeping vcpus
flush the tlb on guest enter.

The best result is achieved when we&#39;re overcommiting the host by running 
multiple vCPUs on each pCPU. In this case PV tlb flush avoids touching 
vCPUs which are not scheduled and avoid the wait on the main CPU.

Test on a Haswell i7 desktop 4 cores (2HT), so 8 pCPUs, running ebizzy in 
one linux guest.

ebizzy -M 
              vanilla    optimized     boost
 8 vCPUs       10152       10083       -0.68% 
16 vCPUs        1224        4866       297.5% 
24 vCPUs        1109        3871       249%
32 vCPUs        1025        3375       229.3% 

Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: Radim Krčmář &lt;rkrcmar@redhat.com&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
<span class="signed-off-by">Signed-off-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
---
 Documentation/virtual/kvm/cpuid.txt  |  4 ++++
 arch/x86/include/uapi/asm/kvm_para.h |  2 ++
 arch/x86/kernel/kvm.c                | 42 +++++++++++++++++++++++++++++++++++-
 3 files changed, 47 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 10, 2017, 10:06 a.m.</div>
<pre class="content">
On Fri, Nov 10, 2017 at 01:49:45AM -0800, Wanpeng Li wrote:
<span class="quote">&gt; +static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void kvm_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; +			const struct flush_tlb_info *info)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	u8 state;</span>
<span class="quote">&gt; +	int cpu;</span>
<span class="quote">&gt; +	struct kvm_steal_time *src;</span>
<span class="quote">&gt; +	struct cpumask *flushmask = this_cpu_cpumask_var_ptr(__pv_tlb_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (unlikely(!flushmask))</span>
<span class="quote">&gt; +		return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	cpumask_copy(flushmask, cpumask);</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * We have to call flush only on online vCPUs. And</span>
<span class="quote">&gt; +	 * queue flush_on_enter for pre-empted vCPUs</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	for_each_cpu(cpu, cpumask) {</span>
<span class="quote">&gt; +		src = &amp;per_cpu(steal_time, cpu);</span>
<span class="quote">&gt; +		state = src-&gt;preempted;</span>

I think that wants to be: state = READ_ONCE(src-&gt;preempted);

Because without that its possible for state to get re-loaded between the
check here:
<span class="quote">
&gt; +		if ((state &amp; KVM_VCPU_PREEMPTED)) {</span>

and its use here.
<span class="quote">
&gt; +			if (cmpxchg(&amp;src-&gt;preempted, state, state |</span>
<span class="quote">&gt; +				KVM_VCPU_SHOULD_FLUSH) == state)</span>

You can actually write that like:

			if (try_cmpxchg(&amp;src-&gt;preempted, state,
					state | KVM_VCPU_SHOULD_FLUSH))

Which should generate ever so slightly better code (it uses the cmpxchg
ZF instead of doing a superfluous compare).
<span class="quote">
&gt; +				__cpumask_clear_cpu(cpu, flushmask);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	native_flush_tlb_others(flushmask, info);</span>
<span class="quote">&gt; +}</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/virtual/kvm/cpuid.txt b/Documentation/virtual/kvm/cpuid.txt</span>
<span class="p_header">index 117066a..9693fcc 100644</span>
<span class="p_header">--- a/Documentation/virtual/kvm/cpuid.txt</span>
<span class="p_header">+++ b/Documentation/virtual/kvm/cpuid.txt</span>
<span class="p_chunk">@@ -60,6 +60,10 @@</span> <span class="p_context"> KVM_FEATURE_PV_DEDICATED           ||     8 || guest checks this feature bit</span>
                                    ||       || mizations such as usage of
                                    ||       || qspinlocks.
 ------------------------------------------------------------------------------
<span class="p_add">+KVM_FEATURE_PV_TLB_FLUSH           ||     9 || guest checks this feature bit</span>
<span class="p_add">+                                   ||       || before enabling paravirtualized</span>
<span class="p_add">+                                   ||       || tlb flush.</span>
<span class="p_add">+------------------------------------------------------------------------------</span>
 KVM_FEATURE_CLOCKSOURCE_STABLE_BIT ||    24 || host will warn if no guest-side
                                    ||       || per-cpu warps are expected in
                                    ||       || kvmclock.
<span class="p_header">diff --git a/arch/x86/include/uapi/asm/kvm_para.h b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">index 9ead1ed..a028479 100644</span>
<span class="p_header">--- a/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">+++ b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_chunk">@@ -25,6 +25,7 @@</span> <span class="p_context"></span>
 #define KVM_FEATURE_PV_EOI		6
 #define KVM_FEATURE_PV_UNHALT		7
 #define KVM_FEATURE_PV_DEDICATED	8
<span class="p_add">+#define KVM_FEATURE_PV_TLB_FLUSH	9</span>
 
 /* The last 8 bits are used to indicate how to interpret the flags field
  * in pvclock structure. If no bits are set, all flags are ignored.
<span class="p_chunk">@@ -53,6 +54,7 @@</span> <span class="p_context"> struct kvm_steal_time {</span>
 
 #define KVM_VCPU_NOT_PREEMPTED      (0 &lt;&lt; 0)
 #define KVM_VCPU_PREEMPTED          (1 &lt;&lt; 0)
<span class="p_add">+#define KVM_VCPU_SHOULD_FLUSH       (1 &lt;&lt; 1)</span>
 
 #define KVM_CLOCK_PAIRING_WALLCLOCK 0
 struct kvm_clock_pairing {
<span class="p_header">diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c</span>
<span class="p_header">index 66ed3bc..113c0aa 100644</span>
<span class="p_header">--- a/arch/x86/kernel/kvm.c</span>
<span class="p_header">+++ b/arch/x86/kernel/kvm.c</span>
<span class="p_chunk">@@ -465,9 +465,40 @@</span> <span class="p_context"> static void __init kvm_apf_trap_init(void)</span>
 	update_intr_gate(X86_TRAP_PF, async_page_fault);
 }
 
<span class="p_add">+static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+static void kvm_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="p_add">+			const struct flush_tlb_info *info)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u8 state;</span>
<span class="p_add">+	int cpu;</span>
<span class="p_add">+	struct kvm_steal_time *src;</span>
<span class="p_add">+	struct cpumask *flushmask = this_cpu_cpumask_var_ptr(__pv_tlb_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unlikely(!flushmask))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	cpumask_copy(flushmask, cpumask);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We have to call flush only on online vCPUs. And</span>
<span class="p_add">+	 * queue flush_on_enter for pre-empted vCPUs</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for_each_cpu(cpu, cpumask) {</span>
<span class="p_add">+		src = &amp;per_cpu(steal_time, cpu);</span>
<span class="p_add">+		state = src-&gt;preempted;</span>
<span class="p_add">+		if ((state &amp; KVM_VCPU_PREEMPTED)) {</span>
<span class="p_add">+			if (cmpxchg(&amp;src-&gt;preempted, state, state |</span>
<span class="p_add">+				KVM_VCPU_SHOULD_FLUSH) == state)</span>
<span class="p_add">+				__cpumask_clear_cpu(cpu, flushmask);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	native_flush_tlb_others(flushmask, info);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void __init kvm_guest_init(void)
 {
<span class="p_del">-	int i;</span>
<span class="p_add">+	int i, cpu;</span>
 
 	if (!kvm_para_available())
 		return;
<span class="p_chunk">@@ -484,6 +515,15 @@</span> <span class="p_context"> void __init kvm_guest_init(void)</span>
 		pv_time_ops.steal_clock = kvm_steal_clock;
 	}
 
<span class="p_add">+	if (kvm_para_has_feature(KVM_FEATURE_PV_TLB_FLUSH) &amp;&amp;</span>
<span class="p_add">+		!kvm_para_has_feature(KVM_FEATURE_PV_DEDICATED)) {</span>
<span class="p_add">+		for_each_possible_cpu(cpu) {</span>
<span class="p_add">+			zalloc_cpumask_var_node(per_cpu_ptr(&amp;__pv_tlb_mask, cpu),</span>
<span class="p_add">+					GFP_KERNEL, cpu_to_node(cpu));</span>
<span class="p_add">+		}</span>
<span class="p_add">+		pv_mmu_ops.flush_tlb_others = kvm_flush_tlb_others;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	if (kvm_para_has_feature(KVM_FEATURE_PV_EOI))
 		apic_set_eoi_write(kvm_guest_apic_eoi_write);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



