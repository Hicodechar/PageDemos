
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>powerpc/32: Fix protection of kernel RAM after freeing unused memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    powerpc/32: Fix protection of kernel RAM after freeing unused memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 14, 2017, 1:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170414131126.AA07A67422@localhost.localdomain&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9681249/mbox/"
   >mbox</a>
|
   <a href="/patch/9681249/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9681249/">/patch/9681249/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9C04F60326 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 14 Apr 2017 13:11:40 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7963526AE3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 14 Apr 2017 13:11:40 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5B4352864D; Fri, 14 Apr 2017 13:11:40 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C076C26AE3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 14 Apr 2017 13:11:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752598AbdDNNLb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 14 Apr 2017 09:11:31 -0400
Received: from pegase1.c-s.fr ([93.17.236.30]:19095 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751544AbdDNNL2 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 14 Apr 2017 09:11:28 -0400
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3w4J2960J2z9ttwD;
	Fri, 14 Apr 2017 15:11:13 +0200 (CEST)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id AdglDMyUuAxR; Fri, 14 Apr 2017 15:11:13 +0200 (CEST)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3w4J295TvDz9ttwC;
	Fri, 14 Apr 2017 15:11:13 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 005E48B7D6;
	Fri, 14 Apr 2017 15:11:26 +0200 (CEST)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id JhfmVho76QBo; Fri, 14 Apr 2017 15:11:26 +0200 (CEST)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.16])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id D15488B767;
	Fri, 14 Apr 2017 15:11:26 +0200 (CEST)
Received: by localhost.localdomain (Postfix, from userid 0)
	id AA07A67422; Fri, 14 Apr 2017 15:11:26 +0200 (CEST)
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH] powerpc/32: Fix protection of kernel RAM after freeing
	unused memory
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Message-Id: &lt;20170414131126.AA07A67422@localhost.localdomain&gt;
Date: Fri, 14 Apr 2017 15:11:26 +0200 (CEST)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - April 14, 2017, 1:11 p.m.</div>
<pre class="content">
As seen below, allthough the init sections have been freed, the
associated memory area is still marked as executable in the
page tables. This patch fixes that.

[    5.860093] Freeing unused kernel memory: 592K (c0570000 - c0604000)

---[ Start of kernel VM ]---
0xc0000000-0xc0497fff        4704K  rw  X  present dirty accessed shared
0xc0498000-0xc056ffff         864K  rw     present dirty accessed shared
0xc0570000-0xc059ffff         192K  rw  X  present dirty accessed shared
0xc05a0000-0xc7ffffff      125312K  rw     present dirty accessed shared
---[ vmalloc() Area ]---
<span class="signed-off-by">
Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 arch/powerpc/mm/mem.c        |  3 +++
 arch/powerpc/mm/mmu_decl.h   |  1 +
 arch/powerpc/mm/pgtable_32.c | 20 ++++++++++++++++++++
 3 files changed, 24 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=81661">Michael Ellerman</a> - April 18, 2017, 6:40 a.m.</div>
<pre class="content">
Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:
<span class="quote">
&gt; diff --git a/arch/powerpc/mm/mem.c b/arch/powerpc/mm/mem.c</span>
<span class="quote">&gt; index 9ee536ec0739..e95931c4e6cf 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/mem.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/mem.c</span>
<span class="quote">&gt; @@ -401,6 +401,9 @@ void free_initmem(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	ppc_md.progress = ppc_printk_progress;</span>
<span class="quote">&gt;  	free_initmem_default(POISON_FREE_INITMEM);</span>
<span class="quote">&gt; +#ifdef CONFIG_PPC32</span>
<span class="quote">&gt; +	remap_init_ram();</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>

Please don&#39;t put ifdefs straight in C code like that unless you have to.
In this case it&#39;s easy to put an empty version in a header, eg:
<span class="quote">
&gt; diff --git a/arch/powerpc/mm/mmu_decl.h b/arch/powerpc/mm/mmu_decl.h</span>
<span class="quote">&gt; index f988db655e5b..d39d92600839 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/mmu_decl.h</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/mmu_decl.h</span>
<span class="quote">&gt; @@ -95,6 +95,7 @@ extern void _tlbia(void);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern void mapin_ram(void);</span>
<span class="quote">&gt;  extern int map_page(unsigned long va, phys_addr_t pa, int flags);</span>

  +#ifdef CONFIG_PPC32
<span class="quote">&gt; +void remap_init_ram(void);</span>
  +#else
  +static inline void remap_init_ram(void) { }
  +#endif
<span class="quote">
&gt; diff --git a/arch/powerpc/mm/pgtable_32.c b/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt; index a65c0b4c0669..d506bd61b629 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt; @@ -323,6 +323,26 @@ get_pteptr(struct mm_struct *mm, unsigned long addr, pte_t **ptep, pmd_t **pmdp)</span>
<span class="quote">&gt;          return(retval);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +void remap_init_ram(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long start = (unsigned long)_sinittext &amp; PAGE_MASK;</span>
<span class="quote">&gt; +	unsigned long end = (unsigned long)_einittext;</span>
<span class="quote">&gt; +	unsigned long va;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for (va = start; va &lt; end; va += PAGE_SIZE) {</span>
<span class="quote">&gt; +		pte_t *kpte;</span>
<span class="quote">&gt; +		pmd_t *kpmd;</span>
<span class="quote">&gt; +		pte_t pte = pfn_pte(__pa(va) &gt;&gt; PAGE_SHIFT, PAGE_KERNEL);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (!get_pteptr(&amp;init_mm, va, &amp;kpte, &amp;kpmd))</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +		__set_pte_at(&amp;init_mm, va, kpte, pte, 0);</span>
<span class="quote">&gt; +		wmb();</span>
<span class="quote">&gt; +		pte_unmap(kpte);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	flush_tlb_kernel_range(start, end);</span>
<span class="quote">&gt; +}</span>

Can we just use unmap_kernel_range() ?

Is this sufficient on all 32-bit PPC? (I have no idea)

cheers
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - April 18, 2017, 8:15 a.m.</div>
<pre class="content">
Le 18/04/2017 à 08:40, Michael Ellerman a écrit :
<span class="quote">&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/pgtable_32.c b/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt;&gt; index a65c0b4c0669..d506bd61b629 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/pgtable_32.c</span>
<span class="quote">&gt;&gt; @@ -323,6 +323,26 @@ get_pteptr(struct mm_struct *mm, unsigned long addr, pte_t **ptep, pmd_t **pmdp)</span>
<span class="quote">&gt;&gt;          return(retval);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +void remap_init_ram(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	unsigned long start = (unsigned long)_sinittext &amp; PAGE_MASK;</span>
<span class="quote">&gt;&gt; +	unsigned long end = (unsigned long)_einittext;</span>
<span class="quote">&gt;&gt; +	unsigned long va;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	for (va = start; va &lt; end; va += PAGE_SIZE) {</span>
<span class="quote">&gt;&gt; +		pte_t *kpte;</span>
<span class="quote">&gt;&gt; +		pmd_t *kpmd;</span>
<span class="quote">&gt;&gt; +		pte_t pte = pfn_pte(__pa(va) &gt;&gt; PAGE_SHIFT, PAGE_KERNEL);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		if (!get_pteptr(&amp;init_mm, va, &amp;kpte, &amp;kpmd))</span>
<span class="quote">&gt;&gt; +			continue;</span>
<span class="quote">&gt;&gt; +		__set_pte_at(&amp;init_mm, va, kpte, pte, 0);</span>
<span class="quote">&gt;&gt; +		wmb();</span>
<span class="quote">&gt;&gt; +		pte_unmap(kpte);</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt; +	flush_tlb_kernel_range(start, end);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Can we just use unmap_kernel_range() ?</span>

We only want to remove the X bit.
I think unmap_kernel_range() will unmap the area, wheareas we want to 
keep it as part of the linear data area.

Christophe
<span class="quote">
&gt;</span>
<span class="quote">&gt; Is this sufficient on all 32-bit PPC? (I have no idea)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; cheers</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/mm/mem.c b/arch/powerpc/mm/mem.c</span>
<span class="p_header">index 9ee536ec0739..e95931c4e6cf 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/mem.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/mem.c</span>
<span class="p_chunk">@@ -401,6 +401,9 @@</span> <span class="p_context"> void free_initmem(void)</span>
 {
 	ppc_md.progress = ppc_printk_progress;
 	free_initmem_default(POISON_FREE_INITMEM);
<span class="p_add">+#ifdef CONFIG_PPC32</span>
<span class="p_add">+	remap_init_ram();</span>
<span class="p_add">+#endif</span>
 }
 
 #ifdef CONFIG_BLK_DEV_INITRD
<span class="p_header">diff --git a/arch/powerpc/mm/mmu_decl.h b/arch/powerpc/mm/mmu_decl.h</span>
<span class="p_header">index f988db655e5b..d39d92600839 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/mmu_decl.h</span>
<span class="p_header">+++ b/arch/powerpc/mm/mmu_decl.h</span>
<span class="p_chunk">@@ -95,6 +95,7 @@</span> <span class="p_context"> extern void _tlbia(void);</span>
 
 extern void mapin_ram(void);
 extern int map_page(unsigned long va, phys_addr_t pa, int flags);
<span class="p_add">+void remap_init_ram(void);</span>
 extern void setbat(int index, unsigned long virt, phys_addr_t phys,
 		   unsigned int size, pgprot_t prot);
 
<span class="p_header">diff --git a/arch/powerpc/mm/pgtable_32.c b/arch/powerpc/mm/pgtable_32.c</span>
<span class="p_header">index a65c0b4c0669..d506bd61b629 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/pgtable_32.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/pgtable_32.c</span>
<span class="p_chunk">@@ -323,6 +323,26 @@</span> <span class="p_context"> get_pteptr(struct mm_struct *mm, unsigned long addr, pte_t **ptep, pmd_t **pmdp)</span>
         return(retval);
 }
 
<span class="p_add">+void remap_init_ram(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long start = (unsigned long)_sinittext &amp; PAGE_MASK;</span>
<span class="p_add">+	unsigned long end = (unsigned long)_einittext;</span>
<span class="p_add">+	unsigned long va;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (va = start; va &lt; end; va += PAGE_SIZE) {</span>
<span class="p_add">+		pte_t *kpte;</span>
<span class="p_add">+		pmd_t *kpmd;</span>
<span class="p_add">+		pte_t pte = pfn_pte(__pa(va) &gt;&gt; PAGE_SHIFT, PAGE_KERNEL);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!get_pteptr(&amp;init_mm, va, &amp;kpte, &amp;kpmd))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		__set_pte_at(&amp;init_mm, va, kpte, pte, 0);</span>
<span class="p_add">+		wmb();</span>
<span class="p_add">+		pte_unmap(kpte);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	flush_tlb_kernel_range(start, end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_DEBUG_PAGEALLOC
 
 static int __change_page_attr(struct page *page, pgprot_t prot)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



