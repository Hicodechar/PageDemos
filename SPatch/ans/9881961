
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm,fork: introduce MADV_WIPEONFORK - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm,fork: introduce MADV_WIPEONFORK</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=181">Rik van Riel</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 4, 2017, 7:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170804190730.17858-3-riel@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9881961/mbox/"
   >mbox</a>
|
   <a href="/patch/9881961/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9881961/">/patch/9881961/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0E7CF60375 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Aug 2017 19:07:40 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F3C20289AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Aug 2017 19:07:39 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E6C23289E8; Fri,  4 Aug 2017 19:07:39 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 19886289AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Aug 2017 19:07:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752129AbdHDTHg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 4 Aug 2017 15:07:36 -0400
Received: from shelob.surriel.com ([96.67.55.147]:44837 &quot;EHLO
	shelob.surriel.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751208AbdHDTHc (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 4 Aug 2017 15:07:32 -0400
Received: from [2603:3005:d05:2b00:224:e8ff:fe38:995c]
	(helo=annuminas.surriel.com)
	by shelob.surriel.com with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.63) (envelope-from &lt;riel@redhat.com&gt;)
	id 1ddhwZ-0002e8-GD; Fri, 04 Aug 2017 15:07:31 -0400
Received: from annuminas.surriel.com (localhost.localdomain [127.0.0.1])
	by annuminas.surriel.com (8.15.2/8.14.5) with ESMTP id v74J7VCu018012;
	Fri, 4 Aug 2017 15:07:31 -0400
Received: (from riel@localhost)
	by annuminas.surriel.com (8.15.2/8.15.2/Submit) id v74J7V70018011;
	Fri, 4 Aug 2017 15:07:31 -0400
X-Authentication-Warning: annuminas.surriel.com: riel set sender to
	riel@redhat.com using -f
From: riel@redhat.com
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, fweimer@redhat.com, colm@allcosts.net,
	akpm@linux-foundation.org, rppt@linux.vnet.ibm.com,
	keescook@chromium.org, luto@amacapital.net, wad@chromium.org,
	mingo@kernel.org
Subject: [PATCH 2/2] mm,fork: introduce MADV_WIPEONFORK
Date: Fri,  4 Aug 2017 15:07:30 -0400
Message-Id: &lt;20170804190730.17858-3-riel@redhat.com&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;20170804190730.17858-1-riel@redhat.com&gt;
References: &lt;20170804190730.17858-1-riel@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Aug. 4, 2017, 7:07 p.m.</div>
<pre class="content">
<span class="from">From: Rik van Riel &lt;riel@redhat.com&gt;</span>

Introduce MADV_WIPEONFORK semantics, which result in a VMA being
empty in the child process after fork. This differs from MADV_DONTFORK
in one important way.

If a child process accesses memory that was MADV_WIPEONFORK, it
will get zeroes. The address ranges are still valid, they are just empty.

If a child process accesses memory that was MADV_DONTFORK, it will
get a segmentation fault, since those address ranges are no longer
valid in the child after fork.

Since MADV_DONTFORK also seems to be used to allow very large
programs to fork in systems with strict memory overcommit restrictions,
changing the semantics of MADV_DONTFORK might break existing programs.

The use case is libraries that store or cache information, and
want to know that they need to regenerate it in the child process
after fork.

Examples of this would be:
- systemd/pulseaudio API checks (fail after fork)
  (replacing a getpid check, which is too slow without a PID cache)
- PKCS#11 API reinitialization check (mandated by specification)
- glibc&#39;s upcoming PRNG (reseed after fork)
- OpenSSL PRNG (reseed after fork)

The security benefits of a forking server having a re-inialized
PRNG in every child process are pretty obvious. However, due to
libraries having all kinds of internal state, and programs getting
compiled with many different versions of each library, it is
unreasonable to expect calling programs to re-initialize everything
manually after fork.

A further complication is the proliferation of clone flags,
programs bypassing glibc&#39;s functions to call clone directly,
and programs calling unshare, causing the glibc pthread_atfork
hook to not get called.

It would be better to have the kernel take care of this automatically.

This is similar to the OpenBSD minherit syscall with MAP_INHERIT_ZERO:

    https://man.openbsd.org/minherit.2

Reported-by: Florian Weimer &lt;fweimer@redhat.com&gt;
Reported-by: Colm MacCÃ¡rtaigh &lt;colm@allcosts.net&gt;
<span class="signed-off-by">Signed-off-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
---
 arch/alpha/include/uapi/asm/mman.h     |  3 +++
 arch/mips/include/uapi/asm/mman.h      |  3 +++
 arch/parisc/include/uapi/asm/mman.h    |  3 +++
 arch/xtensa/include/uapi/asm/mman.h    |  3 +++
 fs/proc/task_mmu.c                     |  1 +
 include/linux/mm.h                     |  2 +-
 include/uapi/asm-generic/mman-common.h |  3 +++
 kernel/fork.c                          |  8 ++++++--
 mm/madvise.c                           |  8 ++++++++
 mm/memory.c                            | 10 ++++++++++
 10 files changed, 41 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Aug. 4, 2017, 11:09 p.m.</div>
<pre class="content">
On 08/04/2017 12:07 PM, riel@redhat.com wrote:
<span class="quote">&gt; From: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Introduce MADV_WIPEONFORK semantics, which result in a VMA being</span>
<span class="quote">&gt; empty in the child process after fork. This differs from MADV_DONTFORK</span>
<span class="quote">&gt; in one important way.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If a child process accesses memory that was MADV_WIPEONFORK, it</span>
<span class="quote">&gt; will get zeroes. The address ranges are still valid, they are just empty.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If a child process accesses memory that was MADV_DONTFORK, it will</span>
<span class="quote">&gt; get a segmentation fault, since those address ranges are no longer</span>
<span class="quote">&gt; valid in the child after fork.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Since MADV_DONTFORK also seems to be used to allow very large</span>
<span class="quote">&gt; programs to fork in systems with strict memory overcommit restrictions,</span>
<span class="quote">&gt; changing the semantics of MADV_DONTFORK might break existing programs.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The use case is libraries that store or cache information, and</span>
<span class="quote">&gt; want to know that they need to regenerate it in the child process</span>
<span class="quote">&gt; after fork.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Examples of this would be:</span>
<span class="quote">&gt; - systemd/pulseaudio API checks (fail after fork)</span>
<span class="quote">&gt;   (replacing a getpid check, which is too slow without a PID cache)</span>
<span class="quote">&gt; - PKCS#11 API reinitialization check (mandated by specification)</span>
<span class="quote">&gt; - glibc&#39;s upcoming PRNG (reseed after fork)</span>
<span class="quote">&gt; - OpenSSL PRNG (reseed after fork)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The security benefits of a forking server having a re-inialized</span>
<span class="quote">&gt; PRNG in every child process are pretty obvious. However, due to</span>
<span class="quote">&gt; libraries having all kinds of internal state, and programs getting</span>
<span class="quote">&gt; compiled with many different versions of each library, it is</span>
<span class="quote">&gt; unreasonable to expect calling programs to re-initialize everything</span>
<span class="quote">&gt; manually after fork.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A further complication is the proliferation of clone flags,</span>
<span class="quote">&gt; programs bypassing glibc&#39;s functions to call clone directly,</span>
<span class="quote">&gt; and programs calling unshare, causing the glibc pthread_atfork</span>
<span class="quote">&gt; hook to not get called.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It would be better to have the kernel take care of this automatically.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is similar to the OpenBSD minherit syscall with MAP_INHERIT_ZERO:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     https://man.openbsd.org/minherit.2</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reported-by: Florian Weimer &lt;fweimer@redhat.com&gt;</span>
<span class="quote">&gt; Reported-by: Colm MacCÃ¡rtaigh &lt;colm@allcosts.net&gt;</span>
<span class="quote">&gt; Signed-off-by: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/alpha/include/uapi/asm/mman.h     |  3 +++</span>
<span class="quote">&gt;  arch/mips/include/uapi/asm/mman.h      |  3 +++</span>
<span class="quote">&gt;  arch/parisc/include/uapi/asm/mman.h    |  3 +++</span>
<span class="quote">&gt;  arch/xtensa/include/uapi/asm/mman.h    |  3 +++</span>
<span class="quote">&gt;  fs/proc/task_mmu.c                     |  1 +</span>
<span class="quote">&gt;  include/linux/mm.h                     |  2 +-</span>
<span class="quote">&gt;  include/uapi/asm-generic/mman-common.h |  3 +++</span>
<span class="quote">&gt;  kernel/fork.c                          |  8 ++++++--</span>
<span class="quote">&gt;  mm/madvise.c                           |  8 ++++++++</span>
<span class="quote">&gt;  mm/memory.c                            | 10 ++++++++++</span>
<span class="quote">&gt;  10 files changed, 41 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt; </span>

This didn&#39;t seem &#39;quite right&#39; to me for shared mappings and/or file
backed mappings.  I wasn&#39;t exactly sure what it &#39;should&#39; do in such
cases.  So, I tried it with a mapping created as follows:

addr = mmap(ADDR, page_size,
                        PROT_READ | PROT_WRITE,
                        MAP_ANONYMOUS|MAP_SHARED, -1, 0);

When setting MADV_WIPEONFORK on the vma/mapping, I got the following
at task exit time:

[  694.558290] ------------[ cut here ]------------
[  694.558978] kernel BUG at mm/filemap.c:212!
[  694.559476] invalid opcode: 0000 [#1] SMP
[  694.560023] Modules linked in: ip6t_REJECT nf_reject_ipv6 ip6t_rpfilter xt_conntrack ebtable_broute bridge stp llc ebtable_nat ip6table_nat nf_conntrack_ipv6 nf_defrag_ipv6 nf_nat_ipv6 ip6table_raw ip6table_mangle ip6table_security iptable_nat nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack iptable_raw iptable_mangle 9p iptable_security ebtable_filter ebtables ip6table_filter ip6_tables snd_hda_codec_generic snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_seq ppdev snd_seq_device joydev crct10dif_pclmul crc32_pclmul crc32c_intel snd_pcm ghash_clmulni_intel 9pnet_virtio virtio_balloon snd_timer 9pnet parport_pc snd parport i2c_piix4 soundcore nfsd auth_rpcgss nfs_acl lockd grace sunrpc virtio_net virtio_blk virtio_console 8139too qxl drm_kms_helper ttm drm serio_raw 8139cp
[  694.571554]  mii virtio_pci ata_generic virtio_ring virtio pata_acpi
[  694.572608] CPU: 3 PID: 1200 Comm: test_wipe2 Not tainted 4.13.0-rc3+ #8
[  694.573778] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.1-1.fc24 04/01/2014
[  694.574917] task: ffff880137178040 task.stack: ffffc900019d4000
[  694.575650] RIP: 0010:__delete_from_page_cache+0x344/0x410
[  694.576409] RSP: 0018:ffffc900019d7a88 EFLAGS: 00010082
[  694.577238] RAX: 0000000000000021 RBX: ffffea00047d0e00 RCX: 0000000000000006
[  694.578537] RDX: 0000000000000000 RSI: 0000000000000096 RDI: ffff88023fd0db90
[  694.579774] RBP: ffffc900019d7ad8 R08: 00000000000882b6 R09: 000000000000028a
[  694.580754] R10: ffffc900019d7da8 R11: ffffffff8211184d R12: ffffea00047d0e00
[  694.582040] R13: 0000000000000000 R14: 0000000000000202 R15: ffff8801384439e8
[  694.583236] FS:  0000000000000000(0000) GS:ffff88023fd00000(0000) knlGS:0000000000000000
[  694.584607] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[  694.585409] CR2: 00007ff77a8da618 CR3: 0000000001e09000 CR4: 00000000001406e0
[  694.586547] Call Trace:
[  694.586996]  delete_from_page_cache+0x54/0x110
[  694.587481]  truncate_inode_page+0xab/0x120
[  694.588110]  shmem_undo_range+0x498/0xa50
[  694.588813]  ? save_stack_trace+0x1b/0x20
[  694.589529]  ? set_track+0x70/0x140
[  694.590150]  ? init_object+0x69/0xa0
[  694.590722]  ? __inode_wait_for_writeback+0x73/0xe0
[  694.591525]  shmem_truncate_range+0x16/0x40
[  694.592268]  shmem_evict_inode+0xb1/0x190
[  694.592735]  evict+0xbb/0x1c0
[  694.593147]  iput+0x1c0/0x210
[  694.593497]  dentry_unlink_inode+0xb4/0x150
[  694.593982]  __dentry_kill+0xc1/0x150
[  694.594400]  dput+0x1c8/0x1e0
[  694.594745]  __fput+0x172/0x1e0
[  694.595103]  ____fput+0xe/0x10
[  694.595463]  task_work_run+0x80/0xa0
[  694.595886]  do_exit+0x2d6/0xb50
[  694.596323]  ? __do_page_fault+0x288/0x4a0
[  694.596818]  do_group_exit+0x47/0xb0
[  694.597249]  SyS_exit_group+0x14/0x20
[  694.597682]  entry_SYSCALL_64_fastpath+0x1a/0xa5
[  694.598198] RIP: 0033:0x7ff77a5e78c8
[  694.598612] RSP: 002b:00007ffc5aece318 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
[  694.599804] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007ff77a5e78c8
[  694.600609] RDX: 0000000000000000 RSI: 000000000000003c RDI: 0000000000000000
[  694.601424] RBP: 00007ff77a8da618 R08: 00000000000000e7 R09: ffffffffffffff98
[  694.602224] R10: 0000000000000003 R11: 0000000000000246 R12: 0000000000000001
[  694.603151] R13: 00007ff77a8dbc60 R14: 0000000000000000 R15: 0000000000000000
[  694.603984] Code: 60 f3 c5 81 e8 2e 7e 03 00 0f 0b 48 c7 c6 60 f3 c5 81 4c 89 e7 e8 1d 7e 03 00 0f 0b 48 c7 c6 00 f4 c5 81 4c 89 e7 e8 0c 7e 03 00 &lt;0f&gt; 0b 48 c7 c6 38 f3 c5 81 4c 89 e7 e8 fb 7d 03 00 0f 0b 48 c7 
[  694.606500] RIP: __delete_from_page_cache+0x344/0x410 RSP: ffffc900019d7a88
[  694.607426] ---[ end trace 55e6b04ae95d8ce3 ]---

BTW, this was on 4.13.0-rc3 + your patches.  Simple test program is below.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=181">Rik van Riel</a> - Aug. 5, 2017, 2:05 p.m.</div>
<pre class="content">
On Fri, 2017-08-04 at 16:09 -0700, Mike Kravetz wrote:
<span class="quote">&gt; On 08/04/2017 12:07 PM, riel@redhat.com wrote:</span>
<span class="quote">&gt; &gt; From: Rik van Riel &lt;riel@redhat.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Introduce MADV_WIPEONFORK semantics, which result in a VMA being</span>
<span class="quote">&gt; &gt; empty in the child process after fork. This differs from</span>
<span class="quote">&gt; &gt; MADV_DONTFORK</span>
<span class="quote">&gt; &gt; in one important way.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If a child process accesses memory that was MADV_WIPEONFORK, it</span>
<span class="quote">&gt; &gt; will get zeroes. The address ranges are still valid, they are just</span>
<span class="quote">&gt; &gt; empty.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; This didn&#39;t seem &#39;quite right&#39; to me for shared mappings and/or file</span>
<span class="quote">&gt; backed mappings.Â Â I wasn&#39;t exactly sure what it &#39;should&#39; do in such</span>
<span class="quote">&gt; cases.Â Â So, I tried it with a mapping created as follows:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; addr = mmap(ADDR, page_size,</span>
<span class="quote">&gt; Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â PROT_READ | PROT_WRITE,</span>
<span class="quote">&gt; Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â MAP_ANONYMOUS|MAP_SHARED, -1, 0);</span>

Your test program is pretty much the same I used, except I
used MAP_PRIVATE instead of MAP_SHARED.

Let me see how the code paths differ for both cases...
<span class="quote">

&gt; When setting MADV_WIPEONFORK on the vma/mapping, I got the following</span>
<span class="quote">&gt; at task exit time:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [Â Â 694.558290] ------------[ cut here ]------------</span>
<span class="quote">&gt; [Â Â 694.558978] kernel BUG at mm/filemap.c:212!</span>
<span class="quote">&gt; [Â Â 694.559476] invalid opcode: 0000 [#1] SMP</span>
<span class="quote">&gt; [Â Â 694.560023] Modules linked in: ip6t_REJECT nf_reject_ipv6</span>
<span class="quote">&gt; ip6t_rpfilter xt_conntrack ebtable_broute bridge stp llc ebtable_nat</span>
<span class="quote">&gt; ip6table_nat nf_conntrack_ipv6 nf_defrag_ipv6 nf_nat_ipv6</span>
<span class="quote">&gt; ip6table_raw ip6table_mangle ip6table_security iptable_nat</span>
<span class="quote">&gt; nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack</span>
<span class="quote">&gt; iptable_raw iptable_mangle 9p iptable_security ebtable_filter</span>
<span class="quote">&gt; ebtables ip6table_filter ip6_tables snd_hda_codec_generic</span>
<span class="quote">&gt; snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_seq ppdev</span>
<span class="quote">&gt; snd_seq_device joydev crct10dif_pclmul crc32_pclmul crc32c_intel</span>
<span class="quote">&gt; snd_pcm ghash_clmulni_intel 9pnet_virtio virtio_balloon snd_timer</span>
<span class="quote">&gt; 9pnet parport_pc snd parport i2c_piix4 soundcore nfsd auth_rpcgss</span>
<span class="quote">&gt; nfs_acl lockd grace sunrpc virtio_net virtio_blk virtio_console</span>
<span class="quote">&gt; 8139too qxl drm_kms_helper ttm drm serio_raw 8139cp</span>
<span class="quote">&gt; [Â Â 694.571554]Â Â mii virtio_pci ata_generic virtio_ring virtio</span>
<span class="quote">&gt; pata_acpi</span>
<span class="quote">&gt; [Â Â 694.572608] CPU: 3 PID: 1200 Comm: test_wipe2 Not tainted 4.13.0-</span>
<span class="quote">&gt; rc3+ #8</span>
<span class="quote">&gt; [Â Â 694.573778] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),</span>
<span class="quote">&gt; BIOS 1.9.1-1.fc24 04/01/2014</span>
<span class="quote">&gt; [Â Â 694.574917] task: ffff880137178040 task.stack: ffffc900019d4000</span>
<span class="quote">&gt; [Â Â 694.575650] RIP: 0010:__delete_from_page_cache+0x344/0x410</span>
<span class="quote">&gt; [Â Â 694.576409] RSP: 0018:ffffc900019d7a88 EFLAGS: 00010082</span>
<span class="quote">&gt; [Â Â 694.577238] RAX: 0000000000000021 RBX: ffffea00047d0e00 RCX:</span>
<span class="quote">&gt; 0000000000000006</span>
<span class="quote">&gt; [Â Â 694.578537] RDX: 0000000000000000 RSI: 0000000000000096 RDI:</span>
<span class="quote">&gt; ffff88023fd0db90</span>
<span class="quote">&gt; [Â Â 694.579774] RBP: ffffc900019d7ad8 R08: 00000000000882b6 R09:</span>
<span class="quote">&gt; 000000000000028a</span>
<span class="quote">&gt; [Â Â 694.580754] R10: ffffc900019d7da8 R11: ffffffff8211184d R12:</span>
<span class="quote">&gt; ffffea00047d0e00</span>
<span class="quote">&gt; [Â Â 694.582040] R13: 0000000000000000 R14: 0000000000000202 R15:</span>
<span class="quote">&gt; ffff8801384439e8</span>
<span class="quote">&gt; [Â Â 694.583236] FS:Â Â 0000000000000000(0000) GS:ffff88023fd00000(0000)</span>
<span class="quote">&gt; knlGS:0000000000000000</span>
<span class="quote">&gt; [Â Â 694.584607] CS:Â Â 0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span>
<span class="quote">&gt; [Â Â 694.585409] CR2: 00007ff77a8da618 CR3: 0000000001e09000 CR4:</span>
<span class="quote">&gt; 00000000001406e0</span>
<span class="quote">&gt; [Â Â 694.586547] Call Trace:</span>
<span class="quote">&gt; [Â Â 694.586996]Â Â delete_from_page_cache+0x54/0x110</span>
<span class="quote">&gt; [Â Â 694.587481]Â Â truncate_inode_page+0xab/0x120</span>
<span class="quote">&gt; [Â Â 694.588110]Â Â shmem_undo_range+0x498/0xa50</span>
<span class="quote">&gt; [Â Â 694.588813]Â Â ? save_stack_trace+0x1b/0x20</span>
<span class="quote">&gt; [Â Â 694.589529]Â Â ? set_track+0x70/0x140</span>
<span class="quote">&gt; [Â Â 694.590150]Â Â ? init_object+0x69/0xa0</span>
<span class="quote">&gt; [Â Â 694.590722]Â Â ? __inode_wait_for_writeback+0x73/0xe0</span>
<span class="quote">&gt; [Â Â 694.591525]Â Â shmem_truncate_range+0x16/0x40</span>
<span class="quote">&gt; [Â Â 694.592268]Â Â shmem_evict_inode+0xb1/0x190</span>
<span class="quote">&gt; [Â Â 694.592735]Â Â evict+0xbb/0x1c0</span>
<span class="quote">&gt; [Â Â 694.593147]Â Â iput+0x1c0/0x210</span>
<span class="quote">&gt; [Â Â 694.593497]Â Â dentry_unlink_inode+0xb4/0x150</span>
<span class="quote">&gt; [Â Â 694.593982]Â Â __dentry_kill+0xc1/0x150</span>
<span class="quote">&gt; [Â Â 694.594400]Â Â dput+0x1c8/0x1e0</span>
<span class="quote">&gt; [Â Â 694.594745]Â Â __fput+0x172/0x1e0</span>
<span class="quote">&gt; [Â Â 694.595103]Â Â ____fput+0xe/0x10</span>
<span class="quote">&gt; [Â Â 694.595463]Â Â task_work_run+0x80/0xa0</span>
<span class="quote">&gt; [Â Â 694.595886]Â Â do_exit+0x2d6/0xb50</span>
<span class="quote">&gt; [Â Â 694.596323]Â Â ? __do_page_fault+0x288/0x4a0</span>
<span class="quote">&gt; [Â Â 694.596818]Â Â do_group_exit+0x47/0xb0</span>
<span class="quote">&gt; [Â Â 694.597249]Â Â SyS_exit_group+0x14/0x20</span>
<span class="quote">&gt; [Â Â 694.597682]Â Â entry_SYSCALL_64_fastpath+0x1a/0xa5</span>
<span class="quote">&gt; [Â Â 694.598198] RIP: 0033:0x7ff77a5e78c8</span>
<span class="quote">&gt; [Â Â 694.598612] RSP: 002b:00007ffc5aece318 EFLAGS: 00000246 ORIG_RAX:</span>
<span class="quote">&gt; 00000000000000e7</span>
<span class="quote">&gt; [Â Â 694.599804] RAX: ffffffffffffffda RBX: 0000000000000000 RCX:</span>
<span class="quote">&gt; 00007ff77a5e78c8</span>
<span class="quote">&gt; [Â Â 694.600609] RDX: 0000000000000000 RSI: 000000000000003c RDI:</span>
<span class="quote">&gt; 0000000000000000</span>
<span class="quote">&gt; [Â Â 694.601424] RBP: 00007ff77a8da618 R08: 00000000000000e7 R09:</span>
<span class="quote">&gt; ffffffffffffff98</span>
<span class="quote">&gt; [Â Â 694.602224] R10: 0000000000000003 R11: 0000000000000246 R12:</span>
<span class="quote">&gt; 0000000000000001</span>
<span class="quote">&gt; [Â Â 694.603151] R13: 00007ff77a8dbc60 R14: 0000000000000000 R15:</span>
<span class="quote">&gt; 0000000000000000</span>
<span class="quote">&gt; [Â Â 694.603984] Code: 60 f3 c5 81 e8 2e 7e 03 00 0f 0b 48 c7 c6 60 f3</span>
<span class="quote">&gt; c5 81 4c 89 e7 e8 1d 7e 03 00 0f 0b 48 c7 c6 00 f4 c5 81 4c 89 e7 e8</span>
<span class="quote">&gt; 0c 7e 03 00 &lt;0f&gt; 0b 48 c7 c6 38 f3 c5 81 4c 89 e7 e8 fb 7d 03 00 0f</span>
<span class="quote">&gt; 0b 48 c7Â </span>
<span class="quote">&gt; [Â Â 694.606500] RIP: __delete_from_page_cache+0x344/0x410 RSP:</span>
<span class="quote">&gt; ffffc900019d7a88</span>
<span class="quote">&gt; [Â Â 694.607426] ---[ end trace 55e6b04ae95d8ce3 ]---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; BTW, this was on 4.13.0-rc3 + your patches.Â Â Simple test program is</span>
<span class="quote">&gt; below.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Aug. 14, 2017, 3:45 p.m.</div>
<pre class="content">
Hi Rik,

[auto build test ERROR on linus/master]
[also build test ERROR on v4.13-rc5]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/riel-redhat-com/mm-fork-security-introduce-MADV_WIPEONFORK/20170806-035914
config: m68k-sun3_defconfig (attached as .config)
compiler: m68k-linux-gcc (GCC) 4.9.0
reproduce:
        wget https://raw.githubusercontent.com/01org/lkp-tests/master/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=m68k 

All errors (new ones prefixed by &gt;&gt;):

   In file included from mm/debug.c:12:0:
<span class="quote">&gt;&gt; include/trace/events/mmflags.h:131:31: error: &#39;VM_ARCH_2&#39; undeclared here (not in a function)</span>
    #define __VM_ARCH_SPECIFIC_2 {VM_ARCH_2, &quot;arch_2&quot; }
                                  ^
   include/trace/events/mmflags.h:165:2: note: in expansion of macro &#39;__VM_ARCH_SPECIFIC_2&#39;
     __VM_ARCH_SPECIFIC_2    ,  \
     ^
   mm/debug.c:39:2: note: in expansion of macro &#39;__def_vmaflag_names&#39;
     __def_vmaflag_names,
     ^

vim +/VM_ARCH_2 +131 include/trace/events/mmflags.h

bcf669179 Kirill A. Shutemov 2016-03-17  127  
bcf669179 Kirill A. Shutemov 2016-03-17  128  #if defined(CONFIG_X86)
bcf669179 Kirill A. Shutemov 2016-03-17  129  #define __VM_ARCH_SPECIFIC_2 {VM_MPX,		&quot;mpx&quot;		}
bcf669179 Kirill A. Shutemov 2016-03-17  130  #else
bcf669179 Kirill A. Shutemov 2016-03-17 @131  #define __VM_ARCH_SPECIFIC_2 {VM_ARCH_2,	&quot;arch_2&quot;	}
420adbe9f Vlastimil Babka    2016-03-15  132  #endif
420adbe9f Vlastimil Babka    2016-03-15  133  

:::::: The code at line 131 was first introduced by commit
:::::: bcf6691797f425b301f629bb783b7ff2d0bcfa5a mm, tracing: refresh __def_vmaflag_names

:::::: TO: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
:::::: CC: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/alpha/include/uapi/asm/mman.h b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">index 02760f6e6ca4..2a708a792882 100644</span>
<span class="p_header">--- a/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/alpha/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -64,6 +64,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/arch/mips/include/uapi/asm/mman.h b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">index 655e2fb5395b..d59c57d60d7d 100644</span>
<span class="p_header">--- a/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/mips/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -91,6 +91,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/arch/parisc/include/uapi/asm/mman.h b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">index 5979745815a5..e205e0179642 100644</span>
<span class="p_header">--- a/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/parisc/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -60,6 +60,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	70		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 71		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 72		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 #define MAP_VARIABLE	0
<span class="p_header">diff --git a/arch/xtensa/include/uapi/asm/mman.h b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">index 24365b30aae9..ed23e0a1b30d 100644</span>
<span class="p_header">--- a/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_header">+++ b/arch/xtensa/include/uapi/asm/mman.h</span>
<span class="p_chunk">@@ -103,6 +103,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_NODUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index b836fd61ed87..2591e70216ff 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -651,6 +651,7 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
 		[ilog2(VM_NORESERVE)]	= &quot;nr&quot;,
 		[ilog2(VM_HUGETLB)]	= &quot;ht&quot;,
 		[ilog2(VM_ARCH_1)]	= &quot;ar&quot;,
<span class="p_add">+		[ilog2(VM_WIPEONFORK)]	= &quot;wf&quot;,</span>
 		[ilog2(VM_DONTDUMP)]	= &quot;dd&quot;,
 #ifdef CONFIG_MEM_SOFT_DIRTY
 		[ilog2(VM_SOFTDIRTY)]	= &quot;sd&quot;,
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 7550eeb06ccf..58788c1b9e9d 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -189,7 +189,7 @@</span> <span class="p_context"> extern unsigned int kobjsize(const void *objp);</span>
 #define VM_NORESERVE	0x00200000	/* should the VM suppress accounting */
 #define VM_HUGETLB	0x00400000	/* Huge TLB Page VM */
 #define VM_ARCH_1	0x01000000	/* Architecture-specific flag */
<span class="p_del">-#define VM_ARCH_2	0x02000000</span>
<span class="p_add">+#define VM_WIPEONFORK	0x02000000	/* Wipe VMA contents in child. */</span>
 #define VM_DONTDUMP	0x04000000	/* Do not include in the core dump */
 
 #ifdef CONFIG_MEM_SOFT_DIRTY
<span class="p_header">diff --git a/include/uapi/asm-generic/mman-common.h b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">index 8c27db0c5c08..49e2b1d78093 100644</span>
<span class="p_header">--- a/include/uapi/asm-generic/mman-common.h</span>
<span class="p_header">+++ b/include/uapi/asm-generic/mman-common.h</span>
<span class="p_chunk">@@ -58,6 +58,9 @@</span> <span class="p_context"></span>
 					   overrides the coredump filter bits */
 #define MADV_DODUMP	17		/* Clear the MADV_DONTDUMP flag */
 
<span class="p_add">+#define MADV_WIPEONFORK 18		/* Zero memory on fork, child only */</span>
<span class="p_add">+#define MADV_KEEPONFORK 19		/* Undo MADV_WIPEONFORK */</span>
<span class="p_add">+</span>
 /* compatibility flags */
 #define MAP_FILE	0
 
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 17921b0390b4..2dd0d0cae3bb 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -628,7 +628,7 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 
 	prev = NULL;
 	for (mpnt = oldmm-&gt;mmap; mpnt; mpnt = mpnt-&gt;vm_next) {
<span class="p_del">-		struct file *file;</span>
<span class="p_add">+		struct file *file = NULL;</span>
 
 		if (mpnt-&gt;vm_flags &amp; VM_DONTCOPY) {
 			vm_stat_account(mm, mpnt-&gt;vm_flags, -vma_pages(mpnt));
<span class="p_chunk">@@ -658,7 +658,11 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 			goto fail_nomem_anon_vma_fork;
 		tmp-&gt;vm_flags &amp;= ~(VM_LOCKED | VM_LOCKONFAULT);
 		tmp-&gt;vm_next = tmp-&gt;vm_prev = NULL;
<span class="p_del">-		file = tmp-&gt;vm_file;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* With VM_WIPEONFORK, the child gets an empty VMA. */</span>
<span class="p_add">+		if (!(tmp-&gt;vm_flags &amp; VM_WIPEONFORK))</span>
<span class="p_add">+			file = tmp-&gt;vm_file;</span>
<span class="p_add">+</span>
 		if (file) {
 			struct inode *inode = file_inode(file);
 			struct address_space *mapping = file-&gt;f_mapping;
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 9976852f1e1c..9e644c0ed4dc 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -80,6 +80,12 @@</span> <span class="p_context"> static long madvise_behavior(struct vm_area_struct *vma,</span>
 		}
 		new_flags &amp;= ~VM_DONTCOPY;
 		break;
<span class="p_add">+	case MADV_WIPEONFORK:</span>
<span class="p_add">+		new_flags |= VM_WIPEONFORK;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case MADV_KEEPONFORK:</span>
<span class="p_add">+		new_flags &amp;= ~VM_WIPEONFORK;</span>
<span class="p_add">+		break;</span>
 	case MADV_DONTDUMP:
 		new_flags |= VM_DONTDUMP;
 		break;
<span class="p_chunk">@@ -689,6 +695,8 @@</span> <span class="p_context"> madvise_behavior_valid(int behavior)</span>
 #endif
 	case MADV_DONTDUMP:
 	case MADV_DODUMP:
<span class="p_add">+	case MADV_WIPEONFORK:</span>
<span class="p_add">+	case MADV_KEEPONFORK:</span>
 #ifdef CONFIG_MEMORY_FAILURE
 	case MADV_SOFT_OFFLINE:
 	case MADV_HWPOISON:
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 0e517be91a89..f9b0ad7feb57 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1134,6 +1134,16 @@</span> <span class="p_context"> int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 			!vma-&gt;anon_vma)
 		return 0;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * With VM_WIPEONFORK, the child inherits the VMA from the</span>
<span class="p_add">+	 * parent, but not its contents.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * A child accessing VM_WIPEONFORK memory will see all zeroes;</span>
<span class="p_add">+	 * a child accessing VM_DONTCOPY memory receives a segfault.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_WIPEONFORK)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
 	if (is_vm_hugetlb_page(vma))
 		return copy_hugetlb_page_range(dst_mm, src_mm, vma);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



