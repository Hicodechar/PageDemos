
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>sparc64: Add 64K page size support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    sparc64: Add 64K page size support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 6, 2017, 8:33 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1486413269-99237-1-git-send-email-nitin.m.gupta@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9558731/mbox/"
   >mbox</a>
|
   <a href="/patch/9558731/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9558731/">/patch/9558731/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7851360547 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Feb 2017 20:35:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 69E86280DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Feb 2017 20:35:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5E92528135; Mon,  6 Feb 2017 20:35:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 43174280DE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Feb 2017 20:35:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752739AbdBFUf0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Feb 2017 15:35:26 -0500
Received: from aserp1040.oracle.com ([141.146.126.69]:43046 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752563AbdBFUfY (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Feb 2017 15:35:24 -0500
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id v16KYerq017440
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 6 Feb 2017 20:34:41 GMT
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by userv0021.oracle.com (8.14.4/8.14.4) with ESMTP id
	v16KYd2I019642
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 6 Feb 2017 20:34:40 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
	by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	v16KYcTa028859; Mon, 6 Feb 2017 20:34:38 GMT
Received: from ca-qasparc20.us.oracle.com (/10.147.24.73)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 06 Feb 2017 12:34:38 -0800
From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;
To: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Cc: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Stephen Rothwell &lt;sfr@canb.auug.org.au&gt;,
	Paul Gortmaker &lt;paul.gortmaker@windriver.com&gt;,
	Thomas Tai &lt;thomas.tai@oracle.com&gt;, Chris Hyser &lt;chris.hyser@oracle.com&gt;,
	Khalid Aziz &lt;khalid.aziz@oracle.com&gt;,
	Atish Patra &lt;atish.patra@oracle.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, sparclinux@vger.kernel.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH] sparc64: Add 64K page size support
Date: Mon,  6 Feb 2017 12:33:26 -0800
Message-Id: &lt;1486413269-99237-1-git-send-email-nitin.m.gupta@oracle.com&gt;
X-Mailer: git-send-email 1.7.1
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145751">Nitin Gupta</a> - Feb. 6, 2017, 8:33 p.m.</div>
<pre class="content">
This patch depends on:
[v6] sparc64: Multi-page size support

- Testing

Tested on Sonoma by running stream benchmark instance which allocated
48G worth of 64K pages.

boot params: default_hugepagesz=64K hugepagesz=64K hugepages=1310720
<span class="signed-off-by">
Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
---
 arch/sparc/include/asm/page_64.h |  3 ++-
 arch/sparc/mm/hugetlbpage.c      | 54 ++++++++++++++++++++++++++++++++--------
 arch/sparc/mm/init_64.c          |  4 +++
 arch/sparc/mm/tsb.c              |  5 ++--
 4 files changed, 52 insertions(+), 14 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - Feb. 23, 2017, 4:32 p.m.</div>
<pre class="content">
<span class="from">From: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>
Date: Mon,  6 Feb 2017 12:33:26 -0800
<span class="quote">
&gt; This patch depends on:</span>
<span class="quote">&gt; [v6] sparc64: Multi-page size support</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - Testing</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Tested on Sonoma by running stream benchmark instance which allocated</span>
<span class="quote">&gt; 48G worth of 64K pages.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; boot params: default_hugepagesz=64K hugepagesz=64K hugepages=1310720</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;</span>

Also applied, thank you.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/page_64.h b/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">index d76f38d..f294dd4 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/page_64.h</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #define HPAGE_SHIFT		23
 #define REAL_HPAGE_SHIFT	22
 #define HPAGE_256MB_SHIFT	28
<span class="p_add">+#define HPAGE_64K_SHIFT		16</span>
 #define REAL_HPAGE_SIZE		(_AC(1,UL) &lt;&lt; REAL_HPAGE_SHIFT)
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_chunk">@@ -26,7 +27,7 @@</span> <span class="p_context"></span>
 #define HUGETLB_PAGE_ORDER	(HPAGE_SHIFT - PAGE_SHIFT)
 #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA
 #define REAL_HPAGE_PER_HPAGE	(_AC(1,UL) &lt;&lt; (HPAGE_SHIFT - REAL_HPAGE_SHIFT))
<span class="p_del">-#define HUGE_MAX_HSTATE		2</span>
<span class="p_add">+#define HUGE_MAX_HSTATE		3</span>
 #endif
 
 #ifndef __ASSEMBLY__
<span class="p_header">diff --git a/arch/sparc/mm/hugetlbpage.c b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">index 618a568..605bfce 100644</span>
<span class="p_header">--- a/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/sparc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -149,6 +149,9 @@</span> <span class="p_context"> static pte_t sun4v_hugepage_shift_to_tte(pte_t entry, unsigned int shift)</span>
 	case HPAGE_SHIFT:
 		pte_val(entry) |= _PAGE_PMD_HUGE;
 		break;
<span class="p_add">+	case HPAGE_64K_SHIFT:</span>
<span class="p_add">+		hugepage_size = _PAGE_SZ64K_4V;</span>
<span class="p_add">+		break;</span>
 	default:
 		WARN_ONCE(1, &quot;unsupported hugepage shift=%u\n&quot;, shift);
 	}
<span class="p_chunk">@@ -185,6 +188,9 @@</span> <span class="p_context"> static unsigned int sun4v_huge_tte_to_shift(pte_t entry)</span>
 	case _PAGE_SZ4MB_4V:
 		shift = REAL_HPAGE_SHIFT;
 		break;
<span class="p_add">+	case _PAGE_SZ64K_4V:</span>
<span class="p_add">+		shift = HPAGE_64K_SHIFT;</span>
<span class="p_add">+		break;</span>
 	default:
 		shift = PAGE_SHIFT;
 		break;
<span class="p_chunk">@@ -204,6 +210,9 @@</span> <span class="p_context"> static unsigned int sun4u_huge_tte_to_shift(pte_t entry)</span>
 	case _PAGE_SZ4MB_4U:
 		shift = REAL_HPAGE_SHIFT;
 		break;
<span class="p_add">+	case _PAGE_SZ64K_4U:</span>
<span class="p_add">+		shift = HPAGE_64K_SHIFT;</span>
<span class="p_add">+		break;</span>
 	default:
 		shift = PAGE_SHIFT;
 		break;
<span class="p_chunk">@@ -241,12 +250,21 @@</span> <span class="p_context"> pte_t *huge_pte_alloc(struct mm_struct *mm,</span>
 {
 	pgd_t *pgd;
 	pud_t *pud;
<span class="p_add">+	pmd_t *pmd;</span>
 	pte_t *pte = NULL;
 
 	pgd = pgd_offset(mm, addr);
 	pud = pud_alloc(mm, pgd, addr);
<span class="p_del">-	if (pud)</span>
<span class="p_del">-		pte = (pte_t *)pmd_alloc(mm, pud, addr);</span>
<span class="p_add">+	if (pud) {</span>
<span class="p_add">+		pmd = pmd_alloc(mm, pud, addr);</span>
<span class="p_add">+		if (!pmd)</span>
<span class="p_add">+			return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (sz == PMD_SHIFT)</span>
<span class="p_add">+			pte = (pte_t *)pmd;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			pte = pte_alloc_map(mm, pmd, addr);</span>
<span class="p_add">+	}</span>
 
 	return pte;
 }
<span class="p_chunk">@@ -255,42 +273,52 @@</span> <span class="p_context"> pte_t *huge_pte_offset(struct mm_struct *mm, unsigned long addr)</span>
 {
 	pgd_t *pgd;
 	pud_t *pud;
<span class="p_add">+	pmd_t *pmd;</span>
 	pte_t *pte = NULL;
 
 	pgd = pgd_offset(mm, addr);
 	if (!pgd_none(*pgd)) {
 		pud = pud_offset(pgd, addr);
<span class="p_del">-		if (!pud_none(*pud))</span>
<span class="p_del">-			pte = (pte_t *)pmd_offset(pud, addr);</span>
<span class="p_add">+		if (!pud_none(*pud)) {</span>
<span class="p_add">+			pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+			if (!pmd_none(*pmd)) {</span>
<span class="p_add">+				if (is_hugetlb_pmd(*pmd))</span>
<span class="p_add">+					pte = (pte_t *)pmd;</span>
<span class="p_add">+				else</span>
<span class="p_add">+					pte = pte_offset_map(pmd, addr);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
 	}
<span class="p_add">+</span>
 	return pte;
 }
 
 void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
 		     pte_t *ptep, pte_t entry)
 {
<span class="p_del">-	unsigned int i, nptes, hugepage_shift;</span>
<span class="p_add">+	unsigned int i, nptes, orig_shift, shift;</span>
 	unsigned long size;
 	pte_t orig;
 
 	size = huge_tte_to_size(entry);
<span class="p_del">-	nptes = size &gt;&gt; PMD_SHIFT;</span>
<span class="p_add">+	shift = size &gt;= HPAGE_SIZE ? PMD_SHIFT : PAGE_SHIFT;</span>
<span class="p_add">+	nptes = size &gt;&gt; shift;</span>
 
 	if (!pte_present(*ptep) &amp;&amp; pte_present(entry))
 		mm-&gt;context.hugetlb_pte_count += nptes;
 
 	addr &amp;= ~(size - 1);
 	orig = *ptep;
<span class="p_del">-	hugepage_shift = pte_none(orig) ? PAGE_SIZE : huge_tte_to_shift(orig);</span>
<span class="p_add">+	orig_shift = pte_none(orig) ? PAGE_SIZE : huge_tte_to_shift(orig);</span>
 
 	for (i = 0; i &lt; nptes; i++)
<span class="p_del">-		ptep[i] = __pte(pte_val(entry) + (i &lt;&lt; PMD_SHIFT));</span>
<span class="p_add">+		ptep[i] = __pte(pte_val(entry) + (i &lt;&lt; shift));</span>
 
<span class="p_del">-	maybe_tlb_batch_add(mm, addr, ptep, orig, 0, hugepage_shift);</span>
<span class="p_add">+	maybe_tlb_batch_add(mm, addr, ptep, orig, 0, orig_shift);</span>
 	/* An HPAGE_SIZE&#39;ed page is composed of two REAL_HPAGE_SIZE&#39;ed pages */
 	if (size == HPAGE_SIZE)
 		maybe_tlb_batch_add(mm, addr + REAL_HPAGE_SIZE, ptep, orig, 0,
<span class="p_del">-				    hugepage_shift);</span>
<span class="p_add">+				    orig_shift);</span>
 }
 
 pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
<span class="p_chunk">@@ -302,7 +330,11 @@</span> <span class="p_context"> pte_t huge_ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
 
 	entry = *ptep;
 	size = huge_tte_to_size(entry);
<span class="p_del">-	nptes = size &gt;&gt; PMD_SHIFT;</span>
<span class="p_add">+	if (size &gt;= HPAGE_SIZE)</span>
<span class="p_add">+		nptes = size &gt;&gt; PMD_SHIFT;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		nptes = size &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
 	hugepage_shift = pte_none(entry) ? PAGE_SIZE : huge_tte_to_shift(entry);
 
 	if (pte_present(entry))
<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 7ed3975..16c1e46 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -345,6 +345,10 @@</span> <span class="p_context"> static int __init setup_hugepagesz(char *string)</span>
 		hv_pgsz_mask = HV_PGSZ_MASK_4MB;
 		hv_pgsz_idx = HV_PGSZ_IDX_4MB;
 		break;
<span class="p_add">+	case HPAGE_64K_SHIFT:</span>
<span class="p_add">+		hv_pgsz_mask = HV_PGSZ_MASK_64K;</span>
<span class="p_add">+		hv_pgsz_idx = HV_PGSZ_IDX_64K;</span>
<span class="p_add">+		break;</span>
 	default:
 		hv_pgsz_mask = 0;
 	}
<span class="p_header">diff --git a/arch/sparc/mm/tsb.c b/arch/sparc/mm/tsb.c</span>
<span class="p_header">index 4ccca32..e39fc57 100644</span>
<span class="p_header">--- a/arch/sparc/mm/tsb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tsb.c</span>
<span class="p_chunk">@@ -147,12 +147,13 @@</span> <span class="p_context"> void flush_tsb_user_page(struct mm_struct *mm, unsigned long vaddr,</span>
 
 	spin_lock_irqsave(&amp;mm-&gt;context.lock, flags);
 
<span class="p_del">-	if (hugepage_shift == PAGE_SHIFT) {</span>
<span class="p_add">+	if (hugepage_shift &lt; HPAGE_SHIFT) {</span>
 		base = (unsigned long) mm-&gt;context.tsb_block[MM_TSB_BASE].tsb;
 		nentries = mm-&gt;context.tsb_block[MM_TSB_BASE].tsb_nentries;
 		if (tlb_type == cheetah_plus || tlb_type == hypervisor)
 			base = __pa(base);
<span class="p_del">-		__flush_tsb_one_entry(base, vaddr, PAGE_SHIFT, nentries);</span>
<span class="p_add">+		__flush_huge_tsb_one_entry(base, vaddr, PAGE_SHIFT, nentries,</span>
<span class="p_add">+					   hugepage_shift);</span>
 	}
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
 	else if (mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



