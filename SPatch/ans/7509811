
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/3] ARC: mm: HIGHMEM: kmap API implementation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/3] ARC: mm: HIGHMEM: kmap API implementation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=48431">Vineet Gupta</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 28, 2015, 11:23 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1446031393-2312-3-git-send-email-vgupta@synopsys.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7509811/mbox/"
   >mbox</a>
|
   <a href="/patch/7509811/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7509811/">/patch/7509811/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 085DCBEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:24:39 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id A0CB52083A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:24:37 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 21C6320833
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Oct 2015 11:24:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755874AbbJ1LYd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 28 Oct 2015 07:24:33 -0400
Received: from us01smtprelay-2.synopsys.com ([198.182.47.9]:33806 &quot;EHLO
	smtprelay.synopsys.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755466AbbJ1LYa (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 28 Oct 2015 07:24:30 -0400
Received: from us02secmta2.synopsys.com (us02secmta2.synopsys.com
	[10.12.235.98])
	by smtprelay.synopsys.com (Postfix) with ESMTP id 9C2B424E156F;
	Wed, 28 Oct 2015 04:24:30 -0700 (PDT)
Received: from us02secmta2.internal.synopsys.com
	(us02secmta2.internal.synopsys.com [127.0.0.1])
	by us02secmta2.internal.synopsys.com (Service) with ESMTP id
	99FEF55F1E; Wed, 28 Oct 2015 04:24:30 -0700 (PDT)
Received: from mailhost.synopsys.com (mailhost1.synopsys.com [10.12.238.239])
	by us02secmta2.internal.synopsys.com (Service) with ESMTP id
	4852355F13; Wed, 28 Oct 2015 04:24:30 -0700 (PDT)
Received: from mailhost.synopsys.com (localhost [127.0.0.1])
	by mailhost.synopsys.com (Postfix) with ESMTP id 2B4CCD51;
	Wed, 28 Oct 2015 04:24:30 -0700 (PDT)
Received: from us01wehtc1.internal.synopsys.com
	(us01wehtc1-vip.internal.synopsys.com [10.12.239.236])
	by mailhost.synopsys.com (Postfix) with ESMTP id 1134CD4F;
	Wed, 28 Oct 2015 04:24:30 -0700 (PDT)
Received: from IN01WEHTCB.internal.synopsys.com (10.144.199.106) by
	us01wehtc1.internal.synopsys.com (10.12.239.235) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 04:24:29 -0700
Received: from IN01WEHTCA.internal.synopsys.com (10.144.199.103) by
	IN01WEHTCB.internal.synopsys.com (10.144.199.105) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 16:54:26 +0530
Received: from vineetg-E7440.internal.synopsys.com (10.12.197.182) by
	IN01WEHTCA.internal.synopsys.com (10.144.199.243) with Microsoft SMTP
	Server (TLS) id 14.3.195.1; Wed, 28 Oct 2015 16:53:55 +0530
From: Vineet Gupta &lt;Vineet.Gupta1@synopsys.com&gt;
To: Max Filippov &lt;jcmvbkbc@gmail.com&gt;, Joonsoo Kim &lt;js1304@gmail.com&gt;,
	&quot;Mel Gorman&quot; &lt;mgorman@suse.de&gt;, Minchan Kim &lt;minchan@kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
CC: &lt;linux-arch@vger.kernel.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;linux-mm@kvack.org&gt;, &lt;linux-snps-arc@lists.infraded.org&gt;,
	Alexey Brodkin &lt;Alexey.Brodkin@synopsys.com&gt;,
	Vineet Gupta &lt;Vineet.Gupta1@synopsys.com&gt;
Subject: [PATCH 2/3] ARC: mm: HIGHMEM: kmap API implementation
Date: Wed, 28 Oct 2015 16:53:12 +0530
Message-ID: &lt;1446031393-2312-3-git-send-email-vgupta@synopsys.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1446031393-2312-1-git-send-email-vgupta@synopsys.com&gt;
References: &lt;1446031393-2312-1-git-send-email-vgupta@synopsys.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.12.197.182]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=48431">Vineet Gupta</a> - Oct. 28, 2015, 11:23 a.m.</div>
<pre class="content">
Implement kmap* API for ARC.

This enables
 - permanent kernel maps (pkmaps): :kmap() API
 - fixmap : kmap_atomic()

We use a very simple/uniform approach for both (unlike some of the other
arches). So fixmap doesn&#39;t use the customary compile time address stuff.
The important semantic is sleep&#39;ability (pkmap) vs. not (fixmap) which
the API guarantees.

Note that this patch only enables highmem for subsequent PAE40 support
as there is no real highmem for ARC in pure 32-bit paradigm as explained
below.

ARC has 2:2 address split of the 32-bit address space with lower half
being translated (virtual) while upper half unstranslated
(0x8000_0000 to 0xFFFF_FFFF). kernel itself is linked at base of
unstranslated space (i.e. 0x8000_0000 onwards), which is mapped to say
DDR 0x0 by external Bus Glue logic (outside the core). So kernel can
potentially access 1.75G worth of memory directly w/o need for highmem.
(the top 256M is taken by uncached peripheral space from 0xF000_0000 to
0xFFFF_FFFF)

In PAE40, hardware can address memory beyond 4G (0x1_0000_0000) while
the logical/virtual addresses remain 32-bits. Thus highmem is required
for kernel proper to be able to access these pages for it&#39;s own purposes
(user space is agnostic to this anyways).

For testing the kmap machinery though w/o PAE, we added hacks to ARC mm
init code to fake some of the memory to be in ZONE_HIGHMEM.
<span class="signed-off-by">
Signed-off-by: Alexey Brodkin &lt;abrodkin@synopsys.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Vineet Gupta &lt;vgupta@synopsys.com&gt;</span>
---
 arch/arc/Kconfig                  |   7 ++
 arch/arc/include/asm/highmem.h    |  61 +++++++++++++++++
 arch/arc/include/asm/kmap_types.h |  18 +++++
 arch/arc/include/asm/processor.h  |   7 +-
 arch/arc/mm/Makefile              |   1 +
 arch/arc/mm/highmem.c             | 138 ++++++++++++++++++++++++++++++++++++++
 arch/arc/mm/init.c                |  18 ++++-
 7 files changed, 248 insertions(+), 2 deletions(-)
 create mode 100644 arch/arc/include/asm/highmem.h
 create mode 100644 arch/arc/include/asm/kmap_types.h
 create mode 100644 arch/arc/mm/highmem.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arc/Kconfig b/arch/arc/Kconfig</span>
<span class="p_header">index cc938967282b..fd9632f4ddc8 100644</span>
<span class="p_header">--- a/arch/arc/Kconfig</span>
<span class="p_header">+++ b/arch/arc/Kconfig</span>
<span class="p_chunk">@@ -446,6 +446,13 @@</span> <span class="p_context"> config LINUX_LINK_BASE</span>
 	  Linux needs to be scooted a bit.
 	  If you don&#39;t know what the above means, leave this setting alone.
 
<span class="p_add">+config HIGHMEM</span>
<span class="p_add">+	bool &quot;High Memory Support&quot;</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  With ARC 2G:2G address split, only upper 2G is directly addressable by</span>
<span class="p_add">+	  kernel. Enable this to potentially allow access to rest of 2G and PAE</span>
<span class="p_add">+	  in future</span>
<span class="p_add">+</span>
 config ARC_CURR_IN_REG
 	bool &quot;Dedicate Register r25 for current_task pointer&quot;
 	default y
<span class="p_header">diff --git a/arch/arc/include/asm/highmem.h b/arch/arc/include/asm/highmem.h</span>
new file mode 100644
<span class="p_header">index 000000000000..b1585c96324a</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arc/include/asm/highmem.h</span>
<span class="p_chunk">@@ -0,0 +1,61 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015 Synopsys, Inc. (www.synopsys.com)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef _ASM_HIGHMEM_H</span>
<span class="p_add">+#define _ASM_HIGHMEM_H</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HIGHMEM</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;uapi/asm/page.h&gt;</span>
<span class="p_add">+#include &lt;asm/kmap_types.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/* start after vmalloc area */</span>
<span class="p_add">+#define FIXMAP_BASE		(PAGE_OFFSET - FIXMAP_SIZE - PKMAP_SIZE)</span>
<span class="p_add">+#define FIXMAP_SIZE		PGDIR_SIZE	/* only 1 PGD worth */</span>
<span class="p_add">+#define KM_TYPE_NR		((FIXMAP_SIZE &gt;&gt; PAGE_SHIFT)/NR_CPUS)</span>
<span class="p_add">+#define FIXMAP_ADDR(nr)		(FIXMAP_BASE + ((nr) &lt;&lt; PAGE_SHIFT))</span>
<span class="p_add">+</span>
<span class="p_add">+/* start after fixmap area */</span>
<span class="p_add">+#define PKMAP_BASE		(FIXMAP_BASE + FIXMAP_SIZE)</span>
<span class="p_add">+#define PKMAP_SIZE		PGDIR_SIZE</span>
<span class="p_add">+#define LAST_PKMAP		(PKMAP_SIZE &gt;&gt; PAGE_SHIFT)</span>
<span class="p_add">+#define LAST_PKMAP_MASK		(LAST_PKMAP - 1)</span>
<span class="p_add">+#define PKMAP_ADDR(nr)		(PKMAP_BASE + ((nr) &lt;&lt; PAGE_SHIFT))</span>
<span class="p_add">+#define PKMAP_NR(virt)		(((virt) - PKMAP_BASE) &gt;&gt; PAGE_SHIFT)</span>
<span class="p_add">+</span>
<span class="p_add">+#define kmap_prot		PAGE_KERNEL</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/cacheflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+extern void *kmap(struct page *page);</span>
<span class="p_add">+extern void *kmap_high(struct page *page);</span>
<span class="p_add">+extern void *kmap_atomic(struct page *page);</span>
<span class="p_add">+extern void __kunmap_atomic(void *kvaddr);</span>
<span class="p_add">+extern void kunmap_high(struct page *page);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void kmap_init(void);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void flush_cache_kmaps(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	flush_cache_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void kunmap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUG_ON(in_interrupt());</span>
<span class="p_add">+	if (!PageHighMem(page))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	kunmap_high(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/arch/arc/include/asm/kmap_types.h b/arch/arc/include/asm/kmap_types.h</span>
new file mode 100644
<span class="p_header">index 000000000000..f0d7f6acea4e</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arc/include/asm/kmap_types.h</span>
<span class="p_chunk">@@ -0,0 +1,18 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015 Synopsys, Inc. (www.synopsys.com)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef _ASM_KMAP_TYPES_H</span>
<span class="p_add">+#define _ASM_KMAP_TYPES_H</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * We primarily need to define KM_TYPE_NR here but that in turn</span>
<span class="p_add">+ * is a function of PGDIR_SIZE etc.</span>
<span class="p_add">+ * To avoid circular deps issue, put everything in asm/highmem.h</span>
<span class="p_add">+ */</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/arch/arc/include/asm/processor.h b/arch/arc/include/asm/processor.h</span>
<span class="p_header">index ee682d8e0213..44545354e9e8 100644</span>
<span class="p_header">--- a/arch/arc/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/arc/include/asm/processor.h</span>
<span class="p_chunk">@@ -114,7 +114,12 @@</span> <span class="p_context"> extern unsigned int get_wchan(struct task_struct *p);</span>
  * -----------------------------------------------------------------------------
  */
 #define VMALLOC_START	0x70000000
<span class="p_del">-#define VMALLOC_SIZE	(PAGE_OFFSET - VMALLOC_START)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * 1 PGDIR_SIZE each for fixmap/pkmap, 2 PGDIR_SIZE gutter</span>
<span class="p_add">+ * See asm/highmem.h for details</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define VMALLOC_SIZE	(PAGE_OFFSET - VMALLOC_START - PGDIR_SIZE * 4)</span>
 #define VMALLOC_END	(VMALLOC_START + VMALLOC_SIZE)
 
 #define USER_KERNEL_GUTTER    0x10000000
<span class="p_header">diff --git a/arch/arc/mm/Makefile b/arch/arc/mm/Makefile</span>
<span class="p_header">index 7beb941556c3..3703a4969349 100644</span>
<span class="p_header">--- a/arch/arc/mm/Makefile</span>
<span class="p_header">+++ b/arch/arc/mm/Makefile</span>
<span class="p_chunk">@@ -8,3 +8,4 @@</span> <span class="p_context"></span>
 
 obj-y	:= extable.o ioremap.o dma.o fault.o init.o
 obj-y	+= tlb.o tlbex.o cache.o mmap.o
<span class="p_add">+obj-$(CONFIG_HIGHMEM)	+= highmem.o</span>
<span class="p_header">diff --git a/arch/arc/mm/highmem.c b/arch/arc/mm/highmem.c</span>
new file mode 100644
<span class="p_header">index 000000000000..7f215626b8da</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/arc/mm/highmem.c</span>
<span class="p_chunk">@@ -0,0 +1,138 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright (C) 2015 Synopsys, Inc. (www.synopsys.com)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/bootmem.h&gt;</span>
<span class="p_add">+#include &lt;linux/export.h&gt;</span>
<span class="p_add">+#include &lt;linux/highmem.h&gt;</span>
<span class="p_add">+#include &lt;asm/processor.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgtable.h&gt;</span>
<span class="p_add">+#include &lt;asm/pgalloc.h&gt;</span>
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * HIGHMEM API:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * kmap() API provides sleep semantics hence refered to as &quot;permanent maps&quot;</span>
<span class="p_add">+ * It allows mapping LAST_PKMAP pages, using @last_pkmap_nr as the cursor</span>
<span class="p_add">+ * for book-keeping</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * kmap_atomic() can&#39;t sleep (calls pagefault_disable()), thus it provides</span>
<span class="p_add">+ * shortlived ala &quot;temporary mappings&quot; which historically were implemented as</span>
<span class="p_add">+ * fixmaps (compile time addr etc). Their book-keeping is done per cpu.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *	Both these facts combined (preemption disabled and per-cpu allocation)</span>
<span class="p_add">+ *	means the total number of concurrent fixmaps will be limited to max</span>
<span class="p_add">+ *	such allocations in a single control path. Thus KM_TYPE_NR (another</span>
<span class="p_add">+ *	historic relic) is a small&#39;ish number which caps max percpu fixmaps</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * ARC HIGHMEM Details</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * - the kernel vaddr space from 0x7z to 0x8z (currently used by vmalloc/module)</span>
<span class="p_add">+ *   is now shared between vmalloc and kmap (non overlapping though)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * - Both fixmap/pkmap use a dedicated page table each, hooked up to swapper PGD</span>
<span class="p_add">+ *   This means each only has 1 PGDIR_SIZE worth of kvaddr mappings, which means</span>
<span class="p_add">+ *   2M of kvaddr space for typical config (8K page and 11:8:13 traversal split)</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * - fixmap anyhow needs a limited number of mappings. So 2M kvaddr == 256 PTE</span>
<span class="p_add">+ *   slots across NR_CPUS would be more than sufficient (generic code defines</span>
<span class="p_add">+ *   KM_TYPE_NR as 20).</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * - pkmap being preemptible, in theory could do with more than 256 concurrent</span>
<span class="p_add">+ *   mappings. However, generic pkmap code: map_new_virtual(), doesn&#39;t traverse</span>
<span class="p_add">+ *   the PGD and only works with a single page table @pkmap_page_table, hence</span>
<span class="p_add">+ *   sets the limit</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+extern pte_t * pkmap_page_table;</span>
<span class="p_add">+static pte_t * fixmap_page_table;</span>
<span class="p_add">+</span>
<span class="p_add">+void *kmap(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUG_ON(in_interrupt());</span>
<span class="p_add">+	if (!PageHighMem(page))</span>
<span class="p_add">+		return page_address(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	return kmap_high(page);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void *kmap_atomic(struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int idx, cpu_idx;</span>
<span class="p_add">+	unsigned long vaddr;</span>
<span class="p_add">+</span>
<span class="p_add">+	pagefault_disable();</span>
<span class="p_add">+	if (!PageHighMem(page))</span>
<span class="p_add">+		return page_address(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	cpu_idx = kmap_atomic_idx_push();</span>
<span class="p_add">+	idx = cpu_idx + KM_TYPE_NR * smp_processor_id();</span>
<span class="p_add">+	vaddr = FIXMAP_ADDR(idx);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_pte_at(&amp;init_mm, vaddr, fixmap_page_table + idx,</span>
<span class="p_add">+		   mk_pte(page, kmap_prot));</span>
<span class="p_add">+</span>
<span class="p_add">+	return (void *)vaddr;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(kmap_atomic);</span>
<span class="p_add">+</span>
<span class="p_add">+void __kunmap_atomic(void *kv)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long kvaddr = (unsigned long)kv;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (kvaddr &gt;= FIXMAP_BASE &amp;&amp; kvaddr &lt; (FIXMAP_BASE + FIXMAP_SIZE)) {</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Because preemption is disabled, this vaddr can be associated</span>
<span class="p_add">+		 * with the current allocated index.</span>
<span class="p_add">+		 * But in case of multiple live kmap_atomic(), it still relies on</span>
<span class="p_add">+		 * callers to unmap in right order.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		int cpu_idx = kmap_atomic_idx();</span>
<span class="p_add">+		int idx = cpu_idx + KM_TYPE_NR * smp_processor_id();</span>
<span class="p_add">+</span>
<span class="p_add">+		WARN_ON(kvaddr != FIXMAP_ADDR(idx));</span>
<span class="p_add">+</span>
<span class="p_add">+		pte_clear(&amp;init_mm, kvaddr, fixmap_page_table + idx);</span>
<span class="p_add">+		local_flush_tlb_kernel_range(kvaddr, kvaddr + PAGE_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+		kmap_atomic_idx_pop();</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pagefault_enable();</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(__kunmap_atomic);</span>
<span class="p_add">+</span>
<span class="p_add">+noinline pte_t *alloc_kmap_pgtable(unsigned long kvaddr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd_k;</span>
<span class="p_add">+	pud_t *pud_k;</span>
<span class="p_add">+	pmd_t *pmd_k;</span>
<span class="p_add">+	pte_t *pte_k;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd_k = pgd_offset_k(kvaddr);</span>
<span class="p_add">+	pud_k = pud_offset(pgd_k, kvaddr);</span>
<span class="p_add">+	pmd_k = pmd_offset(pud_k, kvaddr);</span>
<span class="p_add">+</span>
<span class="p_add">+	pte_k = (pte_t *)alloc_bootmem_low_pages(PAGE_SIZE);</span>
<span class="p_add">+	pmd_populate_kernel(&amp;init_mm, pmd_k, pte_k);</span>
<span class="p_add">+	return pte_k;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void kmap_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Due to recursive include hell, we can&#39;t do this in processor.h */</span>
<span class="p_add">+	BUILD_BUG_ON(PAGE_OFFSET &lt; (VMALLOC_END + FIXMAP_SIZE + PKMAP_SIZE));</span>
<span class="p_add">+</span>
<span class="p_add">+	BUILD_BUG_ON(KM_TYPE_NR &gt; PTRS_PER_PTE);</span>
<span class="p_add">+	pkmap_page_table = alloc_kmap_pgtable(PKMAP_BASE);</span>
<span class="p_add">+</span>
<span class="p_add">+	BUILD_BUG_ON(LAST_PKMAP &gt; PTRS_PER_PTE);</span>
<span class="p_add">+	fixmap_page_table = alloc_kmap_pgtable(FIXMAP_BASE);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/arch/arc/mm/init.c b/arch/arc/mm/init.c</span>
<span class="p_header">index 5256765d5db0..a8fe1a5c2896 100644</span>
<span class="p_header">--- a/arch/arc/mm/init.c</span>
<span class="p_header">+++ b/arch/arc/mm/init.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #endif
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_add">+#include &lt;linux/highmem.h&gt;</span>
 #include &lt;asm/page.h&gt;
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/sections.h&gt;
<span class="p_chunk">@@ -94,7 +95,7 @@</span> <span class="p_context"> void __init setup_arch_memory(void)</span>
 	/* first page of system - kernel .vector starts here */
 	min_low_pfn = ARCH_PFN_OFFSET;
 
<span class="p_del">-	/* Last usable page of low mem (no HIGHMEM yet for ARC port) */</span>
<span class="p_add">+	/* Last usable page of low mem */</span>
 	max_low_pfn = max_pfn = PFN_DOWN(end_mem);
 
 	max_mapnr = max_pfn - min_low_pfn;
<span class="p_chunk">@@ -114,6 +115,9 @@</span> <span class="p_context"> void __init setup_arch_memory(void)</span>
 	/*-------------- node setup --------------------------------*/
 	memset(zones_size, 0, sizeof(zones_size));
 	zones_size[ZONE_NORMAL] = max_mapnr;
<span class="p_add">+#ifdef CONFIG_HIGHMEM</span>
<span class="p_add">+	zones_size[ZONE_HIGHMEM] = max_pfn - max_low_pfn;</span>
<span class="p_add">+#endif</span>
 
 	/*
 	 * We can&#39;t use the helper free_area_init(zones[]) because it uses
<span class="p_chunk">@@ -127,6 +131,10 @@</span> <span class="p_context"> void __init setup_arch_memory(void)</span>
 			    NULL);		/* NO holes */
 
 	high_memory = (void *)end_mem;
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_HIGHMEM</span>
<span class="p_add">+	kmap_init();</span>
<span class="p_add">+#endif</span>
 }
 
 /*
<span class="p_chunk">@@ -137,6 +145,14 @@</span> <span class="p_context"> void __init setup_arch_memory(void)</span>
  */
 void __init mem_init(void)
 {
<span class="p_add">+#ifdef CONFIG_HIGHMEM</span>
<span class="p_add">+	unsigned long tmp;</span>
<span class="p_add">+</span>
<span class="p_add">+	reset_all_zones_managed_pages();</span>
<span class="p_add">+	for (tmp = max_low_pfn; tmp &lt; max_pfn; tmp++)</span>
<span class="p_add">+		free_highmem_page(pfn_to_page(tmp));</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	free_all_bootmem();
 	mem_init_print_info(NULL);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



