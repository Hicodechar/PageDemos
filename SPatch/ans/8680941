
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,1/2] mm/hugetlbfs: Attempt PUD_SIZE mapping alignment if PMD sharing enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,1/2] mm/hugetlbfs: Attempt PUD_SIZE mapping alignment if PMD sharing enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 29, 2016, 1:12 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1459213970-17957-2-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8680941/mbox/"
   >mbox</a>
|
   <a href="/patch/8680941/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8680941/">/patch/8680941/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id AAFE09F30C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 01:13:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 1794120272
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 01:13:56 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0F7542026F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 01:13:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755713AbcC2BNu (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 28 Mar 2016 21:13:50 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:36259 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755581AbcC2BNZ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 28 Mar 2016 21:13:25 -0400
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id u2T1D0lg014552
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 29 Mar 2016 01:13:00 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by aserv0021.oracle.com (8.13.8/8.13.8) with ESMTP id u2T1Cx7v030477
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 29 Mar 2016 01:13:00 GMT
Received: from abhmp0011.oracle.com (abhmp0011.oracle.com [141.146.116.17])
	by userv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	u2T1CwQZ002279; Tue, 29 Mar 2016 01:12:58 GMT
Received: from monkey.oracle.com (/50.53.81.253)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 28 Mar 2016 18:12:57 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org, x86@kernel.org
Cc: Hugh Dickins &lt;hughd@google.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Steve Capper &lt;steve.capper@linaro.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 1/2] mm/hugetlbfs: Attempt PUD_SIZE mapping alignment if
	PMD sharing enabled
Date: Mon, 28 Mar 2016 18:12:49 -0700
Message-Id: &lt;1459213970-17957-2-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1459213970-17957-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1459213970-17957-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0021.oracle.com [141.146.126.233]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 29, 2016, 1:12 a.m.</div>
<pre class="content">
When creating a hugetlb mapping, attempt PUD_SIZE alignment if the
following conditions are met:
- Address passed to mmap or shmat is NULL
- The mapping is flaged as shared
- The mapping is at least PUD_SIZE in length
If a PUD_SIZE aligned mapping can not be created, then fall back to a
huge page size mapping.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 fs/hugetlbfs/inode.c | 29 +++++++++++++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - March 29, 2016, 3:50 a.m.</div>
<pre class="content">
<span class="quote">&gt; </span>
<span class="quote">&gt; When creating a hugetlb mapping, attempt PUD_SIZE alignment if the</span>
<span class="quote">&gt; following conditions are met:</span>
<span class="quote">&gt; - Address passed to mmap or shmat is NULL</span>
<span class="quote">&gt; - The mapping is flaged as shared</span>
<span class="quote">&gt; - The mapping is at least PUD_SIZE in length</span>
<span class="quote">&gt; If a PUD_SIZE aligned mapping can not be created, then fall back to a</span>
<span class="quote">&gt; huge page size mapping.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/hugetlbfs/inode.c | 29 +++++++++++++++++++++++++++--</span>
<span class="quote">&gt;  1 file changed, 27 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; index 540ddc9..22b2e38 100644</span>
<span class="quote">&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; @@ -175,6 +175,17 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	struct vm_area_struct *vma;</span>
<span class="quote">&gt;  	struct hstate *h = hstate_file(file);</span>
<span class="quote">&gt;  	struct vm_unmapped_area_info info;</span>
<span class="quote">&gt; +	bool pud_size_align = false;</span>
<span class="quote">&gt; +	unsigned long ret_addr;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * If PMD sharing is enabled, align to PUD_SIZE to facilitate</span>
<span class="quote">&gt; +	 * sharing.  Only attempt alignment if no address was passed in,</span>
<span class="quote">&gt; +	 * flags indicate sharing and size is big enough.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp;</span>
<span class="quote">&gt; +	    !addr &amp;&amp; flags &amp; MAP_SHARED &amp;&amp; len &gt;= PUD_SIZE)</span>
<span class="quote">&gt; +		pud_size_align = true;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	if (len &amp; ~huge_page_mask(h))</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt; @@ -199,9 +210,23 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	info.length = len;</span>
<span class="quote">&gt;  	info.low_limit = TASK_UNMAPPED_BASE;</span>
<span class="quote">&gt;  	info.high_limit = TASK_SIZE;</span>
<span class="quote">&gt; -	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt; +	if (pud_size_align)</span>
<span class="quote">&gt; +		info.align_mask = PAGE_MASK &amp; (PUD_SIZE - 1);</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt;  	info.align_offset = 0;</span>
<span class="quote">&gt; -	return vm_unmapped_area(&amp;info);</span>
<span class="quote">&gt; +	ret_addr = vm_unmapped_area(&amp;info);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * If failed with PUD_SIZE alignment, try again with huge page</span>
<span class="quote">&gt; +	 * size alignment.</span>
<span class="quote">&gt; +	 */</span>

Can we avoid going another round as long as it is a file with
the PUD page size?

Hillf
<span class="quote">&gt; +	if ((ret_addr &amp; ~PAGE_MASK) &amp;&amp; pud_size_align) {</span>
<span class="quote">&gt; +		info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt; +		ret_addr = vm_unmapped_area(&amp;info);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return ret_addr;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.4.3</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 29, 2016, 4:29 p.m.</div>
<pre class="content">
On 03/28/2016 08:50 PM, Hillf Danton wrote:
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; When creating a hugetlb mapping, attempt PUD_SIZE alignment if the</span>
<span class="quote">&gt;&gt; following conditions are met:</span>
<span class="quote">&gt;&gt; - Address passed to mmap or shmat is NULL</span>
<span class="quote">&gt;&gt; - The mapping is flaged as shared</span>
<span class="quote">&gt;&gt; - The mapping is at least PUD_SIZE in length</span>
<span class="quote">&gt;&gt; If a PUD_SIZE aligned mapping can not be created, then fall back to a</span>
<span class="quote">&gt;&gt; huge page size mapping.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  fs/hugetlbfs/inode.c | 29 +++++++++++++++++++++++++++--</span>
<span class="quote">&gt;&gt;  1 file changed, 27 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; index 540ddc9..22b2e38 100644</span>
<span class="quote">&gt;&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; @@ -175,6 +175,17 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;  	struct vm_area_struct *vma;</span>
<span class="quote">&gt;&gt;  	struct hstate *h = hstate_file(file);</span>
<span class="quote">&gt;&gt;  	struct vm_unmapped_area_info info;</span>
<span class="quote">&gt;&gt; +	bool pud_size_align = false;</span>
<span class="quote">&gt;&gt; +	unsigned long ret_addr;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * If PMD sharing is enabled, align to PUD_SIZE to facilitate</span>
<span class="quote">&gt;&gt; +	 * sharing.  Only attempt alignment if no address was passed in,</span>
<span class="quote">&gt;&gt; +	 * flags indicate sharing and size is big enough.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp;</span>
<span class="quote">&gt;&gt; +	    !addr &amp;&amp; flags &amp; MAP_SHARED &amp;&amp; len &gt;= PUD_SIZE)</span>
<span class="quote">&gt;&gt; +		pud_size_align = true;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  	if (len &amp; ~huge_page_mask(h))</span>
<span class="quote">&gt;&gt;  		return -EINVAL;</span>
<span class="quote">&gt;&gt; @@ -199,9 +210,23 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;  	info.length = len;</span>
<span class="quote">&gt;&gt;  	info.low_limit = TASK_UNMAPPED_BASE;</span>
<span class="quote">&gt;&gt;  	info.high_limit = TASK_SIZE;</span>
<span class="quote">&gt;&gt; -	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt;&gt; +	if (pud_size_align)</span>
<span class="quote">&gt;&gt; +		info.align_mask = PAGE_MASK &amp; (PUD_SIZE - 1);</span>
<span class="quote">&gt;&gt; +	else</span>
<span class="quote">&gt;&gt; +		info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="quote">&gt;&gt;  	info.align_offset = 0;</span>
<span class="quote">&gt;&gt; -	return vm_unmapped_area(&amp;info);</span>
<span class="quote">&gt;&gt; +	ret_addr = vm_unmapped_area(&amp;info);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * If failed with PUD_SIZE alignment, try again with huge page</span>
<span class="quote">&gt;&gt; +	 * size alignment.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can we avoid going another round as long as it is a file with</span>
<span class="quote">&gt; the PUD page size?</span>

Yes, that brings up a good point.

Since we only do PMD sharing with PMD_SIZE huge pages, that should be
part of the check as to whether we try PUD_SIZE alignment.  The initial
check should be expanded as follows:

if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp; !addr &amp;&amp;
    flags &amp; MAP_SHARED &amp;&amp; huge_page_size(h) == PMD_SIZE &amp;&amp; len &gt;= PUD_SIZE)
	pud_size_align = true;

In that case, pud_size_align remains false and we do not retry.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - March 31, 2016, 2:18 a.m.</div>
<pre class="content">
On Mon, Mar 28, 2016 at 06:12:49PM -0700, Mike Kravetz wrote:
<span class="quote">&gt; When creating a hugetlb mapping, attempt PUD_SIZE alignment if the</span>
<span class="quote">&gt; following conditions are met:</span>
<span class="quote">&gt; - Address passed to mmap or shmat is NULL</span>
<span class="quote">&gt; - The mapping is flaged as shared</span>
<span class="quote">&gt; - The mapping is at least PUD_SIZE in length</span>
<span class="quote">&gt; If a PUD_SIZE aligned mapping can not be created, then fall back to a</span>
<span class="quote">&gt; huge page size mapping.</span>

It would be kinder if the patch description includes why this change.
Simply &quot;to facilitate pmd sharing&quot; is helpful for someone who read
&quot;git log&quot;.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/hugetlbfs/inode.c | 29 +++++++++++++++++++++++++++--</span>
<span class="quote">&gt;  1 file changed, 27 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; index 540ddc9..22b2e38 100644</span>
<span class="quote">&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt; @@ -175,6 +175,17 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	struct vm_area_struct *vma;</span>
<span class="quote">&gt;  	struct hstate *h = hstate_file(file);</span>
<span class="quote">&gt;  	struct vm_unmapped_area_info info;</span>
<span class="quote">&gt; +	bool pud_size_align = false;</span>
<span class="quote">&gt; +	unsigned long ret_addr;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * If PMD sharing is enabled, align to PUD_SIZE to facilitate</span>
<span class="quote">&gt; +	 * sharing.  Only attempt alignment if no address was passed in,</span>
<span class="quote">&gt; +	 * flags indicate sharing and size is big enough.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp;</span>
<span class="quote">&gt; +	    !addr &amp;&amp; flags &amp; MAP_SHARED &amp;&amp; len &gt;= PUD_SIZE)</span>
<span class="quote">&gt; +		pud_size_align = true;</span>

This code will have duplicates in the next patch, so how about checking
this in a separate check routine?

Thanks,
Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - March 31, 2016, 4:45 p.m.</div>
<pre class="content">
On 03/30/2016 07:18 PM, Naoya Horiguchi wrote:
<span class="quote">&gt; On Mon, Mar 28, 2016 at 06:12:49PM -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt; When creating a hugetlb mapping, attempt PUD_SIZE alignment if the</span>
<span class="quote">&gt;&gt; following conditions are met:</span>
<span class="quote">&gt;&gt; - Address passed to mmap or shmat is NULL</span>
<span class="quote">&gt;&gt; - The mapping is flaged as shared</span>
<span class="quote">&gt;&gt; - The mapping is at least PUD_SIZE in length</span>
<span class="quote">&gt;&gt; If a PUD_SIZE aligned mapping can not be created, then fall back to a</span>
<span class="quote">&gt;&gt; huge page size mapping.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It would be kinder if the patch description includes why this change.</span>
<span class="quote">&gt; Simply &quot;to facilitate pmd sharing&quot; is helpful for someone who read</span>
<span class="quote">&gt; &quot;git log&quot;.</span>

Ok, will do.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  fs/hugetlbfs/inode.c | 29 +++++++++++++++++++++++++++--</span>
<span class="quote">&gt;&gt;  1 file changed, 27 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; index 540ddc9..22b2e38 100644</span>
<span class="quote">&gt;&gt; --- a/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; +++ b/fs/hugetlbfs/inode.c</span>
<span class="quote">&gt;&gt; @@ -175,6 +175,17 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;  	struct vm_area_struct *vma;</span>
<span class="quote">&gt;&gt;  	struct hstate *h = hstate_file(file);</span>
<span class="quote">&gt;&gt;  	struct vm_unmapped_area_info info;</span>
<span class="quote">&gt;&gt; +	bool pud_size_align = false;</span>
<span class="quote">&gt;&gt; +	unsigned long ret_addr;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * If PMD sharing is enabled, align to PUD_SIZE to facilitate</span>
<span class="quote">&gt;&gt; +	 * sharing.  Only attempt alignment if no address was passed in,</span>
<span class="quote">&gt;&gt; +	 * flags indicate sharing and size is big enough.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt; +	if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp;</span>
<span class="quote">&gt;&gt; +	    !addr &amp;&amp; flags &amp; MAP_SHARED &amp;&amp; len &gt;= PUD_SIZE)</span>
<span class="quote">&gt;&gt; +		pud_size_align = true;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This code will have duplicates in the next patch, so how about checking</span>
<span class="quote">&gt; this in a separate check routine?</span>

Good suggestion,  thanks
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 540ddc9..22b2e38 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -175,6 +175,17 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	struct vm_area_struct *vma;
 	struct hstate *h = hstate_file(file);
 	struct vm_unmapped_area_info info;
<span class="p_add">+	bool pud_size_align = false;</span>
<span class="p_add">+	unsigned long ret_addr;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If PMD sharing is enabled, align to PUD_SIZE to facilitate</span>
<span class="p_add">+	 * sharing.  Only attempt alignment if no address was passed in,</span>
<span class="p_add">+	 * flags indicate sharing and size is big enough.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (IS_ENABLED(CONFIG_ARCH_WANT_HUGE_PMD_SHARE) &amp;&amp;</span>
<span class="p_add">+	    !addr &amp;&amp; flags &amp; MAP_SHARED &amp;&amp; len &gt;= PUD_SIZE)</span>
<span class="p_add">+		pud_size_align = true;</span>
 
 	if (len &amp; ~huge_page_mask(h))
 		return -EINVAL;
<span class="p_chunk">@@ -199,9 +210,23 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	info.length = len;
 	info.low_limit = TASK_UNMAPPED_BASE;
 	info.high_limit = TASK_SIZE;
<span class="p_del">-	info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="p_add">+	if (pud_size_align)</span>
<span class="p_add">+		info.align_mask = PAGE_MASK &amp; (PUD_SIZE - 1);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
 	info.align_offset = 0;
<span class="p_del">-	return vm_unmapped_area(&amp;info);</span>
<span class="p_add">+	ret_addr = vm_unmapped_area(&amp;info);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If failed with PUD_SIZE alignment, try again with huge page</span>
<span class="p_add">+	 * size alignment.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((ret_addr &amp; ~PAGE_MASK) &amp;&amp; pud_size_align) {</span>
<span class="p_add">+		info.align_mask = PAGE_MASK &amp; ~huge_page_mask(h);</span>
<span class="p_add">+		ret_addr = vm_unmapped_area(&amp;info);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret_addr;</span>
 }
 #endif
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



