
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>x86: static_cpu_has_safe: discard dynamic check after init - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    x86: static_cpu_has_safe: discard dynamic check after init</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 20, 2016, 4:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160120160451.GG23350@pd.tnic&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8072771/mbox/"
   >mbox</a>
|
   <a href="/patch/8072771/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8072771/">/patch/8072771/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 195009F818
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 16:05:30 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 12C692037C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 16:05:28 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id AD51B204C9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 20 Jan 2016 16:05:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934684AbcATQFX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 20 Jan 2016 11:05:23 -0500
Received: from mx2.suse.de ([195.135.220.15]:35442 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933889AbcATQFS (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 20 Jan 2016 11:05:18 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id F4104AC67;
	Wed, 20 Jan 2016 16:05:15 +0000 (UTC)
Received: by pd.tnic (Postfix, from userid 1000)
	id 29DBC160C80; Wed, 20 Jan 2016 17:04:51 +0100 (CET)
Date: Wed, 20 Jan 2016 17:04:51 +0100
From: Borislav Petkov &lt;bp@suse.de&gt;
To: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;,
	the arch/x86 maintainers &lt;x86@kernel.org&gt;,
	Linux Kernel Mailing List &lt;linux-kernel@vger.kernel.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Denys Vlasenko &lt;dvlasenk@redhat.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: Re: [PATCH] x86: static_cpu_has_safe: discard dynamic check after
	init
Message-ID: &lt;20160120160451.GG23350@pd.tnic&gt;
References: &lt;20160117103337.GC8549@pd.tnic&gt;
	&lt;CAMzpN2i+LELbLaBbxDS0MF1Y0sn_Jm3ztCWATzMyrp4rnhWRQA@mail.gmail.com&gt;
	&lt;20160118181457.GG12651@pd.tnic&gt; &lt;20160118185107.GI12651@pd.tnic&gt;
	&lt;20160119011026.GA12911@pd.tnic&gt;
	&lt;DD7599E0-BB19-4BEC-B598-B0B29ACF5A36@zytor.com&gt;
	&lt;20160119092213.GA15071@pd.tnic&gt; &lt;569F06B9.4060903@zytor.com&gt;
	&lt;20160120150109.GF23350@pd.tnic&gt; &lt;569FA333.7020401@zytor.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: &lt;569FA333.7020401@zytor.com&gt;
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Jan. 20, 2016, 4:04 p.m.</div>
<pre class="content">
On Wed, Jan 20, 2016 at 07:09:39AM -0800, H. Peter Anvin wrote:
<span class="quote">&gt; But then you&#39;re using testl and get long immediates.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; (And the parentheses around boot_cpu_data-&gt;x86_capability are redundant.)</span>

Right.

Ok, below is what builds here. So no SOBs etc.

All this include hell wankery is so that we can use boot_cpu_data in
cpufeature.h. And that&#39;s not simple because boot/mkcpustr.c includes it
too so if I carve out struct cpuinfo_x86 to a separate asm/cpuinfo.h
header, it complains because it doesn&#39;t see it.

Thus this _ASM_BOOT_MKCPUSTR_ yucky marker to stop arch/x86/boot from
including it.

I&#39;m very open to better ideas. :-)

Other than that, we do:

+                        &quot;6: testb %[bitnum],%[cap_word]\n&quot;
+                        &quot;   jnz %l[t_yes]\n&quot;
+                        &quot;   jmp %l[t_no]\n&quot;
+                        &quot;.previous\n&quot;
+                        : : &quot;i&quot; (bit), &quot;i&quot; (X86_FEATURE_ALWAYS),
+                            [bitnum] &quot;i&quot; (1 &lt;&lt; (bit &amp; 7)),
+                            [cap_word] &quot;m&quot; (((const char *)boot_cpu_data.x86_capability)[bit &gt;&gt; 3])

and that has the TESTB.

Thoughts?

---
 arch/x86/boot/mkcpustr.c          |  5 +++
 arch/x86/include/asm/cpufeature.h | 34 +++++++++++++-----
 arch/x86/include/asm/cpuinfo.h    | 73 +++++++++++++++++++++++++++++++++++++++
 arch/x86/include/asm/processor.h  | 65 ----------------------------------
 arch/x86/kernel/cpu/common.c      |  6 ----
 arch/x86/kernel/vmlinux.lds.S     |  9 +++--
 6 files changed, 110 insertions(+), 82 deletions(-)
 create mode 100644 arch/x86/include/asm/cpuinfo.h
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=42">H. Peter Anvin</a> - Jan. 20, 2016, 4:16 p.m.</div>
<pre class="content">
On 01/20/16 08:04, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Jan 20, 2016 at 07:09:39AM -0800, H. Peter Anvin wrote:</span>
<span class="quote">&gt;&gt; But then you&#39;re using testl and get long immediates.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; (And the parentheses around boot_cpu_data-&gt;x86_capability are redundant.)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ok, below is what builds here. So no SOBs etc.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; All this include hell wankery is so that we can use boot_cpu_data in</span>
<span class="quote">&gt; cpufeature.h. And that&#39;s not simple because boot/mkcpustr.c includes it</span>
<span class="quote">&gt; too so if I carve out struct cpuinfo_x86 to a separate asm/cpuinfo.h</span>
<span class="quote">&gt; header, it complains because it doesn&#39;t see it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thus this _ASM_BOOT_MKCPUSTR_ yucky marker to stop arch/x86/boot from</span>
<span class="quote">&gt; including it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;m very open to better ideas. :-)</span>
<span class="quote">&gt; </span>

I think the right answer is to split the macros that define specific CPU
features into a separate file.  It would also make it assembly-safe
which would be useful in some other places.

However, I do also want to observe that we already do have this specific
marker... it is called __KERNEL__.

	-hpa
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c</span>
<span class="p_header">index 637097e66a62..c32113a0e3d4 100644</span>
<span class="p_header">--- a/arch/x86/boot/mkcpustr.c</span>
<span class="p_header">+++ b/arch/x86/boot/mkcpustr.c</span>
<span class="p_chunk">@@ -17,6 +17,11 @@</span> <span class="p_context"></span>
 
 #include &quot;../include/asm/required-features.h&quot;
 #include &quot;../include/asm/disabled-features.h&quot;
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Stop cpufeature.h from including cpuinfo.h in kernel proper.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define _ASM_BOOT_MKCPUSTR_</span>
 #include &quot;../include/asm/cpufeature.h&quot;
 #include &quot;../kernel/cpu/capflags.c&quot;
 
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeature.h b/arch/x86/include/asm/cpufeature.h</span>
<span class="p_header">index 7ad8c9464297..a16cee2376c4 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeature.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeature.h</span>
<span class="p_chunk">@@ -15,6 +15,10 @@</span> <span class="p_context"></span>
 #define NCAPINTS	16	/* N 32-bit words worth of info */
 #define NBUGINTS	1	/* N 32-bit bug flags */
 
<span class="p_add">+#ifndef _ASM_BOOT_MKCPUSTR_</span>
<span class="p_add">+#include &lt;asm/cpuinfo.h&gt;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 /*
  * Note: If the comment begins with a quoted string, that string is used
  * in /proc/cpuinfo instead of the macro name.  If the string is &quot;&quot;,
<span class="p_chunk">@@ -412,7 +416,6 @@</span> <span class="p_context"> extern const char * const x86_bug_flags[NBUGINTS*32];</span>
 
 #if __GNUC__ &gt;= 4 &amp;&amp; defined(CONFIG_X86_FAST_FEATURE_TESTS)
 extern void warn_pre_alternatives(void);
<span class="p_del">-extern bool __static_cpu_has_safe(u16 bit);</span>
 
 /*
  * Static testing of CPU features.  Used the same as boot_cpu_has().
<span class="p_chunk">@@ -505,7 +508,7 @@</span> <span class="p_context"> static __always_inline __pure bool __static_cpu_has(u16 bit)</span>
 static __always_inline __pure bool _static_cpu_has_safe(u16 bit)
 {
 #ifdef CC_HAVE_ASM_GOTO
<span class="p_del">-		asm_volatile_goto(&quot;1: jmp %l[t_dynamic]\n&quot;</span>
<span class="p_add">+		asm_volatile_goto(&quot;1: jmp 6f\n&quot;</span>
 			 &quot;2:\n&quot;
 			 &quot;.skip -(((5f-4f) - (2b-1b)) &gt; 0) * &quot;
 			         &quot;((5f-4f) - (2b-1b)),0x90\n&quot;
<span class="p_chunk">@@ -530,17 +533,23 @@</span> <span class="p_context"> static __always_inline __pure bool _static_cpu_has_safe(u16 bit)</span>
 			 &quot; .byte 0\n&quot;			/* repl len */
 			 &quot; .byte 0\n&quot;			/* pad len */
 			 &quot;.previous\n&quot;
<span class="p_del">-			 : : &quot;i&quot; (bit), &quot;i&quot; (X86_FEATURE_ALWAYS)</span>
<span class="p_del">-			 : : t_dynamic, t_no);</span>
<span class="p_add">+			 &quot;.section .altinstr_aux,\&quot;ax\&quot;\n&quot;</span>
<span class="p_add">+			 &quot;6: testb %[bitnum],%[cap_word]\n&quot;</span>
<span class="p_add">+			 &quot;   jnz %l[t_yes]\n&quot;</span>
<span class="p_add">+			 &quot;   jmp %l[t_no]\n&quot;</span>
<span class="p_add">+			 &quot;.previous\n&quot;</span>
<span class="p_add">+			 : : &quot;i&quot; (bit), &quot;i&quot; (X86_FEATURE_ALWAYS),</span>
<span class="p_add">+			     [bitnum] &quot;i&quot; (1 &lt;&lt; (bit &amp; 7)),</span>
<span class="p_add">+			     [cap_word] &quot;m&quot; (((const char *)boot_cpu_data.x86_capability)[bit &gt;&gt; 3])</span>
<span class="p_add">+			 : : t_yes, t_no);</span>
<span class="p_add">+	t_yes:</span>
 		return true;
 	t_no:
 		return false;
<span class="p_del">-	t_dynamic:</span>
<span class="p_del">-		return __static_cpu_has_safe(bit);</span>
 #else
 		u8 flag;
 		/* Open-coded due to __stringify() in ALTERNATIVE() */
<span class="p_del">-		asm volatile(&quot;1: movb $2,%0\n&quot;</span>
<span class="p_add">+		asm volatile(&quot;1: jmp 7f\n&quot;</span>
 			     &quot;2:\n&quot;
 			     &quot;.section .altinstructions,\&quot;a\&quot;\n&quot;
 			     &quot; .long 1b - .\n&quot;		/* src offset */
<span class="p_chunk">@@ -572,9 +581,16 @@</span> <span class="p_context"> static __always_inline __pure bool _static_cpu_has_safe(u16 bit)</span>
 			     &quot;5: movb $1,%0\n&quot;
 			     &quot;6:\n&quot;
 			     &quot;.previous\n&quot;
<span class="p_add">+			     &quot;.section .altinstr_aux,\&quot;ax\&quot;\n&quot;</span>
<span class="p_add">+			     &quot;7: testb %[bitnum],%[cap_word]\n&quot;</span>
<span class="p_add">+			     &quot;   setnz %0\n&quot;</span>
<span class="p_add">+			     &quot;   jmp 2b\n&quot;</span>
<span class="p_add">+			     &quot;.previous\n&quot;</span>
 			     : &quot;=qm&quot; (flag)
<span class="p_del">-			     : &quot;i&quot; (bit), &quot;i&quot; (X86_FEATURE_ALWAYS));</span>
<span class="p_del">-		return (flag == 2 ? __static_cpu_has_safe(bit) : flag);</span>
<span class="p_add">+			     : &quot;i&quot; (bit), &quot;i&quot; (X86_FEATURE_ALWAYS),</span>
<span class="p_add">+			       [bitnum] &quot;i&quot; (1 &lt;&lt; (bit &amp; 7)),</span>
<span class="p_add">+			       [cap_word] &quot;m&quot; (((const char *)boot_cpu_data.x86_capability)[bit &gt;&gt; 3]));</span>
<span class="p_add">+		return (flag != 0);</span>
 #endif /* CC_HAVE_ASM_GOTO */
 }
 
<span class="p_header">diff --git a/arch/x86/include/asm/cpuinfo.h b/arch/x86/include/asm/cpuinfo.h</span>
new file mode 100644
<span class="p_header">index 000000000000..f906b538fdb4</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpuinfo.h</span>
<span class="p_chunk">@@ -0,0 +1,73 @@</span> <span class="p_context"></span>
<span class="p_add">+#ifndef _ASM_X86_CPUINFO_H</span>
<span class="p_add">+#define _ASM_X86_CPUINFO_H</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __ASSEMBLY__</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/types.h&gt;</span>
<span class="p_add">+/*</span>
<span class="p_add">+ *  CPU type and hardware bug flags. Kept separately for each CPU.</span>
<span class="p_add">+ *  Members of this structure are referenced in head.S, so think twice</span>
<span class="p_add">+ *  before touching them. [mj]</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+struct cpuinfo_x86 {</span>
<span class="p_add">+	__u8			x86;		/* CPU family */</span>
<span class="p_add">+	__u8			x86_vendor;	/* CPU vendor */</span>
<span class="p_add">+	__u8			x86_model;</span>
<span class="p_add">+	__u8			x86_mask;</span>
<span class="p_add">+#ifdef CONFIG_X86_32</span>
<span class="p_add">+	char			wp_works_ok;	/* It doesn&#39;t on 386&#39;s */</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Problems on some 486Dx4&#39;s and old 386&#39;s: */</span>
<span class="p_add">+	char			rfu;</span>
<span class="p_add">+	char			pad0;</span>
<span class="p_add">+	char			pad1;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	/* Number of 4K pages in DTLB/ITLB combined(in pages): */</span>
<span class="p_add">+	int			x86_tlbsize;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	__u8			x86_virt_bits;</span>
<span class="p_add">+	__u8			x86_phys_bits;</span>
<span class="p_add">+	/* CPUID returned core id bits: */</span>
<span class="p_add">+	__u8			x86_coreid_bits;</span>
<span class="p_add">+	/* Max extended CPUID function supported: */</span>
<span class="p_add">+	__u32			extended_cpuid_level;</span>
<span class="p_add">+	/* Maximum supported CPUID level, -1=no CPUID: */</span>
<span class="p_add">+	int			cpuid_level;</span>
<span class="p_add">+	__u32			x86_capability[NCAPINTS + NBUGINTS];</span>
<span class="p_add">+	char			x86_vendor_id[16];</span>
<span class="p_add">+	char			x86_model_id[64];</span>
<span class="p_add">+	/* in KB - valid for CPUS which support this call: */</span>
<span class="p_add">+	int			x86_cache_size;</span>
<span class="p_add">+	int			x86_cache_alignment;	/* In bytes */</span>
<span class="p_add">+	/* Cache QoS architectural values: */</span>
<span class="p_add">+	int			x86_cache_max_rmid;	/* max index */</span>
<span class="p_add">+	int			x86_cache_occ_scale;	/* scale to bytes */</span>
<span class="p_add">+	int			x86_power;</span>
<span class="p_add">+	unsigned long		loops_per_jiffy;</span>
<span class="p_add">+	/* cpuid returned max cores value: */</span>
<span class="p_add">+	u16			 x86_max_cores;</span>
<span class="p_add">+	u16			apicid;</span>
<span class="p_add">+	u16			initial_apicid;</span>
<span class="p_add">+	u16			x86_clflush_size;</span>
<span class="p_add">+	/* number of cores as seen by the OS: */</span>
<span class="p_add">+	u16			booted_cores;</span>
<span class="p_add">+	/* Physical processor id: */</span>
<span class="p_add">+	u16			phys_proc_id;</span>
<span class="p_add">+	/* Core id: */</span>
<span class="p_add">+	u16			cpu_core_id;</span>
<span class="p_add">+	/* Compute unit id */</span>
<span class="p_add">+	u8			compute_unit_id;</span>
<span class="p_add">+	/* Index into per_cpu list: */</span>
<span class="p_add">+	u16			cpu_index;</span>
<span class="p_add">+	u32			microcode;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * capabilities of CPUs</span>
<span class="p_add">+ */</span>
<span class="p_add">+extern struct cpuinfo_x86	boot_cpu_data;</span>
<span class="p_add">+extern struct cpuinfo_x86	new_cpu_data;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#endif /* _ASM_X86_CPUINFO_H */</span>
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 2d5a50cb61a2..240d8f8d8c1b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -79,65 +79,6 @@</span> <span class="p_context"> extern u16 __read_mostly tlb_lld_2m[NR_INFO];</span>
 extern u16 __read_mostly tlb_lld_4m[NR_INFO];
 extern u16 __read_mostly tlb_lld_1g[NR_INFO];
 
<span class="p_del">-/*</span>
<span class="p_del">- *  CPU type and hardware bug flags. Kept separately for each CPU.</span>
<span class="p_del">- *  Members of this structure are referenced in head.S, so think twice</span>
<span class="p_del">- *  before touching them. [mj]</span>
<span class="p_del">- */</span>
<span class="p_del">-</span>
<span class="p_del">-struct cpuinfo_x86 {</span>
<span class="p_del">-	__u8			x86;		/* CPU family */</span>
<span class="p_del">-	__u8			x86_vendor;	/* CPU vendor */</span>
<span class="p_del">-	__u8			x86_model;</span>
<span class="p_del">-	__u8			x86_mask;</span>
<span class="p_del">-#ifdef CONFIG_X86_32</span>
<span class="p_del">-	char			wp_works_ok;	/* It doesn&#39;t on 386&#39;s */</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Problems on some 486Dx4&#39;s and old 386&#39;s: */</span>
<span class="p_del">-	char			rfu;</span>
<span class="p_del">-	char			pad0;</span>
<span class="p_del">-	char			pad1;</span>
<span class="p_del">-#else</span>
<span class="p_del">-	/* Number of 4K pages in DTLB/ITLB combined(in pages): */</span>
<span class="p_del">-	int			x86_tlbsize;</span>
<span class="p_del">-#endif</span>
<span class="p_del">-	__u8			x86_virt_bits;</span>
<span class="p_del">-	__u8			x86_phys_bits;</span>
<span class="p_del">-	/* CPUID returned core id bits: */</span>
<span class="p_del">-	__u8			x86_coreid_bits;</span>
<span class="p_del">-	/* Max extended CPUID function supported: */</span>
<span class="p_del">-	__u32			extended_cpuid_level;</span>
<span class="p_del">-	/* Maximum supported CPUID level, -1=no CPUID: */</span>
<span class="p_del">-	int			cpuid_level;</span>
<span class="p_del">-	__u32			x86_capability[NCAPINTS + NBUGINTS];</span>
<span class="p_del">-	char			x86_vendor_id[16];</span>
<span class="p_del">-	char			x86_model_id[64];</span>
<span class="p_del">-	/* in KB - valid for CPUS which support this call: */</span>
<span class="p_del">-	int			x86_cache_size;</span>
<span class="p_del">-	int			x86_cache_alignment;	/* In bytes */</span>
<span class="p_del">-	/* Cache QoS architectural values: */</span>
<span class="p_del">-	int			x86_cache_max_rmid;	/* max index */</span>
<span class="p_del">-	int			x86_cache_occ_scale;	/* scale to bytes */</span>
<span class="p_del">-	int			x86_power;</span>
<span class="p_del">-	unsigned long		loops_per_jiffy;</span>
<span class="p_del">-	/* cpuid returned max cores value: */</span>
<span class="p_del">-	u16			 x86_max_cores;</span>
<span class="p_del">-	u16			apicid;</span>
<span class="p_del">-	u16			initial_apicid;</span>
<span class="p_del">-	u16			x86_clflush_size;</span>
<span class="p_del">-	/* number of cores as seen by the OS: */</span>
<span class="p_del">-	u16			booted_cores;</span>
<span class="p_del">-	/* Physical processor id: */</span>
<span class="p_del">-	u16			phys_proc_id;</span>
<span class="p_del">-	/* Core id: */</span>
<span class="p_del">-	u16			cpu_core_id;</span>
<span class="p_del">-	/* Compute unit id */</span>
<span class="p_del">-	u8			compute_unit_id;</span>
<span class="p_del">-	/* Index into per_cpu list: */</span>
<span class="p_del">-	u16			cpu_index;</span>
<span class="p_del">-	u32			microcode;</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 #define X86_VENDOR_INTEL	0
 #define X86_VENDOR_CYRIX	1
 #define X86_VENDOR_AMD		2
<span class="p_chunk">@@ -149,12 +90,6 @@</span> <span class="p_context"> struct cpuinfo_x86 {</span>
 
 #define X86_VENDOR_UNKNOWN	0xff
 
<span class="p_del">-/*</span>
<span class="p_del">- * capabilities of CPUs</span>
<span class="p_del">- */</span>
<span class="p_del">-extern struct cpuinfo_x86	boot_cpu_data;</span>
<span class="p_del">-extern struct cpuinfo_x86	new_cpu_data;</span>
<span class="p_del">-</span>
 extern struct tss_struct	doublefault_tss;
 extern __u32			cpu_caps_cleared[NCAPINTS];
 extern __u32			cpu_caps_set[NCAPINTS];
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index 37830de8f60a..897c65bd3faa 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -1483,12 +1483,6 @@</span> <span class="p_context"> void warn_pre_alternatives(void)</span>
 EXPORT_SYMBOL_GPL(warn_pre_alternatives);
 #endif
 
<span class="p_del">-inline bool __static_cpu_has_safe(u16 bit)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return boot_cpu_has(bit);</span>
<span class="p_del">-}</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(__static_cpu_has_safe);</span>
<span class="p_del">-</span>
 static void bsp_resume(void)
 {
 	if (this_cpu-&gt;c_bsp_resume)
<span class="p_header">diff --git a/arch/x86/kernel/vmlinux.lds.S b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_header">index 35868bf529b9..486dc0e60599 100644</span>
<span class="p_header">--- a/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_header">+++ b/arch/x86/kernel/vmlinux.lds.S</span>
<span class="p_chunk">@@ -244,9 +244,14 @@</span> <span class="p_context"> SECTIONS</span>
 	 */
 	.altinstr_replacement : AT(ADDR(.altinstr_replacement) - LOAD_OFFSET) {
 		*(.altinstr_replacement)
<span class="p_add">+</span>
 		/*
<span class="p_del">-		 * Auxiliary section for misc instruction patching tasks. See</span>
<span class="p_del">-		 * static_cpu_has(), for an example.</span>
<span class="p_add">+		 * Section for code used exclusively before alternatives are</span>
<span class="p_add">+		 * run. All references to such code must be patched out by</span>
<span class="p_add">+		 * alternatives, normally by using a patch with</span>
<span class="p_add">+		 * X86_FEATURE_ALWAYS.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * See static_cpu_has() for an example.</span>
 		 */
 		*(.altinstr_aux)
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



