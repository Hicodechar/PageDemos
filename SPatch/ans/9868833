
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,10/10] x86/mm: Try to preserve old TLB entries using PCID - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,10/10] x86/mm: Try to preserve old TLB entries using PCID</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 28, 2017, 1:49 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170728134931.eeqjp5fffqjpqmln@hirez.programming.kicks-ass.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9868833/mbox/"
   >mbox</a>
|
   <a href="/patch/9868833/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9868833/">/patch/9868833/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1010C6035E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 28 Jul 2017 13:49:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BBAE02884F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 28 Jul 2017 13:49:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AF66D288B8; Fri, 28 Jul 2017 13:49:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 180C4288F7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 28 Jul 2017 13:49:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751960AbdG1Ntz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 28 Jul 2017 09:49:55 -0400
Received: from merlin.infradead.org ([205.233.59.134]:41186 &quot;EHLO
	merlin.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751690AbdG1Ntx (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 28 Jul 2017 09:49:53 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=merlin.20170209;
	h=In-Reply-To:Content-Type:MIME-Version:
	References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=PaWIBBk6jLI2Ego7DSZzgTRXPgjzO7a6YuxY3dOuprU=;
	b=ux93hCrge+LMWcurGX1DhgKEA
	w2v/P+geZV7UFyiaJZdnAPb1tGRSvPD51+Sjq5cZjEIfIcs2u1hTNDna5HLYtZFmKtt0GFkPQ54g9
	/0Tc/rhnge/xbjtzFkHt9eBoZl5xm/IE56o4PmFzbg9VIL1Uma8gm5Lpc+udV8w6GxIgdHnMPvvJ5
	p0oNRkp3kCnzwm/2Wj24zbYYaigaIqLwYN/Ru+2dq0IzhB/64+dCQ0+71YMIa3KgfFj/RmLNDq31Q
	olUEiPR/0Q1/cehp3t0hXFgcyqD9VBK9Xb06+4jPI+Sx0gZDdcPVhR1Hye4nlC3QxGkuVXpsq7INQ
	N22OrW1gw==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100]
	helo=hirez.programming.kicks-ass.net)
	by merlin.infradead.org with esmtpsa (Exim 4.87 #1 (Red Hat Linux))
	id 1db5e3-0007on-6L; Fri, 28 Jul 2017 13:49:35 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 1000)
	id CBDC420298561; Fri, 28 Jul 2017 15:49:31 +0200 (CEST)
Date: Fri, 28 Jul 2017 15:49:31 +0200
From: Peter Zijlstra &lt;peterz@infradead.org&gt;
To: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: X86 ML &lt;x86@kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;
Subject: Re: [PATCH v4 10/10] x86/mm: Try to preserve old TLB entries using
	PCID
Message-ID: &lt;20170728134931.eeqjp5fffqjpqmln@hirez.programming.kicks-ass.net&gt;
References: &lt;cover.1498751203.git.luto@kernel.org&gt;
	&lt;cf600d28712daa8e2222c08a10f6c914edab54f2.1498751203.git.luto@kernel.org&gt;
	&lt;20170705122506.GG4941@worktop&gt;
	&lt;CALCETrXYQHQm2qQ_4dLx8K2rFfapFUb-eqFdG8bk2377eFnNGg@mail.gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;CALCETrXYQHQm2qQ_4dLx8K2rFfapFUb-eqFdG8bk2377eFnNGg@mail.gmail.com&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - July 28, 2017, 1:49 p.m.</div>
<pre class="content">
On Wed, Jul 05, 2017 at 09:10:00AM -0700, Andy Lutomirski wrote:
<span class="quote">&gt; On Wed, Jul 5, 2017 at 5:25 AM, Peter Zijlstra &lt;peterz@infradead.org&gt; wrote:</span>
<span class="quote">&gt; &gt; On Thu, Jun 29, 2017 at 08:53:22AM -0700, Andy Lutomirski wrote:</span>
<span class="quote">&gt; &gt;&gt; +static void choose_new_asid(struct mm_struct *next, u64 next_tlb_gen,</span>
<span class="quote">&gt; &gt;&gt; +                         u16 *new_asid, bool *need_flush)</span>
<span class="quote">&gt; &gt;&gt; +{</span>
<span class="quote">&gt; &gt;&gt; +     u16 asid;</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +     if (!static_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="quote">&gt; &gt;&gt; +             *new_asid = 0;</span>
<span class="quote">&gt; &gt;&gt; +             *need_flush = true;</span>
<span class="quote">&gt; &gt;&gt; +             return;</span>
<span class="quote">&gt; &gt;&gt; +     }</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +     for (asid = 0; asid &lt; TLB_NR_DYN_ASIDS; asid++) {</span>
<span class="quote">&gt; &gt;&gt; +             if (this_cpu_read(cpu_tlbstate.ctxs[asid].ctx_id) !=</span>
<span class="quote">&gt; &gt;&gt; +                 next-&gt;context.ctx_id)</span>
<span class="quote">&gt; &gt;&gt; +                     continue;</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +             *new_asid = asid;</span>
<span class="quote">&gt; &gt;&gt; +             *need_flush = (this_cpu_read(cpu_tlbstate.ctxs[asid].tlb_gen) &lt;</span>
<span class="quote">&gt; &gt;&gt; +                            next_tlb_gen);</span>
<span class="quote">&gt; &gt;&gt; +             return;</span>
<span class="quote">&gt; &gt;&gt; +     }</span>
<span class="quote">&gt; &gt;&gt; +</span>
<span class="quote">&gt; &gt;&gt; +     /*</span>
<span class="quote">&gt; &gt;&gt; +      * We don&#39;t currently own an ASID slot on this CPU.</span>
<span class="quote">&gt; &gt;&gt; +      * Allocate a slot.</span>
<span class="quote">&gt; &gt;&gt; +      */</span>
<span class="quote">&gt; &gt;&gt; +     *new_asid = this_cpu_add_return(cpu_tlbstate.next_asid, 1) - 1;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; So this basically RR the ASID slots. Have you tried slightly more</span>
<span class="quote">&gt; &gt; complex replacement policies like CLOCK ?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; No, mainly because I&#39;m lazy and because CLOCK requires scavenging a</span>
<span class="quote">&gt; bit.  (Which we can certainly do, but it will further complicate the</span>
<span class="quote">&gt; code.)  It could be worth playing with better replacement algorithms</span>
<span class="quote">&gt; as a followup, though.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve also considered a slight elaboration of RR in which we make sure</span>
<span class="quote">&gt; not to reuse the most recent ASID slot, which would guarantee that, if</span>
<span class="quote">&gt; we switch from task A to B and back to A, we don&#39;t flush on the way</span>
<span class="quote">&gt; back to A.  (Currently, if B is not in the cache, there&#39;s a 1/6 chance</span>
<span class="quote">&gt; we&#39;ll flush on the way back.)</span>

How&#39;s this?

---
 arch/x86/include/asm/mmu.h         |  2 +-
 arch/x86/include/asm/mmu_context.h |  2 +-
 arch/x86/include/asm/tlbflush.h    |  2 +-
 arch/x86/mm/init.c                 |  2 +-
 arch/x86/mm/tlb.c                  | 47 ++++++++++++++++++++++++++------------
 5 files changed, 36 insertions(+), 19 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mmu.h b/arch/x86/include/asm/mmu.h</span>
<span class="p_header">index bb8c597c2248..9f26ea900df0 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu.h</span>
<span class="p_chunk">@@ -55,7 +55,7 @@</span> <span class="p_context"> typedef struct {</span>
 
 #define INIT_MM_CONTEXT(mm)						\
 	.context = {							\
<span class="p_del">-		.ctx_id = 1,						\</span>
<span class="p_add">+		.ctx_id = 2,						\</span>
 	}
 
 void leave_mm(int cpu);
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index d25d9f4abb15..f7866733875d 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -137,7 +137,7 @@</span> <span class="p_context"> static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
 static inline int init_new_context(struct task_struct *tsk,
 				   struct mm_struct *mm)
 {
<span class="p_del">-	mm-&gt;context.ctx_id = atomic64_inc_return(&amp;last_mm_ctx_id);</span>
<span class="p_add">+	mm-&gt;context.ctx_id = atomic64_add_return(2, &amp;last_mm_ctx_id);</span>
 	atomic64_set(&amp;mm-&gt;context.tlb_gen, 0);
 
 	#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index d23e61dc0640..43a4af25d78a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -102,7 +102,7 @@</span> <span class="p_context"> struct tlb_state {</span>
 	 */
 	struct mm_struct *loaded_mm;
 	u16 loaded_mm_asid;
<span class="p_del">-	u16 next_asid;</span>
<span class="p_add">+	u16 last_asid;</span>
 
 	/*
 	 * Access to this CR4 shadow and to H/W CR4 is protected by
<span class="p_header">diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c</span>
<span class="p_header">index 65ae17d45c4a..570979714d49 100644</span>
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -812,7 +812,7 @@</span> <span class="p_context"> void __init zone_sizes_init(void)</span>
 
 DEFINE_PER_CPU_SHARED_ALIGNED(struct tlb_state, cpu_tlbstate) = {
 	.loaded_mm = &amp;init_mm,
<span class="p_del">-	.next_asid = 1,</span>
<span class="p_add">+	.last_asid = 0,</span>
 	.cr4 = ~0UL,	/* fail hard if we screw up cr4 shadow initialization */
 };
 EXPORT_SYMBOL_GPL(cpu_tlbstate);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index ce104b962a17..aacb87f03428 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -28,12 +28,28 @@</span> <span class="p_context"></span>
  *	Implement flush IPI by CALL_FUNCTION_VECTOR, Alex Shi
  */
 
<span class="p_del">-atomic64_t last_mm_ctx_id = ATOMIC64_INIT(1);</span>
<span class="p_add">+atomic64_t last_mm_ctx_id = ATOMIC64_INIT(2);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u64 asid_ctx_id(int asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return this_cpu_read(cpu_tlbstate.ctxs[asid].ctx_id) &amp; ~1ULL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void asid_hit(int asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	this_cpu_or(cpu_tlbstate.ctxs[asid].ctx_id, 1);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline bool asid_age(int asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return this_cpu_xchg(cpu_tlbstate.ctxs[asid].ctx_id, asid_ctx_id(asid)) &amp; 1ULL;</span>
<span class="p_add">+}</span>
 
 static void choose_new_asid(struct mm_struct *next, u64 next_tlb_gen,
 			    u16 *new_asid, bool *need_flush)
 {
 	u16 asid;
<span class="p_add">+	int i;</span>
 
 	if (!static_cpu_has(X86_FEATURE_PCID)) {
 		*new_asid = 0;
<span class="p_chunk">@@ -42,10 +58,11 @@</span> <span class="p_context"> static void choose_new_asid(struct mm_struct *next, u64 next_tlb_gen,</span>
 	}
 
 	for (asid = 0; asid &lt; TLB_NR_DYN_ASIDS; asid++) {
<span class="p_del">-		if (this_cpu_read(cpu_tlbstate.ctxs[asid].ctx_id) !=</span>
<span class="p_del">-		    next-&gt;context.ctx_id)</span>
<span class="p_add">+		if (asid_ctx_id(asid) != next-&gt;context.ctx_id)</span>
 			continue;
 
<span class="p_add">+		asid_hit(asid);</span>
<span class="p_add">+</span>
 		*new_asid = asid;
 		*need_flush = (this_cpu_read(cpu_tlbstate.ctxs[asid].tlb_gen) &lt;
 			       next_tlb_gen);
<span class="p_chunk">@@ -53,14 +70,17 @@</span> <span class="p_context"> static void choose_new_asid(struct mm_struct *next, u64 next_tlb_gen,</span>
 	}
 
 	/*
<span class="p_del">-	 * We don&#39;t currently own an ASID slot on this CPU.</span>
<span class="p_del">-	 * Allocate a slot.</span>
<span class="p_add">+	 * CLOCK - each entry has a single &#39;used&#39; bit. Cycle through the array</span>
<span class="p_add">+	 * clearing this bit until we find an entry that doesn&#39;t have it set.</span>
 	 */
<span class="p_del">-	*new_asid = this_cpu_add_return(cpu_tlbstate.next_asid, 1) - 1;</span>
<span class="p_del">-	if (*new_asid &gt;= TLB_NR_DYN_ASIDS) {</span>
<span class="p_del">-		*new_asid = 0;</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.next_asid, 1);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	i = this_cpu_read(cpu_tlbstate.last_asid);</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		if (--i &lt; 0)</span>
<span class="p_add">+			i = TLB_NR_DYN_ASIDS - 1;</span>
<span class="p_add">+	} while (!asid_age(i));</span>
<span class="p_add">+	this_cpu_write(cpu_tlbstate.last_asid, i);</span>
<span class="p_add">+</span>
<span class="p_add">+	*new_asid = i;</span>
 	*need_flush = true;
 }
 
<span class="p_chunk">@@ -125,8 +145,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	VM_BUG_ON(__read_cr3() != (__sme_pa(real_prev-&gt;pgd) | prev_asid));
 
 	if (real_prev == next) {
<span class="p_del">-		VM_BUG_ON(this_cpu_read(cpu_tlbstate.ctxs[prev_asid].ctx_id) !=</span>
<span class="p_del">-			  next-&gt;context.ctx_id);</span>
<span class="p_add">+		VM_BUG_ON(asid_ctx_id(prev_asid) != next-&gt;context.ctx_id);</span>
 
 		if (cpumask_test_cpu(cpu, mm_cpumask(next))) {
 			/*
<span class="p_chunk">@@ -239,9 +258,7 @@</span> <span class="p_context"> static void flush_tlb_func_common(const struct flush_tlb_info *f,</span>
 
 	/* This code cannot presently handle being reentered. */
 	VM_WARN_ON(!irqs_disabled());
<span class="p_del">-</span>
<span class="p_del">-	VM_WARN_ON(this_cpu_read(cpu_tlbstate.ctxs[loaded_mm_asid].ctx_id) !=</span>
<span class="p_del">-		   loaded_mm-&gt;context.ctx_id);</span>
<span class="p_add">+	VM_WARN_ON(asid_ctx_id(loaded_mm_asid) != loaded_mm-&gt;context.ctx_id);</span>
 
 	if (!cpumask_test_cpu(smp_processor_id(), mm_cpumask(loaded_mm))) {
 		/*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



