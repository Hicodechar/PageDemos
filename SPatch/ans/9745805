
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v2,05/10] mm: Add a range lock parameter to userfaultfd_remove() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v2,05/10] mm: Add a range lock parameter to userfaultfd_remove()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 24, 2017, 11:19 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1495624801-8063-6-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9745805/mbox/"
   >mbox</a>
|
   <a href="/patch/9745805/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9745805/">/patch/9745805/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9F790601C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 11:21:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 913E428957
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 11:21:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 85F8B2895B; Wed, 24 May 2017 11:21:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 85BDA28958
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 24 May 2017 11:20:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S939886AbdEXLUw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 24 May 2017 07:20:52 -0400
Received: from mx0b-001b2d01.pphosted.com ([148.163.158.5]:55070 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-FAIL)
	by vger.kernel.org with ESMTP id S1758708AbdEXLUX (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 24 May 2017 07:20:23 -0400
Received: from pps.filterd (m0098420.ppops.net [127.0.0.1])
	by mx0b-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v4OB9kXX007328
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 24 May 2017 07:20:22 -0400
Received: from e06smtp10.uk.ibm.com (e06smtp10.uk.ibm.com [195.75.94.106])
	by mx0b-001b2d01.pphosted.com with ESMTP id 2an78mx8dy-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 24 May 2017 07:20:22 -0400
Received: from localhost
	by e06smtp10.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Wed, 24 May 2017 12:20:20 +0100
Received: from b06cxnps4075.portsmouth.uk.ibm.com (9.149.109.197)
	by e06smtp10.uk.ibm.com (192.168.101.140) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Wed, 24 May 2017 12:20:15 +0100
Received: from d06av26.portsmouth.uk.ibm.com (d06av26.portsmouth.uk.ibm.com
	[9.149.105.62])
	by b06cxnps4075.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v4OBKEqM21495926; Wed, 24 May 2017 11:20:14 GMT
Received: from d06av26.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 40BBEAE05A;
	Wed, 24 May 2017 12:18:12 +0100 (BST)
Received: from d06av26.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 36CFCAE051;
	Wed, 24 May 2017 12:18:11 +0100 (BST)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.185.18])
	by d06av26.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Wed, 24 May 2017 12:18:11 +0100 (BST)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: linux-mm@kvack.org
Cc: Davidlohr Bueso &lt;dave@stgolabs.net&gt;, akpm@linux-foundation.org,
	Jan Kara &lt;jack@suse.cz&gt;, &quot;Kirill A . Shutemov&quot; &lt;kirill@shutemov.name&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;,
	Andi Kleen &lt;andi@firstfloor.org&gt;, haren@linux.vnet.ibm.com,
	aneesh.kumar@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	paulmck@linux.vnet.ibm.com, linux-kernel@vger.kernel.org
Subject: [RFC v2 05/10] mm: Add a range lock parameter to
	userfaultfd_remove()
Date: Wed, 24 May 2017 13:19:56 +0200
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1495624801-8063-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1495624801-8063-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 17052411-0040-0000-0000-000003961D6B
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17052411-0041-0000-0000-00002581199B
Message-Id: &lt;1495624801-8063-6-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-05-24_08:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=3
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1703280000
	definitions=main-1705240054
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - May 24, 2017, 11:19 a.m.</div>
<pre class="content">
As __mcopy_atomic_hugetlb() called by userfaultfd_remove() may unlock
the mmap_sem, it has to know about the range of lock when dealing with
range lock.

This patch adds a new range_lock pointer parameter to
userfaultfd_remove() and handles it in the callees.

On the otherside, userfaultfd_remove()&#39;s callers are touched to deal
with the range parameter as well.
<span class="signed-off-by">
Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 fs/userfaultfd.c              |  8 ++++++--
 include/linux/userfaultfd_k.h | 28 ++++++++++++++++++++++++----
 mm/madvise.c                  | 42 +++++++++++++++++++++++++++++++++---------
 mm/userfaultfd.c              | 18 +++++++++++++++---
 4 files changed, 78 insertions(+), 18 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/userfaultfd.c b/fs/userfaultfd.c</span>
<span class="p_header">index b3daffc589a2..7d56c21ef65d 100644</span>
<span class="p_header">--- a/fs/userfaultfd.c</span>
<span class="p_header">+++ b/fs/userfaultfd.c</span>
<span class="p_chunk">@@ -703,8 +703,12 @@</span> <span class="p_context"> void mremap_userfaultfd_complete(struct vm_userfaultfd_ctx *vm_ctx,</span>
 	userfaultfd_event_wait_completion(ctx, &amp;ewq);
 }
 
<span class="p_del">-bool userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_del">-			unsigned long start, unsigned long end)</span>
<span class="p_add">+bool _userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_add">+			 unsigned long start, unsigned long end</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+			 , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	)</span>
 {
 	struct mm_struct *mm = vma-&gt;vm_mm;
 	struct userfaultfd_ctx *ctx;
<span class="p_header">diff --git a/include/linux/userfaultfd_k.h b/include/linux/userfaultfd_k.h</span>
<span class="p_header">index 48a3483dccb1..07c3dbddc021 100644</span>
<span class="p_header">--- a/include/linux/userfaultfd_k.h</span>
<span class="p_header">+++ b/include/linux/userfaultfd_k.h</span>
<span class="p_chunk">@@ -61,9 +61,18 @@</span> <span class="p_context"> extern void mremap_userfaultfd_complete(struct vm_userfaultfd_ctx *,</span>
 					unsigned long from, unsigned long to,
 					unsigned long len);
 
<span class="p_del">-extern bool userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_del">-			       unsigned long start,</span>
<span class="p_del">-			       unsigned long end);</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+extern bool _userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_add">+				unsigned long start,</span>
<span class="p_add">+				unsigned long end,</span>
<span class="p_add">+				struct range_lock *range);</span>
<span class="p_add">+#define userfaultfd_remove _userfaultfd_remove</span>
<span class="p_add">+#else</span>
<span class="p_add">+extern bool _userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_add">+				unsigned long start,</span>
<span class="p_add">+				unsigned long end);</span>
<span class="p_add">+#define userfaultfd_remove(v, s, e, r) _userfaultfd_remove(v, s, e)</span>
<span class="p_add">+#endif /* CONFIG_MEM_RANGE_LOCK */</span>
 
 extern int userfaultfd_unmap_prep(struct vm_area_struct *vma,
 				  unsigned long start, unsigned long end,
<span class="p_chunk">@@ -117,12 +126,23 @@</span> <span class="p_context"> static inline void mremap_userfaultfd_complete(struct vm_userfaultfd_ctx *ctx,</span>
 {
 }
 
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
 static inline bool userfaultfd_remove(struct vm_area_struct *vma,
 				      unsigned long start,
<span class="p_del">-				      unsigned long end)</span>
<span class="p_add">+				      unsigned long end,</span>
<span class="p_add">+				      struct range_lock *range)</span>
 {
 	return true;
 }
<span class="p_add">+#else</span>
<span class="p_add">+static inline bool _userfaultfd_remove(struct vm_area_struct *vma,</span>
<span class="p_add">+				       unsigned long start,</span>
<span class="p_add">+				       unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return true;</span>
<span class="p_add">+}</span>
<span class="p_add">+#define userfaultfd_remove(v, s, e, r) _userfaultfd_remove(v, s, e)</span>
<span class="p_add">+#endif</span>
 
 static inline int userfaultfd_unmap_prep(struct vm_area_struct *vma,
 					 unsigned long start, unsigned long end,
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 25b78ee4fc2c..437f35778f07 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -506,13 +506,17 @@</span> <span class="p_context"> static long madvise_free(struct vm_area_struct *vma,</span>
  */
 static long madvise_dontneed(struct vm_area_struct *vma,
 			     struct vm_area_struct **prev,
<span class="p_del">-			     unsigned long start, unsigned long end)</span>
<span class="p_add">+			     unsigned long start, unsigned long end</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+			     , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	)</span>
 {
 	*prev = vma;
 	if (!can_madv_dontneed_vma(vma))
 		return -EINVAL;
 
<span class="p_del">-	if (!userfaultfd_remove(vma, start, end)) {</span>
<span class="p_add">+	if (!userfaultfd_remove(vma, start, end, range)) {</span>
 		*prev = NULL; /* mmap_sem has been dropped, prev is stale */
 
 		down_read(&amp;current-&gt;mm-&gt;mmap_sem);
<span class="p_chunk">@@ -558,8 +562,12 @@</span> <span class="p_context"> static long madvise_dontneed(struct vm_area_struct *vma,</span>
  * This is effectively punching a hole into the middle of a file.
  */
 static long madvise_remove(struct vm_area_struct *vma,
<span class="p_del">-				struct vm_area_struct **prev,</span>
<span class="p_del">-				unsigned long start, unsigned long end)</span>
<span class="p_add">+			   struct vm_area_struct **prev,</span>
<span class="p_add">+			   unsigned long start, unsigned long end</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+			   , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	)</span>
 {
 	loff_t offset;
 	int error;
<span class="p_chunk">@@ -589,7 +597,7 @@</span> <span class="p_context"> static long madvise_remove(struct vm_area_struct *vma,</span>
 	 * mmap_sem.
 	 */
 	get_file(f);
<span class="p_del">-	if (userfaultfd_remove(vma, start, end)) {</span>
<span class="p_add">+	if (userfaultfd_remove(vma, start, end, NULL)) {</span>
 		/* mmap_sem was not released by userfaultfd_remove() */
 		up_read(&amp;current-&gt;mm-&gt;mmap_sem);
 	}
<span class="p_chunk">@@ -648,17 +656,29 @@</span> <span class="p_context"> static int madvise_inject_error(int behavior,</span>
 
 static long
 madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,
<span class="p_del">-		unsigned long start, unsigned long end, int behavior)</span>
<span class="p_add">+	    unsigned long start, unsigned long end, int behavior</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+	    , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	)</span>
 {
 	switch (behavior) {
 	case MADV_REMOVE:
<span class="p_del">-		return madvise_remove(vma, prev, start, end);</span>
<span class="p_add">+		return madvise_remove(vma, prev, start, end</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+				      , range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+			);</span>
 	case MADV_WILLNEED:
 		return madvise_willneed(vma, prev, start, end);
 	case MADV_FREE:
 		return madvise_free(vma, prev, start, end);
 	case MADV_DONTNEED:
<span class="p_del">-		return madvise_dontneed(vma, prev, start, end);</span>
<span class="p_add">+		return madvise_dontneed(vma, prev, start, end</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+					, range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+			);</span>
 	default:
 		return madvise_behavior(vma, prev, start, end, behavior);
 	}
<span class="p_chunk">@@ -826,7 +846,11 @@</span> <span class="p_context"> SYSCALL_DEFINE3(madvise, unsigned long, start, size_t, len_in, int, behavior)</span>
 			tmp = end;
 
 		/* Here vma-&gt;vm_start &lt;= start &lt; tmp &lt;= (end|vma-&gt;vm_end). */
<span class="p_del">-		error = madvise_vma(vma, &amp;prev, start, tmp, behavior);</span>
<span class="p_add">+		error = madvise_vma(vma, &amp;prev, start, tmp, behavior</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+				    , &amp;range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+			);</span>
 		if (error)
 			goto out;
 		start = tmp;
<span class="p_header">diff --git a/mm/userfaultfd.c b/mm/userfaultfd.c</span>
<span class="p_header">index 8bcb501bce60..ae2babc46fa5 100644</span>
<span class="p_header">--- a/mm/userfaultfd.c</span>
<span class="p_header">+++ b/mm/userfaultfd.c</span>
<span class="p_chunk">@@ -156,7 +156,11 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
 					      unsigned long dst_start,
 					      unsigned long src_start,
 					      unsigned long len,
<span class="p_del">-					      bool zeropage)</span>
<span class="p_add">+					      bool zeropage</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+					      , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+					      )</span>
 {
 	int vm_alloc_shared = dst_vma-&gt;vm_flags &amp; VM_SHARED;
 	int vm_shared = dst_vma-&gt;vm_flags &amp; VM_SHARED;
<span class="p_chunk">@@ -368,7 +372,11 @@</span> <span class="p_context"> extern ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
 				      unsigned long dst_start,
 				      unsigned long src_start,
 				      unsigned long len,
<span class="p_del">-				      bool zeropage);</span>
<span class="p_add">+				      bool zeropage</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+				      , struct range_lock *range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+				      );</span>
 #endif /* CONFIG_HUGETLB_PAGE */
 
 static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,
<span class="p_chunk">@@ -439,7 +447,11 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,</span>
 	 */
 	if (is_vm_hugetlb_page(dst_vma))
 		return  __mcopy_atomic_hugetlb(dst_mm, dst_vma, dst_start,
<span class="p_del">-						src_start, len, zeropage);</span>
<span class="p_add">+					       src_start, len, zeropage</span>
<span class="p_add">+#ifdef CONFIG_MEM_RANGE_LOCK</span>
<span class="p_add">+					       , &amp;range</span>
<span class="p_add">+#endif</span>
<span class="p_add">+					       );</span>
 
 	if (!vma_is_anonymous(dst_vma) &amp;&amp; !vma_is_shmem(dst_vma))
 		goto out_unlock;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



