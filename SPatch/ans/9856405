
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/mm] x86/mpx: Do not allow MPX if we have mappings above 47-bit - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/mm] x86/mpx: Do not allow MPX if we have mappings above 47-bit</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 21, 2017, 9:40 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-44b04912fa72489d403738f39e1c782614b7ae7c@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9856405/mbox/"
   >mbox</a>
|
   <a href="/patch/9856405/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9856405/">/patch/9856405/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	883FC60392 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:45:48 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6528A28616
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:45:48 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5996B28778; Fri, 21 Jul 2017 09:45:48 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ADBA828616
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 21 Jul 2017 09:45:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754272AbdGUJpn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 21 Jul 2017 05:45:43 -0400
Received: from terminus.zytor.com ([65.50.211.136]:52455 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754144AbdGUJpj (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 21 Jul 2017 05:45:39 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v6L9e6UI008758;
	Fri, 21 Jul 2017 02:40:06 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v6L9e6fG008755;
	Fri, 21 Jul 2017 02:40:06 -0700
Date: Fri, 21 Jul 2017 02:40:06 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: &quot;tip-bot for Kirill A. Shutemov&quot; &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-44b04912fa72489d403738f39e1c782614b7ae7c@git.kernel.org&gt;
Cc: akpm@linux-foundation.org, luto@amacapital.net, tglx@linutronix.de,
	torvalds@linux-foundation.org, kirill.shutemov@linux.intel.com,
	hpa@zytor.com, mingo@kernel.org, peterz@infradead.org,
	dave.hansen@intel.com, linux-kernel@vger.kernel.org
Reply-To: mingo@kernel.org, peterz@infradead.org, dave.hansen@intel.com,
	linux-kernel@vger.kernel.org, akpm@linux-foundation.org,
	luto@amacapital.net, tglx@linutronix.de,
	torvalds@linux-foundation.org, kirill.shutemov@linux.intel.com,
	hpa@zytor.com
In-Reply-To: &lt;20170716225954.74185-6-kirill.shutemov@linux.intel.com&gt;
References: &lt;20170716225954.74185-6-kirill.shutemov@linux.intel.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86/mpx: Do not allow MPX if we have mappings above
	47-bit
Git-Commit-ID: 44b04912fa72489d403738f39e1c782614b7ae7c
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - July 21, 2017, 9:40 a.m.</div>
<pre class="content">
Commit-ID:  44b04912fa72489d403738f39e1c782614b7ae7c
Gitweb:     http://git.kernel.org/tip/44b04912fa72489d403738f39e1c782614b7ae7c
Author:     Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
AuthorDate: Mon, 17 Jul 2017 01:59:51 +0300
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Fri, 21 Jul 2017 10:05:18 +0200

x86/mpx: Do not allow MPX if we have mappings above 47-bit

MPX (without MAWA extension) cannot handle addresses above 47 bits, so we
need to make sure that MPX cannot be enabled if we already have a VMA above
the boundary and forbid creating such VMAs once MPX is enabled.

The patch implements mpx_unmapped_area_check() which is called from all
variants of get_unmapped_area() to check if the requested address fits
mpx.

On enabling MPX, we check if we already have any vma above 47-bit
boundary and forbit the enabling if we do.

As long as DEFAULT_MAP_WINDOW is equal to TASK_SIZE_MAX, the change is
nop. It will change when we allow userspace to have mappings above
47-bits.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-arch@vger.kernel.org
Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20170716225954.74185-6-kirill.shutemov@linux.intel.com
[ Readability edits. ]
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/include/asm/mpx.h       |  9 +++++++++
 arch/x86/include/asm/processor.h |  3 +++
 arch/x86/kernel/sys_x86_64.c     |  9 +++++++++
 arch/x86/mm/hugetlbpage.c        |  6 ++++++
 arch/x86/mm/mpx.c                | 33 ++++++++++++++++++++++++++++++++-
 5 files changed, 59 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mpx.h b/arch/x86/include/asm/mpx.h</span>
<span class="p_header">index a0d662b..7d74047 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mpx.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mpx.h</span>
<span class="p_chunk">@@ -73,6 +73,9 @@</span> <span class="p_context"> static inline void mpx_mm_init(struct mm_struct *mm)</span>
 }
 void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,
 		      unsigned long start, unsigned long end);
<span class="p_add">+</span>
<span class="p_add">+unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="p_add">+		unsigned long flags);</span>
 #else
 static inline siginfo_t *mpx_generate_siginfo(struct pt_regs *regs)
 {
<span class="p_chunk">@@ -94,6 +97,12 @@</span> <span class="p_context"> static inline void mpx_notify_unmap(struct mm_struct *mm,</span>
 				    unsigned long start, unsigned long end)
 {
 }
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long mpx_unmapped_area_check(unsigned long addr,</span>
<span class="p_add">+		unsigned long len, unsigned long flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return addr;</span>
<span class="p_add">+}</span>
 #endif /* CONFIG_X86_INTEL_MPX */
 
 #endif /* _ASM_X86_MPX_H */
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 973709d..c8d59fc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -809,6 +809,7 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
 #define IA32_PAGE_OFFSET	PAGE_OFFSET
 #define TASK_SIZE		PAGE_OFFSET
 #define TASK_SIZE_MAX		TASK_SIZE
<span class="p_add">+#define DEFAULT_MAP_WINDOW	TASK_SIZE</span>
 #define STACK_TOP		TASK_SIZE
 #define STACK_TOP_MAX		STACK_TOP
 
<span class="p_chunk">@@ -850,6 +851,8 @@</span> <span class="p_context"> static inline void spin_lock_prefetch(const void *x)</span>
  */
 #define TASK_SIZE_MAX	((1UL &lt;&lt; 47) - PAGE_SIZE)
 
<span class="p_add">+#define DEFAULT_MAP_WINDOW	TASK_SIZE_MAX</span>
<span class="p_add">+</span>
 /* This decides where the kernel will search for a free chunk of vm
  * space during mmap&#39;s.
  */
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index 89bd0d6..f840e89 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/compat.h&gt;
 #include &lt;asm/ia32.h&gt;
 #include &lt;asm/syscalls.h&gt;
<span class="p_add">+#include &lt;asm/mpx.h&gt;</span>
 
 /*
  * Align a virtual address to avoid aliasing in the I$ on AMD F15h.
<span class="p_chunk">@@ -132,6 +133,10 @@</span> <span class="p_context"> arch_get_unmapped_area(struct file *filp, unsigned long addr,</span>
 	struct vm_unmapped_area_info info;
 	unsigned long begin, end;
 
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	if (flags &amp; MAP_FIXED)
 		return addr;
 
<span class="p_chunk">@@ -171,6 +176,10 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 	unsigned long addr = addr0;
 	struct vm_unmapped_area_info info;
 
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	/* requested length too big for entire address space */
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 868f02c..3cf89ad 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/elf.h&gt;
<span class="p_add">+#include &lt;asm/mpx.h&gt;</span>
 
 #if 0	/* This is just for testing */
 struct page *
<span class="p_chunk">@@ -135,6 +136,11 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 
 	if (len &amp; ~huge_page_mask(h))
 		return -EINVAL;
<span class="p_add">+</span>
<span class="p_add">+	addr = mpx_unmapped_area_check(addr, len, flags);</span>
<span class="p_add">+	if (IS_ERR_VALUE(addr))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+</span>
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
 
<span class="p_header">diff --git a/arch/x86/mm/mpx.c b/arch/x86/mm/mpx.c</span>
<span class="p_header">index 1c34b76..9ceaa95 100644</span>
<span class="p_header">--- a/arch/x86/mm/mpx.c</span>
<span class="p_header">+++ b/arch/x86/mm/mpx.c</span>
<span class="p_chunk">@@ -355,10 +355,19 @@</span> <span class="p_context"> int mpx_enable_management(void)</span>
 	 */
 	bd_base = mpx_get_bounds_dir();
 	down_write(&amp;mm-&gt;mmap_sem);
<span class="p_add">+</span>
<span class="p_add">+	/* MPX doesn&#39;t support addresses above 47 bits yet. */</span>
<span class="p_add">+	if (find_vma(mm, DEFAULT_MAP_WINDOW)) {</span>
<span class="p_add">+		pr_warn_once(&quot;%s (%d): MPX cannot handle addresses &quot;</span>
<span class="p_add">+				&quot;above 47-bits. Disabling.&quot;,</span>
<span class="p_add">+				current-&gt;comm, current-&gt;pid);</span>
<span class="p_add">+		ret = -ENXIO;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
 	mm-&gt;context.bd_addr = bd_base;
 	if (mm-&gt;context.bd_addr == MPX_INVALID_BOUNDS_DIR)
 		ret = -ENXIO;
<span class="p_del">-</span>
<span class="p_add">+out:</span>
 	up_write(&amp;mm-&gt;mmap_sem);
 	return ret;
 }
<span class="p_chunk">@@ -1030,3 +1039,25 @@</span> <span class="p_context"> void mpx_notify_unmap(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	if (ret)
 		force_sig(SIGSEGV, current);
 }
<span class="p_add">+</span>
<span class="p_add">+/* MPX cannot handle addresses above 47 bits yet. */</span>
<span class="p_add">+unsigned long mpx_unmapped_area_check(unsigned long addr, unsigned long len,</span>
<span class="p_add">+		unsigned long flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!kernel_managing_mpx_tables(current-&gt;mm))</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+	if (addr + len &lt;= DEFAULT_MAP_WINDOW)</span>
<span class="p_add">+		return addr;</span>
<span class="p_add">+	if (flags &amp; MAP_FIXED)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Requested len is larger than the whole area we&#39;re allowed to map in.</span>
<span class="p_add">+	 * Resetting hinting address wouldn&#39;t do much good -- fail early.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (len &gt; DEFAULT_MAP_WINDOW)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Look for unmap area within DEFAULT_MAP_WINDOW */</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



