
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] powerpc/mm: Fix growth direction for hugepages mmaps with slice - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] powerpc/mm: Fix growth direction for hugepages mmaps with slice</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 9, 2018, 10:18 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180109101810.2471D6C6CF@localhost.localdomain&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10151603/mbox/"
   >mbox</a>
|
   <a href="/patch/10151603/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10151603/">/patch/10151603/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	10D37603ED for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jan 2018 10:18:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5DE1205AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jan 2018 10:18:18 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DA0F828881; Tue,  9 Jan 2018 10:18:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4CA37205AF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  9 Jan 2018 10:18:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751872AbeAIKSP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 9 Jan 2018 05:18:15 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:25307 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751101AbeAIKSM (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 9 Jan 2018 05:18:12 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zG7Pk71rfz9ttFM;
	Tue,  9 Jan 2018 11:18:02 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id y2NNmw3rojtl; Tue,  9 Jan 2018 11:18:02 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zG7Pk6XHHz9ttCC;
	Tue,  9 Jan 2018 11:18:02 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id EA0BC8B870;
	Tue,  9 Jan 2018 11:18:10 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id upDuvyH8mB0s; Tue,  9 Jan 2018 11:18:10 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id B22998B92B;
	Tue,  9 Jan 2018 11:18:10 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 2471D6C6CF; Tue,  9 Jan 2018 11:18:10 +0100 (CET)
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH v2] powerpc/mm: Fix growth direction for hugepages mmaps with
	slice
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Message-Id: &lt;20180109101810.2471D6C6CF@localhost.localdomain&gt;
Date: Tue,  9 Jan 2018 11:18:10 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 9, 2018, 10:18 a.m.</div>
<pre class="content">
An application running with libhugetlbfs fails to allocate
additional pages to HEAP due to the hugemap being done
inconditionally as topdown mapping:

mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000
[...]
mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000
munmap(0x73d80000, 1048576)             = 0
[...]
mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000
munmap(0x73d00000, 1572864)             = 0
[...]
mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000
munmap(0x73d00000, 1572864)             = 0
[...]

As one can see from the above strace log, mmap() allocates further
pages below the initial one.

This patch fixes it by taking into account MAP_GROWSDOWN flag.

Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)
<span class="signed-off-by">Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 v2: Added missing include

 arch/powerpc/mm/hugetlbpage.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 16, 2018, 4:03 p.m.</div>
<pre class="content">
Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:
<span class="quote">
&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;</span>

Can you explain the failure details above. I am not sure I understand
what to read from the above output.
<span class="quote">
&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt; pages below the initial one.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch fixes it by taking into account MAP_GROWSDOWN flag.</span>

Rest of the kernel don&#39;t depend on that flag to select a topdown search
or not. So what is special with hugetlb? IF we select legacy mmap that
is when we select a bottomup search. Hugetlb on ppc64 always did a
topdown search.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  v2: Added missing include</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/powerpc/mm/hugetlbpage.c | 4 +++-</span>
<span class="quote">&gt;  1 file changed, 3 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; index 79e1378ee303..0eadf9f199de 100644</span>
<span class="quote">&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -19,6 +19,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/moduleparam.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/swap.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/swapops.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/mman.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/pgalloc.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt; @@ -558,7 +559,8 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;  						       pgoff, flags);</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt; -	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt; +	return slice_get_unmapped_area(addr, len, flags, mmu_psize,</span>
<span class="quote">&gt; +				       flags &amp; MAP_GROWSDOWN);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.13.3</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 16, 2018, 4:48 p.m.</div>
<pre class="content">
Le 16/01/2018 à 17:03, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you explain the failure details above. I am not sure I understand</span>
<span class="quote">&gt; what to read from the above output.</span>

libhugetlbfs first requests an area of size 1.5Mbytes, at address 0x10080000
mmap() returns an area at address 0x73e80000

Then libhugetlbfs requests an additional area on top of that, ie at 
address 0x74000000, to expand the heap.
But mmap() returns an area at address 0x73d80000, ie under the previous 
area.

This is not the behaviour when using the generic (ie without mm_slices) 
hugepages code, and this is not what libhugetlbfs expects for expending 
the heap.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt; As one can see from the above strace log, mmap() allocates further</span>
<span class="quote">&gt;&gt; pages below the initial one.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch fixes it by taking into account MAP_GROWSDOWN flag.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Rest of the kernel don&#39;t depend on that flag to select a topdown search</span>
<span class="quote">&gt; or not. So what is special with hugetlb? IF we select legacy mmap that</span>
<span class="quote">&gt; is when we select a bottomup search. Hugetlb on ppc64 always did a</span>
<span class="quote">&gt; topdown search.</span>

The generic hugepage code does a bottomup search. First page is 
allocated at address 0x30000000 and following pages are allocated at 
requested addresses when requested, then libhugetlbfs has no issue 
expanding the heap when required.
<span class="quote">
&gt; </span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Fixes: d0f13e3c20b6f (&quot;[POWERPC] Introduce address space &quot;slices&quot; &quot;)</span>
<span class="quote">&gt;&gt; Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;   v2: Added missing include</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   arch/powerpc/mm/hugetlbpage.c | 4 +++-</span>
<span class="quote">&gt;&gt;   1 file changed, 3 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; index 79e1378ee303..0eadf9f199de 100644</span>
<span class="quote">&gt;&gt; --- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; +++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="quote">&gt;&gt; @@ -19,6 +19,7 @@</span>
<span class="quote">&gt;&gt;   #include &lt;linux/moduleparam.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/swap.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;linux/swapops.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/mman.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/pgtable.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/pgalloc.h&gt;</span>
<span class="quote">&gt;&gt;   #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt;&gt; @@ -558,7 +559,8 @@ unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;&gt;   		return radix__hugetlb_get_unmapped_area(file, addr, len,</span>
<span class="quote">&gt;&gt;   						       pgoff, flags);</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt; -	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="quote">&gt;&gt; +	return slice_get_unmapped_area(addr, len, flags, mmu_psize,</span>
<span class="quote">&gt;&gt; +				       flags &amp; MAP_GROWSDOWN);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;&gt;   #endif</span>
<span class="quote">&gt;&gt;   </span>
<span class="quote">&gt;&gt; -- </span>
<span class="quote">&gt;&gt; 2.13.3</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Jan. 17, 2018, 3:19 a.m.</div>
<pre class="content">
On 01/16/2018 10:18 PM, Christophe LEROY wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Le 16/01/2018 à 17:03, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Can you explain the failure details above. I am not sure I understand</span>
<span class="quote">&gt;&gt; what to read from the above output.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; libhugetlbfs first requests an area of size 1.5Mbytes, at address </span>
<span class="quote">&gt; 0x10080000</span>
<span class="quote">&gt; mmap() returns an area at address 0x73e80000</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Then libhugetlbfs requests an additional area on top of that, ie at </span>
<span class="quote">&gt; address 0x74000000, to expand the heap.</span>
<span class="quote">&gt; But mmap() returns an area at address 0x73d80000, ie under the previous </span>
<span class="quote">&gt; area.</span>
<span class="quote">&gt; </span>


Can you share the test details?. Why does it not fail on book3s64? We 
use topdown search with book3s64.
<span class="quote">
&gt; This is not the behaviour when using the generic (ie without mm_slices) </span>
<span class="quote">&gt; hugepages code, and this is not what libhugetlbfs expects for expending </span>
<span class="quote">&gt; the heap.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 17, 2018, 11:11 a.m.</div>
<pre class="content">
Le 17/01/2018 à 04:19, Aneesh Kumar K.V a écrit :
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 01/16/2018 10:18 PM, Christophe LEROY wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Le 16/01/2018 à 17:03, Aneesh Kumar K.V a écrit :</span>
<span class="quote">&gt;&gt;&gt; Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; An application running with libhugetlbfs fails to allocate</span>
<span class="quote">&gt;&gt;&gt;&gt; additional pages to HEAP due to the hugemap being done</span>
<span class="quote">&gt;&gt;&gt;&gt; inconditionally as topdown mapping:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x10080000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0) = 0x73e80000</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1048576, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d80000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d80000, 1048576)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt; mmap(0x74000000, 1572864, PROT_READ|PROT_WRITE, </span>
<span class="quote">&gt;&gt;&gt;&gt; MAP_PRIVATE|MAP_ANONYMOUS|0x40000, -1, 0x180000) = 0x73d00000</span>
<span class="quote">&gt;&gt;&gt;&gt; munmap(0x73d00000, 1572864)             = 0</span>
<span class="quote">&gt;&gt;&gt;&gt; [...]</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Can you explain the failure details above. I am not sure I understand</span>
<span class="quote">&gt;&gt;&gt; what to read from the above output.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; libhugetlbfs first requests an area of size 1.5Mbytes, at address </span>
<span class="quote">&gt;&gt; 0x10080000</span>
<span class="quote">&gt;&gt; mmap() returns an area at address 0x73e80000</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Then libhugetlbfs requests an additional area on top of that, ie at </span>
<span class="quote">&gt;&gt; address 0x74000000, to expand the heap.</span>
<span class="quote">&gt;&gt; But mmap() returns an area at address 0x73d80000, ie under the </span>
<span class="quote">&gt;&gt; previous area.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Can you share the test details?. Why does it not fail on book3s64? We </span>
<span class="quote">&gt; use topdown search with book3s64.</span>

I don&#39;t know about book3s64, I only have 8xx.

Here is my test app:


#include &lt;sys/mman.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;

int main()
{
	char *p;
	char buf[16384];
	char filename[32];
	int fd, r;
	
	sprintf(filename, &quot;/proc/%d/maps&quot;, getpid());

	fd = open(filename, O_RDONLY);
	r = read(fd, buf, sizeof(buf));
	close(fd);
	buf[r] = 0;
	fputs(buf, stderr);
	fputc(&#39;\n&#39;, stderr);
	
	p = malloc(1024*1024);
	fprintf(stderr, &quot;\nAllocated 1Mbytes at %p\n\n&quot;, p);

	p = malloc(1024*1024);
	fprintf(stderr, &quot;\nAllocated 1Mbytes at %p\n\n&quot;, p);

	p = malloc(1024*1024);
	fprintf(stderr, &quot;\nAllocated 1Mbytes at %p\n\n&quot;, p);

	fd = open(filename, O_RDONLY);
	r = read(fd, buf, sizeof(buf));
	close(fd);
	buf[r] = 0;
	fputs(buf, stderr);
	fputc(&#39;\n&#39;, stderr);

	exit(0);
}

It is linked with -lhugetlbfs (version 2.20)
My 8xx board is configured with 64 huge pages, default size 512k:

root@vgoip:~# cat /proc/meminfo
MemTotal:         123664 kB
MemFree:           58464 kB
MemAvailable:      67904 kB
Buffers:               0 kB
Cached:            14480 kB
SwapCached:            0 kB
Active:            11616 kB
Inactive:           7872 kB
Active(anon):       7584 kB
Inactive(anon):      240 kB
Active(file):       4032 kB
Inactive(file):     7632 kB
Unevictable:        2560 kB
Mlocked:            2560 kB
SwapTotal:             0 kB
SwapFree:              0 kB
Dirty:                 0 kB
Writeback:             0 kB
AnonPages:          7568 kB
Mapped:             7456 kB
Shmem:               736 kB
Slab:               7456 kB
SReclaimable:       3120 kB
SUnreclaim:         4336 kB
KernelStack:         568 kB
PageTables:         1024 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:       45440 kB
Committed_AS:      38880 kB
VmallocTotal:     866304 kB
VmallocUsed:           0 kB
VmallocChunk:          0 kB
HugePages_Total:      64
HugePages_Free:       64
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:        512 kB


Without the patch, my test app gives the following results: as you can 
see, second and third malloc returns address which is not in a hugepage. 
strace shows that libhugetlbfs fallsback on regular mmap because 
hugepage has not been allocated at the requested address.

root@vgoip:~# HUGETLB_MORECORE=yes ./huge_malloc_test
00100000-00108000 r-xp 00000000 00:00 0          [vdso]
0fde4000-0fde8000 r-xp 00000000 00:0f 168        /lib/libdl-2.23.so
0fde8000-0fe00000 ---p 00004000 00:0f 168        /lib/libdl-2.23.so
0fe00000-0fe04000 r--p 0000c000 00:0f 168        /lib/libdl-2.23.so
0fe04000-0fe08000 rwxp 00010000 00:0f 168        /lib/libdl-2.23.so
0fe18000-0ff88000 r-xp 00000000 00:0f 191        /lib/libc-2.23.so
0ff88000-0ffa4000 ---p 00170000 00:0f 191        /lib/libc-2.23.so
0ffa4000-0ffa8000 r--p 0017c000 00:0f 191        /lib/libc-2.23.so
0ffa8000-0ffac000 rwxp 00180000 00:0f 191        /lib/libc-2.23.so
0ffac000-0ffb0000 rwxp 00000000 00:00 0
0ffc0000-0ffd4000 r-xp 00000000 00:0f 90         /lib/libhugetlbfs.so
0ffd4000-0ffe0000 ---p 00014000 00:0f 90         /lib/libhugetlbfs.so
0ffe0000-0ffe4000 rwxp 00010000 00:0f 90         /lib/libhugetlbfs.so
0ffe4000-0fff0000 rwxp 00000000 00:00 0
10000000-10004000 r-xp 00000000 00:0f 3076       /root/huge_malloc_test
10010000-10014000 rwxp 00000000 00:0f 3076       /root/huge_malloc_test
77940000-77964000 r-xp 00000000 00:0f 171        /lib/ld-2.23.so
7797c000-77980000 r--p 0002c000 00:0f 171        /lib/ld-2.23.so
77980000-77984000 rwxp 00030000 00:0f 171        /lib/ld-2.23.so
7fa58000-7fa7c000 rw-p 00000000 00:00 0          [stack]

libhugetlbfs: WARNING: Heap originates at 0x73e80000 instead of 0x10080000

Allocated 1Mbytes at 0x73e80008

libhugetlbfs: WARNING: New heap segment mapped at 0x73d80000 instead of 
0x74000000

Allocated 1Mbytes at 0x777fc008

libhugetlbfs: WARNING: New heap segment mapped at 0x73d00000 instead of 
0x74000000

Allocated 1Mbytes at 0x776b8008

00100000-00108000 r-xp 00000000 00:00 0          [vdso]
0fde4000-0fde8000 r-xp 00000000 00:0f 168        /lib/libdl-2.23.so
0fde8000-0fe00000 ---p 00004000 00:0f 168        /lib/libdl-2.23.so
0fe00000-0fe04000 r--p 0000c000 00:0f 168        /lib/libdl-2.23.so
0fe04000-0fe08000 rwxp 00010000 00:0f 168        /lib/libdl-2.23.so
0fe18000-0ff88000 r-xp 00000000 00:0f 191        /lib/libc-2.23.so
0ff88000-0ffa4000 ---p 00170000 00:0f 191        /lib/libc-2.23.so
0ffa4000-0ffa8000 r--p 0017c000 00:0f 191        /lib/libc-2.23.so
0ffa8000-0ffac000 rwxp 00180000 00:0f 191        /lib/libc-2.23.so
0ffac000-0ffb0000 rwxp 00000000 00:00 0
0ffc0000-0ffd4000 r-xp 00000000 00:0f 90         /lib/libhugetlbfs.so
0ffd4000-0ffe0000 ---p 00014000 00:0f 90         /lib/libhugetlbfs.so
0ffe0000-0ffe4000 rwxp 00010000 00:0f 90         /lib/libhugetlbfs.so
0ffe4000-0fff0000 rwxp 00000000 00:00 0
10000000-10004000 r-xp 00000000 00:0f 3076       /root/huge_malloc_test
10010000-10014000 rwxp 00000000 00:0f 3076       /root/huge_malloc_test
73e80000-74000000 rw-p 00000000 00:0b 98386      /anon_hugepage (deleted)
776b8000-77940000 rw-p 00000000 00:00 0
77940000-77964000 r-xp 00000000 00:0f 171        /lib/ld-2.23.so
7797c000-77980000 r--p 0002c000 00:0f 171        /lib/ld-2.23.so
77980000-77984000 rwxp 00030000 00:0f 171        /lib/ld-2.23.so
7fa58000-7fa7c000 rw-p 00000000 00:00 0          [stack]


With the patch applied, it works properly, each malloc get an address 
within the hugepage space.

root@vgoip:~# HUGETLB_MORECORE=yes ./huge_malloc_test
00100000-00108000 r-xp 00000000 00:00 0          [vdso]
0fde4000-0fde8000 r-xp 00000000 00:0f 168        /lib/libdl-2.23.so
0fde8000-0fe00000 ---p 00004000 00:0f 168        /lib/libdl-2.23.so
0fe00000-0fe04000 r--p 0000c000 00:0f 168        /lib/libdl-2.23.so
0fe04000-0fe08000 rwxp 00010000 00:0f 168        /lib/libdl-2.23.so
0fe18000-0ff88000 r-xp 00000000 00:0f 191        /lib/libc-2.23.so
0ff88000-0ffa4000 ---p 00170000 00:0f 191        /lib/libc-2.23.so
0ffa4000-0ffa8000 r--p 0017c000 00:0f 191        /lib/libc-2.23.so
0ffa8000-0ffac000 rwxp 00180000 00:0f 191        /lib/libc-2.23.so
0ffac000-0ffb0000 rwxp 00000000 00:00 0
0ffc0000-0ffd4000 r-xp 00000000 00:0f 90         /lib/libhugetlbfs.so
0ffd4000-0ffe0000 ---p 00014000 00:0f 90         /lib/libhugetlbfs.so
0ffe0000-0ffe4000 rwxp 00010000 00:0f 90         /lib/libhugetlbfs.so
0ffe4000-0fff0000 rwxp 00000000 00:00 0
10000000-10004000 r-xp 00000000 00:0f 3076       /root/huge_malloc_test
10010000-10014000 rwxp 00000000 00:0f 3076       /root/huge_malloc_test
77884000-778a8000 r-xp 00000000 00:0f 171        /lib/ld-2.23.so
778c0000-778c4000 r--p 0002c000 00:0f 171        /lib/ld-2.23.so
778c4000-778c8000 rwxp 00030000 00:0f 171        /lib/ld-2.23.so
7ff98000-7ffbc000 rw-p 00000000 00:00 0          [stack]

libhugetlbfs: WARNING: Heap originates at 0x30000000 instead of 0x10080000

Allocated 1Mbytes at 0x30000008


Allocated 1Mbytes at 0x30100010


Allocated 1Mbytes at 0x30200018

00100000-00108000 r-xp 00000000 00:00 0          [vdso]
0fde4000-0fde8000 r-xp 00000000 00:0f 168        /lib/libdl-2.23.so
0fde8000-0fe00000 ---p 00004000 00:0f 168        /lib/libdl-2.23.so
0fe00000-0fe04000 r--p 0000c000 00:0f 168        /lib/libdl-2.23.so
0fe04000-0fe08000 rwxp 00010000 00:0f 168        /lib/libdl-2.23.so
0fe18000-0ff88000 r-xp 00000000 00:0f 191        /lib/libc-2.23.so
0ff88000-0ffa4000 ---p 00170000 00:0f 191        /lib/libc-2.23.so
0ffa4000-0ffa8000 r--p 0017c000 00:0f 191        /lib/libc-2.23.so
0ffa8000-0ffac000 rwxp 00180000 00:0f 191        /lib/libc-2.23.so
0ffac000-0ffb0000 rwxp 00000000 00:00 0
0ffc0000-0ffd4000 r-xp 00000000 00:0f 90         /lib/libhugetlbfs.so
0ffd4000-0ffe0000 ---p 00014000 00:0f 90         /lib/libhugetlbfs.so
0ffe0000-0ffe4000 rwxp 00010000 00:0f 90         /lib/libhugetlbfs.so
0ffe4000-0fff0000 rwxp 00000000 00:00 0
10000000-10004000 r-xp 00000000 00:0f 3076       /root/huge_malloc_test
10010000-10014000 rwxp 00000000 00:0f 3076       /root/huge_malloc_test
30000000-30180000 rw-p 00000000 00:0b 7321       /anon_hugepage (deleted)
30180000-30280000 rw-p 00180000 00:0b 7322       /anon_hugepage (deleted)
30280000-30380000 rw-p 00280000 00:0b 7323       /anon_hugepage (deleted)
77884000-778a8000 r-xp 00000000 00:0f 171        /lib/ld-2.23.so
778c0000-778c4000 r--p 0002c000 00:0f 171        /lib/ld-2.23.so
778c4000-778c8000 rwxp 00030000 00:0f 171        /lib/ld-2.23.so
7ff98000-7ffbc000 rw-p 00000000 00:00 0          [stack]



Christophe
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/mm/hugetlbpage.c b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">index 79e1378ee303..0eadf9f199de 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -19,6 +19,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/moduleparam.h&gt;
 #include &lt;linux/swap.h&gt;
 #include &lt;linux/swapops.h&gt;
<span class="p_add">+#include &lt;linux/mman.h&gt;</span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/pgalloc.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -558,7 +559,8 @@</span> <span class="p_context"> unsigned long hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 		return radix__hugetlb_get_unmapped_area(file, addr, len,
 						       pgoff, flags);
 #endif
<span class="p_del">-	return slice_get_unmapped_area(addr, len, flags, mmu_psize, 1);</span>
<span class="p_add">+	return slice_get_unmapped_area(addr, len, flags, mmu_psize,</span>
<span class="p_add">+				       flags &amp; MAP_GROWSDOWN);</span>
 }
 #endif
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



