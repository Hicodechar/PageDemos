
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv3,1/2] x86/mm: Prevent non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv3,1/2] x86/mm: Prevent non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 15, 2017, 2:36 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171115143607.81541-1-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10059635/mbox/"
   >mbox</a>
|
   <a href="/patch/10059635/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10059635/">/patch/10059635/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3D7DA6019D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:36:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 280752A05A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:36:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1C9FD2A09A; Wed, 15 Nov 2017 14:36:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7A4F52A09B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:36:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757271AbdKOOgX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 15 Nov 2017 09:36:23 -0500
Received: from mga05.intel.com ([192.55.52.43]:46453 &quot;EHLO mga05.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754177AbdKOOgP (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 15 Nov 2017 09:36:15 -0500
Received: from fmsmga002.fm.intel.com ([10.253.24.26])
	by fmsmga105.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	15 Nov 2017 06:36:15 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,399,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1244451052&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by fmsmga002.fm.intel.com with ESMTP; 15 Nov 2017 06:36:12 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 46C57DE; Wed, 15 Nov 2017 16:36:11 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Nicholas Piggin &lt;npiggin@gmail.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv3 1/2] x86/mm: Prevent non-MAP_FIXED mapping across
	DEFAULT_MAP_WINDOW border
Date: Wed, 15 Nov 2017 17:36:06 +0300
Message-Id: &lt;20171115143607.81541-1-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.15.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Nov. 15, 2017, 2:36 p.m.</div>
<pre class="content">
In case of 5-level paging, the kernel does not place any mapping above
47-bit, unless userspace explicitly asks for it.

Userspace can request an allocation from the full address space by
specifying the mmap address hint above 47-bit.

Nicholas noticed that the current implementation violates this interface:

  If user space requests a mapping at the end of the 47-bit address space
  with a length which causes the mapping to cross the 47-bit border
  (DEFAULT_MAP_WINDOW), then the vma is partially in the address space
  below and above.

Sanity check the mmap address hint so that start and end of the resulting
vma are on the same side of the 47-bit border. If that&#39;s not the case fall
back to the code path which ignores the address hint and allocate from the
regular address space below 47-bit.

[ tglx: Moved the address check to a function and massaged comment and
  	changelog ]

Reported-by: Nicholas Piggin &lt;npiggin@gmail.com&gt;
<span class="signed-off-by">Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 arch/x86/include/asm/elf.h   |  1 +
 arch/x86/kernel/sys_x86_64.c | 10 +++++++---
 arch/x86/mm/hugetlbpage.c    | 11 ++++++++---
 arch/x86/mm/mmap.c           | 46 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 62 insertions(+), 6 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Nov. 16, 2017, 1:23 p.m.</div>
<pre class="content">
On Wed 15-11-17 17:36:06, Kirill A. Shutemov wrote:
<span class="quote">&gt; In case of 5-level paging, the kernel does not place any mapping above</span>
<span class="quote">&gt; 47-bit, unless userspace explicitly asks for it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Userspace can request an allocation from the full address space by</span>
<span class="quote">&gt; specifying the mmap address hint above 47-bit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Nicholas noticed that the current implementation violates this interface:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   If user space requests a mapping at the end of the 47-bit address space</span>
<span class="quote">&gt;   with a length which causes the mapping to cross the 47-bit border</span>
<span class="quote">&gt;   (DEFAULT_MAP_WINDOW), then the vma is partially in the address space</span>
<span class="quote">&gt;   below and above.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sanity check the mmap address hint so that start and end of the resulting</span>
<span class="quote">&gt; vma are on the same side of the 47-bit border. If that&#39;s not the case fall</span>
<span class="quote">&gt; back to the code path which ignores the address hint and allocate from the</span>
<span class="quote">&gt; regular address space below 47-bit.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [ tglx: Moved the address check to a function and massaged comment and</span>
<span class="quote">&gt;   	changelog ]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reported-by: Nicholas Piggin &lt;npiggin@gmail.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>

FWIW
<span class="acked-by">Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/elf.h   |  1 +</span>
<span class="quote">&gt;  arch/x86/kernel/sys_x86_64.c | 10 +++++++---</span>
<span class="quote">&gt;  arch/x86/mm/hugetlbpage.c    | 11 ++++++++---</span>
<span class="quote">&gt;  arch/x86/mm/mmap.c           | 46 ++++++++++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  4 files changed, 62 insertions(+), 6 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="quote">&gt; index 3a091cea36c5..0d157d2a1e2a 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/elf.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/elf.h</span>
<span class="quote">&gt; @@ -309,6 +309,7 @@ static inline int mmap_is_ia32(void)</span>
<span class="quote">&gt;  extern unsigned long task_size_32bit(void);</span>
<span class="quote">&gt;  extern unsigned long task_size_64bit(int full_addr_space);</span>
<span class="quote">&gt;  extern unsigned long get_mmap_base(int is_legacy);</span>
<span class="quote">&gt; +extern bool mmap_address_hint_valid(unsigned long addr, unsigned long len);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_X86_32</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="quote">&gt; index a63fe77b3217..676774b9bb8d 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="quote">&gt; @@ -188,6 +188,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
<span class="quote">&gt;  	if (len &gt; TASK_SIZE)</span>
<span class="quote">&gt;  		return -ENOMEM;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/* No address checking. See comment at mmap_address_hint_valid() */</span>
<span class="quote">&gt;  	if (flags &amp; MAP_FIXED)</span>
<span class="quote">&gt;  		return addr;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -197,12 +198,15 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* requesting a specific address */</span>
<span class="quote">&gt;  	if (addr) {</span>
<span class="quote">&gt; -		addr = PAGE_ALIGN(addr);</span>
<span class="quote">&gt; +		addr &amp;= PAGE_MASK;</span>
<span class="quote">&gt; +		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt; +			goto get_unmapped_area;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		vma = find_vma(mm, addr);</span>
<span class="quote">&gt; -		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="quote">&gt; -				(!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="quote">&gt; +		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
<span class="quote">&gt;  			return addr;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +get_unmapped_area:</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	info.flags = VM_UNMAPPED_AREA_TOPDOWN;</span>
<span class="quote">&gt;  	info.length = len;</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; index 8ae0000cbdb3..00b296617ca4 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -158,6 +158,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	if (len &gt; TASK_SIZE)</span>
<span class="quote">&gt;  		return -ENOMEM;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/* No address checking. See comment at mmap_address_hint_valid() */</span>
<span class="quote">&gt;  	if (flags &amp; MAP_FIXED) {</span>
<span class="quote">&gt;  		if (prepare_hugepage_range(file, addr, len))</span>
<span class="quote">&gt;  			return -EINVAL;</span>
<span class="quote">&gt; @@ -165,12 +166,16 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (addr) {</span>
<span class="quote">&gt; -		addr = ALIGN(addr, huge_page_size(h));</span>
<span class="quote">&gt; +		addr &amp;= huge_page_mask(h);</span>
<span class="quote">&gt; +		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt; +			goto get_unmapped_area;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		vma = find_vma(mm, addr);</span>
<span class="quote">&gt; -		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="quote">&gt; -		    (!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="quote">&gt; +		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
<span class="quote">&gt;  			return addr;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +get_unmapped_area:</span>
<span class="quote">&gt;  	if (mm-&gt;get_unmapped_area == arch_get_unmapped_area)</span>
<span class="quote">&gt;  		return hugetlb_get_unmapped_area_bottomup(file, addr, len,</span>
<span class="quote">&gt;  				pgoff, flags);</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="quote">&gt; index a99679826846..62285fe77b0f 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/mmap.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/mmap.c</span>
<span class="quote">&gt; @@ -174,3 +174,49 @@ const char *arch_vma_name(struct vm_area_struct *vma)</span>
<span class="quote">&gt;  		return &quot;[mpx]&quot;;</span>
<span class="quote">&gt;  	return NULL;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/**</span>
<span class="quote">&gt; + * mmap_address_hint_valid - Validate the address hint of mmap</span>
<span class="quote">&gt; + * @addr:	Address hint</span>
<span class="quote">&gt; + * @len:	Mapping length</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Check whether @addr and @addr + @len result in a valid mapping.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * On 32bit this only checks whether @addr + @len is &lt;= TASK_SIZE.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * On 64bit with 5-level page tables another sanity check is required</span>
<span class="quote">&gt; + * because mappings requested by mmap(@addr, 0) which cross the 47-bit</span>
<span class="quote">&gt; + * virtual address boundary can cause the following theoretical issue:</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + *  An application calls mmap(addr, 0), i.e. without MAP_FIXED, where @addr</span>
<span class="quote">&gt; + *  is below the border of the 47-bit address space and @addr + @len is</span>
<span class="quote">&gt; + *  above the border.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + *  With 4-level paging this request succeeds, but the resulting mapping</span>
<span class="quote">&gt; + *  address will always be within the 47-bit virtual address space, because</span>
<span class="quote">&gt; + *  the hint address does not result in a valid mapping and is</span>
<span class="quote">&gt; + *  ignored. Hence applications which are not prepared to handle virtual</span>
<span class="quote">&gt; + *  addresses above 47-bit work correctly.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + *  With 5-level paging this request would be granted and result in a</span>
<span class="quote">&gt; + *  mapping which crosses the border of the 47-bit virtual address</span>
<span class="quote">&gt; + *  space. If the application cannot handle addresses above 47-bit this</span>
<span class="quote">&gt; + *  will lead to misbehaviour and hard to diagnose failures.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Therefore ignore address hints which would result in a mapping crossing</span>
<span class="quote">&gt; + * the 47-bit virtual address boundary.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Note, that in the same scenario with MAP_FIXED the behaviour is</span>
<span class="quote">&gt; + * different. The request with @addr &lt; 47-bit and @addr + @len &gt; 47-bit</span>
<span class="quote">&gt; + * fails on a 4-level paging machine but succeeds on a 5-level paging</span>
<span class="quote">&gt; + * machine. It is reasonable to expect that an application does not rely on</span>
<span class="quote">&gt; + * the failure of such a fixed mapping request, so the restriction is not</span>
<span class="quote">&gt; + * applied.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +bool mmap_address_hint_valid(unsigned long addr, unsigned long len)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (TASK_SIZE - len &lt; addr)</span>
<span class="quote">&gt; +		return false;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return (addr &gt; DEFAULT_MAP_WINDOW) == (addr + len &gt; DEFAULT_MAP_WINDOW);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.15.0</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h</span>
<span class="p_header">index 3a091cea36c5..0d157d2a1e2a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/elf.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/elf.h</span>
<span class="p_chunk">@@ -309,6 +309,7 @@</span> <span class="p_context"> static inline int mmap_is_ia32(void)</span>
 extern unsigned long task_size_32bit(void);
 extern unsigned long task_size_64bit(int full_addr_space);
 extern unsigned long get_mmap_base(int is_legacy);
<span class="p_add">+extern bool mmap_address_hint_valid(unsigned long addr, unsigned long len);</span>
 
 #ifdef CONFIG_X86_32
 
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index a63fe77b3217..676774b9bb8d 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -188,6 +188,7 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
 
<span class="p_add">+	/* No address checking. See comment at mmap_address_hint_valid() */</span>
 	if (flags &amp; MAP_FIXED)
 		return addr;
 
<span class="p_chunk">@@ -197,12 +198,15 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 
 	/* requesting a specific address */
 	if (addr) {
<span class="p_del">-		addr = PAGE_ALIGN(addr);</span>
<span class="p_add">+		addr &amp;= PAGE_MASK;</span>
<span class="p_add">+		if (!mmap_address_hint_valid(addr, len))</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="p_del">-				(!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="p_add">+		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
 			return addr;
 	}
<span class="p_add">+get_unmapped_area:</span>
 
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 8ae0000cbdb3..00b296617ca4 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -158,6 +158,7 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	if (len &gt; TASK_SIZE)
 		return -ENOMEM;
 
<span class="p_add">+	/* No address checking. See comment at mmap_address_hint_valid() */</span>
 	if (flags &amp; MAP_FIXED) {
 		if (prepare_hugepage_range(file, addr, len))
 			return -EINVAL;
<span class="p_chunk">@@ -165,12 +166,16 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	}
 
 	if (addr) {
<span class="p_del">-		addr = ALIGN(addr, huge_page_size(h));</span>
<span class="p_add">+		addr &amp;= huge_page_mask(h);</span>
<span class="p_add">+		if (!mmap_address_hint_valid(addr, len))</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="p_del">-		    (!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="p_add">+		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
 			return addr;
 	}
<span class="p_add">+</span>
<span class="p_add">+get_unmapped_area:</span>
 	if (mm-&gt;get_unmapped_area == arch_get_unmapped_area)
 		return hugetlb_get_unmapped_area_bottomup(file, addr, len,
 				pgoff, flags);
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index a99679826846..62285fe77b0f 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -174,3 +174,49 @@</span> <span class="p_context"> const char *arch_vma_name(struct vm_area_struct *vma)</span>
 		return &quot;[mpx]&quot;;
 	return NULL;
 }
<span class="p_add">+</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * mmap_address_hint_valid - Validate the address hint of mmap</span>
<span class="p_add">+ * @addr:	Address hint</span>
<span class="p_add">+ * @len:	Mapping length</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Check whether @addr and @addr + @len result in a valid mapping.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * On 32bit this only checks whether @addr + @len is &lt;= TASK_SIZE.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * On 64bit with 5-level page tables another sanity check is required</span>
<span class="p_add">+ * because mappings requested by mmap(@addr, 0) which cross the 47-bit</span>
<span class="p_add">+ * virtual address boundary can cause the following theoretical issue:</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  An application calls mmap(addr, 0), i.e. without MAP_FIXED, where @addr</span>
<span class="p_add">+ *  is below the border of the 47-bit address space and @addr + @len is</span>
<span class="p_add">+ *  above the border.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  With 4-level paging this request succeeds, but the resulting mapping</span>
<span class="p_add">+ *  address will always be within the 47-bit virtual address space, because</span>
<span class="p_add">+ *  the hint address does not result in a valid mapping and is</span>
<span class="p_add">+ *  ignored. Hence applications which are not prepared to handle virtual</span>
<span class="p_add">+ *  addresses above 47-bit work correctly.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ *  With 5-level paging this request would be granted and result in a</span>
<span class="p_add">+ *  mapping which crosses the border of the 47-bit virtual address</span>
<span class="p_add">+ *  space. If the application cannot handle addresses above 47-bit this</span>
<span class="p_add">+ *  will lead to misbehaviour and hard to diagnose failures.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Therefore ignore address hints which would result in a mapping crossing</span>
<span class="p_add">+ * the 47-bit virtual address boundary.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Note, that in the same scenario with MAP_FIXED the behaviour is</span>
<span class="p_add">+ * different. The request with @addr &lt; 47-bit and @addr + @len &gt; 47-bit</span>
<span class="p_add">+ * fails on a 4-level paging machine but succeeds on a 5-level paging</span>
<span class="p_add">+ * machine. It is reasonable to expect that an application does not rely on</span>
<span class="p_add">+ * the failure of such a fixed mapping request, so the restriction is not</span>
<span class="p_add">+ * applied.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool mmap_address_hint_valid(unsigned long addr, unsigned long len)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (TASK_SIZE - len &lt; addr)</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+</span>
<span class="p_add">+	return (addr &gt; DEFAULT_MAP_WINDOW) == (addr + len &gt; DEFAULT_MAP_WINDOW);</span>
<span class="p_add">+}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



