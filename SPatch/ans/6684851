
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] perf tools: Add hugetlbfs memory recognition - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] perf tools: Add hugetlbfs memory recognition</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109021">Hou Pengyang</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 27, 2015, 8:49 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1435394953-146405-1-git-send-email-houpengyang@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6684851/mbox/"
   >mbox</a>
|
   <a href="/patch/6684851/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6684851/">/patch/6684851/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 22B3EC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 27 Jun 2015 08:50:27 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3AE8020688
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 27 Jun 2015 08:50:26 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 48EC620676
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 27 Jun 2015 08:50:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755165AbbF0IuC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 27 Jun 2015 04:50:02 -0400
Received: from szxga02-in.huawei.com ([119.145.14.65]:9587 &quot;EHLO
	szxga02-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752821AbbF0Itu (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 27 Jun 2015 04:49:50 -0400
Received: from 172.24.2.119 (EHLO szxeml430-hub.china.huawei.com)
	([172.24.2.119])
	by szxrg02-dlp.huawei.com (MOS 4.3.7-GA FastPath queued)
	with ESMTP id CNS95308; Sat, 27 Jun 2015 16:49:45 +0800 (CST)
Received: from euler.hulk-profiling (10.107.197.210) by
	szxeml430-hub.china.huawei.com (10.82.67.185) with Microsoft SMTP
	Server id 14.3.158.1; Sat, 27 Jun 2015 16:49:19 +0800
From: Hou Pengyang &lt;houpengyang@huawei.com&gt;
To: &lt;acme@kernel.org&gt;, &lt;mingo@redhat.com&gt;, &lt;namhyung@kernel.org&gt;,
	&lt;a.p.zijlstra@chello.nl&gt;
CC: &lt;wangnan0@huawei.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;zhu.wen-jie@hp.com&gt;
Subject: [RFC] perf tools: Add hugetlbfs memory recognition
Date: Sat, 27 Jun 2015 08:49:13 +0000
Message-ID: &lt;1435394953-146405-1-git-send-email-houpengyang@huawei.com&gt;
X-Mailer: git-send-email 1.8.3.4
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.107.197.210]
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109021">Hou Pengyang</a> - June 27, 2015, 8:49 a.m.</div>
<pre class="content">
Maps for JIT is helpful for symbols-parsing for anon-executable-memory.
What we need to do is to add (START, SIZE, symbolname) to /tmp/perf-%d.map
(%d = pid of process), and perf would parse symbol located in this area
according to /tmp/perf-%d.map. It works well for normal mmap.

However, when we alloc such memory from hugetlbfs by the following code:

......

    fd = open(&quot;/mnt/huge/hugepagefile&quot;, O_CREAT | O_RDWR, 0755);
    if (fd &lt; 0) {
        perror(&quot;Open failed&quot;);
        exit(1);
    }   
    addr = mmap(ADDR, LENGTH, PROT_READ | PROT_WRITE |     \   
        PROT_EXEC, MAP_SHARED, fd, 0); 

......
where hugetlbfs is mounted in /mnt/huge. Symbols could not be parsed correctly:

#perf report
   86.96%     0.00%  hugepage-mmap  hugepagefile      [.] 0xffffffe00000005c      
   86.96%     0.00%  hugepage-mmap  hugepagefile      [.] 0xffffffe0000000ac

This is because such mmap area&#39;s file backed is &quot;/mnt/huge/hugepagefile&quot;, a node 
in pseudo filesystem, it is useless for symbol-parsing. so wo had better recognize 
such hugetlbfs area, and rename it&#39;s filename to /tmp/perf-%d.map, just as anon-memory
and no_dso_memory do. 

This patch imports a new function named is_hugetlb_memory to check if this memory
is from hugetlbfs. If true, change its name.  

After this patch:
#perf report 
   86.96%     0.00%  hugepage-mmap  perf-182.map        [.] 0x000000200000005c 
   86.96%     0.00%  hugepage-mmap  perf-182.map        [.] 0x00000020000000ac

We can add maps info to perf-182.map for further symbols-parsing.
<span class="signed-off-by">
Signed-off-by: Hou Pengyang &lt;houpengyang@huawei.com&gt;</span>
---
 tools/perf/util/map.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109021">Hou Pengyang</a> - June 27, 2015, 9:08 a.m.</div>
<pre class="content">
On 2015/6/27 16:49, Hou Pengyang wrote:
<span class="quote">&gt; Maps for JIT is helpful for symbols-parsing for anon-executable-memory.</span>
<span class="quote">&gt; What we need to do is to add (START, SIZE, symbolname) to /tmp/perf-%d.map</span>
<span class="quote">&gt; (%d = pid of process), and perf would parse symbol located in this area</span>
<span class="quote">&gt; according to /tmp/perf-%d.map. It works well for normal mmap.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; However, when we alloc such memory from hugetlbfs by the following code:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ......</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;      fd = open(&quot;/mnt/huge/hugepagefile&quot;, O_CREAT | O_RDWR, 0755);</span>
<span class="quote">&gt;      if (fd &lt; 0) {</span>
<span class="quote">&gt;          perror(&quot;Open failed&quot;);</span>
<span class="quote">&gt;          exit(1);</span>
<span class="quote">&gt;      }</span>
<span class="quote">&gt;      addr = mmap(ADDR, LENGTH, PROT_READ | PROT_WRITE |     \</span>
<span class="quote">&gt;          PROT_EXEC, MAP_SHARED, fd, 0);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ......</span>
<span class="quote">&gt; where hugetlbfs is mounted in /mnt/huge. Symbols could not be parsed correctly:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; #perf report</span>
<span class="quote">&gt;     86.96%     0.00%  hugepage-mmap  hugepagefile      [.] 0xffffffe00000005c</span>
<span class="quote">&gt;     86.96%     0.00%  hugepage-mmap  hugepagefile      [.] 0xffffffe0000000ac</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This is because such mmap area&#39;s file backed is &quot;/mnt/huge/hugepagefile&quot;, a node</span>
<span class="quote">&gt; in pseudo filesystem, it is useless for symbol-parsing. so wo had better recognize</span>
<span class="quote">&gt; such hugetlbfs area, and rename it&#39;s filename to /tmp/perf-%d.map, just as anon-memory</span>
<span class="quote">&gt; and no_dso_memory do.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch imports a new function named is_hugetlb_memory to check if this memory</span>
<span class="quote">&gt; is from hugetlbfs. If true, change its name.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; After this patch:</span>
<span class="quote">&gt; #perf report</span>
<span class="quote">&gt;     86.96%     0.00%  hugepage-mmap  perf-182.map        [.] 0x000000200000005c</span>
<span class="quote">&gt;     86.96%     0.00%  hugepage-mmap  perf-182.map        [.] 0x00000020000000ac</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We can add maps info to perf-182.map for further symbols-parsing.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Hou Pengyang &lt;houpengyang@huawei.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   tools/perf/util/map.c | 11 +++++++++--</span>
<span class="quote">&gt;   1 file changed, 9 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/tools/perf/util/map.c b/tools/perf/util/map.c</span>
<span class="quote">&gt; index b5a5e9c..796db08 100644</span>
<span class="quote">&gt; --- a/tools/perf/util/map.c</span>
<span class="quote">&gt; +++ b/tools/perf/util/map.c</span>
<span class="quote">&gt; @@ -15,6 +15,7 @@</span>
<span class="quote">&gt;   #include &quot;debug.h&quot;</span>
<span class="quote">&gt;   #include &quot;machine.h&quot;</span>
<span class="quote">&gt;   #include &lt;linux/string.h&gt;</span>
<span class="quote">&gt; +#include &lt;sys/mman.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   static void __maps__insert(struct maps *maps, struct map *map);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -43,6 +44,11 @@ static inline int is_android_lib(const char *filename)</span>
<span class="quote">&gt;   	       !strncmp(filename, &quot;/system/lib&quot;, 11);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static inline int is_hugetlb_memory(u32 flags)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return flags &amp; MAP_HUGETLB;</span>
<span class="quote">&gt; +}</span>

There is something about MAP_HUGETLB.

In this patch, we check if a mmap area is hugetlbfs area by MAP_HUGETLB,
a bit in MMAP2 event.

However, if mmap area is hugetlb related, MAP_HUGETLB does not always 
appear. Because, there are two ways generating MMAP2 event.

1) when a new vm_area_struct is created, its info would be exported
    as a MMAP2 event.
2) perf reads /proc/pid/maps for generating MMAP2 event.

MAP_HUGETLB appears if MMAP2 event is generated on situation 1),
while not on situation 2).

This is because on situation 2), perf reads /proc/pid/maps, which
contains only PROT_READ/WRITE/EXEC, MAP_SHARED/MAP_PRIVATE, while more 
details appear in /proc/pid/smaps, such as MAP_HUGETLB.

So I wonder if there is a need to read /proc/pid/smaps instead of 
/proc/pid/maps to generate MMAP2 event. Or we should solve the problem 
by another way?

Thanks!
<span class="quote">
&gt; +</span>
<span class="quote">&gt;   static inline bool replace_android_lib(const char *filename, char *newfilename)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	const char *libname;</span>
<span class="quote">&gt; @@ -151,12 +157,13 @@ struct map *map__new(struct machine *machine, u64 start, u64 len,</span>
<span class="quote">&gt;   	if (map != NULL) {</span>
<span class="quote">&gt;   		char newfilename[PATH_MAX];</span>
<span class="quote">&gt;   		struct dso *dso;</span>
<span class="quote">&gt; -		int anon, no_dso, vdso, android;</span>
<span class="quote">&gt; +		int anon, no_dso, vdso, android, hugetlb;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   		android = is_android_lib(filename);</span>
<span class="quote">&gt;   		anon = is_anon_memory(filename);</span>
<span class="quote">&gt;   		vdso = is_vdso_map(filename);</span>
<span class="quote">&gt;   		no_dso = is_no_dso_memory(filename);</span>
<span class="quote">&gt; +		hugetlb = is_hugetlb_memory(flags);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   		map-&gt;maj = d_maj;</span>
<span class="quote">&gt;   		map-&gt;min = d_min;</span>
<span class="quote">&gt; @@ -165,7 +172,7 @@ struct map *map__new(struct machine *machine, u64 start, u64 len,</span>
<span class="quote">&gt;   		map-&gt;prot = prot;</span>
<span class="quote">&gt;   		map-&gt;flags = flags;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -		if ((anon || no_dso) &amp;&amp; type == MAP__FUNCTION) {</span>
<span class="quote">&gt; +		if ((anon || no_dso || hugetlb) &amp;&amp; type == MAP__FUNCTION) {</span>
<span class="quote">&gt;   			snprintf(newfilename, sizeof(newfilename), &quot;/tmp/perf-%d.map&quot;, pid);</span>
<span class="quote">&gt;   			filename = newfilename;</span>
<span class="quote">&gt;   		}</span>
<span class="quote">&gt;</span>


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - June 29, 2015, 1:23 p.m.</div>
<pre class="content">
Em Sat, Jun 27, 2015 at 05:08:20PM +0800, Hou Pengyang escreveu:
<span class="quote">&gt; There is something about MAP_HUGETLB.</span>
<span class="quote"> 
&gt; In this patch, we check if a mmap area is hugetlbfs area by MAP_HUGETLB,</span>
<span class="quote">&gt; a bit in MMAP2 event.</span>
<span class="quote"> 
&gt; However, if mmap area is hugetlb related, MAP_HUGETLB does not always</span>
<span class="quote">&gt; appear. Because, there are two ways generating MMAP2 event.</span>
<span class="quote"> 
&gt; 1) when a new vm_area_struct is created, its info would be exported</span>
<span class="quote">&gt;    as a MMAP2 event.</span>
<span class="quote">&gt; 2) perf reads /proc/pid/maps for generating MMAP2 event.</span>
<span class="quote"> 
&gt; MAP_HUGETLB appears if MMAP2 event is generated on situation 1),</span>
<span class="quote">&gt; while not on situation 2).</span>
<span class="quote"> 
&gt; This is because on situation 2), perf reads /proc/pid/maps, which</span>
<span class="quote">&gt; contains only PROT_READ/WRITE/EXEC, MAP_SHARED/MAP_PRIVATE, while more</span>
<span class="quote">&gt; details appear in /proc/pid/smaps, such as MAP_HUGETLB.</span>

Humm:

[root@zoo ~]# wc -l /proc/`pidof firefox`/maps
934 /proc/4551/maps
[root@zoo ~]# wc -l /proc/`pidof firefox`/smaps
14944 /proc/4551/smaps
[root@zoo ~]#
<span class="quote"> 
&gt; So I wonder if there is a need to read /proc/pid/smaps instead of</span>
<span class="quote">&gt; /proc/pid/maps to generate MMAP2 event. Or we should solve the problem by</span>
<span class="quote">&gt; another way?</span>

Doing some research now...

- Arnaldo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - June 29, 2015, 1:42 p.m.</div>
<pre class="content">
Em Mon, Jun 29, 2015 at 10:23:29AM -0300, Arnaldo Carvalho de Melo escreveu:
<span class="quote">&gt; Em Sat, Jun 27, 2015 at 05:08:20PM +0800, Hou Pengyang escreveu:</span>
<span class="quote">&gt; &gt; There is something about MAP_HUGETLB.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; In this patch, we check if a mmap area is hugetlbfs area by MAP_HUGETLB,</span>
<span class="quote">&gt; &gt; a bit in MMAP2 event.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; However, if mmap area is hugetlb related, MAP_HUGETLB does not always</span>
<span class="quote">&gt; &gt; appear. Because, there are two ways generating MMAP2 event.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; 1) when a new vm_area_struct is created, its info would be exported</span>
<span class="quote">&gt; &gt;    as a MMAP2 event.</span>
<span class="quote">&gt; &gt; 2) perf reads /proc/pid/maps for generating MMAP2 event.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; MAP_HUGETLB appears if MMAP2 event is generated on situation 1),</span>
<span class="quote">&gt; &gt; while not on situation 2).</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; This is because on situation 2), perf reads /proc/pid/maps, which</span>
<span class="quote">&gt; &gt; contains only PROT_READ/WRITE/EXEC, MAP_SHARED/MAP_PRIVATE, while more</span>
<span class="quote">&gt; &gt; details appear in /proc/pid/smaps, such as MAP_HUGETLB.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Humm:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [root@zoo ~]# wc -l /proc/`pidof firefox`/maps</span>
<span class="quote">&gt; 934 /proc/4551/maps</span>
<span class="quote">&gt; [root@zoo ~]# wc -l /proc/`pidof firefox`/smaps</span>
<span class="quote">&gt; 14944 /proc/4551/smaps</span>
<span class="quote">&gt; [root@zoo ~]#</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; &gt; So I wonder if there is a need to read /proc/pid/smaps instead of</span>
<span class="quote">&gt; &gt; /proc/pid/maps to generate MMAP2 event. Or we should solve the problem by</span>
<span class="quote">&gt; &gt; another way?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Doing some research now...</span>

Bummer, seems that only smaps -&gt; ... -&gt; show_smap_vma_flags() will
expose that to userspace...

Perhaps we can look at some global stat for HugeTLB fs to figure out if
we really, really need to parse smaps instead of just maps? I.e. in my
system, a desktop one, F21, I have:

[root@zoo ~]# find /proc -name smaps | xargs grep -w ht
grep: /proc/31971/task/31971/smaps: No such file or directory
grep: /proc/31971/smaps: No such file or directory
[root@zoo ~]#

No &quot;ht&quot; HugeTLB areas, so no need to parse 16 times more bytes than by
just using /proc/PID/maps.

- Arnaldo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109021">Hou Pengyang</a> - June 30, 2015, 9:33 a.m.</div>
<pre class="content">
On 2015/6/29 21:42, Arnaldo Carvalho de Melo wrote:
<span class="quote">&gt; Em Mon, Jun 29, 2015 at 10:23:29AM -0300, Arnaldo Carvalho de Melo escreveu:</span>
<span class="quote">&gt;&gt; Em Sat, Jun 27, 2015 at 05:08:20PM +0800, Hou Pengyang escreveu:</span>
<span class="quote">&gt;&gt;&gt; There is something about MAP_HUGETLB.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; In this patch, we check if a mmap area is hugetlbfs area by MAP_HUGETLB,</span>
<span class="quote">&gt;&gt;&gt; a bit in MMAP2 event.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; However, if mmap area is hugetlb related, MAP_HUGETLB does not always</span>
<span class="quote">&gt;&gt;&gt; appear. Because, there are two ways generating MMAP2 event.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; 1) when a new vm_area_struct is created, its info would be exported</span>
<span class="quote">&gt;&gt;&gt;     as a MMAP2 event.</span>
<span class="quote">&gt;&gt;&gt; 2) perf reads /proc/pid/maps for generating MMAP2 event.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; MAP_HUGETLB appears if MMAP2 event is generated on situation 1),</span>
<span class="quote">&gt;&gt;&gt; while not on situation 2).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This is because on situation 2), perf reads /proc/pid/maps, which</span>
<span class="quote">&gt;&gt;&gt; contains only PROT_READ/WRITE/EXEC, MAP_SHARED/MAP_PRIVATE, while more</span>
<span class="quote">&gt;&gt;&gt; details appear in /proc/pid/smaps, such as MAP_HUGETLB.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Humm:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [root@zoo ~]# wc -l /proc/`pidof firefox`/maps</span>
<span class="quote">&gt;&gt; 934 /proc/4551/maps</span>
<span class="quote">&gt;&gt; [root@zoo ~]# wc -l /proc/`pidof firefox`/smaps</span>
<span class="quote">&gt;&gt; 14944 /proc/4551/smaps</span>
<span class="quote">&gt;&gt; [root@zoo ~]#</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; So I wonder if there is a need to read /proc/pid/smaps instead of</span>
<span class="quote">&gt;&gt;&gt; /proc/pid/maps to generate MMAP2 event. Or we should solve the problem by</span>
<span class="quote">&gt;&gt;&gt; another way?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Doing some research now...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Bummer, seems that only smaps -&gt; ... -&gt; show_smap_vma_flags() will</span>
<span class="quote">&gt; expose that to userspace...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Perhaps we can look at some global stat for HugeTLB fs to figure out if</span>
<span class="quote">&gt; we really, really need to parse smaps instead of just maps? I.e. in my</span>
<span class="quote">&gt; system, a desktop one, F21, I have:</span>
<span class="quote">&gt;</span>

It seems no other info tell us if one process is using hugetlbfs.
So how about an option to tell perf explicitly which file is from
hugetlbfs, like:

./perf report --hugetlb-file=/mnt/huge/hugepagefile

So that, we can check if a mmap area is from hugetlbfs by its name
instead of MAP_HUGETLB.
<span class="quote">
&gt; [root@zoo ~]# find /proc -name smaps | xargs grep -w ht</span>
<span class="quote">&gt; grep: /proc/31971/task/31971/smaps: No such file or directory</span>
<span class="quote">&gt; grep: /proc/31971/smaps: No such file or directory</span>
<span class="quote">&gt; [root@zoo ~]#</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; No &quot;ht&quot; HugeTLB areas, so no need to parse 16 times more bytes than by</span>
<span class="quote">&gt; just using /proc/PID/maps.</span>
<span class="quote">


&gt;</span>
<span class="quote">&gt; - Arnaldo</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in</span>
<span class="quote">&gt; the body of a message to majordomo@vger.kernel.org</span>
<span class="quote">&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html</span>
<span class="quote">&gt; Please read the FAQ at  http://www.tux.org/lkml/</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; .</span>
<span class="quote">&gt;</span>


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - June 30, 2015, 2:50 p.m.</div>
<pre class="content">
Em Tue, Jun 30, 2015 at 05:33:05PM +0800, Hou Pengyang escreveu:
<span class="quote">&gt; On 2015/6/29 21:42, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt;Em Mon, Jun 29, 2015 at 10:23:29AM -0300, Arnaldo Carvalho de Melo escreveu:</span>
<span class="quote">&gt; &gt;&gt;Em Sat, Jun 27, 2015 at 05:08:20PM +0800, Hou Pengyang escreveu:</span>
<span class="quote">&gt; &gt;&gt;&gt;So I wonder if there is a need to read /proc/pid/smaps instead of</span>
<span class="quote">&gt; &gt;&gt;&gt;/proc/pid/maps to generate MMAP2 event. Or we should solve the problem by</span>
<span class="quote">&gt; &gt;&gt;&gt;another way?</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;Doing some research now...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Bummer, seems that only smaps -&gt; ... -&gt; show_smap_vma_flags() will</span>
<span class="quote">&gt; &gt;expose that to userspace...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Perhaps we can look at some global stat for HugeTLB fs to figure out if</span>
<span class="quote">&gt; &gt;we really, really need to parse smaps instead of just maps? I.e. in my</span>
<span class="quote">&gt; &gt;system, a desktop one, F21, I have:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It seems no other info tell us if one process is using hugetlbfs.</span>
<span class="quote">&gt; So how about an option to tell perf explicitly which file is from</span>
<span class="quote">&gt; hugetlbfs, like:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ./perf report --hugetlb-file=/mnt/huge/hugepagefile</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So that, we can check if a mmap area is from hugetlbfs by its name</span>
<span class="quote">&gt; instead of MAP_HUGETLB.</span>

Well, we _can_ detect this automatically, its just a matter of parsing
/proc/PID/smaps, right?

What I was discussing was a way only parse smaps when we know we need
to, i.e. when we, for instance, parsing /proc/PID/maps, find a map that
we think may be a hugetlb one, maybe some other way to tell us that
hugetlb maps are in place, looking at the hugetlbfs stats somehow?

- Arnaldo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109021">Hou Pengyang</a> - July 3, 2015, 10:21 a.m.</div>
<pre class="content">
On 2015/6/30 22:50, Arnaldo Carvalho de Melo wrote:
<span class="quote">&gt; Em Tue, Jun 30, 2015 at 05:33:05PM +0800, Hou Pengyang escreveu:</span>
<span class="quote">&gt;&gt; On 2015/6/29 21:42, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt;&gt;&gt; Em Mon, Jun 29, 2015 at 10:23:29AM -0300, Arnaldo Carvalho de Melo escreveu:</span>
<span class="quote">&gt;&gt;&gt;&gt; Em Sat, Jun 27, 2015 at 05:08:20PM +0800, Hou Pengyang escreveu:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; So I wonder if there is a need to read /proc/pid/smaps instead of</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; /proc/pid/maps to generate MMAP2 event. Or we should solve the problem by</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; another way?</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Doing some research now...</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Bummer, seems that only smaps -&gt; ... -&gt; show_smap_vma_flags() will</span>
<span class="quote">&gt;&gt;&gt; expose that to userspace...</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Perhaps we can look at some global stat for HugeTLB fs to figure out if</span>
<span class="quote">&gt;&gt;&gt; we really, really need to parse smaps instead of just maps? I.e. in my</span>
<span class="quote">&gt;&gt;&gt; system, a desktop one, F21, I have:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It seems no other info tell us if one process is using hugetlbfs.</span>
<span class="quote">&gt;&gt; So how about an option to tell perf explicitly which file is from</span>
<span class="quote">&gt;&gt; hugetlbfs, like:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ./perf report --hugetlb-file=/mnt/huge/hugepagefile</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; So that, we can check if a mmap area is from hugetlbfs by its name</span>
<span class="quote">&gt;&gt; instead of MAP_HUGETLB.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Well, we _can_ detect this automatically, its just a matter of parsing</span>
<span class="quote">&gt; /proc/PID/smaps, right?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What I was discussing was a way only parse smaps when we know we need</span>
<span class="quote">&gt; to, i.e. when we, for instance, parsing /proc/PID/maps, find a map that</span>
<span class="quote">&gt; we think may be a hugetlb one, maybe some other way to tell us that</span>
<span class="quote">&gt; hugetlb maps are in place, looking at the hugetlbfs stats somehow?</span>
<span class="quote">&gt;</span>

Another solution, we can parse /proc/self/mounts. Here is the
/proc/self/mounts in my system:

.....
/dev/root / ext2 rw,relatime,errors=remount-ro 0 0
tracefs /sys/kernel/debug/tracing tracefs rw,relatime 0 0
nodev /mnt/huge hugetlbfs rw,relatime 0 0
....

from /proc/self/mounts, we can get mount point of hugetlbfs.
in my system, it is &quot;/mnt/huge&quot;. So that, when mmap2 event
comes from userspace, we can compare prefix of filename with
hugetlbfs mount point (e.g &quot;/mnt/huge&quot;) to check if it is a
file in hugetlbfs. if it is, set MAP_HUGELTB, otherwise, not set.

There is no need to parse /proc/PID/smaps now, what&#39;s more,
it is not difficult to parse &quot;/proc/self/mounts&quot;.
<span class="quote">
&gt; - Arnaldo</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; .</span>
<span class="quote">&gt;</span>


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=91481">Arnaldo Carvalho de Melo</a> - July 3, 2015, 3:16 p.m.</div>
<pre class="content">
Em Fri, Jul 03, 2015 at 06:21:48PM +0800, Hou Pengyang escreveu:
<span class="quote">&gt; On 2015/6/30 22:50, Arnaldo Carvalho de Melo wrote:</span>
<span class="quote">&gt; &gt;Well, we _can_ detect this automatically, its just a matter of parsing</span>
<span class="quote">&gt; &gt;/proc/PID/smaps, right?</span>

&lt;SNIP&gt;
<span class="quote">
&gt; &gt;What I was discussing was a way only parse smaps when we know we need</span>
<span class="quote">&gt; &gt;to, i.e. when we, for instance, parsing /proc/PID/maps, find a map that</span>
<span class="quote">&gt; &gt;we think may be a hugetlb one, maybe some other way to tell us that</span>
<span class="quote">&gt; &gt;hugetlb maps are in place, looking at the hugetlbfs stats somehow?</span>

&lt;SNIP&gt;
<span class="quote">
&gt; from /proc/self/mounts, we can get mount point of hugetlbfs.</span>
<span class="quote">&gt; in my system, it is &quot;/mnt/huge&quot;. So that, when mmap2 event</span>
<span class="quote">&gt; comes from userspace, we can compare prefix of filename with</span>
<span class="quote">&gt; hugetlbfs mount point (e.g &quot;/mnt/huge&quot;) to check if it is a</span>
<span class="quote">&gt; file in hugetlbfs. if it is, set MAP_HUGELTB, otherwise, not set.</span>
<span class="quote"> 
&gt; There is no need to parse /proc/PID/smaps now, what&#39;s more,</span>
<span class="quote">&gt; it is not difficult to parse &quot;/proc/self/mounts&quot;.</span>

A-ha! please take a look at using the find_mountpoint() function
in tools/lib/api/fs/, I guess that should be enough for you?

- Arnaldo
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/util/map.c b/tools/perf/util/map.c</span>
<span class="p_header">index b5a5e9c..796db08 100644</span>
<span class="p_header">--- a/tools/perf/util/map.c</span>
<span class="p_header">+++ b/tools/perf/util/map.c</span>
<span class="p_chunk">@@ -15,6 +15,7 @@</span> <span class="p_context"></span>
 #include &quot;debug.h&quot;
 #include &quot;machine.h&quot;
 #include &lt;linux/string.h&gt;
<span class="p_add">+#include &lt;sys/mman.h&gt;</span>
 
 static void __maps__insert(struct maps *maps, struct map *map);
 
<span class="p_chunk">@@ -43,6 +44,11 @@</span> <span class="p_context"> static inline int is_android_lib(const char *filename)</span>
 	       !strncmp(filename, &quot;/system/lib&quot;, 11);
 }
 
<span class="p_add">+static inline int is_hugetlb_memory(u32 flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return flags &amp; MAP_HUGETLB;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline bool replace_android_lib(const char *filename, char *newfilename)
 {
 	const char *libname;
<span class="p_chunk">@@ -151,12 +157,13 @@</span> <span class="p_context"> struct map *map__new(struct machine *machine, u64 start, u64 len,</span>
 	if (map != NULL) {
 		char newfilename[PATH_MAX];
 		struct dso *dso;
<span class="p_del">-		int anon, no_dso, vdso, android;</span>
<span class="p_add">+		int anon, no_dso, vdso, android, hugetlb;</span>
 
 		android = is_android_lib(filename);
 		anon = is_anon_memory(filename);
 		vdso = is_vdso_map(filename);
 		no_dso = is_no_dso_memory(filename);
<span class="p_add">+		hugetlb = is_hugetlb_memory(flags);</span>
 
 		map-&gt;maj = d_maj;
 		map-&gt;min = d_min;
<span class="p_chunk">@@ -165,7 +172,7 @@</span> <span class="p_context"> struct map *map__new(struct machine *machine, u64 start, u64 len,</span>
 		map-&gt;prot = prot;
 		map-&gt;flags = flags;
 
<span class="p_del">-		if ((anon || no_dso) &amp;&amp; type == MAP__FUNCTION) {</span>
<span class="p_add">+		if ((anon || no_dso || hugetlb) &amp;&amp; type == MAP__FUNCTION) {</span>
 			snprintf(newfilename, sizeof(newfilename), &quot;/tmp/perf-%d.map&quot;, pid);
 			filename = newfilename;
 		}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



