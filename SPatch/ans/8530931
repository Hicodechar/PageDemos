
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC/PATCH,2/4] dma-mapping: Add dma_remap() APIs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC/PATCH,2/4] dma-mapping: Add dma_remap() APIs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=157651">Stephen Boyd</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 8, 2016, 9:22 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1457428939-26659-3-git-send-email-stephen.boyd@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8530931/mbox/"
   >mbox</a>
|
   <a href="/patch/8530931/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8530931/">/patch/8530931/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id B5B849F8A8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:56 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id EBBFE2015E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:55 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id F4006201C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Mar 2016 09:22:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932753AbcCHJWo (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 8 Mar 2016 04:22:44 -0500
Received: from mail-pf0-f175.google.com ([209.85.192.175]:34811 &quot;EHLO
	mail-pf0-f175.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753497AbcCHJWe (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 8 Mar 2016 04:22:34 -0500
Received: by mail-pf0-f175.google.com with SMTP id 129so8884802pfw.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 08 Mar 2016 01:22:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linaro.org; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=552ecVcUDY6FcodUfla5SI/hn/bxgvVQBqkrNvwvXZU=;
	b=YrG7weEMgd4gIw+cDwFi542d2cHhk5psi/8TLkCTdg8pVXVRAi0r23CfW9NSi4IkYt
	ufwhj57CFfQACOer/tehTMRKfFTMjKVFrsrmnhKncOwu/A5nMf0/CmWhfT/MohOO5xTW
	N1DnKU+hMAy6miVZHuwsYn3fJpzwxQpBZhKH0=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=552ecVcUDY6FcodUfla5SI/hn/bxgvVQBqkrNvwvXZU=;
	b=acy0xnwqxAyWAcD+YJKZyPkO5bEOFjTmaVBa4iIkgKt1AJBYtJ53E7xw4njQBWCQwu
	4la692d7sd9VzR7b5F1rLMdCI0q9a/NoA0FZ04wtJwsv/Y17SpAmByHaAGnPz0wHoy7r
	MBV4rvf7Vc9eMARv+jQIHFBTjR/2EpzaT+puJpgRFRKgkuso47SMjxtSRGT3gYBMsjSR
	bR/acytlTvc2MG5hQ03seyddOY5LiFva42rqExcSSlxGJcZK6TrLJeLWMObJDIIOpmgm
	r1N4+f4A0FbPrGWTCAfuzdmeiZEVelGPVX47gzI7rtVy6L6W4RtIuhdySapunCTKmu58
	nY+Q==
X-Gm-Message-State: AD7BkJIjIzTe8RJDPAGIj6xUbnx94CaAcQhIVvtRbOGnrlihKb/Edc+U51E9sVqcGen+qkNF
X-Received: by 10.98.73.88 with SMTP id w85mr24839871pfa.82.1457428953274;
	Tue, 08 Mar 2016 01:22:33 -0800 (PST)
Received: from localhost.localdomain (110-170-137-3.static.asianet.co.th.
	[110.170.137.3]) by smtp.gmail.com with ESMTPSA id
	i11sm3330224pfi.55.2016.03.08.01.22.29
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 08 Mar 2016 01:22:32 -0800 (PST)
From: Stephen Boyd &lt;stephen.boyd@linaro.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Laura Abbott &lt;lauraa@codeaurora.org&gt;, linux-arm@lists.infradead.org,
	Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	Mimi Zohar &lt;zohar@linux.vnet.ibm.com&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;, Laura Abbott &lt;labbott@redhat.com&gt;,
	Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mark Brown &lt;broonie@kernel.org&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;
Subject: [RFC/PATCH 2/4] dma-mapping: Add dma_remap() APIs
Date: Tue,  8 Mar 2016 16:22:17 +0700
Message-Id: &lt;1457428939-26659-3-git-send-email-stephen.boyd@linaro.org&gt;
X-Mailer: git-send-email 2.7.0.25.gfc10eb5
In-Reply-To: &lt;1457428939-26659-1-git-send-email-stephen.boyd@linaro.org&gt;
References: &lt;1457428939-26659-1-git-send-email-stephen.boyd@linaro.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI, RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=157651">Stephen Boyd</a> - March 8, 2016, 9:22 a.m.</div>
<pre class="content">
<span class="from">From: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>

Some systems are memory constrained but they need to load very
large firmwares. The firmware subsystem allows drivers to request
this firmware be loaded from the filesystem, but this requires
that the entire firmware be loaded into kernel memory first
before it&#39;s provided to the driver. This can lead to a situation
where we map the firmware twice, once to load the firmware into
kernel memory and once to copy the firmware into the final
resting place.

This design creates needless memory pressure and delays loading
because we have to copy from kernel memory to somewhere else.
Let&#39;s add a couple DMA APIs that allow us to map DMA buffers into
the CPU&#39;s address space in arbitrary sizes. With this API, we can
allocate a DMA buffer with DMA_ATTR_NO_KERNEL_MAPPING and move a
small mapping window across our large DMA buffer to load the
firmware directly into buffer.

Cc: Robin Murphy &lt;robin.murphy@arm.com&gt;
Cc: Arnd Bergmann &lt;arnd@arndb.de&gt;
Cc: Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;
Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Cc: Will Deacon &lt;will.deacon@arm.com&gt;
<span class="signed-off-by">Signed-off-by: Laura Abbott &lt;lauraa@codeaurora.org&gt;</span>
[stephen.boyd@linaro.org: Add dma_attrs and offset to API, use
dma_common_contiguous_remap() instead of ioremap_page_range(),
support dma_remap() even when DMA_ATTR_NO_KERNEL_MAPPING isn&#39;t
specified, rewrite commit text]
<span class="signed-off-by">Signed-off-by: Stephen Boyd &lt;stephen.boyd@linaro.org&gt;</span>
---

TODO: Split off arm64 part into own patch?

 arch/arm64/mm/dma-mapping.c | 39 +++++++++++++++++++++++++++++++++++++++
 include/linux/dma-mapping.h | 35 +++++++++++++++++++++++++++++++++++
 2 files changed, 74 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 06a593653f23..92a313a7309b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -345,6 +345,43 @@</span> <span class="p_context"> static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
 	return ret;
 }
 
<span class="p_add">+static void *arm64_dma_remap(struct device *dev, void *cpu_addr,</span>
<span class="p_add">+			     dma_addr_t handle, size_t size,</span>
<span class="p_add">+			     unsigned long offset, struct dma_attrs *attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page *page = phys_to_page(dma_to_phys(dev, handle) + offset);</span>
<span class="p_add">+	bool coherent = is_device_dma_coherent(dev);</span>
<span class="p_add">+	pgprot_t prot = __get_dma_pgprot(attrs, PAGE_KERNEL, coherent);</span>
<span class="p_add">+	void *ptr;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs)) {</span>
<span class="p_add">+		offset &amp;= ~PAGE_MASK;</span>
<span class="p_add">+		size = PAGE_ALIGN(size + offset);</span>
<span class="p_add">+</span>
<span class="p_add">+		ptr = dma_common_contiguous_remap(page, size, VM_USERMAP, prot,</span>
<span class="p_add">+						  NULL);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		ptr = cpu_addr;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (!ptr)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ptr + offset;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void arm64_dma_unremap(struct device *dev, void *cpu_addr,</span>
<span class="p_add">+			      size_t size, unsigned long offset,</span>
<span class="p_add">+			      struct dma_attrs *attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!dma_get_attr(DMA_ATTR_NO_KERNEL_MAPPING, attrs))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	offset &amp;= ~PAGE_MASK;</span>
<span class="p_add">+	cpu_addr -= offset;</span>
<span class="p_add">+</span>
<span class="p_add">+	vunmap(cpu_addr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct dma_map_ops swiotlb_dma_ops = {
 	.alloc = __dma_alloc,
 	.free = __dma_free,
<span class="p_chunk">@@ -360,6 +397,8 @@</span> <span class="p_context"> static struct dma_map_ops swiotlb_dma_ops = {</span>
 	.sync_sg_for_device = __swiotlb_sync_sg_for_device,
 	.dma_supported = swiotlb_dma_supported,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_add">+	.remap = arm64_dma_remap,</span>
<span class="p_add">+	.unremap = arm64_dma_unremap,</span>
 };
 
 static int __init atomic_pool_init(void)
<span class="p_header">diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h</span>
<span class="p_header">index 75857cda38e9..d4ae45746d61 100644</span>
<span class="p_header">--- a/include/linux/dma-mapping.h</span>
<span class="p_header">+++ b/include/linux/dma-mapping.h</span>
<span class="p_chunk">@@ -64,6 +64,12 @@</span> <span class="p_context"> struct dma_map_ops {</span>
 	int (*mapping_error)(struct device *dev, dma_addr_t dma_addr);
 	int (*dma_supported)(struct device *dev, u64 mask);
 	int (*set_dma_mask)(struct device *dev, u64 mask);
<span class="p_add">+	void *(*remap)(struct device *dev, void *cpu_addr, dma_addr_t handle,</span>
<span class="p_add">+			size_t size, unsigned long offset,</span>
<span class="p_add">+			struct dma_attrs *attrs);</span>
<span class="p_add">+	void (*unremap)(struct device *dev, void *cpu_addr,</span>
<span class="p_add">+			size_t size, unsigned long offset,</span>
<span class="p_add">+			struct dma_attrs *attrs);</span>
 #ifdef ARCH_HAS_DMA_GET_REQUIRED_MASK
 	u64 (*get_required_mask)(struct device *dev);
 #endif
<span class="p_chunk">@@ -465,6 +471,35 @@</span> <span class="p_context"> static inline int dma_set_mask(struct device *dev, u64 mask)</span>
 }
 #endif
 
<span class="p_add">+static inline void *dma_remap(struct device *dev, void *cpu_addr,</span>
<span class="p_add">+		dma_addr_t dma_handle, size_t size, unsigned long offset,</span>
<span class="p_add">+		struct dma_attrs *attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!ops)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+	if (!ops-&gt;remap)</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ops-&gt;remap(dev, cpu_addr, dma_handle, size, offset, attrs);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void dma_unremap(struct device *dev, void *remapped_addr,</span>
<span class="p_add">+				size_t size, unsigned long offset,</span>
<span class="p_add">+				struct dma_attrs *attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const struct dma_map_ops *ops = get_dma_ops(dev);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!ops)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	if (!ops-&gt;unremap)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ops-&gt;unremap(dev, remapped_addr, size, offset, attrs);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline u64 dma_get_mask(struct device *dev)
 {
 	if (dev &amp;&amp; dev-&gt;dma_mask &amp;&amp; *dev-&gt;dma_mask)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



