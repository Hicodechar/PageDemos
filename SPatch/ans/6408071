
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,15/23] xen/balloon: Don&#39;t rely on the page granularity is the same for Xen and Linux - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,15/23] xen/balloon: Don&#39;t rely on the page granularity is the same for Xen and Linux</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72882">Julien Grall</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 14, 2015, 5 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1431622863-28575-16-git-send-email-julien.grall@citrix.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6408071/mbox/"
   >mbox</a>
|
   <a href="/patch/6408071/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6408071/">/patch/6408071/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id C22539F318
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 May 2015 17:18:52 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id BEFC720397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 May 2015 17:18:51 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8E48D20328
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 14 May 2015 17:18:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753523AbbENRSV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 14 May 2015 13:18:21 -0400
Received: from smtp02.citrix.com ([66.165.176.63]:64027 &quot;EHLO
	SMTP02.CITRIX.COM&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S964804AbbENRSP (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 14 May 2015 13:18:15 -0400
X-IronPort-AV: E=Sophos;i=&quot;5.13,430,1427760000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;265173386&quot;
From: Julien Grall &lt;julien.grall@citrix.com&gt;
To: &lt;xen-devel@lists.xenproject.org&gt;
CC: &lt;linux-arm-kernel@lists.infradead.org&gt;, &lt;ian.campbell@citrix.com&gt;,
	&lt;stefano.stabellini@eu.citrix.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;tim@xen.org&gt;, Julien Grall &lt;julien.grall@citrix.com&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	&quot;David Vrabel&quot; &lt;david.vrabel@citrix.com&gt;, Wei Liu &lt;wei.liu2@citrix.com&gt;
Subject: [RFC 15/23] xen/balloon: Don&#39;t rely on the page granularity is the
	same for Xen and Linux
Date: Thu, 14 May 2015 18:00:55 +0100
Message-ID: &lt;1431622863-28575-16-git-send-email-julien.grall@citrix.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1431622863-28575-1-git-send-email-julien.grall@citrix.com&gt;
References: &lt;1431622863-28575-1-git-send-email-julien.grall@citrix.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-DLP: MIA1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72882">Julien Grall</a> - May 14, 2015, 5 p.m.</div>
<pre class="content">
For ARM64 guests, Linux is able to support either 64K or 4K page
granularity. Although, the hypercall interface is always based on 4K
page granularity.

With 64K page granuliarty, a single page will be spread over multiple
Xen frame.

When a driver request/free a balloon page, the balloon driver will have
to split the Linux page in 4K chunk before asking Xen to add/remove the
frame from the guest.

Note that this can work on any page granularity assuming it&#39;s a multiple
of 4K.
<span class="signed-off-by">
Signed-off-by: Julien Grall &lt;julien.grall@citrix.com&gt;</span>
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;
Cc: Wei Liu &lt;wei.liu2@citrix.com&gt;

---

TODO/LIMITATIONS:
    - When CONFIG_XEN_HAVE_PMMU only 4K page granularity is supported
    - It may be possible to extend the concept for ballooning 2M/1G
    page.
---
 drivers/xen/balloon.c | 93 +++++++++++++++++++++++++++++++++------------------
 1 file changed, 60 insertions(+), 33 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=38901">David Vrabel</a> - May 19, 2015, 3:23 p.m.</div>
<pre class="content">
On 14/05/15 18:00, Julien Grall wrote:
<span class="quote">&gt; For ARM64 guests, Linux is able to support either 64K or 4K page</span>
<span class="quote">&gt; granularity. Although, the hypercall interface is always based on 4K</span>
<span class="quote">&gt; page granularity.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With 64K page granuliarty, a single page will be spread over multiple</span>
<span class="quote">&gt; Xen frame.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When a driver request/free a balloon page, the balloon driver will have</span>
<span class="quote">&gt; to split the Linux page in 4K chunk before asking Xen to add/remove the</span>
<span class="quote">&gt; frame from the guest.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that this can work on any page granularity assuming it&#39;s a multiple</span>
<span class="quote">&gt; of 4K.</span>
[...]
<span class="quote">&gt; --- a/drivers/xen/balloon.c</span>
<span class="quote">&gt; +++ b/drivers/xen/balloon.c</span>
<span class="quote">&gt; @@ -91,7 +91,7 @@ struct balloon_stats balloon_stats;</span>
<span class="quote">&gt;  EXPORT_SYMBOL_GPL(balloon_stats);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* We increase/decrease in batches which fit in a page */</span>
<span class="quote">&gt; -static xen_pfn_t frame_list[PAGE_SIZE / sizeof(unsigned long)];</span>
<span class="quote">&gt; +static xen_pfn_t frame_list[XEN_PAGE_SIZE / sizeof(unsigned long)];</span>

PAGE_SIZE is appropriate here, since this is a guest-side array.
<span class="quote">
&gt; +		if (!(i % XEN_PFN_PER_PAGE)) {</span>

Ick.  Can you refactor this into a loop per page calling a function that
loops per MFN.

Also similar tests elsewhere.

David
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c</span>
<span class="p_header">index fd93369..f0d8666 100644</span>
<span class="p_header">--- a/drivers/xen/balloon.c</span>
<span class="p_header">+++ b/drivers/xen/balloon.c</span>
<span class="p_chunk">@@ -91,7 +91,7 @@</span> <span class="p_context"> struct balloon_stats balloon_stats;</span>
 EXPORT_SYMBOL_GPL(balloon_stats);
 
 /* We increase/decrease in batches which fit in a page */
<span class="p_del">-static xen_pfn_t frame_list[PAGE_SIZE / sizeof(unsigned long)];</span>
<span class="p_add">+static xen_pfn_t frame_list[XEN_PAGE_SIZE / sizeof(unsigned long)];</span>
 
 
 /* List of ballooned pages, threaded through the mem_map array. */
<span class="p_chunk">@@ -326,7 +326,7 @@</span> <span class="p_context"> static enum bp_state reserve_additional_memory(long credit)</span>
 static enum bp_state increase_reservation(unsigned long nr_pages)
 {
 	int rc;
<span class="p_del">-	unsigned long  pfn, i;</span>
<span class="p_add">+	unsigned long  pfn, i, nr_frames;</span>
 	struct page   *page;
 	struct xen_memory_reservation reservation = {
 		.address_bits = 0,
<span class="p_chunk">@@ -343,30 +343,43 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 	}
 #endif
 
<span class="p_del">-	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="p_del">-		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="p_add">+	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="p_add">+		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
<span class="p_add">+</span>
<span class="p_add">+	nr_frames = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="p_add">+</span>
<span class="p_add">+	pfn = 0; /* make gcc happy */</span>
 
 	page = list_first_entry_or_null(&amp;ballooned_pages, struct page, lru);
<span class="p_del">-	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="p_del">-		if (!page) {</span>
<span class="p_del">-			nr_pages = i;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	for (i = 0; i &lt; nr_frames; i++) {</span>
<span class="p_add">+		if (!(i % XEN_PFN_PER_PAGE)) {</span>
<span class="p_add">+			if (!page) {</span>
<span class="p_add">+				nr_frames = i;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			pfn = xen_page_to_pfn(page);</span>
<span class="p_add">+			page = balloon_next_page(page);</span>
 		}
<span class="p_del">-		frame_list[i] = page_to_pfn(page);</span>
<span class="p_del">-		page = balloon_next_page(page);</span>
<span class="p_add">+		frame_list[i] = pfn++;</span>
 	}
 
 	set_xen_guest_handle(reservation.extent_start, frame_list);
<span class="p_del">-	reservation.nr_extents = nr_pages;</span>
<span class="p_add">+	reservation.nr_extents = nr_frames;</span>
 	rc = HYPERVISOR_memory_op(XENMEM_populate_physmap, &amp;reservation);
 	if (rc &lt;= 0)
 		return BP_EAGAIN;
 
 	for (i = 0; i &lt; rc; i++) {
<span class="p_del">-		page = balloon_retrieve(false);</span>
<span class="p_del">-		BUG_ON(page == NULL);</span>
 
<span class="p_del">-		pfn = page_to_pfn(page);</span>
<span class="p_add">+		/* TODO: Make this code cleaner to make CONFIG_XEN_HAVE_PVMMU</span>
<span class="p_add">+		 * with 64K Pages</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (!(i % XEN_PFN_PER_PAGE)) {</span>
<span class="p_add">+			page = balloon_retrieve(false);</span>
<span class="p_add">+			BUG_ON(page == NULL);</span>
<span class="p_add">+</span>
<span class="p_add">+			pfn = page_to_pfn(page);</span>
<span class="p_add">+		}</span>
 
 #ifdef CONFIG_XEN_HAVE_PVMMU
 		if (!xen_feature(XENFEAT_auto_translated_physmap)) {
<span class="p_chunk">@@ -385,7 +398,8 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 #endif
 
 		/* Relinquish the page back to the allocator. */
<span class="p_del">-		__free_reserved_page(page);</span>
<span class="p_add">+		if (!(i % XEN_PFN_PER_PAGE))</span>
<span class="p_add">+			__free_reserved_page(page);</span>
 	}
 
 	balloon_stats.current_pages += rc;
<span class="p_chunk">@@ -396,7 +410,7 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)
 {
 	enum bp_state state = BP_DONE;
<span class="p_del">-	unsigned long  pfn, i;</span>
<span class="p_add">+	unsigned long  pfn, i, nr_frames;</span>
 	struct page   *page;
 	int ret;
 	struct xen_memory_reservation reservation = {
<span class="p_chunk">@@ -414,19 +428,27 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 	}
 #endif
 
<span class="p_del">-	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="p_del">-		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="p_add">+	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="p_add">+		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
 
<span class="p_del">-	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="p_del">-		page = alloc_page(gfp);</span>
<span class="p_del">-		if (page == NULL) {</span>
<span class="p_del">-			nr_pages = i;</span>
<span class="p_del">-			state = BP_EAGAIN;</span>
<span class="p_del">-			break;</span>
<span class="p_add">+	nr_frames = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="p_add">+</span>
<span class="p_add">+	pfn = 0; /* Make GCC happy */</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; nr_frames; i++) {</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!(i % XEN_PFN_PER_PAGE)) {</span>
<span class="p_add">+			page = alloc_page(gfp);</span>
<span class="p_add">+			if (page == NULL) {</span>
<span class="p_add">+				nr_frames = i;</span>
<span class="p_add">+				state = BP_EAGAIN;</span>
<span class="p_add">+				break;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			scrub_page(page);</span>
<span class="p_add">+			pfn = xen_page_to_pfn(page);</span>
 		}
<span class="p_del">-		scrub_page(page);</span>
 
<span class="p_del">-		frame_list[i] = page_to_pfn(page);</span>
<span class="p_add">+		frame_list[i] = pfn++;</span>
 	}
 
 	/*
<span class="p_chunk">@@ -439,16 +461,20 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 	kmap_flush_unused();
 
 	/* Update direct mapping, invalidate P2M, and add to balloon. */
<span class="p_del">-	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="p_add">+	for (i = 0; i &lt; nr_frames; i++) {</span>
 		pfn = frame_list[i];
 		frame_list[i] = pfn_to_mfn(pfn);
<span class="p_del">-		page = pfn_to_page(pfn);</span>
<span class="p_add">+		page = xen_pfn_to_page(pfn);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* TODO: Make this code cleaner to make CONFIG_XEN_HAVE_PVMMU</span>
<span class="p_add">+		 * work with 64K pages</span>
<span class="p_add">+		 */</span>
 
 #ifdef CONFIG_XEN_HAVE_PVMMU
 		if (!xen_feature(XENFEAT_auto_translated_physmap)) {
 			if (!PageHighMem(page)) {
 				ret = HYPERVISOR_update_va_mapping(
<span class="p_del">-						(unsigned long)__va(pfn &lt;&lt; PAGE_SHIFT),</span>
<span class="p_add">+						(unsigned long)__va(pfn &lt;&lt; XEN_PAGE_SHIFT),</span>
 						__pte_ma(0), 0);
 				BUG_ON(ret);
 			}
<span class="p_chunk">@@ -456,17 +482,18 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 		}
 #endif
 
<span class="p_del">-		balloon_append(page);</span>
<span class="p_add">+		if (!(i % XEN_PFN_PER_PAGE))</span>
<span class="p_add">+			balloon_append(page);</span>
 	}
 
 	flush_tlb_all();
 
 	set_xen_guest_handle(reservation.extent_start, frame_list);
<span class="p_del">-	reservation.nr_extents   = nr_pages;</span>
<span class="p_add">+	reservation.nr_extents   = nr_frames;</span>
 	ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation, &amp;reservation);
<span class="p_del">-	BUG_ON(ret != nr_pages);</span>
<span class="p_add">+	BUG_ON(ret != nr_frames);</span>
 
<span class="p_del">-	balloon_stats.current_pages -= nr_pages;</span>
<span class="p_add">+	balloon_stats.current_pages -= nr_frames * XEN_PFN_PER_PAGE;</span>
 
 	return state;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



