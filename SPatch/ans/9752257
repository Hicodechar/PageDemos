
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:efi/urgent] x86/efi: Correct EFI identity mapping under &#39;efi=old_map&#39; when KASLR is enabled - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:efi/urgent] x86/efi: Correct EFI identity mapping under &#39;efi=old_map&#39; when KASLR is enabled</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 28, 2017, 9:45 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-94133e46a0f5ca3f138479806104ab4a8cb0455e@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9752257/mbox/"
   >mbox</a>
|
   <a href="/patch/9752257/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9752257/">/patch/9752257/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	003FA60249 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 28 May 2017 09:53:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F3E1828415
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 28 May 2017 09:53:11 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E6FED28455; Sun, 28 May 2017 09:53:11 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2745328415
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 28 May 2017 09:53:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751143AbdE1JxH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 28 May 2017 05:53:07 -0400
Received: from terminus.zytor.com ([65.50.211.136]:55103 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750970AbdE1JxG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 28 May 2017 05:53:06 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v4S9k0XT016174;
	Sun, 28 May 2017 02:46:00 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v4S9jxMr016168;
	Sun, 28 May 2017 02:45:59 -0700
Date: Sun, 28 May 2017 02:45:59 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Baoquan He &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-94133e46a0f5ca3f138479806104ab4a8cb0455e@git.kernel.org&gt;
Cc: tglx@linutronix.de, keescook@chromium.org, peterz@infradead.org,
	bp@alien8.de, mingo@kernel.org, frank.ramsay@hpe.com,
	dyoung@redhat.com, bhsharma@redhat.com,
	linux-kernel@vger.kernel.org, matt@codeblueprint.co.uk,
	bhe@redhat.com, ard.biesheuvel@linaro.org,
	torvalds@linux-foundation.org, rja@sgi.com, thgarnie@google.com,
	hpa@zytor.com
Reply-To: thgarnie@google.com, hpa@zytor.com,
	torvalds@linux-foundation.org, rja@sgi.com,
	matt@codeblueprint.co.uk, bhe@redhat.com,
	ard.biesheuvel@linaro.org, dyoung@redhat.com,
	linux-kernel@vger.kernel.org, bhsharma@redhat.com, bp@alien8.de,
	mingo@kernel.org, frank.ramsay@hpe.com, tglx@linutronix.de,
	peterz@infradead.org, keescook@chromium.org
In-Reply-To: &lt;20170526113652.21339-5-matt@codeblueprint.co.uk&gt;
References: &lt;20170526113652.21339-5-matt@codeblueprint.co.uk&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:efi/urgent] x86/efi: Correct EFI identity mapping under
	&#39;efi=old_map&#39; when KASLR is enabled
Git-Commit-ID: 94133e46a0f5ca3f138479806104ab4a8cb0455e
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - May 28, 2017, 9:45 a.m.</div>
<pre class="content">
Commit-ID:  94133e46a0f5ca3f138479806104ab4a8cb0455e
Gitweb:     http://git.kernel.org/tip/94133e46a0f5ca3f138479806104ab4a8cb0455e
Author:     Baoquan He &lt;bhe@redhat.com&gt;
AuthorDate: Fri, 26 May 2017 12:36:50 +0100
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Sun, 28 May 2017 11:06:16 +0200

x86/efi: Correct EFI identity mapping under &#39;efi=old_map&#39; when KASLR is enabled

For EFI with the &#39;efi=old_map&#39; kernel option specified, the kernel will panic
when KASLR is enabled:

  BUG: unable to handle kernel paging request at 000000007febd57e
  IP: 0x7febd57e
  PGD 1025a067
  PUD 0

  Oops: 0010 [#1] SMP
  Call Trace:
   efi_enter_virtual_mode()
   start_kernel()
   x86_64_start_reservations()
   x86_64_start_kernel()
   start_cpu()

The root cause is that the identity mapping is not built correctly
in the &#39;efi=old_map&#39; case.

On &#39;nokaslr&#39; kernels, PAGE_OFFSET is 0xffff880000000000 which is PGDIR_SIZE
aligned. We can borrow the PUD table from the direct mappings safely. Given a
physical address X, we have pud_index(X) == pud_index(__va(X)).

However, on KASLR kernels, PAGE_OFFSET is PUD_SIZE aligned. For a given physical
address X, pud_index(X) != pud_index(__va(X)). We can&#39;t just copy the PGD entry
from direct mapping to build identity mapping, instead we need to copy the
PUD entries one by one from the direct mapping.

Fix it.
<span class="signed-off-by">
Signed-off-by: Baoquan He &lt;bhe@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;</span>
Cc: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;
Cc: Bhupesh Sharma &lt;bhsharma@redhat.com&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Dave Young &lt;dyoung@redhat.com&gt;
Cc: Frank Ramsay &lt;frank.ramsay@hpe.com&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Russ Anderson &lt;rja@sgi.com&gt;
Cc: Thomas Garnier &lt;thgarnie@google.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/20170526113652.21339-5-matt@codeblueprint.co.uk
[ Fixed and reworded the changelog and code comments to be more readable. ]
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/platform/efi/efi_64.c | 79 +++++++++++++++++++++++++++++++++++++-----
 1 file changed, 71 insertions(+), 8 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index c488625..eb8dff1 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -71,11 +71,13 @@</span> <span class="p_context"> static void __init early_code_mapping_set_exec(int executable)</span>
 
 pgd_t * __init efi_call_phys_prolog(void)
 {
<span class="p_del">-	unsigned long vaddress;</span>
<span class="p_del">-	pgd_t *save_pgd;</span>
<span class="p_add">+	unsigned long vaddr, addr_pgd, addr_p4d, addr_pud;</span>
<span class="p_add">+	pgd_t *save_pgd, *pgd_k, *pgd_efi;</span>
<span class="p_add">+	p4d_t *p4d, *p4d_k, *p4d_efi;</span>
<span class="p_add">+	pud_t *pud;</span>
 
 	int pgd;
<span class="p_del">-	int n_pgds;</span>
<span class="p_add">+	int n_pgds, i, j;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		save_pgd = (pgd_t *)read_cr3();
<span class="p_chunk">@@ -88,10 +90,49 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	n_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT), PGDIR_SIZE);
 	save_pgd = kmalloc_array(n_pgds, sizeof(*save_pgd), GFP_KERNEL);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Build 1:1 identity mapping for efi=old_map usage. Note that</span>
<span class="p_add">+	 * PAGE_OFFSET is PGDIR_SIZE aligned when KASLR is disabled, while</span>
<span class="p_add">+	 * it is PUD_SIZE ALIGNED with KASLR enabled. So for a given physical</span>
<span class="p_add">+	 * address X, the pud_index(X) != pud_index(__va(X)), we can only copy</span>
<span class="p_add">+	 * PUD entry of __va(X) to fill in pud entry of X to build 1:1 mapping.</span>
<span class="p_add">+	 * This means here we can only reuse the PMD tables of the direct mapping.</span>
<span class="p_add">+	 */</span>
 	for (pgd = 0; pgd &lt; n_pgds; pgd++) {
<span class="p_del">-		save_pgd[pgd] = *pgd_offset_k(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		vaddress = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="p_del">-		set_pgd(pgd_offset_k(pgd * PGDIR_SIZE), *pgd_offset_k(vaddress));</span>
<span class="p_add">+		addr_pgd = (unsigned long)(pgd * PGDIR_SIZE);</span>
<span class="p_add">+		vaddr = (unsigned long)__va(pgd * PGDIR_SIZE);</span>
<span class="p_add">+		pgd_efi = pgd_offset_k(addr_pgd);</span>
<span class="p_add">+		save_pgd[pgd] = *pgd_efi;</span>
<span class="p_add">+</span>
<span class="p_add">+		p4d = p4d_alloc(&amp;init_mm, pgd_efi, addr_pgd);</span>
<span class="p_add">+		if (!p4d) {</span>
<span class="p_add">+			pr_err(&quot;Failed to allocate p4d table!\n&quot;);</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; PTRS_PER_P4D; i++) {</span>
<span class="p_add">+			addr_p4d = addr_pgd + i * P4D_SIZE;</span>
<span class="p_add">+			p4d_efi = p4d + p4d_index(addr_p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+			pud = pud_alloc(&amp;init_mm, p4d_efi, addr_p4d);</span>
<span class="p_add">+			if (!pud) {</span>
<span class="p_add">+				pr_err(&quot;Failed to allocate pud table!\n&quot;);</span>
<span class="p_add">+				goto out;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			for (j = 0; j &lt; PTRS_PER_PUD; j++) {</span>
<span class="p_add">+				addr_pud = addr_p4d + j * PUD_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+				if (addr_pud &gt; (max_pfn &lt;&lt; PAGE_SHIFT))</span>
<span class="p_add">+					break;</span>
<span class="p_add">+</span>
<span class="p_add">+				vaddr = (unsigned long)__va(addr_pud);</span>
<span class="p_add">+</span>
<span class="p_add">+				pgd_k = pgd_offset_k(vaddr);</span>
<span class="p_add">+				p4d_k = p4d_offset(pgd_k, vaddr);</span>
<span class="p_add">+				pud[j] = *pud_offset(p4d_k, vaddr);</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
 	}
 out:
 	__flush_tlb_all();
<span class="p_chunk">@@ -104,8 +145,11 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 	/*
 	 * After the lock is released, the original page table is restored.
 	 */
<span class="p_del">-	int pgd_idx;</span>
<span class="p_add">+	int pgd_idx, i;</span>
 	int nr_pgds;
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+	pud_t *pud;</span>
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
 		write_cr3((unsigned long)save_pgd);
<span class="p_chunk">@@ -115,9 +159,28 @@</span> <span class="p_context"> void __init efi_call_phys_epilog(pgd_t *save_pgd)</span>
 
 	nr_pgds = DIV_ROUND_UP((max_pfn &lt;&lt; PAGE_SHIFT) , PGDIR_SIZE);
 
<span class="p_del">-	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++)</span>
<span class="p_add">+	for (pgd_idx = 0; pgd_idx &lt; nr_pgds; pgd_idx++) {</span>
<span class="p_add">+		pgd = pgd_offset_k(pgd_idx * PGDIR_SIZE);</span>
 		set_pgd(pgd_offset_k(pgd_idx * PGDIR_SIZE), save_pgd[pgd_idx]);
 
<span class="p_add">+		if (!(pgd_val(*pgd) &amp; _PAGE_PRESENT))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		for (i = 0; i &lt; PTRS_PER_P4D; i++) {</span>
<span class="p_add">+			p4d = p4d_offset(pgd,</span>
<span class="p_add">+					 pgd_idx * PGDIR_SIZE + i * P4D_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!(p4d_val(*p4d) &amp; _PAGE_PRESENT))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+</span>
<span class="p_add">+			pud = (pud_t *)p4d_page_vaddr(*p4d);</span>
<span class="p_add">+			pud_free(&amp;init_mm, pud);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		p4d = (p4d_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		p4d_free(&amp;init_mm, p4d);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	kfree(save_pgd);
 
 	__flush_tlb_all();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



