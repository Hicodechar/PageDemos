
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/6] x86/platform/uv/BAU: Add status_mmr_loc to locate message status bits - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/6] x86/platform/uv/BAU: Add status_mmr_loc to locate message status bits</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 15, 2017, 1:58 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1487123931-56809-3-git-send-email-abanman@hpe.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9573191/mbox/"
   >mbox</a>
|
   <a href="/patch/9573191/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9573191/">/patch/9573191/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0EB3B601D8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 01:59:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 016CE2842B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 01:59:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E95D928451; Wed, 15 Feb 2017 01:59:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 66C242842B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Feb 2017 01:59:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751623AbdBOB7Q (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Feb 2017 20:59:16 -0500
Received: from relay2.sgi.com ([192.48.180.65]:45249 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1750791AbdBOB7N (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Feb 2017 20:59:13 -0500
Received: from stormcage.americas.sgi.com (stormcage.americas.sgi.com
	[128.162.236.70])
	by relay2.corp.sgi.com (Postfix) with ESMTP id 62AC4304039;
	Tue, 14 Feb 2017 17:59:07 -0800 (PST)
Received: by stormcage.americas.sgi.com (Postfix, from userid 200151)
	id 3EB3B203748D9; Tue, 14 Feb 2017 19:59:07 -0600 (CST)
From: Andrew Banman &lt;abanman@hpe.com&gt;
To: mingo@redhat.com
Cc: akpm@linux-foundation.org, tglx@linutronix.de, hpa@zytor.com,
	mike.travis@hpe.com, rja@hpe.com, sivanich@hpe.com, x86@kernel.org,
	linux-kernel@vger.kernel.org, abanman@hpe.com
Subject: [PATCH 2/6] x86/platform/uv/BAU: Add status_mmr_loc to locate
	message status bits
Date: Tue, 14 Feb 2017 19:58:47 -0600
Message-Id: &lt;1487123931-56809-3-git-send-email-abanman@hpe.com&gt;
X-Mailer: git-send-email 1.8.2.1
In-Reply-To: &lt;1487123931-56809-1-git-send-email-abanman@hpe.com&gt;
References: &lt;1487123931-56809-1-git-send-email-abanman@hpe.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 15, 2017, 1:58 a.m.</div>
<pre class="content">
The location of the ERROR and BUSY status bits depends on the descriptor
index, i.e. the CPU, of the message. We determine this location ahead of
the wait_completion loop to avoid repeating the calculation.

Split out the status location calculation into a new routine,
status_mmr_loc, to be used within each uv*_wait_completion routine.
<span class="signed-off-by">
Signed-off-by: Andrew Banman &lt;abanman@hpe.com&gt;</span>
<span class="acked-by">Acked-by: Mike Travis &lt;mike.travis@hpe.com&gt;</span>
---
 arch/x86/platform/uv/tlb_uv.c | 41 +++++++++++++++++++++++++----------------
 1 file changed, 25 insertions(+), 16 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Feb. 16, 2017, 6:07 p.m.</div>
<pre class="content">
On Tue, 14 Feb 2017, Andrew Banman wrote:
<span class="quote">
&gt; The location of the ERROR and BUSY status bits depends on the descriptor</span>
<span class="quote">&gt; index, i.e. the CPU, of the message. We determine this location ahead of</span>
<span class="quote">&gt; the wait_completion loop to avoid repeating the calculation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Split out the status location calculation into a new routine,</span>
<span class="quote">&gt; status_mmr_loc, to be used within each uv*_wait_completion routine.</span>

And the reason for this is? You just tell WHAT you are doing, not the WHY.

Looking at the patch which implements the uv4 wait function it uses the
thing as well. So for the casual reader there is no point.

The only reason i figured why you want to do that is to reduce the number
of arguments to the wait function, correct?

If yes, then spell it out. If no, please enlighten me.

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Feb. 16, 2017, 9:53 p.m.</div>
<pre class="content">
On 02/16/2017 12:07 PM, Thomas Gleixner wrote:
<span class="quote">&gt; On Tue, 14 Feb 2017, Andrew Banman wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; The location of the ERROR and BUSY status bits depends on the descriptor</span>
<span class="quote">&gt;&gt; index, i.e. the CPU, of the message. We determine this location ahead of</span>
<span class="quote">&gt;&gt; the wait_completion loop to avoid repeating the calculation.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Split out the status location calculation into a new routine,</span>
<span class="quote">&gt;&gt; status_mmr_loc, to be used within each uv*_wait_completion routine.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And the reason for this is? You just tell WHAT you are doing, not the WHY.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Looking at the patch which implements the uv4 wait function it uses the</span>
<span class="quote">&gt; thing as well. So for the casual reader there is no point.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The only reason i figured why you want to do that is to reduce the number</span>
<span class="quote">&gt; of arguments to the wait function, correct?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; If yes, then spell it out. If no, please enlighten me.</span>

Yes, the purpose was to re-scope the mmr location-finding logic into the 
uv*_wait_completion routines to make the call to wait_completion less 
complicated.

Though, on second thought, the *mmr and *index values in status_mmr_loc 
should really be set during initialization because they do not change. 
The calculation is always done with desc=uvhub_cpu.

I would add status_mmr and status_index to struct bau_control and move 
the calculation to scan_sock; there&#39;s no need for a subroutine in this case.

Thanks,

Andrew Banman
<span class="quote">
&gt;</span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 	tglx</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">Index: community/arch/x86/platform/uv/tlb_uv.c</span>
===================================================================
<span class="p_header">--- community.orig/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ community/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -533,6 +533,22 @@</span> <span class="p_context"> static inline void end_uvhub_quiesce(str</span>
 	atom_asr(-1, (struct atomic_short *)&amp;hmaster-&gt;uvhub_quiesce);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * The ERROR and BUSY status registers are located pairwise over the STATUS_0</span>
<span class="p_add">+ * and STATUS_1 mmrs; each an array[32] of 2 bits. Given CPU desc, determine</span>
<span class="p_add">+ * the correct mmr and index for the message status.</span>
<span class="p_add">+ */</span>
<span class="p_add">+void status_mmr_loc(unsigned long *mmr, int *index, int desc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (desc &lt; UV_CPUS_PER_AS) {</span>
<span class="p_add">+		*mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_add">+		*index = desc * UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		*mmr = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_add">+		*index = (desc - UV_CPUS_PER_AS) * UV_ACT_STATUS_SIZE;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static unsigned long uv1_read_status(unsigned long mmr_offset, int right_shift)
 {
 	unsigned long descriptor_status;
<span class="p_chunk">@@ -548,13 +564,16 @@</span> <span class="p_context"> static unsigned long uv1_read_status(uns</span>
  * return COMPLETE, RETRY(PLUGGED or TIMEOUT) or GIVEUP
  */
 static int uv1_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_status;
<span class="p_add">+	unsigned long mmr_offset;</span>
<span class="p_add">+	int right_shift;</span>
<span class="p_add">+	int desc = bcp-&gt;uvhub_cpu;</span>
 	cycles_t ttm;
 	struct ptc_stats *stat = bcp-&gt;statp;
 
<span class="p_add">+	status_mmr_loc(&amp;mmr_offset, &amp;right_shift, desc);</span>
 	descriptor_status = uv1_read_status(mmr_offset, right_shift);
 	/* spin on the status MMR, waiting for it to go idle */
 	while ((descriptor_status != DS_IDLE)) {
<span class="p_chunk">@@ -640,15 +659,17 @@</span> <span class="p_context"> int handle_uv2_busy(struct bau_control *</span>
 }
 
 static int uv2_3_wait_completion(struct bau_desc *bau_desc,
<span class="p_del">-				unsigned long mmr_offset, int right_shift,</span>
 				struct bau_control *bcp, long try)
 {
 	unsigned long descriptor_stat;
<span class="p_add">+	unsigned long mmr_offset;</span>
 	cycles_t ttm;
 	int desc = bcp-&gt;uvhub_cpu;
<span class="p_add">+	int right_shift;</span>
 	long busy_reps = 0;
 	struct ptc_stats *stat = bcp-&gt;statp;
 
<span class="p_add">+	status_mmr_loc(&amp;mmr_offset, &amp;right_shift, desc);</span>
 	descriptor_stat = uv2_3_read_status(mmr_offset, right_shift, desc);
 
 	/* spin on the status MMR, waiting for it to go idle */
<span class="p_chunk">@@ -712,22 +733,10 @@</span> <span class="p_context"> static int uv2_3_wait_completion(struct</span>
  */
 static int wait_completion(struct bau_desc *bau_desc, struct bau_control *bcp, long try)
 {
<span class="p_del">-	int right_shift;</span>
<span class="p_del">-	unsigned long mmr_offset;</span>
<span class="p_del">-	int desc = bcp-&gt;uvhub_cpu;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (desc &lt; UV_CPUS_PER_AS) {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_0;</span>
<span class="p_del">-		right_shift = desc * UV_ACT_STATUS_SIZE;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		mmr_offset = UVH_LB_BAU_SB_ACTIVATION_STATUS_1;</span>
<span class="p_del">-		right_shift = ((desc - UV_CPUS_PER_AS) * UV_ACT_STATUS_SIZE);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
 	if (bcp-&gt;uvhub_version == 1)
<span class="p_del">-		return uv1_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_add">+		return uv1_wait_completion(bau_desc, bcp, try);</span>
 	else
<span class="p_del">-		return uv2_3_wait_completion(bau_desc, mmr_offset, right_shift, bcp, try);</span>
<span class="p_add">+		return uv2_3_wait_completion(bau_desc, bcp, try);</span>
 }
 
 /*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



