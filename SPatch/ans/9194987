
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arm64:swiotlb:Enable only when Input size through command line - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arm64:swiotlb:Enable only when Input size through command line</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=143911">Manjeet Pawar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 23, 2016, 12:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1466684020-5224-1-git-send-email-manjeet.p@samsung.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9194987/mbox/"
   >mbox</a>
|
   <a href="/patch/9194987/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9194987/">/patch/9194987/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9B10C6075C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 12:14:58 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 89D6828450
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 12:14:58 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7E8D728452; Thu, 23 Jun 2016 12:14:58 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7508828450
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Jun 2016 12:14:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751865AbcFWMOx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Jun 2016 08:14:53 -0400
Received: from mailout1.samsung.com ([203.254.224.24]:49545 &quot;EHLO
	mailout1.samsung.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751001AbcFWMOv (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Jun 2016 08:14:51 -0400
Received: from epcpsbgr3.samsung.com
	(u143.gpu120.samsung.co.kr [203.254.230.143])
	by mailout1.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit (built May  5 2014))
	with ESMTP id &lt;0O9801JT94OOAUB0@mailout1.samsung.com&gt;; Thu,
	23 Jun 2016 21:14:48 +0900 (KST)
Received: from epcpsbgm1new.samsung.com ( [172.20.52.124])
	by epcpsbgr3.samsung.com (EPCPMTA) with SMTP id EB.7F.05161.8B2DB675;
	Thu, 23 Jun 2016 21:14:48 +0900 (KST)
X-AuditID: cbfee68f-f79476d000001429-c1-576bd2b8e627
Received: from epmmp1.local.host ( [203.254.227.16])
	by epcpsbgm1new.samsung.com (EPCPMTA) with SMTP id
	C3.00.02101.8B2DB675; Thu, 23 Jun 2016 21:14:48 +0900 (KST)
Received: from localhost.localdomain ([107.108.92.210])
	by mmp1.samsung.com (Oracle Communications Messaging Server
	7.0.5.31.0 64bit (built May 5 2014)) with ESMTPA id
	&lt;0O98005OU4NOZ320@mmp1.samsung.com&gt;; Thu,
	23 Jun 2016 21:14:48 +0900 (KST)
From: Manjeet Pawar &lt;manjeet.p@samsung.com&gt;
To: corbet@lwn.net, catalin.marinas@arm.com, will.deacon@arm.com,
	konrad.wilk@oracle.com, linux-doc@vger.kernel.org,
	linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
	r.thapliyal@samsung.com, akhilesh.k@samsung.com, ajeet.y@samsung.com
Cc: pankaj.m@samsung.com, Manjeet Pawar &lt;manjeet.p@samsung.com&gt;
Subject: [PATCH] arm64:swiotlb:Enable only when Input size through command
	line
Date: Thu, 23 Jun 2016 17:43:40 +0530
Message-id: &lt;1466684020-5224-1-git-send-email-manjeet.p@samsung.com&gt;
X-Mailer: git-send-email 1.7.9.5
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFrrHLMWRmVeSWpSXmKPExsWyRsSkRnfHpexwg/c95hYvXk1gsdi87iSz
	xftlPYwWTw60M1osW/yU0WLT42usFgvblrBYXN41h83iXutaIPFmK5PFxnvZFi8/nmBx4PFY
	M28No8fmJfUei/sms3p8fHqLxaNvyypGj8+b5ALYorhsUlJzMstSi/TtErgyTm35w1rwUKHi
	3L7/jA2MJ6W6GDk4JARMJJacTe5i5AQyxSQu3FvP1sXIxSEksIJR4valDSwwNVsmh0PElzJK
	3Lr+jQXC+ckosf/4GiaQbjYBbYk9P9rYQRIiAs1MEoeXnmAHSTAL2EvMb7jMBmILC/hL7F91
	jhHEZhFQlbj6aAULiM0r4CLxd3MTM8Q2BYk5k2xA5kgIbGKX2LTwHBNEvYDEt8mHoC6Sldh0
	gBniakmJgytusExgFFzAyLCKUTS1ILmgOCm9yFivODG3uDQvXS85P3cTIzDYT/971r+D8e4B
	60OMAhyMSjy8GceywoVYE8uKK3MPMZoCbZjILCWanA+MqbySeENjMyMLUxNTYyNzSzMlcd6F
	Uj+DhQTSE0tSs1NTC1KL4otKc1KLDzEycXBKNTAeqhF2+Kq+3X9iTxEji8gue5ur/uJPio/3
	T7B23c56Z/fdheUaP243vLkQzjzx3P0oX7HOCOlo5t2deX+/v2575Hbno8HFGVUad4xzGJRs
	z1j29Xxfso27MHBi0u1jK1Rvdj8KZjn9KdAri3ln7edN3lWHGE+s4PffHzDJ/RTPxjeaHqXx
	i/uVWIozEg21mIuKEwEhYGjDcQIAAA==
X-Brightmail-Tracker: H4sIAAAAAAAAA+NgFlrDIsWRmVeSWpSXmKPExsVy+t9jAd0dl7LDDW7v1bR48WoCi8XmdSeZ
	Ld4v62G0eHKgndFi2eKnjBabHl9jtVjYtoTF4vKuOWwW91rXAok3W5ksNt7Ltnj58QSLA4/H
	mnlrGD02L6n3WNw3mdXj49NbLB59W1YxenzeJBfAFtXAaJORmpiSWqSQmpecn5KZl26r5B0c
	7xxvamZgqGtoaWGupJCXmJtqq+TiE6DrlpkDdKOSQlliTilQKCCxuFhJ3w7ThNAQN10LmMYI
	Xd+QILgeIwM0kLCGMePUlj+sBQ8VKs7t+8/YwHhSqouRg0NCwERiy+TwLkZOIFNM4sK99Wxd
	jFwcQgJLGSVuXf/GAuH8ZJTYf3wNE0gVm4C2xJ4fbewgCRGBZiaJw0tPsIMkmAXsJeY3XGYD
	sYUF/CX2rzrHCGKzCKhKXH20ggXE5hVwkfi7uYkZYrOCxJxJNhMYuRcwMqxilEgtSC4oTkrP
	NcxLLdcrTswtLs1L10vOz93ECI6pZ1I7GA/ucj/EKMDBqMTDm3EsK1yINbGsuDL3EKMEB7OS
	CO/Js9nhQrwpiZVVqUX58UWlOanFhxhNgfZPZJYSTc4HxnteSbyhsYm5qbGppYmFiZmlkjjv
	4//rwoQE0hNLUrNTUwtSi2D6mDg4pRoYV7StaRE/YPlCVDxDtnB+0w8zL5ZfD4J0XBQibmxL
	ff7j2soOn02v57Q+lNu/V85l5UmZvgVzlkwJfOK3h6Orfr7QjG+rZ+01iF3w4xW/8p43nVlt
	4ndkgrpDL9ifMH5SGj7pbQvT+4sfTy9+abdk+ZOvf/rF53VPu9OQvPBX24nI9lDGc/GpvUos
	xRmJhlrMRcWJAP+VOdK/AgAA
DLP-Filter: Pass
X-MTR: 20000000000000000@CPGS
X-CFilter-Loop: Reflected
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143911">Manjeet Pawar</a> - June 23, 2016, 12:13 p.m.</div>
<pre class="content">
<span class="from">From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>

swiotlb default size of 64M is too big as
default value therefore it is made configurable
through command line through swiotlb_size parameter.
swiotlb allocation shall be done only when the
swiotlb size is given through command line.
Otherwise no swiotlb is allocated.
<span class="signed-off-by">
Signed-off-by: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Manjeet Pawar &lt;manjeet.p@samsung.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Akhilesh Kumar &lt;akhilesh.k@samsung.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Ajeet Kumar Yadav &lt;ajeet.y@samsung.com&gt;</span>
---
 Documentation/kernel-parameters.txt |    3 +++
 arch/arm64/mm/init.c                |    3 ++-
 include/linux/swiotlb.h             |    1 +
 lib/swiotlb.c                       |   33 +++++++++++++++++++++++++++++----
 4 files changed, 35 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - June 23, 2016, 12:31 p.m.</div>
<pre class="content">
On 23/06/16 13:13, Manjeet Pawar wrote:
<span class="quote">&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt; default value therefore it is made configurable</span>
<span class="quote">&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt; Otherwise no swiotlb is allocated.</span>

So all platforms with most memory physically above 4GB (which is quite a 
lot of them) are suddenly broken unless they go and muck about with 
their bootloader?

If anyone&#39;s got to muck about with their bootloader, why can&#39;t it be the 
memory-constrained platforms just passing &quot;swiotlb=1&quot; instead?

Robin.
<span class="quote">
&gt; Signed-off-by: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Manjeet Pawar &lt;manjeet.p@samsung.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Akhilesh Kumar &lt;akhilesh.k@samsung.com&gt;</span>
<span class="quote">&gt; Reviewed-by: Ajeet Kumar Yadav &lt;ajeet.y@samsung.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   Documentation/kernel-parameters.txt |    3 +++</span>
<span class="quote">&gt;   arch/arm64/mm/init.c                |    3 ++-</span>
<span class="quote">&gt;   include/linux/swiotlb.h             |    1 +</span>
<span class="quote">&gt;   lib/swiotlb.c                       |   33 +++++++++++++++++++++++++++++----</span>
<span class="quote">&gt;   4 files changed, 35 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; index 82b42c9..12b680f 100644</span>
<span class="quote">&gt; --- a/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; +++ b/Documentation/kernel-parameters.txt</span>
<span class="quote">&gt; @@ -3875,6 +3875,9 @@ bytes respectively. Such letter suffixes can also be entirely omitted.</span>
<span class="quote">&gt;   			force -- force using of bounce buffers even if they</span>
<span class="quote">&gt;   			         wouldn&#39;t be automatically used by the kernel</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +	swiotlb_sz= [KNL] enter swiotlb size.</span>
<span class="quote">&gt; +			Sets the swiotlb size for eg. swiotlb_sz=64M</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   	switches=	[HW,M68k]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   	sysfs.deprecated=0|1 [KNL]</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c</span>
<span class="quote">&gt; index d45f862..89c6b39 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/init.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/init.c</span>
<span class="quote">&gt; @@ -403,7 +403,8 @@ static void __init free_unused_memmap(void)</span>
<span class="quote">&gt;    */</span>
<span class="quote">&gt;   void __init mem_init(void)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; -	swiotlb_init(1);</span>
<span class="quote">&gt; +	if (swiotlb_enabled)</span>
<span class="quote">&gt; +		swiotlb_init(1);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   	set_max_mapnr(pfn_to_page(max_pfn) - mem_map);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="quote">&gt; index 017fced..c7eb146 100644</span>
<span class="quote">&gt; --- a/include/linux/swiotlb.h</span>
<span class="quote">&gt; +++ b/include/linux/swiotlb.h</span>
<span class="quote">&gt; @@ -11,6 +11,7 @@ struct page;</span>
<span class="quote">&gt;   struct scatterlist;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   extern int swiotlb_force;</span>
<span class="quote">&gt; +extern int swiotlb_enabled;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt;    * Maximum allowable number of contiguous slabs to map,</span>
<span class="quote">&gt; diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="quote">&gt; index 76f29ec..e89296a 100644</span>
<span class="quote">&gt; --- a/lib/swiotlb.c</span>
<span class="quote">&gt; +++ b/lib/swiotlb.c</span>
<span class="quote">&gt; @@ -54,6 +54,7 @@</span>
<span class="quote">&gt;   #define IO_TLB_MIN_SLABS ((1&lt;&lt;20) &gt;&gt; IO_TLB_SHIFT)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   int swiotlb_force;</span>
<span class="quote">&gt; +int swiotlb_enabled;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   /*</span>
<span class="quote">&gt;    * Used to do a quick range check in swiotlb_tbl_unmap_single and</span>
<span class="quote">&gt; @@ -96,6 +97,9 @@ static DEFINE_SPINLOCK(io_tlb_lock);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   static int late_alloc;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +unsigned long swiotlb_sz;</span>
<span class="quote">&gt; +unsigned int swiotlb_sz_shift;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   static int __init</span>
<span class="quote">&gt;   setup_io_tlb_npages(char *str)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt; @@ -112,6 +116,24 @@ setup_io_tlb_npages(char *str)</span>
<span class="quote">&gt;   	return 0;</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   early_param(&quot;swiotlb&quot;, setup_io_tlb_npages);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int __init</span>
<span class="quote">&gt; +setup_io_tlb_size(char *str)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	int len = strlen(str);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (str[len-1] == &#39;M&#39;)</span>
<span class="quote">&gt; +		swiotlb_sz_shift = 20;</span>
<span class="quote">&gt; +	else if (str[len-1] == &#39;K&#39;)</span>
<span class="quote">&gt; +		swiotlb_sz_shift = 10;</span>
<span class="quote">&gt; +	str[len-1] = &#39;\0&#39;;</span>
<span class="quote">&gt; +	if (isdigit(*str))</span>
<span class="quote">&gt; +		swiotlb_sz = kstrtoul(str, &amp;str, 0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	swiotlb_enabled = 1;</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +early_param(&quot;swiotlb_sz&quot;, setup_io_tlb_size);</span>
<span class="quote">&gt;   /* make io_tlb_overflow tunable too? */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   unsigned long swiotlb_nr_tbl(void)</span>
<span class="quote">&gt; @@ -120,8 +142,9 @@ unsigned long swiotlb_nr_tbl(void)</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;   EXPORT_SYMBOL_GPL(swiotlb_nr_tbl);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -/* default to 64MB */</span>
<span class="quote">&gt; -#define IO_TLB_DEFAULT_SIZE (64UL&lt;&lt;20)</span>
<span class="quote">&gt; +/* Pass from command line as swiotlb_sz=64M (for eg.)*/</span>
<span class="quote">&gt; +#define IO_TLB_DEFAULT_SIZE (swiotlb_sz&lt;&lt;swiotlb_sz_shift)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   unsigned long swiotlb_size_or_default(void)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	unsigned long size;</span>
<span class="quote">&gt; @@ -153,10 +176,12 @@ void swiotlb_print_info(void)</span>
<span class="quote">&gt;   	vstart = phys_to_virt(io_tlb_start);</span>
<span class="quote">&gt;   	vend = phys_to_virt(io_tlb_end);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -	printk(KERN_INFO &quot;software IO TLB [mem %#010llx-%#010llx] (%luMB) mapped at [%p-%p]\n&quot;,</span>
<span class="quote">&gt; +	pr_info(&quot;software IO TLB [mem %#010llx-%#010llx] (%lu%cB) mapped at [%p-%p]\n&quot;,</span>
<span class="quote">&gt;   	       (unsigned long long)io_tlb_start,</span>
<span class="quote">&gt;   	       (unsigned long long)io_tlb_end,</span>
<span class="quote">&gt; -	       bytes &gt;&gt; 20, vstart, vend - 1);</span>
<span class="quote">&gt; +		bytes &gt;&gt; swiotlb_sz_shift,</span>
<span class="quote">&gt; +		swiotlb_sz_shift == 20 ? &#39;M&#39; : &#39;K&#39;,</span>
<span class="quote">&gt; +		vstart, vend - 1);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=352">Catalin Marinas</a> - June 23, 2016, 2:30 p.m.</div>
<pre class="content">
On Thu, Jun 23, 2016 at 05:43:40PM +0530, Manjeet Pawar wrote:
<span class="quote">&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt; default value therefore it is made configurable</span>
<span class="quote">&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt; Otherwise no swiotlb is allocated.</span>

I already queued this patch:

http://lkml.kernel.org/g/1465372426-4077-1-git-send-email-jszhang@marvell.com

If you have any objections to it, please reply there.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - June 23, 2016, 2:38 p.m.</div>
<pre class="content">
Hi,

[auto build test WARNING on v4.7-rc4]
[cannot apply to arm64/for-next/core next-20160623]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Manjeet-Pawar/arm64-swiotlb-Enable-only-when-Input-size-through-command-line/20160623-205508
config: x86_64-randconfig-i0-201625 (attached as .config)
compiler: gcc-6 (Debian 6.1.1-1) 6.1.1 20160430
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All warnings (new ones prefixed by &gt;&gt;):

   lib/swiotlb.c: In function &#39;setup_io_tlb_size&#39;:
<span class="quote">&gt;&gt; lib/swiotlb.c:131:30: warning: passing argument 2 of &#39;kstrtoul&#39; makes integer from pointer without a cast [-Wint-conversion]</span>
      swiotlb_sz = kstrtoul(str, &amp;str, 0);
                                 ^
   In file included from include/linux/list.h:8:0,
                    from include/linux/kobject.h:20,
                    from include/linux/device.h:17,
                    from include/linux/dma-mapping.h:6,
                    from lib/swiotlb.c:21:
   include/linux/kernel.h:298:32: note: expected &#39;unsigned int&#39; but argument is of type &#39;char **&#39;
    static inline int __must_check kstrtoul(const char *s, unsigned int base, unsigned long *res)
                                   ^~~~~~~~

vim +/kstrtoul +131 lib/swiotlb.c

   115	
   116		return 0;
   117	}
   118	early_param(&quot;swiotlb&quot;, setup_io_tlb_npages);
   119	
   120	static int __init
   121	setup_io_tlb_size(char *str)
   122	{
   123		int len = strlen(str);
   124	
   125		if (str[len-1] == &#39;M&#39;)
   126			swiotlb_sz_shift = 20;
   127		else if (str[len-1] == &#39;K&#39;)
   128			swiotlb_sz_shift = 10;
   129		str[len-1] = &#39;\0&#39;;
   130		if (isdigit(*str))
<span class="quote"> &gt; 131			swiotlb_sz = kstrtoul(str, &amp;str, 0);</span>
   132	
   133		swiotlb_enabled = 1;
   134		return 0;
   135	}
   136	early_param(&quot;swiotlb_sz&quot;, setup_io_tlb_size);
   137	/* make io_tlb_overflow tunable too? */
   138	
   139	unsigned long swiotlb_nr_tbl(void)

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3407">Konrad Rzeszutek Wilk</a> - June 23, 2016, 4:06 p.m.</div>
<pre class="content">
On June 23, 2016 10:30:34 AM EDT, Catalin Marinas &lt;catalin.marinas@arm.com&gt; wrote:
<span class="quote">&gt;On Thu, Jun 23, 2016 at 05:43:40PM +0530, Manjeet Pawar wrote:</span>
<span class="quote">&gt;&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt;&gt; default value therefore it is made configurable</span>
<span class="quote">&gt;&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt;&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt;&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt;&gt; Otherwise no swiotlb is allocated.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;I already queued this patch:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;http://lkml.kernel.org/g/1465372426-4077-1-git-send-email-jszhang@marvell.com</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;If you have any objections to it, please reply there.</span>


I do (sorry about duplicate email, the other got rejected by mailing lists).

Why not expand the swiotlb= parameter instead of introducing a new one?

Also, why not use the swiotlb by itself? That does the job as well?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72784">Jisheng Zhang</a> - June 24, 2016, 2:57 a.m.</div>
<pre class="content">
Dear Konrad,

On Thu, 23 Jun 2016 12:06:10 -0400 Konrad Rzeszutek Wilk wrote:
<span class="quote">
&gt; On June 23, 2016 10:30:34 AM EDT, Catalin Marinas &lt;catalin.marinas@arm.com&gt; wrote:</span>
<span class="quote">&gt; &gt;On Thu, Jun 23, 2016 at 05:43:40PM +0530, Manjeet Pawar wrote:  </span>
<span class="quote">&gt; &gt;&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt; &gt;&gt; default value therefore it is made configurable</span>
<span class="quote">&gt; &gt;&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt; &gt;&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt; &gt;&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt; &gt;&gt; Otherwise no swiotlb is allocated.  </span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;I already queued this patch:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;http://lkml.kernel.org/g/1465372426-4077-1-git-send-email-jszhang@marvell.com</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;If you have any objections to it, please reply there.  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I do (sorry about duplicate email, the other got rejected by mailing lists).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why not expand the swiotlb= parameter instead of introducing a new one?</span>

Do you mean pass &quot;swiotlb=&quot; for those platforms(most probably, arm64 with less
than 4GB DDR) which don&#39;t need swiotlb? I&#39;m afraid this is not convenient, and
users even don&#39;t notice swiotlb parameter. From another side, pass &quot;swiotlb=0&quot;
will make the swiotlb reserve 64MB instead, so how can we achieve zero reserved
memory for swiotlb through &quot;swiotlb=&quot; parameter?

PS: my patch didn&#39;t introduce new boot parameter.

I&#39;m not sure I got your meaning, so could you please comment my patch
directly?

Thanks,
Jisheng
<span class="quote">
&gt; </span>
<span class="quote">&gt; Also, why not use the swiotlb by itself? That does the job as well?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3565">Konrad Rzeszutek</a> - June 24, 2016, 10:46 a.m.</div>
<pre class="content">
On Fri, Jun 24, 2016 at 10:57:29AM +0800, Jisheng Zhang wrote:
<span class="quote">&gt; Dear Konrad,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Thu, 23 Jun 2016 12:06:10 -0400 Konrad Rzeszutek Wilk wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; On June 23, 2016 10:30:34 AM EDT, Catalin Marinas &lt;catalin.marinas@arm.com&gt; wrote:</span>
<span class="quote">&gt; &gt; &gt;On Thu, Jun 23, 2016 at 05:43:40PM +0530, Manjeet Pawar wrote:  </span>
<span class="quote">&gt; &gt; &gt;&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt; &gt; &gt;&gt; </span>
<span class="quote">&gt; &gt; &gt;&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt; &gt; &gt;&gt; default value therefore it is made configurable</span>
<span class="quote">&gt; &gt; &gt;&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt; &gt; &gt;&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt; &gt; &gt;&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt; &gt; &gt;&gt; Otherwise no swiotlb is allocated.  </span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;I already queued this patch:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;http://lkml.kernel.org/g/1465372426-4077-1-git-send-email-jszhang@marvell.com</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;If you have any objections to it, please reply there.  </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I do (sorry about duplicate email, the other got rejected by mailing lists).</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Why not expand the swiotlb= parameter instead of introducing a new one?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Do you mean pass &quot;swiotlb=&quot; for those platforms(most probably, arm64 with less</span>
<span class="quote">&gt; than 4GB DDR) which don&#39;t need swiotlb? I&#39;m afraid this is not convenient, and</span>

Why not just have a function that checks the amount of memory? x86 has
that - if it finds that the machine has less than 4GB it will not setup
SWIOTLB?
<span class="quote">
&gt; users even don&#39;t notice swiotlb parameter. From another side, pass &quot;swiotlb=0&quot;</span>
<span class="quote">&gt; will make the swiotlb reserve 64MB instead, so how can we achieve zero reserved</span>
<span class="quote">&gt; memory for swiotlb through &quot;swiotlb=&quot; parameter?</span>

Obviously make the function understand that 0 is to turn it off.
<span class="quote">&gt; </span>
<span class="quote">&gt; PS: my patch didn&#39;t introduce new boot parameter.</span>

swiotlb_sz ?
<span class="quote">
&gt; </span>
<span class="quote">&gt; I&#39;m not sure I got your meaning, so could you please comment my patch</span>
<span class="quote">&gt; directly?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Jisheng</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Also, why not use the swiotlb by itself? That does the job as well?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; _______________________________________________</span>
<span class="quote">&gt; &gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt; &gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; &gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - June 24, 2016, 10:53 a.m.</div>
<pre class="content">
Hi Konrad,

On 24/06/16 11:46, Konrad Rzeszutek Wilk wrote:
<span class="quote">&gt; On Fri, Jun 24, 2016 at 10:57:29AM +0800, Jisheng Zhang wrote:</span>
<span class="quote">&gt;&gt; Dear Konrad,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Thu, 23 Jun 2016 12:06:10 -0400 Konrad Rzeszutek Wilk wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On June 23, 2016 10:30:34 AM EDT, Catalin Marinas &lt;catalin.marinas@arm.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Thu, Jun 23, 2016 at 05:43:40PM +0530, Manjeet Pawar wrote:  </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; From: Rohit Thapliyal &lt;r.thapliyal@samsung.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; swiotlb default size of 64M is too big as</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; default value therefore it is made configurable</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; through command line through swiotlb_size parameter.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; swiotlb allocation shall be done only when the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; swiotlb size is given through command line.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Otherwise no swiotlb is allocated.  </span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I already queued this patch:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; http://lkml.kernel.org/g/1465372426-4077-1-git-send-email-jszhang@marvell.com</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; If you have any objections to it, please reply there.  </span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I do (sorry about duplicate email, the other got rejected by mailing lists).</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Why not expand the swiotlb= parameter instead of introducing a new one?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Do you mean pass &quot;swiotlb=&quot; for those platforms(most probably, arm64 with less</span>
<span class="quote">&gt;&gt; than 4GB DDR) which don&#39;t need swiotlb? I&#39;m afraid this is not convenient, and</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why not just have a function that checks the amount of memory? x86 has</span>
<span class="quote">&gt; that - if it finds that the machine has less than 4GB it will not setup</span>
<span class="quote">&gt; SWIOTLB?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; users even don&#39;t notice swiotlb parameter. From another side, pass &quot;swiotlb=0&quot;</span>
<span class="quote">&gt;&gt; will make the swiotlb reserve 64MB instead, so how can we achieve zero reserved</span>
<span class="quote">&gt;&gt; memory for swiotlb through &quot;swiotlb=&quot; parameter?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Obviously make the function understand that 0 is to turn it off.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; PS: my patch didn&#39;t introduce new boot parameter.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; swiotlb_sz ?</span>

Note that Jisheng&#39;s patch is the one Catalin linked to, *not* this one,
and more or less does exactly what you describe.

Robin.
<span class="quote">
&gt;&gt;</span>
<span class="quote">&gt;&gt; I&#39;m not sure I got your meaning, so could you please comment my patch</span>
<span class="quote">&gt;&gt; directly?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt; Jisheng</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Also, why not use the swiotlb by itself? That does the job as well?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; _______________________________________________</span>
<span class="quote">&gt;&gt;&gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt;&gt;&gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt;&gt;&gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt</span>
<span class="p_header">index 82b42c9..12b680f 100644</span>
<span class="p_header">--- a/Documentation/kernel-parameters.txt</span>
<span class="p_header">+++ b/Documentation/kernel-parameters.txt</span>
<span class="p_chunk">@@ -3875,6 +3875,9 @@</span> <span class="p_context"> bytes respectively. Such letter suffixes can also be entirely omitted.</span>
 			force -- force using of bounce buffers even if they
 			         wouldn&#39;t be automatically used by the kernel
 
<span class="p_add">+	swiotlb_sz= [KNL] enter swiotlb size.</span>
<span class="p_add">+			Sets the swiotlb size for eg. swiotlb_sz=64M</span>
<span class="p_add">+</span>
 	switches=	[HW,M68k]
 
 	sysfs.deprecated=0|1 [KNL]
<span class="p_header">diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c</span>
<span class="p_header">index d45f862..89c6b39 100644</span>
<span class="p_header">--- a/arch/arm64/mm/init.c</span>
<span class="p_header">+++ b/arch/arm64/mm/init.c</span>
<span class="p_chunk">@@ -403,7 +403,8 @@</span> <span class="p_context"> static void __init free_unused_memmap(void)</span>
  */
 void __init mem_init(void)
 {
<span class="p_del">-	swiotlb_init(1);</span>
<span class="p_add">+	if (swiotlb_enabled)</span>
<span class="p_add">+		swiotlb_init(1);</span>
 
 	set_max_mapnr(pfn_to_page(max_pfn) - mem_map);
 
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 017fced..c7eb146 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -11,6 +11,7 @@</span> <span class="p_context"> struct page;</span>
 struct scatterlist;
 
 extern int swiotlb_force;
<span class="p_add">+extern int swiotlb_enabled;</span>
 
 /*
  * Maximum allowable number of contiguous slabs to map,
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 76f29ec..e89296a 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -54,6 +54,7 @@</span> <span class="p_context"></span>
 #define IO_TLB_MIN_SLABS ((1&lt;&lt;20) &gt;&gt; IO_TLB_SHIFT)
 
 int swiotlb_force;
<span class="p_add">+int swiotlb_enabled;</span>
 
 /*
  * Used to do a quick range check in swiotlb_tbl_unmap_single and
<span class="p_chunk">@@ -96,6 +97,9 @@</span> <span class="p_context"> static DEFINE_SPINLOCK(io_tlb_lock);</span>
 
 static int late_alloc;
 
<span class="p_add">+unsigned long swiotlb_sz;</span>
<span class="p_add">+unsigned int swiotlb_sz_shift;</span>
<span class="p_add">+</span>
 static int __init
 setup_io_tlb_npages(char *str)
 {
<span class="p_chunk">@@ -112,6 +116,24 @@</span> <span class="p_context"> setup_io_tlb_npages(char *str)</span>
 	return 0;
 }
 early_param(&quot;swiotlb&quot;, setup_io_tlb_npages);
<span class="p_add">+</span>
<span class="p_add">+static int __init</span>
<span class="p_add">+setup_io_tlb_size(char *str)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int len = strlen(str);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (str[len-1] == &#39;M&#39;)</span>
<span class="p_add">+		swiotlb_sz_shift = 20;</span>
<span class="p_add">+	else if (str[len-1] == &#39;K&#39;)</span>
<span class="p_add">+		swiotlb_sz_shift = 10;</span>
<span class="p_add">+	str[len-1] = &#39;\0&#39;;</span>
<span class="p_add">+	if (isdigit(*str))</span>
<span class="p_add">+		swiotlb_sz = kstrtoul(str, &amp;str, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	swiotlb_enabled = 1;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+early_param(&quot;swiotlb_sz&quot;, setup_io_tlb_size);</span>
 /* make io_tlb_overflow tunable too? */
 
 unsigned long swiotlb_nr_tbl(void)
<span class="p_chunk">@@ -120,8 +142,9 @@</span> <span class="p_context"> unsigned long swiotlb_nr_tbl(void)</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_nr_tbl);
 
<span class="p_del">-/* default to 64MB */</span>
<span class="p_del">-#define IO_TLB_DEFAULT_SIZE (64UL&lt;&lt;20)</span>
<span class="p_add">+/* Pass from command line as swiotlb_sz=64M (for eg.)*/</span>
<span class="p_add">+#define IO_TLB_DEFAULT_SIZE (swiotlb_sz&lt;&lt;swiotlb_sz_shift)</span>
<span class="p_add">+</span>
 unsigned long swiotlb_size_or_default(void)
 {
 	unsigned long size;
<span class="p_chunk">@@ -153,10 +176,12 @@</span> <span class="p_context"> void swiotlb_print_info(void)</span>
 	vstart = phys_to_virt(io_tlb_start);
 	vend = phys_to_virt(io_tlb_end);
 
<span class="p_del">-	printk(KERN_INFO &quot;software IO TLB [mem %#010llx-%#010llx] (%luMB) mapped at [%p-%p]\n&quot;,</span>
<span class="p_add">+	pr_info(&quot;software IO TLB [mem %#010llx-%#010llx] (%lu%cB) mapped at [%p-%p]\n&quot;,</span>
 	       (unsigned long long)io_tlb_start,
 	       (unsigned long long)io_tlb_end,
<span class="p_del">-	       bytes &gt;&gt; 20, vstart, vend - 1);</span>
<span class="p_add">+		bytes &gt;&gt; swiotlb_sz_shift,</span>
<span class="p_add">+		swiotlb_sz_shift == 20 ? &#39;M&#39; : &#39;K&#39;,</span>
<span class="p_add">+		vstart, vend - 1);</span>
 }
 
 int __init swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



