
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v9,7/7] drm/i915/gvt: Adding user interface for dma-buf - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v9,7/7] drm/i915/gvt: Adding user interface for dma-buf</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170581">Xiaoguang Chen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 15, 2017, 8 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497513611-2814-8-git-send-email-xiaoguang.chen@intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9788303/mbox/"
   >mbox</a>
|
   <a href="/patch/9788303/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9788303/">/patch/9788303/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C2D3260231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 08:02:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B108D1FE85
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 08:02:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A337C2823D; Thu, 15 Jun 2017 08:02:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BDC0F1FE85
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 08:01:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752573AbdFOIBk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Jun 2017 04:01:40 -0400
Received: from mga07.intel.com ([134.134.136.100]:10469 &quot;EHLO
	mga07.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752226AbdFOIBi (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Jun 2017 04:01:38 -0400
Received: from fmsmga004.fm.intel.com ([10.253.24.48])
	by orsmga105.jf.intel.com with ESMTP; 15 Jun 2017 01:01:25 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.39,342,1493708400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;274546963&quot;
Received: from chenxg-desktop.bj.intel.com ([10.238.135.182])
	by fmsmga004.fm.intel.com with ESMTP; 15 Jun 2017 01:01:21 -0700
From: Xiaoguang Chen &lt;xiaoguang.chen@intel.com&gt;
To: alex.williamson@redhat.com, kraxel@redhat.com,
	chris@chris-wilson.co.uk, intel-gfx@lists.freedesktop.org,
	linux-kernel@vger.kernel.org, zhenyuw@linux.intel.com,
	zhiyuan.lv@intel.com, intel-gvt-dev@lists.freedesktop.org,
	zhi.a.wang@intel.com, kevin.tian@intel.com
Cc: Xiaoguang Chen &lt;xiaoguang.chen@intel.com&gt;
Subject: [PATCH v9 7/7] drm/i915/gvt: Adding user interface for dma-buf
Date: Thu, 15 Jun 2017 16:00:11 +0800
Message-Id: &lt;1497513611-2814-8-git-send-email-xiaoguang.chen@intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1497513611-2814-1-git-send-email-xiaoguang.chen@intel.com&gt;
References: &lt;1497513611-2814-1-git-send-email-xiaoguang.chen@intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170581">Xiaoguang Chen</a> - June 15, 2017, 8 a.m.</div>
<pre class="content">
User space should create the management fd for the dma-buf operation first.
Then user can query the plane information and create dma-buf if necessary
using the management fd.
<span class="signed-off-by">
Signed-off-by: Xiaoguang Chen &lt;xiaoguang.chen@intel.com&gt;</span>
<span class="tested-by">Tested-by: Kechen Lu &lt;kechen.lu@intel.com&gt;</span>
---
 drivers/gpu/drm/i915/gvt/dmabuf.c    |  45 +++++++++++-
 drivers/gpu/drm/i915/gvt/dmabuf.h    |   5 ++
 drivers/gpu/drm/i915/gvt/gvt.c       |   3 +
 drivers/gpu/drm/i915/gvt/gvt.h       |   6 ++
 drivers/gpu/drm/i915/gvt/hypercall.h |   3 +
 drivers/gpu/drm/i915/gvt/kvmgt.c     | 136 +++++++++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/gvt/mpt.h       |  30 ++++++++
 drivers/gpu/drm/i915/gvt/vgpu.c      |   2 +
 8 files changed, 229 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/dmabuf.c b/drivers/gpu/drm/i915/gvt/dmabuf.c</span>
<span class="p_header">index 6ef4f60..a6a6f6d 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/dmabuf.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/dmabuf.c</span>
<span class="p_chunk">@@ -81,6 +81,31 @@</span> <span class="p_context"> static void intel_vgpu_gem_put_pages(struct drm_i915_gem_object *obj,</span>
 
 static void intel_vgpu_gem_release(struct drm_i915_gem_object *obj)
 {
<span class="p_add">+	struct intel_vgpu_dmabuf_obj *dmabuf_obj;</span>
<span class="p_add">+	struct intel_vgpu_fb_info *fb_info;</span>
<span class="p_add">+	struct intel_vgpu *vgpu;</span>
<span class="p_add">+	struct list_head *pos;</span>
<span class="p_add">+</span>
<span class="p_add">+	fb_info = (struct intel_vgpu_fb_info *)obj-&gt;gvt_info;</span>
<span class="p_add">+	if (WARN_ON(!fb_info || !fb_info-&gt;vgpu)) {</span>
<span class="p_add">+		gvt_vgpu_err(&quot;gvt info is invalid\n&quot;);</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	vgpu = fb_info-&gt;vgpu;</span>
<span class="p_add">+	mutex_lock(&amp;vgpu-&gt;dmabuf_list_lock);</span>
<span class="p_add">+	list_for_each(pos, &amp;vgpu-&gt;dmabuf_obj_list_head) {</span>
<span class="p_add">+		dmabuf_obj = container_of(pos, struct intel_vgpu_dmabuf_obj,</span>
<span class="p_add">+						list);</span>
<span class="p_add">+		if ((dmabuf_obj != NULL) &amp;&amp; (dmabuf_obj-&gt;obj == obj)) {</span>
<span class="p_add">+			kfree(dmabuf_obj);</span>
<span class="p_add">+			list_del(pos);</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	mutex_unlock(&amp;vgpu-&gt;dmabuf_list_lock);</span>
<span class="p_add">+	intel_gvt_hypervisor_put_vfio_device(vgpu);</span>
<span class="p_add">+out:</span>
 	kfree(obj-&gt;gvt_info);
 }
 
<span class="p_chunk">@@ -216,6 +241,7 @@</span> <span class="p_context"> int intel_vgpu_create_dmabuf(struct intel_vgpu *vgpu, void *args)</span>
 	struct vfio_dmabuf_mgr_create_dmabuf *gvt_dmabuf = args;
 	struct intel_vgpu_fb_info *fb_info;
 	int ret;
<span class="p_add">+	struct intel_vgpu_dmabuf_obj *dmabuf_obj;</span>
 
 	ret = intel_vgpu_get_plane_info(dev, vgpu, &amp;gvt_dmabuf-&gt;plane_info,
 					gvt_dmabuf-&gt;plane_id);
<span class="p_chunk">@@ -238,6 +264,18 @@</span> <span class="p_context"> int intel_vgpu_create_dmabuf(struct intel_vgpu *vgpu, void *args)</span>
 	fb_info-&gt;vgpu = vgpu;
 	obj-&gt;gvt_info = fb_info;
 
<span class="p_add">+	dmabuf_obj = kmalloc(sizeof(*dmabuf_obj), GFP_KERNEL);</span>
<span class="p_add">+	if (!dmabuf_obj) {</span>
<span class="p_add">+		gvt_vgpu_err(&quot;alloc dmabuf_obj failed\n&quot;);</span>
<span class="p_add">+		ret = -ENOMEM;</span>
<span class="p_add">+		goto out_free_info;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	dmabuf_obj-&gt;obj = obj;</span>
<span class="p_add">+	INIT_LIST_HEAD(&amp;dmabuf_obj-&gt;list);</span>
<span class="p_add">+	mutex_lock(&amp;vgpu-&gt;dmabuf_list_lock);</span>
<span class="p_add">+	list_add_tail(&amp;dmabuf_obj-&gt;list, &amp;vgpu-&gt;dmabuf_obj_list_head);</span>
<span class="p_add">+	mutex_unlock(&amp;vgpu-&gt;dmabuf_list_lock);</span>
<span class="p_add">+</span>
 	dmabuf = i915_gem_prime_export(dev, &amp;obj-&gt;base, DRM_CLOEXEC | DRM_RDWR);
 
 	if (IS_ERR(dmabuf)) {
<span class="p_chunk">@@ -251,11 +289,16 @@</span> <span class="p_context"> int intel_vgpu_create_dmabuf(struct intel_vgpu *vgpu, void *args)</span>
 		gvt_vgpu_err(&quot;create dma-buf fd failed ret:%d\n&quot;, ret);
 		goto out_free;
 	}
<span class="p_del">-</span>
<span class="p_add">+	if (intel_gvt_hypervisor_get_vfio_device(vgpu)) {</span>
<span class="p_add">+		gvt_vgpu_err(&quot;get vfio device failed\n&quot;);</span>
<span class="p_add">+		goto out_free;</span>
<span class="p_add">+	}</span>
 	gvt_dmabuf-&gt;fd = ret;
 
 	return 0;
 out_free:
<span class="p_add">+	kfree(dmabuf_obj);</span>
<span class="p_add">+out_free_info:</span>
 	kfree(fb_info);
 out:
 	i915_gem_object_put(obj);
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/dmabuf.h b/drivers/gpu/drm/i915/gvt/dmabuf.h</span>
<span class="p_header">index 8be9979..cafa781 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/dmabuf.h</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/dmabuf.h</span>
<span class="p_chunk">@@ -31,6 +31,11 @@</span> <span class="p_context"> struct intel_vgpu_fb_info {</span>
 	uint32_t fb_size;
 };
 
<span class="p_add">+struct intel_vgpu_dmabuf_obj {</span>
<span class="p_add">+	struct drm_i915_gem_object *obj;</span>
<span class="p_add">+	struct list_head list;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 int intel_vgpu_query_plane(struct intel_vgpu *vgpu, void *args);
 int intel_vgpu_create_dmabuf(struct intel_vgpu *vgpu, void *args);
 
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/gvt.c b/drivers/gpu/drm/i915/gvt/gvt.c</span>
<span class="p_header">index 2032917..d589830 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/gvt.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/gvt.c</span>
<span class="p_chunk">@@ -54,6 +54,9 @@</span> <span class="p_context"> static const struct intel_gvt_ops intel_gvt_ops = {</span>
 	.vgpu_reset = intel_gvt_reset_vgpu,
 	.vgpu_activate = intel_gvt_activate_vgpu,
 	.vgpu_deactivate = intel_gvt_deactivate_vgpu,
<span class="p_add">+	.vgpu_query_plane = intel_vgpu_query_plane,</span>
<span class="p_add">+	.vgpu_create_dmabuf = intel_vgpu_create_dmabuf,</span>
<span class="p_add">+</span>
 };
 
 /**
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/gvt.h b/drivers/gpu/drm/i915/gvt/gvt.h</span>
<span class="p_header">index 763a8c5..df7e216 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/gvt.h</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/gvt.h</span>
<span class="p_chunk">@@ -185,8 +185,12 @@</span> <span class="p_context"> struct intel_vgpu {</span>
 		struct kvm *kvm;
 		struct work_struct release_work;
 		atomic_t released;
<span class="p_add">+		struct vfio_device *vfio_device;</span>
 	} vdev;
 #endif
<span class="p_add">+	atomic_t mgr_fd_opened;</span>
<span class="p_add">+	struct list_head dmabuf_obj_list_head;</span>
<span class="p_add">+	struct mutex dmabuf_list_lock;</span>
 };
 
 struct intel_gvt_gm {
<span class="p_chunk">@@ -467,6 +471,8 @@</span> <span class="p_context"> struct intel_gvt_ops {</span>
 	void (*vgpu_reset)(struct intel_vgpu *);
 	void (*vgpu_activate)(struct intel_vgpu *);
 	void (*vgpu_deactivate)(struct intel_vgpu *);
<span class="p_add">+	int (*vgpu_query_plane)(struct intel_vgpu *vgpu, void *);</span>
<span class="p_add">+	int (*vgpu_create_dmabuf)(struct intel_vgpu *vgpu, void *);</span>
 };
 
 
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/hypercall.h b/drivers/gpu/drm/i915/gvt/hypercall.h</span>
<span class="p_header">index 32c345c..4f2161c 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/hypercall.h</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/hypercall.h</span>
<span class="p_chunk">@@ -56,6 +56,9 @@</span> <span class="p_context"> struct intel_gvt_mpt {</span>
 	int (*set_trap_area)(unsigned long handle, u64 start, u64 end,
 			     bool map);
 	int (*set_opregion)(void *vgpu);
<span class="p_add">+	int (*get_vfio_device)(void *vgpu);</span>
<span class="p_add">+	void (*put_vfio_device)(void *vgpu);</span>
<span class="p_add">+</span>
 };
 
 extern struct intel_gvt_mpt xengt_mpt;
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/kvmgt.c b/drivers/gpu/drm/i915/gvt/kvmgt.c</span>
<span class="p_header">index 6b4652a..9f71325 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/kvmgt.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/kvmgt.c</span>
<span class="p_chunk">@@ -41,6 +41,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/kvm_host.h&gt;
 #include &lt;linux/vfio.h&gt;
 #include &lt;linux/mdev.h&gt;
<span class="p_add">+#include &lt;linux/anon_inodes.h&gt;</span>
 
 #include &quot;i915_drv.h&quot;
 #include &quot;gvt.h&quot;
<span class="p_chunk">@@ -523,6 +524,98 @@</span> <span class="p_context"> static int kvmgt_set_opregion(void *p_vgpu)</span>
 	return ret;
 }
 
<span class="p_add">+static int kvmgt_get_vfio_device(void *vgpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!vfio_device_get_from_dev(</span>
<span class="p_add">+			mdev_dev(((struct intel_vgpu *)vgpu)-&gt;vdev.mdev)))</span>
<span class="p_add">+		return -ENODEV;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void kvmgt_put_vfio_device(void *vgpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (WARN_ON(!((struct intel_vgpu *)vgpu)-&gt;vdev.vfio_device))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	vfio_device_put(((struct intel_vgpu *)vgpu)-&gt;vdev.vfio_device);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int intel_vgpu_dmabuf_mgr_fd_mmap(struct file *file,</span>
<span class="p_add">+		struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return -EPERM;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int intel_vgpu_dmabuf_mgr_fd_release(struct inode *inode,</span>
<span class="p_add">+		struct file *filp)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct intel_vgpu *vgpu = filp-&gt;private_data;</span>
<span class="p_add">+	struct intel_vgpu_dmabuf_obj *obj;</span>
<span class="p_add">+	struct list_head *pos;</span>
<span class="p_add">+</span>
<span class="p_add">+	list_for_each(pos, &amp;vgpu-&gt;dmabuf_obj_list_head) {</span>
<span class="p_add">+		obj = container_of(pos, struct intel_vgpu_dmabuf_obj, list);</span>
<span class="p_add">+		if (WARN_ON(!obj))</span>
<span class="p_add">+			return -ENODEV;</span>
<span class="p_add">+		i915_gem_object_put(obj-&gt;obj);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	kvmgt_put_vfio_device(vgpu);</span>
<span class="p_add">+	atomic_set(&amp;vgpu-&gt;mgr_fd_opened, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static long intel_vgpu_dmabuf_mgr_fd_ioctl(struct file *filp,</span>
<span class="p_add">+		unsigned int ioctl, unsigned long arg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct intel_vgpu *vgpu = filp-&gt;private_data;</span>
<span class="p_add">+	int minsz;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ioctl == VFIO_DMABUF_MGR_QUERY_PLANE) {</span>
<span class="p_add">+		struct vfio_dmabuf_mgr_query_plane plane_info;</span>
<span class="p_add">+</span>
<span class="p_add">+		minsz = offsetofend(struct vfio_dmabuf_mgr_query_plane,</span>
<span class="p_add">+					plane_id);</span>
<span class="p_add">+		if (copy_from_user(&amp;plane_info, (void __user *)arg, minsz))</span>
<span class="p_add">+			return -EFAULT;</span>
<span class="p_add">+		if (plane_info.argsz &lt; minsz || plane_info.flags != 0)</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+		ret = intel_gvt_ops-&gt;vgpu_query_plane(vgpu, &amp;plane_info);</span>
<span class="p_add">+		if (ret != 0) {</span>
<span class="p_add">+			gvt_vgpu_err(&quot;query plane failed:%d\n&quot;, ret);</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		return copy_to_user((void __user *)arg, &amp;plane_info, minsz) ?</span>
<span class="p_add">+								-EFAULT : 0;</span>
<span class="p_add">+	} else if (ioctl == VFIO_DMABUF_MGR_CREATE_DMABUF) {</span>
<span class="p_add">+		struct vfio_dmabuf_mgr_create_dmabuf dmabuf;</span>
<span class="p_add">+</span>
<span class="p_add">+		minsz = offsetofend(struct vfio_dmabuf_mgr_create_dmabuf, fd);</span>
<span class="p_add">+		if (copy_from_user(&amp;dmabuf, (void __user *)arg, minsz))</span>
<span class="p_add">+			return -EFAULT;</span>
<span class="p_add">+		if (dmabuf.argsz &lt; minsz || dmabuf.flags != 0)</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = intel_gvt_ops-&gt;vgpu_create_dmabuf(vgpu, &amp;dmabuf);</span>
<span class="p_add">+		if (ret != 0)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+		return copy_to_user((void __user *)arg, &amp;dmabuf, minsz) ?</span>
<span class="p_add">+								-EFAULT : 0;</span>
<span class="p_add">+	} else</span>
<span class="p_add">+		gvt_vgpu_err(&quot;unsupported dmabuf mgr fd operation\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	return -EINVAL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static const struct file_operations intel_vgpu_dmabuf_mgr_fd_ops = {</span>
<span class="p_add">+	.release        = intel_vgpu_dmabuf_mgr_fd_release,</span>
<span class="p_add">+	.unlocked_ioctl = intel_vgpu_dmabuf_mgr_fd_ioctl,</span>
<span class="p_add">+	.mmap           = intel_vgpu_dmabuf_mgr_fd_mmap,</span>
<span class="p_add">+	.llseek         = noop_llseek,</span>
<span class="p_add">+};</span>
 static int intel_vgpu_create(struct kobject *kobj, struct mdev_device *mdev)
 {
 	struct intel_vgpu *vgpu = NULL;
<span class="p_chunk">@@ -530,6 +623,7 @@</span> <span class="p_context"> static int intel_vgpu_create(struct kobject *kobj, struct mdev_device *mdev)</span>
 	struct device *pdev;
 	void *gvt;
 	int ret;
<span class="p_add">+	struct vfio_device *device;</span>
 
 	pdev = mdev_parent_dev(mdev);
 	gvt = kdev_to_i915(pdev)-&gt;gvt;
<span class="p_chunk">@@ -554,6 +648,14 @@</span> <span class="p_context"> static int intel_vgpu_create(struct kobject *kobj, struct mdev_device *mdev)</span>
 	vgpu-&gt;vdev.mdev = mdev;
 	mdev_set_drvdata(mdev, vgpu);
 
<span class="p_add">+	device = vfio_device_get_from_dev(mdev_dev(mdev));</span>
<span class="p_add">+	if (device == NULL) {</span>
<span class="p_add">+		gvt_vgpu_err(&quot;get vfio device failed\n&quot;);</span>
<span class="p_add">+		ret = -ENODEV;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	vgpu-&gt;vdev.vfio_device = device;</span>
<span class="p_add">+</span>
 	gvt_dbg_core(&quot;intel_vgpu_create succeeded for mdev: %s\n&quot;,
 		     dev_name(mdev_dev(mdev)));
 	ret = 0;
<span class="p_chunk">@@ -1249,6 +1351,36 @@</span> <span class="p_context"> static long intel_vgpu_ioctl(struct mdev_device *mdev, unsigned int cmd,</span>
 	} else if (cmd == VFIO_DEVICE_RESET) {
 		intel_gvt_ops-&gt;vgpu_reset(vgpu);
 		return 0;
<span class="p_add">+	} else if (cmd == VFIO_DEVICE_GET_FD) {</span>
<span class="p_add">+		int fd;</span>
<span class="p_add">+		u32 type;</span>
<span class="p_add">+		int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (copy_from_user(&amp;type, (void __user *)arg, sizeof(type)))</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+		if (type != VFIO_DEVICE_DMABUF_MGR_FD)</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (atomic_read(&amp;vgpu-&gt;mgr_fd_opened)) {</span>
<span class="p_add">+			gvt_vgpu_err(&quot;mgr fd already opened\n&quot;);</span>
<span class="p_add">+			return -EPERM;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = kvmgt_get_vfio_device(vgpu);</span>
<span class="p_add">+		if (ret != 0)</span>
<span class="p_add">+			return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+		fd = anon_inode_getfd(&quot;intel-vgpu-dmabuf-mgr-fd&quot;,</span>
<span class="p_add">+			&amp;intel_vgpu_dmabuf_mgr_fd_ops,</span>
<span class="p_add">+			vgpu, O_RDWR | O_CLOEXEC);</span>
<span class="p_add">+		if (fd &lt; 0) {</span>
<span class="p_add">+			kvmgt_put_vfio_device(vgpu);</span>
<span class="p_add">+			gvt_vgpu_err(&quot;create dmabuf mgr fd failed\n&quot;);</span>
<span class="p_add">+			return -EINVAL;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		atomic_cmpxchg(&amp;vgpu-&gt;mgr_fd_opened, 0, 1);</span>
<span class="p_add">+</span>
<span class="p_add">+		return fd;</span>
 	}
 
 	return 0;
<span class="p_chunk">@@ -1470,6 +1602,7 @@</span> <span class="p_context"> static int kvmgt_guest_init(struct mdev_device *mdev)</span>
 
 	kvmgt_protect_table_init(info);
 	gvt_cache_init(vgpu);
<span class="p_add">+	mutex_init(&amp;vgpu-&gt;dmabuf_list_lock);</span>
 
 	info-&gt;track_node.track_write = kvmgt_page_track_write;
 	info-&gt;track_node.track_flush_slot = kvmgt_page_track_flush_slot;
<span class="p_chunk">@@ -1612,6 +1745,9 @@</span> <span class="p_context"> struct intel_gvt_mpt kvmgt_mpt = {</span>
 	.write_gpa = kvmgt_write_gpa,
 	.gfn_to_mfn = kvmgt_gfn_to_pfn,
 	.set_opregion = kvmgt_set_opregion,
<span class="p_add">+	.get_vfio_device = kvmgt_get_vfio_device,</span>
<span class="p_add">+	.put_vfio_device = kvmgt_put_vfio_device,</span>
<span class="p_add">+</span>
 };
 EXPORT_SYMBOL_GPL(kvmgt_mpt);
 
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/mpt.h b/drivers/gpu/drm/i915/gvt/mpt.h</span>
<span class="p_header">index ab71300..12dabfc 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/mpt.h</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/mpt.h</span>
<span class="p_chunk">@@ -308,4 +308,34 @@</span> <span class="p_context"> static inline int intel_gvt_hypervisor_set_opregion(struct intel_vgpu *vgpu)</span>
 	return intel_gvt_host.mpt-&gt;set_opregion(vgpu);
 }
 
<span class="p_add">+/**</span>
<span class="p_add">+ * intel_gvt_hypervisor_get_vfio_device - increase vfio device ref count</span>
<span class="p_add">+ * @vgpu: a vGPU</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns:</span>
<span class="p_add">+ * Zero on success, negative error code if failed.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int intel_gvt_hypervisor_get_vfio_device(struct intel_vgpu *vgpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!intel_gvt_host.mpt-&gt;get_vfio_device)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	return intel_gvt_host.mpt-&gt;get_vfio_device(vgpu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/**</span>
<span class="p_add">+ * intel_gvt_hypervisor_put_vfio_device - decrease vfio device ref count</span>
<span class="p_add">+ * @vgpu: a vGPU</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns:</span>
<span class="p_add">+ * Zero on success, negative error code if failed.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void intel_gvt_hypervisor_put_vfio_device(struct intel_vgpu *vgpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!intel_gvt_host.mpt-&gt;put_vfio_device)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	intel_gvt_host.mpt-&gt;put_vfio_device(vgpu);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #endif /* _GVT_MPT_H_ */
<span class="p_header">diff --git a/drivers/gpu/drm/i915/gvt/vgpu.c b/drivers/gpu/drm/i915/gvt/vgpu.c</span>
<span class="p_header">index 8e1d504..8747613 100644</span>
<span class="p_header">--- a/drivers/gpu/drm/i915/gvt/vgpu.c</span>
<span class="p_header">+++ b/drivers/gpu/drm/i915/gvt/vgpu.c</span>
<span class="p_chunk">@@ -346,6 +346,8 @@</span> <span class="p_context"> static struct intel_vgpu *__intel_gvt_create_vgpu(struct intel_gvt *gvt,</span>
 	vgpu-&gt;gvt = gvt;
 	vgpu-&gt;sched_ctl.weight = param-&gt;weight;
 	bitmap_zero(vgpu-&gt;tlb_handle_pending, I915_NUM_ENGINES);
<span class="p_add">+	INIT_LIST_HEAD(&amp;vgpu-&gt;dmabuf_obj_list_head);</span>
<span class="p_add">+	atomic_set(&amp;vgpu-&gt;mgr_fd_opened, 0);</span>
 
 	intel_vgpu_init_cfg_space(vgpu, param-&gt;primary);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



