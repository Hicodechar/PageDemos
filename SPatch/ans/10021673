
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,pull] x86 fixes for 4.14 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,pull] x86 fixes for 4.14</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 22, 2017, 10:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.20.1710221244530.1905@nanos&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10021673/mbox/"
   >mbox</a>
|
   <a href="/patch/10021673/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10021673/">/patch/10021673/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3EA6360234 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 22 Oct 2017 10:55:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3476728712
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 22 Oct 2017 10:55:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 287352876C; Sun, 22 Oct 2017 10:55:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6DBC828712
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 22 Oct 2017 10:55:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751618AbdJVKzS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 22 Oct 2017 06:55:18 -0400
Received: from Galois.linutronix.de ([146.0.238.70]:44665 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751496AbdJVKzQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 22 Oct 2017 06:55:16 -0400
Received: from 198.151.broadband16.iol.cz ([90.183.151.198] helo=nanos)
	by Galois.linutronix.de with esmtpsa
	(TLS1.2:DHE_RSA_AES_256_CBC_SHA256:256) (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1e6DuK-0002QP-NI; Sun, 22 Oct 2017 12:55:07 +0200
Date: Sun, 22 Oct 2017 12:55:05 +0200 (CEST)
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
cc: LKML &lt;linux-kernel@vger.kernel.org&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Subject: [GIT pull] x86 fixes for 4.14
Message-ID: &lt;alpine.DEB.2.20.1710221244530.1905@nanos&gt;
User-Agent: Alpine 2.20 (DEB 67 2015-01-07)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
X-Linutronix-Spam-Score: -1.0
X-Linutronix-Spam-Level: -
X-Linutronix-Spam-Status: No , -1.0 points, 5.0 required, ALL_TRUSTED=-1,
	SHORTCIRCUIT=-0.0001
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Oct. 22, 2017, 10:55 a.m.</div>
<pre class="content">
Linus,

please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

A couple of fixes addressing the following issues:

  - The last polishing for the TLB code, removing the last BUG_ON() and the
    debug file along with tidying up the lazy TLB code.

  - Prevent triple fault on 1st Gen. 486 caused by stupidly calling the
    early IDT setup after the first function which causes a fault which
    should be caught by the exception table.

  - Limit the mmap of /dev/mem to valid addresses

  - Prevent late microcode loading on Broadwell X

  - Remove a redundant assignment in the cache info code

Thanks,

	tglx

------------------&gt;
Andy Lutomirski (3):
      x86/mm/64: Remove the last VM_BUG_ON() from the TLB code
      x86/mm: Tidy up &quot;x86/mm: Flush more aggressively in lazy TLB mode&quot;
      x86/mm: Remove debug/x86/tlb_defer_switch_to_init_mm

Borislav Petkov (1):
      x86/microcode/intel: Disable late loading on model 79

Colin Ian King (1):
      x86/cpu/intel_cacheinfo: Remove redundant assignment to &#39;this_leaf&#39;

Craig Bergstrom (1):
      x86/mm: Limit mmap() of /dev/mem to valid physical addresses

Thomas Gleixner (1):
      x86/idt: Initialize early IDT before cr4_init_shadow()


 arch/x86/include/asm/io.h             |  4 +++
 arch/x86/include/asm/tlbflush.h       | 21 ++++++++----
 arch/x86/kernel/cpu/intel_cacheinfo.c |  1 -
 arch/x86/kernel/cpu/microcode/intel.c | 19 +++++++++++
 arch/x86/kernel/head32.c              |  5 +--
 arch/x86/mm/mmap.c                    | 12 +++++++
 arch/x86/mm/tlb.c                     | 64 ++++-------------------------------
 7 files changed, 59 insertions(+), 67 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/io.h b/arch/x86/include/asm/io.h</span>
<span class="p_header">index c40a95c33bb8..322d25ae23ab 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/io.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/io.h</span>
<span class="p_chunk">@@ -110,6 +110,10 @@</span> <span class="p_context"> build_mmio_write(__writeq, &quot;q&quot;, unsigned long, &quot;r&quot;, )</span>
 
 #endif
 
<span class="p_add">+#define ARCH_HAS_VALID_PHYS_ADDR_RANGE</span>
<span class="p_add">+extern int valid_phys_addr_range(phys_addr_t addr, size_t size);</span>
<span class="p_add">+extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);</span>
<span class="p_add">+</span>
 /**
  *	virt_to_phys	-	map virtual addresses to physical
  *	@address: address to remap
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index d362161d3291..c4aed0de565e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -82,12 +82,21 @@</span> <span class="p_context"> static inline u64 inc_mm_tlb_gen(struct mm_struct *mm)</span>
 #define __flush_tlb_single(addr) __native_flush_tlb_single(addr)
 #endif
 
<span class="p_del">-/*</span>
<span class="p_del">- * If tlb_use_lazy_mode is true, then we try to avoid switching CR3 to point</span>
<span class="p_del">- * to init_mm when we switch to a kernel thread (e.g. the idle thread).  If</span>
<span class="p_del">- * it&#39;s false, then we immediately switch CR3 when entering a kernel thread.</span>
<span class="p_del">- */</span>
<span class="p_del">-DECLARE_STATIC_KEY_TRUE(tlb_use_lazy_mode);</span>
<span class="p_add">+static inline bool tlb_defer_switch_to_init_mm(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If we have PCID, then switching to init_mm is reasonably</span>
<span class="p_add">+	 * fast.  If we don&#39;t have PCID, then switching to init_mm is</span>
<span class="p_add">+	 * quite slow, so we try to defer it in the hopes that we can</span>
<span class="p_add">+	 * avoid it entirely.  The latter approach runs the risk of</span>
<span class="p_add">+	 * receiving otherwise unnecessary IPIs.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * This choice is just a heuristic.  The tlb code can handle this</span>
<span class="p_add">+	 * function returning true or false regardless of whether we have</span>
<span class="p_add">+	 * PCID.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return !static_cpu_has(X86_FEATURE_PCID);</span>
<span class="p_add">+}</span>
 
 /*
  * 6 because 6 should be plenty and struct tlb_state will fit in
<span class="p_header">diff --git a/arch/x86/kernel/cpu/intel_cacheinfo.c b/arch/x86/kernel/cpu/intel_cacheinfo.c</span>
<span class="p_header">index 24f749324c0f..9990a71e311f 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/intel_cacheinfo.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/intel_cacheinfo.c</span>
<span class="p_chunk">@@ -831,7 +831,6 @@</span> <span class="p_context"> static int __cache_amd_cpumap_setup(unsigned int cpu, int index,</span>
 	} else if (boot_cpu_has(X86_FEATURE_TOPOEXT)) {
 		unsigned int apicid, nshared, first, last;
 
<span class="p_del">-		this_leaf = this_cpu_ci-&gt;info_list + index;</span>
 		nshared = base-&gt;eax.split.num_threads_sharing + 1;
 		apicid = cpu_data(cpu).apicid;
 		first = apicid - (apicid % nshared);
<span class="p_header">diff --git a/arch/x86/kernel/cpu/microcode/intel.c b/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_header">index 8f7a9bbad514..7dbcb7adf797 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_chunk">@@ -34,6 +34,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/mm.h&gt;
 
 #include &lt;asm/microcode_intel.h&gt;
<span class="p_add">+#include &lt;asm/intel-family.h&gt;</span>
 #include &lt;asm/processor.h&gt;
 #include &lt;asm/tlbflush.h&gt;
 #include &lt;asm/setup.h&gt;
<span class="p_chunk">@@ -918,6 +919,18 @@</span> <span class="p_context"> static int get_ucode_fw(void *to, const void *from, size_t n)</span>
 	return 0;
 }
 
<span class="p_add">+static bool is_blacklisted(unsigned int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct cpuinfo_x86 *c = &amp;cpu_data(cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (c-&gt;x86 == 6 &amp;&amp; c-&gt;x86_model == INTEL_FAM6_BROADWELL_X) {</span>
<span class="p_add">+		pr_err_once(&quot;late loading on model 79 is disabled.\n&quot;);</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static enum ucode_state request_microcode_fw(int cpu, struct device *device,
 					     bool refresh_fw)
 {
<span class="p_chunk">@@ -926,6 +939,9 @@</span> <span class="p_context"> static enum ucode_state request_microcode_fw(int cpu, struct device *device,</span>
 	const struct firmware *firmware;
 	enum ucode_state ret;
 
<span class="p_add">+	if (is_blacklisted(cpu))</span>
<span class="p_add">+		return UCODE_NFOUND;</span>
<span class="p_add">+</span>
 	sprintf(name, &quot;intel-ucode/%02x-%02x-%02x&quot;,
 		c-&gt;x86, c-&gt;x86_model, c-&gt;x86_mask);
 
<span class="p_chunk">@@ -950,6 +966,9 @@</span> <span class="p_context"> static int get_ucode_user(void *to, const void *from, size_t n)</span>
 static enum ucode_state
 request_microcode_user(int cpu, const void __user *buf, size_t size)
 {
<span class="p_add">+	if (is_blacklisted(cpu))</span>
<span class="p_add">+		return UCODE_NFOUND;</span>
<span class="p_add">+</span>
 	return generic_load_microcode(cpu, (void *)buf, size, &amp;get_ucode_user);
 }
 
<span class="p_header">diff --git a/arch/x86/kernel/head32.c b/arch/x86/kernel/head32.c</span>
<span class="p_header">index cf2ce063f65a..2902ca4d5993 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head32.c</span>
<span class="p_chunk">@@ -30,10 +30,11 @@</span> <span class="p_context"> static void __init i386_default_early_setup(void)</span>
 
 asmlinkage __visible void __init i386_start_kernel(void)
 {
<span class="p_del">-	cr4_init_shadow();</span>
<span class="p_del">-</span>
<span class="p_add">+	/* Make sure IDT is set up before any exception happens */</span>
 	idt_setup_early_handler();
 
<span class="p_add">+	cr4_init_shadow();</span>
<span class="p_add">+</span>
 	sanitize_boot_params(&amp;boot_params);
 
 	x86_early_init_platform_quirks();
<span class="p_header">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</span>
<span class="p_header">index a99679826846..320c6237e1d1 100644</span>
<span class="p_header">--- a/arch/x86/mm/mmap.c</span>
<span class="p_header">+++ b/arch/x86/mm/mmap.c</span>
<span class="p_chunk">@@ -174,3 +174,15 @@</span> <span class="p_context"> const char *arch_vma_name(struct vm_area_struct *vma)</span>
 		return &quot;[mpx]&quot;;
 	return NULL;
 }
<span class="p_add">+</span>
<span class="p_add">+int valid_phys_addr_range(phys_addr_t addr, size_t count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return addr + count &lt;= __pa(high_memory);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int valid_mmap_phys_addr_range(unsigned long pfn, size_t count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	phys_addr_t addr = (phys_addr_t)pfn &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+	return valid_phys_addr_range(addr, count);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 658bf0090565..0f3d0cea4d00 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -30,7 +30,6 @@</span> <span class="p_context"></span>
 
 atomic64_t last_mm_ctx_id = ATOMIC64_INIT(1);
 
<span class="p_del">-DEFINE_STATIC_KEY_TRUE(tlb_use_lazy_mode);</span>
 
 static void choose_new_asid(struct mm_struct *next, u64 next_tlb_gen,
 			    u16 *new_asid, bool *need_flush)
<span class="p_chunk">@@ -147,8 +146,8 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 	this_cpu_write(cpu_tlbstate.is_lazy, false);
 
 	if (real_prev == next) {
<span class="p_del">-		VM_BUG_ON(this_cpu_read(cpu_tlbstate.ctxs[prev_asid].ctx_id) !=</span>
<span class="p_del">-			  next-&gt;context.ctx_id);</span>
<span class="p_add">+		VM_WARN_ON(this_cpu_read(cpu_tlbstate.ctxs[prev_asid].ctx_id) !=</span>
<span class="p_add">+			   next-&gt;context.ctx_id);</span>
 
 		/*
 		 * We don&#39;t currently support having a real mm loaded without
<span class="p_chunk">@@ -213,6 +212,9 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 }
 
 /*
<span class="p_add">+ * Please ignore the name of this function.  It should be called</span>
<span class="p_add">+ * switch_to_kernel_thread().</span>
<span class="p_add">+ *</span>
  * enter_lazy_tlb() is a hint from the scheduler that we are entering a
  * kernel thread or other context without an mm.  Acceptable implementations
  * include doing nothing whatsoever, switching to init_mm, or various clever
<span class="p_chunk">@@ -227,7 +229,7 @@</span> <span class="p_context"> void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
 	if (this_cpu_read(cpu_tlbstate.loaded_mm) == &amp;init_mm)
 		return;
 
<span class="p_del">-	if (static_branch_unlikely(&amp;tlb_use_lazy_mode)) {</span>
<span class="p_add">+	if (tlb_defer_switch_to_init_mm()) {</span>
 		/*
 		 * There&#39;s a significant optimization that may be possible
 		 * here.  We have accurate enough TLB flush tracking that we
<span class="p_chunk">@@ -626,57 +628,3 @@</span> <span class="p_context"> static int __init create_tlb_single_page_flush_ceiling(void)</span>
 	return 0;
 }
 late_initcall(create_tlb_single_page_flush_ceiling);
<span class="p_del">-</span>
<span class="p_del">-static ssize_t tlblazy_read_file(struct file *file, char __user *user_buf,</span>
<span class="p_del">-				 size_t count, loff_t *ppos)</span>
<span class="p_del">-{</span>
<span class="p_del">-	char buf[2];</span>
<span class="p_del">-</span>
<span class="p_del">-	buf[0] = static_branch_likely(&amp;tlb_use_lazy_mode) ? &#39;1&#39; : &#39;0&#39;;</span>
<span class="p_del">-	buf[1] = &#39;\n&#39;;</span>
<span class="p_del">-</span>
<span class="p_del">-	return simple_read_from_buffer(user_buf, count, ppos, buf, 2);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static ssize_t tlblazy_write_file(struct file *file,</span>
<span class="p_del">-		 const char __user *user_buf, size_t count, loff_t *ppos)</span>
<span class="p_del">-{</span>
<span class="p_del">-	bool val;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (kstrtobool_from_user(user_buf, count, &amp;val))</span>
<span class="p_del">-		return -EINVAL;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (val)</span>
<span class="p_del">-		static_branch_enable(&amp;tlb_use_lazy_mode);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		static_branch_disable(&amp;tlb_use_lazy_mode);</span>
<span class="p_del">-</span>
<span class="p_del">-	return count;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static const struct file_operations fops_tlblazy = {</span>
<span class="p_del">-	.read = tlblazy_read_file,</span>
<span class="p_del">-	.write = tlblazy_write_file,</span>
<span class="p_del">-	.llseek = default_llseek,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static int __init init_tlb_use_lazy_mode(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (boot_cpu_has(X86_FEATURE_PCID)) {</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Heuristic: with PCID on, switching to and from</span>
<span class="p_del">-		 * init_mm is reasonably fast, but remote flush IPIs</span>
<span class="p_del">-		 * as expensive as ever, so turn off lazy TLB mode.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * We can&#39;t do this in setup_pcid() because static keys</span>
<span class="p_del">-		 * haven&#39;t been initialized yet, and it would blow up</span>
<span class="p_del">-		 * badly.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		static_branch_disable(&amp;tlb_use_lazy_mode);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	debugfs_create_file(&quot;tlb_use_lazy_mode&quot;, S_IRUSR | S_IWUSR,</span>
<span class="p_del">-			    arch_debugfs_dir, NULL, &amp;fops_tlblazy);</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>
<span class="p_del">-late_initcall(init_tlb_use_lazy_mode);</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



