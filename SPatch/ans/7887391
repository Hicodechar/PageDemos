
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] iommu/arm-smmu: Tidy up 64-bit/atomic I/O accesses - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] iommu/arm-smmu: Tidy up 64-bit/atomic I/O accesses</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 18, 2015, 6:54 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;4dcd1b2a30a8a12cb5010d17c416aca60cf9ed19.1450464706.git.robin.murphy@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7887391/mbox/"
   >mbox</a>
|
   <a href="/patch/7887391/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7887391/">/patch/7887391/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 58F3DBEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Dec 2015 18:55:16 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 6B1BD203EB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Dec 2015 18:55:15 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 5FC67203ED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Dec 2015 18:55:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933174AbbLRSzB (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 18 Dec 2015 13:55:01 -0500
Received: from foss.arm.com ([217.140.101.70]:42357 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932958AbbLRSy6 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 18 Dec 2015 13:54:58 -0500
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id CC2AD4F2;
	Fri, 18 Dec 2015 10:54:32 -0800 (PST)
Received: from e104324-lin.cambridge.arm.com (e104324-lin.cambridge.arm.com
	[10.1.205.141])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id
	D4FD33F308; Fri, 18 Dec 2015 10:54:56 -0800 (PST)
From: Robin Murphy &lt;robin.murphy@arm.com&gt;
To: will.deacon@arm.com, arnd@arndb.de
Cc: linux-kernel@vger.kernel.org, iommu@lists.linux-foundation.org,
	linux-arm-kernel@lists.infradead.org, mitchelh@codeaurora.org,
	tchalamarla@caviumnetworks.com
Subject: [PATCH 2/2] iommu/arm-smmu: Tidy up 64-bit/atomic I/O accesses
Date: Fri, 18 Dec 2015 18:54:46 +0000
Message-Id: &lt;4dcd1b2a30a8a12cb5010d17c416aca60cf9ed19.1450464706.git.robin.murphy@arm.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;a2664d5691ff1889d80c711577cbd20680191b98.1450464706.git.robin.murphy@arm.com&gt;
References: &lt;a2664d5691ff1889d80c711577cbd20680191b98.1450464706.git.robin.murphy@arm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77581">Robin Murphy</a> - Dec. 18, 2015, 6:54 p.m.</div>
<pre class="content">
With {read,write}q_relaxed now able to fall back to the common
nonatomic-hi-lo helper, make use of that so that we don&#39;t have to
open-code our own. In the process, also convert the other remaining
split accesses, and repurpose the custom accessor to smooth out the
couple of troublesome instances where we really want to avoid
nonatomic writes (and a 64-bit access is unnecessary in the 32-bit
context formats we would use on a 32-bit CPU).

This paves the way for getting rid of some of the assumptions currently
baked into the driver which make it really awkward to use 32-bit context
formats with SMMUv2 under a 64-bit kernel.
<span class="signed-off-by">
Signed-off-by: Robin Murphy &lt;robin.murphy@arm.com&gt;</span>
---
 drivers/iommu/arm-smmu.c | 48 +++++++++++++++++++-----------------------------
 1 file changed, 19 insertions(+), 29 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c</span>
<span class="p_header">index 59ee4b8..bdb85b5 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu.c</span>
<span class="p_chunk">@@ -33,6 +33,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/err.h&gt;
 #include &lt;linux/interrupt.h&gt;
 #include &lt;linux/io.h&gt;
<span class="p_add">+#include &lt;linux/io-64-nonatomic-hi-lo.h&gt;</span>
 #include &lt;linux/iommu.h&gt;
 #include &lt;linux/iopoll.h&gt;
 #include &lt;linux/module.h&gt;
<span class="p_chunk">@@ -70,16 +71,15 @@</span> <span class="p_context"></span>
 		((smmu-&gt;options &amp; ARM_SMMU_OPT_SECURE_CFG_ACCESS)	\
 			? 0x400 : 0))
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Some 64-bit registers only make sense to write atomically, but in such</span>
<span class="p_add">+ * cases all the data relevant to AArch32 formats lies within the lower word,</span>
<span class="p_add">+ * therefore this actually makes more sense than it might first appear.</span>
<span class="p_add">+ */</span>
 #ifdef CONFIG_64BIT
<span class="p_del">-#define smmu_writeq	writeq_relaxed</span>
<span class="p_add">+#define smmu_write_atomic_lq		writeq_relaxed</span>
 #else
<span class="p_del">-#define smmu_writeq(reg64, addr)				\</span>
<span class="p_del">-	do {							\</span>
<span class="p_del">-		u64 __val = (reg64);				\</span>
<span class="p_del">-		void __iomem *__addr = (addr);			\</span>
<span class="p_del">-		writel_relaxed(__val &gt;&gt; 32, __addr + 4);	\</span>
<span class="p_del">-		writel_relaxed(__val, __addr);			\</span>
<span class="p_del">-	} while (0)</span>
<span class="p_add">+#define smmu_write_atomic_lq		writel_relaxed</span>
 #endif
 
 /* Configuration registers */
<span class="p_chunk">@@ -202,11 +202,9 @@</span> <span class="p_context"></span>
 #define ARM_SMMU_CB_TTBCR		0x30
 #define ARM_SMMU_CB_S1_MAIR0		0x38
 #define ARM_SMMU_CB_S1_MAIR1		0x3c
<span class="p_del">-#define ARM_SMMU_CB_PAR_LO		0x50</span>
<span class="p_del">-#define ARM_SMMU_CB_PAR_HI		0x54</span>
<span class="p_add">+#define ARM_SMMU_CB_PAR			0x50</span>
 #define ARM_SMMU_CB_FSR			0x58
<span class="p_del">-#define ARM_SMMU_CB_FAR_LO		0x60</span>
<span class="p_del">-#define ARM_SMMU_CB_FAR_HI		0x64</span>
<span class="p_add">+#define ARM_SMMU_CB_FAR			0x60</span>
 #define ARM_SMMU_CB_FSYNR0		0x68
 #define ARM_SMMU_CB_S1_TLBIVA		0x600
 #define ARM_SMMU_CB_S1_TLBIASID		0x610
<span class="p_chunk">@@ -618,7 +616,7 @@</span> <span class="p_context"> static void arm_smmu_tlb_inv_range_nosync(unsigned long iova, size_t size,</span>
 			      ARM_SMMU_CB_S2_TLBIIPAS2;
 		iova &gt;&gt;= 12;
 		do {
<span class="p_del">-			writeq_relaxed(iova, reg);</span>
<span class="p_add">+			smmu_write_atomic_lq(iova, reg);</span>
 			iova += granule &gt;&gt; 12;
 		} while (size -= granule);
 #endif
<span class="p_chunk">@@ -637,7 +635,7 @@</span> <span class="p_context"> static struct iommu_gather_ops arm_smmu_gather_ops = {</span>
 static irqreturn_t arm_smmu_context_fault(int irq, void *dev)
 {
 	int flags, ret;
<span class="p_del">-	u32 fsr, far, fsynr, resume;</span>
<span class="p_add">+	u32 fsr, fsynr, resume;</span>
 	unsigned long iova;
 	struct iommu_domain *domain = dev;
 	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);
<span class="p_chunk">@@ -659,13 +657,7 @@</span> <span class="p_context"> static irqreturn_t arm_smmu_context_fault(int irq, void *dev)</span>
 	fsynr = readl_relaxed(cb_base + ARM_SMMU_CB_FSYNR0);
 	flags = fsynr &amp; FSYNR0_WNR ? IOMMU_FAULT_WRITE : IOMMU_FAULT_READ;
 
<span class="p_del">-	far = readl_relaxed(cb_base + ARM_SMMU_CB_FAR_LO);</span>
<span class="p_del">-	iova = far;</span>
<span class="p_del">-#ifdef CONFIG_64BIT</span>
<span class="p_del">-	far = readl_relaxed(cb_base + ARM_SMMU_CB_FAR_HI);</span>
<span class="p_del">-	iova |= ((unsigned long)far &lt;&lt; 32);</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
<span class="p_add">+	iova = readq_relaxed(cb_base + ARM_SMMU_CB_FAR);</span>
 	if (!report_iommu_fault(domain, smmu-&gt;dev, iova, flags)) {
 		ret = IRQ_HANDLED;
 		resume = RESUME_RETRY;
<span class="p_chunk">@@ -761,14 +753,14 @@</span> <span class="p_context"> static void arm_smmu_init_context_bank(struct arm_smmu_domain *smmu_domain,</span>
 		reg64 = pgtbl_cfg-&gt;arm_lpae_s1_cfg.ttbr[0];
 
 		reg64 |= ((u64)ARM_SMMU_CB_ASID(cfg)) &lt;&lt; TTBRn_ASID_SHIFT;
<span class="p_del">-		smmu_writeq(reg64, cb_base + ARM_SMMU_CB_TTBR0);</span>
<span class="p_add">+		writeq_relaxed(reg64, cb_base + ARM_SMMU_CB_TTBR0);</span>
 
 		reg64 = pgtbl_cfg-&gt;arm_lpae_s1_cfg.ttbr[1];
 		reg64 |= ((u64)ARM_SMMU_CB_ASID(cfg)) &lt;&lt; TTBRn_ASID_SHIFT;
<span class="p_del">-		smmu_writeq(reg64, cb_base + ARM_SMMU_CB_TTBR1);</span>
<span class="p_add">+		writeq_relaxed(reg64, cb_base + ARM_SMMU_CB_TTBR1);</span>
 	} else {
 		reg64 = pgtbl_cfg-&gt;arm_lpae_s2_cfg.vttbr;
<span class="p_del">-		smmu_writeq(reg64, cb_base + ARM_SMMU_CB_TTBR0);</span>
<span class="p_add">+		writeq_relaxed(reg64, cb_base + ARM_SMMU_CB_TTBR0);</span>
 	}
 
 	/* TTBCR */
<span class="p_chunk">@@ -1226,8 +1218,8 @@</span> <span class="p_context"> static phys_addr_t arm_smmu_iova_to_phys_hard(struct iommu_domain *domain,</span>
 	/* ATS1 registers can only be written atomically */
 	va = iova &amp; ~0xfffUL;
 	if (smmu-&gt;version == ARM_SMMU_V2)
<span class="p_del">-		smmu_writeq(va, cb_base + ARM_SMMU_CB_ATS1PR);</span>
<span class="p_del">-	else</span>
<span class="p_add">+		smmu_write_atomic_lq(va, cb_base + ARM_SMMU_CB_ATS1PR);</span>
<span class="p_add">+	else /* Register is only 32-bit in v1 */</span>
 		writel_relaxed(va, cb_base + ARM_SMMU_CB_ATS1PR);
 
 	if (readl_poll_timeout_atomic(cb_base + ARM_SMMU_CB_ATSR, tmp,
<span class="p_chunk">@@ -1238,9 +1230,7 @@</span> <span class="p_context"> static phys_addr_t arm_smmu_iova_to_phys_hard(struct iommu_domain *domain,</span>
 		return ops-&gt;iova_to_phys(ops, iova);
 	}
 
<span class="p_del">-	phys = readl_relaxed(cb_base + ARM_SMMU_CB_PAR_LO);</span>
<span class="p_del">-	phys |= ((u64)readl_relaxed(cb_base + ARM_SMMU_CB_PAR_HI)) &lt;&lt; 32;</span>
<span class="p_del">-</span>
<span class="p_add">+	phys = readq_relaxed(cb_base + ARM_SMMU_CB_PAR);</span>
 	if (phys &amp; CB_PAR_F) {
 		dev_err(dev, &quot;translation fault!\n&quot;);
 		dev_err(dev, &quot;PAR = 0x%llx\n&quot;, phys);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



