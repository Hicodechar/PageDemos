
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/3] Update efi_thunk to use efi_call_virt_generic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/3] Update efi_thunk to use efi_call_virt_generic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 2, 2016, 8:19 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160602201949.GL2658@codeblueprint.co.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9151157/mbox/"
   >mbox</a>
|
   <a href="/patch/9151157/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9151157/">/patch/9151157/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E5F8560467 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 20:20:04 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D4D8F2656B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 20:20:04 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C6EF928328; Thu,  2 Jun 2016 20:20:04 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 449D02656B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  2 Jun 2016 20:20:04 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932750AbcFBUT6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 2 Jun 2016 16:19:58 -0400
Received: from mail-pf0-f169.google.com ([209.85.192.169]:35977 &quot;EHLO
	mail-pf0-f169.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932171AbcFBUTz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 2 Jun 2016 16:19:55 -0400
Received: by mail-pf0-f169.google.com with SMTP id f144so35091063pfa.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 02 Jun 2016 13:19:54 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=codeblueprint-co-uk.20150623.gappssmtp.com; s=20150623;
	h=date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=xTE2CBhHmL+iHXucQSFqpmfoB+O82ot4CEHF+brCjBA=;
	b=BTdRp0024rtx8UlNaD7tlqDt1LpQcxsF9pPvOzqMGjopEJun8M47gD/KzvYZI0EvtN
	w+4UShl9WmkAq1AJoDoMZiLdySFBYguhDtmgCMFIptsJ+/xl9jttJNPE9AxaL/mQtCxD
	mXB69kOk1LxZJnKmhW8knsUnXqqmv9GyFjoSteza/d4x8KWEOZNpBgODtrz9SeTEtWY8
	td5d4eOu+bzPeAJtKBRdYY82vaY1Hf5Dn6looejE3scRX0tGcKmHVobT1hFW/QwBd5t9
	FkZc484hKgC1QQXj78fBZWfkOMu/UcfPoXAT/Rxq201U02EVTBL6s79Yy7xme8ElrWuo
	FSBw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=xTE2CBhHmL+iHXucQSFqpmfoB+O82ot4CEHF+brCjBA=;
	b=FuwbiKPMKFY5ya8lh4mHqtjRNvBvQ0CgNZXHj2ITRvcFd6kss4xfTK7CCnVLUSNT+9
	wx+YVtn0A1yoCVerqXteOpaqwH4owTYF1gCnlxac6mazTLgUwAphU13jDJC1lxmR+LD6
	ze9RfTSgmdziCGl4ehaoNbCZ2P8ul2zdevewkBR0QCqufzhdmGenTRV4Wp0Ts5934Sly
	y8si1yrgp7KzONNd+xKgTW55UNv0URDMW4TVzi+1FSKqioYJbC29mPph7BozxBrdYdfM
	KHLtqmIC95Ir7RcZRm8XaDCk11sxxYPxLFCXo3n8PAc5PmjKOtxLAO66rBhoxSDjezEN
	34hA==
X-Gm-Message-State: ALyK8tJlxGdeU2JHIqEuyZU7y5YOWjp8ef+OCw4hYVCV228ivulay6a/cxwNPRanTzYqzQ==
X-Received: by 10.98.71.81 with SMTP id u78mr14051pfa.29.1464898794193;
	Thu, 02 Jun 2016 13:19:54 -0700 (PDT)
Received: from localhost ([176.27.13.75]) by smtp.gmail.com with ESMTPSA id
	bf4sm392963pac.4.2016.06.02.13.19.52
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 02 Jun 2016 13:19:53 -0700 (PDT)
Date: Thu, 2 Jun 2016 21:19:49 +0100
From: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
To: Alex Thorlton &lt;athorlton@sgi.com&gt;
Cc: linux-kernel@vger.kernel.org, Borislav Petkov &lt;bp@suse.de&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Mike Travis &lt;travis@sgi.com&gt;,
	Russ Anderson &lt;rja@sgi.com&gt;,
	Dimitri Sivanich &lt;sivanich@sgi.com&gt;, x86@kernel.org,
	linux-efi@vger.kernel.org
Subject: Re: [PATCH 3/3] Update efi_thunk to use efi_call_virt_generic
Message-ID: &lt;20160602201949.GL2658@codeblueprint.co.uk&gt;
References: &lt;1463598701-178201-1-git-send-email-athorlton@sgi.com&gt;
	&lt;1463598701-178201-4-git-send-email-athorlton@sgi.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;1463598701-178201-4-git-send-email-athorlton@sgi.com&gt;
User-Agent: Mutt/1.5.24+41 (02bc14ed1569) (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=119821">Matt Fleming</a> - June 2, 2016, 8:19 p.m.</div>
<pre class="content">
On Wed, 18 May, at 02:11:41PM, Alex Thorlton wrote:
<span class="quote">&gt; diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="quote">&gt; index f310f0b..6643f9b 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/efi.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/efi.h</span>
<span class="quote">&gt; @@ -68,6 +68,52 @@ struct efi_scratch {</span>
<span class="quote">&gt;  	u64	phys_stack;</span>
<span class="quote">&gt;  } __packed;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_EFI_MIXED</span>
<span class="quote">&gt; +extern efi_status_t efi64_thunk(u32, ...);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define runtime_service32(func)						 \</span>
<span class="quote">&gt; +({									 \</span>
<span class="quote">&gt; +	u32 table = (u32)(unsigned long)efi.systab;			 \</span>
<span class="quote">&gt; +	u32 *rt, *___f;							 \</span>
<span class="quote">&gt; +									 \</span>
<span class="quote">&gt; +	rt = (u32 *)(table + offsetof(efi_system_table_32_t, runtime));	 \</span>
<span class="quote">&gt; +	___f = (u32 *)(*rt + offsetof(efi_runtime_services_32_t, func)); \</span>
<span class="quote">&gt; +	*___f;								 \</span>
<span class="quote">&gt; +})</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * Switch to the EFI page tables early so that we can access the 1:1</span>
<span class="quote">&gt; + * runtime services mappings which are not mapped in any other page</span>
<span class="quote">&gt; + * tables. This function must be called before runtime_service32().</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Also, disable interrupts because the IDT points to 64-bit handlers,</span>
<span class="quote">&gt; + * which aren&#39;t going to function correctly when we switch to 32-bit.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +#define arch_efi_call_virt_setup()					\</span>
<span class="quote">&gt; +({									\</span>
<span class="quote">&gt; +	efi_sync_low_kernel_mappings();					\</span>
<span class="quote">&gt; +	local_irq_save(flags);						\</span>
<span class="quote">&gt; +									\</span>
<span class="quote">&gt; +	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="quote">&gt; +	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="quote">&gt; +	__flush_tlb_all();						\</span>
<span class="quote">&gt; +})</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define arch_efi_call_virt(p, f, ...)					\</span>
<span class="quote">&gt; +({									\</span>
<span class="quote">&gt; +	u32 func = runtime_service32(f);				\</span>
<span class="quote">&gt; +	efi64_thunk(func, __VA_ARGS__);					\</span>
<span class="quote">&gt; +})</span>
<span class="quote">&gt; +</span>

This isn&#39;t correct because you&#39;re turning the runtime decision of
whether we&#39;re executing the thunking code into a build time one.

Users can enable CONFIG_EFI_MIXED in their builds but never actually
run that kernel on a mixed mode machine. One of the original design
intentions behind CONFIG_EFI_MIXED was that you can (and should!) turn
it on because it has no effect unless you run it on a machine with
32-bit EFI.

The switch to the thunk layer is done in efi_thunk_runtime_setup().

As a real world example of this, the openSUSE x86_64 kernel config has
CONFIG_EFI_MIXED enabled out of the box.

The thunk code should be able to reuse the regular x86_64
arch_efi_call_virt_setup() and arch_efi_call_virt_teardown(), since,

  a. We can also disable preemption without issue
  b. We can disable/reenable interrupts around those existing wrappers
  c. The &quot;if (efi_scratch.use_pgd)&quot; check is missing because we
     *always* use the EFI pgtables for mixed mode, it&#39;s a requirement

Would something like this work instead? It&#39;s not as neat as your
suggestion but it&#39;s a damn sight better than what we have today.

---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66171">athorlton@sgi.com</a> - June 2, 2016, 9:25 p.m.</div>
<pre class="content">
On Thu, Jun 02, 2016 at 09:19:49PM +0100, Matt Fleming wrote:
<span class="quote">&gt; On Wed, 18 May, at 02:11:41PM, Alex Thorlton wrote:</span>
<span class="quote">&gt; &gt; +#define arch_efi_call_virt(p, f, ...)					\</span>
<span class="quote">&gt; &gt; +({									\</span>
<span class="quote">&gt; &gt; +	u32 func = runtime_service32(f);				\</span>
<span class="quote">&gt; &gt; +	efi64_thunk(func, __VA_ARGS__);					\</span>
<span class="quote">&gt; &gt; +})</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This isn&#39;t correct because you&#39;re turning the runtime decision of</span>
<span class="quote">&gt; whether we&#39;re executing the thunking code into a build time one.</span>

Ahh, yep, you&#39;re absolutely correct.  That&#39;s not what I intended to do,
but that&#39;s definitely the effect that this change has.
<span class="quote">
&gt; Would something like this work instead? It&#39;s not as neat as your</span>
<span class="quote">&gt; suggestion but it&#39;s a damn sight better than what we have today.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; index 6e7242be1c87..b976084e56ef 100644</span>
<span class="quote">&gt; --- a/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; +++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="quote">&gt; @@ -469,18 +469,13 @@ extern efi_status_t efi64_thunk(u32, ...);</span>
<span class="quote">&gt;  	unsigned long flags;						\</span>
<span class="quote">&gt;  	u32 func;							\</span>
<span class="quote">&gt;  									\</span>
<span class="quote">&gt; -	efi_sync_low_kernel_mappings();					\</span>
<span class="quote">&gt;  	local_irq_save(flags);						\</span>
<span class="quote">&gt; -									\</span>
<span class="quote">&gt; -	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="quote">&gt; -	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="quote">&gt; -	__flush_tlb_all();						\</span>
<span class="quote">&gt; +	arch_efi_call_virt_setup();					\</span>
<span class="quote">&gt;  									\</span>
<span class="quote">&gt;  	func = runtime_service32(f);					\</span>
<span class="quote">&gt;  	__s = efi64_thunk(func, __VA_ARGS__);			\</span>
<span class="quote">&gt;  									\</span>
<span class="quote">&gt; -	write_cr3(efi_scratch.prev_cr3);				\</span>
<span class="quote">&gt; -	__flush_tlb_all();						\</span>
<span class="quote">&gt; +	arch_efi_call_virt_teardown();					\</span>
<span class="quote">&gt;  	local_irq_restore(flags);					\</span>
<span class="quote">&gt;  									\</span>
<span class="quote">&gt;  	__s;								\</span>

This looks good to me.  We&#39;re at least making use of the
arch_efi_call_virt_* stuff where possible, and only using the special
thunk code where necessary.  I think it&#39;s a good middle ground between
the two approaches (especially considering the fact that mine won&#39;t
work :) 

I will re-work that last patch to include this change instead of my
original, broken one.

Thanks, Matt!

- Alex
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index 6e7242be1c87..b976084e56ef 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -469,18 +469,13 @@</span> <span class="p_context"> extern efi_status_t efi64_thunk(u32, ...);</span>
 	unsigned long flags;						\
 	u32 func;							\
 									\
<span class="p_del">-	efi_sync_low_kernel_mappings();					\</span>
 	local_irq_save(flags);						\
<span class="p_del">-									\</span>
<span class="p_del">-	efi_scratch.prev_cr3 = read_cr3();				\</span>
<span class="p_del">-	write_cr3((unsigned long)efi_scratch.efi_pgt);			\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_add">+	arch_efi_call_virt_setup();					\</span>
 									\
 	func = runtime_service32(f);					\
 	__s = efi64_thunk(func, __VA_ARGS__);			\
 									\
<span class="p_del">-	write_cr3(efi_scratch.prev_cr3);				\</span>
<span class="p_del">-	__flush_tlb_all();						\</span>
<span class="p_add">+	arch_efi_call_virt_teardown();					\</span>
 	local_irq_restore(flags);					\
 									\
 	__s;								\

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



