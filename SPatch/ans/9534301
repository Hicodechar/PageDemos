
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.9,106/130] arm64: Fix swiotlb fallback allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.9,106/130] arm64: Fix swiotlb fallback allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 24, 2017, 7:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170124075539.261689194@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9534301/mbox/"
   >mbox</a>
|
   <a href="/patch/9534301/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9534301/">/patch/9534301/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BE4CC6042D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 08:04:22 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B032520453
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 08:04:22 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id A4DC4209CD; Tue, 24 Jan 2017 08:04:22 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 11B9223E64
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 08:04:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752420AbdAXIES (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 Jan 2017 03:04:18 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:45414 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752393AbdAXIEQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 Jan 2017 03:04:16 -0500
Received: from localhost (unknown [78.192.101.3])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 97A18B44;
	Tue, 24 Jan 2017 08:03:04 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Alexander Graf &lt;agraf@suse.de&gt;,
	Jisheng Zhang &lt;jszhang@marvell.com&gt;,
	Geert Uytterhoeven &lt;geert+renesas@glider.be&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;
Subject: [PATCH 4.9 106/130] arm64: Fix swiotlb fallback allocation
Date: Tue, 24 Jan 2017 08:55:46 +0100
Message-Id: &lt;20170124075539.261689194@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170124075534.905042535@linuxfoundation.org&gt;
References: &lt;20170124075534.905042535@linuxfoundation.org&gt;
User-Agent: quilt/0.65
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 24, 2017, 7:55 a.m.</div>
<pre class="content">
4.9-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Alexander Graf &lt;agraf@suse.de&gt;</span>

commit 524dabe1c68e0bca25ce7b108099e5d89472a101 upstream.

Commit b67a8b29df introduced logic to skip swiotlb allocation when all memory
is DMA accessible anyway.

While this is a great idea, __dma_alloc still calls swiotlb code unconditionally
to allocate memory when there is no CMA memory available. The swiotlb code is
called to ensure that we at least try get_free_pages().

Without initialization, swiotlb allocation code tries to access io_tlb_list
which is NULL. That results in a stack trace like this:

  Unable to handle kernel NULL pointer dereference at virtual address 00000000
  [...]
  [&lt;ffff00000845b908&gt;] swiotlb_tbl_map_single+0xd0/0x2b0
  [&lt;ffff00000845be94&gt;] swiotlb_alloc_coherent+0x10c/0x198
  [&lt;ffff000008099dc0&gt;] __dma_alloc+0x68/0x1a8
  [&lt;ffff000000a1b410&gt;] drm_gem_cma_create+0x98/0x108 [drm]
  [&lt;ffff000000abcaac&gt;] drm_fbdev_cma_create_with_funcs+0xbc/0x368 [drm_kms_helper]
  [&lt;ffff000000abcd84&gt;] drm_fbdev_cma_create+0x2c/0x40 [drm_kms_helper]
  [&lt;ffff000000abc040&gt;] drm_fb_helper_initial_config+0x238/0x410 [drm_kms_helper]
  [&lt;ffff000000abce88&gt;] drm_fbdev_cma_init_with_funcs+0x98/0x160 [drm_kms_helper]
  [&lt;ffff000000abcf90&gt;] drm_fbdev_cma_init+0x40/0x58 [drm_kms_helper]
  [&lt;ffff000000b47980&gt;] vc4_kms_load+0x90/0xf0 [vc4]
  [&lt;ffff000000b46a94&gt;] vc4_drm_bind+0xec/0x168 [vc4]
  [...]

Thankfully swiotlb code just learned how to not do allocations with the FORCE_NO
option. This patch configures the swiotlb code to use that if we decide not to
initialize the swiotlb framework.

Fixes: b67a8b29df (&quot;arm64: mm: only initialize swiotlb when necessary&quot;)
<span class="signed-off-by">Signed-off-by: Alexander Graf &lt;agraf@suse.de&gt;</span>
CC: Jisheng Zhang &lt;jszhang@marvell.com&gt;
CC: Geert Uytterhoeven &lt;geert+renesas@glider.be&gt;
CC: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
<span class="signed-off-by">Signed-off-by: Catalin Marinas &lt;catalin.marinas@arm.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 arch/arm64/mm/init.c |    2 ++
 1 file changed, 2 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/arm64/mm/init.c</span>
<span class="p_header">+++ b/arch/arm64/mm/init.c</span>
<span class="p_chunk">@@ -403,6 +403,8 @@</span> <span class="p_context"> void __init mem_init(void)</span>
 {
 	if (swiotlb_force || max_pfn &gt; (arm64_dma_phys_limit &gt;&gt; PAGE_SHIFT))
 		swiotlb_init(1);
<span class="p_add">+	else</span>
<span class="p_add">+		swiotlb_force = SWIOTLB_NO_FORCE;</span>
 
 	set_max_mapnr(pfn_to_page(max_pfn) - mem_map);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



