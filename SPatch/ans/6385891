
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V4,3/3] mm: Clarify that the function operateds on hugepage pte - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V4,3/3] mm: Clarify that the function operateds on hugepage pte</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 12, 2015, 6:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1431410914-21102-3-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6385891/mbox/"
   >mbox</a>
|
   <a href="/patch/6385891/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6385891/">/patch/6385891/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id A8DA39F1C2
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 06:09:33 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3E2C920395
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 06:09:32 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8E96A20397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 May 2015 06:09:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752869AbbELGJU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 May 2015 02:09:20 -0400
Received: from e28smtp06.in.ibm.com ([122.248.162.6]:40334 &quot;EHLO
	e28smtp06.in.ibm.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752634AbbELGJJ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 May 2015 02:09:09 -0400
Received: from /spool/local
	by e28smtp06.in.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from
	&lt;aneesh.kumar@linux.vnet.ibm.com&gt;; Tue, 12 May 2015 11:39:06 +0530
Received: from d28dlp02.in.ibm.com (9.184.220.127)
	by e28smtp06.in.ibm.com (192.168.1.136) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Tue, 12 May 2015 11:39:03 +0530
Received: from d28relay01.in.ibm.com (d28relay01.in.ibm.com [9.184.220.58])
	by d28dlp02.in.ibm.com (Postfix) with ESMTP id E31B33940053
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 12 May 2015 11:39:02 +0530 (IST)
Received: from d28av03.in.ibm.com (d28av03.in.ibm.com [9.184.220.65])
	by d28relay01.in.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id
	t4C68n8248496770
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 12 May 2015 11:38:50 +0530
Received: from d28av03.in.ibm.com (localhost [127.0.0.1])
	by d28av03.in.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with ESMTP id
	t4C5WoIm018645
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 12 May 2015 11:02:52 +0530
Received: from skywalker.in.ibm.com ([9.79.218.40])
	by d28av03.in.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with ESMTP id
	t4C5WnVB018419; Tue, 12 May 2015 11:02:50 +0530
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
To: benh@kernel.crashing.org, paulus@samba.org, mpe@ellerman.id.au,
	kirill.shutemov@linux.intel.com, aarcange@redhat.com,
	akpm@linux-foundation.org
Cc: linuxppc-dev@lists.ozlabs.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Subject: [PATCH V4 3/3] mm: Clarify that the function operateds on hugepage
	pte
Date: Tue, 12 May 2015 11:38:34 +0530
Message-Id: &lt;1431410914-21102-3-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1431410914-21102-1-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
References: &lt;1431410914-21102-1-git-send-email-aneesh.kumar@linux.vnet.ibm.com&gt;
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 15051206-0021-0000-0000-0000052A00A6
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - May 12, 2015, 6:08 a.m.</div>
<pre class="content">
We have confusing functions to clear pmd, pmd_clear_* and pmd_clear.
Add _huge_ to pmdp_clear functions so that we are clear that they
operate on hugepage pte.

We don&#39;t bother about other functions like pmdp_set_wrprotect,
pmdp_clear_flush_young, because they operate on PTE bits and hence
indicate they are operating on hugepage ptes
<span class="signed-off-by">
Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
---
NOTE: Only tested on powerpc

 arch/mips/include/asm/pgtable.h          |  8 ++++----
 arch/powerpc/include/asm/pgtable-ppc64.h |  6 +++---
 arch/powerpc/mm/pgtable_64.c             |  4 ++--
 arch/s390/include/asm/pgtable.h          | 22 +++++++++++-----------
 arch/sparc/include/asm/pgtable_64.h      |  8 ++++----
 arch/tile/include/asm/pgtable.h          |  8 ++++----
 arch/x86/include/asm/pgtable.h           |  4 ++--
 include/asm-generic/pgtable.h            | 24 ++++++++++++++----------
 include/linux/mmu_notifier.h             | 12 ++++++------
 mm/huge_memory.c                         | 16 ++++++++--------
 mm/migrate.c                             |  2 +-
 mm/pgtable-generic.c                     |  8 ++++----
 mm/rmap.c                                |  2 +-
 13 files changed, 64 insertions(+), 60 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/include/asm/pgtable.h b/arch/mips/include/asm/pgtable.h</span>
<span class="p_header">index 819af9d057a8..9d8106758142 100644</span>
<span class="p_header">--- a/arch/mips/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/mips/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -568,12 +568,12 @@</span> <span class="p_context"> static inline pmd_t pmd_mknotpresent(pmd_t pmd)</span>
 }
 
 /*
<span class="p_del">- * The generic version pmdp_get_and_clear uses a version of pmd_clear() with a</span>
<span class="p_add">+ * The generic version pmdp_huge_get_and_clear uses a version of pmd_clear() with a</span>
  * different prototype.
  */
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				       unsigned long address, pmd_t *pmdp)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+					    unsigned long address, pmd_t *pmdp)</span>
 {
 	pmd_t old = *pmdp;
 
<span class="p_header">diff --git a/arch/powerpc/include/asm/pgtable-ppc64.h b/arch/powerpc/include/asm/pgtable-ppc64.h</span>
<span class="p_header">index 3d7e898d6b5e..88e916b507c2 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/pgtable-ppc64.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/pgtable-ppc64.h</span>
<span class="p_chunk">@@ -553,9 +553,9 @@</span> <span class="p_context"> extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,</span>
 extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
 				  unsigned long address, pmd_t *pmdp);
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-extern pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				unsigned long addr, pmd_t *pmdp);</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+extern pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+				     unsigned long addr, pmd_t *pmdp);</span>
 
 #define __HAVE_ARCH_PMDP_SET_WRPROTECT
 static inline void pmdp_set_wrprotect(struct mm_struct *mm, unsigned long addr,
<span class="p_header">diff --git a/arch/powerpc/mm/pgtable_64.c b/arch/powerpc/mm/pgtable_64.c</span>
<span class="p_header">index f7775193d745..876232d64126 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/pgtable_64.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/pgtable_64.c</span>
<span class="p_chunk">@@ -812,8 +812,8 @@</span> <span class="p_context"> void update_mmu_cache_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
 	return;
 }
 
<span class="p_del">-pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-			 unsigned long addr, pmd_t *pmdp)</span>
<span class="p_add">+pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+			      unsigned long addr, pmd_t *pmdp)</span>
 {
 	pmd_t old_pmd;
 	pgtable_t pgtable;
<span class="p_header">diff --git a/arch/s390/include/asm/pgtable.h b/arch/s390/include/asm/pgtable.h</span>
<span class="p_header">index fc642399b489..4565b33ed94b 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -1498,9 +1498,9 @@</span> <span class="p_context"> static inline int pmdp_test_and_clear_young(struct vm_area_struct *vma,</span>
 	return pmd_young(pmd);
 }
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				       unsigned long address, pmd_t *pmdp)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+					    unsigned long address, pmd_t *pmdp)</span>
 {
 	pmd_t pmd = *pmdp;
 
<span class="p_chunk">@@ -1509,10 +1509,10 @@</span> <span class="p_context"> static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
 	return pmd;
 }
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR_FULL</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear_full(struct mm_struct *mm,</span>
<span class="p_del">-					    unsigned long address,</span>
<span class="p_del">-					    pmd_t *pmdp, int full)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR_FULL</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear_full(struct mm_struct *mm,</span>
<span class="p_add">+						 unsigned long address,</span>
<span class="p_add">+						 pmd_t *pmdp, int full)</span>
 {
 	pmd_t pmd = *pmdp;
 
<span class="p_chunk">@@ -1522,11 +1522,11 @@</span> <span class="p_context"> static inline pmd_t pmdp_get_and_clear_full(struct mm_struct *mm,</span>
 	return pmd;
 }
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_CLEAR_FLUSH</span>
<span class="p_del">-static inline pmd_t pmdp_clear_flush(struct vm_area_struct *vma,</span>
<span class="p_del">-				     unsigned long address, pmd_t *pmdp)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_CLEAR_FLUSH</span>
<span class="p_add">+static inline pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,</span>
<span class="p_add">+					  unsigned long address, pmd_t *pmdp)</span>
 {
<span class="p_del">-	return pmdp_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
<span class="p_add">+	return pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
 }
 
 #define __HAVE_ARCH_PMDP_INVALIDATE
<span class="p_header">diff --git a/arch/sparc/include/asm/pgtable_64.h b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">index dc165ebdf05a..2b72f651f393 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -845,10 +845,10 @@</span> <span class="p_context"> static inline unsigned long pud_pfn(pud_t pud)</span>
 void tlb_batch_add(struct mm_struct *mm, unsigned long vaddr,
 		   pte_t *ptep, pte_t orig, int fullmm);
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				       unsigned long addr,</span>
<span class="p_del">-				       pmd_t *pmdp)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+					    unsigned long addr,</span>
<span class="p_add">+					    pmd_t *pmdp)</span>
 {
 	pmd_t pmd = *pmdp;
 	set_pmd_at(mm, addr, pmdp, __pmd(0UL));
<span class="p_header">diff --git a/arch/tile/include/asm/pgtable.h b/arch/tile/include/asm/pgtable.h</span>
<span class="p_header">index 95a4f19d16c5..2b05ccbebed9 100644</span>
<span class="p_header">--- a/arch/tile/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/tile/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -414,10 +414,10 @@</span> <span class="p_context"> static inline void pmdp_set_wrprotect(struct mm_struct *mm,</span>
 }
 
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				       unsigned long address,</span>
<span class="p_del">-				       pmd_t *pmdp)</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+					    unsigned long address,</span>
<span class="p_add">+					    pmd_t *pmdp)</span>
 {
 	return pte_pmd(ptep_get_and_clear(mm, address, pmdp_ptep(pmdp)));
 }
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index fe57e7a98839..25add5e44f0a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -799,8 +799,8 @@</span> <span class="p_context"> static inline int pmd_write(pmd_t pmd)</span>
 	return pmd_flags(pmd) &amp; _PAGE_RW;
 }
 
<span class="p_del">-#define __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
<span class="p_add">+#define __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr,</span>
 				       pmd_t *pmdp)
 {
 	pmd_t pmd = native_pmdp_get_and_clear(pmdp);
<span class="p_header">diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h</span>
<span class="p_header">index 3e22b80d467a..4cc539ec9f6d 100644</span>
<span class="p_header">--- a/include/asm-generic/pgtable.h</span>
<span class="p_header">+++ b/include/asm-generic/pgtable.h</span>
<span class="p_chunk">@@ -96,11 +96,11 @@</span> <span class="p_context"> static inline pte_t ptep_get_and_clear(struct mm_struct *mm,</span>
 }
 #endif
 
<span class="p_del">-#ifndef __HAVE_ARCH_PMDP_GET_AND_CLEAR</span>
<span class="p_add">+#ifndef __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR</span>
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
<span class="p_del">-static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
<span class="p_del">-				       unsigned long address,</span>
<span class="p_del">-				       pmd_t *pmdp)</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,</span>
<span class="p_add">+					    unsigned long address,</span>
<span class="p_add">+					    pmd_t *pmdp)</span>
 {
 	pmd_t pmd = *pmdp;
 	pmd_clear(pmdp);
<span class="p_chunk">@@ -109,13 +109,13 @@</span> <span class="p_context"> static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm,</span>
 #endif /* CONFIG_TRANSPARENT_HUGEPAGE */
 #endif
 
<span class="p_del">-#ifndef __HAVE_ARCH_PMDP_GET_AND_CLEAR_FULL</span>
<span class="p_add">+#ifndef __HAVE_ARCH_PMDP_HUGE_GET_AND_CLEAR_FULL</span>
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
<span class="p_del">-static inline pmd_t pmdp_get_and_clear_full(struct mm_struct *mm,</span>
<span class="p_add">+static inline pmd_t pmdp_huge_get_and_clear_full(struct mm_struct *mm,</span>
 					    unsigned long address, pmd_t *pmdp,
 					    int full)
 {
<span class="p_del">-	return pmdp_get_and_clear(mm, address, pmdp);</span>
<span class="p_add">+	return pmdp_huge_get_and_clear(mm, address, pmdp);</span>
 }
 #endif /* CONFIG_TRANSPARENT_HUGEPAGE */
 #endif
<span class="p_chunk">@@ -152,8 +152,8 @@</span> <span class="p_context"> extern pte_t ptep_clear_flush(struct vm_area_struct *vma,</span>
 			      pte_t *ptep);
 #endif
 
<span class="p_del">-#ifndef __HAVE_ARCH_PMDP_CLEAR_FLUSH</span>
<span class="p_del">-extern pmd_t pmdp_clear_flush(struct vm_area_struct *vma,</span>
<span class="p_add">+#ifndef __HAVE_ARCH_PMDP_HUGE_CLEAR_FLUSH</span>
<span class="p_add">+extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,</span>
 			      unsigned long address,
 			      pmd_t *pmdp);
 #endif
<span class="p_chunk">@@ -195,7 +195,11 @@</span> <span class="p_context"> static inline pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,</span>
 					unsigned long address,
 					pmd_t *pmdp)
 {
<span class="p_del">-	return pmdp_clear_flush(vma, address, pmdp);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * pmd and hugepage pte format are same. So we could</span>
<span class="p_add">+	 * use the same function.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	return pmdp_huge_clear_flush(vma, address, pmdp);</span>
 }
 #else
 static inline pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
<span class="p_header">diff --git a/include/linux/mmu_notifier.h b/include/linux/mmu_notifier.h</span>
<span class="p_header">index 95243d28a0ee..61cd67f4d788 100644</span>
<span class="p_header">--- a/include/linux/mmu_notifier.h</span>
<span class="p_header">+++ b/include/linux/mmu_notifier.h</span>
<span class="p_chunk">@@ -324,25 +324,25 @@</span> <span class="p_context"> static inline void mmu_notifier_mm_destroy(struct mm_struct *mm)</span>
 	___pte;								\
 })
 
<span class="p_del">-#define pmdp_clear_flush_notify(__vma, __haddr, __pmd)			\</span>
<span class="p_add">+#define pmdp_huge_clear_flush_notify(__vma, __haddr, __pmd)		\</span>
 ({									\
 	unsigned long ___haddr = __haddr &amp; HPAGE_PMD_MASK;		\
 	struct mm_struct *___mm = (__vma)-&gt;vm_mm;			\
 	pmd_t ___pmd;							\
 									\
<span class="p_del">-	___pmd = pmdp_clear_flush(__vma, __haddr, __pmd);		\</span>
<span class="p_add">+	___pmd = pmdp_huge_clear_flush(__vma, __haddr, __pmd);		\</span>
 	mmu_notifier_invalidate_range(___mm, ___haddr,			\
 				      ___haddr + HPAGE_PMD_SIZE);	\
 									\
 	___pmd;								\
 })
 
<span class="p_del">-#define pmdp_get_and_clear_notify(__mm, __haddr, __pmd)			\</span>
<span class="p_add">+#define pmdp_huge_get_and_clear_notify(__mm, __haddr, __pmd)		\</span>
 ({									\
 	unsigned long ___haddr = __haddr &amp; HPAGE_PMD_MASK;		\
 	pmd_t ___pmd;							\
 									\
<span class="p_del">-	___pmd = pmdp_get_and_clear(__mm, __haddr, __pmd);		\</span>
<span class="p_add">+	___pmd = pmdp_huge_get_and_clear(__mm, __haddr, __pmd);		\</span>
 	mmu_notifier_invalidate_range(__mm, ___haddr,			\
 				      ___haddr + HPAGE_PMD_SIZE);	\
 									\
<span class="p_chunk">@@ -428,8 +428,8 @@</span> <span class="p_context"> static inline void mmu_notifier_mm_destroy(struct mm_struct *mm)</span>
 #define ptep_clear_flush_young_notify ptep_clear_flush_young
 #define pmdp_clear_flush_young_notify pmdp_clear_flush_young
 #define	ptep_clear_flush_notify ptep_clear_flush
<span class="p_del">-#define pmdp_clear_flush_notify pmdp_clear_flush</span>
<span class="p_del">-#define pmdp_get_and_clear_notify pmdp_get_and_clear</span>
<span class="p_add">+#define pmdp_huge_clear_flush_notify pmdp_huge_clear_flush</span>
<span class="p_add">+#define pmdp_huge_get_and_clear_notify pmdp_huge_get_and_clear</span>
 #define set_pte_at_notify set_pte_at
 
 #endif /* CONFIG_MMU_NOTIFIER */
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 88f695a4e38b..c19adcb2c324 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1031,7 +1031,7 @@</span> <span class="p_context"> static int do_huge_pmd_wp_page_fallback(struct mm_struct *mm,</span>
 		goto out_free_pages;
 	VM_BUG_ON_PAGE(!PageHead(page), page);
 
<span class="p_del">-	pmdp_clear_flush_notify(vma, haddr, pmd);</span>
<span class="p_add">+	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
 	/* leave pmd empty until pte is filled */
 
 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
<span class="p_chunk">@@ -1174,7 +1174,7 @@</span> <span class="p_context"> alloc:</span>
 		pmd_t entry;
 		entry = mk_huge_pmd(new_page, vma-&gt;vm_page_prot);
 		entry = maybe_pmd_mkwrite(pmd_mkdirty(entry), vma);
<span class="p_del">-		pmdp_clear_flush_notify(vma, haddr, pmd);</span>
<span class="p_add">+		pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
 		page_add_new_anon_rmap(new_page, vma, haddr);
 		mem_cgroup_commit_charge(new_page, memcg, false);
 		lru_cache_add_active_or_unevictable(new_page, vma);
<span class="p_chunk">@@ -1396,12 +1396,12 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		pmd_t orig_pmd;
 		/*
 		 * For architectures like ppc64 we look at deposited pgtable
<span class="p_del">-		 * when calling pmdp_get_and_clear. So do the</span>
<span class="p_add">+		 * when calling pmdp_huge_get_and_clear. So do the</span>
 		 * pgtable_trans_huge_withdraw after finishing pmdp related
 		 * operations.
 		 */
<span class="p_del">-		orig_pmd = pmdp_get_and_clear_full(tlb-&gt;mm, addr, pmd,</span>
<span class="p_del">-						   tlb-&gt;fullmm);</span>
<span class="p_add">+		orig_pmd = pmdp_huge_get_and_clear_full(tlb-&gt;mm, addr, pmd,</span>
<span class="p_add">+							tlb-&gt;fullmm);</span>
 		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);
 		pgtable = pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd);
 		if (is_huge_zero_pmd(orig_pmd)) {
<span class="p_chunk">@@ -1459,7 +1459,7 @@</span> <span class="p_context"> int move_huge_pmd(struct vm_area_struct *vma, struct vm_area_struct *new_vma,</span>
 		new_ptl = pmd_lockptr(mm, new_pmd);
 		if (new_ptl != old_ptl)
 			spin_lock_nested(new_ptl, SINGLE_DEPTH_NESTING);
<span class="p_del">-		pmd = pmdp_get_and_clear(mm, old_addr, old_pmd);</span>
<span class="p_add">+		pmd = pmdp_huge_get_and_clear(mm, old_addr, old_pmd);</span>
 		VM_BUG_ON(!pmd_none(*new_pmd));
 
 		if (pmd_move_must_withdraw(new_ptl, old_ptl)) {
<span class="p_chunk">@@ -1505,7 +1505,7 @@</span> <span class="p_context"> int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,</span>
 		}
 
 		if (!prot_numa || !pmd_protnone(*pmd)) {
<span class="p_del">-			entry = pmdp_get_and_clear_notify(mm, addr, pmd);</span>
<span class="p_add">+			entry = pmdp_huge_get_and_clear_notify(mm, addr, pmd);</span>
 			entry = pmd_modify(entry, newprot);
 			if (preserve_write)
 				entry = pmd_mkwrite(entry);
<span class="p_chunk">@@ -2865,7 +2865,7 @@</span> <span class="p_context"> static void __split_huge_zero_page_pmd(struct vm_area_struct *vma,</span>
 	pmd_t _pmd;
 	int i;
 
<span class="p_del">-	pmdp_clear_flush_notify(vma, haddr, pmd);</span>
<span class="p_add">+	pmdp_huge_clear_flush_notify(vma, haddr, pmd);</span>
 	/* leave pmd empty until pte is filled */
 
 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index f53838fe3dfe..c37d5772767b 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -1796,7 +1796,7 @@</span> <span class="p_context"> fail_putback:</span>
 	 */
 	flush_cache_range(vma, mmun_start, mmun_end);
 	page_add_anon_rmap(new_page, vma, mmun_start);
<span class="p_del">-	pmdp_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="p_add">+	pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
 	set_pmd_at(mm, mmun_start, pmd, entry);
 	flush_tlb_range(vma, mmun_start, mmun_end);
 	update_mmu_cache_pmd(vma, address, &amp;entry);
<span class="p_header">diff --git a/mm/pgtable-generic.c b/mm/pgtable-generic.c</span>
<span class="p_header">index dd9d04f17749..af063ad47d55 100644</span>
<span class="p_header">--- a/mm/pgtable-generic.c</span>
<span class="p_header">+++ b/mm/pgtable-generic.c</span>
<span class="p_chunk">@@ -119,15 +119,15 @@</span> <span class="p_context"> pte_t ptep_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
 }
 #endif
 
<span class="p_del">-#ifndef __HAVE_ARCH_PMDP_CLEAR_FLUSH</span>
<span class="p_add">+#ifndef __HAVE_ARCH_PMDP_HUGE_CLEAR_FLUSH</span>
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
<span class="p_del">-pmd_t pmdp_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="p_del">-		       pmd_t *pmdp)</span>
<span class="p_add">+pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,</span>
<span class="p_add">+			    pmd_t *pmdp)</span>
 {
 	pmd_t pmd;
 	VM_BUG_ON(address &amp; ~HPAGE_PMD_MASK);
 	VM_BUG_ON(!pmd_trans_huge(*pmdp));
<span class="p_del">-	pmd = pmdp_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
<span class="p_add">+	pmd = pmdp_huge_get_and_clear(vma-&gt;vm_mm, address, pmdp);</span>
 	flush_tlb_range(vma, address, address + HPAGE_PMD_SIZE);
 	return pmd;
 }
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 24dd3f9fee27..6f94e4502c49 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -625,7 +625,7 @@</span> <span class="p_context"> pmd_t *mm_find_pmd(struct mm_struct *mm, unsigned long address)</span>
 
 	pmd = pmd_offset(pud, address);
 	/*
<span class="p_del">-	 * Some THP functions use the sequence pmdp_clear_flush(), set_pmd_at()</span>
<span class="p_add">+	 * Some THP functions use the sequence pmdp_huge_clear_flush(), set_pmd_at()</span>
 	 * without holding anon_vma lock for write.  So when looking for a
 	 * genuine pmde (in which to find pte), test present and !THP together.
 	 */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



