
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[5/9] x86/uv: Use the right tlbflush API - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [5/9] x86/uv: Use the right tlbflush API</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 5, 2017, 12:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171205123820.134563117@infradead.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10092839/mbox/"
   >mbox</a>
|
   <a href="/patch/10092839/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10092839/">/patch/10092839/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	401976035E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 12:41:54 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3BFB3288FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 12:41:54 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3044229576; Tue,  5 Dec 2017 12:41:54 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D0B26288FD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  5 Dec 2017 12:41:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752858AbdLEMlu (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 5 Dec 2017 07:41:50 -0500
Received: from merlin.infradead.org ([205.233.59.134]:60708 &quot;EHLO
	merlin.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752540AbdLEMlr (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 5 Dec 2017 07:41:47 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=merlin.20170209;
	h=Content-Type:MIME-Version:References:
	Subject:Cc:To:From:Date:Message-Id:Sender:Reply-To:Content-Transfer-Encoding:
	Content-ID:Content-Description:Resent-Date:Resent-From:Resent-Sender:
	Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:List-Id:List-Help:
	List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=odfNpuyQpEnZqADFZ5scKMLr2WtEhMXEObsEQJSLykQ=;
	b=IlIkxT3SrLff1lYn/rIm8Bp+mo
	Acket5c6ZaIhGAFZd4JYdZWnPNusP01HeNHb1QLznIekmpRCF+xP5LQVPioDpVE0Z9sbIboi4D1pB
	tOtB16nBNLEoOdbB5cFtB7fjupAM4ACT5hufO2BCGVye0jfZk8gEEI0QwnJuUNWJD+7B18DvLaSkF
	mWTvSft+q4Mo8/saoAx+ysI9nK0Z0VFTUNcluHzs4wUyGnMKnJrIidptH53CfcqGfEJr5OG2I5LdB
	j2V3WxMAxLvo48/7EQdRkD50EqO6h215lA1VByQ8cNPUAWeVZOIBnx2Jf+sJM5RPYqbUuKghc1yn0
	4EeBx9fQ==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100]
	helo=hirez.programming.kicks-ass.net)
	by merlin.infradead.org with esmtpsa (Exim 4.87 #1 (Red Hat Linux))
	id 1eMCX1-0005S6-Ux; Tue, 05 Dec 2017 12:41:04 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 0)
	id 799AC200D49C6; Tue,  5 Dec 2017 13:41:00 +0100 (CET)
Message-Id: &lt;20171205123820.134563117@infradead.org&gt;
User-Agent: quilt/0.63-1
Date: Tue, 05 Dec 2017 13:34:50 +0100
From: Peter Zijlstra &lt;peterz@infradead.org&gt;
To: linux-kernel@vger.kernel.org
Cc: x86@kernel.org, Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, daniel.gruss@iaik.tugraz.at,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, moritz.lipp@iaik.tugraz.at,
	linux-mm@kvack.org, Borislav Petkov &lt;bp@alien8.de&gt;,
	michael.schwarz@iaik.tugraz.at, richard.fellner@student.tugraz.at,
	Andrew Banman &lt;abanman@hpe.com&gt;, Mike Travis &lt;mike.travis@hpe.com&gt;
Subject: [PATCH 5/9] x86/uv: Use the right tlbflush API
References: &lt;20171205123444.990868007@infradead.org&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline; filename=peterz-tlb-uv.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Dec. 5, 2017, 12:34 p.m.</div>
<pre class="content">
Since uv_flush_tlb_others() implements flush_tlb_others() which is
about flushing user mappings, we should use __flush_tlb_single(),
which too is about flushing user mappings.

Cc: Andrew Banman &lt;abanman@hpe.com&gt;
Cc: Mike Travis &lt;mike.travis@hpe.com&gt;
<span class="signed-off-by">Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>
---
 arch/x86/platform/uv/tlb_uv.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Dec. 5, 2017, 9:09 p.m.</div>
<pre class="content">
On 12/5/17 6:34 AM, Peter Zijlstra wrote:
<span class="quote">&gt; Since uv_flush_tlb_others() implements flush_tlb_others() which is</span>
<span class="quote">&gt; about flushing user mappings, we should use __flush_tlb_single(),</span>
<span class="quote">&gt; which too is about flushing user mappings.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Andrew Banman&lt;abanman@hpe.com&gt;</span>
<span class="quote">&gt; Cc: Mike Travis&lt;mike.travis@hpe.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Peter Zijlstra (Intel)&lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   arch/x86/platform/uv/tlb_uv.c |    2 +-</span>
<span class="quote">&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt; +++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt; @@ -299,7 +299,7 @@ static void bau_process_message(struct m</span>
<span class="quote">&gt;   		local_flush_tlb();</span>
<span class="quote">&gt;   		stat-&gt;d_alltlb++;</span>
<span class="quote">&gt;   	} else {</span>
<span class="quote">&gt; -		__flush_tlb_one(msg-&gt;address);</span>
<span class="quote">&gt; +		__flush_tlb_single(msg-&gt;address);</span>
<span class="quote">&gt;   		stat-&gt;d_onetlb++;</span>
<span class="quote">&gt;   	}</span>
<span class="quote">&gt;   	stat-&gt;d_requestee++;</span>

This looks like the right thing to do. We&#39;ll be testing it and complain later if
we find any problems, but I&#39;m not expecting any since this patch looks to
maintain our status quo.

Best,

Andrew
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Dec. 5, 2017, 9:27 p.m.</div>
<pre class="content">
On Tue, Dec 05, 2017 at 03:09:48PM -0600, Andrew Banman wrote:
<span class="quote">&gt; On 12/5/17 6:34 AM, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt;Since uv_flush_tlb_others() implements flush_tlb_others() which is</span>
<span class="quote">&gt; &gt;about flushing user mappings, we should use __flush_tlb_single(),</span>
<span class="quote">&gt; &gt;which too is about flushing user mappings.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Cc: Andrew Banman&lt;abanman@hpe.com&gt;</span>
<span class="quote">&gt; &gt;Cc: Mike Travis&lt;mike.travis@hpe.com&gt;</span>
<span class="quote">&gt; &gt;Signed-off-by: Peter Zijlstra (Intel)&lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; &gt;---</span>
<span class="quote">&gt; &gt;  arch/x86/platform/uv/tlb_uv.c |    2 +-</span>
<span class="quote">&gt; &gt;  1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt; &gt;+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt; &gt;@@ -299,7 +299,7 @@ static void bau_process_message(struct m</span>
<span class="quote">&gt; &gt;  		local_flush_tlb();</span>
<span class="quote">&gt; &gt;  		stat-&gt;d_alltlb++;</span>
<span class="quote">&gt; &gt;  	} else {</span>
<span class="quote">&gt; &gt;-		__flush_tlb_one(msg-&gt;address);</span>
<span class="quote">&gt; &gt;+		__flush_tlb_single(msg-&gt;address);</span>
<span class="quote">&gt; &gt;  		stat-&gt;d_onetlb++;</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  	stat-&gt;d_requestee++;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This looks like the right thing to do. We&#39;ll be testing it and complain later if</span>
<span class="quote">&gt; we find any problems, but I&#39;m not expecting any since this patch looks to</span>
<span class="quote">&gt; maintain our status quo.</span>

Well, with KPTI (the-patch-set-formerly-known-as-kaiser), there will be
a distinct difference between the two.

With KPTI __flush_tlb_one() would end up invalidating all kernel
mappings while __flush_tlb_single() will end up only invalidating the
user mappings of the current mm.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172707">Andrew Banman</a> - Dec. 5, 2017, 11:04 p.m.</div>
<pre class="content">
On 12/5/17 3:27 PM, Peter Zijlstra wrote:
<span class="quote">&gt; On Tue, Dec 05, 2017 at 03:09:48PM -0600, Andrew Banman wrote:</span>
<span class="quote">&gt;&gt; On 12/5/17 6:34 AM, Peter Zijlstra wrote:</span>
<span class="quote">&gt;&gt;&gt; Since uv_flush_tlb_others() implements flush_tlb_others() which is</span>
<span class="quote">&gt;&gt;&gt; about flushing user mappings, we should use __flush_tlb_single(),</span>
<span class="quote">&gt;&gt;&gt; which too is about flushing user mappings.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Andrew Banman&lt;abanman@hpe.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Cc: Mike Travis&lt;mike.travis@hpe.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Peter Zijlstra (Intel)&lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;   arch/x86/platform/uv/tlb_uv.c |    2 +-</span>
<span class="quote">&gt;&gt;&gt;   1 file changed, 1 insertion(+), 1 deletion(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="quote">&gt;&gt;&gt; @@ -299,7 +299,7 @@ static void bau_process_message(struct m</span>
<span class="quote">&gt;&gt;&gt;   		local_flush_tlb();</span>
<span class="quote">&gt;&gt;&gt;   		stat-&gt;d_alltlb++;</span>
<span class="quote">&gt;&gt;&gt;   	} else {</span>
<span class="quote">&gt;&gt;&gt; -		__flush_tlb_one(msg-&gt;address);</span>
<span class="quote">&gt;&gt;&gt; +		__flush_tlb_single(msg-&gt;address);</span>
<span class="quote">&gt;&gt;&gt;   		stat-&gt;d_onetlb++;</span>
<span class="quote">&gt;&gt;&gt;   	}</span>
<span class="quote">&gt;&gt;&gt;   	stat-&gt;d_requestee++;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This looks like the right thing to do. We&#39;ll be testing it and complain later if</span>
<span class="quote">&gt;&gt; we find any problems, but I&#39;m not expecting any since this patch looks to</span>
<span class="quote">&gt;&gt; maintain our status quo.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Well, with KPTI (the-patch-set-formerly-known-as-kaiser), there will be</span>
<span class="quote">&gt; a distinct difference between the two.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With KPTI __flush_tlb_one() would end up invalidating all kernel</span>
<span class="quote">&gt; mappings while __flush_tlb_single() will end up only invalidating the</span>
<span class="quote">&gt; user mappings of the current mm.</span>
<span class="quote">&gt; </span>

Right! Now the KPTI __flush_tlb_single() equals the old
__flush_tlb_one(), less the call to count_vm_tlb_event().

ACK
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ b/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -299,7 +299,7 @@</span> <span class="p_context"> static void bau_process_message(struct m</span>
 		local_flush_tlb();
 		stat-&gt;d_alltlb++;
 	} else {
<span class="p_del">-		__flush_tlb_one(msg-&gt;address);</span>
<span class="p_add">+		__flush_tlb_single(msg-&gt;address);</span>
 		stat-&gt;d_onetlb++;
 	}
 	stat-&gt;d_requestee++;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



