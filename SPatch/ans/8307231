
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.3,029/200] mm/hugetlbfs: fix bugs in fallocate hole punch of areas with holes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.3,029/200] mm/hugetlbfs: fix bugs in fallocate hole punch of areas with holes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 14, 2016, 10:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160214222218.187243714@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8307231/mbox/"
   >mbox</a>
|
   <a href="/patch/8307231/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8307231/">/patch/8307231/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 0553D9F38B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 15 Feb 2016 00:14:37 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id E1B50202BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 15 Feb 2016 00:14:35 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B30BB2042B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 15 Feb 2016 00:14:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753375AbcBOAOb (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 14 Feb 2016 19:14:31 -0500
Received: from mail.linuxfoundation.org ([140.211.169.12]:41023 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752868AbcBNWeR (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 14 Feb 2016 17:34:17 -0500
Received: from localhost (c-50-170-35-168.hsd1.wa.comcast.net
	[50.170.35.168])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 5A7E4E76;
	Sun, 14 Feb 2016 22:34:17 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	&quot;Hillf Danton&quot; &lt;hillf.zj@alibaba-inc.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 4.3 029/200] mm/hugetlbfs: fix bugs in fallocate hole punch
	of areas with holes
Date: Sun, 14 Feb 2016 14:20:36 -0800
Message-Id: &lt;20160214222218.187243714@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.7.1
In-Reply-To: &lt;20160214222217.084543173@linuxfoundation.org&gt;
References: &lt;20160214222217.084543173@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Feb. 14, 2016, 10:20 p.m.</div>
<pre class="content">
4.3-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

commit 1817889e3b2cc1db8abb595712095129ff9156c1 upstream.

Hugh Dickins pointed out problems with the new hugetlbfs fallocate hole
punch code.  These problems are in the routine remove_inode_hugepages and
mostly occur in the case where there are holes in the range of pages to be
removed.  These holes could be the result of a previous hole punch or
simply sparse allocation.  The current code could access pages outside the
specified range.

remove_inode_hugepages handles both hole punch and truncate operations.
Page index handling was fixed/cleaned up so that the loop index always
matches the page being processed.  The code now only makes a single pass
through the range of pages as it was determined page faults could not race
with truncate.  A cond_resched() was added after removing up to
PAGEVEC_SIZE pages.

Some totally unnecessary code in hugetlbfs_fallocate() that remained from
early development was also removed.

Tested with fallocate tests submitted here:
http://librelist.com/browser//libhugetlbfs/2015/6/25/patch-tests-add-tests-for-fallocate-system-call/
And, some ftruncate tests under development

Fixes: b5cec28d36f5 (&quot;hugetlbfs: truncate_hugepages() takes a range of pages&quot;)
<span class="signed-off-by">Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="acked-by">Acked-by: Hugh Dickins &lt;hughd@google.com&gt;</span>
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
Cc: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Cc: Davidlohr Bueso &lt;dave@stgolabs.net&gt;
Cc: &quot;Hillf Danton&quot; &lt;hillf.zj@alibaba-inc.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 fs/hugetlbfs/inode.c |   65 +++++++++++++++++++++++++--------------------------
 1 file changed, 32 insertions(+), 33 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -332,12 +332,17 @@</span> <span class="p_context"> static void remove_huge_page(struct page</span>
  * truncation is indicated by end of range being LLONG_MAX
  *	In this case, we first scan the range and release found pages.
  *	After releasing pages, hugetlb_unreserve_pages cleans up region/reserv
<span class="p_del">- *	maps and global counts.</span>
<span class="p_add">+ *	maps and global counts.  Page faults can not race with truncation</span>
<span class="p_add">+ *	in this routine.  hugetlb_no_page() prevents page faults in the</span>
<span class="p_add">+ *	truncated range.  It checks i_size before allocation, and again after</span>
<span class="p_add">+ *	with the page table lock for the page held.  The same lock must be</span>
<span class="p_add">+ *	acquired to unmap a page.</span>
  * hole punch is indicated if end is not LLONG_MAX
  *	In the hole punch case we scan the range and release found pages.
  *	Only when releasing a page is the associated region/reserv map
  *	deleted.  The region/reserv map for ranges without associated
<span class="p_del">- *	pages are not modified.</span>
<span class="p_add">+ *	pages are not modified.  Page faults can race with hole punch.</span>
<span class="p_add">+ *	This is indicated if we find a mapped page.</span>
  * Note: If the passed end of range value is beyond the end of file, but
  * not LLONG_MAX this routine still performs a hole punch operation.
  */
<span class="p_chunk">@@ -361,46 +366,37 @@</span> <span class="p_context"> static void remove_inode_hugepages(struc</span>
 	next = start;
 	while (next &lt; end) {
 		/*
<span class="p_del">-		 * Make sure to never grab more pages that we</span>
<span class="p_del">-		 * might possibly need.</span>
<span class="p_add">+		 * Don&#39;t grab more pages than the number left in the range.</span>
 		 */
 		if (end - next &lt; lookup_nr)
 			lookup_nr = end - next;
 
 		/*
<span class="p_del">-		 * This pagevec_lookup() may return pages past &#39;end&#39;,</span>
<span class="p_del">-		 * so we must check for page-&gt;index &gt; end.</span>
<span class="p_add">+		 * When no more pages are found, we are done.</span>
 		 */
<span class="p_del">-		if (!pagevec_lookup(&amp;pvec, mapping, next, lookup_nr)) {</span>
<span class="p_del">-			if (next == start)</span>
<span class="p_del">-				break;</span>
<span class="p_del">-			next = start;</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-		}</span>
<span class="p_add">+		if (!pagevec_lookup(&amp;pvec, mapping, next, lookup_nr))</span>
<span class="p_add">+			break;</span>
 
 		for (i = 0; i &lt; pagevec_count(&amp;pvec); ++i) {
 			struct page *page = pvec.pages[i];
 			u32 hash;
 
<span class="p_add">+			/*</span>
<span class="p_add">+			 * The page (index) could be beyond end.  This is</span>
<span class="p_add">+			 * only possible in the punch hole case as end is</span>
<span class="p_add">+			 * max page offset in the truncate case.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			next = page-&gt;index;</span>
<span class="p_add">+			if (next &gt;= end)</span>
<span class="p_add">+				break;</span>
<span class="p_add">+</span>
 			hash = hugetlb_fault_mutex_hash(h, current-&gt;mm,
 							&amp;pseudo_vma,
 							mapping, next, 0);
 			mutex_lock(&amp;hugetlb_fault_mutex_table[hash]);
 
 			lock_page(page);
<span class="p_del">-			if (page-&gt;index &gt;= end) {</span>
<span class="p_del">-				unlock_page(page);</span>
<span class="p_del">-				mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);</span>
<span class="p_del">-				next = end;	/* we are done */</span>
<span class="p_del">-				break;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * If page is mapped, it was faulted in after being</span>
<span class="p_del">-			 * unmapped.  Do nothing in this race case.  In the</span>
<span class="p_del">-			 * normal case page is not mapped.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			if (!page_mapped(page)) {</span>
<span class="p_add">+			if (likely(!page_mapped(page))) {</span>
 				bool rsv_on_error = !PagePrivate(page);
 				/*
 				 * We must free the huge page and remove
<span class="p_chunk">@@ -421,17 +417,23 @@</span> <span class="p_context"> static void remove_inode_hugepages(struc</span>
 						hugetlb_fix_reserve_counts(
 							inode, rsv_on_error);
 				}
<span class="p_add">+			} else {</span>
<span class="p_add">+				/*</span>
<span class="p_add">+				 * If page is mapped, it was faulted in after</span>
<span class="p_add">+				 * being unmapped.  It indicates a race between</span>
<span class="p_add">+				 * hole punch and page fault.  Do nothing in</span>
<span class="p_add">+				 * this case.  Getting here in a truncate</span>
<span class="p_add">+				 * operation is a bug.</span>
<span class="p_add">+				 */</span>
<span class="p_add">+				BUG_ON(truncate_op);</span>
 			}
 
<span class="p_del">-			if (page-&gt;index &gt; next)</span>
<span class="p_del">-				next = page-&gt;index;</span>
<span class="p_del">-</span>
<span class="p_del">-			++next;</span>
 			unlock_page(page);
<span class="p_del">-</span>
 			mutex_unlock(&amp;hugetlb_fault_mutex_table[hash]);
 		}
<span class="p_add">+		++next;</span>
 		huge_pagevec_release(&amp;pvec);
<span class="p_add">+		cond_resched();</span>
 	}
 
 	if (truncate_op)
<span class="p_chunk">@@ -647,9 +649,6 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct f</span>
 	if (!(mode &amp; FALLOC_FL_KEEP_SIZE) &amp;&amp; offset + len &gt; inode-&gt;i_size)
 		i_size_write(inode, offset + len);
 	inode-&gt;i_ctime = CURRENT_TIME;
<span class="p_del">-	spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_del">-	inode-&gt;i_private = NULL;</span>
<span class="p_del">-	spin_unlock(&amp;inode-&gt;i_lock);</span>
 out:
 	mutex_unlock(&amp;inode-&gt;i_mutex);
 	return error;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



