
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5] acpi, apei, arm64: APEI initial support for aarch64. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5] acpi, apei, arm64: APEI initial support for aarch64.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 10, 2015, 8:13 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1449735216-20999-1-git-send-email-fu.wei@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7816301/mbox/"
   >mbox</a>
|
   <a href="/patch/7816301/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7816301/">/patch/7816301/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 3B877BEEE1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 10 Dec 2015 08:14:14 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 3B0D520555
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 10 Dec 2015 08:14:13 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 0B5222053D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 10 Dec 2015 08:14:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754496AbbLJIOJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 10 Dec 2015 03:14:09 -0500
Received: from mx1.redhat.com ([209.132.183.28]:50626 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751327AbbLJIOG (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 10 Dec 2015 03:14:06 -0500
Received: from int-mx11.intmail.prod.int.phx2.redhat.com
	(int-mx11.intmail.prod.int.phx2.redhat.com [10.5.11.24])
	by mx1.redhat.com (Postfix) with ESMTPS id 813F08E69C;
	Thu, 10 Dec 2015 08:14:04 +0000 (UTC)
Received: from magi-f22.redhat.com (vpn1-5-196.pek2.redhat.com [10.72.5.196])
	by int-mx11.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id tBA8Dohw023327; Thu, 10 Dec 2015 03:13:51 -0500
From: fu.wei@linaro.org
To: tomasz.nowicki@linaro.org, tn@semihalf.com, rjw@rjwysocki.net,
	lenb@kernel.org, catalin.marinas@arm.com, will.deacon@arm.com,
	tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com
Cc: linux-kernel@vger.kernel.org, linux-acpi@vger.kernel.org,
	x86@kernel.org, linaro-acpi@lists.linaro.org,
	linux-arm-kernel@lists.infradead.org, graeme.gregory@linaro.org,
	al.stone@linaro.org, hanjun.guo@linaro.org, mark.rutland@arm.com,
	Marc.Zyngier@arm.com, lorenzo.pieralisi@arm.com,
	rruigrok@codeaurora.org, harba@qti.qualcomm.com, jcm@redhat.com,
	msalter@redhat.com, grant.likely@linaro.org, rrichter@cavium.com,
	jarkko.nikula@linux.intel.com, jon.zhixiong.zhang@gmail.com,
	Fu Wei &lt;fu.wei@linaro.org&gt;
Subject: [PATCH v5] acpi, apei, arm64: APEI initial support for aarch64.
Date: Thu, 10 Dec 2015 16:13:36 +0800
Message-Id: &lt;1449735216-20999-1-git-send-email-fu.wei@linaro.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.24
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - Dec. 10, 2015, 8:13 a.m.</div>
<pre class="content">
<span class="from">From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>

This commit provides APEI arch-specific bits for aarch64

Meanwhile, add a new subfunction &quot;hest_ia_init&quot; for
&quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture
Corrected Machine Check (CMC), and add &quot;HAVE_ACPI_APEI_HEST_IA32&quot;
to make sure only x86 use &quot;hest_ia_init&quot;.
<span class="signed-off-by">
Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="acked-by">Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
---
Changelog:
v5: Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of
    &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.

v4: Rebase to latest kernel version(4.4-rc4).
    Move arch_apei_flush_tlb_one into header file as a inline function
    Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.

v3: https://lkml.org/lkml/2015/12/3/521
    Remove &quot;acpi_disable_cmcff&quot; from arm64 code,
    and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;

v2: https://lkml.org/lkml/2015/12/2/432
    Rebase to latest kernel version(4.4-rc3).
    Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c

v1: https://lkml.org/lkml/2015/8/14/199
    Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.
    Delete arch/arm64/kernel/apei.c.
    Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.

 arch/arm64/Kconfig            |  1 +
 arch/arm64/include/asm/acpi.h |  7 ++++++-
 arch/x86/Kconfig              |  1 +
 drivers/acpi/apei/Kconfig     |  3 +++
 drivers/acpi/apei/hest.c      | 19 ++++++++++++++++---
 5 files changed, 27 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 871f217..58c8992 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"> config ARM64</span>
 	select ACPI_CCA_REQUIRED if ACPI
 	select ACPI_GENERIC_GSI if ACPI
 	select ACPI_REDUCED_HARDWARE_ONLY if ACPI
<span class="p_add">+	select HAVE_ACPI_APEI if ACPI</span>
 	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 	select ARCH_HAS_ELF_RANDOMIZE
 	select ARCH_HAS_GCOV_PROFILE_ALL
<span class="p_header">diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">index caafd63..da657a9 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/cputype.h&gt;
 #include &lt;asm/smp_plat.h&gt;
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
 
 /* Macros for consistency checks of the GICC subtable of MADT */
 #define ACPI_MADT_GICC_LENGTH	\
<span class="p_chunk">@@ -94,6 +95,10 @@</span> <span class="p_context"> static inline const char *acpi_get_enable_method(int cpu)</span>
 
 #ifdef	CONFIG_ACPI_APEI
 pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);
<span class="p_del">-#endif</span>
 
<span class="p_add">+static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_ACPI_APEI */</span>
 #endif /*_ASM_ACPI_H*/
<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index db3622f..1f9107b 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -74,6 +74,7 @@</span> <span class="p_context"> config X86</span>
 	select GENERIC_TIME_VSYSCALL
 	select HAVE_ACPI_APEI			if ACPI
 	select HAVE_ACPI_APEI_NMI		if ACPI
<span class="p_add">+	select HAVE_ACPI_APEI_HEST_IA32		if ACPI</span>
 	select HAVE_ALIGNED_STRUCT_PAGE		if SLUB
 	select HAVE_AOUT			if X86_32
 	select HAVE_ARCH_AUDITSYSCALL
<span class="p_header">diff --git a/drivers/acpi/apei/Kconfig b/drivers/acpi/apei/Kconfig</span>
<span class="p_header">index b0140c8..a60bb00 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/Kconfig</span>
<span class="p_header">+++ b/drivers/acpi/apei/Kconfig</span>
<span class="p_chunk">@@ -4,6 +4,9 @@</span> <span class="p_context"> config HAVE_ACPI_APEI</span>
 config HAVE_ACPI_APEI_NMI
 	bool
 
<span class="p_add">+config HAVE_ACPI_APEI_HEST_IA32</span>
<span class="p_add">+	bool</span>
<span class="p_add">+</span>
 config ACPI_APEI
 	bool &quot;ACPI Platform Error Interface (APEI)&quot;
 	select MISC_FILESYSTEMS
<span class="p_header">diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="p_header">index 20b3fcf..c708c95 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/hest.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/hest.c</span>
<span class="p_chunk">@@ -117,15 +117,27 @@</span> <span class="p_context"> int apei_hest_parse(apei_hest_func_t func, void *data)</span>
 }
 EXPORT_SYMBOL_GPL(apei_hest_parse);
 
<span class="p_add">+#ifdef CONFIG_HAVE_ACPI_APEI_HEST_IA32</span>
 /*
  * Check if firmware advertises firmware first mode. We need FF bit to be set
  * along with a set of MC banks which work in FF mode.
  */
 static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)
 {
<span class="p_del">-	return arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+	if (!acpi_disable_cmcff)</span>
<span class="p_add">+		return !arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
 }
 
<span class="p_add">+static inline int __init hest_ia_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline int __init hest_ia_init(void) { return 0; }</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 struct ghes_arr {
 	struct platform_device **ghes_devs;
 	unsigned int count;
<span class="p_chunk">@@ -232,8 +244,9 @@</span> <span class="p_context"> void __init acpi_hest_init(void)</span>
 		goto err;
 	}
 
<span class="p_del">-	if (!acpi_disable_cmcff)</span>
<span class="p_del">-		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="p_add">+	rc = hest_ia_init();</span>
<span class="p_add">+	if (rc)</span>
<span class="p_add">+		goto err;</span>
 
 	if (!ghes_disable) {
 		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



