
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8] acpi, apei, arm64: APEI initial support for aarch64. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8] acpi, apei, arm64: APEI initial support for aarch64.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 29, 2016, 7:44 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1459237458-12352-1-git-send-email-fu.wei@linaro.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8683491/mbox/"
   >mbox</a>
|
   <a href="/patch/8683491/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8683491/">/patch/8683491/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 8B84FC0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 07:45:23 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 85FC72015A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 07:45:22 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 61CE5200ED
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 29 Mar 2016 07:45:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755997AbcC2HpR (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 29 Mar 2016 03:45:17 -0400
Received: from mx1.redhat.com ([209.132.183.28]:53086 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751867AbcC2HpN (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 29 Mar 2016 03:45:13 -0400
Received: from int-mx14.intmail.prod.int.phx2.redhat.com
	(int-mx14.intmail.prod.int.phx2.redhat.com [10.5.11.27])
	by mx1.redhat.com (Postfix) with ESMTPS id 8CEDBC00DDE9;
	Tue, 29 Mar 2016 07:45:10 +0000 (UTC)
Received: from magi-f22.redhat.com (vpn1-7-198.pek2.redhat.com [10.72.7.198])
	by int-mx14.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id u2T7ixS9008754; Tue, 29 Mar 2016 03:44:59 -0400
From: fu.wei@linaro.org
To: tn@semihalf.com, rjw@rjwysocki.net, len.brown@intel.com,
	pavel@ucw.cz, catalin.marinas@arm.com, will.deacon@arm.com,
	tglx@linutronix.de, mingo@redhat.com, hpa@zytor.com
Cc: linux-kernel@vger.kernel.org, linux-acpi@vger.kernel.org,
	x86@kernel.org, linaro-acpi@lists.linaro.org,
	linux-arm-kernel@lists.infradead.org, linux-pm@vger.kernel.org,
	graeme.gregory@linaro.org, al.stone@linaro.org,
	hanjun.guo@linaro.org, mark.rutland@arm.com, Marc.Zyngier@arm.com,
	lorenzo.pieralisi@arm.com, rruigrok@codeaurora.org,
	harba@qti.qualcomm.com, tbaicar@codeaurora.org, jcm@redhat.com,
	msalter@redhat.com, grant.likely@linaro.org, rrichter@cavium.com,
	jarkko.nikula@linux.intel.com, jon.zhixiong.zhang@gmail.com,
	Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;, Fu Wei &lt;fu.wei@linaro.org&gt;
Subject: [PATCH v8] acpi, apei, arm64: APEI initial support for aarch64.
Date: Tue, 29 Mar 2016 15:44:18 +0800
Message-Id: &lt;1459237458-12352-1-git-send-email-fu.wei@linaro.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.27
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - March 29, 2016, 7:44 a.m.</div>
<pre class="content">
<span class="from">From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>

This commit provides APEI arch-specific bits for aarch64

Meanwhile,
(1)add a new subfunction &quot;hest_ia32_init&quot; for
&quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture
Corrected Machine Check (CMC).
(2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to
a generic place.
(3)select EFI when ACPI_APEI is set on ARM64,
because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.

[Fu Wei: improve &amp;&amp; upstream]
<span class="signed-off-by">
Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="acked-by">Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="tested-by">Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
---
Changelog:
v8: Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set
    on ARM64.

v7: https://lkml.org/lkml/2016/3/17/183
    Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h

v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html
    Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to
    a generic place.
    Delete HAVE_ACPI_APEI_HEST_IA32.

v5: https://lkml.org/lkml/2015/12/10/131
    Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of
    &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.

v4: https://lkml.org/lkml/2015/12/8/188
    Rebase to latest kernel version(4.4-rc4).
    Move arch_apei_flush_tlb_one into header file as a inline function
    Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.

v3: https://lkml.org/lkml/2015/12/3/521
    Remove &quot;acpi_disable_cmcff&quot; from arm64 code,
    and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;

v2: https://lkml.org/lkml/2015/12/2/432
    Rebase to latest kernel version(4.4-rc3).
    Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c

v1: https://lkml.org/lkml/2015/8/14/199
    Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.
    Delete arch/arm64/kernel/apei.c.
    Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.

 arch/arm64/Kconfig            |  1 +
 arch/arm64/include/asm/acpi.h | 15 ++++++++++++++-
 arch/x86/kernel/acpi/apei.c   |  3 ---
 drivers/acpi/apei/Kconfig     |  1 +
 drivers/acpi/apei/hest.c      | 18 +++++++++++++++---
 5 files changed, 31 insertions(+), 7 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - March 29, 2016, 4:35 p.m.</div>
<pre class="content">
On Tue, Mar 29, 2016 at 03:44:18PM +0800, fu.wei@linaro.org wrote:
<span class="quote">&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Meanwhile,</span>
<span class="quote">&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt; a generic place.</span>
<span class="quote">&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changelog:</span>
<span class="quote">&gt; v8: Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set</span>
<span class="quote">&gt;     on ARM64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v7: https://lkml.org/lkml/2016/3/17/183</span>
<span class="quote">&gt;     Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html</span>
<span class="quote">&gt;     Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;     a generic place.</span>
<span class="quote">&gt;     Delete HAVE_ACPI_APEI_HEST_IA32.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v5: https://lkml.org/lkml/2015/12/10/131</span>
<span class="quote">&gt;     Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of</span>
<span class="quote">&gt;     &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v4: https://lkml.org/lkml/2015/12/8/188</span>
<span class="quote">&gt;     Rebase to latest kernel version(4.4-rc4).</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one into header file as a inline function</span>
<span class="quote">&gt;     Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v3: https://lkml.org/lkml/2015/12/3/521</span>
<span class="quote">&gt;     Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;     and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;     Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;     Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;     Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  arch/arm64/Kconfig            |  1 +</span>
<span class="quote">&gt;  arch/arm64/include/asm/acpi.h | 15 ++++++++++++++-</span>
<span class="quote">&gt;  arch/x86/kernel/acpi/apei.c   |  3 ---</span>
<span class="quote">&gt;  drivers/acpi/apei/Kconfig     |  1 +</span>
<span class="quote">&gt;  drivers/acpi/apei/hest.c      | 18 +++++++++++++++---</span>
<span class="quote">&gt;  5 files changed, 31 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt; index 4f43622..08952ec 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;  	select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;  	select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;  	select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt; +	select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;  	select ARCH_HAS_DEVMEM_IS_ALLOWED</span>
<span class="quote">&gt;  	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;  	select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; index aee323b..4a6c959 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; @@ -17,6 +17,7 @@</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/smp_plat.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* Macros for consistency checks of the GICC subtable of MADT */</span>
<span class="quote">&gt;  #define ACPI_MADT_GICC_LENGTH	\</span>
<span class="quote">&gt; @@ -110,7 +111,19 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef	CONFIG_ACPI_APEI</span>
<span class="quote">&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * This inline function is used in IRQ context (by GHES driver now),</span>
<span class="quote">&gt; + * see ghes_iounmap_irq and ghes_iounmap_nmi in drivers/acpi/apei/ghes.c.</span>
<span class="quote">&gt; + * The page mapped is reserved for firmware in kernel. This invalidate TLB</span>
<span class="quote">&gt; + * maintenance should be broadcasted safely to make sure that all the cores</span>
<span class="quote">&gt; + * will do TLB invalidation, then get the right pages.</span>
<span class="quote">&gt; + */</span>

How about:

 /*
  * Despite its name, this function must still broadcast the TLB
  * invalidation in order to ensure other CPUs don&#39;t up with with junk
  * entries as a result of speculation. Unusually, its also called in
  * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for
  * TLB broadcasting, then we&#39;re in trouble here.
  */

With that,
<span class="acked-by">
Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - March 30, 2016, 6:50 a.m.</div>
<pre class="content">
Hi Tomasz,

[auto build test WARNING on arm64/for-next/core]
[also build test WARNING on v4.6-rc1 next-20160330]
[if your patch is applied to the wrong git tree, please drop us a note to help improving the system]

url:    https://github.com/0day-ci/linux/commits/fu-wei-linaro-org/acpi-apei-arm64-APEI-initial-support-for-aarch64/20160329-154730
base:   https://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux for-next/core
config: arm64-allyesconfig (attached as .config)
reproduce:
        wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross
        chmod +x ~/bin/make.cross
        # save the attached .config to linux build tree
        make.cross ARCH=arm64 

All warnings (new ones prefixed by &gt;&gt;):

warning: (ACPI_APEI) selects EFI which has unmet direct dependencies (OF &amp;&amp; !CPU_BIG_ENDIAN)

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - March 30, 2016, 7:05 a.m.</div>
<pre class="content">
On 29 March 2016 at 09:44,  &lt;fu.wei@linaro.org&gt; wrote:
<span class="quote">&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Meanwhile,</span>
<span class="quote">&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt; a generic place.</span>
<span class="quote">&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>

I think selecting &#39;EFI&#39; is not the right approach here, especially
since EFI is implied by ACPI on that architecture. But selecting a
user configurable option like this is typically not recommended. Why
doesn&#39;t ACPI_APEI depend on ACPI?
<span class="quote">
&gt;</span>
<span class="quote">&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changelog:</span>
<span class="quote">&gt; v8: Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set</span>
<span class="quote">&gt;     on ARM64.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v7: https://lkml.org/lkml/2016/3/17/183</span>
<span class="quote">&gt;     Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html</span>
<span class="quote">&gt;     Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;     a generic place.</span>
<span class="quote">&gt;     Delete HAVE_ACPI_APEI_HEST_IA32.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v5: https://lkml.org/lkml/2015/12/10/131</span>
<span class="quote">&gt;     Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of</span>
<span class="quote">&gt;     &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v4: https://lkml.org/lkml/2015/12/8/188</span>
<span class="quote">&gt;     Rebase to latest kernel version(4.4-rc4).</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one into header file as a inline function</span>
<span class="quote">&gt;     Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v3: https://lkml.org/lkml/2015/12/3/521</span>
<span class="quote">&gt;     Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;     and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;     Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;     Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;     Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  arch/arm64/Kconfig            |  1 +</span>
<span class="quote">&gt;  arch/arm64/include/asm/acpi.h | 15 ++++++++++++++-</span>
<span class="quote">&gt;  arch/x86/kernel/acpi/apei.c   |  3 ---</span>
<span class="quote">&gt;  drivers/acpi/apei/Kconfig     |  1 +</span>
<span class="quote">&gt;  drivers/acpi/apei/hest.c      | 18 +++++++++++++++---</span>
<span class="quote">&gt;  5 files changed, 31 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt; index 4f43622..08952ec 100644</span>
<span class="quote">&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;         select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;         select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;         select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt; +       select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;         select ARCH_HAS_DEVMEM_IS_ALLOWED</span>
<span class="quote">&gt;         select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;         select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; index aee323b..4a6c959 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt; @@ -17,6 +17,7 @@</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/smp_plat.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /* Macros for consistency checks of the GICC subtable of MADT */</span>
<span class="quote">&gt;  #define ACPI_MADT_GICC_LENGTH  \</span>
<span class="quote">&gt; @@ -110,7 +111,19 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * This inline function is used in IRQ context (by GHES driver now),</span>
<span class="quote">&gt; + * see ghes_iounmap_irq and ghes_iounmap_nmi in drivers/acpi/apei/ghes.c.</span>
<span class="quote">&gt; + * The page mapped is reserved for firmware in kernel. This invalidate TLB</span>
<span class="quote">&gt; + * maintenance should be broadcasted safely to make sure that all the cores</span>
<span class="quote">&gt; + * will do TLB invalidation, then get the right pages.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt;  #endif /*_ASM_ACPI_H*/</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt; @@ -24,9 +24,6 @@ int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data)</span>
<span class="quote">&gt;         struct acpi_hest_ia_corrected *cmc;</span>
<span class="quote">&gt;         struct acpi_hest_ia_error_bank *mc_bank;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -       if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="quote">&gt; -               return 0;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;         cmc = (struct acpi_hest_ia_corrected *)hest_hdr;</span>
<span class="quote">&gt;         if (!cmc-&gt;enabled)</span>
<span class="quote">&gt;                 return 0;</span>
<span class="quote">&gt; diff --git a/drivers/acpi/apei/Kconfig b/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt; index b0140c8..b037c5c 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt; +++ b/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt; @@ -8,6 +8,7 @@ config ACPI_APEI</span>
<span class="quote">&gt;         bool &quot;ACPI Platform Error Interface (APEI)&quot;</span>
<span class="quote">&gt;         select MISC_FILESYSTEMS</span>
<span class="quote">&gt;         select PSTORE</span>
<span class="quote">&gt; +       select EFI if ARM64</span>
<span class="quote">&gt;         select UEFI_CPER</span>
<span class="quote">&gt;         depends on HAVE_ACPI_APEI</span>
<span class="quote">&gt;         help</span>
<span class="quote">&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt; @@ -123,7 +123,18 @@ EXPORT_SYMBOL_GPL(apei_hest_parse);</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -       return arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="quote">&gt; +       if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="quote">&gt; +               return 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (!acpi_disable_cmcff)</span>
<span class="quote">&gt; +               return !arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline int __init hest_ia32_init(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       return apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  struct ghes_arr {</span>
<span class="quote">&gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;                 goto err;</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -       if (!acpi_disable_cmcff)</span>
<span class="quote">&gt; -               apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt; +       rc = hest_ia32_init();</span>
<span class="quote">&gt; +       if (rc)</span>
<span class="quote">&gt; +               goto err;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (!ghes_disable) {</span>
<span class="quote">&gt;                 rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 2.5.0</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; _______________________________________________</span>
<span class="quote">&gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - March 30, 2016, 5:40 p.m.</div>
<pre class="content">
Hi Ard,

On 30 March 2016 at 15:05, Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt; wrote:
<span class="quote">&gt; On 29 March 2016 at 09:44,  &lt;fu.wei@linaro.org&gt; wrote:</span>
<span class="quote">&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Meanwhile,</span>
<span class="quote">&gt;&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt; a generic place.</span>
<span class="quote">&gt;&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt;&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think selecting &#39;EFI&#39; is not the right approach here, especially</span>
<span class="quote">&gt; since EFI is implied by ACPI on that architecture. But selecting a</span>

I think so &quot;EFI is implied by ACPI&quot;,
but I can&#39;t see it in Kconfig, maybe I miss it?
<span class="quote">
&gt; user configurable option like this is typically not recommended. Why</span>
<span class="quote">&gt; doesn&#39;t ACPI_APEI depend on ACPI?</span>

yes, it does, but indirectly.

-----------------
config ACPI_APEI
        bool &quot;ACPI Platform Error Interface (APEI)&quot;
        select MISC_FILESYSTEMS
        select PSTORE
        select EFI if ARM64
        select UEFI_CPER
        depends on HAVE_ACPI_APEI
----------------
config ARM64
        def_bool y
        select ACPI_CCA_REQUIRED if ACPI
        select ACPI_GENERIC_GSI if ACPI
        select ACPI_REDUCED_HARDWARE_ONLY if ACPI
        select HAVE_ACPI_APEI if ACPI
...
---------------
<span class="quote">


&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Changelog:</span>
<span class="quote">&gt;&gt; v8: Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set</span>
<span class="quote">&gt;&gt;     on ARM64.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v7: https://lkml.org/lkml/2016/3/17/183</span>
<span class="quote">&gt;&gt;     Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html</span>
<span class="quote">&gt;&gt;     Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt;     a generic place.</span>
<span class="quote">&gt;&gt;     Delete HAVE_ACPI_APEI_HEST_IA32.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v5: https://lkml.org/lkml/2015/12/10/131</span>
<span class="quote">&gt;&gt;     Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of</span>
<span class="quote">&gt;&gt;     &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v4: https://lkml.org/lkml/2015/12/8/188</span>
<span class="quote">&gt;&gt;     Rebase to latest kernel version(4.4-rc4).</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one into header file as a inline function</span>
<span class="quote">&gt;&gt;     Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v3: https://lkml.org/lkml/2015/12/3/521</span>
<span class="quote">&gt;&gt;     Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;&gt;     and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;&gt;     Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;&gt;     Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;&gt;     Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  arch/arm64/Kconfig            |  1 +</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/acpi.h | 15 ++++++++++++++-</span>
<span class="quote">&gt;&gt;  arch/x86/kernel/acpi/apei.c   |  3 ---</span>
<span class="quote">&gt;&gt;  drivers/acpi/apei/Kconfig     |  1 +</span>
<span class="quote">&gt;&gt;  drivers/acpi/apei/hest.c      | 18 +++++++++++++++---</span>
<span class="quote">&gt;&gt;  5 files changed, 31 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; index 4f43622..08952ec 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;&gt;         select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;&gt;         select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;&gt;         select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt;&gt; +       select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_DEVMEM_IS_ALLOWED</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;&gt;         select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; index aee323b..4a6c959 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; @@ -17,6 +17,7 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/smp_plat.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* Macros for consistency checks of the GICC subtable of MADT */</span>
<span class="quote">&gt;&gt;  #define ACPI_MADT_GICC_LENGTH  \</span>
<span class="quote">&gt;&gt; @@ -110,7 +111,19 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * This inline function is used in IRQ context (by GHES driver now),</span>
<span class="quote">&gt;&gt; + * see ghes_iounmap_irq and ghes_iounmap_nmi in drivers/acpi/apei/ghes.c.</span>
<span class="quote">&gt;&gt; + * The page mapped is reserved for firmware in kernel. This invalidate TLB</span>
<span class="quote">&gt;&gt; + * maintenance should be broadcasted safely to make sure that all the cores</span>
<span class="quote">&gt;&gt; + * will do TLB invalidation, then get the right pages.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;&gt; +static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +#endif /* CONFIG_ACPI_APEI */</span>
<span class="quote">&gt;&gt;  #endif /*_ASM_ACPI_H*/</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; index c280df6..ea3046e 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="quote">&gt;&gt; @@ -24,9 +24,6 @@ int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data)</span>
<span class="quote">&gt;&gt;         struct acpi_hest_ia_corrected *cmc;</span>
<span class="quote">&gt;&gt;         struct acpi_hest_ia_error_bank *mc_bank;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -       if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="quote">&gt;&gt; -               return 0;</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;         cmc = (struct acpi_hest_ia_corrected *)hest_hdr;</span>
<span class="quote">&gt;&gt;         if (!cmc-&gt;enabled)</span>
<span class="quote">&gt;&gt;                 return 0;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/acpi/apei/Kconfig b/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt;&gt; index b0140c8..b037c5c 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt;&gt; +++ b/drivers/acpi/apei/Kconfig</span>
<span class="quote">&gt;&gt; @@ -8,6 +8,7 @@ config ACPI_APEI</span>
<span class="quote">&gt;&gt;         bool &quot;ACPI Platform Error Interface (APEI)&quot;</span>
<span class="quote">&gt;&gt;         select MISC_FILESYSTEMS</span>
<span class="quote">&gt;&gt;         select PSTORE</span>
<span class="quote">&gt;&gt; +       select EFI if ARM64</span>
<span class="quote">&gt;&gt;         select UEFI_CPER</span>
<span class="quote">&gt;&gt;         depends on HAVE_ACPI_APEI</span>
<span class="quote">&gt;&gt;         help</span>
<span class="quote">&gt;&gt; diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; index 20b3fcf..792a0d9 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/acpi/apei/hest.c</span>
<span class="quote">&gt;&gt; @@ -123,7 +123,18 @@ EXPORT_SYMBOL_GPL(apei_hest_parse);</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;  static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -       return arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="quote">&gt;&gt; +       if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="quote">&gt;&gt; +               return 0;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt; +               return !arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +       return 0;</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +static inline int __init hest_ia32_init(void)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +       return apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  struct ghes_arr {</span>
<span class="quote">&gt;&gt; @@ -232,8 +243,9 @@ void __init acpi_hest_init(void)</span>
<span class="quote">&gt;&gt;                 goto err;</span>
<span class="quote">&gt;&gt;         }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -       if (!acpi_disable_cmcff)</span>
<span class="quote">&gt;&gt; -               apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="quote">&gt;&gt; +       rc = hest_ia32_init();</span>
<span class="quote">&gt;&gt; +       if (rc)</span>
<span class="quote">&gt;&gt; +               goto err;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;         if (!ghes_disable) {</span>
<span class="quote">&gt;&gt;                 rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);</span>
<span class="quote">&gt;&gt; --</span>
<span class="quote">&gt;&gt; 2.5.0</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; _______________________________________________</span>
<span class="quote">&gt;&gt; linux-arm-kernel mailing list</span>
<span class="quote">&gt;&gt; linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt;&gt; http://lists.infradead.org/mailman/listinfo/linux-arm-kernel</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - March 30, 2016, 5:41 p.m.</div>
<pre class="content">
Hi Will,

On 30 March 2016 at 00:35, Will Deacon &lt;will.deacon@arm.com&gt; wrote:
<span class="quote">&gt; On Tue, Mar 29, 2016 at 03:44:18PM +0800, fu.wei@linaro.org wrote:</span>
<span class="quote">&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Meanwhile,</span>
<span class="quote">&gt;&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt; a generic place.</span>
<span class="quote">&gt;&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt;&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [Fu Wei: improve &amp;&amp; upstream]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Jonathan (Zhixiong) Zhang &lt;zjzhang@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Fu Wei &lt;fu.wei@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Acked-by: Hanjun Guo &lt;hanjun.guo@linaro.org&gt;</span>
<span class="quote">&gt;&gt; Tested-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Changelog:</span>
<span class="quote">&gt;&gt; v8: Fix a &quot;undefined reference&quot; bug by selecting EFI when ACPI_APEI is set</span>
<span class="quote">&gt;&gt;     on ARM64.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v7: https://lkml.org/lkml/2016/3/17/183</span>
<span class="quote">&gt;&gt;     Add comment for arch_apei_flush_tlb_one in arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v6: https://lists.linaro.org/pipermail/linaro-acpi/2016-March/006644.html</span>
<span class="quote">&gt;&gt;     Move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt;     a generic place.</span>
<span class="quote">&gt;&gt;     Delete HAVE_ACPI_APEI_HEST_IA32.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v5: https://lkml.org/lkml/2015/12/10/131</span>
<span class="quote">&gt;&gt;     Add &quot;HAVE_ACPI_APEI_HEST_IA32&quot; instead of</span>
<span class="quote">&gt;&gt;     &quot;#if defined(__i386__) || defined(__x86_64__)&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v4: https://lkml.org/lkml/2015/12/8/188</span>
<span class="quote">&gt;&gt;     Rebase to latest kernel version(4.4-rc4).</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one into header file as a inline function</span>
<span class="quote">&gt;&gt;     Add a new subfunction &quot;hest_ia_init&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v3: https://lkml.org/lkml/2015/12/3/521</span>
<span class="quote">&gt;&gt;     Remove &quot;acpi_disable_cmcff&quot; from arm64 code,</span>
<span class="quote">&gt;&gt;     and wrap it in hest.c by &quot;#if defined(__i386__) || defined(__x86_64__)&quot;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v2: https://lkml.org/lkml/2015/12/2/432</span>
<span class="quote">&gt;&gt;     Rebase to latest kernel version(4.4-rc3).</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/kernel/acpi.c</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; v1: https://lkml.org/lkml/2015/8/14/199</span>
<span class="quote">&gt;&gt;     Move arch_apei_flush_tlb_one() to arch/arm64/include/asm/apci.h.</span>
<span class="quote">&gt;&gt;     Delete arch/arm64/kernel/apei.c.</span>
<span class="quote">&gt;&gt;     Add &quot;#ifdef CONFIG_ACPI_APEI&quot; for &quot;acpi_disable_cmcff&quot;.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  arch/arm64/Kconfig            |  1 +</span>
<span class="quote">&gt;&gt;  arch/arm64/include/asm/acpi.h | 15 ++++++++++++++-</span>
<span class="quote">&gt;&gt;  arch/x86/kernel/acpi/apei.c   |  3 ---</span>
<span class="quote">&gt;&gt;  drivers/acpi/apei/Kconfig     |  1 +</span>
<span class="quote">&gt;&gt;  drivers/acpi/apei/hest.c      | 18 +++++++++++++++---</span>
<span class="quote">&gt;&gt;  5 files changed, 31 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; index 4f43622..08952ec 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/Kconfig</span>
<span class="quote">&gt;&gt; @@ -3,6 +3,7 @@ config ARM64</span>
<span class="quote">&gt;&gt;       select ACPI_CCA_REQUIRED if ACPI</span>
<span class="quote">&gt;&gt;       select ACPI_GENERIC_GSI if ACPI</span>
<span class="quote">&gt;&gt;       select ACPI_REDUCED_HARDWARE_ONLY if ACPI</span>
<span class="quote">&gt;&gt; +     select HAVE_ACPI_APEI if ACPI</span>
<span class="quote">&gt;&gt;       select ARCH_HAS_DEVMEM_IS_ALLOWED</span>
<span class="quote">&gt;&gt;       select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE</span>
<span class="quote">&gt;&gt;       select ARCH_HAS_ELF_RANDOMIZE</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; index aee323b..4a6c959 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/include/asm/acpi.h</span>
<span class="quote">&gt;&gt; @@ -17,6 +17,7 @@</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/cputype.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;asm/smp_plat.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;asm/tlbflush.h&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  /* Macros for consistency checks of the GICC subtable of MADT */</span>
<span class="quote">&gt;&gt;  #define ACPI_MADT_GICC_LENGTH        \</span>
<span class="quote">&gt;&gt; @@ -110,7 +111,19 @@ static inline const char *acpi_get_enable_method(int cpu)</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  #ifdef       CONFIG_ACPI_APEI</span>
<span class="quote">&gt;&gt; +#define acpi_disable_cmcff 1</span>
<span class="quote">&gt;&gt;  pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);</span>
<span class="quote">&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; +/*</span>
<span class="quote">&gt;&gt; + * This inline function is used in IRQ context (by GHES driver now),</span>
<span class="quote">&gt;&gt; + * see ghes_iounmap_irq and ghes_iounmap_nmi in drivers/acpi/apei/ghes.c.</span>
<span class="quote">&gt;&gt; + * The page mapped is reserved for firmware in kernel. This invalidate TLB</span>
<span class="quote">&gt;&gt; + * maintenance should be broadcasted safely to make sure that all the cores</span>
<span class="quote">&gt;&gt; + * will do TLB invalidation, then get the right pages.</span>
<span class="quote">&gt;&gt; + */</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; How about:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * Despite its name, this function must still broadcast the TLB</span>
<span class="quote">&gt;   * invalidation in order to ensure other CPUs don&#39;t up with with junk</span>
<span class="quote">&gt;   * entries as a result of speculation. Unusually, its also called in</span>
<span class="quote">&gt;   * IRQ context (ghes_iounmap_irq) so if we ever need to use IPIs for</span>
<span class="quote">&gt;   * TLB broadcasting, then we&#39;re in trouble here.</span>
<span class="quote">&gt;   */</span>

Good, thanks for your help
<span class="quote">
&gt;</span>
<span class="quote">&gt; With that,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Acked-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>

Thanks ! :-)
<span class="quote">
&gt;</span>
<span class="quote">&gt; Will</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - March 30, 2016, 5:55 p.m.</div>
<pre class="content">
Hi Tomasz

On 30 March 2016 at 14:50, kbuild test robot &lt;lkp@intel.com&gt; wrote:
<span class="quote">&gt; Hi Tomasz,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [auto build test WARNING on arm64/for-next/core]</span>
<span class="quote">&gt; [also build test WARNING on v4.6-rc1 next-20160330]</span>
<span class="quote">&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improving the system]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; url:    https://github.com/0day-ci/linux/commits/fu-wei-linaro-org/acpi-apei-arm64-APEI-initial-support-for-aarch64/20160329-154730</span>
<span class="quote">&gt; base:   https://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux for-next/core</span>
<span class="quote">&gt; config: arm64-allyesconfig (attached as .config)</span>
<span class="quote">&gt; reproduce:</span>
<span class="quote">&gt;         wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross</span>
<span class="quote">&gt;         chmod +x ~/bin/make.cross</span>
<span class="quote">&gt;         # save the attached .config to linux build tree</span>
<span class="quote">&gt;         make.cross ARCH=arm64</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; All warnings (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; warning: (ACPI_APEI) selects EFI which has unmet direct dependencies (OF &amp;&amp; !CPU_BIG_ENDIAN)</span>

I think it&#39;s caused by  CPU_BIG_ENDIAN, because  ARM64 selects OF.

Any suggestion ?
<span class="quote">

&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; 0-DAY kernel test infrastructure                Open Source Technology Center</span>
<span class="quote">&gt; https://lists.01.org/pipermail/kbuild-all                   Intel Corporation</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=66681">Ard Biesheuvel</a> - March 31, 2016, 7:52 a.m.</div>
<pre class="content">
On 30 March 2016 at 19:55, Fu Wei &lt;fu.wei@linaro.org&gt; wrote:
<span class="quote">&gt; Hi Tomasz</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; On 30 March 2016 at 14:50, kbuild test robot &lt;lkp@intel.com&gt; wrote:</span>
<span class="quote">&gt;&gt; Hi Tomasz,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; [auto build test WARNING on arm64/for-next/core]</span>
<span class="quote">&gt;&gt; [also build test WARNING on v4.6-rc1 next-20160330]</span>
<span class="quote">&gt;&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improving the system]</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; url:    https://github.com/0day-ci/linux/commits/fu-wei-linaro-org/acpi-apei-arm64-APEI-initial-support-for-aarch64/20160329-154730</span>
<span class="quote">&gt;&gt; base:   https://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux for-next/core</span>
<span class="quote">&gt;&gt; config: arm64-allyesconfig (attached as .config)</span>
<span class="quote">&gt;&gt; reproduce:</span>
<span class="quote">&gt;&gt;         wget https://git.kernel.org/cgit/linux/kernel/git/wfg/lkp-tests.git/plain/sbin/make.cross -O ~/bin/make.cross</span>
<span class="quote">&gt;&gt;         chmod +x ~/bin/make.cross</span>
<span class="quote">&gt;&gt;         # save the attached .config to linux build tree</span>
<span class="quote">&gt;&gt;         make.cross ARCH=arm64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; All warnings (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; warning: (ACPI_APEI) selects EFI which has unmet direct dependencies (OF &amp;&amp; !CPU_BIG_ENDIAN)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think it&#39;s caused by  CPU_BIG_ENDIAN, because  ARM64 selects OF.</span>
<span class="quote">&gt;</span>

No, as I pointed out, it is caused by the fact that you &#39;select&#39; EFI
rather than &#39;depend on&#39; it.
<span class="quote">
&gt; Any suggestion ?</span>
<span class="quote">&gt;</span>

replace

select EFI if ARM64

with

depends on EFI || !ARM64

but it would be even better to make ACPI_APEI depend on ACPI, since
the above dependency will be implied then, although I am not sure how
that affects other architectures.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=141731">Tomasz Nowicki</a> - April 4, 2016, 8:32 a.m.</div>
<pre class="content">
On 30.03.2016 09:05, Ard Biesheuvel wrote:
<span class="quote">&gt; On 29 March 2016 at 09:44,  &lt;fu.wei@linaro.org&gt; wrote:</span>
<span class="quote">&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Meanwhile,</span>
<span class="quote">&gt;&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt; a generic place.</span>
<span class="quote">&gt;&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt;&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I think selecting &#39;EFI&#39; is not the right approach here, especially</span>
<span class="quote">&gt; since EFI is implied by ACPI on that architecture. But selecting a</span>
<span class="quote">&gt; user configurable option like this is typically not recommended. Why</span>
<span class="quote">&gt; doesn&#39;t ACPI_APEI depend on ACPI?</span>

It does, ACPI_APEI is subsection of the main ACPI menu option, but I 
don&#39;t see that ACPI implies EFI in Kconfig.

Also, I agree with Ard, EFI should not be selected conditionally for 
ARM64 for ACPI_APEI.

We need EFI only for ARM64 so how about:
+       select HAVE_ACPI_APEI if (ACPI &amp;&amp; EFI)
in arch/arm64/Kconfig and leave ACPI_APEI as is?

Regards,
Tomasz
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131991">fu.wei@linaro.org</a> - April 5, 2016, 1:49 p.m.</div>
<pre class="content">
Hi Tomasz,

On 4 April 2016 at 16:32, Tomasz Nowicki &lt;tn@semihalf.com&gt; wrote:
<span class="quote">&gt; On 30.03.2016 09:05, Ard Biesheuvel wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 29 March 2016 at 09:44,  &lt;fu.wei@linaro.org&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; From: Tomasz Nowicki &lt;tomasz.nowicki@linaro.org&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This commit provides APEI arch-specific bits for aarch64</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Meanwhile,</span>
<span class="quote">&gt;&gt;&gt; (1)add a new subfunction &quot;hest_ia32_init&quot; for</span>
<span class="quote">&gt;&gt;&gt; &quot;acpi_disable_cmcff&quot; which is used by IA-32 Architecture</span>
<span class="quote">&gt;&gt;&gt; Corrected Machine Check (CMC).</span>
<span class="quote">&gt;&gt;&gt; (2)move HEST type (ACPI_HEST_TYPE_IA32_CORRECTED_CHECK) checking to</span>
<span class="quote">&gt;&gt;&gt; a generic place.</span>
<span class="quote">&gt;&gt;&gt; (3)select EFI when ACPI_APEI is set on ARM64,</span>
<span class="quote">&gt;&gt;&gt; because arch_apei_get_mem_attribute is using efi_mem_attributes on ARM64.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I think selecting &#39;EFI&#39; is not the right approach here, especially</span>
<span class="quote">&gt;&gt; since EFI is implied by ACPI on that architecture. But selecting a</span>
<span class="quote">&gt;&gt; user configurable option like this is typically not recommended. Why</span>
<span class="quote">&gt;&gt; doesn&#39;t ACPI_APEI depend on ACPI?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; It does, ACPI_APEI is subsection of the main ACPI menu option, but I don&#39;t</span>
<span class="quote">&gt; see that ACPI implies EFI in Kconfig.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Also, I agree with Ard, EFI should not be selected conditionally for ARM64</span>
<span class="quote">&gt; for ACPI_APEI.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; We need EFI only for ARM64 so how about:</span>
<span class="quote">&gt; +       select HAVE_ACPI_APEI if (ACPI &amp;&amp; EFI)</span>
<span class="quote">&gt; in arch/arm64/Kconfig and leave ACPI_APEI as is?</span>

I also agree with Ard, and I like &quot;select HAVE_ACPI_APEI if (ACPI &amp;&amp; EFI)&quot;

Thanks for your suggestion !! :-)
<span class="quote">
&gt;</span>
<span class="quote">&gt; Regards,</span>
<span class="quote">&gt; Tomasz</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig</span>
<span class="p_header">index 4f43622..08952ec 100644</span>
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -3,6 +3,7 @@</span> <span class="p_context"> config ARM64</span>
 	select ACPI_CCA_REQUIRED if ACPI
 	select ACPI_GENERIC_GSI if ACPI
 	select ACPI_REDUCED_HARDWARE_ONLY if ACPI
<span class="p_add">+	select HAVE_ACPI_APEI if ACPI</span>
 	select ARCH_HAS_DEVMEM_IS_ALLOWED
 	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 	select ARCH_HAS_ELF_RANDOMIZE
<span class="p_header">diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">index aee323b..4a6c959 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -17,6 +17,7 @@</span> <span class="p_context"></span>
 
 #include &lt;asm/cputype.h&gt;
 #include &lt;asm/smp_plat.h&gt;
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
 
 /* Macros for consistency checks of the GICC subtable of MADT */
 #define ACPI_MADT_GICC_LENGTH	\
<span class="p_chunk">@@ -110,7 +111,19 @@</span> <span class="p_context"> static inline const char *acpi_get_enable_method(int cpu)</span>
 }
 
 #ifdef	CONFIG_ACPI_APEI
<span class="p_add">+#define acpi_disable_cmcff 1</span>
 pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr);
<span class="p_del">-#endif</span>
 
<span class="p_add">+/*</span>
<span class="p_add">+ * This inline function is used in IRQ context (by GHES driver now),</span>
<span class="p_add">+ * see ghes_iounmap_irq and ghes_iounmap_nmi in drivers/acpi/apei/ghes.c.</span>
<span class="p_add">+ * The page mapped is reserved for firmware in kernel. This invalidate TLB</span>
<span class="p_add">+ * maintenance should be broadcasted safely to make sure that all the cores</span>
<span class="p_add">+ * will do TLB invalidation, then get the right pages.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void arch_apei_flush_tlb_one(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_ACPI_APEI */</span>
 #endif /*_ASM_ACPI_H*/
<span class="p_header">diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">index c280df6..ea3046e 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_chunk">@@ -24,9 +24,6 @@</span> <span class="p_context"> int arch_apei_enable_cmcff(struct acpi_hest_header *hest_hdr, void *data)</span>
 	struct acpi_hest_ia_corrected *cmc;
 	struct acpi_hest_ia_error_bank *mc_bank;
 
<span class="p_del">-	if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="p_del">-		return 0;</span>
<span class="p_del">-</span>
 	cmc = (struct acpi_hest_ia_corrected *)hest_hdr;
 	if (!cmc-&gt;enabled)
 		return 0;
<span class="p_header">diff --git a/drivers/acpi/apei/Kconfig b/drivers/acpi/apei/Kconfig</span>
<span class="p_header">index b0140c8..b037c5c 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/Kconfig</span>
<span class="p_header">+++ b/drivers/acpi/apei/Kconfig</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"> config ACPI_APEI</span>
 	bool &quot;ACPI Platform Error Interface (APEI)&quot;
 	select MISC_FILESYSTEMS
 	select PSTORE
<span class="p_add">+	select EFI if ARM64</span>
 	select UEFI_CPER
 	depends on HAVE_ACPI_APEI
 	help
<span class="p_header">diff --git a/drivers/acpi/apei/hest.c b/drivers/acpi/apei/hest.c</span>
<span class="p_header">index 20b3fcf..792a0d9 100644</span>
<span class="p_header">--- a/drivers/acpi/apei/hest.c</span>
<span class="p_header">+++ b/drivers/acpi/apei/hest.c</span>
<span class="p_chunk">@@ -123,7 +123,18 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(apei_hest_parse);</span>
  */
 static int __init hest_parse_cmc(struct acpi_hest_header *hest_hdr, void *data)
 {
<span class="p_del">-	return arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+	if (hest_hdr-&gt;type != ACPI_HEST_TYPE_IA32_CORRECTED_CHECK)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!acpi_disable_cmcff)</span>
<span class="p_add">+		return !arch_apei_enable_cmcff(hest_hdr, data);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int __init hest_ia32_init(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return apei_hest_parse(hest_parse_cmc, NULL);</span>
 }
 
 struct ghes_arr {
<span class="p_chunk">@@ -232,8 +243,9 @@</span> <span class="p_context"> void __init acpi_hest_init(void)</span>
 		goto err;
 	}
 
<span class="p_del">-	if (!acpi_disable_cmcff)</span>
<span class="p_del">-		apei_hest_parse(hest_parse_cmc, NULL);</span>
<span class="p_add">+	rc = hest_ia32_init();</span>
<span class="p_add">+	if (rc)</span>
<span class="p_add">+		goto err;</span>
 
 	if (!ghes_disable) {
 		rc = apei_hest_parse(hest_parse_ghes_count, &amp;ghes_count);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



