
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/3] swiotlb: prefix dma_to_phys and phys_to_dma functions - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/3] swiotlb: prefix dma_to_phys and phys_to_dma functions</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=145491">Sinan Kaya</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 18, 2016, 3 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;56EC1805.5060207@codeaurora.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8621031/mbox/"
   >mbox</a>
|
   <a href="/patch/8621031/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8621031/">/patch/8621031/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id C51399F6E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Mar 2016 15:00:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 25C9220361
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Mar 2016 15:00:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 291F720389
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 18 Mar 2016 15:00:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757412AbcCRPAd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 18 Mar 2016 11:00:33 -0400
Received: from smtp.codeaurora.org ([198.145.29.96]:46097 &quot;EHLO
	smtp.codeaurora.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1757066AbcCRPA3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 18 Mar 2016 11:00:29 -0400
Received: from smtp.codeaurora.org (localhost [127.0.0.1])
	by smtp.codeaurora.org (Postfix) with ESMTP id 3E32E6122F;
	Fri, 18 Mar 2016 15:00:28 +0000 (UTC)
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
	id 2E73E60DA8; Fri, 18 Mar 2016 15:00:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
Received: from [10.228.68.107] (global_nat1_iad_fw.qualcomm.com
	[129.46.232.65])
	(using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128
	bits)) (No client certificate requested)
	(Authenticated sender: okaya@smtp.codeaurora.org)
	by smtp.codeaurora.org (Postfix) with ESMTPSA id 2384760269;
	Fri, 18 Mar 2016 15:00:22 +0000 (UTC)
Subject: Re: [PATCH 2/3] swiotlb: prefix dma_to_phys and phys_to_dma
	functions
To: Robin Murphy &lt;robin.murphy@arm.com&gt;,
	linux-arm-kernel@lists.infradead.org, timur@codeaurora.org,
	cov@codeaurora.org, nwatters@codeaurora.org
References: &lt;1458252137-24497-1-git-send-email-okaya@codeaurora.org&gt;
	&lt;1458252137-24497-2-git-send-email-okaya@codeaurora.org&gt;
	&lt;56EBF09A.1060503@arm.com&gt;
Cc: linux-mips@linux-mips.org, linux-ia64@vger.kernel.org,
	linux-xtensa@linux-xtensa.org, Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, Max Filippov &lt;jcmvbkbc@gmail.com&gt;,
	Chris Metcalf &lt;cmetcalf@ezchip.com&gt;, Paul Mackerras &lt;paulus@samba.org&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Huacai Chen &lt;chenhc@lemote.com&gt;,
	Guan Xuetao &lt;gxt@mprc.pku.edu.cn&gt;,
	Marek Szyprowski &lt;m.szyprowski@samsung.com&gt;,
	Jisheng Zhang &lt;jszhang@marvell.com&gt;,
	Florian Fainelli &lt;f.fainelli@gmail.com&gt;,
	Russell King &lt;linux@arm.linux.org.uk&gt;,
	Aaro Koskinen &lt;aaro.koskinen@iki.fi&gt;,
	Michael Ellerman &lt;mpe@ellerman.id.au&gt;, x86@kernel.org,
	Ingo Molnar &lt;mingo@redhat.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Guenter Roeck &lt;linux@roeck-us.net&gt;, Fenghua Yu &lt;fenghua.yu@intel.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Akinobu Mita &lt;akinobu.mita@gmail.com&gt;,
	Bjorn Helgaas &lt;bhelgaas@google.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Valentin Rothberg &lt;valentinrothberg@gmail.com&gt;,
	Chris Zankel &lt;chris@zankel.net&gt;,
	Tony Luck &lt;tony.luck@intel.com&gt;, linux-pci@vger.kernel.org,
	linuxppc-dev@lists.ozlabs.org, Dean Nelson &lt;dnelson@redhat.com&gt;,
	linux-kernel@vger.kernel.org, Ralf Baechle &lt;ralf@linux-mips.org&gt;,
	&quot;Suthikulpanit, Suravee&quot; &lt;Suravee.Suthikulpanit@amd.com&gt;,
	Joe Perches &lt;joe@perches.com&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;
From: Sinan Kaya &lt;okaya@codeaurora.org&gt;
Message-ID: &lt;56EC1805.5060207@codeaurora.org&gt;
Date: Fri, 18 Mar 2016 11:00:21 -0400
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101
	Thunderbird/38.7.0
MIME-Version: 1.0
In-Reply-To: &lt;56EBF09A.1060503@arm.com&gt;
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145491">Sinan Kaya</a> - March 18, 2016, 3 p.m.</div>
<pre class="content">
On 3/18/2016 8:12 AM, Robin Murphy wrote:
<span class="quote">&gt; Since we know for sure that swiotlb_to_phys is a no-op on arm64, it might be cleaner to simply not reference it at all. I suppose we could have some private local wrappers, e.g.:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; #define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; to keep the intent of the code clear (and just in case anyone ever builds a system mad enough to warrant switching out that definition, but I&#39;d hope that never happens).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Otherwise, looks good - thanks for doing this!</span>

OK. I added this. Reviewed-by?

I&#39;m not happy to submit such a big patch for all different ARCHs. I couldn&#39;t
find a cleaner solution. I&#39;m willing to split this patch into multiple if there
is a better way.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7048">Konrad Rzeszutek Wilk</a> - March 28, 2016, 6:29 p.m.</div>
<pre class="content">
On Fri, Mar 18, 2016 at 11:00 AM, Sinan Kaya &lt;okaya@codeaurora.org&gt; wrote:
<span class="quote">&gt; On 3/18/2016 8:12 AM, Robin Murphy wrote:</span>
<span class="quote">&gt;&gt; Since we know for sure that swiotlb_to_phys is a no-op on arm64, it might be cleaner to simply not reference it at all. I suppose we could have some private local wrappers, e.g.:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; #define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; to keep the intent of the code clear (and just in case anyone ever builds a system mad enough to warrant switching out that definition, but I&#39;d hope that never happens).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Otherwise, looks good - thanks for doing this!</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; OK. I added this. Reviewed-by?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;m not happy to submit such a big patch for all different ARCHs. I couldn&#39;t</span>
<span class="quote">&gt; find a cleaner solution. I&#39;m willing to split this patch into multiple if there</span>
<span class="quote">&gt; is a better way.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index ada00c3..8c0f66b 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -29,6 +29,14 @@</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * If you are building a system without IOMMU, then you are using SWIOTLB</span>
<span class="quote">&gt; + * library. The ARM64 adaptation of this library does not support address</span>
<span class="quote">&gt; + * translation and it assumes that physical address = dma address for such</span>
<span class="quote">&gt; + * a use case. Please don&#39;t build a platform that violates this.</span>
<span class="quote">&gt; + */</span>

Why not just expand the ARM64 part to support address translation?
<span class="quote">
&gt; +#define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="quote">&gt; +</span>

Adding Stefano here.
<span class="quote">
&gt;  static pgprot_t __get_dma_pgprot(struct dma_attrs *attrs, pgprot_t prot,</span>
<span class="quote">&gt;                                  bool coherent)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -188,7 +196,7 @@ static void __dma_free(struct device *dev, size_t size,</span>
<span class="quote">&gt;                        void *vaddr, dma_addr_t dma_handle,</span>
<span class="quote">&gt;                        struct dma_attrs *attrs)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -       void *swiotlb_addr = phys_to_virt(swiotlb_dma_to_phys(dev, dma_handle));</span>
<span class="quote">&gt; +       void *swiotlb_addr = swiotlb_to_virt(dma_handle);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         size = PAGE_ALIGN(size);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -209,8 +217,7 @@ static dma_addr_t __swiotlb_map_page(struct device *dev, struct page *page,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         dev_addr = swiotlb_map_page(dev, page, offset, size, dir, attrs);</span>
<span class="quote">&gt;         if (!is_device_dma_coherent(dev))</span>
<span class="quote">&gt; -               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="quote">&gt; -                              size, dir);</span>
<span class="quote">&gt; +               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         return dev_addr;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -283,8 +290,7 @@ static void __swiotlb_sync_single_for_device(struct device *dev,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;         swiotlb_sync_single_for_device(dev, dev_addr, size, dir);</span>
<span class="quote">&gt;         if (!is_device_dma_coherent(dev))</span>
<span class="quote">&gt; -               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="quote">&gt; -                              size, dir);</span>
<span class="quote">&gt; +               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; Sinan Kaya</span>
<span class="quote">&gt; Qualcomm Technologies, Inc. on behalf of Qualcomm Innovation Center, Inc.</span>
<span class="quote">&gt; Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=146571">Stefano Stabellini</a> - March 29, 2016, 12:44 p.m.</div>
<pre class="content">
On Mon, 28 Mar 2016, Konrad Rzeszutek Wilk wrote:
<span class="quote">&gt; On Fri, Mar 18, 2016 at 11:00 AM, Sinan Kaya &lt;okaya@codeaurora.org&gt; wrote:</span>
<span class="quote">&gt; &gt; On 3/18/2016 8:12 AM, Robin Murphy wrote:</span>
<span class="quote">&gt; &gt;&gt; Since we know for sure that swiotlb_to_phys is a no-op on arm64, it might be cleaner to simply not reference it at all. I suppose we could have some private local wrappers, e.g.:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; #define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; to keep the intent of the code clear (and just in case anyone ever builds a system mad enough to warrant switching out that definition, but I&#39;d hope that never happens).</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Otherwise, looks good - thanks for doing this!</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; OK. I added this. Reviewed-by?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I&#39;m not happy to submit such a big patch for all different ARCHs. I couldn&#39;t</span>
<span class="quote">&gt; &gt; find a cleaner solution. I&#39;m willing to split this patch into multiple if there</span>
<span class="quote">&gt; &gt; is a better way.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; index ada00c3..8c0f66b 100644</span>
<span class="quote">&gt; &gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; @@ -29,6 +29,14 @@</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +/*</span>
<span class="quote">&gt; &gt; + * If you are building a system without IOMMU, then you are using SWIOTLB</span>
<span class="quote">&gt; &gt; + * library. The ARM64 adaptation of this library does not support address</span>
<span class="quote">&gt; &gt; + * translation and it assumes that physical address = dma address for such</span>
<span class="quote">&gt; &gt; + * a use case. Please don&#39;t build a platform that violates this.</span>
<span class="quote">&gt; &gt; + */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why not just expand the ARM64 part to support address translation?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; &gt; +#define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Adding Stefano here.</span>

Could you please explain what is the problem that you are trying to
solve? In other words, what is the issue with assuming that physical
address = dma address (and the current dma_to_phys and phys_to_dma
static inlines) if no arm64 platforms violate it? That&#39;s pretty much
what is done on x86 too (without X86_DMA_REMAP).

If you want to make sure that the assumption is not violated, you can
introduce a boot time check or a BUG_ON somewhere.

If there is an arm64 platform with phys_addr != dma_addr, we need proper
support for it. In fact even if there is an IOMMU on that platform, when
running Xen on it, the IOMMU would be used by the hypervisor and Linux
would still end up without it, using the swiotlb.
<span class="quote">
 
&gt; &gt;  static pgprot_t __get_dma_pgprot(struct dma_attrs *attrs, pgprot_t prot,</span>
<span class="quote">&gt; &gt;                                  bool coherent)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; @@ -188,7 +196,7 @@ static void __dma_free(struct device *dev, size_t size,</span>
<span class="quote">&gt; &gt;                        void *vaddr, dma_addr_t dma_handle,</span>
<span class="quote">&gt; &gt;                        struct dma_attrs *attrs)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt; -       void *swiotlb_addr = phys_to_virt(swiotlb_dma_to_phys(dev, dma_handle));</span>
<span class="quote">&gt; &gt; +       void *swiotlb_addr = swiotlb_to_virt(dma_handle);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;         size = PAGE_ALIGN(size);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; @@ -209,8 +217,7 @@ static dma_addr_t __swiotlb_map_page(struct device *dev, struct page *page,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;         dev_addr = swiotlb_map_page(dev, page, offset, size, dir, attrs);</span>
<span class="quote">&gt; &gt;         if (!is_device_dma_coherent(dev))</span>
<span class="quote">&gt; &gt; -               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="quote">&gt; &gt; -                              size, dir);</span>
<span class="quote">&gt; &gt; +               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;         return dev_addr;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; @@ -283,8 +290,7 @@ static void __swiotlb_sync_single_for_device(struct device *dev,</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;         swiotlb_sync_single_for_device(dev, dev_addr, size, dir);</span>
<span class="quote">&gt; &gt;         if (!is_device_dma_coherent(dev))</span>
<span class="quote">&gt; &gt; -               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="quote">&gt; &gt; -                              size, dir);</span>
<span class="quote">&gt; &gt; +               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; --</span>
<span class="quote">&gt; &gt; Sinan Kaya</span>
<span class="quote">&gt; &gt; Qualcomm Technologies, Inc. on behalf of Qualcomm Innovation Center, Inc.</span>
<span class="quote">&gt; &gt; Qualcomm Innovation Center, Inc. is a member of Code Aurora Forum, a Linux Foundation Collaborative Project</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=145491">Sinan Kaya</a> - March 29, 2016, 12:57 p.m.</div>
<pre class="content">
On 3/29/2016 8:44 AM, Stefano Stabellini wrote:
<span class="quote">&gt; Could you please explain what is the problem that you are trying to</span>
<span class="quote">&gt; solve? In other words, what is the issue with assuming that physical</span>
<span class="quote">&gt; address = dma address (and the current dma_to_phys and phys_to_dma</span>
<span class="quote">&gt; static inlines) if no arm64 platforms violate it? That&#39;s pretty much</span>
<span class="quote">&gt; what is done on x86 too (without X86_DMA_REMAP).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If you want to make sure that the assumption is not violated, you can</span>
<span class="quote">&gt; introduce a boot time check or a BUG_ON somewhere.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If there is an arm64 platform with phys_addr != dma_addr, we need proper</span>
<span class="quote">&gt; support for it. In fact even if there is an IOMMU on that platform, when</span>
<span class="quote">&gt; running Xen on it, the IOMMU would be used by the hypervisor and Linux</span>
<span class="quote">&gt; would still end up without it, using the swiotlb.</span>


The problem is that device drivers are trying to use dma_to_phys and phys_to_dma
APIs to do address translation even though these two API do not exist in DMA mapping
layer. (see patch #1 and I made the same mistake in my HIDMA code)

Especially, when a device is behind an IOMMU; the DMA addresses are not equal
to physical addresses. Usage of dma_to_phys causes a crash on the system.

I&#39;m trying to prefix the dma_to_phys and phys_to_dma API with swiotlb so that
we know what it is intended for and usage of these API in drivers need to be
discouraged in the future during code reviews.

Since I renamed the API, Robin Murphy made a suggestion to convert this 

phys_to_virt(swiotlb_dma_to_phys(dev, dma_handle))

to this

#define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))

swiotlb_to_virt(dma_handle)

just to reduce code clutter since we know swiotlb_dma_to_phys returns phys already
for ARM64 architecture.

I think we can do this exercise later. I&#39;ll undo this change for the moment. 
Let&#39;s focus on the API rename. 

I don&#39;t want this general purpose dma_to_phys API returning phys=dma value. This is
not correct.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - March 29, 2016, 7:32 p.m.</div>
<pre class="content">
On Monday 28 March 2016 14:29:29 Konrad Rzeszutek Wilk wrote:
<span class="quote">&gt; &gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; index ada00c3..8c0f66b 100644</span>
<span class="quote">&gt; &gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; &gt; @@ -29,6 +29,14 @@</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; +/*</span>
<span class="quote">&gt; &gt; + * If you are building a system without IOMMU, then you are using SWIOTLB</span>
<span class="quote">&gt; &gt; + * library. The ARM64 adaptation of this library does not support address</span>
<span class="quote">&gt; &gt; + * translation and it assumes that physical address = dma address for such</span>
<span class="quote">&gt; &gt; + * a use case. Please don&#39;t build a platform that violates this.</span>
<span class="quote">&gt; &gt; + */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why not just expand the ARM64 part to support address translation?</span>

Because so far all hardware we have is relatively sane. We only
need to implement this if someone accidentally puts their DMA
space at the wrong address.

There is at least one platform that could in theory use this because
their RAM starts at an address that is outside of the reach of 32-bit
devices, and a static IOMMU mapping (created by firmware) could be
used to map the start of RAM into DMA address zero, to avoid having
to use an IOMMU all the time, but it was considered not worth the
effort to implement that.

	Arnd
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index ada00c3..8c0f66b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -29,6 +29,14 @@</span> <span class="p_context"></span>

 #include &lt;asm/cacheflush.h&gt;

<span class="p_add">+/*</span>
<span class="p_add">+ * If you are building a system without IOMMU, then you are using SWIOTLB</span>
<span class="p_add">+ * library. The ARM64 adaptation of this library does not support address</span>
<span class="p_add">+ * translation and it assumes that physical address = dma address for such</span>
<span class="p_add">+ * a use case. Please don&#39;t build a platform that violates this.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define swiotlb_to_virt(addr) phys_to_virt((phys_addr_t)(addr))</span>
<span class="p_add">+</span>
 static pgprot_t __get_dma_pgprot(struct dma_attrs *attrs, pgprot_t prot,
                                 bool coherent)
 {
<span class="p_chunk">@@ -188,7 +196,7 @@</span> <span class="p_context"> static void __dma_free(struct device *dev, size_t size,</span>
                       void *vaddr, dma_addr_t dma_handle,
                       struct dma_attrs *attrs)
 {
<span class="p_del">-       void *swiotlb_addr = phys_to_virt(swiotlb_dma_to_phys(dev, dma_handle));</span>
<span class="p_add">+       void *swiotlb_addr = swiotlb_to_virt(dma_handle);</span>

        size = PAGE_ALIGN(size);

<span class="p_chunk">@@ -209,8 +217,7 @@</span> <span class="p_context"> static dma_addr_t __swiotlb_map_page(struct device *dev, struct page *page,</span>

        dev_addr = swiotlb_map_page(dev, page, offset, size, dir, attrs);
        if (!is_device_dma_coherent(dev))
<span class="p_del">-               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="p_del">-                              size, dir);</span>
<span class="p_add">+               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>

        return dev_addr;
 }
<span class="p_chunk">@@ -283,8 +290,7 @@</span> <span class="p_context"> static void __swiotlb_sync_single_for_device(struct device *dev,</span>
 {
        swiotlb_sync_single_for_device(dev, dev_addr, size, dir);
        if (!is_device_dma_coherent(dev))
<span class="p_del">-               __dma_map_area(phys_to_virt(swiotlb_dma_to_phys(dev, dev_addr)),</span>
<span class="p_del">-                              size, dir);</span>
<span class="p_add">+               __dma_map_area(swiotlb_to_virt(dev_addr), size, dir);</span>
 }



</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



