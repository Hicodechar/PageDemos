
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[15/24] x86/mm: Allow flushing for future ASID switches - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [15/24] x86/mm: Allow flushing for future ASID switches</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2017, 3:40 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171130154053.6b7hs4epes55xv7a@hirez.programming.kicks-ass.net&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10085121/mbox/"
   >mbox</a>
|
   <a href="/patch/10085121/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10085121/">/patch/10085121/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8E5A660311 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 15:41:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 733D72A1AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 15:41:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 67B992A1AD; Thu, 30 Nov 2017 15:41:13 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 54A2F2A1AB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 15:41:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752255AbdK3PlH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Nov 2017 10:41:07 -0500
Received: from merlin.infradead.org ([205.233.59.134]:37402 &quot;EHLO
	merlin.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751443AbdK3PlF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Nov 2017 10:41:05 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=merlin.20170209;
	h=In-Reply-To:Content-Type:MIME-Version:
	References:Message-ID:Subject:Cc:To:From:Date:Sender:Reply-To:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=IYVTECOjLgTFhE2oZK37Kimp52CFzehM1ZzcxBL9iOE=;
	b=or5O6uNqaaAoyUeNTy0wMduuD
	O71w/Z5n4hok0ftGXDWHiaOykGStYdEHgsJQisgxVSU01iMs3AOswiNnBRKOkTDt1EwUmoDqKE2BA
	9bv0dAr1j0waH4LRZtz9OKbrBnjnDg8cOMxFnTUGaNyEOm4orURfVf9VKEr9zvyDYU1hEG92J9R1t
	a0TKQtZqSj51e0r8oHaxp7B8aPno4SRTM5GMgDnvRhxb9tfGYyZgrc+nfmoKVgKwqaECdV/JSMhXh
	38PrWvLACFn/RMpB1myUa8oechGB4SCbNRwR4QgvtytnDUg4ipEm2I+1UDSE3YUBHitFuJLjp6erA
	qrRqPpEsA==;
Received: from j217100.upc-j.chello.nl ([24.132.217.100]
	helo=hirez.programming.kicks-ass.net)
	by merlin.infradead.org with esmtpsa (Exim 4.87 #1 (Red Hat Linux))
	id 1eKQxL-0001Wi-Ak; Thu, 30 Nov 2017 15:40:55 +0000
Received: by hirez.programming.kicks-ass.net (Postfix, from userid 1000)
	id 55703200FB5A7; Thu, 30 Nov 2017 16:40:53 +0100 (CET)
Date: Thu, 30 Nov 2017 16:40:53 +0100
From: Peter Zijlstra &lt;peterz@infradead.org&gt;
To: Andy Lutomirski &lt;luto@amacapital.net&gt;
Cc: Ingo Molnar &lt;mingo@kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: Re: [PATCH 15/24] x86/mm: Allow flushing for future ASID switches
Message-ID: &lt;20171130154053.6b7hs4epes55xv7a@hirez.programming.kicks-ass.net&gt;
References: &lt;20171127104923.14378-1-mingo@kernel.org&gt;
	&lt;20171127104923.14378-16-mingo@kernel.org&gt;
	&lt;CALCETrUFfpDLEP78K9V4GsbHWS5=M6k8ndv0p+R0ud0=xxbaMg@mail.gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;CALCETrUFfpDLEP78K9V4GsbHWS5=M6k8ndv0p+R0ud0=xxbaMg@mail.gmail.com&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 30, 2017, 3:40 p.m.</div>
<pre class="content">
On Mon, Nov 27, 2017 at 09:16:19PM -0800, Andy Lutomirski wrote:
<span class="quote">&gt; On Mon, Nov 27, 2017 at 2:49 AM, Ingo Molnar &lt;mingo@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt; From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; If changing the page tables in such a way that an invalidation of</span>
<span class="quote">&gt; &gt; all contexts (aka. PCIDs / ASIDs) is required, they can be</span>
<span class="quote">&gt; &gt; actively invalidated by:</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  1. INVPCID for each PCID (works for single pages too).</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  2. Load CR3 with each PCID without the NOFLUSH bit set</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;  3. Load CR3 with the NOFLUSH bit set for each and do INVLPG for each address.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; But, none of these are really feasible since there are ~6 ASIDs (12 with</span>
<span class="quote">&gt; &gt; KAISER) at the time that invalidation is required.  Instead of</span>
<span class="quote">&gt; &gt; actively invalidating them, invalidate the *current* context and</span>
<span class="quote">&gt; &gt; also mark the cpu_tlbstate _quickly_ to indicate future invalidation</span>
<span class="quote">&gt; &gt; to be required.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; At the next context-switch, look for this indicator</span>
<span class="quote">&gt; &gt; (&#39;all_other_ctxs_invalid&#39; being set) invalidate all of the</span>
<span class="quote">&gt; &gt; cpu_tlbstate.ctxs[] entries.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This ensures that any future context switches will do a full flush</span>
<span class="quote">&gt; &gt; of the TLB, picking up the previous changes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; NAK.</span>

So I can&#39;t say I&#39;m a fan of this patch either, but I tried really hard
to get rid of it, I can&#39;t really come up with anything better, see
below.
<span class="quote">
&gt; We need to split up __flush_tlb_one() into __flush_tlb_one() and</span>
<span class="quote">&gt; __flush_tlb_one_kernel().</span>

I prefer __flush_tlb_kernel_one() -- given we already
flush_tlb_kernel_range().

So both __set_pte_vaddr() and __early_set_fixmap() are about setting up
fixmap and would need to flush world. But this seems to be mostly __init
code.

The kmmio one confuses me, I don&#39;t see how that is correct to just flush
the local CPU map.

tlb_uv appears to be about user mappings.

The rest is about pure kernel maps afaict.
<span class="quote">
&gt; We&#39;ve gotten away with having a single</span>
<span class="quote">&gt; function for both this long because we&#39;ve never had PCID on and</span>
<span class="quote">&gt; nonglobal kernel mappings around.  So we&#39;re busted starting with</span>
<span class="quote">&gt; &quot;x86/mm/kaiser: Disable global pages by default with KAISER&quot;, which</span>
<span class="quote">&gt; means that we have a potential corruption issue affecting anyone who</span>
<span class="quote">&gt; tries to bisect the series.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Then we need to make the kernel variant do something sane (presumably</span>
<span class="quote">&gt; just call __flush_tlb_all if we have PCID &amp;&amp; !PGE).</span>

(We don&#39;t support PCID &amp;&amp; !PGE)

__flush_tlb_all() if PCID, because it needs to flush the thing from all
kernel ASIDs, which this patch -- however nasty -- achieves best.




---
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Nov. 30, 2017, 3:42 p.m.</div>
<pre class="content">
On Thu, Nov 30, 2017 at 7:40 AM, Peter Zijlstra &lt;peterz@infradead.org&gt; wrote:
<span class="quote">&gt; On Mon, Nov 27, 2017 at 09:16:19PM -0800, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; We&#39;ve gotten away with having a single</span>
<span class="quote">&gt;&gt; function for both this long because we&#39;ve never had PCID on and</span>
<span class="quote">&gt;&gt; nonglobal kernel mappings around.  So we&#39;re busted starting with</span>
<span class="quote">&gt;&gt; &quot;x86/mm/kaiser: Disable global pages by default with KAISER&quot;, which</span>
<span class="quote">&gt;&gt; means that we have a potential corruption issue affecting anyone who</span>
<span class="quote">&gt;&gt; tries to bisect the series.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Then we need to make the kernel variant do something sane (presumably</span>
<span class="quote">&gt;&gt; just call __flush_tlb_all if we have PCID &amp;&amp; !PGE).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; (We don&#39;t support PCID &amp;&amp; !PGE)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; __flush_tlb_all() if PCID, because it needs to flush the thing from all</span>
<span class="quote">&gt; kernel ASIDs, which this patch -- however nasty -- achieves best.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>

Brain fart there.  What I meant was: the old code was wrong if PCID
was on and the page being flushed wasn&#39;t GLOBAL.  Which is what KAISER
dies.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_32.h b/arch/x86/include/asm/pgtable_32.h</span>
<span class="p_header">index e67c0620aec2..a8e90f545495 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_32.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_32.h</span>
<span class="p_chunk">@@ -61,7 +61,7 @@</span> <span class="p_context"> void paging_init(void);</span>
 #define kpte_clear_flush(ptep, vaddr)		\
 do {						\
 	pte_clear(&amp;init_mm, (vaddr), (ptep));	\
<span class="p_del">-	__flush_tlb_one((vaddr));		\</span>
<span class="p_add">+	__flush_tlb_kernel_one((vaddr));	\</span>
 } while (0)
 
 #endif /* !__ASSEMBLY__ */
<span class="p_header">diff --git a/arch/x86/kernel/acpi/apei.c b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">index ea3046e0b0cf..0e430d5758ea 100644</span>
<span class="p_header">--- a/arch/x86/kernel/acpi/apei.c</span>
<span class="p_header">+++ b/arch/x86/kernel/acpi/apei.c</span>
<span class="p_chunk">@@ -55,5 +55,5 @@</span> <span class="p_context"> void arch_apei_report_mem_error(int sev, struct cper_sec_mem_err *mem_err)</span>
 
 void arch_apei_flush_tlb_one(unsigned long addr)
 {
<span class="p_del">-	__flush_tlb_one(addr);</span>
<span class="p_add">+	__flush_tlb_kernel_one(addr);</span>
 }
<span class="p_header">diff --git a/arch/x86/mm/kmemcheck/kmemcheck.c b/arch/x86/mm/kmemcheck/kmemcheck.c</span>
<span class="p_header">index 4515bae36bbe..202106fc0a64 100644</span>
<span class="p_header">--- a/arch/x86/mm/kmemcheck/kmemcheck.c</span>
<span class="p_header">+++ b/arch/x86/mm/kmemcheck/kmemcheck.c</span>
<span class="p_chunk">@@ -101,7 +101,7 @@</span> <span class="p_context"> int kmemcheck_show_addr(unsigned long address)</span>
 		return 0;
 
 	set_pte(pte, __pte(pte_val(*pte) | _PAGE_PRESENT));
<span class="p_del">-	__flush_tlb_one(address);</span>
<span class="p_add">+	__flush_tlb_kernel_one(address);</span>
 	return 1;
 }
 
<span class="p_chunk">@@ -114,7 +114,7 @@</span> <span class="p_context"> int kmemcheck_hide_addr(unsigned long address)</span>
 		return 0;
 
 	set_pte(pte, __pte(pte_val(*pte) &amp; ~_PAGE_PRESENT));
<span class="p_del">-	__flush_tlb_one(address);</span>
<span class="p_add">+	__flush_tlb_kernel_one(address);</span>
 	return 1;
 }
 
<span class="p_chunk">@@ -277,7 +277,7 @@</span> <span class="p_context"> void kmemcheck_show_pages(struct page *p, unsigned int n)</span>
 
 		set_pte(pte, __pte(pte_val(*pte) | _PAGE_PRESENT));
 		set_pte(pte, __pte(pte_val(*pte) &amp; ~_PAGE_HIDDEN));
<span class="p_del">-		__flush_tlb_one(address);</span>
<span class="p_add">+		__flush_tlb_kernel_one(address);</span>
 	}
 }
 
<span class="p_chunk">@@ -303,7 +303,7 @@</span> <span class="p_context"> void kmemcheck_hide_pages(struct page *p, unsigned int n)</span>
 
 		set_pte(pte, __pte(pte_val(*pte) &amp; ~_PAGE_PRESENT));
 		set_pte(pte, __pte(pte_val(*pte) | _PAGE_HIDDEN));
<span class="p_del">-		__flush_tlb_one(address);</span>
<span class="p_add">+		__flush_tlb_kernel_one(address);</span>
 	}
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



