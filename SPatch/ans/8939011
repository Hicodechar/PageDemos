
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] mm, oom_reaper: do not mmput synchronously from the oom reaper context - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] mm, oom_reaper: do not mmput synchronously from the oom reaper context</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 26, 2016, 2:04 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1461679470-8364-3-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8939011/mbox/"
   >mbox</a>
|
   <a href="/patch/8939011/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8939011/">/patch/8939011/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id EDAFF9F1D3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Apr 2016 14:05:04 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 359772013A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Apr 2016 14:05:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 4F8F720138
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Apr 2016 14:05:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752379AbcDZOEt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 26 Apr 2016 10:04:49 -0400
Received: from mail-wm0-f68.google.com ([74.125.82.68]:35899 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752300AbcDZOEj (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 26 Apr 2016 10:04:39 -0400
Received: by mail-wm0-f68.google.com with SMTP id w143so4729651wmw.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 26 Apr 2016 07:04:38 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=i9w4zo/LijeWNHA/OVkZwhNOlNPb70H+Tpk16CKXSYI=;
	b=gp3vjdWnezQn21vPm2QqdfQEjb97ycMnUcyS61rbvOrKCLxzYrFt/yxFnEOZTsULd2
	EPXerb/I4qg52lvPD89spiZlV2lkSTbzTZUdelW/kr5moGa2RkuX3lMh81c2G1LsBnQg
	Gciy1p0s1YuDUdTqeUYvLGwuXpNGn93FRGzICXVYmIeJtkM8f7jO+hRkxhEopihlBGtW
	lhoO2UOsyRHFF2Z9UirU9uLWtHFKbMzW5vP7u69b11w5IincmZyelwdWdtHxKD7ANJyu
	VjLV++q251HJbqVkuDwYpOBGc3QAxlXnRUO7H3slpVtSomgzDdwh6PT4IoJ+3aaO54Ct
	Z7gQ==
X-Gm-Message-State: AOPr4FW2lSIRwyNcKkg+n0KT95iCXfFipFn6zru35orGK04vYl6PPl2j0Z06vmlj8WJ7ZQ==
X-Received: by 10.28.97.9 with SMTP id v9mr3786429wmb.45.1461679478163;
	Tue, 26 Apr 2016 07:04:38 -0700 (PDT)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	s10sm2982189wjp.3.2016.04.26.07.04.37
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 26 Apr 2016 07:04:37 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 2/2] mm,
	oom_reaper: do not mmput synchronously from the oom reaper context
Date: Tue, 26 Apr 2016 16:04:30 +0200
Message-Id: &lt;1461679470-8364-3-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.8.0.rc3
In-Reply-To: &lt;1461679470-8364-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1461679470-8364-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - April 26, 2016, 2:04 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Tetsuo has properly noted that mmput slow path might get blocked waiting
for another party (e.g. exit_aio waits for an IO). If that happens the
oom_reaper would be put out of the way and will not be able to process
next oom victim. We should strive for making this context as reliable
and independent on other subsystems as much as possible.

Introduce mmput_async which will perform the slow path from an async
(WQ) context. This will delay the operation but that shouldn&#39;t be a
problem because the oom_reaper has reclaimed the victim&#39;s address space
for most cases as much as possible and the remaining context shouldn&#39;t
bind too much memory anymore. The only exception is when mmap_sem
trylock has failed which shouldn&#39;t happen too often.

The issue is only theoretical but not impossible.

Reported-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/mm_types.h |  1 +
 include/linux/sched.h    |  5 +++++
 kernel/fork.c            | 50 +++++++++++++++++++++++++++++++++---------------
 mm/oom_kill.c            |  8 ++++++--
 4 files changed, 47 insertions(+), 17 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - April 26, 2016, 2:18 p.m.</div>
<pre class="content">
Hi,

[auto build test ERROR on next-20160426]
[cannot apply to tip/sched/core v4.6-rc5 v4.6-rc4 v4.6-rc3 v4.6-rc5]
[if your patch is applied to the wrong git tree, please drop us a note to help improving the system]

url:    https://github.com/0day-ci/linux/commits/Michal-Hocko/mm-oom_reaper-hide-oom-reaped-tasks-from-OOM-killer-more-carefully/20160426-220841
config: x86_64-randconfig-x010-201617 (attached as .config)
compiler: 
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All errors (new ones prefixed by &gt;&gt;):

   In file included from include/linux/sched.h:27:0,
                    from include/linux/oom.h:5,
                    from mm/oom_kill.c:20:
<span class="quote">&gt;&gt; include/linux/mm_types.h:516:21: error: field &#39;async_put_work&#39; has incomplete type</span>
     struct work_struct async_put_work;
                        ^

vim +/async_put_work +516 include/linux/mm_types.h

   510		/* address of the bounds directory */
   511		void __user *bd_addr;
   512	#endif
   513	#ifdef CONFIG_HUGETLB_PAGE
   514		atomic_long_t hugetlb_usage;
   515	#endif
<span class="quote"> &gt; 516		struct work_struct async_put_work;</span>
   517	};
   518	
   519	static inline void mm_init_cpumask(struct mm_struct *mm)

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index bf4f3ac5110c..f4f477244679 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -513,6 +513,7 @@</span> <span class="p_context"> struct mm_struct {</span>
 #ifdef CONFIG_HUGETLB_PAGE
 	atomic_long_t hugetlb_usage;
 #endif
<span class="p_add">+	struct work_struct async_put_work;</span>
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
<span class="p_header">diff --git a/include/linux/sched.h b/include/linux/sched.h</span>
<span class="p_header">index 7bd0fa9db199..df8778e72211 100644</span>
<span class="p_header">--- a/include/linux/sched.h</span>
<span class="p_header">+++ b/include/linux/sched.h</span>
<span class="p_chunk">@@ -2604,6 +2604,11 @@</span> <span class="p_context"> static inline void mmdrop(struct mm_struct * mm)</span>
 
 /* mmput gets rid of the mappings and all user-space */
 extern void mmput(struct mm_struct *);
<span class="p_add">+/* same as above but performs the slow path from the async kontext. Can</span>
<span class="p_add">+ * be called from the atomic context as well</span>
<span class="p_add">+ */</span>
<span class="p_add">+extern void mmput_async(struct mm_struct *);</span>
<span class="p_add">+</span>
 /* Grab a reference to a task&#39;s mm, if it is not already going away */
 extern struct mm_struct *get_task_mm(struct task_struct *task);
 /*
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index accb7221d547..10b0f771d795 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -696,6 +696,26 @@</span> <span class="p_context"> void __mmdrop(struct mm_struct *mm)</span>
 }
 EXPORT_SYMBOL_GPL(__mmdrop);
 
<span class="p_add">+static inline void __mmput(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	VM_BUG_ON(atomic_read(&amp;mm-&gt;mm_users));</span>
<span class="p_add">+</span>
<span class="p_add">+	uprobe_clear_state(mm);</span>
<span class="p_add">+	exit_aio(mm);</span>
<span class="p_add">+	ksm_exit(mm);</span>
<span class="p_add">+	khugepaged_exit(mm); /* must run before exit_mmap */</span>
<span class="p_add">+	exit_mmap(mm);</span>
<span class="p_add">+	set_mm_exe_file(mm, NULL);</span>
<span class="p_add">+	if (!list_empty(&amp;mm-&gt;mmlist)) {</span>
<span class="p_add">+		spin_lock(&amp;mmlist_lock);</span>
<span class="p_add">+		list_del(&amp;mm-&gt;mmlist);</span>
<span class="p_add">+		spin_unlock(&amp;mmlist_lock);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (mm-&gt;binfmt)</span>
<span class="p_add">+		module_put(mm-&gt;binfmt-&gt;module);</span>
<span class="p_add">+	mmdrop(mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Decrement the use count and release all resources for an mm.
  */
<span class="p_chunk">@@ -703,24 +723,24 @@</span> <span class="p_context"> void mmput(struct mm_struct *mm)</span>
 {
 	might_sleep();
 
<span class="p_add">+	if (atomic_dec_and_test(&amp;mm-&gt;mm_users))</span>
<span class="p_add">+		__mmput(mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(mmput);</span>
<span class="p_add">+</span>
<span class="p_add">+static void mmput_async_fn(struct work_struct *work)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = container_of(work, struct mm_struct, async_put_work);</span>
<span class="p_add">+	__mmput(mm);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void mmput_async(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
 	if (atomic_dec_and_test(&amp;mm-&gt;mm_users)) {
<span class="p_del">-		uprobe_clear_state(mm);</span>
<span class="p_del">-		exit_aio(mm);</span>
<span class="p_del">-		ksm_exit(mm);</span>
<span class="p_del">-		khugepaged_exit(mm); /* must run before exit_mmap */</span>
<span class="p_del">-		exit_mmap(mm);</span>
<span class="p_del">-		set_mm_exe_file(mm, NULL);</span>
<span class="p_del">-		if (!list_empty(&amp;mm-&gt;mmlist)) {</span>
<span class="p_del">-			spin_lock(&amp;mmlist_lock);</span>
<span class="p_del">-			list_del(&amp;mm-&gt;mmlist);</span>
<span class="p_del">-			spin_unlock(&amp;mmlist_lock);</span>
<span class="p_del">-		}</span>
<span class="p_del">-		if (mm-&gt;binfmt)</span>
<span class="p_del">-			module_put(mm-&gt;binfmt-&gt;module);</span>
<span class="p_del">-		mmdrop(mm);</span>
<span class="p_add">+		INIT_WORK(&amp;mm-&gt;async_put_work, mmput_async_fn);</span>
<span class="p_add">+		schedule_work(&amp;mm-&gt;async_put_work);</span>
 	}
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(mmput);</span>
 
 /**
  * set_mm_exe_file - change a reference to the mm&#39;s executable file
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index c0376efa79ec..c0e37dd1422f 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -446,7 +446,6 @@</span> <span class="p_context"> static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);</span>
 static struct task_struct *oom_reaper_list;
 static DEFINE_SPINLOCK(oom_reaper_lock);
 
<span class="p_del">-</span>
 static bool __oom_reap_task(struct task_struct *tsk)
 {
 	struct mmu_gather tlb;
<span class="p_chunk">@@ -520,7 +519,12 @@</span> <span class="p_context"> static bool __oom_reap_task(struct task_struct *tsk)</span>
 	 */
 	set_bit(MMF_OOM_REAPED, &amp;mm-&gt;flags);
 out:
<span class="p_del">-	mmput(mm);</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Drop our reference but make sure the mmput slow path is called from a</span>
<span class="p_add">+	 * different context because we shouldn&#39;t risk we get stuck there and</span>
<span class="p_add">+	 * put the oom_reaper out of the way.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	mmput_async(mm);</span>
 	return ret;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



