
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,37/38] sparc64: Fix find_node warning if numa node cannot be found - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,37/38] sparc64: Fix find_node warning if numa node cannot be found</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 13, 2016, 7:53 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;d68ed46bd6c06585e61556d4a7171d8ea198101c.1481658746.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9473075/mbox/"
   >mbox</a>
|
   <a href="/patch/9473075/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9473075/">/patch/9473075/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DC46360476 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Dec 2016 19:54:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D008B2868A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Dec 2016 19:54:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C1E6C2868C; Tue, 13 Dec 2016 19:54:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 41D512868A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Dec 2016 19:54:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933461AbcLMTyi (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 13 Dec 2016 14:54:38 -0500
Received: from mx2.suse.de ([195.135.220.15]:54228 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S935309AbcLMTxZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 13 Dec 2016 14:53:25 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 022A9ACD7;
	Tue, 13 Dec 2016 19:53:24 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org, Thomas Tai &lt;thomas.tai@oracle.com&gt;,
	&quot;David S . Miller&quot; &lt;davem@davemloft.net&gt;, Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 37/38] sparc64: Fix find_node warning if numa node
	cannot be found
Date: Tue, 13 Dec 2016 20:53:03 +0100
Message-Id: &lt;d68ed46bd6c06585e61556d4a7171d8ea198101c.1481658746.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;15034b96ec06ee859b67c6cd4e3be569a4ef286b.1481658746.git.jslaby@suse.cz&gt;
References: &lt;15034b96ec06ee859b67c6cd4e3be569a4ef286b.1481658746.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1481658746.git.jslaby@suse.cz&gt;
References: &lt;cover.1481658746.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Dec. 13, 2016, 7:53 p.m.</div>
<pre class="content">
<span class="from">From: Thomas Tai &lt;thomas.tai@oracle.com&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

[ Upstream commit 74a5ed5c4f692df2ff0a2313ea71e81243525519 ]

When booting up LDOM, find_node() warns that a physical address
doesn&#39;t match a NUMA node.

WARNING: CPU: 0 PID: 0 at arch/sparc/mm/init_64.c:835
find_node+0xf4/0x120 find_node: A physical address doesn&#39;t
match a NUMA node rule. Some physical memory will be
owned by node 0.Modules linked in:

CPU: 0 PID: 0 Comm: swapper Not tainted 4.9.0-rc3 #4
Call Trace:
 [0000000000468ba0] __warn+0xc0/0xe0
 [0000000000468c74] warn_slowpath_fmt+0x34/0x60
 [00000000004592f4] find_node+0xf4/0x120
 [0000000000dd0774] add_node_ranges+0x38/0xe4
 [0000000000dd0b1c] numa_parse_mdesc+0x268/0x2e4
 [0000000000dd0e9c] bootmem_init+0xb8/0x160
 [0000000000dd174c] paging_init+0x808/0x8fc
 [0000000000dcb0d0] setup_arch+0x2c8/0x2f0
 [0000000000dc68a0] start_kernel+0x48/0x424
 [0000000000dcb374] start_early_boot+0x27c/0x28c
 [0000000000a32c08] tlb_fixup_done+0x4c/0x64
 [0000000000027f08] 0x27f08

It is because linux use an internal structure node_masks[] to
keep the best memory latency node only. However, LDOM mdesc can
contain single latency-group with multiple memory latency nodes.

If the address doesn&#39;t match the best latency node within
node_masks[], it should check for an alternative via mdesc.
The warning message should only be printed if the address
doesn&#39;t match any node_masks[] nor within mdesc. To minimize
the impact of searching mdesc every time, the last matched
mask and index is stored in a variable.

Signed-off-by: Thomas Tai &lt;thomas.tai@oracle.com&gt;
Reviewed-by: Chris Hyser &lt;chris.hyser@oracle.com&gt;
Reviewed-by: Liam Merwick &lt;liam.merwick@oracle.com&gt;
Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 arch/sparc/mm/init_64.c | 65 ++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 61 insertions(+), 4 deletions(-)

<span class="p_header">diff --git a/arch/sparc/mm/init_64.c b/arch/sparc/mm/init_64.c</span>
<span class="p_header">index 4650a3840305..5979f01af0d2 100644</span>
<span class="p_header">--- a/arch/sparc/mm/init_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/init_64.c</span>
<span class="p_chunk">@@ -807,6 +807,8 @@</span> <span class="p_context"> struct mdesc_mblock {</span>
 };
 static struct mdesc_mblock *mblocks;
 static int num_mblocks;
<span class="p_add">+static int find_numa_node_for_addr(unsigned long pa,</span>
<span class="p_add">+				   struct node_mem_mask *pnode_mask);</span>
 
 static unsigned long ra_to_pa(unsigned long addr)
 {
<span class="p_chunk">@@ -826,6 +828,9 @@</span> <span class="p_context"> static unsigned long ra_to_pa(unsigned long addr)</span>
 
 static int find_node(unsigned long addr)
 {
<span class="p_add">+	static bool search_mdesc = true;</span>
<span class="p_add">+	static struct node_mem_mask last_mem_mask = { ~0UL, ~0UL };</span>
<span class="p_add">+	static int last_index;</span>
 	int i;
 
 	addr = ra_to_pa(addr);
<span class="p_chunk">@@ -835,10 +840,27 @@</span> <span class="p_context"> static int find_node(unsigned long addr)</span>
 		if ((addr &amp; p-&gt;mask) == p-&gt;val)
 			return i;
 	}
<span class="p_del">-	/* The following condition has been observed on LDOM guests.*/</span>
<span class="p_del">-	WARN_ONCE(1, &quot;find_node: A physical address doesn&#39;t match a NUMA node&quot;</span>
<span class="p_del">-		&quot; rule. Some physical memory will be owned by node 0.&quot;);</span>
<span class="p_del">-	return 0;</span>
<span class="p_add">+	/* The following condition has been observed on LDOM guests because</span>
<span class="p_add">+	 * node_masks only contains the best latency mask and value.</span>
<span class="p_add">+	 * LDOM guest&#39;s mdesc can contain a single latency group to</span>
<span class="p_add">+	 * cover multiple address range. Print warning message only if the</span>
<span class="p_add">+	 * address cannot be found in node_masks nor mdesc.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((search_mdesc) &amp;&amp;</span>
<span class="p_add">+	    ((addr &amp; last_mem_mask.mask) != last_mem_mask.val)) {</span>
<span class="p_add">+		/* find the available node in the mdesc */</span>
<span class="p_add">+		last_index = find_numa_node_for_addr(addr, &amp;last_mem_mask);</span>
<span class="p_add">+		numadbg(&quot;find_node: latency group for address 0x%lx is %d\n&quot;,</span>
<span class="p_add">+			addr, last_index);</span>
<span class="p_add">+		if ((last_index &lt; 0) || (last_index &gt;= num_node_masks)) {</span>
<span class="p_add">+			/* WARN_ONCE() and use default group 0 */</span>
<span class="p_add">+			WARN_ONCE(1, &quot;find_node: A physical address doesn&#39;t match a NUMA node rule. Some physical memory will be owned by node 0.&quot;);</span>
<span class="p_add">+			search_mdesc = false;</span>
<span class="p_add">+			last_index = 0;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return last_index;</span>
 }
 
 static u64 memblock_nid_range(u64 start, u64 end, int *nid)
<span class="p_chunk">@@ -1150,6 +1172,41 @@</span> <span class="p_context"> static struct mdesc_mlgroup * __init find_mlgroup(u64 node)</span>
 	return NULL;
 }
 
<span class="p_add">+static int find_numa_node_for_addr(unsigned long pa,</span>
<span class="p_add">+				   struct node_mem_mask *pnode_mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mdesc_handle *md = mdesc_grab();</span>
<span class="p_add">+	u64 node, arc;</span>
<span class="p_add">+	int i = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	node = mdesc_node_by_name(md, MDESC_NODE_NULL, &quot;latency-groups&quot;);</span>
<span class="p_add">+	if (node == MDESC_NODE_NULL)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+	mdesc_for_each_node_by_name(md, node, &quot;group&quot;) {</span>
<span class="p_add">+		mdesc_for_each_arc(arc, md, node, MDESC_ARC_TYPE_FWD) {</span>
<span class="p_add">+			u64 target = mdesc_arc_target(md, arc);</span>
<span class="p_add">+			struct mdesc_mlgroup *m = find_mlgroup(target);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!m)</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			if ((pa &amp; m-&gt;mask) == m-&gt;match) {</span>
<span class="p_add">+				if (pnode_mask) {</span>
<span class="p_add">+					pnode_mask-&gt;mask = m-&gt;mask;</span>
<span class="p_add">+					pnode_mask-&gt;val = m-&gt;match;</span>
<span class="p_add">+				}</span>
<span class="p_add">+				mdesc_release(md);</span>
<span class="p_add">+				return i;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+		i++;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	mdesc_release(md);</span>
<span class="p_add">+	return -1;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int __init numa_attach_mlgroup(struct mdesc_handle *md, u64 grp,
 				      int index)
 {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



