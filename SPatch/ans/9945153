
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>net: bonding: Fix transmit load balancing in balance-alb mode if specified by sysfs - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    net: bonding: Fix transmit load balancing in balance-alb mode if specified by sysfs</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=16971">Mahesh Bandewar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 8, 2017, 11:54 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;CAF2d9jgHLJ28hpiSafL7823-Ga4y8aYZ2t_Sqh7D51VL_DgDww@mail.gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9945153/mbox/"
   >mbox</a>
|
   <a href="/patch/9945153/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9945153/">/patch/9945153/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3D836602D7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 23:55:16 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2E80C2898E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 23:55:16 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 1F902289D3; Fri,  8 Sep 2017 23:55:16 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 022712898E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Sep 2017 23:55:15 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757296AbdIHXzM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 8 Sep 2017 19:55:12 -0400
Received: from mail-yw0-f175.google.com ([209.85.161.175]:36506 &quot;EHLO
	mail-yw0-f175.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1757173AbdIHXzK (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 8 Sep 2017 19:55:10 -0400
Received: by mail-yw0-f175.google.com with SMTP id v72so9204101ywa.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 08 Sep 2017 16:55:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20161025;
	h=mime-version:in-reply-to:references:from:date:message-id:subject:to
	:cc; bh=TQa9b9zYoRN1PhkfMuQI3fnITY0RoZZMZIEL7njOc5g=;
	b=TP/mFi7/LOfim1KrhQTnqhl1mBAMmX9irUqwmGttTZLezmXIfDrcqxBofT+AnU4BJ4
	KzODzN5kHk5GK/eDHAoti9PpUveyGmFKELInpaFpQUWfWrBG+ubbWbAWDqdnzS5NYe/v
	e8DoRmprUhj0/6Ugg8a4mB+wB0gko0HmhWfCEqu8mMBs2aSVH97kcLZc7dv6cePBbBga
	GBwFfAZlD8lA9s9CZO8roATqvqIqNHe/XErju/jPfxrhxYbTrswOsUbDzKr6t7feNSJ0
	R4CBXYlO36FUANADQEt9CifgjFyjpOuGVZxYE02J2VHAlfc8KJuhT/7ALf4FL3rdalq+
	VIKw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc;
	bh=TQa9b9zYoRN1PhkfMuQI3fnITY0RoZZMZIEL7njOc5g=;
	b=Vg6G1r2wEPhJBMvpct7sSiO9IZp95LEXJgU+cZgAFJ0w2sPxdz2WAjhCXs9AauvqBS
	J0roVTCEoJyqZdN44GKIPfo4uJFg7qdLKS75TJCPkkKbmxeuCAjBI8F+/L/f9tpjlM/Q
	kaMOnlR9ARJxaM7M8/RP34WZNoF6a3JSgsO8w61iKs868ZyHeGNdG0+EHIqPHdbB+oAV
	OK+l5gmQ2lzmGzNoUpswIo3RwE+vCoPWKJRSJXO0yjwMkNJRtru7X7+VTKfRB2zjhGyv
	2VMEVKjrMnjFuoMN+GOvyImN6pk9gzbXdbkjBjgUAWtTwt13Y2o01Oc4wNSxJ03uLITo
	gtcw==
X-Gm-Message-State: AHPjjUilIksGKRCmLHHkx7HzEeqRvCTKOHYB8dnj6eqw2S+yFqCvPT3K
	T+misoj4jg77BaEpsCDHs+UKtddjWkjy
X-Google-Smtp-Source: ADKCNb7pPJ40J0dWbBP6Oz0bmeVwOW+A7TB/D37jG72DUGIA20oECGlzUtPDRGFXBFZTZVpcTSsrxC8EZmRgxxtgmiI=
X-Received: by 10.129.46.196 with SMTP id u187mr3770349ywu.268.1504914908713;
	Fri, 08 Sep 2017 16:55:08 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.37.161.71 with HTTP; Fri, 8 Sep 2017 16:54:48 -0700 (PDT)
In-Reply-To: &lt;03b61877-053b-2f0e-dc35-8fe31cc90c08@cumulusnetworks.com&gt;
References: &lt;17EC94B0A072C34B8DCF0D30AD16044A0298684C@BPXM09GP.gisp.nec.co.jp&gt;
	&lt;03b61877-053b-2f0e-dc35-8fe31cc90c08@cumulusnetworks.com&gt;
From: =?UTF-8?B?TWFoZXNoIEJhbmRld2FyICjgpK7gpLngpYfgpLYg4KSs4KSC4KSh4KWH4KS14KS+4KSwKQ==?=
	&lt;maheshb@google.com&gt;
Date: Fri, 8 Sep 2017 16:54:48 -0700
Message-ID: &lt;CAF2d9jgHLJ28hpiSafL7823-Ga4y8aYZ2t_Sqh7D51VL_DgDww@mail.gmail.com&gt;
Subject: Re: [PATCH] net: bonding: Fix transmit load balancing in balance-alb
	mode if specified by sysfs
To: Nikolay Aleksandrov &lt;nikolay@cumulusnetworks.com&gt;
Cc: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;,
	Jay Vosburgh &lt;j.vosburgh@gmail.com&gt;,
	Veaceslav Falico &lt;vfalico@gmail.com&gt;,
	Andy Gospodarek &lt;andy@greyhouse.net&gt;,
	&quot;netdev@vger.kernel.org&quot; &lt;netdev@vger.kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Reinis Rozitis &lt;r@roze.lv&gt;
Content-Type: text/plain; charset=&quot;UTF-8&quot;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=16971">Mahesh Bandewar</a> - Sept. 8, 2017, 11:54 p.m.</div>
<pre class="content">
On Fri, Sep 8, 2017 at 7:30 AM, Nikolay Aleksandrov
&lt;nikolay@cumulusnetworks.com&gt; wrote:
<span class="quote">&gt; On 08/09/17 17:17, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On 08/09/17 13:10, Nikolay Aleksandrov wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On 08/09/17 05:06, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; On  7.09.2017 01:47, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Commit cbf5ecb30560 (&quot;net: bonding: Fix transmit load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode&quot;) tried to fix transmit dynamic load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode, which wasn&#39;t working after commit 8b426dc54cf4</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; (&quot;bonding: remove hardcoded value&quot;).</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; It turned out that my previous patch only fixed the case when</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb was specified as bonding module parameter, and not when</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode was set using /sys/class/net/*/bonding/mode (the most</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; common usage).  In the latter case, tlb_dynamic_lb was set up according</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; to the default mode of the bonding interface, which happens to be</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-rr.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; This additional patch addresses this issue by setting up tlb_dynamic_lb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; to 1 if &quot;mode&quot; is set to balance-alb through the sysfs interface.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t add code to change tlb_balance_lb back to the default value for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; other modes, because &quot;mode&quot; is usually set up only once during</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; initialization, and it&#39;s not worthwhile to change the static variable</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; bonding_defaults in bond_main.c to a global variable just for this</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; purpose.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Commit 8b426dc54cf4 also changes the value of tlb_dynamic_lb for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-tlb mode if it is set up using the sysfs interface.  I didn&#39;t</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; change that behavior, because the value of tlb_balance_lb can be changed</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; using the sysfs interface for balance-tlb, and I didn&#39;t like changing</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; the default value back and forth for balance-tlb.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for balance-alb, /sys/class/net/*/bonding/tlb_balance_lb cannot be</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; written to.  However, I think balance-alb with tlb_dynamic_lb set to 0</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; is not an intended usage, so there is little use making it writable at</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; this moment.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fixes: 8b426dc54cf4 (&quot;bonding: remove hardcoded value&quot;)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Reported-by: Reinis Rozitis &lt;r@roze.lv&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Signed-off-by: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cc: stable@vger.kernel.org  # v4.12+</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;  drivers/net/bonding/bond_options.c |    3 +++</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;  1 files changed, 3 insertions(+), 0 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t believe this to be the right solution, hardcoding it like this</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; changes user-visible behaviour. The issue is that if someone configured</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; it to be 0 in tlb mode, suddenly it will become 1 and will silently</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; override their config if they switch the mode to alb. Also it robs users</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; from their choice.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; If you think this should be settable in ALB mode, then IMO you should</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; edit tlb_dynamic_lb option&#39;s unsuppmodes and allow it to be set in ALB.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; That would also be consistent with how it&#39;s handled in TLB mode.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; No, I don&#39;t think tlb_dynamic_lb should be settable in balance-alb at</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; this point.  All the current commits regarding tlb_dynamic_lb are for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; balance-tlb mode, so I don&#39;t think balance-alb with tlb_dynamic_lb set</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; to 0 is an intended usage.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Going back and looking at your previous fix I&#39;d argue that it is also</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; wrong, you should&#39;ve removed the mode check altogether to return the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; original behaviour where the dynamic_lb is set to 1 (enabled) by</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; default and then ALB mode would&#39;ve had it, of course that would&#39;ve left</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; the case of setting it to 0 in TLB mode and switching to ALB, but that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; is a different issue.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Maybe balance-alb shouldn&#39;t be dependent on tlb_dynamic_lb.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; tlb_dynamic_lb is referenced in the following functions.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_do_alb_xmit()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_tlb_xmit()  -- Only used by balance-tlb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_open()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_check_params()  -- Used during module initialization</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_fill_info()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_option_tlb_dynamic_lb_set()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bonding_show_tlb_dynamic_lb()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  + bond_is_nondyn_tlb()  -- Only referenced if balance-tlb mode</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; The following untested patch adds code to make balance-alb work as if</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; tlb_dynamic_lb==1 for the functions which affect balance-alb mode.  It</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; also reverts my previous patch.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; What do you think about this approach?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Logically the approach looks good, that being said it adds unnecessary tests in</span>
<span class="quote">&gt;&gt;&gt;&gt; the fast path, why not just something like the patch below ? That only leaves the</span>
<span class="quote">&gt;&gt;&gt;&gt; problem if it is zeroed in TLB and switched to ALB mode, and that is a one line</span>
<span class="quote">&gt;&gt;&gt;&gt; fix to unsuppmodes just allow it to be set for that specific case. The below</span>
<span class="quote">&gt;&gt;&gt;&gt; returns the default behaviour before the commit in your Fixes tag.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Actually I&#39;m fine with your approach, too. It will fix this regardless of the</span>
<span class="quote">&gt;&gt;&gt; value of tlb_dynamic_lb which sounds good to me for the price of a test in</span>
<span class="quote">&gt;&gt;&gt; the fast path.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; If you&#39;re concerned about the additional test in the fast path, how</span>
<span class="quote">&gt;&gt; about the patch below.  I&#39;ve added an arguemnt to bond_do_alb_xmit()</span>
<span class="quote">&gt;&gt; to handle both balance-tlb and balance-alb similary.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Even better, looks great! 1 question below though.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; I&#39;m not sure if this causes any problem if tlb_dynamic_lb is changed</span>
<span class="quote">&gt;&gt; while calling bond_do_alb_xmit() in balance-tlb mode.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The option has the ifdown flag, you shouldn&#39;t be able to change it while</span>
<span class="quote">&gt; the bond dev is up, but even if you could I don&#39;t think it will be an issue</span>
<span class="quote">&gt; for the xmit.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; ------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt;  drivers/net/bonding/bond_alb.c  |   11 ++++++-----</span>
<span class="quote">&gt;&gt;  drivers/net/bonding/bond_main.c |    5 +++--</span>
<span class="quote">&gt;&gt;  2 files changed, 9 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/net/bonding/bond_alb.c b/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt; index c02cc81..7710f20 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt; @@ -1317,7 +1317,7 @@ void bond_alb_deinitialize(struct bonding *bond)</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt; -                         struct slave *tx_slave)</span>
<span class="quote">&gt;&gt; +                         struct slave *tx_slave, int tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;       struct alb_bond_info *bond_info = &amp;(BOND_ALB_INFO(bond));</span>
<span class="quote">&gt;&gt;       struct ethhdr *eth_data = eth_hdr(skb);</span>
<span class="quote">&gt;&gt; @@ -1325,7 +1325,7 @@ static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt;       if (!tx_slave) {</span>
<span class="quote">&gt;&gt;               /* unbalanced or unassigned, send through primary */</span>
<span class="quote">&gt;&gt;               tx_slave = rcu_dereference(bond-&gt;curr_active_slave);</span>
<span class="quote">&gt;&gt; -             if (bond-&gt;params.tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt; +             if (tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;                       bond_info-&gt;unbalanced_load += skb-&gt;len;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -1339,7 +1339,7 @@ static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt;               goto out;</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     if (tx_slave &amp;&amp; bond-&gt;params.tlb_dynamic_lb) {</span>
<span class="quote">&gt;&gt; +     if (tx_slave &amp;&amp; tlb_dynamic_lb) {</span>
<span class="quote">&gt;&gt;               spin_lock(&amp;bond-&gt;mode_lock);</span>
<span class="quote">&gt;&gt;               __tlb_clear_slave(bond, tx_slave, 0);</span>
<span class="quote">&gt;&gt;               spin_unlock(&amp;bond-&gt;mode_lock);</span>
<span class="quote">&gt;&gt; @@ -1386,7 +1386,8 @@ int bond_tlb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;                       break;</span>
<span class="quote">&gt;&gt;               }</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt; -     return bond_do_alb_xmit(skb, bond, tx_slave);</span>
<span class="quote">&gt;&gt; +     return bond_do_alb_xmit(skb, bond, tx_slave,</span>
<span class="quote">&gt;&gt; +                             bond-&gt;params.tlb_dynamic_lb);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  int bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt; @@ -1483,7 +1484,7 @@ int bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;               tx_slave = tlb_choose_channel(bond, hash_index, skb-&gt;len);</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     return bond_do_alb_xmit(skb, bond, tx_slave);</span>
<span class="quote">&gt;&gt; +     return bond_do_alb_xmit(skb, bond, tx_slave, 1);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  void bond_alb_monitor(struct work_struct *work)</span>
<span class="quote">&gt;&gt; diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt; index fc63992..bcb71e7 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt; @@ -3305,7 +3305,8 @@ static int bond_open(struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;                */</span>
<span class="quote">&gt;&gt;               if (bond_alb_initialize(bond, (BOND_MODE(bond) == BOND_MODE_ALB)))</span>
<span class="quote">&gt;&gt;                       return -ENOMEM;</span>
<span class="quote">&gt;&gt; -             if (bond-&gt;params.tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt; +             if (bond-&gt;params.tlb_dynamic_lb ||</span>
<span class="quote">&gt;&gt; +                 (BOND_MODE(bond) == BOND_MODE_TLB))</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; mode == tlb ? shouldn&#39;t this check be for alb ?</span>
<span class="quote">&gt;</span>
Actually this is not needed since this is already inside if
(bond_is_lb()) condition.
<span class="quote">
&gt;&gt;                       queue_delayed_work(bond-&gt;wq, &amp;bond-&gt;alb_work, 0);</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; @@ -4601,7 +4602,7 @@ static int bond_check_params(struct bond_params *params)</span>
<span class="quote">&gt;&gt;       }</span>
<span class="quote">&gt;&gt;       ad_user_port_key = valptr-&gt;value;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -     if ((bond_mode == BOND_MODE_TLB) || (bond_mode == BOND_MODE_ALB)) {</span>
<span class="quote">&gt;&gt; +     if (bond_mode == BOND_MODE_TLB) {</span>
<span class="quote">&gt;&gt;               bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="quote">&gt;&gt;               valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB),</span>
<span class="quote">&gt;&gt;                                       &amp;newval);</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;</span>
I think the underlying issue is that tlb_dynamic_lb should be set to 1
for all modes which was not the case when it was getting initialized
only forTLB mode. So from that perspective I prefer Nik&#39;s patch with a
small variation that guards the case when mode transitions from TLB to
ALB. The reason why I like that patch is because it&#39;s simple and
avoids complications.

Here is what I meant -
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a> - Sept. 9, 2017, 10:29 a.m.</div>
<pre class="content">
On 09/09/17 02:54, Mahesh Bandewar (महेश बंडेवार) wrote:
<span class="quote">&gt; On Fri, Sep 8, 2017 at 7:30 AM, Nikolay Aleksandrov</span>
<span class="quote">&gt; &lt;nikolay@cumulusnetworks.com&gt; wrote:</span>
<span class="quote">&gt;&gt; On 08/09/17 17:17, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; On 08/09/17 13:10, Nikolay Aleksandrov wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; On 08/09/17 05:06, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; On  7.09.2017 01:47, Kosuke Tatsukawa wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Commit cbf5ecb30560 (&quot;net: bonding: Fix transmit load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode&quot;) tried to fix transmit dynamic load balancing in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode, which wasn&#39;t working after commit 8b426dc54cf4</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (&quot;bonding: remove hardcoded value&quot;).</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; It turned out that my previous patch only fixed the case when</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb was specified as bonding module parameter, and not when</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-alb mode was set using /sys/class/net/*/bonding/mode (the most</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; common usage).  In the latter case, tlb_dynamic_lb was set up according</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to the default mode of the bonding interface, which happens to be</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-rr.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; This additional patch addresses this issue by setting up tlb_dynamic_lb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to 1 if &quot;mode&quot; is set to balance-alb through the sysfs interface.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I didn&#39;t add code to change tlb_balance_lb back to the default value for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; other modes, because &quot;mode&quot; is usually set up only once during</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; initialization, and it&#39;s not worthwhile to change the static variable</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; bonding_defaults in bond_main.c to a global variable just for this</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; purpose.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Commit 8b426dc54cf4 also changes the value of tlb_dynamic_lb for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; balance-tlb mode if it is set up using the sysfs interface.  I didn&#39;t</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; change that behavior, because the value of tlb_balance_lb can be changed</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; using the sysfs interface for balance-tlb, and I didn&#39;t like changing</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; the default value back and forth for balance-tlb.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; As for balance-alb, /sys/class/net/*/bonding/tlb_balance_lb cannot be</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; written to.  However, I think balance-alb with tlb_dynamic_lb set to 0</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; is not an intended usage, so there is little use making it writable at</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; this moment.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Fixes: 8b426dc54cf4 (&quot;bonding: remove hardcoded value&quot;)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Reported-by: Reinis Rozitis &lt;r@roze.lv&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Signed-off-by: Kosuke Tatsukawa &lt;tatsu@ab.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Cc: stable@vger.kernel.org  # v4.12+</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  drivers/net/bonding/bond_options.c |    3 +++</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  1 files changed, 3 insertions(+), 0 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; I don&#39;t believe this to be the right solution, hardcoding it like this</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; changes user-visible behaviour. The issue is that if someone configured</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; it to be 0 in tlb mode, suddenly it will become 1 and will silently</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; override their config if they switch the mode to alb. Also it robs users</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; from their choice.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; If you think this should be settable in ALB mode, then IMO you should</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; edit tlb_dynamic_lb option&#39;s unsuppmodes and allow it to be set in ALB.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; That would also be consistent with how it&#39;s handled in TLB mode.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; No, I don&#39;t think tlb_dynamic_lb should be settable in balance-alb at</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; this point.  All the current commits regarding tlb_dynamic_lb are for</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; balance-tlb mode, so I don&#39;t think balance-alb with tlb_dynamic_lb set</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; to 0 is an intended usage.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Going back and looking at your previous fix I&#39;d argue that it is also</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; wrong, you should&#39;ve removed the mode check altogether to return the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; original behaviour where the dynamic_lb is set to 1 (enabled) by</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; default and then ALB mode would&#39;ve had it, of course that would&#39;ve left</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; the case of setting it to 0 in TLB mode and switching to ALB, but that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; is a different issue.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Maybe balance-alb shouldn&#39;t be dependent on tlb_dynamic_lb.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; tlb_dynamic_lb is referenced in the following functions.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_do_alb_xmit()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_tlb_xmit()  -- Only used by balance-tlb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_open()  -- Used by both balance-tlb and balance-alb</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_check_params()  -- Used during module initialization</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_fill_info()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_option_tlb_dynamic_lb_set()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bonding_show_tlb_dynamic_lb()  -- Used to get/set value</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;  + bond_is_nondyn_tlb()  -- Only referenced if balance-tlb mode</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; The following untested patch adds code to make balance-alb work as if</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; tlb_dynamic_lb==1 for the functions which affect balance-alb mode.  It</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; also reverts my previous patch.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; What do you think about this approach?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Logically the approach looks good, that being said it adds unnecessary tests in</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; the fast path, why not just something like the patch below ? That only leaves the</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; problem if it is zeroed in TLB and switched to ALB mode, and that is a one line</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; fix to unsuppmodes just allow it to be set for that specific case. The below</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; returns the default behaviour before the commit in your Fixes tag.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Actually I&#39;m fine with your approach, too. It will fix this regardless of the</span>
<span class="quote">&gt;&gt;&gt;&gt; value of tlb_dynamic_lb which sounds good to me for the price of a test in</span>
<span class="quote">&gt;&gt;&gt;&gt; the fast path.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; If you&#39;re concerned about the additional test in the fast path, how</span>
<span class="quote">&gt;&gt;&gt; about the patch below.  I&#39;ve added an arguemnt to bond_do_alb_xmit()</span>
<span class="quote">&gt;&gt;&gt; to handle both balance-tlb and balance-alb similary.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Even better, looks great! 1 question below though.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I&#39;m not sure if this causes any problem if tlb_dynamic_lb is changed</span>
<span class="quote">&gt;&gt;&gt; while calling bond_do_alb_xmit() in balance-tlb mode.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; The option has the ifdown flag, you shouldn&#39;t be able to change it while</span>
<span class="quote">&gt;&gt; the bond dev is up, but even if you could I don&#39;t think it will be an issue</span>
<span class="quote">&gt;&gt; for the xmit.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt; Kosuke TATSUKAWA  | 1st Platform Software Division</span>
<span class="quote">&gt;&gt;&gt;                   | NEC Solution Innovators</span>
<span class="quote">&gt;&gt;&gt;                   | tatsu@ab.jp.nec.com</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; ------------------------------------------------------------------------</span>
<span class="quote">&gt;&gt;&gt;  drivers/net/bonding/bond_alb.c  |   11 ++++++-----</span>
<span class="quote">&gt;&gt;&gt;  drivers/net/bonding/bond_main.c |    5 +++--</span>
<span class="quote">&gt;&gt;&gt;  2 files changed, 9 insertions(+), 7 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/drivers/net/bonding/bond_alb.c b/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt;&gt; index c02cc81..7710f20 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/drivers/net/bonding/bond_alb.c</span>
<span class="quote">&gt;&gt;&gt; @@ -1317,7 +1317,7 @@ void bond_alb_deinitialize(struct bonding *bond)</span>
<span class="quote">&gt;&gt;&gt;  }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt;&gt; -                         struct slave *tx_slave)</span>
<span class="quote">&gt;&gt;&gt; +                         struct slave *tx_slave, int tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;       struct alb_bond_info *bond_info = &amp;(BOND_ALB_INFO(bond));</span>
<span class="quote">&gt;&gt;&gt;       struct ethhdr *eth_data = eth_hdr(skb);</span>
<span class="quote">&gt;&gt;&gt; @@ -1325,7 +1325,7 @@ static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt;&gt;       if (!tx_slave) {</span>
<span class="quote">&gt;&gt;&gt;               /* unbalanced or unassigned, send through primary */</span>
<span class="quote">&gt;&gt;&gt;               tx_slave = rcu_dereference(bond-&gt;curr_active_slave);</span>
<span class="quote">&gt;&gt;&gt; -             if (bond-&gt;params.tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;&gt; +             if (tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;&gt;                       bond_info-&gt;unbalanced_load += skb-&gt;len;</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; @@ -1339,7 +1339,7 @@ static int bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond,</span>
<span class="quote">&gt;&gt;&gt;               goto out;</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; -     if (tx_slave &amp;&amp; bond-&gt;params.tlb_dynamic_lb) {</span>
<span class="quote">&gt;&gt;&gt; +     if (tx_slave &amp;&amp; tlb_dynamic_lb) {</span>
<span class="quote">&gt;&gt;&gt;               spin_lock(&amp;bond-&gt;mode_lock);</span>
<span class="quote">&gt;&gt;&gt;               __tlb_clear_slave(bond, tx_slave, 0);</span>
<span class="quote">&gt;&gt;&gt;               spin_unlock(&amp;bond-&gt;mode_lock);</span>
<span class="quote">&gt;&gt;&gt; @@ -1386,7 +1386,8 @@ int bond_tlb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;&gt;                       break;</span>
<span class="quote">&gt;&gt;&gt;               }</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt; -     return bond_do_alb_xmit(skb, bond, tx_slave);</span>
<span class="quote">&gt;&gt;&gt; +     return bond_do_alb_xmit(skb, bond, tx_slave,</span>
<span class="quote">&gt;&gt;&gt; +                             bond-&gt;params.tlb_dynamic_lb);</span>
<span class="quote">&gt;&gt;&gt;  }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  int bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;&gt; @@ -1483,7 +1484,7 @@ int bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;&gt;               tx_slave = tlb_choose_channel(bond, hash_index, skb-&gt;len);</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; -     return bond_do_alb_xmit(skb, bond, tx_slave);</span>
<span class="quote">&gt;&gt;&gt; +     return bond_do_alb_xmit(skb, bond, tx_slave, 1);</span>
<span class="quote">&gt;&gt;&gt;  }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  void bond_alb_monitor(struct work_struct *work)</span>
<span class="quote">&gt;&gt;&gt; diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt;&gt; index fc63992..bcb71e7 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt;&gt;&gt; @@ -3305,7 +3305,8 @@ static int bond_open(struct net_device *bond_dev)</span>
<span class="quote">&gt;&gt;&gt;                */</span>
<span class="quote">&gt;&gt;&gt;               if (bond_alb_initialize(bond, (BOND_MODE(bond) == BOND_MODE_ALB)))</span>
<span class="quote">&gt;&gt;&gt;                       return -ENOMEM;</span>
<span class="quote">&gt;&gt;&gt; -             if (bond-&gt;params.tlb_dynamic_lb)</span>
<span class="quote">&gt;&gt;&gt; +             if (bond-&gt;params.tlb_dynamic_lb ||</span>
<span class="quote">&gt;&gt;&gt; +                 (BOND_MODE(bond) == BOND_MODE_TLB))</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; mode == tlb ? shouldn&#39;t this check be for alb ?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; Actually this is not needed since this is already inside if</span>
<span class="quote">&gt; (bond_is_lb()) condition.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt;                       queue_delayed_work(bond-&gt;wq, &amp;bond-&gt;alb_work, 0);</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; @@ -4601,7 +4602,7 @@ static int bond_check_params(struct bond_params *params)</span>
<span class="quote">&gt;&gt;&gt;       }</span>
<span class="quote">&gt;&gt;&gt;       ad_user_port_key = valptr-&gt;value;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; -     if ((bond_mode == BOND_MODE_TLB) || (bond_mode == BOND_MODE_ALB)) {</span>
<span class="quote">&gt;&gt;&gt; +     if (bond_mode == BOND_MODE_TLB) {</span>
<span class="quote">&gt;&gt;&gt;               bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="quote">&gt;&gt;&gt;               valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB),</span>
<span class="quote">&gt;&gt;&gt;                                       &amp;newval);</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; I think the underlying issue is that tlb_dynamic_lb should be set to 1</span>
<span class="quote">&gt; for all modes which was not the case when it was getting initialized</span>
<span class="quote">&gt; only forTLB mode. So from that perspective I prefer Nik&#39;s patch with a</span>
<span class="quote">&gt; small variation that guards the case when mode transitions from TLB to</span>
<span class="quote">&gt; ALB. The reason why I like that patch is because it&#39;s simple and</span>
<span class="quote">&gt; avoids complications.</span>

+1, I think this is the most straight-forward solution as well and
safest for -net

I will go ahead and submit it in a few minutes.

Thanks,
 Nik
<span class="quote">
&gt; </span>
<span class="quote">&gt; Here is what I meant -</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt; index fc63992ab0e0..c99dc59d729b 100644</span>
<span class="quote">&gt; --- a/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt; +++ b/drivers/net/bonding/bond_main.c</span>
<span class="quote">&gt; @@ -4289,7 +4289,7 @@ static int bond_check_params(struct bond_params *params)</span>
<span class="quote">&gt;         int bond_mode   = BOND_MODE_ROUNDROBIN;</span>
<span class="quote">&gt;         int xmit_hashtype = BOND_XMIT_POLICY_LAYER2;</span>
<span class="quote">&gt;         int lacp_fast = 0;</span>
<span class="quote">&gt; -       int tlb_dynamic_lb = 0;</span>
<span class="quote">&gt; +       int tlb_dynamic_lb;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;         /* Convert string parameters. */</span>
<span class="quote">&gt;         if (mode) {</span>
<span class="quote">&gt; @@ -4601,16 +4601,13 @@ static int bond_check_params(struct bond_params *params)</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;         ad_user_port_key = valptr-&gt;value;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -       if ((bond_mode == BOND_MODE_TLB) || (bond_mode == BOND_MODE_ALB)) {</span>
<span class="quote">&gt; -               bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="quote">&gt; -               valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB),</span>
<span class="quote">&gt; -                                       &amp;newval);</span>
<span class="quote">&gt; -               if (!valptr) {</span>
<span class="quote">&gt; -                       pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="quote">&gt; -                       return -EINVAL;</span>
<span class="quote">&gt; -               }</span>
<span class="quote">&gt; -               tlb_dynamic_lb = valptr-&gt;value;</span>
<span class="quote">&gt; +       bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="quote">&gt; +       valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB), &amp;newval);</span>
<span class="quote">&gt; +       if (!valptr) {</span>
<span class="quote">&gt; +               pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="quote">&gt; +               return -EINVAL;</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt; +       tlb_dynamic_lb = valptr-&gt;value;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;         if (lp_interval == 0) {</span>
<span class="quote">&gt;                 pr_warn(&quot;Warning: ip_interval must be between 1 and</span>
<span class="quote">&gt; %d, so it was reset to %d\n&quot;,</span>
<span class="quote">&gt; diff --git a/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; index a12d603d41c6..7feacd262182 100644</span>
<span class="quote">&gt; --- a/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; +++ b/drivers/net/bonding/bond_options.c</span>
<span class="quote">&gt; @@ -754,6 +754,12 @@ static int bond_option_mode_set(struct bonding *bond,</span>
<span class="quote">&gt;                            bond-&gt;params.miimon);</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +       /* Guard against transition TLB/tlb_dynamic_lb=0 -&gt; ALB mode.</span>
<span class="quote">&gt; +        * In ALB mode, tlb_dynamic_lb must be set to 1.</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       if (newval-&gt;value == BOND_MODE_ALB &amp;&amp; bond-&gt;params.tlb_dynamic_lb != 1)</span>
<span class="quote">&gt; +               bond-&gt;params.tlb_dynamic_lb = 1;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;         /* don&#39;t cache arp_validate between modes */</span>
<span class="quote">&gt;         bond-&gt;params.arp_validate = BOND_ARP_VALIDATE_NONE;</span>
<span class="quote">&gt;         bond-&gt;params.mode = newval-&gt;value;</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=134191">Nikolay Aleksandrov</a> - Sept. 9, 2017, 11:23 a.m.</div>
<pre class="content">
On 09/09/17 13:29, Nikolay Aleksandrov wrote:
<span class="quote">&gt; On 09/09/17 02:54, Mahesh Bandewar (महेश बंडेवार) wrote:</span>
<span class="quote">&gt;&gt; On Fri, Sep 8, 2017 at 7:30 AM, Nikolay Aleksandrov</span>
<span class="quote">&gt;&gt; &lt;nikolay@cumulusnetworks.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On 08/09/17 17:17, Kosuke Tatsukawa wrote:</span>
[snip]
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt; I think the underlying issue is that tlb_dynamic_lb should be set to 1</span>
<span class="quote">&gt;&gt; for all modes which was not the case when it was getting initialized</span>
<span class="quote">&gt;&gt; only forTLB mode. So from that perspective I prefer Nik&#39;s patch with a</span>
<span class="quote">&gt;&gt; small variation that guards the case when mode transitions from TLB to</span>
<span class="quote">&gt;&gt; ALB. The reason why I like that patch is because it&#39;s simple and</span>
<span class="quote">&gt;&gt; avoids complications.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +1, I think this is the most straight-forward solution as well and</span>
<span class="quote">&gt; safest for -net</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I will go ahead and submit it in a few minutes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt;  Nik</span>
<span class="quote">&gt; </span>

Just FYI, since the second fix (tlb_dynamic_lb in TLB = 0 switch to ALB) is identical
to this patch, I&#39;m acking this one and will wait until it&#39;s in to submit the default
value fix (if we start in non-TLB mode and switch to TLB we&#39;ll get dynamic_lb = 0
currently).

I guess this is the simplest way, I didn&#39;t want to alter user-configured value on
mode switch, but it seems better than the alternative especially for -net.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c</span>
<span class="p_header">index fc63992ab0e0..c99dc59d729b 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_main.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_main.c</span>
<span class="p_chunk">@@ -4289,7 +4289,7 @@</span> <span class="p_context"> static int bond_check_params(struct bond_params *params)</span>
        int bond_mode   = BOND_MODE_ROUNDROBIN;
        int xmit_hashtype = BOND_XMIT_POLICY_LAYER2;
        int lacp_fast = 0;
<span class="p_del">-       int tlb_dynamic_lb = 0;</span>
<span class="p_add">+       int tlb_dynamic_lb;</span>

        /* Convert string parameters. */
        if (mode) {
<span class="p_chunk">@@ -4601,16 +4601,13 @@</span> <span class="p_context"> static int bond_check_params(struct bond_params *params)</span>
        }
        ad_user_port_key = valptr-&gt;value;

<span class="p_del">-       if ((bond_mode == BOND_MODE_TLB) || (bond_mode == BOND_MODE_ALB)) {</span>
<span class="p_del">-               bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="p_del">-               valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB),</span>
<span class="p_del">-                                       &amp;newval);</span>
<span class="p_del">-               if (!valptr) {</span>
<span class="p_del">-                       pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="p_del">-                       return -EINVAL;</span>
<span class="p_del">-               }</span>
<span class="p_del">-               tlb_dynamic_lb = valptr-&gt;value;</span>
<span class="p_add">+       bond_opt_initstr(&amp;newval, &quot;default&quot;);</span>
<span class="p_add">+       valptr = bond_opt_parse(bond_opt_get(BOND_OPT_TLB_DYNAMIC_LB), &amp;newval);</span>
<span class="p_add">+       if (!valptr) {</span>
<span class="p_add">+               pr_err(&quot;Error: No tlb_dynamic_lb default value&quot;);</span>
<span class="p_add">+               return -EINVAL;</span>
        }
<span class="p_add">+       tlb_dynamic_lb = valptr-&gt;value;</span>

        if (lp_interval == 0) {
                pr_warn(&quot;Warning: ip_interval must be between 1 and
%d, so it was reset to %d\n&quot;,
<span class="p_header">diff --git a/drivers/net/bonding/bond_options.c</span>
b/drivers/net/bonding/bond_options.c
<span class="p_header">index a12d603d41c6..7feacd262182 100644</span>
<span class="p_header">--- a/drivers/net/bonding/bond_options.c</span>
<span class="p_header">+++ b/drivers/net/bonding/bond_options.c</span>
<span class="p_chunk">@@ -754,6 +754,12 @@</span> <span class="p_context"> static int bond_option_mode_set(struct bonding *bond,</span>
                           bond-&gt;params.miimon);
        }

<span class="p_add">+       /* Guard against transition TLB/tlb_dynamic_lb=0 -&gt; ALB mode.</span>
<span class="p_add">+        * In ALB mode, tlb_dynamic_lb must be set to 1.</span>
<span class="p_add">+        */</span>
<span class="p_add">+       if (newval-&gt;value == BOND_MODE_ALB &amp;&amp; bond-&gt;params.tlb_dynamic_lb != 1)</span>
<span class="p_add">+               bond-&gt;params.tlb_dynamic_lb = 1;</span>
<span class="p_add">+</span>
        /* don&#39;t cache arp_validate between modes */
        bond-&gt;params.arp_validate = BOND_ARP_VALIDATE_NONE;
        bond-&gt;params.mode = newval-&gt;value;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



