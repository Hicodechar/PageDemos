
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,2/4] KVM: X86: Add paravirt remote TLB flush - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,2/4] KVM: X86: Add paravirt remote TLB flush</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 16, 2017, 5:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;CANRm+CxjUTmCtT3V0He_c-GzAUeRcc0m2e11=OxLA8-Er+pRmw@mail.gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10060723/mbox/"
   >mbox</a>
|
   <a href="/patch/10060723/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10060723/">/patch/10060723/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	3B194604D3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 05:31:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2E9D92A78E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 05:31:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 226CA2A792; Thu, 16 Nov 2017 05:31:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 80A412A78E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 16 Nov 2017 05:31:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759730AbdKPFbH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 16 Nov 2017 00:31:07 -0500
Received: from mail-ot0-f195.google.com ([74.125.82.195]:43891 &quot;EHLO
	mail-ot0-f195.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1759447AbdKPFa7 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 16 Nov 2017 00:30:59 -0500
Received: by mail-ot0-f195.google.com with SMTP id s12so15235106otc.0;
	Wed, 15 Nov 2017 21:30:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=mime-version:in-reply-to:references:from:date:message-id:subject:to
	:cc:content-transfer-encoding;
	bh=0t7qjvjll7mwiPyIfVT20v8TMygvTWvKCn6YxuXHMwA=;
	b=nXzuI1I9gFB3Q83FsDAcoRLC6CD2ZRj04Bbid/cylsGqT9PckMsaE1RT+u9onT8Rxa
	x4pcKssqPUv+Itn941xJ6qYgM2en19qPgSHKtUizY99+vGIisYrI9RS81hLkqT/M9H7m
	Fn76epEp/oNMCMW8nnvWngeyF4dWWRGXeYqqkphISr2el1yGzFq18GhkIm3Cqd76c4GD
	3gRHgZG2p2A2cOYAlAxABrG8lonOYcJ6atBUwW+YrK0ZoG5bZN77QnnADiO4RMIxZjab
	gSPiBYz4gJT3OeRwbf5oAqYCBfXdTcB+qjW+RusLHCMTIzHwjqzLL5ixRunDH8tFXRXW
	JVIg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:mime-version:in-reply-to:references:from:date
	:message-id:subject:to:cc:content-transfer-encoding;
	bh=0t7qjvjll7mwiPyIfVT20v8TMygvTWvKCn6YxuXHMwA=;
	b=eRunmt+8GR9UeHxNWmW4mZWH8/jLOYamDa2EJ9g9QvUocdUO2+NfkVYZNeHphWiYiP
	EcTXCGqNgnc2PYEJrHaKa3xwtBOU22i0R7hJhaZwiisEYoeKfn0SWRp8f43fwowo300R
	PZdZSc37Wg9Qs6qDhrsePr8PoTcr1zuFMcF79vwVzpegKmTiTLb+VaQ/bGiGdCQh3Cla
	B2P/IJjyRc3K7X/iBud4DgDu+lGRUQRO/zMzbsBPim31lufka49fL/RuGPv+nZlwbwov
	gV484DClaRgpC0KW4d7BWNzZzWp/+GuMdl2qW4VTXc2G3hiB8GW28FsIQcCcekH5VSBz
	8p9g==
X-Gm-Message-State: AJaThX4GNzr7qdvt7bMoezCUXIujksxh3JNrn262MJjG7qSXQR22FijZ
	Tgczbw50AtXxUBTwJZ/wjlkXFja/R6xAbzJsUqQBrA==
X-Google-Smtp-Source: AGs4zMbdArsFl8R5PRe6iSEtEULlxZONPQV2ATL543joEA3qINBouks+CMaTeoS3UR2mbQrAVeHUk0oRDuU5tNfJfs0=
X-Received: by 10.157.3.43 with SMTP id 40mr361313otv.156.1510810258325; Wed,
	15 Nov 2017 21:30:58 -0800 (PST)
MIME-Version: 1.0
Received: by 10.74.53.27 with HTTP; Wed, 15 Nov 2017 21:30:57 -0800 (PST)
In-Reply-To: &lt;1510567280-19376-3-git-send-email-wanpeng.li@hotmail.com&gt;
References: &lt;1510567280-19376-1-git-send-email-wanpeng.li@hotmail.com&gt;
	&lt;1510567280-19376-3-git-send-email-wanpeng.li@hotmail.com&gt;
From: Wanpeng Li &lt;kernellwp@gmail.com&gt;
Date: Thu, 16 Nov 2017 13:30:57 +0800
Message-ID: &lt;CANRm+CxjUTmCtT3V0He_c-GzAUeRcc0m2e11=OxLA8-Er+pRmw@mail.gmail.com&gt;
Subject: Re: [PATCH v5 2/4] KVM: X86: Add paravirt remote TLB flush
To: &quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	kvm &lt;kvm@vger.kernel.org&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?B?UmFkaW0gS3LEjW3DocWZ?= &lt;rkrcmar@redhat.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;
Content-Type: text/plain; charset=&quot;UTF-8&quot;
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a> - Nov. 16, 2017, 5:30 a.m.</div>
<pre class="content">
2017-11-13 18:01 GMT+08:00 Wanpeng Li &lt;kernellwp@gmail.com&gt;:
<span class="quote">&gt; From: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Remote flushing api&#39;s does a busy wait which is fine in bare-metal</span>
<span class="quote">&gt; scenario. But with-in the guest, the vcpus might have been pre-empted</span>
<span class="quote">&gt; or blocked. In this scenario, the initator vcpu would end up</span>
<span class="quote">&gt; busy-waiting for a long amount of time.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch set implements para-virt flush tlbs making sure that it does</span>
<span class="quote">&gt; not wait for vcpus that are sleeping. And all the sleeping vcpus flush</span>
<span class="quote">&gt; the tlb on guest enter.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The best result is achieved when we&#39;re overcommiting the host by running</span>
<span class="quote">&gt; multiple vCPUs on each pCPU. In this case PV tlb flush avoids touching</span>
<span class="quote">&gt; vCPUs which are not scheduled and avoid the wait on the main CPU.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Test on a Haswell i7 desktop 4 cores (2HT), so 8 pCPUs, running ebizzy</span>
<span class="quote">&gt; in one linux guest.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ebizzy -M</span>
<span class="quote">&gt;               vanilla    optimized     boost</span>
<span class="quote">&gt;  8 vCPUs       10152       10083       -0.68%</span>
<span class="quote">&gt; 16 vCPUs        1224        4866       297.5%</span>
<span class="quote">&gt; 24 vCPUs        1109        3871       249%</span>
<span class="quote">&gt; 32 vCPUs        1025        3375       229.3%</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Radim Krčmář &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>
<span class="quote">&gt; Signed-off-by: Wanpeng Li &lt;wanpeng.li@hotmail.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  Documentation/virtual/kvm/cpuid.txt  |  4 ++++</span>
<span class="quote">&gt;  arch/x86/include/uapi/asm/kvm_para.h |  2 ++</span>
<span class="quote">&gt;  arch/x86/kernel/kvm.c                | 42 +++++++++++++++++++++++++++++++++++-</span>
<span class="quote">&gt;  3 files changed, 47 insertions(+), 1 deletion(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/Documentation/virtual/kvm/cpuid.txt b/Documentation/virtual/kvm/cpuid.txt</span>
<span class="quote">&gt; index 117066a..9693fcc 100644</span>
<span class="quote">&gt; --- a/Documentation/virtual/kvm/cpuid.txt</span>
<span class="quote">&gt; +++ b/Documentation/virtual/kvm/cpuid.txt</span>
<span class="quote">&gt; @@ -60,6 +60,10 @@ KVM_FEATURE_PV_DEDICATED           ||     8 || guest checks this feature bit</span>
<span class="quote">&gt;                                     ||       || mizations such as usage of</span>
<span class="quote">&gt;                                     ||       || qspinlocks.</span>
<span class="quote">&gt;  ------------------------------------------------------------------------------</span>
<span class="quote">&gt; +KVM_FEATURE_PV_TLB_FLUSH           ||     9 || guest checks this feature bit</span>
<span class="quote">&gt; +                                   ||       || before enabling paravirtualized</span>
<span class="quote">&gt; +                                   ||       || tlb flush.</span>
<span class="quote">&gt; +------------------------------------------------------------------------------</span>
<span class="quote">&gt;  KVM_FEATURE_CLOCKSOURCE_STABLE_BIT ||    24 || host will warn if no guest-side</span>
<span class="quote">&gt;                                     ||       || per-cpu warps are expected in</span>
<span class="quote">&gt;                                     ||       || kvmclock.</span>
<span class="quote">&gt; diff --git a/arch/x86/include/uapi/asm/kvm_para.h b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="quote">&gt; index 6d66556..e267d83 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="quote">&gt; @@ -26,6 +26,7 @@</span>
<span class="quote">&gt;  #define KVM_FEATURE_PV_EOI             6</span>
<span class="quote">&gt;  #define KVM_FEATURE_PV_UNHALT          7</span>
<span class="quote">&gt;  #define KVM_FEATURE_PV_DEDICATED       8</span>
<span class="quote">&gt; +#define KVM_FEATURE_PV_TLB_FLUSH       9</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  /* The last 8 bits are used to indicate how to interpret the flags field</span>
<span class="quote">&gt;   * in pvclock structure. If no bits are set, all flags are ignored.</span>
<span class="quote">&gt; @@ -54,6 +55,7 @@ struct kvm_steal_time {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define KVM_VCPU_NOT_PREEMPTED      (0 &lt;&lt; 0)</span>
<span class="quote">&gt;  #define KVM_VCPU_PREEMPTED          (1 &lt;&lt; 0)</span>
<span class="quote">&gt; +#define KVM_VCPU_SHOULD_FLUSH       (1 &lt;&lt; 1)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define KVM_CLOCK_PAIRING_WALLCLOCK 0</span>
<span class="quote">&gt;  struct kvm_clock_pairing {</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c</span>
<span class="quote">&gt; index 66ed3bc..78794c1 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/kvm.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/kvm.c</span>
<span class="quote">&gt; @@ -465,9 +465,40 @@ static void __init kvm_apf_trap_init(void)</span>
<span class="quote">&gt;         update_intr_gate(X86_TRAP_PF, async_page_fault);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static void kvm_flush_tlb_others(const struct cpumask *cpumask,</span>
<span class="quote">&gt; +                       const struct flush_tlb_info *info)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       u8 state;</span>
<span class="quote">&gt; +       int cpu;</span>
<span class="quote">&gt; +       struct kvm_steal_time *src;</span>
<span class="quote">&gt; +       struct cpumask *flushmask = this_cpu_cpumask_var_ptr(__pv_tlb_mask);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       if (unlikely(!flushmask))</span>
<span class="quote">&gt; +               return;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       cpumask_copy(flushmask, cpumask);</span>
<span class="quote">&gt; +       /*</span>
<span class="quote">&gt; +        * We have to call flush only on online vCPUs. And</span>
<span class="quote">&gt; +        * queue flush_on_enter for pre-empted vCPUs</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       for_each_cpu(cpu, flushmask) {</span>
<span class="quote">&gt; +               src = &amp;per_cpu(steal_time, cpu);</span>
<span class="quote">&gt; +               state = READ_ONCE(src-&gt;preempted);</span>
<span class="quote">&gt; +               if ((state &amp; KVM_VCPU_PREEMPTED)) {</span>
<span class="quote">&gt; +                       if (try_cmpxchg(&amp;src-&gt;preempted, &amp;state,</span>
<span class="quote">&gt; +                               state | KVM_VCPU_SHOULD_FLUSH))</span>
<span class="quote">&gt; +                               __cpumask_clear_cpu(cpu, flushmask);</span>
<span class="quote">&gt; +               }</span>
<span class="quote">&gt; +       }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       native_flush_tlb_others(flushmask, info);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void __init kvm_guest_init(void)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -       int i;</span>
<span class="quote">&gt; +       int i, cpu;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (!kvm_para_available())</span>
<span class="quote">&gt;                 return;</span>
<span class="quote">&gt; @@ -484,6 +515,15 @@ void __init kvm_guest_init(void)</span>
<span class="quote">&gt;                 pv_time_ops.steal_clock = kvm_steal_clock;</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +       if (kvm_para_has_feature(KVM_FEATURE_PV_TLB_FLUSH) &amp;&amp;</span>
<span class="quote">&gt; +               !kvm_para_has_feature(KVM_FEATURE_PV_DEDICATED)) {</span>
<span class="quote">&gt; +               for_each_possible_cpu(cpu) {</span>
<span class="quote">&gt; +                       zalloc_cpumask_var_node(per_cpu_ptr(&amp;__pv_tlb_mask, cpu),</span>
<span class="quote">&gt; +                                       GFP_KERNEL, cpu_to_node(cpu));</span>
<span class="quote">&gt; +               }</span>
<span class="quote">&gt; +               pv_mmu_ops.flush_tlb_others = kvm_flush_tlb_others;</span>
<span class="quote">&gt; +       }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;         if (kvm_para_has_feature(KVM_FEATURE_PV_EOI))</span>
<span class="quote">&gt;                 apic_set_eoi_write(kvm_guest_apic_eoi_write);</span>
<span class="quote">&gt;</span>

Adds the below codes to fix per-cpu variable memory allocation issue.
kvm_guest_init() is called too early during boot, buddy/slab system is
not ready, I didn&#39;t find suitable memblock API, so just define
variable directly.

         return;
@@ -498,7 +498,7 @@ static void kvm_flush_tlb_others(const struct
cpumask *cpumask,

 void __init kvm_guest_init(void)
 {
-    int i, cpu;
+    int i;

     if (!kvm_para_available())
         return;
@@ -516,13 +516,8 @@ void __init kvm_guest_init(void)
     }

     if (kvm_para_has_feature(KVM_FEATURE_PV_TLB_FLUSH) &amp;&amp;
-        !kvm_para_has_feature(KVM_FEATURE_PV_DEDICATED)) {
-        for_each_possible_cpu(cpu) {
-            zalloc_cpumask_var_node(per_cpu_ptr(&amp;__pv_tlb_mask, cpu),
-                    GFP_KERNEL, cpu_to_node(cpu));
-        }
+        !kvm_para_has_feature(KVM_FEATURE_PV_DEDICATED))
         pv_mmu_ops.flush_tlb_others = kvm_flush_tlb_others;
-    }

     if (kvm_para_has_feature(KVM_FEATURE_PV_EOI))
         apic_set_eoi_write(kvm_guest_apic_eoi_write);
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 16, 2017, 8:38 a.m.</div>
<pre class="content">
On Thu, Nov 16, 2017 at 01:30:57PM +0800, Wanpeng Li wrote:
<span class="quote">&gt; -static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="quote">&gt; +static DEFINE_PER_CPU(cpumask_t, __pv_tlb_mask);</span>

NR_CPUS=512 is a fairly common distro setting, that means cpumask_t is
64 bytes. So for my 144 CPU system, that is 9216 bytes I&#39;ll never see
again.

Not nice :/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104371">Wanpeng Li</a> - Nov. 16, 2017, 8:51 a.m.</div>
<pre class="content">
2017-11-16 16:38 GMT+08:00 Peter Zijlstra &lt;peterz@infradead.org&gt;:
<span class="quote">&gt; On Thu, Nov 16, 2017 at 01:30:57PM +0800, Wanpeng Li wrote:</span>
<span class="quote">&gt;&gt; -static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="quote">&gt;&gt; +static DEFINE_PER_CPU(cpumask_t, __pv_tlb_mask);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; NR_CPUS=512 is a fairly common distro setting, that means cpumask_t is</span>
<span class="quote">&gt; 64 bytes. So for my 144 CPU system, that is 9216 bytes I&#39;ll never see</span>
<span class="quote">&gt; again.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Not nice :/</span>

Refer to &quot;DECLARE_PER_CPU_SHARED_ALIGNED(cpumask_t, cpu_sibling_map)&quot;
in arch/ia64/include/asm/smp.h, it also defines variable directly,
however, some other archs are not. kvmclock_init() is also called very
early during boot, it utilizes memblock to alloc some memory.

Regards,
Wanpeng Li
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Nov. 16, 2017, 9:07 a.m.</div>
<pre class="content">
On Thu, Nov 16, 2017 at 04:51:39PM +0800, Wanpeng Li wrote:
<span class="quote">&gt; 2017-11-16 16:38 GMT+08:00 Peter Zijlstra &lt;peterz@infradead.org&gt;:</span>
<span class="quote">&gt; &gt; On Thu, Nov 16, 2017 at 01:30:57PM +0800, Wanpeng Li wrote:</span>
<span class="quote">&gt; &gt;&gt; -static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="quote">&gt; &gt;&gt; +static DEFINE_PER_CPU(cpumask_t, __pv_tlb_mask);</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; NR_CPUS=512 is a fairly common distro setting, that means cpumask_t is</span>
<span class="quote">&gt; &gt; 64 bytes. So for my 144 CPU system, that is 9216 bytes I&#39;ll never see</span>
<span class="quote">&gt; &gt; again.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Not nice :/</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Refer to &quot;DECLARE_PER_CPU_SHARED_ALIGNED(cpumask_t, cpu_sibling_map)&quot;</span>
<span class="quote">&gt; in arch/ia64/include/asm/smp.h, it also defines variable directly,</span>
<span class="quote">&gt; however, some other archs are not. kvmclock_init() is also called very</span>
<span class="quote">&gt; early during boot, it utilizes memblock to alloc some memory.</span>

So the difference is that the sibling map is guaranteed to be used.

This map of yours is only ever used if you run a paravirt kernel on a
new enough host to advertise the capability etc.

As said on IRC; I&#39;m forever lost in the whole init / paravirt setup
maze, but can&#39;t you simply do things later when the allocators work?
ISTR we don&#39;t in fact run the alternative stuff _that_ early anyway.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/kvm.c b/arch/x86/kernel/kvm.c</span>
<span class="p_header">index 707ee68..d8fbaf5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/kvm.c</span>
<span class="p_header">+++ b/arch/x86/kernel/kvm.c</span>
<span class="p_chunk">@@ -465,7 +465,7 @@</span> <span class="p_context"> static void __init kvm_apf_trap_init(void)</span>
     update_intr_gate(X86_TRAP_PF, async_page_fault);
 }

<span class="p_del">-static DEFINE_PER_CPU(cpumask_var_t, __pv_tlb_mask);</span>
<span class="p_add">+static DEFINE_PER_CPU(cpumask_t, __pv_tlb_mask);</span>

 static void kvm_flush_tlb_others(const struct cpumask *cpumask,
             const struct flush_tlb_info *info)
<span class="p_chunk">@@ -473,7 +473,7 @@</span> <span class="p_context"> static void kvm_flush_tlb_others(const struct</span>
cpumask *cpumask,
     u8 state;
     int cpu;
     struct kvm_steal_time *src;
<span class="p_del">-    struct cpumask *flushmask = this_cpu_cpumask_var_ptr(__pv_tlb_mask);</span>
<span class="p_add">+    cpumask_t *flushmask = &amp;per_cpu(__pv_tlb_mask, smp_processor_id());</span>

     if (unlikely(!flushmask))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



