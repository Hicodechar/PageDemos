
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>tracing: Add comments explaining cpu online filter for trace events - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    tracing: Add comments explaining cpu online filter for trace events</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=97531">Shreyas B. Prabhu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 13, 2015, 4:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1431533263-5139-1-git-send-email-shreyas@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6398421/mbox/"
   >mbox</a>
|
   <a href="/patch/6398421/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6398421/">/patch/6398421/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 0B77B9F399
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 16:08:43 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 2FE3120108
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 16:08:42 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 3CB1F2044C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 13 May 2015 16:08:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754588AbbEMQId (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 13 May 2015 12:08:33 -0400
Received: from e35.co.us.ibm.com ([32.97.110.153]:59369 &quot;EHLO
	e35.co.us.ibm.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751771AbbEMQIa (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 13 May 2015 12:08:30 -0400
Received: from /spool/local
	by e35.co.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;shreyas@linux.vnet.ibm.com&gt;; 
	Wed, 13 May 2015 10:08:30 -0600
Received: from d03dlp01.boulder.ibm.com (9.17.202.177)
	by e35.co.us.ibm.com (192.168.1.135) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Wed, 13 May 2015 10:08:27 -0600
Received: from b03cxnp08026.gho.boulder.ibm.com
	(b03cxnp08026.gho.boulder.ibm.com [9.17.130.18])
	by d03dlp01.boulder.ibm.com (Postfix) with ESMTP id 49E561FF004A
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 13 May 2015 09:59:37 -0600 (MDT)
Received: from d03av03.boulder.ibm.com (d03av03.boulder.ibm.com
	[9.17.195.169])
	by b03cxnp08026.gho.boulder.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id t4DG8HlR36700318
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 13 May 2015 09:08:17 -0700
Received: from d03av03.boulder.ibm.com (localhost [127.0.0.1])
	by d03av03.boulder.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with ESMTP
	id t4DG8QaR031069
	for &lt;linux-kernel@vger.kernel.org&gt;; Wed, 13 May 2015 10:08:26 -0600
Received: from adminib-ovr2cdm.in.ibm.com (adminib-ovr2cdm.in.ibm.com
	[9.124.35.28] (may be forged))
	by d03av03.boulder.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with ESMTP
	id t4DG8NC0030548; Wed, 13 May 2015 10:08:24 -0600
From: &quot;Shreyas B. Prabhu&quot; &lt;shreyas@linux.vnet.ibm.com&gt;
To: akpm@linux-foundation.org, rostedt@goodmis.org
Cc: linux-kernel@vger.kernel.org, preeti@linux.vnet.ibm.com,
	paulmck@linux.vnet.ibm.com,
	&quot;Shreyas B. Prabhu&quot; &lt;shreyas@linux.vnet.ibm.com&gt;
Subject: [PATCH] tracing: Add comments explaining cpu online filter for
	trace events
Date: Wed, 13 May 2015 21:37:43 +0530
Message-Id: &lt;1431533263-5139-1-git-send-email-shreyas@linux.vnet.ibm.com&gt;
X-Mailer: git-send-email 1.9.3
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 15051316-0013-0000-0000-00000AB9C6A5
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=97531">Shreyas B. Prabhu</a> - May 13, 2015, 4:07 p.m.</div>
<pre class="content">
trace_mm_page_pcpu_drain, trace_kmem_cache_free, trace_mm_page_free
and trace_tlb_flush can be potentially called from an offlined cpu.
Since trace points use RCU and RCU should not be used from offlined
cpus, we have checks to filter out such calls. Add comments to explain
this.
<span class="signed-off-by">
Signed-off-by: Shreyas B. Prabhu &lt;shreyas@linux.vnet.ibm.com&gt;</span>
---
This applies on top of patches posted here:
https://lkml.org/lkml/2015/5/8/527

 include/trace/events/kmem.h | 15 +++++++++++++++
 include/trace/events/tlb.h  |  5 +++++
 2 files changed, 20 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - May 13, 2015, 4:21 p.m.</div>
<pre class="content">
On Wed, 13 May 2015 21:37:43 +0530
&quot;Shreyas B. Prabhu&quot; &lt;shreyas@linux.vnet.ibm.com&gt; wrote:
<span class="quote">
&gt; trace_mm_page_pcpu_drain, trace_kmem_cache_free, trace_mm_page_free</span>
<span class="quote">&gt; and trace_tlb_flush can be potentially called from an offlined cpu.</span>
<span class="quote">&gt; Since trace points use RCU and RCU should not be used from offlined</span>
<span class="quote">&gt; cpus, we have checks to filter out such calls. Add comments to explain</span>
<span class="quote">&gt; this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Shreyas B. Prabhu &lt;shreyas@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; This applies on top of patches posted here:</span>
<span class="quote">&gt; https://lkml.org/lkml/2015/5/8/527</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  include/trace/events/kmem.h | 15 +++++++++++++++</span>
<span class="quote">&gt;  include/trace/events/tlb.h  |  5 +++++</span>
<span class="quote">&gt;  2 files changed, 20 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/include/trace/events/kmem.h b/include/trace/events/kmem.h</span>
<span class="quote">&gt; index 6cd975f..9883f2f 100644</span>
<span class="quote">&gt; --- a/include/trace/events/kmem.h</span>
<span class="quote">&gt; +++ b/include/trace/events/kmem.h</span>
<span class="quote">&gt; @@ -146,6 +146,11 @@ DEFINE_EVENT_CONDITION(kmem_free, kmem_cache_free,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	TP_ARGS(call_site, ptr),</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * This trace can be potentially called from an offlined cpu.</span>
<span class="quote">&gt; +	 * Since trace points use RCU and RCU should not be used from</span>
<span class="quote">&gt; +	 * offline cpus, filter such calls out.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt;  	TP_CONDITION(cpu_online(smp_processor_id()))</span>
<span class="quote">&gt;  );</span>
<span class="quote">&gt;  </span>

Thanks for the comments, but can&#39;t these still be called with
preemption enabled. What happens when CONFIG_DEBUG_PREEMPT is set and
you enable these tracepoints. Wont it trigger a warning about
smp_processor_id() being used in preemptible code?

-- Steve
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=97531">Shreyas B. Prabhu</a> - May 14, 2015, 2:16 p.m.</div>
<pre class="content">
On Wednesday 13 May 2015 09:51 PM, Steven Rostedt wrote:
<span class="quote">&gt; On Wed, 13 May 2015 21:37:43 +0530</span>
<span class="quote">&gt; &quot;Shreyas B. Prabhu&quot; &lt;shreyas@linux.vnet.ibm.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; trace_mm_page_pcpu_drain, trace_kmem_cache_free, trace_mm_page_free</span>
<span class="quote">&gt;&gt; and trace_tlb_flush can be potentially called from an offlined cpu.</span>
<span class="quote">&gt;&gt; Since trace points use RCU and RCU should not be used from offlined</span>
<span class="quote">&gt;&gt; cpus, we have checks to filter out such calls. Add comments to explain</span>
<span class="quote">&gt;&gt; this.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Shreyas B. Prabhu &lt;shreyas@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; This applies on top of patches posted here:</span>
<span class="quote">&gt;&gt; https://lkml.org/lkml/2015/5/8/527</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  include/trace/events/kmem.h | 15 +++++++++++++++</span>
<span class="quote">&gt;&gt;  include/trace/events/tlb.h  |  5 +++++</span>
<span class="quote">&gt;&gt;  2 files changed, 20 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/include/trace/events/kmem.h b/include/trace/events/kmem.h</span>
<span class="quote">&gt;&gt; index 6cd975f..9883f2f 100644</span>
<span class="quote">&gt;&gt; --- a/include/trace/events/kmem.h</span>
<span class="quote">&gt;&gt; +++ b/include/trace/events/kmem.h</span>
<span class="quote">&gt;&gt; @@ -146,6 +146,11 @@ DEFINE_EVENT_CONDITION(kmem_free, kmem_cache_free,</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	TP_ARGS(call_site, ptr),</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +	/*</span>
<span class="quote">&gt;&gt; +	 * This trace can be potentially called from an offlined cpu.</span>
<span class="quote">&gt;&gt; +	 * Since trace points use RCU and RCU should not be used from</span>
<span class="quote">&gt;&gt; +	 * offline cpus, filter such calls out.</span>
<span class="quote">&gt;&gt; +	 */</span>
<span class="quote">&gt;&gt;  	TP_CONDITION(cpu_online(smp_processor_id()))</span>
<span class="quote">&gt;&gt;  );</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for the comments, but can&#39;t these still be called with</span>
<span class="quote">&gt; preemption enabled. What happens when CONFIG_DEBUG_PREEMPT is set and</span>
<span class="quote">&gt; you enable these tracepoints. Wont it trigger a warning about</span>
<span class="quote">&gt; smp_processor_id() being used in preemptible code?</span>
<span class="quote">&gt; </span>
Yes. It does trigger &quot;using smp_processor_id() in preemptible code&quot;
warnings. But as you mentioned in the previous comments, we should be
safe even if the trace call happens from a preemptible section. Let me
play out the scenarios here again-

The task gets migrated after the smp_processor_id()
1. From an online cpu to another online cpu - No impact
2. From an online cpu to an offline cpu - Should never happen
3. From an offline cpu to an online cpu - IIUC, once a cpu has been
offlined it returns to cpu_idle_loop, discovers its offline and calls
arch_cpu_idle_dead. All this happens with preemption disabled. So this
scenario too should never happen.

So I don&#39;t see any downside to changing smp_processor_id() to
raw_smp_processor_id() which will suppress the warnings. If you agree
I&#39;ll send a patch doing this.

Another alternative which is perhaps worth considering is to change
__DO_TRACE itself to check for offline cpu, without a trace event
specifying the check. This will prevent any currently uncaught and any
future tracepoints from using RCU on offline cpus. But I guess it&#39;s
little extreme considering only a low fraction of tracepoints have
potential of being called from offline cpus.

Thanks,
Shreyas

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=310">Steven Rostedt</a> - May 14, 2015, 2:56 p.m.</div>
<pre class="content">
On Thu, 14 May 2015 19:46:11 +0530
Shreyas B Prabhu &lt;shreyas@linux.vnet.ibm.com&gt; wrote:
<span class="quote"> 
&gt; &gt; Thanks for the comments, but can&#39;t these still be called with</span>
<span class="quote">&gt; &gt; preemption enabled. What happens when CONFIG_DEBUG_PREEMPT is set and</span>
<span class="quote">&gt; &gt; you enable these tracepoints. Wont it trigger a warning about</span>
<span class="quote">&gt; &gt; smp_processor_id() being used in preemptible code?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; Yes. It does trigger &quot;using smp_processor_id() in preemptible code&quot;</span>
<span class="quote">&gt; warnings. But as you mentioned in the previous comments, we should be</span>
<span class="quote">&gt; safe even if the trace call happens from a preemptible section. Let me</span>
<span class="quote">&gt; play out the scenarios here again-</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The task gets migrated after the smp_processor_id()</span>
<span class="quote">&gt; 1. From an online cpu to another online cpu - No impact</span>
<span class="quote">&gt; 2. From an online cpu to an offline cpu - Should never happen</span>
<span class="quote">&gt; 3. From an offline cpu to an online cpu - IIUC, once a cpu has been</span>
<span class="quote">&gt; offlined it returns to cpu_idle_loop, discovers its offline and calls</span>
<span class="quote">&gt; arch_cpu_idle_dead. All this happens with preemption disabled. So this</span>
<span class="quote">&gt; scenario too should never happen.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So I don&#39;t see any downside to changing smp_processor_id() to</span>
<span class="quote">&gt; raw_smp_processor_id() which will suppress the warnings. If you agree</span>
<span class="quote">&gt; I&#39;ll send a patch doing this.</span>

Yes, please use the raw_smp_processor_id(), and you can add the above
description about why it is safe to do so (in the comments).
<span class="quote">
&gt; </span>
<span class="quote">&gt; Another alternative which is perhaps worth considering is to change</span>
<span class="quote">&gt; __DO_TRACE itself to check for offline cpu, without a trace event</span>
<span class="quote">&gt; specifying the check. This will prevent any currently uncaught and any</span>
<span class="quote">&gt; future tracepoints from using RCU on offline cpus. But I guess it&#39;s</span>
<span class="quote">&gt; little extreme considering only a low fraction of tracepoints have</span>
<span class="quote">&gt; potential of being called from offline cpus.</span>

I think that&#39;s a bit extreme, as it would cause an impact to the speed
of tracepoints in the hot path.

-- Steve

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/trace/events/kmem.h b/include/trace/events/kmem.h</span>
<span class="p_header">index 6cd975f..9883f2f 100644</span>
<span class="p_header">--- a/include/trace/events/kmem.h</span>
<span class="p_header">+++ b/include/trace/events/kmem.h</span>
<span class="p_chunk">@@ -146,6 +146,11 @@</span> <span class="p_context"> DEFINE_EVENT_CONDITION(kmem_free, kmem_cache_free,</span>
 
 	TP_ARGS(call_site, ptr),
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_add">+	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_add">+	 * offline cpus, filter such calls out.</span>
<span class="p_add">+	 */</span>
 	TP_CONDITION(cpu_online(smp_processor_id()))
 );
 
<span class="p_chunk">@@ -155,6 +160,11 @@</span> <span class="p_context"> TRACE_EVENT_CONDITION(mm_page_free,</span>
 
 	TP_ARGS(page, order),
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_add">+	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_add">+	 * offline cpus, filter such calls out.</span>
<span class="p_add">+	 */</span>
 	TP_CONDITION(cpu_online(smp_processor_id())),
 
 	TP_STRUCT__entry(
<span class="p_chunk">@@ -263,6 +273,11 @@</span> <span class="p_context"> TRACE_EVENT_CONDITION(mm_page_pcpu_drain,</span>
 
 	TP_ARGS(page, order, migratetype),
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_add">+	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_add">+	 * offline cpus, filter such calls out.</span>
<span class="p_add">+	 */</span>
 	TP_CONDITION(cpu_online(smp_processor_id())),
 
 	TP_STRUCT__entry(
<span class="p_header">diff --git a/include/trace/events/tlb.h b/include/trace/events/tlb.h</span>
<span class="p_header">index 4250f36..2afc3ed 100644</span>
<span class="p_header">--- a/include/trace/events/tlb.h</span>
<span class="p_header">+++ b/include/trace/events/tlb.h</span>
<span class="p_chunk">@@ -38,6 +38,11 @@</span> <span class="p_context"> TRACE_EVENT_CONDITION(tlb_flush,</span>
 	TP_PROTO(int reason, unsigned long pages),
 	TP_ARGS(reason, pages),
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This trace can be potentially called from an offlined cpu.</span>
<span class="p_add">+	 * Since trace points use RCU and RCU should not be used from</span>
<span class="p_add">+	 * offline cpus, filter such calls out.</span>
<span class="p_add">+	 */</span>
 	TP_CONDITION(cpu_online(smp_processor_id())),
 
 	TP_STRUCT__entry(

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



