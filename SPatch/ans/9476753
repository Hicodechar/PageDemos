
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>arm64: mm: bug around swiotlb_dma_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    arm64: mm: bug around swiotlb_dma_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 15, 2016, 7:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;2687486.uRNLKRAd5t@wuerfel&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9476753/mbox/"
   >mbox</a>
|
   <a href="/patch/9476753/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9476753/">/patch/9476753/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A69A16047D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Dec 2016 19:08:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9996F28821
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Dec 2016 19:08:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8DEEC28832; Thu, 15 Dec 2016 19:08:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EF86228821
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Dec 2016 19:08:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754495AbcLOTIm (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Dec 2016 14:08:42 -0500
Received: from mout.kundenserver.de ([217.72.192.75]:51185 &quot;EHLO
	mout.kundenserver.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751845AbcLOTIj (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Dec 2016 14:08:39 -0500
Received: from wuerfel.localnet ([78.43.21.235]) by mrelayeu.kundenserver.de
	(mreue102 [212.227.15.145]) with ESMTPSA (Nemesis) id
	0M1o1y-1cadYS1lL0-00tmIZ; Thu, 15 Dec 2016 20:07:10 +0100
From: Arnd Bergmann &lt;arnd@arndb.de&gt;
To: linux-arm-kernel@lists.infradead.org
Cc: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;,
	Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, Simon Horman &lt;horms@verge.net.au&gt;,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;,
	Vladimir Barinov &lt;vladimir.barinov@cogentembedded.com&gt;,
	Artemi Ivanov &lt;artemi.ivanov@cogentembedded.com&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;
Subject: Re: arm64: mm: bug around swiotlb_dma_ops
Date: Thu, 15 Dec 2016 20:07:06 +0100
Message-ID: &lt;2687486.uRNLKRAd5t@wuerfel&gt;
User-Agent: KMail/5.1.3 (Linux/4.4.0-34-generic; KDE/5.18.0; x86_64; ; )
In-Reply-To: &lt;8862fe21-0a82-a09a-c1cb-aa79d46179ec@cogentembedded.com&gt;
References: &lt;8862fe21-0a82-a09a-c1cb-aa79d46179ec@cogentembedded.com&gt;
MIME-Version: 1.0
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset=&quot;us-ascii&quot;
X-Provags-ID: V03:K0:qvrnpU+o0fBQ65OZ+r+fenD80lhynPTlt34UxHa0t+GGl/d/Pk2
	pm+up2owkOacDW4Rx8JYF5B0ownIRSmvQAEmZR15bIoFnBbimpDXb+EZutZEilkf9n/4TkY
	V0uRX3dBAZvioX8+w+xlm9FJzNWRQFsfxNjpwdJfksW3hRZcVx1IuQPX34PHbh3rAcgDjRD
	Gv1bNih3TcK5yxsmKEEKg==
X-UI-Out-Filterresults: notjunk:1; V01:K0:w2G5UEz5g5w=:RubHUssCyLK62jPe9Jl/yU
	nee4lkiRD2zsk6rGeCtTSmwCoJAAGFLyzlRXmx9FWMZgfwQHy+We7BpQs/UJHZhAqXqou8sOu
	3+NbFFbrHotJZb/QJk27ybSnRAcwrngusOYTSTRDc5SkEV8EdkprwtdkGgWtmhb+pc+7fGPVB
	JGrNncUgnWTuJZOMsg36FxXyi8QDHGh+pqE0hrCRtaxO9kq/hj9xcsKvN4LfyBc9+IkTsf1hc
	BdIB6ZS30lrfaaLTZrTV39NcUf4ccHIKuHdH1T3+47zO2Dy9xCv+yqfqlQ/9ALzwJm0Gu9q8G
	B6hzRWYKH6P/1QVMU/TpT4j6qZGODl2DMGZyfdH3OsWFWz8iaXgm+kwrGBEBb4b9xl5uASgoA
	q7ns6kKssU2H9g39QNFK0W8GAFjypq8CaA6fYNbRBsktKdeeZGmSwTzI3/KDkbkMJGR++F0v0
	qQ7obeEG0AuaDfy3uu5Ed2mFk4JObwJEKB6tTCuCC5BxijeR9aAtJEar6Kii/rN+8oNoN/61b
	e8vP0wEwh4r3uc+tW0qJH0A1UcDGtuFET7xJqWdcmhXsxPkYLxGUw79T5Tc8yR5YlSpgQc7s3
	RnzMOOXBZIk0tt0gcAAuMW9kVYDX1/273HG4Nj9vTae1q5j02eGvpNPkjc5pKbFJmnsrsHTVO
	MqLxAsBWSUwNfRppJICUkTVwW2BI/JEsXqU79GiP6iYuI+KBymXwFVq4hMQOvfNbg9vQoSnlt
	WPtUN8/ed150qZbg
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Dec. 15, 2016, 7:07 p.m.</div>
<pre class="content">
On Thursday, December 15, 2016 7:20:11 PM CET Nikita Yushchenko wrote:
<span class="quote">&gt; Hi.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Per Documentation/DMA-API-HOWTO.txt, driver of device capable of 64-bit</span>
<span class="quote">&gt; DMA addressing, should call dma_set_mask_and_coherent(dev,</span>
<span class="quote">&gt; DMA_BIT_MASK(64)) and if that succeeds, assume that 64-bit DMA</span>
<span class="quote">&gt; addressing is available.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This behaves incorrectly on arm64 system (Renesas r8a7795-h3ulcb) here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - Device (NVME SSD) has it&#39;s dev-&gt;archdata.dma_ops set to swiotlb_dma_ops.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - swiotlb_dma_ops.dma_supported is set to swiotlb_dma_supported():</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; int swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;         return phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; this definitely returns true for mask=DMA_BIT_MASK(64) since that is</span>
<span class="quote">&gt; maximum possible 64-bit value.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - Thus device dma_mask is unconditionally updated, and</span>
<span class="quote">&gt; dma_set_mask_and_coherent() succeeds.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; - Later, __swiotlb_map_page() / __swiotlb_map_sg_attr() will consult</span>
<span class="quote">&gt; this updated mask, and return high addresses as valid DMA addresses.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thus recommended dma_set_mask_and_coherent() call, instead of checking</span>
<span class="quote">&gt; if platform supports 64-bit DMA addressing, unconditionally enables</span>
<span class="quote">&gt; 64-bit DMA addressing. In case of device actually can&#39;t do DMA to 64-bit</span>
<span class="quote">&gt; addresses (e.g. because of limitations in PCIe controller), this breaks</span>
<span class="quote">&gt; things. This is exactly what happens here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Not sure what is proper fix for this though.</span>

I had prototyped something for this a long time ago. It&#39;s probably
wrong or incomplete, but maybe it helps you get closer to a solution.

	Arnd

commit 76c3f31874b0791b4be72cdd64791a64495c3a4a
Author: Arnd Bergmann &lt;arnd@arndb.de&gt;
Date:   Tue Nov 17 14:06:55 2015 +0100

    [EXPERIMENTAL] ARM64: check implement dma_set_mask
    
    Needs work for coherent mask
<span class="signed-off-by">    
    Signed-off-by: Arnd Bergmann &lt;arnd@arndb.de&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Dec. 23, 2016, 1:03 p.m.</div>
<pre class="content">
<span class="quote">&gt;&gt; Thus recommended dma_set_mask_and_coherent() call, instead of checking</span>
<span class="quote">&gt;&gt; if platform supports 64-bit DMA addressing, unconditionally enables</span>
<span class="quote">&gt;&gt; 64-bit DMA addressing. In case of device actually can&#39;t do DMA to 64-bit</span>
<span class="quote">&gt;&gt; addresses (e.g. because of limitations in PCIe controller), this breaks</span>
<span class="quote">&gt;&gt; things. This is exactly what happens here.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I had prototyped something for this a long time ago. It&#39;s probably</span>
<span class="quote">&gt; wrong or incomplete, but maybe it helps you get closer to a solution.</span>

With swiotlb, &quot;memory device can DMA to&quot; and &quot;memory drivers should
allocate for DMA&quot; is no longer the same: swiotlb allows drivers to
dma_map any memory, but device still has it&#39;s restrictions.

Problem is caused by that swiotlb mixes these two meanings:

- swiotlb&#39;s mapping code assumes that masks describe what device is
capable of
  - for dma_mask, this dependency is indirect, via arch&#39;s dma_capable(),
which naively uses dma_mask on arm64,
  - for dma_coherent_mask, dependency is coded in common code in
lib/swiotlb.c, in swiotlb_alloc_coherent()

- but swiotlb_dma_supported() assumes that masks describe what memory
driver is allowed to allocate, and unconditionally allows wide masks.

Problem is not arm64 specific. Although arm64 specific workaround is
possible by altering arm64&#39;s swiotlb_dma_ops.


Actually overall situation is quite messy.

*) There is no memory allocation API that can enforce arbitrary range
restrictions. At memory allocation level, only GFP_* flags are
available. Thus DMA allocators have to speculate (play with with GFP_DMA
/ GFP_DMA32 flags, fail requests if actual allocated memory does not
match mask).

*) Although phys_to_dma() / dma_to_phys() take struct device argument
and thus can potentially do device-specific translations, there is no
infrastructure to do bridge-specific translation. For example, RCAR PCIe
controller can define several windows if host memory for inbound PCIe
transactions, that can be configured via device tree - but won&#39;t work at
runtime.

*) The way how arch_setup_dma_ops() is called for PCI devices on
platforms using device tree, does not pass whatever host bridge specific
information. Call chain is via of_dma_configure(), that consults
dma-ranges of controller&#39;s node&#39;s parent, not controller node itself.

*) Format of dma-ranges used by several PCIe host bridges is NOT the
same as format that of_dma_configure() expects. Thus fixing node used in
of_dma_configure() call won&#39;t help, unless binding is changed, which
required fixing multiple drivers.

*) Generally speaking, usage of masks to define range limitations looks
obsolete. It was ok to describe limited DMA address width in individual
devices, but does not fit well with modern architectures with bridges /
translations/ iommus / whatever.


If trying to avoid big changes and only fixing particular problem with
particular device not working on arm64, I think best way is to
alter__swiotlb_dma_supported() in arch/arm64/mm/dma-mapping.c to detect
and decline (with -EIO) mask that is unsupported by device connection.
This will cover both dma_mask and coherent_dma_mask.

This has to be combined with some way to explicitly extract information
about limitations. Checking device parent&#39;s dma masks won&#39;t work unless
somebody bothers to populate them.


Nikita
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Dec. 23, 2016, 1:07 p.m.</div>
<pre class="content">
<span class="quote">&gt; If trying to avoid big changes and only fixing particular problem with</span>
<span class="quote">&gt; particular device not working on arm64, I think best way is to</span>
<span class="quote">&gt; alter__swiotlb_dma_supported() in arch/arm64/mm/dma-mapping.c to detect</span>
<span class="quote">&gt; and decline (with -EIO) mask that is unsupported by device connection.</span>
<span class="quote">&gt; This will cover both dma_mask and coherent_dma_mask.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This has to be combined with some way to explicitly extract information</span>
<span class="quote">&gt; about limitations. Checking device parent&#39;s dma masks won&#39;t work unless</span>
<span class="quote">&gt; somebody bothers to populate them.</span>

I&#39;m trying to bring together a patch doing this, will post that when ready
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/device.h b/arch/arm64/include/asm/device.h</span>
<span class="p_header">index 243ef256b8c9..a57e7bb10e71 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 	void *iommu;			/* private IOMMU data */
 #endif
 	bool dma_coherent;
<span class="p_add">+	u64 parent_dma_mask;</span>
 };
 
 struct pdev_archdata {
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 290a84f3351f..aa65875c611b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -352,6 +352,31 @@</span> <span class="p_context"> static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
 	return 1;
 }
 
<span class="p_add">+static int __swiotlb_set_dma_mask(struct device *dev, u64 mask)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* mask is below swiotlb bounce buffer, so fail */</span>
<span class="p_add">+	if (!swiotlb_dma_supported(dev, mask))</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * because of the swiotlb, we can return success for</span>
<span class="p_add">+	 * larger masks, but need to ensure that bounce buffers</span>
<span class="p_add">+	 * are used above parent_dma_mask, so set that as</span>
<span class="p_add">+	 * the effective mask.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct dma_map_ops swiotlb_dma_ops = {
 	.alloc = __dma_alloc,
 	.free = __dma_free,
<span class="p_chunk">@@ -367,6 +392,7 @@</span> <span class="p_context"> static struct dma_map_ops swiotlb_dma_ops = {</span>
 	.sync_sg_for_device = __swiotlb_sync_sg_for_device,
 	.dma_supported = __swiotlb_dma_supported,
 	.mapping_error = swiotlb_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __swiotlb_set_dma_mask,</span>
 };
 
 static int __init atomic_pool_init(void)
<span class="p_chunk">@@ -957,6 +983,18 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,</span>
 	if (!dev-&gt;archdata.dma_ops)
 		dev-&gt;archdata.dma_ops = &amp;swiotlb_dma_ops;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * we don&#39;t yet support buses that have a non-zero mapping.</span>
<span class="p_add">+	 *  Let&#39;s hope we won&#39;t need it</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	WARN_ON(dma_base != 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Whatever the parent bus can set. A device must not set</span>
<span class="p_add">+	 * a DMA mask larger than this.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



