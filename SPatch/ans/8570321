
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv4,08/25] thp: support file pages in zap_huge_pmd() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv4,08/25] thp: support file pages in zap_huge_pmd()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 11, 2016, 10:59 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1457737157-38573-9-git-send-email-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8570321/mbox/"
   >mbox</a>
|
   <a href="/patch/8570321/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8570321/">/patch/8570321/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 774BC9F44D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Mar 2016 23:08:13 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id DDE9920173
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Mar 2016 23:08:12 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 365EB20148
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 11 Mar 2016 23:08:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933201AbcCKXIE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 11 Mar 2016 18:08:04 -0500
Received: from mga11.intel.com ([192.55.52.93]:7597 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753099AbcCKW7d (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 11 Mar 2016 17:59:33 -0500
Received: from fmsmga001.fm.intel.com ([10.253.24.23])
	by fmsmga102.fm.intel.com with ESMTP; 11 Mar 2016 14:59:32 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.24,321,1455004800&quot;; d=&quot;scan&#39;208&quot;;a=&quot;922073161&quot;
Received: from black.fi.intel.com ([10.237.72.93])
	by fmsmga001.fm.intel.com with ESMTP; 11 Mar 2016 14:59:26 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id 13CFD61A; Sat, 12 Mar 2016 00:59:20 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Hugh Dickins &lt;hughd@google.com&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	Christoph Lameter &lt;cl@gentwo.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Jerome Marchand &lt;jmarchan@redhat.com&gt;, Yang Shi &lt;yang.shi@linaro.org&gt;,
	Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	linux-fsdevel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv4 08/25] thp: support file pages in zap_huge_pmd()
Date: Sat, 12 Mar 2016 01:59:00 +0300
Message-Id: &lt;1457737157-38573-9-git-send-email-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1457737157-38573-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
References: &lt;1457737157-38573-1-git-send-email-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - March 11, 2016, 10:59 p.m.</div>
<pre class="content">
split_huge_pmd() for file mappings (and DAX too) is implemented by just
clearing pmd entry as we can re-fill this area from page cache on pte
level later.

This means we don&#39;t need deposit page tables when file THP is mapped.
Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()
file THP PMD.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
---
 mm/huge_memory.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - March 18, 2016, 1:53 p.m.</div>
<pre class="content">
&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; writes:
<span class="quote">
&gt; [ text/plain ]</span>
<span class="quote">&gt; split_huge_pmd() for file mappings (and DAX too) is implemented by just</span>
<span class="quote">&gt; clearing pmd entry as we can re-fill this area from page cache on pte</span>
<span class="quote">&gt; level later.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This means we don&#39;t need deposit page tables when file THP is mapped.</span>
<span class="quote">&gt; Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()</span>
<span class="quote">&gt; file THP PMD.</span>

Archs like ppc64 use deposited page table to track the hardware page
table slot information. We probably may want to add hooks which arch can
use to achieve the same even with file THP 
<span class="quote">
&gt;</span>
<span class="quote">&gt; Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  mm/huge_memory.c | 12 +++++++++---</span>
<span class="quote">&gt;  1 file changed, 9 insertions(+), 3 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="quote">&gt; index 44468fb7cdbf..c22144e3fe11 100644</span>
<span class="quote">&gt; --- a/mm/huge_memory.c</span>
<span class="quote">&gt; +++ b/mm/huge_memory.c</span>
<span class="quote">&gt; @@ -1684,10 +1684,16 @@ int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		struct page *page = pmd_page(orig_pmd);</span>
<span class="quote">&gt;  		page_remove_rmap(page, true);</span>
<span class="quote">&gt;  		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);</span>
<span class="quote">&gt; -		add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="quote">&gt;  		VM_BUG_ON_PAGE(!PageHead(page), page);</span>
<span class="quote">&gt; -		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));</span>
<span class="quote">&gt; -		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +		if (PageAnon(page)) {</span>
<span class="quote">&gt; +			pgtable_t pgtable;</span>
<span class="quote">&gt; +			pgtable = pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd);</span>
<span class="quote">&gt; +			pte_free(tlb-&gt;mm, pgtable);</span>
<span class="quote">&gt; +			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="quote">&gt; +			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt; +			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt;  		spin_unlock(ptl);</span>
<span class="quote">&gt;  		tlb_remove_page(tlb, page);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.7.0</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; To unsubscribe, send a message with &#39;unsubscribe linux-mm&#39; in</span>
<span class="quote">&gt; the body to majordomo@kvack.org.  For more info on Linux MM,</span>
<span class="quote">&gt; see: http://www.linux-mm.org/ .</span>
<span class="quote">&gt; Don&#39;t email: &lt;a href=mailto:&quot;dont@kvack.org&quot;&gt; email@kvack.org &lt;/a&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - March 19, 2016, 1:02 a.m.</div>
<pre class="content">
On Fri, Mar 18, 2016 at 07:23:41PM +0530, Aneesh Kumar K.V wrote:
<span class="quote">&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt; &gt; split_huge_pmd() for file mappings (and DAX too) is implemented by just</span>
<span class="quote">&gt; &gt; clearing pmd entry as we can re-fill this area from page cache on pte</span>
<span class="quote">&gt; &gt; level later.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This means we don&#39;t need deposit page tables when file THP is mapped.</span>
<span class="quote">&gt; &gt; Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()</span>
<span class="quote">&gt; &gt; file THP PMD.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Archs like ppc64 use deposited page table to track the hardware page</span>
<span class="quote">&gt; table slot information. We probably may want to add hooks which arch can</span>
<span class="quote">&gt; use to achieve the same even with file THP </span>

Could you describe more on what kind of information you&#39;re talking about?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - March 21, 2016, 4:33 a.m.</div>
<pre class="content">
&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt; writes:
<span class="quote">
&gt; [ text/plain ]</span>
<span class="quote">&gt; On Fri, Mar 18, 2016 at 07:23:41PM +0530, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; writes:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt;&gt; &gt; split_huge_pmd() for file mappings (and DAX too) is implemented by just</span>
<span class="quote">&gt;&gt; &gt; clearing pmd entry as we can re-fill this area from page cache on pte</span>
<span class="quote">&gt;&gt; &gt; level later.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; This means we don&#39;t need deposit page tables when file THP is mapped.</span>
<span class="quote">&gt;&gt; &gt; Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()</span>
<span class="quote">&gt;&gt; &gt; file THP PMD.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Archs like ppc64 use deposited page table to track the hardware page</span>
<span class="quote">&gt;&gt; table slot information. We probably may want to add hooks which arch can</span>
<span class="quote">&gt;&gt; use to achieve the same even with file THP </span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Could you describe more on what kind of information you&#39;re talking about?</span>
<span class="quote">&gt;</span>

Hardware page table in ppc64 requires us to map each subpage of the huge
page. This is needed because at low level we use segment base page size
to find the hash slot and on TLB miss, we use the faulting address and
base page size (which is 64k even with THP) to find whether we have
the page mapped in hash page table. Since we use base page size of 64K,
we need to make sure that subpages are mapped (on demand) in hash page
table. If we have then mapped we also need to track their hash table
slot information so that we can clear it on invalidate of hugepage.

With THP we used the deposited page table to store the hash slot
information.

-aneesh
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - March 21, 2016, 2:39 p.m.</div>
<pre class="content">
On Mon, Mar 21, 2016 at 10:03:29AM +0530, Aneesh Kumar K.V wrote:
<span class="quote">&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt; &gt; On Fri, Mar 18, 2016 at 07:23:41PM +0530, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt; &gt;&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; writes:</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt; &gt;&gt; &gt; split_huge_pmd() for file mappings (and DAX too) is implemented by just</span>
<span class="quote">&gt; &gt;&gt; &gt; clearing pmd entry as we can re-fill this area from page cache on pte</span>
<span class="quote">&gt; &gt;&gt; &gt; level later.</span>
<span class="quote">&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt; &gt;&gt; &gt; This means we don&#39;t need deposit page tables when file THP is mapped.</span>
<span class="quote">&gt; &gt;&gt; &gt; Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()</span>
<span class="quote">&gt; &gt;&gt; &gt; file THP PMD.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Archs like ppc64 use deposited page table to track the hardware page</span>
<span class="quote">&gt; &gt;&gt; table slot information. We probably may want to add hooks which arch can</span>
<span class="quote">&gt; &gt;&gt; use to achieve the same even with file THP </span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Could you describe more on what kind of information you&#39;re talking about?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hardware page table in ppc64 requires us to map each subpage of the huge</span>
<span class="quote">&gt; page. This is needed because at low level we use segment base page size</span>
<span class="quote">&gt; to find the hash slot and on TLB miss, we use the faulting address and</span>
<span class="quote">&gt; base page size (which is 64k even with THP) to find whether we have</span>
<span class="quote">&gt; the page mapped in hash page table. Since we use base page size of 64K,</span>
<span class="quote">&gt; we need to make sure that subpages are mapped (on demand) in hash page</span>
<span class="quote">&gt; table. If we have then mapped we also need to track their hash table</span>
<span class="quote">&gt; slot information so that we can clear it on invalidate of hugepage.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With THP we used the deposited page table to store the hash slot</span>
<span class="quote">&gt; information.</span>

Could you prepare the patch with these hooks so we can discuss it details?
I still have hard time wrap my had around this.

I think you have the same problem with DAX huge pages. Or you don&#39;t care
about DAX?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - March 21, 2016, 4:42 p.m.</div>
<pre class="content">
&quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt; writes:
<span class="quote">
&gt; [ text/plain ]</span>
<span class="quote">&gt; On Mon, Mar 21, 2016 at 10:03:29AM +0530, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt; writes:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt;&gt; &gt; On Fri, Mar 18, 2016 at 07:23:41PM +0530, Aneesh Kumar K.V wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt; &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt; writes:</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; [ text/plain ]</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; split_huge_pmd() for file mappings (and DAX too) is implemented by just</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; clearing pmd entry as we can re-fill this area from page cache on pte</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; level later.</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; This means we don&#39;t need deposit page tables when file THP is mapped.</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; Therefore we shouldn&#39;t try to withdraw a page table on zap_huge_pmd()</span>
<span class="quote">&gt;&gt; &gt;&gt; &gt; file THP PMD.</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Archs like ppc64 use deposited page table to track the hardware page</span>
<span class="quote">&gt;&gt; &gt;&gt; table slot information. We probably may want to add hooks which arch can</span>
<span class="quote">&gt;&gt; &gt;&gt; use to achieve the same even with file THP </span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Could you describe more on what kind of information you&#39;re talking about?</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Hardware page table in ppc64 requires us to map each subpage of the huge</span>
<span class="quote">&gt;&gt; page. This is needed because at low level we use segment base page size</span>
<span class="quote">&gt;&gt; to find the hash slot and on TLB miss, we use the faulting address and</span>
<span class="quote">&gt;&gt; base page size (which is 64k even with THP) to find whether we have</span>
<span class="quote">&gt;&gt; the page mapped in hash page table. Since we use base page size of 64K,</span>
<span class="quote">&gt;&gt; we need to make sure that subpages are mapped (on demand) in hash page</span>
<span class="quote">&gt;&gt; table. If we have then mapped we also need to track their hash table</span>
<span class="quote">&gt;&gt; slot information so that we can clear it on invalidate of hugepage.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; With THP we used the deposited page table to store the hash slot</span>
<span class="quote">&gt;&gt; information.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Could you prepare the patch with these hooks so we can discuss it details?</span>
<span class="quote">&gt; I still have hard time wrap my had around this.</span>


ok
<span class="quote">
&gt;</span>
<span class="quote">&gt; I think you have the same problem with DAX huge pages. Or you don&#39;t care</span>
<span class="quote">&gt; about DAX?</span>
<span class="quote">&gt;</span>

Yes, DAX hugepage will not be working on ppc64. It is there in the TODO
list to get it working :).

-aneesh
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 44468fb7cdbf..c22144e3fe11 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -1684,10 +1684,16 @@</span> <span class="p_context"> int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		struct page *page = pmd_page(orig_pmd);
 		page_remove_rmap(page, true);
 		VM_BUG_ON_PAGE(page_mapcount(page) &lt; 0, page);
<span class="p_del">-		add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
 		VM_BUG_ON_PAGE(!PageHead(page), page);
<span class="p_del">-		pte_free(tlb-&gt;mm, pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd));</span>
<span class="p_del">-		atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+		if (PageAnon(page)) {</span>
<span class="p_add">+			pgtable_t pgtable;</span>
<span class="p_add">+			pgtable = pgtable_trans_huge_withdraw(tlb-&gt;mm, pmd);</span>
<span class="p_add">+			pte_free(tlb-&gt;mm, pgtable);</span>
<span class="p_add">+			atomic_long_dec(&amp;tlb-&gt;mm-&gt;nr_ptes);</span>
<span class="p_add">+			add_mm_counter(tlb-&gt;mm, MM_ANONPAGES, -HPAGE_PMD_NR);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			add_mm_counter(tlb-&gt;mm, MM_FILEPAGES, -HPAGE_PMD_NR);</span>
<span class="p_add">+		}</span>
 		spin_unlock(ptl);
 		tlb_remove_page(tlb, page);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



