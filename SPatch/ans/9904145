
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/platform] x86/hyper-v: Use hypercall for remote TLB flush - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/platform] x86/hyper-v: Use hypercall for remote TLB flush</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 16, 2017, 4:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;87shgrmpko.fsf@vitty.brq.redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9904145/mbox/"
   >mbox</a>
|
   <a href="/patch/9904145/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9904145/">/patch/9904145/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A74DC6038C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Aug 2017 16:43:00 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9686028591
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Aug 2017 16:43:00 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8B18228A4B; Wed, 16 Aug 2017 16:43:00 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9670028591
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 16 Aug 2017 16:42:59 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752444AbdHPQmz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Aug 2017 12:42:55 -0400
Received: from mx1.redhat.com ([209.132.183.28]:36120 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752384AbdHPQmw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Aug 2017 12:42:52 -0400
Received: from smtp.corp.redhat.com
	(int-mx04.intmail.prod.int.phx2.redhat.com [10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 2F09D19D28C;
	Wed, 16 Aug 2017 16:42:52 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 2F09D19D28C
Authentication-Results: ext-mx05.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx05.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=vkuznets@redhat.com
Received: from vitty.brq.redhat.com.redhat.com (unknown [10.43.2.155])
	by smtp.corp.redhat.com (Postfix) with ESMTPS id 19E125D974;
	Wed, 16 Aug 2017 16:42:48 +0000 (UTC)
From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
To: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Jork Loeser &lt;Jork.Loeser@microsoft.com&gt;,
	KY Srinivasan &lt;kys@microsoft.com&gt;, Simon Xiao &lt;sixiao@microsoft.com&gt;,
	Haiyang Zhang &lt;haiyangz@microsoft.com&gt;,
	Stephen Hemminger &lt;sthemmin@microsoft.com&gt;,
	&quot;luto\@kernel.org&quot; &lt;luto@kernel.org&gt;, &quot;hpa\@zytor.com&quot; &lt;hpa@zytor.com&gt;,
	&quot;linux-kernel\@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	&quot;rostedt\@goodmis.org&quot; &lt;rostedt@goodmis.org&gt;,
	&quot;andy.shevchenko\@gmail.com&quot; &lt;andy.shevchenko@gmail.com&gt;,
	&quot;tglx\@linutronix.de&quot; &lt;tglx@linutronix.de&gt;,
	&quot;mingo\@kernel.org&quot; &lt;mingo@kernel.org&gt;,
	&quot;linux-tip-commits\@vger.kernel.org&quot; 
	&lt;linux-tip-commits@vger.kernel.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: Re: [tip:x86/platform] x86/hyper-v: Use hypercall for remote TLB
	flush
References: &lt;20170802160921.21791-8-vkuznets@redhat.com&gt;
	&lt;tip-2ffd9e33ce4af4e8cfa3e17bf493defe8474e2eb@git.kernel.org&gt;
	&lt;20170810185646.GI6524@worktop.programming.kicks-ass.net&gt;
	&lt;DM5PR21MB0476915D204F850F7F7C1475A0880@DM5PR21MB0476.namprd21.prod.outlook.com&gt;
	&lt;CY4PR21MB06313B9D59F8846CDDE443F0F1880@CY4PR21MB0631.namprd21.prod.outlook.com&gt;
	&lt;20170810192742.GJ6524@worktop.programming.kicks-ass.net&gt;
	&lt;CY4PR21MB0631989FA0C9135AAD2DD1F8F1890@CY4PR21MB0631.namprd21.prod.outlook.com&gt;
	&lt;20170811090336.lfznz6qzrbhiqwvi@hirez.programming.kicks-ass.net&gt;
	&lt;CA+55aFyXo3CtOCEKn54uA0=21O-KV0zLGvueVujCDSU--kJ7_A@mail.gmail.com&gt;
	&lt;20170811162605.tr4tig4av3q4fll6@hirez.programming.kicks-ass.net&gt;
	&lt;87fucup9ou.fsf@vitty.brq.redhat.com&gt;
Date: Wed, 16 Aug 2017 18:42:47 +0200
In-Reply-To: &lt;87fucup9ou.fsf@vitty.brq.redhat.com&gt; (Vitaly Kuznetsov&#39;s
	message of &quot;Mon, 14 Aug 2017 15:20:49 +0200&quot;)
Message-ID: &lt;87shgrmpko.fsf@vitty.brq.redhat.com&gt;
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/25.2 (gnu/linux)
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=&quot;=-=-=&quot;
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Wed, 16 Aug 2017 16:42:52 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 16, 2017, 4:42 p.m.</div>
<pre class="content">
Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt; writes:
<span class="quote">
&gt; Peter Zijlstra &lt;peterz@infradead.org&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; On Fri, Aug 11, 2017 at 09:16:29AM -0700, Linus Torvalds wrote:</span>
<span class="quote">&gt;&gt;&gt; On Fri, Aug 11, 2017 at 2:03 AM, Peter Zijlstra &lt;peterz@infradead.org&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt;&gt; &gt; I&#39;m sure we talked about using HAVE_RCU_TABLE_FREE for x86 (and yes that</span>
<span class="quote">&gt;&gt;&gt; &gt; would make it work again), but this was some years ago and I cannot</span>
<span class="quote">&gt;&gt;&gt; &gt; readily find those emails.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; I think the only time we really talked about HAVE_RCU_TABLE_FREE for</span>
<span class="quote">&gt;&gt;&gt; x86 (at least that I was cc&#39;d on) was not because of RCU freeing, but</span>
<span class="quote">&gt;&gt;&gt; because we just wanted to use the generic page table lookup code on</span>
<span class="quote">&gt;&gt;&gt; x86 *despite* not using RCU freeing.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; And we just ended up renaming HAVE_GENERIC_RCU_GUP as HAVE_GENERIC_GUP.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; There was only passing mention of maybe making x86 use RCU, but the</span>
<span class="quote">&gt;&gt;&gt; discussion was really about why the IF flag meant that x86 didn&#39;t need</span>
<span class="quote">&gt;&gt;&gt; to, iirc.</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; I don&#39;t recall us ever discussing *really* making x86 use RCU.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Google finds me this:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   https://lwn.net/Articles/500188/</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Which includes:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;   http://www.mail-archive.com/kvm@vger.kernel.org/msg72918.html</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; which does as was suggested here, selects HAVE_RCU_TABLE_FREE for</span>
<span class="quote">&gt;&gt; PARAVIRT_TLB_FLUSH.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; But yes, this is very much virt specific nonsense, native would never</span>
<span class="quote">&gt;&gt; need this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; In case we decide to go HAVE_RCU_TABLE_FREE for all PARAVIRT-enabled</span>
<span class="quote">&gt; kernels (as it seems to be the easiest/fastest way to fix Xen PV) - what</span>
<span class="quote">&gt; do you think about the required testing? Any suggestion for a</span>
<span class="quote">&gt; specifically crafted micro benchmark in addition to standard</span>
<span class="quote">&gt; ebizzy/kernbench/...?</span>

In the meantime I tested HAVE_RCU_TABLE_FREE with kernbench (enablement
patch I used is attached; I know that it breaks other architectures) on
bare metal with PARAVIRT enabled in config. The results are:

6-CPU host:

Average Half load -j 3 Run (std deviation):
CURRENT					HAVE_RCU_TABLE_FREE
=======					===================
Elapsed Time 400.498 (0.179679)		Elapsed Time 399.909 (0.162853)
User Time 1098.72 (0.278536)		User Time 1097.59 (0.283894)
System Time 100.301 (0.201629)		System Time 99.736 (0.196254)
Percent CPU 299 (0)			Percent CPU 299 (0)
Context Switches 5774.1 (69.2121)	Context Switches 5744.4 (79.4162)
Sleeps 87621.2 (78.1093)		Sleeps 87586.1 (99.7079)

Average Optimal load -j 24 Run (std deviation):
CURRENT					HAVE_RCU_TABLE_FREE
=======					===================
Elapsed Time 219.03 (0.652534)		Elapsed Time 218.959 (0.598674)
User Time 1119.51 (21.3284)		User Time 1118.81 (21.7793)
System Time 100.499 (0.389308)		System Time 99.8335 (0.251423)
Percent CPU 432.5 (136.974)		Percent CPU 432.45 (136.922)
Context Switches 81827.4 (78029.5)	Context Switches 81818.5 (78051)
Sleeps 97124.8 (9822.4)			Sleeps 97207.9 (9955.04)

16-CPU host:

Average Half load -j 8 Run (std deviation):
CURRENT					HAVE_RCU_TABLE_FREE
=======					===================
Elapsed Time 213.538 (3.7891)		Elapsed Time 212.5 (3.10939)
User Time 1306.4 (1.83399)		User Time 1307.65 (1.01364)
System Time 194.59 (0.864378)		System Time 195.478 (0.794588)
Percent CPU 702.6 (13.5388)		Percent CPU 707 (11.1131)
Context Switches 21189.2 (1199.4)	Context Switches 21288.2 (552.388)
Sleeps 89390.2 (482.325)		Sleeps 89677 (277.06)

Average Optimal load -j 64 Run (std deviation):
CURRENT					HAVE_RCU_TABLE_FREE
=======					===================
Elapsed Time 137.866 (0.787928)		Elapsed Time 138.438 (0.218792)
User Time 1488.92 (192.399)		User Time 1489.92 (192.135)
System Time 234.981 (42.5806)		System Time 236.09 (42.8138)
Percent CPU 1057.1 (373.826)		Percent CPU 1057.1 (369.114)
Context Switches 187514 (175324)	Context Switches 187358 (175060)
Sleeps 112633 (24535.5)			Sleeps 111743 (23297.6)

As you can see, there&#39;s no notable difference. I&#39;ll think of a
microbenchmark though.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Additionally, I see another option for us: enable &#39;rcu table free&#39; on</span>
<span class="quote">&gt; boot (e.g. by taking tlb_remove_table to pv_ops and doing boot-time</span>
<span class="quote">&gt; patching for it) so bare metal and other hypervisors are not affected</span>
<span class="quote">&gt; by the change.</span>

It seems there&#39;s no need for that and we can keep things simple...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - Aug. 16, 2017, 9:41 p.m.</div>
<pre class="content">
On 08/16/2017 12:42 PM, Vitaly Kuznetsov wrote:
<span class="quote">&gt; Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt; writes:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; Peter Zijlstra &lt;peterz@infradead.org&gt; writes:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; On Fri, Aug 11, 2017 at 09:16:29AM -0700, Linus Torvalds wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Fri, Aug 11, 2017 at 2:03 AM, Peter Zijlstra &lt;peterz@infradead.org&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; I&#39;m sure we talked about using HAVE_RCU_TABLE_FREE for x86 (and yes that</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; would make it work again), but this was some years ago and I cannot</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; readily find those emails.</span>
<span class="quote">&gt;&gt;&gt;&gt; I think the only time we really talked about HAVE_RCU_TABLE_FREE for</span>
<span class="quote">&gt;&gt;&gt;&gt; x86 (at least that I was cc&#39;d on) was not because of RCU freeing, but</span>
<span class="quote">&gt;&gt;&gt;&gt; because we just wanted to use the generic page table lookup code on</span>
<span class="quote">&gt;&gt;&gt;&gt; x86 *despite* not using RCU freeing.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; And we just ended up renaming HAVE_GENERIC_RCU_GUP as HAVE_GENERIC_GUP.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; There was only passing mention of maybe making x86 use RCU, but the</span>
<span class="quote">&gt;&gt;&gt;&gt; discussion was really about why the IF flag meant that x86 didn&#39;t need</span>
<span class="quote">&gt;&gt;&gt;&gt; to, iirc.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; I don&#39;t recall us ever discussing *really* making x86 use RCU.</span>
<span class="quote">&gt;&gt;&gt; Google finds me this:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;   https://lwn.net/Articles/500188/</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Which includes:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;   http://www.mail-archive.com/kvm@vger.kernel.org/msg72918.html</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; which does as was suggested here, selects HAVE_RCU_TABLE_FREE for</span>
<span class="quote">&gt;&gt;&gt; PARAVIRT_TLB_FLUSH.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; But yes, this is very much virt specific nonsense, native would never</span>
<span class="quote">&gt;&gt;&gt; need this.</span>
<span class="quote">&gt;&gt; In case we decide to go HAVE_RCU_TABLE_FREE for all PARAVIRT-enabled</span>
<span class="quote">&gt;&gt; kernels (as it seems to be the easiest/fastest way to fix Xen PV) - what</span>
<span class="quote">&gt;&gt; do you think about the required testing? Any suggestion for a</span>
<span class="quote">&gt;&gt; specifically crafted micro benchmark in addition to standard</span>
<span class="quote">&gt;&gt; ebizzy/kernbench/...?</span>
<span class="quote">&gt; In the meantime I tested HAVE_RCU_TABLE_FREE with kernbench (enablement</span>
<span class="quote">&gt; patch I used is attached; I know that it breaks other architectures) on</span>
<span class="quote">&gt; bare metal with PARAVIRT enabled in config. The results are:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 6-CPU host:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Average Half load -j 3 Run (std deviation):</span>
<span class="quote">&gt; CURRENT					HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; =======					===================</span>
<span class="quote">&gt; Elapsed Time 400.498 (0.179679)		Elapsed Time 399.909 (0.162853)</span>
<span class="quote">&gt; User Time 1098.72 (0.278536)		User Time 1097.59 (0.283894)</span>
<span class="quote">&gt; System Time 100.301 (0.201629)		System Time 99.736 (0.196254)</span>
<span class="quote">&gt; Percent CPU 299 (0)			Percent CPU 299 (0)</span>
<span class="quote">&gt; Context Switches 5774.1 (69.2121)	Context Switches 5744.4 (79.4162)</span>
<span class="quote">&gt; Sleeps 87621.2 (78.1093)		Sleeps 87586.1 (99.7079)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Average Optimal load -j 24 Run (std deviation):</span>
<span class="quote">&gt; CURRENT					HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; =======					===================</span>
<span class="quote">&gt; Elapsed Time 219.03 (0.652534)		Elapsed Time 218.959 (0.598674)</span>
<span class="quote">&gt; User Time 1119.51 (21.3284)		User Time 1118.81 (21.7793)</span>
<span class="quote">&gt; System Time 100.499 (0.389308)		System Time 99.8335 (0.251423)</span>
<span class="quote">&gt; Percent CPU 432.5 (136.974)		Percent CPU 432.45 (136.922)</span>
<span class="quote">&gt; Context Switches 81827.4 (78029.5)	Context Switches 81818.5 (78051)</span>
<span class="quote">&gt; Sleeps 97124.8 (9822.4)			Sleeps 97207.9 (9955.04)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 16-CPU host:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Average Half load -j 8 Run (std deviation):</span>
<span class="quote">&gt; CURRENT					HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; =======					===================</span>
<span class="quote">&gt; Elapsed Time 213.538 (3.7891)		Elapsed Time 212.5 (3.10939)</span>
<span class="quote">&gt; User Time 1306.4 (1.83399)		User Time 1307.65 (1.01364)</span>
<span class="quote">&gt; System Time 194.59 (0.864378)		System Time 195.478 (0.794588)</span>
<span class="quote">&gt; Percent CPU 702.6 (13.5388)		Percent CPU 707 (11.1131)</span>
<span class="quote">&gt; Context Switches 21189.2 (1199.4)	Context Switches 21288.2 (552.388)</span>
<span class="quote">&gt; Sleeps 89390.2 (482.325)		Sleeps 89677 (277.06)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Average Optimal load -j 64 Run (std deviation):</span>
<span class="quote">&gt; CURRENT					HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; =======					===================</span>
<span class="quote">&gt; Elapsed Time 137.866 (0.787928)		Elapsed Time 138.438 (0.218792)</span>
<span class="quote">&gt; User Time 1488.92 (192.399)		User Time 1489.92 (192.135)</span>
<span class="quote">&gt; System Time 234.981 (42.5806)		System Time 236.09 (42.8138)</span>
<span class="quote">&gt; Percent CPU 1057.1 (373.826)		Percent CPU 1057.1 (369.114)</span>
<span class="quote">&gt; Context Switches 187514 (175324)	Context Switches 187358 (175060)</span>
<span class="quote">&gt; Sleeps 112633 (24535.5)			Sleeps 111743 (23297.6)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; As you can see, there&#39;s no notable difference. I&#39;ll think of a</span>
<span class="quote">&gt; microbenchmark though.</span>

FWIW, I was about to send a very similar patch (but with only Xen-PV
enabling RCU-based free by default) and saw similar results with
kernbench, both Xen PV and baremetal.
<span class="quote">
&gt;&gt; Additionally, I see another option for us: enable &#39;rcu table free&#39; on</span>
<span class="quote">&gt;&gt; boot (e.g. by taking tlb_remove_table to pv_ops and doing boot-time</span>
<span class="quote">&gt;&gt; patching for it) so bare metal and other hypervisors are not affected</span>
<span class="quote">&gt;&gt; by the change.</span>
<span class="quote">&gt; It seems there&#39;s no need for that and we can keep things simple...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; -- Vitaly</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; 0001-x86-enable-RCU-based-table-free-when-PARAVIRT.patch</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; &gt;From daf5117706920aebe793d1239fccac2edd4d680c Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt; From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="quote">&gt; Date: Mon, 14 Aug 2017 16:05:05 +0200</span>
<span class="quote">&gt; Subject: [PATCH] x86: enable RCU based table free when PARAVIRT</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/Kconfig      |  1 +</span>
<span class="quote">&gt;  arch/x86/mm/pgtable.c | 16 ++++++++++++++++</span>
<span class="quote">&gt;  mm/memory.c           |  5 +++++</span>
<span class="quote">&gt;  3 files changed, 22 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="quote">&gt; index 781521b7cf9e..9c1666ea04c9 100644</span>
<span class="quote">&gt; --- a/arch/x86/Kconfig</span>
<span class="quote">&gt; +++ b/arch/x86/Kconfig</span>
<span class="quote">&gt; @@ -167,6 +167,7 @@ config X86</span>
<span class="quote">&gt;  	select HAVE_PERF_REGS</span>
<span class="quote">&gt;  	select HAVE_PERF_USER_STACK_DUMP</span>
<span class="quote">&gt;  	select HAVE_REGS_AND_STACK_ACCESS_API</span>
<span class="quote">&gt; +	select HAVE_RCU_TABLE_FREE              if SMP &amp;&amp; PARAVIRT</span>
<span class="quote">&gt;  	select HAVE_RELIABLE_STACKTRACE		if X86_64 &amp;&amp; FRAME_POINTER &amp;&amp; STACK_VALIDATION</span>
<span class="quote">&gt;  	select HAVE_STACK_VALIDATION		if X86_64</span>
<span class="quote">&gt;  	select HAVE_SYSCALL_TRACEPOINTS</span>
<span class="quote">&gt; diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; index 508a708eb9a6..b6aaab9fb3b8 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/pgtable.c</span>
<span class="quote">&gt; @@ -56,7 +56,11 @@ void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	pgtable_page_dtor(pte);</span>
<span class="quote">&gt;  	paravirt_release_pte(page_to_pfn(pte));</span>
<span class="quote">&gt; +#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, pte);</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	tlb_remove_page(tlb, pte);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 2</span>
<span class="quote">&gt; @@ -72,21 +76,33 @@ void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
<span class="quote">&gt;  	tlb-&gt;need_flush_all = 1;</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  	pgtable_pmd_page_dtor(page);</span>
<span class="quote">&gt; +#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, page);</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	tlb_remove_page(tlb, page);</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="quote">&gt;  void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; +#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, virt_to_page(pud));</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	tlb_remove_page(tlb, virt_to_page(pud));</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 4</span>
<span class="quote">&gt;  void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt; +#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt; +	tlb_remove_table(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt;  	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt; +#endif</span>

This can probably be factored out.
<span class="quote">
&gt;  }</span>
<span class="quote">&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
<span class="quote">&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="quote">&gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt; index e158f7ac6730..18d6671b6ae2 100644</span>
<span class="quote">&gt; --- a/mm/memory.c</span>
<span class="quote">&gt; +++ b/mm/memory.c</span>
<span class="quote">&gt; @@ -329,6 +329,11 @@ bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_</span>
<span class="quote">&gt;   * See the comment near struct mmu_table_batch.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static void __tlb_remove_table(void *table)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	free_page_and_swap_cache(table);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>

This needs to be a per-arch routine (e.g. see arch/arm64/include/asm/tlb.h).

-boris
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - Aug. 17, 2017, 7:58 a.m.</div>
<pre class="content">
Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt; writes:
<span class="quote">
&gt; On 08/16/2017 12:42 PM, Vitaly Kuznetsov wrote:</span>
<span class="quote">&gt;&gt; Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt; writes:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; In case we decide to go HAVE_RCU_TABLE_FREE for all PARAVIRT-enabled</span>
<span class="quote">&gt;&gt;&gt; kernels (as it seems to be the easiest/fastest way to fix Xen PV) - what</span>
<span class="quote">&gt;&gt;&gt; do you think about the required testing? Any suggestion for a</span>
<span class="quote">&gt;&gt;&gt; specifically crafted micro benchmark in addition to standard</span>
<span class="quote">&gt;&gt;&gt; ebizzy/kernbench/...?</span>
<span class="quote">&gt;&gt; In the meantime I tested HAVE_RCU_TABLE_FREE with kernbench (enablement</span>
<span class="quote">&gt;&gt; patch I used is attached; I know that it breaks other architectures) on</span>
<span class="quote">&gt;&gt; bare metal with PARAVIRT enabled in config. The results are:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;...</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; As you can see, there&#39;s no notable difference. I&#39;ll think of a</span>
<span class="quote">&gt;&gt; microbenchmark though.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; FWIW, I was about to send a very similar patch (but with only Xen-PV</span>
<span class="quote">&gt; enabling RCU-based free by default) and saw similar results with</span>
<span class="quote">&gt; kernbench, both Xen PV and baremetal.</span>
<span class="quote">&gt;</span>

Thanks for the confirmation,

I&#39;d go with enabling it for PARAVIRT as we will need it for Hyper-V too.

&lt;snip&gt;
<span class="quote">
&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #if CONFIG_PGTABLE_LEVELS &gt; 4</span>
<span class="quote">&gt;&gt;  void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="quote">&gt;&gt; +	tlb_remove_table(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt;&gt; +#else</span>
<span class="quote">&gt;&gt;  	tlb_remove_page(tlb, virt_to_page(p4d));</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This can probably be factored out.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
<span class="quote">&gt;&gt;  #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="quote">&gt;&gt; diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt;&gt; index e158f7ac6730..18d6671b6ae2 100644</span>
<span class="quote">&gt;&gt; --- a/mm/memory.c</span>
<span class="quote">&gt;&gt; +++ b/mm/memory.c</span>
<span class="quote">&gt;&gt; @@ -329,6 +329,11 @@ bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_</span>
<span class="quote">&gt;&gt;   * See the comment near struct mmu_table_batch.</span>
<span class="quote">&gt;&gt;   */</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +static void __tlb_remove_table(void *table)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	free_page_and_swap_cache(table);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This needs to be a per-arch routine (e.g. see arch/arm64/include/asm/tlb.h).</span>
<span class="quote">&gt;</span>

Yea, this was a quick-and-dirty x86-only patch.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
From daf5117706920aebe793d1239fccac2edd4d680c Mon Sep 17 00:00:00 2001
From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
Date: Mon, 14 Aug 2017 16:05:05 +0200
Subject: [PATCH] x86: enable RCU based table free when PARAVIRT

Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;
<span class="p_del">---</span>
 arch/x86/Kconfig      |  1 +
 arch/x86/mm/pgtable.c | 16 ++++++++++++++++
 mm/memory.c           |  5 +++++
 3 files changed, 22 insertions(+)

<span class="p_header">diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig</span>
<span class="p_header">index 781521b7cf9e..9c1666ea04c9 100644</span>
<span class="p_header">--- a/arch/x86/Kconfig</span>
<span class="p_header">+++ b/arch/x86/Kconfig</span>
<span class="p_chunk">@@ -167,6 +167,7 @@</span> <span class="p_context"> config X86</span>
 	select HAVE_PERF_REGS
 	select HAVE_PERF_USER_STACK_DUMP
 	select HAVE_REGS_AND_STACK_ACCESS_API
<span class="p_add">+	select HAVE_RCU_TABLE_FREE              if SMP &amp;&amp; PARAVIRT</span>
 	select HAVE_RELIABLE_STACKTRACE		if X86_64 &amp;&amp; FRAME_POINTER &amp;&amp; STACK_VALIDATION
 	select HAVE_STACK_VALIDATION		if X86_64
 	select HAVE_SYSCALL_TRACEPOINTS
<span class="p_header">diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c</span>
<span class="p_header">index 508a708eb9a6..b6aaab9fb3b8 100644</span>
<span class="p_header">--- a/arch/x86/mm/pgtable.c</span>
<span class="p_header">+++ b/arch/x86/mm/pgtable.c</span>
<span class="p_chunk">@@ -56,7 +56,11 @@</span> <span class="p_context"> void ___pte_free_tlb(struct mmu_gather *tlb, struct page *pte)</span>
 {
 	pgtable_page_dtor(pte);
 	paravirt_release_pte(page_to_pfn(pte));
<span class="p_add">+#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="p_add">+	tlb_remove_table(tlb, pte);</span>
<span class="p_add">+#else</span>
 	tlb_remove_page(tlb, pte);
<span class="p_add">+#endif</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 2
<span class="p_chunk">@@ -72,21 +76,33 @@</span> <span class="p_context"> void ___pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd)</span>
 	tlb-&gt;need_flush_all = 1;
 #endif
 	pgtable_pmd_page_dtor(page);
<span class="p_add">+#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="p_add">+	tlb_remove_table(tlb, page);</span>
<span class="p_add">+#else</span>
 	tlb_remove_page(tlb, page);
<span class="p_add">+#endif</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
 void ___pud_free_tlb(struct mmu_gather *tlb, pud_t *pud)
 {
 	paravirt_release_pud(__pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_add">+#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(pud));</span>
<span class="p_add">+#else</span>
 	tlb_remove_page(tlb, virt_to_page(pud));
<span class="p_add">+#endif</span>
 }
 
 #if CONFIG_PGTABLE_LEVELS &gt; 4
 void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d)
 {
 	paravirt_release_p4d(__pa(p4d) &gt;&gt; PAGE_SHIFT);
<span class="p_add">+#ifdef CONFIG_HAVE_RCU_TABLE_FREE</span>
<span class="p_add">+	tlb_remove_table(tlb, virt_to_page(p4d));</span>
<span class="p_add">+#else</span>
 	tlb_remove_page(tlb, virt_to_page(p4d));
<span class="p_add">+#endif</span>
 }
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index e158f7ac6730..18d6671b6ae2 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -329,6 +329,11 @@</span> <span class="p_context"> bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_</span>
  * See the comment near struct mmu_table_batch.
  */
 
<span class="p_add">+static void __tlb_remove_table(void *table)</span>
<span class="p_add">+{</span>
<span class="p_add">+	free_page_and_swap_cache(table);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void tlb_remove_table_smp_sync(void *arg)
 {
 	/* Simply deliver the interrupt */
<span class="p_del">-- </span>
2.13.4


</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



