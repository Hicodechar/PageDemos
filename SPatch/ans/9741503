
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,06/11] x86/mm: Refactor flush_tlb_mm_range() to merge local and remote cases - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,06/11] x86/mm: Refactor flush_tlb_mm_range() to merge local and remote cases</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>May 22, 2017, 10:30 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;5bc77be16526cb03e4860f7feec99719ed81f0b6.1495492063.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9741503/mbox/"
   >mbox</a>
|
   <a href="/patch/9741503/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9741503/">/patch/9741503/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C4E3F60392 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 22:32:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B8135262FF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 22:32:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id AC94628770; Mon, 22 May 2017 22:32:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F1F41262FF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 22 May 2017 22:32:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1762500AbdEVWcP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 May 2017 18:32:15 -0400
Received: from mail.kernel.org ([198.145.29.99]:48166 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1761115AbdEVWaZ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 May 2017 18:30:25 -0400
Received: from localhost (ycr.static.monkeybrains.net [199.241.202.194])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 836EF239E9;
	Mon, 22 May 2017 22:30:24 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org 836EF239E9
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: &quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Nadav Amit &lt;namit@vmware.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;
Subject: [PATCH v2 06/11] x86/mm: Refactor flush_tlb_mm_range() to merge
	local and remote cases
Date: Mon, 22 May 2017 15:30:06 -0700
Message-Id: &lt;5bc77be16526cb03e4860f7feec99719ed81f0b6.1495492063.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;cover.1495492063.git.luto@kernel.org&gt;
References: &lt;cover.1495492063.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1495492063.git.luto@kernel.org&gt;
References: &lt;cover.1495492063.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - May 22, 2017, 10:30 p.m.</div>
<pre class="content">
The local flush path is very similar to the remote flush path.
Merge them.

This is intended to make no difference to behavior whatsoever.  It
removes some code and will make future changes to the flushing
mechanics simpler.

This patch does remove one small optimization: flush_tlb_mm_range()
now has an unconditional smp_mb() instead of using MOV to CR3 or
INVLPG as a full barrier when applicable.  I think this is okay for
a few reasons.  First, smp_mb() is quite cheap compared to the cost
of a TLB flush.  Second, this rearrangement makes a bigger
optimization available: with some work on the SMP function call
code, we could do the local and remote flushes in parallel.  Third,
I&#39;m planning a rework of the TLB flush algorithm that will require
an atomic operation at the beginning of each flush, and that
operation will replace the smp_mb().

Cc: Rik van Riel &lt;riel@redhat.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: Nadav Amit &lt;namit@vmware.com&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Arjan van de Ven &lt;arjan@linux.intel.com&gt;
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/include/asm/tlbflush.h |   1 -
 arch/x86/mm/tlb.c               | 113 +++++++++++++++++-----------------------
 2 files changed, 48 insertions(+), 66 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 6f439ac92026..9934c7c99213 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -225,7 +225,6 @@</span> <span class="p_context"> static inline void __flush_tlb_one(unsigned long addr)</span>
  * ..but the i386 has somewhat limited tlb flushing capabilities,
  * and page-granular flushes are available only on i486 and up.
  */
<span class="p_del">-</span>
 struct flush_tlb_info {
 	struct mm_struct *mm;
 	unsigned long start;
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 3143c9a180e5..12b8812e8926 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -216,22 +216,9 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
  * write/read ordering problems.
  */
 
<span class="p_del">-/*</span>
<span class="p_del">- * TLB flush funcation:</span>
<span class="p_del">- * 1) Flush the tlb entries if the cpu uses the mm that&#39;s being flushed.</span>
<span class="p_del">- * 2) Leave the mm if we are in the lazy tlb mode.</span>
<span class="p_del">- */</span>
<span class="p_del">-static void flush_tlb_func(void *info)</span>
<span class="p_add">+static void flush_tlb_func_common(const struct flush_tlb_info *f,</span>
<span class="p_add">+				  bool local, enum tlb_flush_reason reason)</span>
 {
<span class="p_del">-	const struct flush_tlb_info *f = info;</span>
<span class="p_del">-</span>
<span class="p_del">-	inc_irq_stat(irq_tlb_count);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (f-&gt;mm &amp;&amp; f-&gt;mm != this_cpu_read(cpu_tlbstate.active_mm))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	count_vm_tlb_event(NR_TLB_REMOTE_FLUSH_RECEIVED);</span>
<span class="p_del">-</span>
 	if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {
 		leave_mm(smp_processor_id());
 		return;
<span class="p_chunk">@@ -239,7 +226,9 @@</span> <span class="p_context"> static void flush_tlb_func(void *info)</span>
 
 	if (f-&gt;end == TLB_FLUSH_ALL) {
 		local_flush_tlb();
<span class="p_del">-		trace_tlb_flush(TLB_REMOTE_SHOOTDOWN, TLB_FLUSH_ALL);</span>
<span class="p_add">+		if (local)</span>
<span class="p_add">+			count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);</span>
<span class="p_add">+		trace_tlb_flush(reason, TLB_FLUSH_ALL);</span>
 	} else {
 		unsigned long addr;
 		unsigned long nr_pages =
<span class="p_chunk">@@ -249,10 +238,32 @@</span> <span class="p_context"> static void flush_tlb_func(void *info)</span>
 			__flush_tlb_single(addr);
 			addr += PAGE_SIZE;
 		}
<span class="p_del">-		trace_tlb_flush(TLB_REMOTE_SHOOTDOWN, nr_pages);</span>
<span class="p_add">+		if (local)</span>
<span class="p_add">+			count_vm_tlb_events(NR_TLB_LOCAL_FLUSH_ONE, nr_pages);</span>
<span class="p_add">+		trace_tlb_flush(reason, nr_pages);</span>
 	}
 }
 
<span class="p_add">+static void flush_tlb_func_local(void *info, enum tlb_flush_reason reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const struct flush_tlb_info *f = info;</span>
<span class="p_add">+</span>
<span class="p_add">+	flush_tlb_func_common(f, true, reason);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void flush_tlb_func_remote(void *info)</span>
<span class="p_add">+{</span>
<span class="p_add">+	const struct flush_tlb_info *f = info;</span>
<span class="p_add">+</span>
<span class="p_add">+	inc_irq_stat(irq_tlb_count);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (f-&gt;mm &amp;&amp; f-&gt;mm != this_cpu_read(cpu_tlbstate.active_mm))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	count_vm_tlb_event(NR_TLB_REMOTE_FLUSH_RECEIVED);</span>
<span class="p_add">+	flush_tlb_func_common(f, false, TLB_REMOTE_SHOOTDOWN);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void native_flush_tlb_others(const struct cpumask *cpumask,
 			     const struct flush_tlb_info *info)
 {
<span class="p_chunk">@@ -269,11 +280,11 @@</span> <span class="p_context"> void native_flush_tlb_others(const struct cpumask *cpumask,</span>
 		cpu = smp_processor_id();
 		cpumask = uv_flush_tlb_others(cpumask, info);
 		if (cpumask)
<span class="p_del">-			smp_call_function_many(cpumask, flush_tlb_func,</span>
<span class="p_add">+			smp_call_function_many(cpumask, flush_tlb_func_remote,</span>
 					       (void *)info, 1);
 		return;
 	}
<span class="p_del">-	smp_call_function_many(cpumask, flush_tlb_func,</span>
<span class="p_add">+	smp_call_function_many(cpumask, flush_tlb_func_remote,</span>
 			       (void *)info, 1);
 }
 
<span class="p_chunk">@@ -292,61 +303,33 @@</span> <span class="p_context"> static unsigned long tlb_single_page_flush_ceiling __read_mostly = 33;</span>
 void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
 				unsigned long end, unsigned long vmflag)
 {
<span class="p_del">-	unsigned long addr;</span>
<span class="p_del">-	struct flush_tlb_info info;</span>
<span class="p_del">-	/* do a global flush by default */</span>
<span class="p_del">-	unsigned long base_pages_to_flush = TLB_FLUSH_ALL;</span>
<span class="p_del">-</span>
<span class="p_del">-	preempt_disable();</span>
<span class="p_add">+	int cpu;</span>
 
<span class="p_del">-	if ((end != TLB_FLUSH_ALL) &amp;&amp; !(vmflag &amp; VM_HUGETLB))</span>
<span class="p_del">-		base_pages_to_flush = (end - start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_del">-	if (base_pages_to_flush &gt; tlb_single_page_flush_ceiling)</span>
<span class="p_del">-		base_pages_to_flush = TLB_FLUSH_ALL;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (current-&gt;active_mm != mm) {</span>
<span class="p_del">-		/* Synchronize with switch_mm. */</span>
<span class="p_del">-		smp_mb();</span>
<span class="p_del">-</span>
<span class="p_del">-		goto out;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (this_cpu_read(cpu_tlbstate.state) != TLBSTATE_OK) {</span>
<span class="p_del">-		leave_mm(smp_processor_id());</span>
<span class="p_add">+	struct flush_tlb_info info = {</span>
<span class="p_add">+		.mm = mm,</span>
<span class="p_add">+	};</span>
 
<span class="p_del">-		/* Synchronize with switch_mm. */</span>
<span class="p_del">-		smp_mb();</span>
<span class="p_add">+	cpu = get_cpu();</span>
 
<span class="p_del">-		goto out;</span>
<span class="p_del">-	}</span>
<span class="p_add">+	/* Synchronize with switch_mm. */</span>
<span class="p_add">+	smp_mb();</span>
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Both branches below are implicit full barriers (MOV to CR or</span>
<span class="p_del">-	 * INVLPG) that synchronize with switch_mm.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (base_pages_to_flush == TLB_FLUSH_ALL) {</span>
<span class="p_del">-		count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);</span>
<span class="p_del">-		local_flush_tlb();</span>
<span class="p_add">+	/* Should we flush just the requested range? */</span>
<span class="p_add">+	if ((end != TLB_FLUSH_ALL) &amp;&amp;</span>
<span class="p_add">+	    !(vmflag &amp; VM_HUGETLB) &amp;&amp;</span>
<span class="p_add">+	    ((end - start) &gt;&gt; PAGE_SHIFT) &lt;= tlb_single_page_flush_ceiling) {</span>
<span class="p_add">+		info.start = start;</span>
<span class="p_add">+		info.end = end;</span>
 	} else {
<span class="p_del">-		/* flush range by one by one &#39;invlpg&#39; */</span>
<span class="p_del">-		for (addr = start; addr &lt; end;	addr += PAGE_SIZE) {</span>
<span class="p_del">-			count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);</span>
<span class="p_del">-			__flush_tlb_single(addr);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-	trace_tlb_flush(TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush);</span>
<span class="p_del">-out:</span>
<span class="p_del">-	info.mm = mm;</span>
<span class="p_del">-	if (base_pages_to_flush == TLB_FLUSH_ALL) {</span>
 		info.start = 0UL;
 		info.end = TLB_FLUSH_ALL;
<span class="p_del">-	} else {</span>
<span class="p_del">-		info.start = start;</span>
<span class="p_del">-		info.end = end;</span>
 	}
<span class="p_del">-	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) &lt; nr_cpu_ids)</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mm == current-&gt;active_mm)</span>
<span class="p_add">+		flush_tlb_func_local(&amp;info, TLB_LOCAL_MM_SHOOTDOWN);</span>
<span class="p_add">+	if (cpumask_any_but(mm_cpumask(mm), cpu) &lt; nr_cpu_ids)</span>
 		flush_tlb_others(mm_cpumask(mm), &amp;info);
<span class="p_del">-	preempt_enable();</span>
<span class="p_add">+	put_cpu();</span>
 }
 
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



