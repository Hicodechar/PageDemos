
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,2/6] mm/hugetlb: add hugetlb_mcopy_atomic_pte for userfaultfd support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,2/6] mm/hugetlb: add hugetlb_mcopy_atomic_pte for userfaultfd support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 6, 2016, 5:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1465235131-6112-3-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9158953/mbox/"
   >mbox</a>
|
   <a href="/patch/9158953/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9158953/">/patch/9158953/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E846960759 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:09 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DDA1828210
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D21922834E; Mon,  6 Jun 2016 17:46:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3E56428210
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  6 Jun 2016 17:46:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752940AbcFFRqE (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 6 Jun 2016 13:46:04 -0400
Received: from aserp1040.oracle.com ([141.146.126.69]:16482 &quot;EHLO
	aserp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751874AbcFFRqB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 6 Jun 2016 13:46:01 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by aserp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id u56Hjnnb028329
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Mon, 6 Jun 2016 17:45:49 GMT
Received: from aserv0121.oracle.com (aserv0121.oracle.com [141.146.126.235])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id
	u56HjmVb029534
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Mon, 6 Jun 2016 17:45:48 GMT
Received: from abhmp0016.oracle.com (abhmp0016.oracle.com [141.146.116.22])
	by aserv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	u56HjlHV015512; Mon, 6 Jun 2016 17:45:48 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 06 Jun 2016 10:45:47 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 2/6] mm/hugetlb: add hugetlb_mcopy_atomic_pte for
	userfaultfd support
Date: Mon,  6 Jun 2016 10:45:27 -0700
Message-Id: &lt;1465235131-6112-3-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.11
In-Reply-To: &lt;1465235131-6112-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1465235131-6112-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - June 6, 2016, 5:45 p.m.</div>
<pre class="content">
hugetlb_mcopy_atomic_pte is the low level routine that implements
the userfaultfd UFFDIO_COPY command.  It is based on the existing
mcopy_atomic_pte routine with modifications for huge pages.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 include/linux/hugetlb.h |  8 ++++-
 mm/hugetlb.c            | 80 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 87 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index c26d463..35697b2 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -81,6 +81,11 @@</span> <span class="p_context"> void hugetlb_show_meminfo(void);</span>
 unsigned long hugetlb_total_pages(void);
 int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,
 			unsigned long address, unsigned int flags);
<span class="p_add">+int hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm, pte_t *dst_pte,</span>
<span class="p_add">+				struct vm_area_struct *dst_vma,</span>
<span class="p_add">+				unsigned long dst_addr,</span>
<span class="p_add">+				unsigned long src_addr,</span>
<span class="p_add">+				struct page **pagep);</span>
 int hugetlb_reserve_pages(struct inode *inode, long from, long to,
 						struct vm_area_struct *vma,
 						vm_flags_t vm_flags);
<span class="p_chunk">@@ -149,6 +154,8 @@</span> <span class="p_context"> static inline void hugetlb_show_meminfo(void)</span>
 #define is_hugepage_only_range(mm, addr, len)	0
 #define hugetlb_free_pgd_range(tlb, addr, end, floor, ceiling) ({BUG(); 0; })
 #define hugetlb_fault(mm, vma, addr, flags)	({ BUG(); 0; })
<span class="p_add">+#define hugetlb_mcopy_atomic_pte(dst_mm, dst_pte, dst_vma, dst_addr, \</span>
<span class="p_add">+				src_addr, pagep)	({ BUG(); 0; })</span>
 #define huge_pte_offset(mm, address)	0
 static inline int dequeue_hwpoisoned_huge_page(struct page *page)
 {
<span class="p_chunk">@@ -272,7 +279,6 @@</span> <span class="p_context"> static inline bool is_file_hugepages(struct file *file)</span>
 	return is_file_shm_hugepages(file);
 }
 
<span class="p_del">-</span>
 #else /* !CONFIG_HUGETLBFS */
 
 #define is_file_hugepages(file)			false
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 0949d0d..4943d8b 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3837,6 +3837,86 @@</span> <span class="p_context"> out_mutex:</span>
 	return ret;
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Used by userfaultfd UFFDIO_COPY.  Based on mcopy_atomic_pte with</span>
<span class="p_add">+ * modifications for huge pages.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm,</span>
<span class="p_add">+			    pte_t *dst_pte,</span>
<span class="p_add">+			    struct vm_area_struct *dst_vma,</span>
<span class="p_add">+			    unsigned long dst_addr,</span>
<span class="p_add">+			    unsigned long src_addr,</span>
<span class="p_add">+			    struct page **pagep)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hstate *h = hstate_vma(dst_vma);</span>
<span class="p_add">+	pte_t _dst_pte;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!*pagep) {</span>
<span class="p_add">+		ret = -ENOMEM;</span>
<span class="p_add">+		page = alloc_huge_page(dst_vma, dst_addr, 0);</span>
<span class="p_add">+		if (!page)</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = copy_huge_page_from_user((const void __user *) src_addr,</span>
<span class="p_add">+						page, pages_per_huge_page(h));</span>
<span class="p_add">+</span>
<span class="p_add">+		/* fallback to copy_from_user outside mmap_sem */</span>
<span class="p_add">+		if (unlikely(ret)) {</span>
<span class="p_add">+			ret = -EFAULT;</span>
<span class="p_add">+			*pagep = page;</span>
<span class="p_add">+			/* don&#39;t free the page */</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		page = *pagep;</span>
<span class="p_add">+		*pagep = NULL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The memory barrier inside __SetPageUptodate makes sure that</span>
<span class="p_add">+	 * preceding stores to the page contents become visible before</span>
<span class="p_add">+	 * the set_pte_at() write.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	__SetPageUptodate(page);</span>
<span class="p_add">+	set_page_huge_active(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = huge_pte_lockptr(h, dst_mm, dst_pte);</span>
<span class="p_add">+	spin_lock(ptl);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = -EEXIST;</span>
<span class="p_add">+	if (!huge_pte_none(huge_ptep_get(dst_pte)))</span>
<span class="p_add">+		goto out_release_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	ClearPagePrivate(page);</span>
<span class="p_add">+	hugepage_add_new_anon_rmap(page, dst_vma, dst_addr);</span>
<span class="p_add">+</span>
<span class="p_add">+	_dst_pte = make_huge_pte(dst_vma, page, dst_vma-&gt;vm_flags &amp; VM_WRITE);</span>
<span class="p_add">+	if (dst_vma-&gt;vm_flags &amp; VM_WRITE)</span>
<span class="p_add">+		_dst_pte = huge_pte_mkdirty(_dst_pte);</span>
<span class="p_add">+	_dst_pte = pte_mkyoung(_dst_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	set_huge_pte_at(dst_mm, dst_addr, dst_pte, _dst_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	(void)huge_ptep_set_access_flags(dst_vma, dst_addr, dst_pte, _dst_pte,</span>
<span class="p_add">+					dst_vma-&gt;vm_flags &amp; VM_WRITE);</span>
<span class="p_add">+	hugetlb_count_add(pages_per_huge_page(h), dst_mm);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* No need to invalidate - it was non-present before */</span>
<span class="p_add">+	update_mmu_cache(dst_vma, dst_addr, dst_pte);</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	ret = 0;</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+out_release_unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	goto out;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 long follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,
 			 struct page **pages, struct vm_area_struct **vmas,
 			 unsigned long *position, unsigned long *nr_pages,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



