
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,3/3] mm/hugetlb: use find_alloc_contig_pages() to allocate gigantic pages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,3/3] mm/hugetlb: use find_alloc_contig_pages() to allocate gigantic pages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 12, 2018, 10:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180212222056.9735-4-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10214695/mbox/"
   >mbox</a>
|
   <a href="/patch/10214695/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10214695/">/patch/10214695/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	C2FD560153 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Feb 2018 22:23:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ABEBB28B8B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Feb 2018 22:23:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 961E428B8E; Mon, 12 Feb 2018 22:23:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A709428B8B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 12 Feb 2018 22:23:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932961AbeBLWXx (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 12 Feb 2018 17:23:53 -0500
Received: from aserp2130.oracle.com ([141.146.126.79]:58356 &quot;EHLO
	aserp2130.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932504AbeBLWVs (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 12 Feb 2018 17:21:48 -0500
Received: from pps.filterd (aserp2130.oracle.com [127.0.0.1])
	by aserp2130.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w1CMHS76166306; Mon, 12 Feb 2018 22:21:26 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references;
	s=corp-2017-10-26; 
	bh=8eoVI/dpx85pAGfWiILLl+67v1kmRrbwupkZEtNcl9k=;
	b=DiPH6I2NPqF/zO+h5lXNwTWjJnwWxu5R97bPv95DxaKkPW+sFQ7tVEX526IZPzsWk29n
	V/P1/W1Of/0Mk1+OaYUQdopmHT3Fj37HIcTiLQL48tDUBk1UKB0n7sJjVqg00gIsIr+E
	NFh7k2FUjf8DM5fw68pMQkjUFeV/o0ydKgugaNPTvVyQrGdqgCIXp15OGe5JTTDZ7NTm
	/mLrwkiNMMenZ2ab98DDAlNSNeqworQwTtrk7zt3xICpGJnLdhOdJrUtE2OEhA+X/f3g
	Rp/trXEEKgJlLQJGo9dGgR4A7MGNK5OPCi9dT8hq6zCmDPaxxrZwm91oRaHpb2eX7v8q
	0Q== 
Received: from aserv0021.oracle.com (aserv0021.oracle.com [141.146.126.233])
	by aserp2130.oracle.com with ESMTP id 2g3jw0r7bw-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Mon, 12 Feb 2018 22:21:26 +0000
Received: from aserv0122.oracle.com (aserv0122.oracle.com [141.146.126.236])
	by aserv0021.oracle.com (8.14.4/8.14.4) with ESMTP id
	w1CMLPDA008708
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Mon, 12 Feb 2018 22:21:25 GMT
Received: from abhmp0011.oracle.com (abhmp0011.oracle.com [141.146.116.17])
	by aserv0122.oracle.com (8.14.4/8.14.4) with ESMTP id
	w1CMLMhC017421; Mon, 12 Feb 2018 22:21:23 GMT
Received: from monkey.oracle.com (/98.246.252.205)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 12 Feb 2018 14:21:22 -0800
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Michal Hocko &lt;mhocko@kernel.org&gt;, Christopher Lameter &lt;cl@linux.com&gt;,
	Guy Shattah &lt;sguy@mellanox.com&gt;,
	Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;,
	Michal Nazarewicz &lt;mina86@mina86.com&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	David Nellans &lt;dnellans@nvidia.com&gt;,
	Laura Abbott &lt;labbott@redhat.com&gt;, Pavel Machek &lt;pavel@ucw.cz&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [RFC PATCH 3/3] mm/hugetlb: use find_alloc_contig_pages() to
	allocate gigantic pages
Date: Mon, 12 Feb 2018 14:20:56 -0800
Message-Id: &lt;20180212222056.9735-4-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;20180212222056.9735-1-mike.kravetz@oracle.com&gt;
References: &lt;20180212222056.9735-1-mike.kravetz@oracle.com&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8803
	signatures=668668
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=2 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=479
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1802120282
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Feb. 12, 2018, 10:20 p.m.</div>
<pre class="content">
Use the new find_alloc_contig_pages() interface for the allocation of
gigantic pages.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 88 +++++-------------------------------------------------------
 1 file changed, 6 insertions(+), 82 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 9a334f5fb730..4c0c4f86dcda 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1060,92 +1060,16 @@</span> <span class="p_context"> static void destroy_compound_gigantic_page(struct page *page,</span>
 	__ClearPageHead(page);
 }
 
<span class="p_del">-static void free_gigantic_page(struct page *page, unsigned int order)</span>
<span class="p_add">+static void free_gigantic_page(struct page *page, struct hstate *h)</span>
 {
<span class="p_del">-	free_contig_range(page_to_pfn(page), 1 &lt;&lt; order);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static int __alloc_gigantic_page(unsigned long start_pfn,</span>
<span class="p_del">-				unsigned long nr_pages, gfp_t gfp_mask)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long end_pfn = start_pfn + nr_pages;</span>
<span class="p_del">-	return alloc_contig_range(start_pfn, end_pfn, MIGRATE_MOVABLE,</span>
<span class="p_del">-				  gfp_mask);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool pfn_range_valid_gigantic(struct zone *z,</span>
<span class="p_del">-			unsigned long start_pfn, unsigned long nr_pages)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long i, end_pfn = start_pfn + nr_pages;</span>
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-</span>
<span class="p_del">-	for (i = start_pfn; i &lt; end_pfn; i++) {</span>
<span class="p_del">-		if (!pfn_valid(i))</span>
<span class="p_del">-			return false;</span>
<span class="p_del">-</span>
<span class="p_del">-		page = pfn_to_page(i);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (page_zone(page) != z)</span>
<span class="p_del">-			return false;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (PageReserved(page))</span>
<span class="p_del">-			return false;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (page_count(page) &gt; 0)</span>
<span class="p_del">-			return false;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (PageHuge(page))</span>
<span class="p_del">-			return false;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return true;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static bool zone_spans_last_pfn(const struct zone *zone,</span>
<span class="p_del">-			unsigned long start_pfn, unsigned long nr_pages)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned long last_pfn = start_pfn + nr_pages - 1;</span>
<span class="p_del">-	return zone_spans_pfn(zone, last_pfn);</span>
<span class="p_add">+	free_contig_pages(page, pages_per_huge_page(h));</span>
 }
 
 static struct page *alloc_gigantic_page(int nid, struct hstate *h)
 {
<span class="p_del">-	unsigned int order = huge_page_order(h);</span>
<span class="p_del">-	unsigned long nr_pages = 1 &lt;&lt; order;</span>
<span class="p_del">-	unsigned long ret, pfn, flags;</span>
<span class="p_del">-	struct zonelist *zonelist;</span>
<span class="p_del">-	struct zone *zone;</span>
<span class="p_del">-	struct zoneref *z;</span>
<span class="p_del">-	gfp_t gfp_mask;</span>
<span class="p_del">-</span>
<span class="p_del">-	gfp_mask = htlb_alloc_mask(h) | __GFP_THISNODE;</span>
<span class="p_del">-	zonelist = node_zonelist(nid, gfp_mask);</span>
<span class="p_del">-	for_each_zone_zonelist_nodemask(zone, z, zonelist, gfp_zone(gfp_mask), NULL) {</span>
<span class="p_del">-		spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
<span class="p_add">+	gfp_t gfp_mask = htlb_alloc_mask(h) | __GFP_THISNODE;</span>
 
<span class="p_del">-		pfn = ALIGN(zone-&gt;zone_start_pfn, nr_pages);</span>
<span class="p_del">-		while (zone_spans_last_pfn(zone, pfn, nr_pages)) {</span>
<span class="p_del">-			if (pfn_range_valid_gigantic(zone, pfn, nr_pages)) {</span>
<span class="p_del">-				/*</span>
<span class="p_del">-				 * We release the zone lock here because</span>
<span class="p_del">-				 * alloc_contig_range() will also lock the zone</span>
<span class="p_del">-				 * at some point. If there&#39;s an allocation</span>
<span class="p_del">-				 * spinning on this lock, it may win the race</span>
<span class="p_del">-				 * and cause alloc_contig_range() to fail...</span>
<span class="p_del">-				 */</span>
<span class="p_del">-				spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="p_del">-				ret = __alloc_gigantic_page(pfn, nr_pages, gfp_mask);</span>
<span class="p_del">-				if (!ret)</span>
<span class="p_del">-					return pfn_to_page(pfn);</span>
<span class="p_del">-				spin_lock_irqsave(&amp;zone-&gt;lock, flags);</span>
<span class="p_del">-			}</span>
<span class="p_del">-			pfn += nr_pages;</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		spin_unlock_irqrestore(&amp;zone-&gt;lock, flags);</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return NULL;</span>
<span class="p_add">+	return find_alloc_contig_pages(huge_page_order(h), gfp_mask, nid, NULL);</span>
 }
 
 static void prep_new_huge_page(struct hstate *h, struct page *page, int nid);
<span class="p_chunk">@@ -1181,7 +1105,7 @@</span> <span class="p_context"> static int alloc_fresh_gigantic_page(struct hstate *h,</span>
 
 #else /* !CONFIG_ARCH_HAS_GIGANTIC_PAGE */
 static inline bool gigantic_page_supported(void) { return false; }
<span class="p_del">-static inline void free_gigantic_page(struct page *page, unsigned int order) { }</span>
<span class="p_add">+static void free_gigantic_page(struct page *page, struct hstate *h) { }</span>
 static inline void destroy_compound_gigantic_page(struct page *page,
 						unsigned int order) { }
 static inline int alloc_fresh_gigantic_page(struct hstate *h,
<span class="p_chunk">@@ -1208,7 +1132,7 @@</span> <span class="p_context"> static void update_and_free_page(struct hstate *h, struct page *page)</span>
 	set_page_refcounted(page);
 	if (hstate_is_gigantic(h)) {
 		destroy_compound_gigantic_page(page, huge_page_order(h));
<span class="p_del">-		free_gigantic_page(page, huge_page_order(h));</span>
<span class="p_add">+		free_gigantic_page(page, h);</span>
 	} else {
 		__free_pages(page, huge_page_order(h));
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



