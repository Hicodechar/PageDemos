
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] x86: xen: remove the use of VLAIS - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] x86: xen: remove the use of VLAIS</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=171273">Nick Desaulniers</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 6, 2018, 9:39 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1515274788-24548-1-git-send-email-nick.desaulniers@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10148045/mbox/"
   >mbox</a>
|
   <a href="/patch/10148045/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10148045/">/patch/10148045/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	AE36360134 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 21:40:09 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9AF16289A5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 21:40:09 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8F8A42899C; Sat,  6 Jan 2018 21:40:09 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0667E289D5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  6 Jan 2018 21:40:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753718AbeAFVkH (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 6 Jan 2018 16:40:07 -0500
Received: from mail-pg0-f67.google.com ([74.125.83.67]:46152 &quot;EHLO
	mail-pg0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753202AbeAFVkF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 6 Jan 2018 16:40:05 -0500
Received: by mail-pg0-f67.google.com with SMTP id r2so3358491pgq.13
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sat, 06 Jan 2018 13:40:05 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=0MXpq91oSOBj30UqHF7z+2MG8qzfFyBJOS5kuGxV71E=;
	b=LcimxrIdHiLljJcl6RcI+tXksMGY+tsIwEkjfqyh0iIo6EWT9N/KEqNzD9lmQiG6KW
	hnJ9cgX2+qLP+LdKlRPzHrFsklTrc5rDl6rJStHjz5SMF5OVXPDIx7nW1oM2tGSiyXjc
	fa1oJkwvmcGlVdjHTS1GjnPxmikpE/T/nDM5QEz8035/CFCJPmKVhpqQy2cATbGG90Q/
	hWTl7vDUI40KOxiUgLz68UcXPxBd6/YmpB2+aEYKScJ2MVY7EwdCj15CBPSQEQC++RHh
	jkrUkEiV81DJ++0KsaolvyN1ybcANkUnMMmvzgVsRVkk57sOg+HYddWmziU8hd7spMue
	T5cg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=0MXpq91oSOBj30UqHF7z+2MG8qzfFyBJOS5kuGxV71E=;
	b=IP91LzlB8qxVyIsfgCFsv9fKItPyxBo3wAvIIdlCtS+aAkOreYPD8131o2+Re5jExX
	cRYmflQjJ3nvUz91dTOvuJiUcWYkVnPI20jXtkB8KRnZMP2931B+auieO131zqHaAFzV
	LTOLuEYJqFehV2bsNbqHzKTJ01JqFi0sUMN3KKWeIjt/sUjbONI0OmmR8ustLR+GN9ZP
	b33ZDRHtwl4lJBvJxXeen99kd6sDASpoLuO0iEfZhECfpvl9gqH3ssZPuk8N5QAWn+7M
	XfeGGfc8+ETd3OJqFMylEdqMd+JlIL898dbQjPdu7GHwOFI8AnnHDa6hdOPIruVvc1I3
	mQrg==
X-Gm-Message-State: AKGB3mKjYTS3KZb3tEtZYYgYu3u7jjrlKP1r8PI/fGBUQ4yPAs8befdu
	2Cnb3pZeT/1xizRrjV7T7Z8=
X-Google-Smtp-Source: ACJfBovV8lXvPitTWJF/KP+sdpj+PkNeCnAIID7+SY/xiou39+GUholDuqSAb3mdE8r3f6H9fw7F1w==
X-Received: by 10.101.100.200 with SMTP id t8mr5925021pgv.19.1515274804830; 
	Sat, 06 Jan 2018 13:40:04 -0800 (PST)
Received: from localhost.localdomain
	(50-197-184-177-static.hfc.comcastbusiness.net. [50.197.184.177])
	by smtp.googlemail.com with ESMTPSA id
	g9sm17117319pgr.4.2018.01.06.13.40.02
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Sat, 06 Jan 2018 13:40:03 -0800 (PST)
From: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;
To: Juergen Gross &lt;jgross@suse.com&gt;
Cc: ghackmann@google.com, mka@google.com, kees@google.com,
	srhines@google.com, Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, x86@kernel.org,
	xen-devel@lists.xenproject.org, linux-kernel@vger.kernel.org
Subject: [PATCH v2] x86: xen: remove the use of VLAIS
Date: Sat,  6 Jan 2018 13:39:48 -0800
Message-Id: &lt;1515274788-24548-1-git-send-email-nick.desaulniers@gmail.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;c2217783-9d18-912f-8c13-996489dbe602@suse.com&gt;
References: &lt;c2217783-9d18-912f-8c13-996489dbe602@suse.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=171273">Nick Desaulniers</a> - Jan. 6, 2018, 9:39 p.m.</div>
<pre class="content">
Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and
frowned upon by others.

https://lkml.org/lkml/2013/9/23/500

Here, the VLAIS was used because the size of the bitmap returned from
xen_mc_entry() depended on possibly (based on kernel configuration)
runtime sized data. Rather than declaring args as a VLAIS then calling
sizeof on *args, we calculate the appropriate sizeof args manually.
Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()
(thanks to a helpful checkpatch warning from an earlier version of this
patch).

Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;
<span class="signed-off-by">Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
---
Changes in v2:
* Change mask to us DECLARE_BITMAP instead of pointer, as suggested.
* Update commit message to remove mention of pointer.
* Update sizeof calculation to work with array rather than pointer.

 arch/x86/xen/mmu_pv.c | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Jan. 8, 2018, 6:54 a.m.</div>
<pre class="content">
On 06/01/18 22:39, Nick Desaulniers wrote:
<span class="quote">&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt; frowned upon by others.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt; patch).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="reviewed-by">
Reviewed-by: Juergen Gross &lt;jgross@suse.com&gt;</span>


Juergen
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - Jan. 8, 2018, 3:54 p.m.</div>
<pre class="content">
On 01/06/2018 04:39 PM, Nick Desaulniers wrote:
<span class="quote">&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt; frowned upon by others.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt; patch).</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>

Applied to for-linus-4.15.

-boris
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Jan. 8, 2018, 4:10 p.m.</div>
<pre class="content">
On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:
<span class="quote">&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt; frowned upon by others.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt; patch).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; Changes in v2:</span>
<span class="quote">&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct {</span>
<span class="quote">&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt; -#else</span>
<span class="quote">&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt;  	} *args;</span>

Why is it OK for Xen to place this bitmap on-stack in the first place?
That NR_CPUS thing can be fairly huge.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - Jan. 8, 2018, 4:20 p.m.</div>
<pre class="content">
On 01/08/2018 11:10 AM, Peter Zijlstra wrote:
<span class="quote">&gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt;&gt; frowned upon by others.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt;&gt; patch).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Changes in v2:</span>
<span class="quote">&gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	struct {</span>
<span class="quote">&gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt;&gt; -#else</span>
<span class="quote">&gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;  	} *args;</span>
<span class="quote">&gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt; That NR_CPUS thing can be fairly huge.</span>

Err... right. Now it&#39;s even worse than it was before, when the array was
potentially smaller. I&#39;ll drop this.

-boris
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Jan. 8, 2018, 4:26 p.m.</div>
<pre class="content">
On 08/01/18 17:10, Peter Zijlstra wrote:
<span class="quote">&gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt;&gt; frowned upon by others.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt;&gt; patch).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt; Changes in v2:</span>
<span class="quote">&gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	struct {</span>
<span class="quote">&gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt;&gt; -#else</span>
<span class="quote">&gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;  	} *args;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt; That NR_CPUS thing can be fairly huge.</span>

This only a pointer to the bitmap.


Juergen
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Jan. 8, 2018, 4:28 p.m.</div>
<pre class="content">
On 08/01/18 17:20, Boris Ostrovsky wrote:
<span class="quote">&gt; On 01/08/2018 11:10 AM, Peter Zijlstra wrote:</span>
<span class="quote">&gt;&gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt;&gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt;&gt;&gt; frowned upon by others.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt;&gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt;&gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt;&gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt;&gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt;&gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt;&gt;&gt; patch).</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt; Changes in v2:</span>
<span class="quote">&gt;&gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt;&gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt;&gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;&gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;  	struct {</span>
<span class="quote">&gt;&gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt;&gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt;&gt;&gt; -#else</span>
<span class="quote">&gt;&gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt;&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;&gt;  	} *args;</span>
<span class="quote">&gt;&gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt;&gt; That NR_CPUS thing can be fairly huge.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Err... right. Now it&#39;s even worse than it was before, when the array was</span>
<span class="quote">&gt; potentially smaller. I&#39;ll drop this.</span>

No, its only the pointer to the struct, not the struct itself.


Juergen
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - Jan. 8, 2018, 4:35 p.m.</div>
<pre class="content">
On 01/08/2018 11:28 AM, Juergen Gross wrote:
<span class="quote">&gt; On 08/01/18 17:20, Boris Ostrovsky wrote:</span>
<span class="quote">&gt;&gt; On 01/08/2018 11:10 AM, Peter Zijlstra wrote:</span>
<span class="quote">&gt;&gt;&gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt;&gt;&gt;&gt; frowned upon by others.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt;&gt;&gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt;&gt;&gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt;&gt;&gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt;&gt;&gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt;&gt;&gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt;&gt;&gt;&gt; patch).</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt; Changes in v2:</span>
<span class="quote">&gt;&gt;&gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt;&gt;&gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt;&gt;&gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;&gt;&gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;&gt;  	struct {</span>
<span class="quote">&gt;&gt;&gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt;&gt;&gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt;&gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt;&gt;&gt;&gt; -#else</span>
<span class="quote">&gt;&gt;&gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt;&gt;&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;&gt;&gt;  	} *args;</span>
<span class="quote">&gt;&gt;&gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt;&gt;&gt; That NR_CPUS thing can be fairly huge.</span>
<span class="quote">&gt;&gt; Err... right. Now it&#39;s even worse than it was before, when the array was</span>
<span class="quote">&gt;&gt; potentially smaller. I&#39;ll drop this.</span>
<span class="quote">&gt; No, its only the pointer to the struct, not the struct itself.</span>
<span class="quote">&gt;</span>


It&#39;s the full array, isn&#39;t it?

#define DECLARE_BITMAP(name,bits) \
        unsigned long name[BITS_TO_LONGS(bits)]

&lt;pause&gt;

OK, it *is* a pointer. Sigh...

-boris
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Jan. 8, 2018, 6:49 p.m.</div>
<pre class="content">
* Juergen Gross &lt;jgross@suse.com&gt; wrote:
<span class="quote">
&gt; On 08/01/18 17:10, Peter Zijlstra wrote:</span>
<span class="quote">&gt; &gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt; &gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt; &gt;&gt; frowned upon by others.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt; &gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt; &gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt; &gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt; &gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt; &gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt; &gt;&gt; patch).</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt; &gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt; &gt;&gt; ---</span>
<span class="quote">&gt; &gt;&gt; Changes in v2:</span>
<span class="quote">&gt; &gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt; &gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt; &gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt; &gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; &gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt; &gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; &gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt; &gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt; &gt;&gt;  {</span>
<span class="quote">&gt; &gt;&gt;  	struct {</span>
<span class="quote">&gt; &gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt; &gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt; &gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt; &gt;&gt; -#else</span>
<span class="quote">&gt; &gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt; &gt;&gt; -#endif</span>
<span class="quote">&gt; &gt;&gt;  	} *args;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt; &gt; That NR_CPUS thing can be fairly huge.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This only a pointer to the bitmap.</span>

What&#39;s the maximum NR_CPUs for configs that can run this code, times 8?

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=100191">Juergen Gross</a> - Jan. 9, 2018, 5:35 a.m.</div>
<pre class="content">
On 08/01/18 19:49, Ingo Molnar wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; * Juergen Gross &lt;jgross@suse.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; On 08/01/18 17:10, Peter Zijlstra wrote:</span>
<span class="quote">&gt;&gt;&gt; On Sat, Jan 06, 2018 at 01:39:48PM -0800, Nick Desaulniers wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Variable Length Arrays In Structs (VLAIS) is not supported by Clang, and</span>
<span class="quote">&gt;&gt;&gt;&gt; frowned upon by others.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; https://lkml.org/lkml/2013/9/23/500</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Here, the VLAIS was used because the size of the bitmap returned from</span>
<span class="quote">&gt;&gt;&gt;&gt; xen_mc_entry() depended on possibly (based on kernel configuration)</span>
<span class="quote">&gt;&gt;&gt;&gt; runtime sized data. Rather than declaring args as a VLAIS then calling</span>
<span class="quote">&gt;&gt;&gt;&gt; sizeof on *args, we calculate the appropriate sizeof args manually.</span>
<span class="quote">&gt;&gt;&gt;&gt; Further, we can get rid of the #ifdef&#39;s and rely on num_possible_cpus()</span>
<span class="quote">&gt;&gt;&gt;&gt; (thanks to a helpful checkpatch warning from an earlier version of this</span>
<span class="quote">&gt;&gt;&gt;&gt; patch).</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Suggested-by: Juergen Gross &lt;jgross@suse.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Nick Desaulniers &lt;nick.desaulniers@gmail.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt; Changes in v2:</span>
<span class="quote">&gt;&gt;&gt;&gt; * Change mask to us DECLARE_BITMAP instead of pointer, as suggested.</span>
<span class="quote">&gt;&gt;&gt;&gt; * Update commit message to remove mention of pointer.</span>
<span class="quote">&gt;&gt;&gt;&gt; * Update sizeof calculation to work with array rather than pointer.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  arch/x86/xen/mmu_pv.c | 8 +++-----</span>
<span class="quote">&gt;&gt;&gt;&gt;  1 file changed, 3 insertions(+), 5 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 4d62c07..d850762 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/x86/xen/mmu_pv.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -1325,20 +1325,18 @@ static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="quote">&gt;&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;&gt;  	struct {</span>
<span class="quote">&gt;&gt;&gt;&gt;  		struct mmuext_op op;</span>
<span class="quote">&gt;&gt;&gt;&gt; -#ifdef CONFIG_SMP</span>
<span class="quote">&gt;&gt;&gt;&gt; -		DECLARE_BITMAP(mask, num_processors);</span>
<span class="quote">&gt;&gt;&gt;&gt; -#else</span>
<span class="quote">&gt;&gt;&gt;&gt;  		DECLARE_BITMAP(mask, NR_CPUS);</span>
<span class="quote">&gt;&gt;&gt;&gt; -#endif</span>
<span class="quote">&gt;&gt;&gt;&gt;  	} *args;</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Why is it OK for Xen to place this bitmap on-stack in the first place?</span>
<span class="quote">&gt;&gt;&gt; That NR_CPUS thing can be fairly huge.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This only a pointer to the bitmap.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What&#39;s the maximum NR_CPUs for configs that can run this code, times 8?</span>

Why does this matter? args is a pointer only, so it occupies 8 bytes of
the stack. The structure is only for type correctness.


Juergen
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">index 4d62c07..d850762 100644</span>
<span class="p_header">--- a/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">+++ b/arch/x86/xen/mmu_pv.c</span>
<span class="p_chunk">@@ -1325,20 +1325,18 @@</span> <span class="p_context"> static void xen_flush_tlb_others(const struct cpumask *cpus,</span>
 {
 	struct {
 		struct mmuext_op op;
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-		DECLARE_BITMAP(mask, num_processors);</span>
<span class="p_del">-#else</span>
 		DECLARE_BITMAP(mask, NR_CPUS);
<span class="p_del">-#endif</span>
 	} *args;
 	struct multicall_space mcs;
<span class="p_add">+	const size_t mc_entry_size = sizeof(args-&gt;op) +</span>
<span class="p_add">+		sizeof(args-&gt;mask[0]) * BITS_TO_LONGS(num_possible_cpus());</span>
 
 	trace_xen_mmu_flush_tlb_others(cpus, info-&gt;mm, info-&gt;start, info-&gt;end);
 
 	if (cpumask_empty(cpus))
 		return;		/* nothing to do */
 
<span class="p_del">-	mcs = xen_mc_entry(sizeof(*args));</span>
<span class="p_add">+	mcs = xen_mc_entry(mc_entry_size);</span>
 	args = mcs.args;
 	args-&gt;op.arg2.vcpumask = to_cpumask(args-&gt;mask);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



