
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.16,259/305] x86/power/64: Fix kernel text mapping corruption during image restoration - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.16,259/305] x86/power/64: Fix kernel text mapping corruption during image restoration</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=131">Ben Hutchings</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 13, 2016, 5:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;lsq.1471110171.304372143@decadent.org.uk&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9278553/mbox/"
   >mbox</a>
|
   <a href="/patch/9278553/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9278553/">/patch/9278553/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DDCF66075D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 13 Aug 2016 17:51:31 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D0E7C28A5E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 13 Aug 2016 17:51:31 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C54E828A9B; Sat, 13 Aug 2016 17:51:31 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4BEB128A5E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 13 Aug 2016 17:51:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752778AbcHMRvS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 13 Aug 2016 13:51:18 -0400
Received: from shadbolt.e.decadent.org.uk ([88.96.1.126]:40754 &quot;EHLO
	shadbolt.e.decadent.org.uk&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1752514AbcHMRvR (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 13 Aug 2016 13:51:17 -0400
Received: from 92.40.249.202.threembb.co.uk ([92.40.249.202] helo=deadeye)
	by shadbolt.decadent.org.uk with esmtps
	(TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim 4.84_2)
	(envelope-from &lt;ben@decadent.org.uk&gt;)
	id 1bYd5S-0003Ip-3P; Sat, 13 Aug 2016 18:51:10 +0100
Received: from ben by deadeye with local (Exim 4.87)
	(envelope-from &lt;ben@decadent.org.uk&gt;)
	id 1bYd3i-00035q-7B; Sat, 13 Aug 2016 18:49:22 +0100
Content-Type: text/plain; charset=&quot;UTF-8&quot;
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
MIME-Version: 1.0
From: Ben Hutchings &lt;ben@decadent.org.uk&gt;
To: linux-kernel@vger.kernel.org, stable@vger.kernel.org
CC: akpm@linux-foundation.org, &quot;Logan Gunthorpe&quot; &lt;logang@deltatee.com&gt;,
	&quot;Kees Cook&quot; &lt;keescook@chromium.org&gt;,
	&quot;Rafael J. Wysocki&quot; &lt;rafael.j.wysocki@intel.com&gt;
Date: Sat, 13 Aug 2016 18:42:51 +0100
Message-ID: &lt;lsq.1471110171.304372143@decadent.org.uk&gt;
X-Mailer: LinuxStableQueue (scripts by bwh)
Subject: [PATCH 3.16 259/305] x86/power/64: Fix kernel text mapping
	corruption during image restoration
In-Reply-To: &lt;lsq.1471110169.907390585@decadent.org.uk&gt;
X-SA-Exim-Connect-IP: 92.40.249.202
X-SA-Exim-Mail-From: ben@decadent.org.uk
X-SA-Exim-Scanned: No (on shadbolt.decadent.org.uk);
	SAEximRunCond expanded to false
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=131">Ben Hutchings</a> - Aug. 13, 2016, 5:42 p.m.</div>
<pre class="content">
3.16.37-rc1 review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: &quot;Rafael J. Wysocki&quot; &lt;rafael.j.wysocki@intel.com&gt;</span>

commit 65c0554b73c920023cc8998802e508b798113b46 upstream.

Logan Gunthorpe reports that hibernation stopped working reliably for
him after commit ab76f7b4ab23 (x86/mm: Set NX on gap between __ex_table
and rodata).

That turns out to be a consequence of a long-standing issue with the
64-bit image restoration code on x86, which is that the temporary
page tables set up by it to avoid page tables corruption when the
last bits of the image kernel&#39;s memory contents are copied into
their original page frames re-use the boot kernel&#39;s text mapping,
but that mapping may very well get corrupted just like any other
part of the page tables.  Of course, if that happens, the final
jump to the image kernel&#39;s entry point will go to nowhere.

The exact reason why commit ab76f7b4ab23 matters here is that it
sometimes causes a PMD of a large page to be split into PTEs
that are allocated dynamically and get corrupted during image
restoration as described above.

To fix that issue note that the code copying the last bits of the
image kernel&#39;s memory contents to the page frames occupied by them
previoulsy doesn&#39;t use the kernel text mapping, because it runs from
a special page covered by the identity mapping set up for that code
from scratch.  Hence, the kernel text mapping is only needed before
that code starts to run and then it will only be used just for the
final jump to the image kernel&#39;s entry point.

Accordingly, the temporary page tables set up in swsusp_arch_resume()
on x86-64 need to contain the kernel text mapping too.  That mapping
is only going to be used for the final jump to the image kernel, so
it only needs to cover the image kernel&#39;s entry point, because the
first thing the image kernel does after getting control back is to
switch over to its own original page tables.  Moreover, the virtual
address of the image kernel&#39;s entry point in that mapping has to be
the same as the one mapped by the image kernel&#39;s page tables.

With that in mind, modify the x86-64&#39;s arch_hibernation_header_save()
and arch_hibernation_header_restore() routines to pass the physical
address of the image kernel&#39;s entry point (in addition to its virtual
address) to the boot kernel (a small piece of assembly code involved
in passing the entry point&#39;s virtual address to the image kernel is
not necessary any more after that, so drop it).  Update RESTORE_MAGIC
too to reflect the image header format change.

Next, in set_up_temporary_mappings(), use the physical and virtual
addresses of the image kernel&#39;s entry point passed in the image
header to set up a minimum kernel text mapping (using memory pages
that won&#39;t be overwritten by the image kernel&#39;s memory contents) that
will map those addresses to each other as appropriate.

This makes the concern about the possible corruption of the original
boot kernel text mapping go away and if the the minimum kernel text
mapping used for the final jump marks the image kernel&#39;s entry point
memory as executable, the jump to it is guaraneed to succeed.

Fixes: ab76f7b4ab23 (x86/mm: Set NX on gap between __ex_table and rodata)
Link: http://marc.info/?l=linux-pm&amp;m=146372852823760&amp;w=2
Reported-by: Logan Gunthorpe &lt;logang@deltatee.com&gt;
Reported-and-tested-by: Borislav Petkov &lt;bp@suse.de&gt;
<span class="tested-by">Tested-by: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Rafael J. Wysocki &lt;rafael.j.wysocki@intel.com&gt;</span>
[bwh: Backported to 3.16: adjust context]
<span class="signed-off-by">Signed-off-by: Ben Hutchings &lt;ben@decadent.org.uk&gt;</span>
---
 arch/x86/power/hibernate_64.c     | 97 ++++++++++++++++++++++++++++++++++-----
 arch/x86/power/hibernate_asm_64.S | 55 ++++++++++------------
 2 files changed, 109 insertions(+), 43 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/power/hibernate_64.c</span>
<span class="p_header">+++ b/arch/x86/power/hibernate_64.c</span>
<span class="p_chunk">@@ -19,6 +19,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/mtrr.h&gt;
 #include &lt;asm/sections.h&gt;
 #include &lt;asm/suspend.h&gt;
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
 
 /* Defined in hibernate_asm_64.S */
 extern asmlinkage __visible int restore_image(void);
<span class="p_chunk">@@ -28,6 +29,7 @@</span> <span class="p_context"> extern asmlinkage __visible int restore_</span>
  * kernel&#39;s text (this value is passed in the image header).
  */
 unsigned long restore_jump_address __visible;
<span class="p_add">+unsigned long jump_address_phys;</span>
 
 /*
  * Value of the cr3 register from before the hibernation (this value is passed
<span class="p_chunk">@@ -37,7 +39,43 @@</span> <span class="p_context"> unsigned long restore_cr3 __visible;</span>
 
 pgd_t *temp_level4_pgt __visible;
 
<span class="p_del">-void *relocated_restore_code __visible;</span>
<span class="p_add">+unsigned long relocated_restore_code __visible;</span>
<span class="p_add">+</span>
<span class="p_add">+static int set_up_temporary_text_mapping(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * The new mapping only has to cover the page containing the image</span>
<span class="p_add">+	 * kernel&#39;s entry point (jump_address_phys), because the switch over to</span>
<span class="p_add">+	 * it is carried out by relocated code running from a page allocated</span>
<span class="p_add">+	 * specifically for this purpose and covered by the identity mapping, so</span>
<span class="p_add">+	 * the temporary kernel text mapping is only needed for the final jump.</span>
<span class="p_add">+	 * Moreover, in that mapping the virtual address of the image kernel&#39;s</span>
<span class="p_add">+	 * entry point must be the same as its virtual address in the image</span>
<span class="p_add">+	 * kernel (restore_jump_address), so the image kernel&#39;s</span>
<span class="p_add">+	 * restore_registers() code doesn&#39;t find itself in a different area of</span>
<span class="p_add">+	 * the virtual address space after switching over to the original page</span>
<span class="p_add">+	 * tables used by the image kernel.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	pud = (pud_t *)get_safe_page(GFP_ATOMIC);</span>
<span class="p_add">+	if (!pud)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	pmd = (pmd_t *)get_safe_page(GFP_ATOMIC);</span>
<span class="p_add">+	if (!pmd)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	set_pmd(pmd + pmd_index(restore_jump_address),</span>
<span class="p_add">+		__pmd((jump_address_phys &amp; PMD_MASK) | __PAGE_KERNEL_LARGE_EXEC));</span>
<span class="p_add">+	set_pud(pud + pud_index(restore_jump_address),</span>
<span class="p_add">+		__pud(__pa(pmd) | _KERNPG_TABLE));</span>
<span class="p_add">+	set_pgd(temp_level4_pgt + pgd_index(restore_jump_address),</span>
<span class="p_add">+		__pgd(__pa(pud) | _KERNPG_TABLE));</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
 
 static void *alloc_pgt_page(void *context)
 {
<span class="p_chunk">@@ -59,9 +97,10 @@</span> <span class="p_context"> static int set_up_temporary_mappings(voi</span>
 	if (!temp_level4_pgt)
 		return -ENOMEM;
 
<span class="p_del">-	/* It is safe to reuse the original kernel mapping */</span>
<span class="p_del">-	set_pgd(temp_level4_pgt + pgd_index(__START_KERNEL_map),</span>
<span class="p_del">-		init_level4_pgt[pgd_index(__START_KERNEL_map)]);</span>
<span class="p_add">+	/* Prepare a temporary mapping for the kernel text */</span>
<span class="p_add">+	result = set_up_temporary_text_mapping();</span>
<span class="p_add">+	if (result)</span>
<span class="p_add">+		return result;</span>
 
 	/* Set up the direct mapping from scratch */
 	for (i = 0; i &lt; nr_pfn_mapped; i++) {
<span class="p_chunk">@@ -78,19 +117,50 @@</span> <span class="p_context"> static int set_up_temporary_mappings(voi</span>
 	return 0;
 }
 
<span class="p_add">+static int relocate_restore_code(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+</span>
<span class="p_add">+	relocated_restore_code = get_safe_page(GFP_ATOMIC);</span>
<span class="p_add">+	if (!relocated_restore_code)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+	memcpy((void *)relocated_restore_code, &amp;core_restore_code, PAGE_SIZE);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make the page containing the relocated code executable */</span>
<span class="p_add">+	pgd = (pgd_t *)__va(read_cr3()) + pgd_index(relocated_restore_code);</span>
<span class="p_add">+	pud = pud_offset(pgd, relocated_restore_code);</span>
<span class="p_add">+	if (pud_large(*pud)) {</span>
<span class="p_add">+		set_pud(pud, __pud(pud_val(*pud) &amp; ~_PAGE_NX));</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		pmd_t *pmd = pmd_offset(pud, relocated_restore_code);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmd_large(*pmd)) {</span>
<span class="p_add">+			set_pmd(pmd, __pmd(pmd_val(*pmd) &amp; ~_PAGE_NX));</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			pte_t *pte = pte_offset_kernel(pmd, relocated_restore_code);</span>
<span class="p_add">+</span>
<span class="p_add">+			set_pte(pte, __pte(pte_val(*pte) &amp; ~_PAGE_NX));</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+	__flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 int swsusp_arch_resume(void)
 {
 	int error;
 
 	/* We have got enough memory and from now on we cannot recover */
<span class="p_del">-	if ((error = set_up_temporary_mappings()))</span>
<span class="p_add">+	error = set_up_temporary_mappings();</span>
<span class="p_add">+	if (error)</span>
 		return error;
 
<span class="p_del">-	relocated_restore_code = (void *)get_safe_page(GFP_ATOMIC);</span>
<span class="p_del">-	if (!relocated_restore_code)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-	memcpy(relocated_restore_code, &amp;core_restore_code,</span>
<span class="p_del">-	       &amp;restore_registers - &amp;core_restore_code);</span>
<span class="p_add">+	error = relocate_restore_code();</span>
<span class="p_add">+	if (error)</span>
<span class="p_add">+		return error;</span>
 
 	restore_image();
 	return 0;
<span class="p_chunk">@@ -109,11 +179,12 @@</span> <span class="p_context"> int pfn_is_nosave(unsigned long pfn)</span>
 
 struct restore_data_record {
 	unsigned long jump_address;
<span class="p_add">+	unsigned long jump_address_phys;</span>
 	unsigned long cr3;
 	unsigned long magic;
 };
 
<span class="p_del">-#define RESTORE_MAGIC	0x0123456789ABCDEFUL</span>
<span class="p_add">+#define RESTORE_MAGIC	0x123456789ABCDEF0UL</span>
 
 /**
  *	arch_hibernation_header_save - populate the architecture specific part
<span class="p_chunk">@@ -126,7 +197,8 @@</span> <span class="p_context"> int arch_hibernation_header_save(void *a</span>
 
 	if (max_size &lt; sizeof(struct restore_data_record))
 		return -EOVERFLOW;
<span class="p_del">-	rdr-&gt;jump_address = restore_jump_address;</span>
<span class="p_add">+	rdr-&gt;jump_address = (unsigned long)&amp;restore_registers;</span>
<span class="p_add">+	rdr-&gt;jump_address_phys = __pa_symbol(&amp;restore_registers);</span>
 	rdr-&gt;cr3 = restore_cr3;
 	rdr-&gt;magic = RESTORE_MAGIC;
 	return 0;
<span class="p_chunk">@@ -142,6 +214,7 @@</span> <span class="p_context"> int arch_hibernation_header_restore(void</span>
 	struct restore_data_record *rdr = addr;
 
 	restore_jump_address = rdr-&gt;jump_address;
<span class="p_add">+	jump_address_phys = rdr-&gt;jump_address_phys;</span>
 	restore_cr3 = rdr-&gt;cr3;
 	return (rdr-&gt;magic == RESTORE_MAGIC) ? 0 : -EINVAL;
 }
<span class="p_header">--- a/arch/x86/power/hibernate_asm_64.S</span>
<span class="p_header">+++ b/arch/x86/power/hibernate_asm_64.S</span>
<span class="p_chunk">@@ -42,9 +42,6 @@</span> <span class="p_context"> ENTRY(swsusp_arch_suspend)</span>
 	pushfq
 	popq	pt_regs_flags(%rax)
 
<span class="p_del">-	/* save the address of restore_registers */</span>
<span class="p_del">-	movq	$restore_registers, %rax</span>
<span class="p_del">-	movq	%rax, restore_jump_address(%rip)</span>
 	/* save cr3 */
 	movq	%cr3, %rax
 	movq	%rax, restore_cr3(%rip)
<span class="p_chunk">@@ -53,31 +50,34 @@</span> <span class="p_context"> ENTRY(swsusp_arch_suspend)</span>
 	ret
 
 ENTRY(restore_image)
<span class="p_del">-	/* switch to temporary page tables */</span>
<span class="p_del">-	movq	$__PAGE_OFFSET, %rdx</span>
<span class="p_del">-	movq	temp_level4_pgt(%rip), %rax</span>
<span class="p_del">-	subq	%rdx, %rax</span>
<span class="p_del">-	movq	%rax, %cr3</span>
<span class="p_del">-	/* Flush TLB */</span>
<span class="p_del">-	movq	mmu_cr4_features(%rip), %rax</span>
<span class="p_del">-	movq	%rax, %rdx</span>
<span class="p_del">-	andq	$~(X86_CR4_PGE), %rdx</span>
<span class="p_del">-	movq	%rdx, %cr4;  # turn off PGE</span>
<span class="p_del">-	movq	%cr3, %rcx;  # flush TLB</span>
<span class="p_del">-	movq	%rcx, %cr3;</span>
<span class="p_del">-	movq	%rax, %cr4;  # turn PGE back on</span>
<span class="p_del">-</span>
 	/* prepare to jump to the image kernel */
<span class="p_del">-	movq	restore_jump_address(%rip), %rax</span>
<span class="p_del">-	movq	restore_cr3(%rip), %rbx</span>
<span class="p_add">+	movq	restore_jump_address(%rip), %r8</span>
<span class="p_add">+	movq	restore_cr3(%rip), %r9</span>
<span class="p_add">+</span>
<span class="p_add">+	/* prepare to switch to temporary page tables */</span>
<span class="p_add">+	movq	temp_level4_pgt(%rip), %rax</span>
<span class="p_add">+	movq	mmu_cr4_features(%rip), %rbx</span>
 
 	/* prepare to copy image data to their original locations */
 	movq	restore_pblist(%rip), %rdx
<span class="p_add">+</span>
<span class="p_add">+	/* jump to relocated restore code */</span>
 	movq	relocated_restore_code(%rip), %rcx
 	jmpq	*%rcx
 
 	/* code below has been relocated to a safe page */
 ENTRY(core_restore_code)
<span class="p_add">+	/* switch to temporary page tables */</span>
<span class="p_add">+	movq	$__PAGE_OFFSET, %rcx</span>
<span class="p_add">+	subq	%rcx, %rax</span>
<span class="p_add">+	movq	%rax, %cr3</span>
<span class="p_add">+	/* flush TLB */</span>
<span class="p_add">+	movq	%rbx, %rcx</span>
<span class="p_add">+	andq	$~(X86_CR4_PGE), %rcx</span>
<span class="p_add">+	movq	%rcx, %cr4;  # turn off PGE</span>
<span class="p_add">+	movq	%cr3, %rcx;  # flush TLB</span>
<span class="p_add">+	movq	%rcx, %cr3;</span>
<span class="p_add">+	movq	%rbx, %cr4;  # turn PGE back on</span>
 loop:
 	testq	%rdx, %rdx
 	jz	done
<span class="p_chunk">@@ -92,23 +92,16 @@</span> <span class="p_context"> loop:</span>
 	/* progress to the next pbe */
 	movq	pbe_next(%rdx), %rdx
 	jmp	loop
<span class="p_add">+</span>
 done:
 	/* jump to the restore_registers address from the image header */
<span class="p_del">-	jmpq	*%rax</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * NOTE: This assumes that the boot kernel&#39;s text mapping covers the</span>
<span class="p_del">-	 * image kernel&#39;s page containing restore_registers and the address of</span>
<span class="p_del">-	 * this page is the same as in the image kernel&#39;s text mapping (it</span>
<span class="p_del">-	 * should always be true, because the text mapping is linear, starting</span>
<span class="p_del">-	 * from 0, and is supposed to cover the entire kernel text for every</span>
<span class="p_del">-	 * kernel).</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * code below belongs to the image kernel</span>
<span class="p_del">-	 */</span>
<span class="p_add">+	jmpq	*%r8</span>
 
<span class="p_add">+	 /* code below belongs to the image kernel */</span>
<span class="p_add">+	.align PAGE_SIZE</span>
 ENTRY(restore_registers)
 	/* go back to the original page tables */
<span class="p_del">-	movq    %rbx, %cr3</span>
<span class="p_add">+	movq    %r9, %cr3</span>
 
 	/* Flush TLB, including &quot;global&quot; things (vmalloc) */
 	movq	mmu_cr4_features(%rip), %rax

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



