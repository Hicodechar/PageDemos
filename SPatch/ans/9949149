
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/3] iommu/arm-smmu-v3: add support for unmap an iova range with only one tlb sync - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/3] iommu/arm-smmu-v3: add support for unmap an iova range with only one tlb sync</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72826">lei zhen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 12, 2017, 1 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1505221238-9428-3-git-send-email-thunder.leizhen@huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9949149/mbox/"
   >mbox</a>
|
   <a href="/patch/9949149/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9949149/">/patch/9949149/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	458E660360 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 13:02:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 35D632859F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 13:02:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 289A728714; Tue, 12 Sep 2017 13:02:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5A2AA2859F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Sep 2017 13:02:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751875AbdILNCU (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Sep 2017 09:02:20 -0400
Received: from szxga04-in.huawei.com ([45.249.212.190]:6459 &quot;EHLO
	szxga04-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751400AbdILNBh (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Sep 2017 09:01:37 -0400
Received: from 172.30.72.58 (EHLO DGGEMS413-HUB.china.huawei.com)
	([172.30.72.58])
	by dggrg04-dlp.huawei.com (MOS 4.4.6-GA FastPath queued)
	with ESMTP id DHB84777; Tue, 12 Sep 2017 21:01:35 +0800 (CST)
Received: from localhost (10.177.23.164) by DGGEMS413-HUB.china.huawei.com
	(10.3.19.213) with Microsoft SMTP Server id 14.3.301.0;
	Tue, 12 Sep 2017 21:01:24 +0800
From: Zhen Lei &lt;thunder.leizhen@huawei.com&gt;
To: Will Deacon &lt;will.deacon@arm.com&gt;, Joerg Roedel &lt;joro@8bytes.org&gt;,
	linux-arm-kernel &lt;linux-arm-kernel@lists.infradead.org&gt;,
	iommu &lt;iommu@lists.linux-foundation.org&gt;,
	Robin Murphy &lt;robin.murphy@arm.com&gt;,
	linux-kernel &lt;linux-kernel@vger.kernel.org&gt;
CC: Hanjun Guo &lt;guohanjun@huawei.com&gt;, Libin &lt;huawei.libin@huawei.com&gt;,
	&quot;Zhen Lei&quot; &lt;thunder.leizhen@huawei.com&gt;, Jinyue Li &lt;lijinyue@huawei.com&gt;,
	&quot;Kefeng Wang&quot; &lt;wangkefeng.wang@huawei.com&gt;
Subject: [PATCH v2 2/3] iommu/arm-smmu-v3: add support for unmap an iova
	range with only one tlb sync
Date: Tue, 12 Sep 2017 21:00:37 +0800
Message-ID: &lt;1505221238-9428-3-git-send-email-thunder.leizhen@huawei.com&gt;
X-Mailer: git-send-email 1.9.5.msysgit.0
In-Reply-To: &lt;1505221238-9428-1-git-send-email-thunder.leizhen@huawei.com&gt;
References: &lt;1505221238-9428-1-git-send-email-thunder.leizhen@huawei.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [10.177.23.164]
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A090201.59B7DAAF.004D, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, ip=0.0.0.0,
	so=2014-11-16 11:51:01, dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 107c9bf086c87746b818e38a2ecb68db
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72826">lei zhen</a> - Sept. 12, 2017, 1 p.m.</div>
<pre class="content">
This patch is base on: 
(add02cfdc9bc2 &quot;iommu: Introduce Interface for IOMMU TLB Flushing&quot;)

Because iotlb_sync is moved out of &quot;.unmap = arm_smmu_unmap&quot;, some interval
&quot;.unmap&quot; calls should explicitly followed by a iotlb_sync operation.
<span class="signed-off-by">
Signed-off-by: Zhen Lei &lt;thunder.leizhen@huawei.com&gt;</span>
---
 drivers/iommu/arm-smmu-v3.c    | 10 ++++++++++
 drivers/iommu/io-pgtable-arm.c | 30 ++++++++++++++++++++----------
 drivers/iommu/io-pgtable.h     |  1 +
 3 files changed, 31 insertions(+), 10 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Oct. 18, 2017, 1 p.m.</div>
<pre class="content">
On Tue, Sep 12, 2017 at 09:00:37PM +0800, Zhen Lei wrote:
<span class="quote">&gt; This patch is base on: </span>
<span class="quote">&gt; (add02cfdc9bc2 &quot;iommu: Introduce Interface for IOMMU TLB Flushing&quot;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Because iotlb_sync is moved out of &quot;.unmap = arm_smmu_unmap&quot;, some interval</span>
<span class="quote">&gt; &quot;.unmap&quot; calls should explicitly followed by a iotlb_sync operation.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Zhen Lei &lt;thunder.leizhen@huawei.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/iommu/arm-smmu-v3.c    | 10 ++++++++++</span>
<span class="quote">&gt;  drivers/iommu/io-pgtable-arm.c | 30 ++++++++++++++++++++----------</span>
<span class="quote">&gt;  drivers/iommu/io-pgtable.h     |  1 +</span>
<span class="quote">&gt;  3 files changed, 31 insertions(+), 10 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; index ef42c4b..e92828e 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt; @@ -1772,6 +1772,15 @@ arm_smmu_unmap(struct iommu_domain *domain, unsigned long iova, size_t size)</span>
<span class="quote">&gt;  	return ops-&gt;unmap(ops, iova, size);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static void arm_smmu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);</span>
<span class="quote">&gt; +	struct io_pgtable_ops *ops = smmu_domain-&gt;pgtbl_ops;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (ops &amp;&amp; ops-&gt;iotlb_sync)</span>
<span class="quote">&gt; +		ops-&gt;iotlb_sync(ops);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static phys_addr_t</span>
<span class="quote">&gt;  arm_smmu_iova_to_phys(struct iommu_domain *domain, dma_addr_t iova)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; @@ -1991,6 +2000,7 @@ static struct iommu_ops arm_smmu_ops = {</span>
<span class="quote">&gt;  	.attach_dev		= arm_smmu_attach_dev,</span>
<span class="quote">&gt;  	.map			= arm_smmu_map,</span>
<span class="quote">&gt;  	.unmap			= arm_smmu_unmap,</span>
<span class="quote">&gt; +	.iotlb_sync		= arm_smmu_iotlb_sync,</span>
<span class="quote">&gt;  	.map_sg			= default_iommu_map_sg,</span>
<span class="quote">&gt;  	.iova_to_phys		= arm_smmu_iova_to_phys,</span>
<span class="quote">&gt;  	.add_device		= arm_smmu_add_device,</span>
<span class="quote">&gt; diff --git a/drivers/iommu/io-pgtable-arm.c b/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt; index e8018a3..805efc9 100644</span>
<span class="quote">&gt; --- a/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt; +++ b/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt; @@ -304,6 +304,8 @@ static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;  		WARN_ON(!selftest_running);</span>
<span class="quote">&gt;  		return -EEXIST;</span>
<span class="quote">&gt;  	} else if (iopte_type(pte, lvl) == ARM_LPAE_PTE_TYPE_TABLE) {</span>
<span class="quote">&gt; +		size_t unmapped;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		/*</span>
<span class="quote">&gt;  		 * We need to unmap and free the old table before</span>
<span class="quote">&gt;  		 * overwriting it with a block entry.</span>
<span class="quote">&gt; @@ -312,7 +314,9 @@ static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;  		size_t sz = ARM_LPAE_BLOCK_SIZE(lvl, data);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		tblp = ptep - ARM_LPAE_LVL_IDX(iova, lvl, data);</span>
<span class="quote">&gt; -		if (WARN_ON(__arm_lpae_unmap(data, iova, sz, lvl, tblp) != sz))</span>
<span class="quote">&gt; +		unmapped = __arm_lpae_unmap(data, iova, sz, lvl, tblp);</span>
<span class="quote">&gt; +		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="quote">&gt; +		if (WARN_ON(unmapped != sz))</span>
<span class="quote">&gt;  			return -EINVAL;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -584,7 +588,6 @@ static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;  			/* Also flush any partial walks */</span>
<span class="quote">&gt;  			io_pgtable_tlb_add_flush(iop, iova, size,</span>
<span class="quote">&gt;  						ARM_LPAE_GRANULE(data), false);</span>
<span class="quote">&gt; -			io_pgtable_tlb_sync(iop);</span>
<span class="quote">&gt;  			ptep = iopte_deref(pte, data);</span>
<span class="quote">&gt;  			__arm_lpae_free_pgtable(data, lvl + 1, ptep);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt; @@ -609,7 +612,6 @@ static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;  static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,</span>
<span class="quote">&gt;  			  size_t size)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	size_t unmapped;</span>
<span class="quote">&gt;  	struct arm_lpae_io_pgtable *data = io_pgtable_ops_to_data(ops);</span>
<span class="quote">&gt;  	arm_lpae_iopte *ptep = data-&gt;pgd;</span>
<span class="quote">&gt;  	int lvl = ARM_LPAE_START_LVL(data);</span>
<span class="quote">&gt; @@ -617,11 +619,14 @@ static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,</span>
<span class="quote">&gt;  	if (WARN_ON(iova &gt;= (1ULL &lt;&lt; data-&gt;iop.cfg.ias)))</span>
<span class="quote">&gt;  		return 0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	unmapped = __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="quote">&gt; -	if (unmapped)</span>
<span class="quote">&gt; -		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="quote">&gt; +	return __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="quote">&gt; +}</span>

This change is already queued in Joerg&#39;s tree, due to a patch from Robin.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72826">lei zhen</a> - Oct. 19, 2017, 3:17 a.m.</div>
<pre class="content">
On 2017/10/18 21:00, Will Deacon wrote:
<span class="quote">&gt; On Tue, Sep 12, 2017 at 09:00:37PM +0800, Zhen Lei wrote:</span>
<span class="quote">&gt;&gt; This patch is base on: </span>
<span class="quote">&gt;&gt; (add02cfdc9bc2 &quot;iommu: Introduce Interface for IOMMU TLB Flushing&quot;)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Because iotlb_sync is moved out of &quot;.unmap = arm_smmu_unmap&quot;, some interval</span>
<span class="quote">&gt;&gt; &quot;.unmap&quot; calls should explicitly followed by a iotlb_sync operation.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Zhen Lei &lt;thunder.leizhen@huawei.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  drivers/iommu/arm-smmu-v3.c    | 10 ++++++++++</span>
<span class="quote">&gt;&gt;  drivers/iommu/io-pgtable-arm.c | 30 ++++++++++++++++++++----------</span>
<span class="quote">&gt;&gt;  drivers/iommu/io-pgtable.h     |  1 +</span>
<span class="quote">&gt;&gt;  3 files changed, 31 insertions(+), 10 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; index ef42c4b..e92828e 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="quote">&gt;&gt; @@ -1772,6 +1772,15 @@ arm_smmu_unmap(struct iommu_domain *domain, unsigned long iova, size_t size)</span>
<span class="quote">&gt;&gt;  	return ops-&gt;unmap(ops, iova, size);</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +static void arm_smmu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="quote">&gt;&gt; +{</span>
<span class="quote">&gt;&gt; +	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);</span>
<span class="quote">&gt;&gt; +	struct io_pgtable_ops *ops = smmu_domain-&gt;pgtbl_ops;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	if (ops &amp;&amp; ops-&gt;iotlb_sync)</span>
<span class="quote">&gt;&gt; +		ops-&gt;iotlb_sync(ops);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  static phys_addr_t</span>
<span class="quote">&gt;&gt;  arm_smmu_iova_to_phys(struct iommu_domain *domain, dma_addr_t iova)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; @@ -1991,6 +2000,7 @@ static struct iommu_ops arm_smmu_ops = {</span>
<span class="quote">&gt;&gt;  	.attach_dev		= arm_smmu_attach_dev,</span>
<span class="quote">&gt;&gt;  	.map			= arm_smmu_map,</span>
<span class="quote">&gt;&gt;  	.unmap			= arm_smmu_unmap,</span>
<span class="quote">&gt;&gt; +	.iotlb_sync		= arm_smmu_iotlb_sync,</span>
<span class="quote">&gt;&gt;  	.map_sg			= default_iommu_map_sg,</span>
<span class="quote">&gt;&gt;  	.iova_to_phys		= arm_smmu_iova_to_phys,</span>
<span class="quote">&gt;&gt;  	.add_device		= arm_smmu_add_device,</span>
<span class="quote">&gt;&gt; diff --git a/drivers/iommu/io-pgtable-arm.c b/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt;&gt; index e8018a3..805efc9 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/iommu/io-pgtable-arm.c</span>
<span class="quote">&gt;&gt; @@ -304,6 +304,8 @@ static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;&gt;  		WARN_ON(!selftest_running);</span>
<span class="quote">&gt;&gt;  		return -EEXIST;</span>
<span class="quote">&gt;&gt;  	} else if (iopte_type(pte, lvl) == ARM_LPAE_PTE_TYPE_TABLE) {</span>
<span class="quote">&gt;&gt; +		size_t unmapped;</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  		/*</span>
<span class="quote">&gt;&gt;  		 * We need to unmap and free the old table before</span>
<span class="quote">&gt;&gt;  		 * overwriting it with a block entry.</span>
<span class="quote">&gt;&gt; @@ -312,7 +314,9 @@ static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;&gt;  		size_t sz = ARM_LPAE_BLOCK_SIZE(lvl, data);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  		tblp = ptep - ARM_LPAE_LVL_IDX(iova, lvl, data);</span>
<span class="quote">&gt;&gt; -		if (WARN_ON(__arm_lpae_unmap(data, iova, sz, lvl, tblp) != sz))</span>
<span class="quote">&gt;&gt; +		unmapped = __arm_lpae_unmap(data, iova, sz, lvl, tblp);</span>
<span class="quote">&gt;&gt; +		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="quote">&gt;&gt; +		if (WARN_ON(unmapped != sz))</span>
<span class="quote">&gt;&gt;  			return -EINVAL;</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; @@ -584,7 +588,6 @@ static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;&gt;  			/* Also flush any partial walks */</span>
<span class="quote">&gt;&gt;  			io_pgtable_tlb_add_flush(iop, iova, size,</span>
<span class="quote">&gt;&gt;  						ARM_LPAE_GRANULE(data), false);</span>
<span class="quote">&gt;&gt; -			io_pgtable_tlb_sync(iop);</span>
<span class="quote">&gt;&gt;  			ptep = iopte_deref(pte, data);</span>
<span class="quote">&gt;&gt;  			__arm_lpae_free_pgtable(data, lvl + 1, ptep);</span>
<span class="quote">&gt;&gt;  		} else {</span>
<span class="quote">&gt;&gt; @@ -609,7 +612,6 @@ static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
<span class="quote">&gt;&gt;  static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,</span>
<span class="quote">&gt;&gt;  			  size_t size)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; -	size_t unmapped;</span>
<span class="quote">&gt;&gt;  	struct arm_lpae_io_pgtable *data = io_pgtable_ops_to_data(ops);</span>
<span class="quote">&gt;&gt;  	arm_lpae_iopte *ptep = data-&gt;pgd;</span>
<span class="quote">&gt;&gt;  	int lvl = ARM_LPAE_START_LVL(data);</span>
<span class="quote">&gt;&gt; @@ -617,11 +619,14 @@ static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,</span>
<span class="quote">&gt;&gt;  	if (WARN_ON(iova &gt;= (1ULL &lt;&lt; data-&gt;iop.cfg.ias)))</span>
<span class="quote">&gt;&gt;  		return 0;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -	unmapped = __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="quote">&gt;&gt; -	if (unmapped)</span>
<span class="quote">&gt;&gt; -		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="quote">&gt;&gt; +	return __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="quote">&gt;&gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This change is already queued in Joerg&#39;s tree, due to a patch from Robin.</span>
Yes, I see. So this one can be skipped.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Will</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; .</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/iommu/arm-smmu-v3.c b/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_header">index ef42c4b..e92828e 100644</span>
<span class="p_header">--- a/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_header">+++ b/drivers/iommu/arm-smmu-v3.c</span>
<span class="p_chunk">@@ -1772,6 +1772,15 @@</span> <span class="p_context"> arm_smmu_unmap(struct iommu_domain *domain, unsigned long iova, size_t size)</span>
 	return ops-&gt;unmap(ops, iova, size);
 }
 
<span class="p_add">+static void arm_smmu_iotlb_sync(struct iommu_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct arm_smmu_domain *smmu_domain = to_smmu_domain(domain);</span>
<span class="p_add">+	struct io_pgtable_ops *ops = smmu_domain-&gt;pgtbl_ops;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ops &amp;&amp; ops-&gt;iotlb_sync)</span>
<span class="p_add">+		ops-&gt;iotlb_sync(ops);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static phys_addr_t
 arm_smmu_iova_to_phys(struct iommu_domain *domain, dma_addr_t iova)
 {
<span class="p_chunk">@@ -1991,6 +2000,7 @@</span> <span class="p_context"> static struct iommu_ops arm_smmu_ops = {</span>
 	.attach_dev		= arm_smmu_attach_dev,
 	.map			= arm_smmu_map,
 	.unmap			= arm_smmu_unmap,
<span class="p_add">+	.iotlb_sync		= arm_smmu_iotlb_sync,</span>
 	.map_sg			= default_iommu_map_sg,
 	.iova_to_phys		= arm_smmu_iova_to_phys,
 	.add_device		= arm_smmu_add_device,
<span class="p_header">diff --git a/drivers/iommu/io-pgtable-arm.c b/drivers/iommu/io-pgtable-arm.c</span>
<span class="p_header">index e8018a3..805efc9 100644</span>
<span class="p_header">--- a/drivers/iommu/io-pgtable-arm.c</span>
<span class="p_header">+++ b/drivers/iommu/io-pgtable-arm.c</span>
<span class="p_chunk">@@ -304,6 +304,8 @@</span> <span class="p_context"> static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
 		WARN_ON(!selftest_running);
 		return -EEXIST;
 	} else if (iopte_type(pte, lvl) == ARM_LPAE_PTE_TYPE_TABLE) {
<span class="p_add">+		size_t unmapped;</span>
<span class="p_add">+</span>
 		/*
 		 * We need to unmap and free the old table before
 		 * overwriting it with a block entry.
<span class="p_chunk">@@ -312,7 +314,9 @@</span> <span class="p_context"> static int arm_lpae_init_pte(struct arm_lpae_io_pgtable *data,</span>
 		size_t sz = ARM_LPAE_BLOCK_SIZE(lvl, data);
 
 		tblp = ptep - ARM_LPAE_LVL_IDX(iova, lvl, data);
<span class="p_del">-		if (WARN_ON(__arm_lpae_unmap(data, iova, sz, lvl, tblp) != sz))</span>
<span class="p_add">+		unmapped = __arm_lpae_unmap(data, iova, sz, lvl, tblp);</span>
<span class="p_add">+		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="p_add">+		if (WARN_ON(unmapped != sz))</span>
 			return -EINVAL;
 	}
 
<span class="p_chunk">@@ -584,7 +588,6 @@</span> <span class="p_context"> static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
 			/* Also flush any partial walks */
 			io_pgtable_tlb_add_flush(iop, iova, size,
 						ARM_LPAE_GRANULE(data), false);
<span class="p_del">-			io_pgtable_tlb_sync(iop);</span>
 			ptep = iopte_deref(pte, data);
 			__arm_lpae_free_pgtable(data, lvl + 1, ptep);
 		} else {
<span class="p_chunk">@@ -609,7 +612,6 @@</span> <span class="p_context"> static int __arm_lpae_unmap(struct arm_lpae_io_pgtable *data,</span>
 static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,
 			  size_t size)
 {
<span class="p_del">-	size_t unmapped;</span>
 	struct arm_lpae_io_pgtable *data = io_pgtable_ops_to_data(ops);
 	arm_lpae_iopte *ptep = data-&gt;pgd;
 	int lvl = ARM_LPAE_START_LVL(data);
<span class="p_chunk">@@ -617,11 +619,14 @@</span> <span class="p_context"> static int arm_lpae_unmap(struct io_pgtable_ops *ops, unsigned long iova,</span>
 	if (WARN_ON(iova &gt;= (1ULL &lt;&lt; data-&gt;iop.cfg.ias)))
 		return 0;
 
<span class="p_del">-	unmapped = __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="p_del">-	if (unmapped)</span>
<span class="p_del">-		io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
<span class="p_add">+	return __arm_lpae_unmap(data, iova, size, lvl, ptep);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void arm_lpae_iotlb_sync(struct io_pgtable_ops *ops)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct arm_lpae_io_pgtable *data = io_pgtable_ops_to_data(ops);</span>
 
<span class="p_del">-	return unmapped;</span>
<span class="p_add">+	io_pgtable_tlb_sync(&amp;data-&gt;iop);</span>
 }
 
 static phys_addr_t arm_lpae_iova_to_phys(struct io_pgtable_ops *ops,
<span class="p_chunk">@@ -734,6 +739,7 @@</span> <span class="p_context"> arm_lpae_alloc_pgtable(struct io_pgtable_cfg *cfg)</span>
 	data-&gt;iop.ops = (struct io_pgtable_ops) {
 		.map		= arm_lpae_map,
 		.unmap		= arm_lpae_unmap,
<span class="p_add">+		.iotlb_sync	= arm_lpae_iotlb_sync,</span>
 		.iova_to_phys	= arm_lpae_iova_to_phys,
 	};
 
<span class="p_chunk">@@ -1030,7 +1036,7 @@</span> <span class="p_context"> static int __init arm_lpae_run_tests(struct io_pgtable_cfg *cfg)</span>
 
 	int i, j;
 	unsigned long iova;
<span class="p_del">-	size_t size;</span>
<span class="p_add">+	size_t size, unmapped;</span>
 	struct io_pgtable_ops *ops;
 
 	selftest_running = true;
<span class="p_chunk">@@ -1082,7 +1088,9 @@</span> <span class="p_context"> static int __init arm_lpae_run_tests(struct io_pgtable_cfg *cfg)</span>
 
 		/* Partial unmap */
 		size = 1UL &lt;&lt; __ffs(cfg-&gt;pgsize_bitmap);
<span class="p_del">-		if (ops-&gt;unmap(ops, SZ_1G + size, size) != size)</span>
<span class="p_add">+		unmapped = ops-&gt;unmap(ops, SZ_1G + size, size);</span>
<span class="p_add">+		ops-&gt;iotlb_sync(ops);</span>
<span class="p_add">+		if (unmapped != size)</span>
 			return __FAIL(ops, i);
 
 		/* Remap of partial unmap */
<span class="p_chunk">@@ -1098,7 +1106,9 @@</span> <span class="p_context"> static int __init arm_lpae_run_tests(struct io_pgtable_cfg *cfg)</span>
 		while (j != BITS_PER_LONG) {
 			size = 1UL &lt;&lt; j;
 
<span class="p_del">-			if (ops-&gt;unmap(ops, iova, size) != size)</span>
<span class="p_add">+			unmapped = ops-&gt;unmap(ops, iova, size);</span>
<span class="p_add">+			ops-&gt;iotlb_sync(ops);</span>
<span class="p_add">+			if (unmapped != size)</span>
 				return __FAIL(ops, i);
 
 			if (ops-&gt;iova_to_phys(ops, iova + 42))
<span class="p_header">diff --git a/drivers/iommu/io-pgtable.h b/drivers/iommu/io-pgtable.h</span>
<span class="p_header">index a3e6670..3a72e08 100644</span>
<span class="p_header">--- a/drivers/iommu/io-pgtable.h</span>
<span class="p_header">+++ b/drivers/iommu/io-pgtable.h</span>
<span class="p_chunk">@@ -120,6 +120,7 @@</span> <span class="p_context"> struct io_pgtable_ops {</span>
 		   phys_addr_t paddr, size_t size, int prot);
 	int (*unmap)(struct io_pgtable_ops *ops, unsigned long iova,
 		     size_t size);
<span class="p_add">+	void (*iotlb_sync)(struct io_pgtable_ops *ops);</span>
 	phys_addr_t (*iova_to_phys)(struct io_pgtable_ops *ops,
 				    unsigned long iova);
 };

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



