
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/5] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/5] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 3, 2016, 1:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1454505240-23446-4-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8202641/mbox/"
   >mbox</a>
|
   <a href="/patch/8202641/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8202641/">/patch/8202641/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id A4220BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:15:59 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C573D20279
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:15:58 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CB0C5202BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Feb 2016 13:15:57 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755682AbcBCNPP (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Feb 2016 08:15:15 -0500
Received: from mail-wm0-f67.google.com ([74.125.82.67]:36329 &quot;EHLO
	mail-wm0-f67.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752444AbcBCNOK (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Feb 2016 08:14:10 -0500
Received: by mail-wm0-f67.google.com with SMTP id 128so7363720wmz.3
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 03 Feb 2016 05:14:10 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=NKyf0aLPyU5VRH7HCM4ug5h8iXoBkSH5TaV5Ow1BZMo=;
	b=HVOrjEn1RUvCu9Se2D7Rcsw4ovSoS9gg6n307Wr3CQdzt0tH49UJzpd2Fj+1WHBtV8
	xOztwdoPaUQLw8ER+LUmm1RrWu8suxkt/NnBEmglo60iqkL7na6KGRzu56eIPCU9QuB8
	vribv+F8tdJd4OjFaItyGkux49eDfapKIlsAecA6DFNSNlmNuEbap9Igxqn05dFXXZLs
	iHUbMtuPzQvsUkeVKAun3iPZw2jsgqjv3dW9lVWwSzcEybU42IgVMfEcvsVfisLIneNU
	8qCmyGAmjEhd3rmpLXulcGqmjbo/aBaH4sVCBTJ1mtuBo5hTSpHVE5GLo+ThPNRRV5Q5
	8PXg==
X-Gm-Message-State: AG10YOQVCXPVZ0DbpPFcenTy5HpitX/2Oi8UqUblYx4lLSTNCEdemZOELUOVL3rwCopJRw==
X-Received: by 10.28.57.131 with SMTP id g125mr3688045wma.17.1454505249594; 
	Wed, 03 Feb 2016 05:14:09 -0800 (PST)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	v22sm7890597wmv.12.2016.02.03.05.14.08
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Wed, 03 Feb 2016 05:14:09 -0800 (PST)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Andrea Argangeli &lt;andrea@kernel.org&gt;,
	Rik van Riel &lt;riel@redhat.com&gt;, &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 3/5] oom: clear TIF_MEMDIE after oom_reaper managed to unmap
	the address space
Date: Wed,  3 Feb 2016 14:13:58 +0100
Message-Id: &lt;1454505240-23446-4-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1454505240-23446-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1454505240-23446-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.3 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 3, 2016, 1:13 p.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

When oom_reaper manages to unmap all the eligible vmas there shouldn&#39;t
be much of the freable memory held by the oom victim left anymore so it
makes sense to clear the TIF_MEMDIE flag for the victim and allow the
OOM killer to select another task.

The lack of TIF_MEMDIE also means that the victim cannot access memory
reserves anymore but that shouldn&#39;t be a problem because it would get
the access again if it needs to allocate and hits the OOM killer again
due to the fatal_signal_pending resp. PF_EXITING check. We can safely
hide the task from the OOM killer because it is clearly not a good
candidate anymore as everyhing reclaimable has been torn down already.

This patch will allow to cap the time an OOM victim can keep TIF_MEMDIE
and thus hold off further global OOM killer actions granted the oom
reaper is able to take mmap_sem for the associated mm struct. This is
not guaranteed now but further steps should make sure that mmap_sem
for write should be blocked killable which will help to reduce such a
lock contention. This is not done by this patch.

Note that exit_oom_victim might be called on a remote task from
__oom_reap_task now so we have to check and clear the flag atomically
otherwise we might race and underflow oom_victims or wake up
waiters too early.

Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Suggested-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/oom.h |  2 +-
 kernel/exit.c       |  2 +-
 mm/oom_kill.c       | 73 +++++++++++++++++++++++++++++++++++------------------
 3 files changed, 50 insertions(+), 27 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - Feb. 4, 2016, 2:22 p.m.</div>
<pre class="content">
Michal Hocko wrote:
<span class="quote">&gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When oom_reaper manages to unmap all the eligible vmas there shouldn&#39;t</span>
<span class="quote">&gt; be much of the freable memory held by the oom victim left anymore so it</span>
<span class="quote">&gt; makes sense to clear the TIF_MEMDIE flag for the victim and allow the</span>
<span class="quote">&gt; OOM killer to select another task.</span>

Just a confirmation. Is it safe to clear TIF_MEMDIE without reaching do_exit()
with regard to freezing_slow_path()? Since clearing TIF_MEMDIE from the OOM
reaper confuses

    wait_event(oom_victims_wait, !atomic_read(&amp;oom_victims));

in oom_killer_disable(), I&#39;m worrying that the freezing operation continues
before the OOM victim which escaped the __refrigerator() actually releases
memory. Does this cause consistency problem?
<span class="quote">
&gt; +	/*</span>
<span class="quote">&gt; +	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="quote">&gt; +	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="quote">&gt; +	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="quote">&gt; +	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="quote">&gt; +	 * make any sense.</span>
<span class="quote">&gt; +	 */</span>
<span class="quote">&gt; +	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="quote">&gt; +	exit_oom_victim(tsk);</span>

I noticed that updating only one thread group&#39;s oom_score_adj disables
further wake_oom_reaper() calls due to rough-grained can_oom_reap check at

  p-&gt;signal-&gt;oom_score_adj == OOM_SCORE_ADJ_MIN

in oom_kill_process(). I think we need to either update all thread groups&#39;
oom_score_adj using the reaped mm equally or use more fine-grained can_oom_reap
check which ignores OOM_SCORE_ADJ_MIN if all threads in that thread group are
dying or exiting.

----------
#define _GNU_SOURCE
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sched.h&gt;

static int writer(void *unused)
{
	static char buffer[4096];
	int fd = open(&quot;/tmp/file&quot;, O_WRONLY | O_CREAT | O_APPEND, 0600);
	while (write(fd, buffer, sizeof(buffer)) == sizeof(buffer));
	return 0;
}

int main(int argc, char *argv[])
{
	unsigned long size;
	char *buf = NULL;
	unsigned long i;
	if (fork() == 0) {
		int fd = open(&quot;/proc/self/oom_score_adj&quot;, O_WRONLY);
		write(fd, &quot;1000&quot;, 4);
		close(fd);
		for (i = 0; i &lt; 2; i++) {
			char *stack = malloc(4096);
			if (stack)
				clone(writer, stack + 4096, CLONE_VM, NULL);
		}
		writer(NULL);
		while (1)
			pause();
	}
	sleep(1);
	for (size = 1048576; size &lt; 512UL * (1 &lt;&lt; 30); size &lt;&lt;= 1) {
		char *cp = realloc(buf, size);
		if (!cp) {
			size &gt;&gt;= 1;
			break;
		}
		buf = cp;
	}
	sleep(5);
	/* Will cause OOM due to overcommit */
	for (i = 0; i &lt; size; i += 4096)
		buf[i] = 0;
	pause();
	return 0;
}
----------

----------
[  177.722853] a.out invoked oom-killer: gfp_mask=0x24280ca(GFP_HIGHUSER_MOVABLE|__GFP_ZERO), order=0, oom_score_adj=0
[  177.724956] a.out cpuset=/ mems_allowed=0
[  177.725735] CPU: 3 PID: 3962 Comm: a.out Not tainted 4.5.0-rc2-next-20160204 #291
(...snipped...)
[  177.802889] [ pid ]   uid  tgid total_vm      rss nr_ptes nr_pmds swapents oom_score_adj name
(...snipped...)
[  177.872248] [ 3941]  1000  3941    28880      124      14       3        0             0 bash
[  177.874279] [ 3962]  1000  3962   541717   395780     784       6        0             0 a.out
[  177.876274] [ 3963]  1000  3963     1078       21       7       3        0          1000 a.out
[  177.878261] [ 3964]  1000  3964     1078       21       7       3        0          1000 a.out
[  177.880194] [ 3965]  1000  3965     1078       21       7       3        0          1000 a.out
[  177.882262] Out of memory: Kill process 3963 (a.out) score 998 or sacrifice child
[  177.884129] Killed process 3963 (a.out) total-vm:4312kB, anon-rss:84kB, file-rss:0kB, shmem-rss:0kB
[  177.887100] oom_reaper: reaped process :3963 (a.out) anon-rss:0kB, file-rss:0kB, shmem-rss:0lB
[  179.638399] crond invoked oom-killer: gfp_mask=0x24201ca(GFP_HIGHUSER_MOVABLE|__GFP_COLD), order=0, oom_score_adj=0
[  179.647708] crond cpuset=/ mems_allowed=0
[  179.652996] CPU: 3 PID: 742 Comm: crond Not tainted 4.5.0-rc2-next-20160204 #291
(...snipped...)
[  179.771311] [ pid ]   uid  tgid total_vm      rss nr_ptes nr_pmds swapents oom_score_adj name
(...snipped...)
[  179.836221] [ 3941]  1000  3941    28880      124      14       3        0             0 bash
[  179.838278] [ 3962]  1000  3962   541717   396308     785       6        0             0 a.out
[  179.840328] [ 3963]  1000  3963     1078        0       7       3        0         -1000 a.out
[  179.842443] [ 3965]  1000  3965     1078        0       7       3        0          1000 a.out
[  179.844557] Out of memory: Kill process 3965 (a.out) score 998 or sacrifice child
[  179.846404] Killed process 3965 (a.out) total-vm:4312kB, anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
----------
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 4, 2016, 2:43 p.m.</div>
<pre class="content">
On Thu 04-02-16 23:22:18, Tetsuo Handa wrote:
<span class="quote">&gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; From: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; When oom_reaper manages to unmap all the eligible vmas there shouldn&#39;t</span>
<span class="quote">&gt; &gt; be much of the freable memory held by the oom victim left anymore so it</span>
<span class="quote">&gt; &gt; makes sense to clear the TIF_MEMDIE flag for the victim and allow the</span>
<span class="quote">&gt; &gt; OOM killer to select another task.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just a confirmation. Is it safe to clear TIF_MEMDIE without reaching do_exit()</span>
<span class="quote">&gt; with regard to freezing_slow_path()? Since clearing TIF_MEMDIE from the OOM</span>
<span class="quote">&gt; reaper confuses</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     wait_event(oom_victims_wait, !atomic_read(&amp;oom_victims));</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; in oom_killer_disable(), I&#39;m worrying that the freezing operation continues</span>
<span class="quote">&gt; before the OOM victim which escaped the __refrigerator() actually releases</span>
<span class="quote">&gt; memory. Does this cause consistency problem?</span>

This is a good question! At first sight it seems this is not safe and we
might need to make the oom_reaper freezable so that it doesn&#39;t wake up
during suspend and interfere. Let me think about that.
<span class="quote">
&gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; +	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="quote">&gt; &gt; +	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="quote">&gt; &gt; +	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="quote">&gt; &gt; +	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="quote">&gt; &gt; +	 * make any sense.</span>
<span class="quote">&gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; +	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="quote">&gt; &gt; +	exit_oom_victim(tsk);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I noticed that updating only one thread group&#39;s oom_score_adj disables</span>
<span class="quote">&gt; further wake_oom_reaper() calls due to rough-grained can_oom_reap check at</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   p-&gt;signal-&gt;oom_score_adj == OOM_SCORE_ADJ_MIN</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; in oom_kill_process(). I think we need to either update all thread groups&#39;</span>
<span class="quote">&gt; oom_score_adj using the reaped mm equally or use more fine-grained can_oom_reap</span>
<span class="quote">&gt; check which ignores OOM_SCORE_ADJ_MIN if all threads in that thread group are</span>
<span class="quote">&gt; dying or exiting.</span>

I do not understand. Why would you want to reap the mm again when
this has been done already? The mm is shared, right?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - Feb. 4, 2016, 3:08 p.m.</div>
<pre class="content">
Michal Hocko wrote:
<span class="quote">&gt; &gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; &gt; +	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="quote">&gt; &gt; &gt; +	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="quote">&gt; &gt; &gt; +	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="quote">&gt; &gt; &gt; +	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="quote">&gt; &gt; &gt; +	 * make any sense.</span>
<span class="quote">&gt; &gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; &gt; +	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="quote">&gt; &gt; &gt; +	exit_oom_victim(tsk);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I noticed that updating only one thread group&#39;s oom_score_adj disables</span>
<span class="quote">&gt; &gt; further wake_oom_reaper() calls due to rough-grained can_oom_reap check at</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   p-&gt;signal-&gt;oom_score_adj == OOM_SCORE_ADJ_MIN</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; in oom_kill_process(). I think we need to either update all thread groups&#39;</span>
<span class="quote">&gt; &gt; oom_score_adj using the reaped mm equally or use more fine-grained can_oom_reap</span>
<span class="quote">&gt; &gt; check which ignores OOM_SCORE_ADJ_MIN if all threads in that thread group are</span>
<span class="quote">&gt; &gt; dying or exiting.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I do not understand. Why would you want to reap the mm again when</span>
<span class="quote">&gt; this has been done already? The mm is shared, right?</span>

The mm is shared between previous victim and next victim, but these victims
are in different thread groups. The OOM killer selects next victim whose mm
was already reaped due to sharing previous victim&#39;s memory. We don&#39;t want
the OOM killer to select such next victim. Maybe set MMF_OOM_REAP_DONE on
the previous victim&#39;s mm and check it instead of TIF_MEMDIE when selecting
a victim? That will also avoid problems caused by clearing TIF_MEMDIE?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Feb. 4, 2016, 4:31 p.m.</div>
<pre class="content">
On Fri 05-02-16 00:08:25, Tetsuo Handa wrote:
<span class="quote">&gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; +	/*</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 * make any sense.</span>
<span class="quote">&gt; &gt; &gt; &gt; +	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; +	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="quote">&gt; &gt; &gt; &gt; +	exit_oom_victim(tsk);</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I noticed that updating only one thread group&#39;s oom_score_adj disables</span>
<span class="quote">&gt; &gt; &gt; further wake_oom_reaper() calls due to rough-grained can_oom_reap check at</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt;   p-&gt;signal-&gt;oom_score_adj == OOM_SCORE_ADJ_MIN</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; in oom_kill_process(). I think we need to either update all thread groups&#39;</span>
<span class="quote">&gt; &gt; &gt; oom_score_adj using the reaped mm equally or use more fine-grained can_oom_reap</span>
<span class="quote">&gt; &gt; &gt; check which ignores OOM_SCORE_ADJ_MIN if all threads in that thread group are</span>
<span class="quote">&gt; &gt; &gt; dying or exiting.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I do not understand. Why would you want to reap the mm again when</span>
<span class="quote">&gt; &gt; this has been done already? The mm is shared, right?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The mm is shared between previous victim and next victim, but these victims</span>
<span class="quote">&gt; are in different thread groups. The OOM killer selects next victim whose mm</span>
<span class="quote">&gt; was already reaped due to sharing previous victim&#39;s memory.</span>

OK, now I got your point. From your previous email it sounded like you
were talking about oom_reaper and its invocation which is was confusing.
<span class="quote">
&gt; We don&#39;t want the OOM killer to select such next victim.</span>

Yes, selecting such a task doesn&#39;t make much sense. It has been killed
so it has fatal_signal_pending. If it wanted to allocate it would get
TIF_MEMDIE already and it&#39;s address space has been reaped so there is
nothing to free left. These CLONE_VM without CLONE_SIGHAND is really
crazy combo, it is just causing troubles all over and I am not convinced
it is actually that helpful &lt;/rant&gt;.
<span class="quote">

&gt; Maybe set MMF_OOM_REAP_DONE on</span>
<span class="quote">&gt; the previous victim&#39;s mm and check it instead of TIF_MEMDIE when selecting</span>
<span class="quote">&gt; a victim? That will also avoid problems caused by clearing TIF_MEMDIE?</span>

Hmm, it doesn&#39;t seem we are under MMF_ availabel bits pressure right now
so using the flag sounds like the easiest way to go. Then we even do not
have to play with OOM_SCORE_ADJ_MIN which might be updated from the
userspace after the oom reaper has done that. Care to send a patch?

Thanks!
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/oom.h b/include/linux/oom.h</span>
<span class="p_header">index 03e6257321f0..45993b840ed6 100644</span>
<span class="p_header">--- a/include/linux/oom.h</span>
<span class="p_header">+++ b/include/linux/oom.h</span>
<span class="p_chunk">@@ -91,7 +91,7 @@</span> <span class="p_context"> extern enum oom_scan_t oom_scan_process_thread(struct oom_control *oc,</span>
 
 extern bool out_of_memory(struct oom_control *oc);
 
<span class="p_del">-extern void exit_oom_victim(void);</span>
<span class="p_add">+extern void exit_oom_victim(struct task_struct *tsk);</span>
 
 extern int register_oom_notifier(struct notifier_block *nb);
 extern int unregister_oom_notifier(struct notifier_block *nb);
<span class="p_header">diff --git a/kernel/exit.c b/kernel/exit.c</span>
<span class="p_header">index 07110c6020a0..4b1c6e2658bd 100644</span>
<span class="p_header">--- a/kernel/exit.c</span>
<span class="p_header">+++ b/kernel/exit.c</span>
<span class="p_chunk">@@ -436,7 +436,7 @@</span> <span class="p_context"> static void exit_mm(struct task_struct *tsk)</span>
 	mm_update_next_owner(mm);
 	mmput(mm);
 	if (test_thread_flag(TIF_MEMDIE))
<span class="p_del">-		exit_oom_victim();</span>
<span class="p_add">+		exit_oom_victim(tsk);</span>
 }
 
 static struct task_struct *find_alive_thread(struct task_struct *p)
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 840e03986497..8e345126d73e 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -417,20 +417,36 @@</span> <span class="p_context"> bool oom_killer_disabled __read_mostly;</span>
  * victim (if that is possible) to help the OOM killer to move on.
  */
 static struct task_struct *oom_reaper_th;
<span class="p_del">-static struct mm_struct *mm_to_reap;</span>
<span class="p_add">+static struct task_struct *task_to_reap;</span>
 static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);
 
<span class="p_del">-static bool __oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static bool __oom_reap_task(struct task_struct *tsk)</span>
 {
 	struct mmu_gather tlb;
 	struct vm_area_struct *vma;
<span class="p_add">+	struct mm_struct *mm;</span>
<span class="p_add">+	struct task_struct *p;</span>
 	struct zap_details details = {.check_swap_entries = true,
 				      .ignore_dirty = true};
 	bool ret = true;
 
<span class="p_del">-	/* We might have raced with exit path */</span>
<span class="p_del">-	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users))</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure we find the associated mm_struct even when the particular</span>
<span class="p_add">+	 * thread has already terminated and cleared its mm.</span>
<span class="p_add">+	 * We might have race with exit path so consider our work done if there</span>
<span class="p_add">+	 * is no mm.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	p = find_lock_task_mm(tsk);</span>
<span class="p_add">+	if (!p)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	mm = p-&gt;mm;</span>
<span class="p_add">+	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users)) {</span>
<span class="p_add">+		task_unlock(p);</span>
 		return true;
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	task_unlock(p);</span>
 
 	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {
 		ret = false;
<span class="p_chunk">@@ -461,60 +477,66 @@</span> <span class="p_context"> static bool __oom_reap_vmas(struct mm_struct *mm)</span>
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 	up_read(&amp;mm-&gt;mmap_sem);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="p_add">+	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="p_add">+	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="p_add">+	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="p_add">+	 * make any sense.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="p_add">+	exit_oom_victim(tsk);</span>
 out:
 	mmput(mm);
 	return ret;
 }
 
<span class="p_del">-static void oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static void oom_reap_task(struct task_struct *tsk)</span>
 {
 	int attempts = 0;
 
 	/* Retry the down_read_trylock(mmap_sem) a few times */
<span class="p_del">-	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_vmas(mm))</span>
<span class="p_add">+	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_task(tsk))</span>
 		schedule_timeout_idle(HZ/10);
 
 	/* Drop a reference taken by wake_oom_reaper */
<span class="p_del">-	mmdrop(mm);</span>
<span class="p_add">+	put_task_struct(tsk);</span>
 }
 
 static int oom_reaper(void *unused)
 {
 	while (true) {
<span class="p_del">-		struct mm_struct *mm;</span>
<span class="p_add">+		struct task_struct *tsk;</span>
 
 		wait_event_freezable(oom_reaper_wait,
<span class="p_del">-				     (mm = READ_ONCE(mm_to_reap)));</span>
<span class="p_del">-		oom_reap_vmas(mm);</span>
<span class="p_del">-		WRITE_ONCE(mm_to_reap, NULL);</span>
<span class="p_add">+				     (tsk = READ_ONCE(task_to_reap)));</span>
<span class="p_add">+		oom_reap_task(tsk);</span>
<span class="p_add">+		WRITE_ONCE(task_to_reap, NULL);</span>
 	}
 
 	return 0;
 }
 
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *tsk)</span>
 {
<span class="p_del">-	struct mm_struct *old_mm;</span>
<span class="p_add">+	struct task_struct *old_tsk;</span>
 
 	if (!oom_reaper_th)
 		return;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Pin the given mm. Use mm_count instead of mm_users because</span>
<span class="p_del">-	 * we do not want to delay the address space tear down.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	atomic_inc(&amp;mm-&gt;mm_count);</span>
<span class="p_add">+	get_task_struct(tsk);</span>
 
 	/*
 	 * Make sure that only a single mm is ever queued for the reaper
 	 * because multiple are not necessary and the operation might be
 	 * disruptive so better reduce it to the bare minimum.
 	 */
<span class="p_del">-	old_mm = cmpxchg(&amp;mm_to_reap, NULL, mm);</span>
<span class="p_del">-	if (!old_mm)</span>
<span class="p_add">+	old_tsk = cmpxchg(&amp;task_to_reap, NULL, tsk);</span>
<span class="p_add">+	if (!old_tsk)</span>
 		wake_up(&amp;oom_reaper_wait);
 	else
<span class="p_del">-		mmdrop(mm);</span>
<span class="p_add">+		put_task_struct(tsk);</span>
 }
 
 static int __init oom_init(void)
<span class="p_chunk">@@ -529,7 +551,7 @@</span> <span class="p_context"> static int __init oom_init(void)</span>
 }
 subsys_initcall(oom_init)
 #else
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *mm)</span>
 {
 }
 #endif
<span class="p_chunk">@@ -560,9 +582,10 @@</span> <span class="p_context"> void mark_oom_victim(struct task_struct *tsk)</span>
 /**
  * exit_oom_victim - note the exit of an OOM victim
  */
<span class="p_del">-void exit_oom_victim(void)</span>
<span class="p_add">+void exit_oom_victim(struct task_struct *tsk)</span>
 {
<span class="p_del">-	clear_thread_flag(TIF_MEMDIE);</span>
<span class="p_add">+	if (!test_and_clear_tsk_thread_flag(tsk, TIF_MEMDIE))</span>
<span class="p_add">+		return;</span>
 
 	if (!atomic_dec_return(&amp;oom_victims))
 		wake_up_all(&amp;oom_victims_wait);
<span class="p_chunk">@@ -745,7 +768,7 @@</span> <span class="p_context"> void oom_kill_process(struct oom_control *oc, struct task_struct *p,</span>
 	rcu_read_unlock();
 
 	if (can_oom_reap)
<span class="p_del">-		wake_oom_reaper(mm);</span>
<span class="p_add">+		wake_oom_reaper(victim);</span>
 
 	mmdrop(mm);
 	put_task_struct(victim);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



