
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[07/22] swiotlb: add common swiotlb_map_ops - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [07/22] swiotlb: add common swiotlb_map_ops</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 10, 2018, 8:09 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180110080932.14157-8-hch@lst.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10154409/mbox/"
   >mbox</a>
|
   <a href="/patch/10154409/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10154409/">/patch/10154409/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	45E7360231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 10 Jan 2018 08:10:10 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3BEEF26E47
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 10 Jan 2018 08:10:10 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 2FCD327F7F; Wed, 10 Jan 2018 08:10:10 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 960BA26E47
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 10 Jan 2018 08:10:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933200AbeAJIKG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 10 Jan 2018 03:10:06 -0500
Received: from bombadil.infradead.org ([65.50.211.133]:50517 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932527AbeAJIKB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 10 Jan 2018 03:10:01 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=Q03hRYUbpouKbMRNwIy5W1fBLImmhcPJhClaOWFoxeE=;
	b=W6xDGCEBMNE6dOGPB12HPJ3+K
	KGBH/hKl+i3HLeC3hBZLT88kOOvLCGQpNoN4PYveEb2CjK54QqXoB+cH3OtSc2FMozveB/6zlz7ah
	xqKYlf56cyh+RpHcU7i8dTY+gbTezuIwUTsIO5WB48ANPumZz8st2WwWG0G6kTK7t5j4kW9dF4VwQ
	e7rqJ9jfIWHrZULaroFeVSFoFXWf3ePEm57izaJqP3QPkwm5CapLiyCQO2Od79OzNvqwfT+nRLMe5
	u0aLj2bctQHQ6vDYF7gz1Dtr3Js5OZaAEJtwttLsGcyXI2CWwWp6FYGbMjgnQ3YQMXZ8Er48rCrgz
	hO54YFZfg==;
Received: from clnet-p099-196.ikbnet.co.at ([83.175.99.196] helo=localhost)
	by bombadil.infradead.org with esmtpsa (Exim 4.89 #1 (Red Hat
	Linux)) id 1eZBSN-00083q-8b; Wed, 10 Jan 2018 08:09:55 +0000
From: Christoph Hellwig &lt;hch@lst.de&gt;
To: iommu@lists.linux-foundation.org
Cc: Konrad Rzeszutek Wilk &lt;konrad@darnok.org&gt;,
	Michal Simek &lt;monstr@monstr.eu&gt;, Guan Xuetao &lt;gxt@mprc.pku.edu.cn&gt;,
	=?UTF-8?q?Christian=20K=C3=B6nig?= &lt;ckoenig.leichtzumerken@gmail.com&gt;,
	linux-arm-kernel@lists.infradead.org, linux-ia64@vger.kernel.org,
	linux-mips@linux-mips.org, linuxppc-dev@lists.ozlabs.org,
	x86@kernel.org, linux-arch@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: [PATCH 07/22] swiotlb: add common swiotlb_map_ops
Date: Wed, 10 Jan 2018 09:09:17 +0100
Message-Id: &lt;20180110080932.14157-8-hch@lst.de&gt;
X-Mailer: git-send-email 2.14.2
In-Reply-To: &lt;20180110080932.14157-1-hch@lst.de&gt;
References: &lt;20180110080932.14157-1-hch@lst.de&gt;
X-SRS-Rewrite: SMTP reverse-path rewritten from &lt;hch@infradead.org&gt; by
	bombadil.infradead.org. See http://www.infradead.org/rpr.html
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99">Christoph Hellwig</a> - Jan. 10, 2018, 8:09 a.m.</div>
<pre class="content">
Currently all architectures that want to use swiotlb have to implement
their own dma_map_ops instances.  Provide a generic one based on the
x86 implementation which first calls into dma_direct to try a full blown
direct mapping implementation (including e.g. CMA) before falling back
allocating from the swiotlb buffer.
<span class="signed-off-by">
Signed-off-by: Christoph Hellwig &lt;hch@lst.de&gt;</span>
---
 include/linux/swiotlb.h |  8 ++++++++
 lib/swiotlb.c           | 43 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 51 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index 606375e35d87..5b1f2a00491c 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -66,6 +66,12 @@</span> <span class="p_context"> extern void swiotlb_tbl_sync_single(struct device *hwdev,</span>
 				    enum dma_sync_target target);
 
 /* Accessory functions. */
<span class="p_add">+</span>
<span class="p_add">+void *swiotlb_alloc(struct device *hwdev, size_t size, dma_addr_t *dma_handle,</span>
<span class="p_add">+		gfp_t flags, unsigned long attrs);</span>
<span class="p_add">+void swiotlb_free(struct device *dev, size_t size, void *vaddr,</span>
<span class="p_add">+		dma_addr_t dma_addr, unsigned long attrs);</span>
<span class="p_add">+</span>
 extern void
 *swiotlb_alloc_coherent(struct device *hwdev, size_t size,
 			dma_addr_t *dma_handle, gfp_t flags);
<span class="p_chunk">@@ -126,4 +132,6 @@</span> <span class="p_context"> extern void swiotlb_print_info(void);</span>
 extern int is_swiotlb_buffer(phys_addr_t paddr);
 extern void swiotlb_set_max_segment(unsigned int);
 
<span class="p_add">+extern const struct dma_map_ops swiotlb_dma_ops;</span>
<span class="p_add">+</span>
 #endif /* __LINUX_SWIOTLB_H */
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index cf5311908fa9..0fae2f45c3c0 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -1087,3 +1087,46 @@</span> <span class="p_context"> swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
 	return swiotlb_phys_to_dma(hwdev, io_tlb_end - 1) &lt;= mask;
 }
 EXPORT_SYMBOL(swiotlb_dma_supported);
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_DMA_DIRECT_OPS</span>
<span class="p_add">+void *swiotlb_alloc(struct device *dev, size_t size, dma_addr_t *dma_handle,</span>
<span class="p_add">+		gfp_t gfp, unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *vaddr;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Don&#39;t print a warning when the first allocation attempt fails.</span>
<span class="p_add">+	 * swiotlb_alloc_coherent() will print a warning when the DMA memory</span>
<span class="p_add">+	 * allocation ultimately failed.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	gfp |= __GFP_NOWARN;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = dma_direct_alloc(dev, size, dma_handle, gfp, attrs);</span>
<span class="p_add">+	if (!vaddr)</span>
<span class="p_add">+		vaddr = swiotlb_alloc_coherent(dev, size, dma_handle, gfp);</span>
<span class="p_add">+	return vaddr;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void swiotlb_free(struct device *dev, size_t size, void *vaddr,</span>
<span class="p_add">+		dma_addr_t dma_addr, unsigned long attrs)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (is_swiotlb_buffer(dma_to_phys(dev, dma_addr)))</span>
<span class="p_add">+		swiotlb_free_coherent(dev, size, vaddr, dma_addr);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		dma_direct_free(dev, size, vaddr, dma_addr, attrs);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+const struct dma_map_ops swiotlb_dma_ops = {</span>
<span class="p_add">+	.mapping_error		= swiotlb_dma_mapping_error,</span>
<span class="p_add">+	.alloc			= swiotlb_alloc,</span>
<span class="p_add">+	.free			= swiotlb_free,</span>
<span class="p_add">+	.sync_single_for_cpu	= swiotlb_sync_single_for_cpu,</span>
<span class="p_add">+	.sync_single_for_device	= swiotlb_sync_single_for_device,</span>
<span class="p_add">+	.sync_sg_for_cpu	= swiotlb_sync_sg_for_cpu,</span>
<span class="p_add">+	.sync_sg_for_device	= swiotlb_sync_sg_for_device,</span>
<span class="p_add">+	.map_sg			= swiotlb_map_sg_attrs,</span>
<span class="p_add">+	.unmap_sg		= swiotlb_unmap_sg_attrs,</span>
<span class="p_add">+	.map_page		= swiotlb_map_page,</span>
<span class="p_add">+	.unmap_page		= swiotlb_unmap_page,</span>
<span class="p_add">+};</span>
<span class="p_add">+#endif /* CONFIG_DMA_DIRECT_OPS */</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



