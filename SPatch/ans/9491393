
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[1/2] arm64: dma_mapping: allow PCI host driver to limit DMA mask - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [1/2] arm64: dma_mapping: allow PCI host driver to limit DMA mask</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 29, 2016, 8:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1483044304-2085-1-git-send-email-nikita.yoush@cogentembedded.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9491393/mbox/"
   >mbox</a>
|
   <a href="/patch/9491393/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9491393/">/patch/9491393/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	F0A4662AB8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 20:45:24 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D4F2C22BF1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 20:45:24 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C685220007; Thu, 29 Dec 2016 20:45:24 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.4 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4EBD920007
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 29 Dec 2016 20:45:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751210AbcL2UpS (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 29 Dec 2016 15:45:18 -0500
Received: from mail-lf0-f46.google.com ([209.85.215.46]:34594 &quot;EHLO
	mail-lf0-f46.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750886AbcL2UpQ (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 29 Dec 2016 15:45:16 -0500
Received: by mail-lf0-f46.google.com with SMTP id y21so227074338lfa.1
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 29 Dec 2016 12:45:15 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=cogentembedded-com.20150623.gappssmtp.com; s=20150623;
	h=from:to:cc:subject:date:message-id;
	bh=5n0nViJRUk5iFvdAi+XB+HT+MP1Tc7Q8E47VVOZI0aw=;
	b=RGYcPQMN1Rk/bKa99iOwZfyZ37MPcMq6hLH8V82D0Mt77AIvrmS2tikHDku66vox90
	nG1d5+IiKB44Z2vFCM6XTAt2C7FVyrSYWyEvdyP7LRxLmfINd87dndu/B2uabicLCiwt
	h9ixwuxyAIkrmF7+R00MrZLlqkX7CV+RN84gbVDElMEEX8GVnQTffDJmhErK9s/6tIBn
	A06wdWTcsjKCyYx3jb+9p/YXDqNK9pArU2XiUUmzmUD3ZutqTqsv4SZu/GF2vpthdPba
	MHMnMz5DreJKtD73VzgBxtzWP4YmFWsaL+M/LZ96ZuONa5/7EVvzUpj/QEA8IuRCZwfo
	NuLA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id;
	bh=5n0nViJRUk5iFvdAi+XB+HT+MP1Tc7Q8E47VVOZI0aw=;
	b=MIgxKu6yiduxDTgJih8VijWUgAmA3tEAtOIW7F0SeJllfQv54cf4pzKH1P+kH2sr9k
	A1Dd80MAh3puvhylVZqNR4FOeHYRstSf266YqiMLLdqjINfQsJ6ZiTfKog1o/iZmerEz
	K9nHp3f6UWzRKlhIElHH0D2yeakdrsBL/zAZCZh1qVe9/WIzMRPwP0ZGNJ1ExiMc1zEz
	0eVrfM4RXnVvd+AqWrPfuHEVXlHqW9y9kcZi54D6F6irSZ4AsRVa/D0GvKqQ6lCvNWDH
	oR6TqDOMpcJaF6uupoOXaG/eSsfzN7hlVZl+40marGmh1Oalpn5dUL9AcO4QaAMqbLnr
	wp5w==
X-Gm-Message-State: AIkVDXIz4gcz27Y1w9i1Kz0Gx4bOjOIJy79TkD4xHH4ScbhfcRnwaPaZiW1+i0oLAlNrSw==
X-Received: by 10.25.79.21 with SMTP id d21mr12422394lfb.49.1483044314541;
	Thu, 29 Dec 2016 12:45:14 -0800 (PST)
Received: from hugenb.home (nikaet.starlink.ru. [94.141.168.29])
	by smtp.gmail.com with ESMTPSA id
	d2sm3338104lfe.13.2016.12.29.12.45.12
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Thu, 29 Dec 2016 12:45:12 -0800 (PST)
From: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;
To: Catalin Marinas &lt;catalin.marinas@arm.com&gt;,
	Will Deacon &lt;will.deacon@arm.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	linux-arm-kernel@lists.infradead.org, Simon Horman &lt;horms@verge.net.au&gt;,
	Bjorn Helgaas &lt;bhelgaas@google.com&gt;, linux-pci@vger.kernel.org,
	linux-renesas-soc@vger.kernel.org
Cc: artemi.ivanov@cogentembedded.com, linux-kernel@vger.kernel.org,
	Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;
Subject: [PATCH 1/2] arm64: dma_mapping: allow PCI host driver to limit DMA
	mask
Date: Thu, 29 Dec 2016 23:45:03 +0300
Message-Id: &lt;1483044304-2085-1-git-send-email-nikita.yoush@cogentembedded.com&gt;
X-Mailer: git-send-email 2.1.4
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Dec. 29, 2016, 8:45 p.m.</div>
<pre class="content">
It is possible that PCI device supports 64-bit DMA addressing, and thus
it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host
bridge has limitations on inbound transactions addressing. Example of
such setup is NVME SSD device connected to RCAR PCIe controller.

Previously there was attempt to handle this via bus notifier: after
driver is attached to PCI device, bridge driver gets notifier callback,
and resets dma_mask from there. However, this is racy: PCI device driver
could already allocate buffers and/or start i/o in probe routine.
In NVME case, i/o is started in workqueue context, and this race gives
&quot;sometimes works, sometimes not&quot; effect.

Proper solution should make driver&#39;s dma_set_mask() call to fail if host
bridge can&#39;t support mask being set.

This patch makes __swiotlb_dma_supported() to check mask being set for
PCI device against dma_mask of struct device corresponding to PCI host
bridge (one with name &quot;pciXXXX:YY&quot;), if that dma_mask is set.

This is the least destructive approach: currently dma_mask of that device
object is not used anyhow, thus all existing setups will work as before,
and modification is required only in actually affected components -
driver of particular PCI host bridge, and dma_map_ops of particular
platform.
<span class="signed-off-by">
Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
---
 arch/arm64/mm/dma-mapping.c | 11 +++++++++++
 1 file changed, 11 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176">Arnd Bergmann</a> - Dec. 29, 2016, 9:18 p.m.</div>
<pre class="content">
On Thursday, December 29, 2016 11:45:03 PM CET Nikita Yushchenko wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt; +       if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt; +               struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt; +               struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +               if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt; +                               (mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="quote">&gt; +                       return 0;</span>
<span class="quote">&gt; +       }</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;         if (swiotlb)</span>
<span class="quote">&gt;                 return swiotlb_dma_supported(hwdev, mask);</span>
<span class="quote">&gt;         return 1;</span>
<span class="quote">&gt; </span>

I think it&#39;s wrong to make this a special case for PCI.

Instead, we should follow the dma-ranges properties during dma_set_mask()
to ensure we don&#39;t set a mask that any of the parents up to the root
cannot support.

	Arnd
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59911">Sergei Shtylyov</a> - Dec. 30, 2016, 9:46 a.m.</div>
<pre class="content">
Hello!

On 12/29/2016 11:45 PM, Nikita Yushchenko wrote:
<span class="quote">
&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>

    Its.
<span class="quote">
&gt; bridge has limitations on inbound transactions addressing. Example of</span>
<span class="quote">&gt; such setup is NVME</span>

    Isn&#39;t it called NVMe?
<span class="quote">
&gt; SSD device connected to RCAR PCIe controller.</span>

    R=Car.
<span class="quote">
&gt; Previously there was attempt to handle this via bus notifier: after</span>
<span class="quote">&gt; driver is attached to PCI device, bridge driver gets notifier callback,</span>
<span class="quote">&gt; and resets dma_mask from there. However, this is racy: PCI device driver</span>
<span class="quote">&gt; could already allocate buffers and/or start i/o in probe routine.</span>
<span class="quote">&gt; In NVME case, i/o is started in workqueue context, and this race gives</span>
<span class="quote">&gt; &quot;sometimes works, sometimes not&quot; effect.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Proper solution should make driver&#39;s dma_set_mask() call to fail if host</span>
<span class="quote">&gt; bridge can&#39;t support mask being set.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This patch makes __swiotlb_dma_supported() to check mask being set for</span>

    &quot;To&quot; not needed here.
<span class="quote">
&gt; PCI device against dma_mask of struct device corresponding to PCI host</span>
<span class="quote">&gt; bridge (one with name &quot;pciXXXX:YY&quot;), if that dma_mask is set.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This is the least destructive approach: currently dma_mask of that device</span>
<span class="quote">&gt; object is not used anyhow, thus all existing setups will work as before,</span>
<span class="quote">&gt; and modification is required only in actually affected components -</span>
<span class="quote">&gt; driver of particular PCI host bridge, and dma_map_ops of particular</span>
<span class="quote">&gt; platform.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/mm/dma-mapping.c | 11 +++++++++++</span>
<span class="quote">&gt;  1 file changed, 11 insertions(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 290a84f..49645277 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
[...]
<span class="quote">&gt; @@ -347,6 +348,16 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt; +	if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt; +		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt; +		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt; +				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>

    Hum, inner parens not necessary?

[...]

MBR, Sergei
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=59911">Sergei Shtylyov</a> - Dec. 30, 2016, 10:06 a.m.</div>
<pre class="content">
On 12/30/2016 12:46 PM, Sergei Shtylyov wrote:
<span class="quote">
&gt;&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt;&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    Its.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; bridge has limitations on inbound transactions addressing. Example of</span>
<span class="quote">&gt;&gt; such setup is NVME</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    Isn&#39;t it called NVMe?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; SSD device connected to RCAR PCIe controller.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    R=Car.</span>

    Sorry, R-Car. :-)

[...]

MBR, Sergei
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - Jan. 3, 2017, 6:44 p.m.</div>
<pre class="content">
On Thu, Dec 29, 2016 at 11:45:03PM +0300, Nikita Yushchenko wrote:
<span class="quote">&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>
<span class="quote">&gt; bridge has limitations on inbound transactions addressing. Example of</span>
<span class="quote">&gt; such setup is NVME SSD device connected to RCAR PCIe controller.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Previously there was attempt to handle this via bus notifier: after</span>
<span class="quote">&gt; driver is attached to PCI device, bridge driver gets notifier callback,</span>
<span class="quote">&gt; and resets dma_mask from there. However, this is racy: PCI device driver</span>
<span class="quote">&gt; could already allocate buffers and/or start i/o in probe routine.</span>
<span class="quote">&gt; In NVME case, i/o is started in workqueue context, and this race gives</span>
<span class="quote">&gt; &quot;sometimes works, sometimes not&quot; effect.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Proper solution should make driver&#39;s dma_set_mask() call to fail if host</span>
<span class="quote">&gt; bridge can&#39;t support mask being set.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch makes __swiotlb_dma_supported() to check mask being set for</span>
<span class="quote">&gt; PCI device against dma_mask of struct device corresponding to PCI host</span>
<span class="quote">&gt; bridge (one with name &quot;pciXXXX:YY&quot;), if that dma_mask is set.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is the least destructive approach: currently dma_mask of that device</span>
<span class="quote">&gt; object is not used anyhow, thus all existing setups will work as before,</span>
<span class="quote">&gt; and modification is required only in actually affected components -</span>
<span class="quote">&gt; driver of particular PCI host bridge, and dma_map_ops of particular</span>
<span class="quote">&gt; platform.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/mm/dma-mapping.c | 11 +++++++++++</span>
<span class="quote">&gt;  1 file changed, 11 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; index 290a84f..49645277 100644</span>
<span class="quote">&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt; @@ -28,6 +28,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/pci.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -347,6 +348,16 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt; +	if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt; +		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt; +		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt; +				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="quote">&gt; +			return 0;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +#endif</span>

Hmm, but this makes it look like the problem is both arm64 and swiotlb
specific, when in reality it&#39;s not. Perhaps another hack you could try
would be to register a PCI bus notifier in the host bridge looking for
BUS_NOTIFY_BIND_DRIVER, then you could proxy the DMA ops for each child
device before the driver has probed, but adding a dma_set_mask callback
to limit the mask to what you need?

I agree that it would be better if dma_set_mask handled all of this
transparently, but it&#39;s all based on the underlying ops rather than the
bus type.

Will
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Jan. 3, 2017, 7:01 p.m.</div>
<pre class="content">
<span class="quote">&gt;&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt;&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>
<span class="quote">&gt;&gt; bridge has limitations on inbound transactions addressing. Example of</span>
<span class="quote">&gt;&gt; such setup is NVME SSD device connected to RCAR PCIe controller.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Previously there was attempt to handle this via bus notifier: after</span>
<span class="quote">&gt;&gt; driver is attached to PCI device, bridge driver gets notifier callback,</span>
<span class="quote">&gt;&gt; and resets dma_mask from there. However, this is racy: PCI device driver</span>
<span class="quote">&gt;&gt; could already allocate buffers and/or start i/o in probe routine.</span>
<span class="quote">&gt;&gt; In NVME case, i/o is started in workqueue context, and this race gives</span>
<span class="quote">&gt;&gt; &quot;sometimes works, sometimes not&quot; effect.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Proper solution should make driver&#39;s dma_set_mask() call to fail if host</span>
<span class="quote">&gt;&gt; bridge can&#39;t support mask being set.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This patch makes __swiotlb_dma_supported() to check mask being set for</span>
<span class="quote">&gt;&gt; PCI device against dma_mask of struct device corresponding to PCI host</span>
<span class="quote">&gt;&gt; bridge (one with name &quot;pciXXXX:YY&quot;), if that dma_mask is set.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is the least destructive approach: currently dma_mask of that device</span>
<span class="quote">&gt;&gt; object is not used anyhow, thus all existing setups will work as before,</span>
<span class="quote">&gt;&gt; and modification is required only in actually affected components -</span>
<span class="quote">&gt;&gt; driver of particular PCI host bridge, and dma_map_ops of particular</span>
<span class="quote">&gt;&gt; platform.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  arch/arm64/mm/dma-mapping.c | 11 +++++++++++</span>
<span class="quote">&gt;&gt;  1 file changed, 11 insertions(+)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; index 290a84f..49645277 100644</span>
<span class="quote">&gt;&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt; @@ -28,6 +28,7 @@</span>
<span class="quote">&gt;&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt;&gt; +#include &lt;linux/pci.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; @@ -347,6 +348,16 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt;&gt; +	if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt;&gt; +		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt;&gt; +		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt;&gt; +				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="quote">&gt;&gt; +			return 0;</span>
<span class="quote">&gt;&gt; +	}</span>
<span class="quote">&gt;&gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hmm, but this makes it look like the problem is both arm64 and swiotlb</span>
<span class="quote">&gt; specific, when in reality it&#39;s not. Perhaps another hack you could try</span>
<span class="quote">&gt; would be to register a PCI bus notifier in the host bridge looking for</span>
<span class="quote">&gt; BUS_NOTIFY_BIND_DRIVER, then you could proxy the DMA ops for each child</span>
<span class="quote">&gt; device before the driver has probed, but adding a dma_set_mask callback</span>
<span class="quote">&gt; to limit the mask to what you need?</span>

This is what Renesas BSP tries to do and it does not work.

BUS_NOTIFY_BIND_DRIVER arrives after driver&#39;s probe routine exits, but
i/o can be started before that.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=49991">Strashko, Grygorii</a> - Jan. 3, 2017, 8:13 p.m.</div>
<pre class="content">
On 01/03/2017 01:01 PM, Nikita Yushchenko wrote:
<span class="quote">&gt;&gt;&gt; It is possible that PCI device supports 64-bit DMA addressing, and thus</span>
<span class="quote">&gt;&gt;&gt; it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host</span>
<span class="quote">&gt;&gt;&gt; bridge has limitations on inbound transactions addressing. Example of</span>
<span class="quote">&gt;&gt;&gt; such setup is NVME SSD device connected to RCAR PCIe controller.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Previously there was attempt to handle this via bus notifier: after</span>
<span class="quote">&gt;&gt;&gt; driver is attached to PCI device, bridge driver gets notifier callback,</span>
<span class="quote">&gt;&gt;&gt; and resets dma_mask from there. However, this is racy: PCI device driver</span>
<span class="quote">&gt;&gt;&gt; could already allocate buffers and/or start i/o in probe routine.</span>
<span class="quote">&gt;&gt;&gt; In NVME case, i/o is started in workqueue context, and this race gives</span>
<span class="quote">&gt;&gt;&gt; &quot;sometimes works, sometimes not&quot; effect.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Proper solution should make driver&#39;s dma_set_mask() call to fail if host</span>
<span class="quote">&gt;&gt;&gt; bridge can&#39;t support mask being set.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This patch makes __swiotlb_dma_supported() to check mask being set for</span>
<span class="quote">&gt;&gt;&gt; PCI device against dma_mask of struct device corresponding to PCI host</span>
<span class="quote">&gt;&gt;&gt; bridge (one with name &quot;pciXXXX:YY&quot;), if that dma_mask is set.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; This is the least destructive approach: currently dma_mask of that device</span>
<span class="quote">&gt;&gt;&gt; object is not used anyhow, thus all existing setups will work as before,</span>
<span class="quote">&gt;&gt;&gt; and modification is required only in actually affected components -</span>
<span class="quote">&gt;&gt;&gt; driver of particular PCI host bridge, and dma_map_ops of particular</span>
<span class="quote">&gt;&gt;&gt; platform.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Signed-off-by: Nikita Yushchenko &lt;nikita.yoush@cogentembedded.com&gt;</span>
<span class="quote">&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;  arch/arm64/mm/dma-mapping.c | 11 +++++++++++</span>
<span class="quote">&gt;&gt;&gt;  1 file changed, 11 insertions(+)</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt; index 290a84f..49645277 100644</span>
<span class="quote">&gt;&gt;&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt; @@ -28,6 +28,7 @@</span>
<span class="quote">&gt;&gt;&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;&gt;&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;&gt;&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt;&gt;&gt; +#include &lt;linux/pci.h&gt;</span>
<span class="quote">&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt; @@ -347,6 +348,16 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt;&gt;&gt; +	if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt;&gt;&gt; +		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt;&gt;&gt; +		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt; +		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt;&gt;&gt; +				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="quote">&gt;&gt;&gt; +			return 0;</span>
<span class="quote">&gt;&gt;&gt; +	}</span>
<span class="quote">&gt;&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Hmm, but this makes it look like the problem is both arm64 and swiotlb</span>
<span class="quote">&gt;&gt; specific, when in reality it&#39;s not. Perhaps another hack you could try</span>
<span class="quote">&gt;&gt; would be to register a PCI bus notifier in the host bridge looking for</span>
<span class="quote">&gt;&gt; BUS_NOTIFY_BIND_DRIVER, then you could proxy the DMA ops for each child</span>
<span class="quote">&gt;&gt; device before the driver has probed, but adding a dma_set_mask callback</span>
<span class="quote">&gt;&gt; to limit the mask to what you need?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is what Renesas BSP tries to do and it does not work.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; BUS_NOTIFY_BIND_DRIVER arrives after driver&#39;s probe routine exits, but</span>
<span class="quote">&gt; i/o can be started before that.</span>

Hm. This is strange statement:
 really_probe
 |-&gt;driver_sysfs_add
    |-&gt; blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
 					     BUS_NOTIFY_BIND_DRIVER, dev);
...
 |- ret = drv-&gt;probe(dev);
...
 |- driver_bound(dev);
    |- blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
					     BUS_NOTIFY_BOUND_DRIVER, dev);

Am I missing smth?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170319">Nikita Yushchenko</a> - Jan. 3, 2017, 8:23 p.m.</div>
<pre class="content">
<span class="quote">&gt;&gt;&gt;&gt; diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt;&gt; index 290a84f..49645277 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- a/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -28,6 +28,7 @@</span>
<span class="quote">&gt;&gt;&gt;&gt;  #include &lt;linux/dma-contiguous.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  #include &lt;linux/vmalloc.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  #include &lt;linux/swiotlb.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; +#include &lt;linux/pci.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;&gt;  #include &lt;asm/cacheflush.h&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -347,6 +348,16 @@ static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
<span class="quote">&gt;&gt;&gt;&gt;  </span>
<span class="quote">&gt;&gt;&gt;&gt;  static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)</span>
<span class="quote">&gt;&gt;&gt;&gt;  {</span>
<span class="quote">&gt;&gt;&gt;&gt; +#ifdef CONFIG_PCI</span>
<span class="quote">&gt;&gt;&gt;&gt; +	if (dev_is_pci(hwdev)) {</span>
<span class="quote">&gt;&gt;&gt;&gt; +		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="quote">&gt;&gt;&gt;&gt; +		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="quote">&gt;&gt;&gt;&gt; +</span>
<span class="quote">&gt;&gt;&gt;&gt; +		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="quote">&gt;&gt;&gt;&gt; +				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="quote">&gt;&gt;&gt;&gt; +			return 0;</span>
<span class="quote">&gt;&gt;&gt;&gt; +	}</span>
<span class="quote">&gt;&gt;&gt;&gt; +#endif</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Hmm, but this makes it look like the problem is both arm64 and swiotlb</span>
<span class="quote">&gt;&gt;&gt; specific, when in reality it&#39;s not. Perhaps another hack you could try</span>
<span class="quote">&gt;&gt;&gt; would be to register a PCI bus notifier in the host bridge looking for</span>
<span class="quote">&gt;&gt;&gt; BUS_NOTIFY_BIND_DRIVER, then you could proxy the DMA ops for each child</span>
<span class="quote">&gt;&gt;&gt; device before the driver has probed, but adding a dma_set_mask callback</span>
<span class="quote">&gt;&gt;&gt; to limit the mask to what you need?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; This is what Renesas BSP tries to do and it does not work.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; BUS_NOTIFY_BIND_DRIVER arrives after driver&#39;s probe routine exits, but</span>
<span class="quote">&gt;&gt; i/o can be started before that.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hm. This is strange statement:</span>
<span class="quote">&gt;  really_probe</span>
<span class="quote">&gt;  |-&gt;driver_sysfs_add</span>
<span class="quote">&gt;     |-&gt; blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,</span>
<span class="quote">&gt;  					     BUS_NOTIFY_BIND_DRIVER, dev);</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;  |- ret = drv-&gt;probe(dev);</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;  |- driver_bound(dev);</span>
<span class="quote">&gt;     |- blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,</span>
<span class="quote">&gt; 					     BUS_NOTIFY_BOUND_DRIVER, dev);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Am I missing smth?</span>

I misinterpreted your message, sorry.

BSP attaches to BUS_NOTIFY_BOUND_DRIVER, not to BUS_NOTIFY_BIND_DRIVER,
and simply overwrites device&#39;s dma_mask there.  You are suggesting
something completely different.

I&#39;ll check if your approach is practical.


Currently powerpc architecture has one more approach implemented, they
use pci_controller structure provided by host bridge driver, and that
has a set_dma_mask() hook. Maybe extending this beyond powerpc could be
a good idea. However, that will require changing quite a few host bridge
drivers, without any gain for most of those...
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 290a84f..49645277 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -28,6 +28,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/dma-contiguous.h&gt;
 #include &lt;linux/vmalloc.h&gt;
 #include &lt;linux/swiotlb.h&gt;
<span class="p_add">+#include &lt;linux/pci.h&gt;</span>
 
 #include &lt;asm/cacheflush.h&gt;
 
<span class="p_chunk">@@ -347,6 +348,16 @@</span> <span class="p_context"> static int __swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,</span>
 
 static int __swiotlb_dma_supported(struct device *hwdev, u64 mask)
 {
<span class="p_add">+#ifdef CONFIG_PCI</span>
<span class="p_add">+	if (dev_is_pci(hwdev)) {</span>
<span class="p_add">+		struct pci_dev *pdev = to_pci_dev(hwdev);</span>
<span class="p_add">+		struct pci_host_bridge *br = pci_find_host_bridge(pdev-&gt;bus);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (br-&gt;dev.dma_mask &amp;&amp; (*br-&gt;dev.dma_mask) &amp;&amp;</span>
<span class="p_add">+				(mask &amp; (*br-&gt;dev.dma_mask)) != mask)</span>
<span class="p_add">+			return 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+#endif</span>
 	if (swiotlb)
 		return swiotlb_dma_supported(hwdev, mask);
 	return 1;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



