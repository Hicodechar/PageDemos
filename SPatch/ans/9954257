
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v4,12/17] x86/boot: Add early boot support when running with SEV active - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v4,12/17] x86/boot: Add early boot support when running with SEV active</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 16, 2017, 12:34 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170916123418.37807-13-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9954257/mbox/"
   >mbox</a>
|
   <a href="/patch/9954257/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9954257/">/patch/9954257/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	448EF601D5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:37:13 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 313D4205FB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:37:13 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 25E3B271CB; Sat, 16 Sep 2017 12:37:13 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1F88227F88
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 16 Sep 2017 12:37:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751218AbdIPMhA (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 16 Sep 2017 08:37:00 -0400
Received: from mail-dm3nam03on0057.outbound.protection.outlook.com
	([104.47.41.57]:43351
	&quot;EHLO NAM03-DM3-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751535AbdIPMfI (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 16 Sep 2017 08:35:08 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=7nrUS4Mr24nJ+NmJgcsD8730eGZ1UHDDKotddD4JQzo=;
	b=MjmGKioDIKjScx0A4JjrmifGjkdBqvG4dI8piGlMvCNfT/1wALcrJrZ5z8npoZqzvVGDg2f4+Kql9xvEoVp6PyMo3DBNOaPVKmY/w6U5EDMzuryxXcif29z6Rr+vBKo9a2KUBaqVLfdxWZKWaTQilyClRXpre5O9Cy5XDPKtsRI=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.56.11; Sat, 16 Sep 2017 12:34:51 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: linux-kernel@vger.kernel.org, x86@kernel.org, kvm@vger.kernel.org
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;,
	Tom Lendacky &lt;thomas.lendacky@amd.com&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Laura Abbott &lt;labbott@redhat.com&gt;, Kees Cook &lt;keescook@chromium.org&gt;,
	Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	=?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;,
	Brijesh Singh &lt;brijesh.singh@amd.com&gt;
Subject: [Part1 PATCH v4 12/17] x86/boot: Add early boot support when
	running with SEV active
Date: Sat, 16 Sep 2017 07:34:13 -0500
Message-Id: &lt;20170916123418.37807-13-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20170916123418.37807-1-brijesh.singh@amd.com&gt;
References: &lt;20170916123418.37807-1-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: DM3PR12CA0051.namprd12.prod.outlook.com (10.161.151.19) To
	CY1PR12MB0152.namprd12.prod.outlook.com (10.161.173.22)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: f8935570-2097-4b43-bb01-08d4fcff53b8
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(300000500095)(300135000095)(300000501095)(300135300095)(22001)(300000502095)(300135100095)(2017030254152)(48565401081)(300000503095)(300135400095)(2017052603199)(201703131423075)(201703031133081)(201702281549075)(300000504095)(300135200095)(300000505095)(300135600095)(300000506095)(300135500095);
	SRVR:CY1PR12MB0152; 
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	3:3+/WJcCPgGrkyhkcgaHDdBHOCz8wWbvg9WMgTtO7HQems6Qy2Lp2xuVEMzG4YPVNE69zf05aVt2AvNJ1xD+H7yFzG7vyJznFUN/4BOMGgRvgr2OCf++uG+jKqG45g1jQkzWlwHz2ykVXhppY54sdk0KPJN5XfOM437chU2uQrLkLmbqnLmHCujpPxGvFOKy2/aPxvvuD/wfdDEx3lEcleAs0EFiHxV9Ow7lBfkapSS0RcwkfFYyA4KnvkrTRkMeP;
	25:X22H6w4eGa0wwtgE7mw2Kj1RZADcUp1ckyh8kQ7K9vPwN3vorA6O/XAFHbe7S2RKL+ZHbGPW2RV07ojaMm4+Rfz/GTIa9bMwRQHqB7SLOrDvY+HWNPjawc8bZNZsaEaXJK15/fDgMXvCuDXfnCvZyInO/54eP84bmwYQSlNW0EYTyvhE5ZJFFkK1EeMSnNDfiML5SaPq/BfJnbTi4Gw011tMqo8haR+rnyOEIqgoi8Bw+J2tlfl4Wrs22zayCMNLPkY9mO8eBphMq19oTkhPamNAw4/iFnVWeYDRv18nvd0HfDq2TndJ+0cNDnykLNywgoIJtk1JYpuenfXud7iSJQ==;
	31:MhqFs3t3c34IUgxYuVoNZqTFmLIzRpxxMKvTCgNEhlMtWvNLBmJliFtmi8KvC5fQt0jcDQpc7Wblu8mgLF2IBXfgHmEd1RBevDjLs3TFJBdQGzx1JQYSyzgipqLnS6i5/wEWAKyKfEPFvQ+Nu/sm4GmFWSrWwvAVOd9x2TOVYLa0YW6kkdyVG9IhZi+QzYS1yR1/yHo+QxWS+Zbz9kjJ/XaaKhCai3G3d6JYCbY7ln0=
X-MS-TrafficTypeDiagnostic: CY1PR12MB0152:
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:gfQT+2NTf31HY9YZgO9CddMLuctp2j5sIRn1fhOAQSzX7dZO/hyOVYrjuUSd4lo8D6kWFtB1zyYBzUANfjiCZte76su/4+hugyxAbBymXjyUbhE7G1YKI0CkvvFcr8W3wlb89/JDkgtN+nAMtGI8oujjwKfSLz2x4V2PBWH5T3HfY5WF9BYqc/oB+AEMkuZ1RBDGoywHvTfifIYl++OqqzgeDb5IkmilbIY5zkIGnN1U5wnBY/i5qLWx1jF/34bEpDsTrI6Q67sMdgHy0KtTmDTIb/KkP5rbjsNX8SiEyRfbt9Agd0HQYE36VNhA5y7m1BlfO7p+FHfFtSx+3Et8busZFuXSy42EHroaDd3zSOp7bkn0O0a0428fdsFQh6askFqrxQoB55csbzvBvLlgbL6AJxRQgn9e+Yz1nuYgK7KL7IVbTPiJY0gKRH5Ko2BrRQp4b6TQ2RwVz5n6GJPQyHVT6O1/xEyEfnj8ti0itAvDXtzQz7k9CiqzSWYnpUnd;
	4:0bEUJssU7UfEd6g/Nqpf4Xb4ZsjHV6UJJw4TSQS6KaYoBCUsXd+qpB/K8ckNX68Ls5mcqzQ3fjQaKPs9cHfQmd9THFnTlUXjlL/Lsj181uZ32A8y6AOYoJYKTVl/pK82DhJ5mOMeGq3FjSiiQxg91/E9Gqj5OLtT6J5ZCi6r+14Ivpi+qzBfFnh+C7w1wmCpiVDRYaDMXmv0NVtX6keJD1BlWO8/siR3UnWLd+mHpOKqiFE0dEVufoDxr7jEDSg6jUmTCnMDWd+OCDvZaAK7tYo+lp5l2W4aOEkgyuaY4FKPQuCLUdwMLugtxEhOCz9q8X9dNE/4iqBZYSkto+if2/rBkazd/FXU+VEnJmrY7ho9BtldcvNjToujyDTc+T3z5Jmzcmwc56Gd15LGOYwMEQ==
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110)(146099531331640)(228905959029699);
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB0152932A066FEA4E661A0A43E56D0@CY1PR12MB0152.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(8121501046)(5005006)(100000703101)(100105400095)(93006095)(93001095)(3002001)(10201501046)(6055026)(6041248)(20161123564025)(20161123562025)(20161123558100)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123560025)(20161123555025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:CY1PR12MB0152; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:CY1PR12MB0152; 
X-Forefront-PRVS: 0432A04947
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(346002)(376002)(199003)(189002)(6486002)(53416004)(81156014)(7416002)(81166006)(50466002)(6666003)(2870700001)(7736002)(54906002)(316002)(8676002)(97736004)(2906002)(305945005)(575784001)(53936002)(5660300001)(86362001)(478600001)(16526017)(1076002)(106356001)(110136004)(3846002)(4326008)(23676002)(50226002)(68736007)(25786009)(6116002)(33646002)(105586002)(101416001)(50986999)(47776003)(2950100002)(8936002)(66066001)(36756003)(189998001)(76176999)(2004002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0152;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTFQUjEyTUIwMTUyOzIzOjNQcDBOcmhET1ZqcDMySFBSZUhSNjl2R3N2?=
	=?utf-8?B?dmxXakRzT2Z5WlBCQnpJcUMyRSswZjZnWDBOcFZyY3Zrb3lBMFNjY0hxb2tE?=
	=?utf-8?B?L2cwRDcrV3YyZ1M3Y3NoNExib1JXazVMOGNzamtabU1VbVEveEpkVzJaNndH?=
	=?utf-8?B?eVpjcER5Ui9odFZrdXN5aDh0L3p5M3VhbU56Wm1RSXBSYUtnOXZoa3M4Qkg3?=
	=?utf-8?B?ZnQrSTNSVzExekhMT0JLMEVSMEhjSmYzSHh1SEhqVDRndVVjVk9YV0FNRTlp?=
	=?utf-8?B?b056R29sNU8xY09nUllibDVOOWpack5NU0VWV1ZaTy9mUzVudDNHeEVzRVM2?=
	=?utf-8?B?Rk1la3FqaWJjTStpS2FOTzJvWWlySWF1dnp5YWpsak1NVHZBSDBDaUpVelJW?=
	=?utf-8?B?aFRGODJHY0s4NmtINHZKdG1saC9jb3JFNHB6a0FrRURMcEphUVNObzlrWitK?=
	=?utf-8?B?SnRhSk9lcmwwZmJHR1RSWU5zbTkwOERGeExXT1p1d1FNelF4VXhNd213UHEy?=
	=?utf-8?B?Z0ZFdWIwcmtVUEVhK0grWmVRS29DNndBMUZOWXRKeDZtbkZWOE9jSEtVSkdt?=
	=?utf-8?B?eFE5NFhuakRHT1Qza2p1NnZHYi9PZloxWERBSnhvWVFOZDRPTHQyWGdZN0Jv?=
	=?utf-8?B?MHc1ejhPd0c3L2lVVVlkVU52MGFrdzlKbjBEa2h3M01OdjYxZU5DNzVIZ3p1?=
	=?utf-8?B?ci9WUW5NVHQwVTBoZE03aGpLTUJ6RVBMc3lFMUdhRG1uMlFONmtxMlhRYkpz?=
	=?utf-8?B?ZnYwbmlXUEFCYjh3RVI3cHlqOVRGRlJneHpEVnVmdTIzYVBWZEZqaHZ0NGM2?=
	=?utf-8?B?NW16WG1Kd3JzZkxuRm9GRU82Y3YyRVFwTFhLY2tqaEFCL3JkbmxYOVJ0bk5y?=
	=?utf-8?B?RE1IcWpyZG5QZlp6anFGRkFYVFczNFVTb3pHNUJBdVJPS2QraEhDWGNjZ2hL?=
	=?utf-8?B?NU8xbEFGR0pCeUtQQlFZbkNsYnJyMnRmc3NEM3RIN045UitTRlo0WE9kdm16?=
	=?utf-8?B?RnhVTDhJR25JbXRBTk1Gb0w3dFlVYW45OUhZenJ6RzBkemNmSUhOWHVtK2ZI?=
	=?utf-8?B?U1BFeXRJU2srMnJ1RTM1UG5jdjNGMDdNTW9ncy9FWVFJV2lHUTJrZmVBc1RS?=
	=?utf-8?B?aDliUktWMy8vN2x4VmJaOEtqc2JOT0VDcVRSQ3JCUTFuT1ZTa3l0SGZIekFG?=
	=?utf-8?B?UmY5YTRJSnJjS1JON1M2TzhITXFUQmpVOTFwMUxCUXZCYk9acklVeXBqdElm?=
	=?utf-8?B?OHlRWElnLzlWa0Y1ZWRrcTZWSXQ4Ynl5QkxYVEdHSFBZMDJqZWsyaFpJbW1M?=
	=?utf-8?B?cFlhbmt6cDFHYnNXLzFJM3lhNlU4Z1AwdFlLTHZWSkVkSFZ6czI3K3dYQzNI?=
	=?utf-8?B?eSsrSHZvTTVjakF1c0ZoM0lWOFpuUzRGeXF4NjZTM0tUMXprd29DYUd0OWl1?=
	=?utf-8?B?U2I0andDOGhSRjJUYkFjUjBad0tMbHdFa0J3VWxzWWhBVlF6SWQzcXV4b054?=
	=?utf-8?Q?0QcUroNOZb/2UitmBuWGtAkYg=3D?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	6:w+mLDztqz5pbyIBiaQM0UPLmvBHUsdq4DP9nTm3TayYp7UAxOEqx8JvoewH8z+o9HO0Da+wxOyeNUnz+lhzNsJfulkLrgdg0ifIpozeOViNuTp0M3yE/Jw+oIY6VfrE4sHxDPwWxiDoZTC93fJWWsskB9qD2YfSUXgKvVABjwU51sdXjVHl8+fbcgPa/aS2x8jKPqJQtgkFSZRFN4vFgLpDoRYybX4UvNg49JsGPz1F+md3U6BGB7hWUo4ybdnv4/htVQ3NbLHy9s2nrab3BWSwIy209240cy7j77UbVBu9D6le4vHeZ+X83oe86bvjeluqLVL084oCW4DXgMhBeQA==;
	5:OPmxN/BaPMj2KTZM3BspJUiFW6DYkm1/LMZssA617hN9gs1bY09R/hh7kcrncI4JHWJkWa9ljB/EjYqv3SPrM7P/UrVjfu5+ccN3Rb6eGiNdvPDXbBC+9d7dhhEmUe7GkfsyeglcdJI5qRuHYh+nMQ==;
	24:MrWu6xh+atn5thKUplX4OHCfDC2nTFapQxC14TmhgK473KDHR05DZodHIl7f259h7knxaJvhLPaGAHkbcyWS3Vx/IYO33rMcP9r+91FKhcs=;
	7:8TokE+Q4ExKEd/WOhFwIfv4m5so9kyuF+U0fIsFrX4VddyRXhn9oY+96ungX6QN6VczH3rgMKEJjuFS0zY/DroqibfFH5xRiSvY/NbKDqqCqljxW8cZNPXXG2fuXnhek4+7Azw9yTWG82zq6bX9EdAsFIWpEJKcijJqspl6ergdN3cOzn3z/CFnUS7GWiagSTHN0SPmJNx/1x8XMii9iwtJXaeeLbG3PmG0sDPxgRZU=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0152;
	20:t7HpC3P0uuJlyA15tHqGp6bbPB7kRNTsasx/8mBQKk1WNWmG8TfSZUVvbW6sx6cZW6otK6nHRvNpPTCBiSH3r7yjAp45jLmoYJrHgMRkmElbuMTGTy8fc3n9AYCekr9ZjiN+QjWs6/sMg9g58I56/Dvkxt88/H9KPetdICW6Md7AnINY/eDFJEdB1SCkebVfPoJqrk7r7bP31gsKF7nQxCtHb5x7ykInr13GAgdKpPERAnhpsgJ180d+iMK4Kzsi
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Sep 2017 12:34:51.0370
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0152
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 16, 2017, 12:34 p.m.</div>
<pre class="content">
<span class="from">From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>

Early in the boot process, add checks to determine if the kernel is
running with Secure Encrypted Virtualization (SEV) active.

Checking for SEV requires checking that the kernel is running under a
hypervisor (CPUID 0x00000001, bit 31), that the SEV feature is available
(CPUID 0x8000001f, bit 1) and then checking a non-interceptable SEV MSR
(0xc0010131, bit 0).

This check is required so that during early compressed kernel booting the
pagetables (both the boot pagetables and KASLR pagetables (if enabled) are
updated to include the encryption mask so that when the kernel is
decompressed into encrypted memory, it can boot properly.

After the kernel is decompressed and continues booting the same logic is
used to check if SEV is active and set a flag indicating so.  This allows
us to distinguish between SME and SEV, each of which have unique
differences in how certain things are handled: e.g. DMA (always bounce
buffered with SEV) or EFI tables (always access decrypted with SME).

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Laura Abbott &lt;labbott@redhat.com&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Kees Cook &lt;keescook@chromium.org&gt;
Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;
Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;
Cc: x86@kernel.org
Cc: linux-kernel@vger.kernel.org
<span class="signed-off-by">Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/boot/compressed/Makefile      |   1 +
 arch/x86/boot/compressed/head_64.S     |  16 +++++
 arch/x86/boot/compressed/mem_encrypt.S | 115 +++++++++++++++++++++++++++++++++
 arch/x86/boot/compressed/misc.h        |   2 +
 arch/x86/boot/compressed/pagetable.c   |   8 ++-
 arch/x86/include/asm/msr-index.h       |   3 +
 arch/x86/include/uapi/asm/kvm_para.h   |   1 -
 arch/x86/mm/mem_encrypt.c              |  50 ++++++++++----
 8 files changed, 181 insertions(+), 15 deletions(-)
 create mode 100644 arch/x86/boot/compressed/mem_encrypt.S
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Sept. 17, 2017, 2:41 p.m.</div>
<pre class="content">
On Sat, Sep 16, 2017 at 07:34:13AM -0500, Brijesh Singh wrote:
<span class="quote">&gt; From: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Early in the boot process, add checks to determine if the kernel is</span>
<span class="quote">&gt; running with Secure Encrypted Virtualization (SEV) active.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Checking for SEV requires checking that the kernel is running under a</span>
<span class="quote">&gt; hypervisor (CPUID 0x00000001, bit 31), that the SEV feature is available</span>
<span class="quote">&gt; (CPUID 0x8000001f, bit 1) and then checking a non-interceptable SEV MSR</span>
<span class="quote">&gt; (0xc0010131, bit 0).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This check is required so that during early compressed kernel booting the</span>
<span class="quote">&gt; pagetables (both the boot pagetables and KASLR pagetables (if enabled) are</span>
<span class="quote">&gt; updated to include the encryption mask so that when the kernel is</span>
<span class="quote">&gt; decompressed into encrypted memory, it can boot properly.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; After the kernel is decompressed and continues booting the same logic is</span>
<span class="quote">&gt; used to check if SEV is active and set a flag indicating so.  This allows</span>
<span class="quote">&gt; us to distinguish between SME and SEV, each of which have unique</span>
<span class="quote">&gt; differences in how certain things are handled: e.g. DMA (always bounce</span>
<span class="quote">&gt; buffered with SEV) or EFI tables (always access decrypted with SME).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="quote">&gt; Cc: Laura Abbott &lt;labbott@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Cc: Kees Cook &lt;keescook@chromium.org&gt;</span>
<span class="quote">&gt; Cc: Paolo Bonzini &lt;pbonzini@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Radim Krčmář&quot; &lt;rkrcmar@redhat.com&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/boot/compressed/Makefile      |   1 +</span>
<span class="quote">&gt;  arch/x86/boot/compressed/head_64.S     |  16 +++++</span>
<span class="quote">&gt;  arch/x86/boot/compressed/mem_encrypt.S | 115 +++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  arch/x86/boot/compressed/misc.h        |   2 +</span>
<span class="quote">&gt;  arch/x86/boot/compressed/pagetable.c   |   8 ++-</span>
<span class="quote">&gt;  arch/x86/include/asm/msr-index.h       |   3 +</span>
<span class="quote">&gt;  arch/x86/include/uapi/asm/kvm_para.h   |   1 -</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c              |  50 ++++++++++----</span>
<span class="quote">&gt;  8 files changed, 181 insertions(+), 15 deletions(-)</span>
<span class="quote">&gt;  create mode 100644 arch/x86/boot/compressed/mem_encrypt.S</span>

...
<span class="quote">
&gt; diff --git a/arch/x86/boot/compressed/mem_encrypt.S b/arch/x86/boot/compressed/mem_encrypt.S</span>
<span class="quote">&gt; new file mode 100644</span>
<span class="quote">&gt; index 000000000000..03149c77c749</span>
<span class="quote">&gt; --- /dev/null</span>
<span class="quote">&gt; +++ b/arch/x86/boot/compressed/mem_encrypt.S</span>
<span class="quote">&gt; @@ -0,0 +1,115 @@</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * AMD Memory Encryption Support</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Copyright (C) 2017 Advanced Micro Devices, Inc.</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * Author: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; + *</span>
<span class="quote">&gt; + * This program is free software; you can redistribute it and/or modify</span>
<span class="quote">&gt; + * it under the terms of the GNU General Public License version 2 as</span>
<span class="quote">&gt; + * published by the Free Software Foundation.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#include &lt;linux/linkage.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#include &lt;asm/processor-flags.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/msr.h&gt;</span>
<span class="quote">&gt; +#include &lt;asm/asm-offsets.h&gt;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	.text</span>
<span class="quote">&gt; +	.code32</span>
<span class="quote">&gt; +ENTRY(get_sev_encryption_bit)</span>
<span class="quote">&gt; +	xor	%eax, %eax</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="quote">&gt; +	push	%ebx</span>
<span class="quote">&gt; +	push	%ecx</span>
<span class="quote">&gt; +	push	%edx</span>
<span class="quote">&gt; +	push	%edi</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	call	1f</span>
<span class="quote">&gt; +1:	popl	%edi</span>
<span class="quote">&gt; +	subl	$1b, %edi</span>

32-bit RIP-relative addressing huh? :)

It definitely deserves a comment.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Sept. 26, 2017, 7:10 p.m.</div>
<pre class="content">
On 09/17/2017 09:41 AM, Borislav Petkov wrote:
...
<span class="quote">
&gt;&gt; +#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="quote">&gt;&gt; +	push	%ebx</span>
<span class="quote">&gt;&gt; +	push	%ecx</span>
<span class="quote">&gt;&gt; +	push	%edx</span>
<span class="quote">&gt;&gt; +	push	%edi</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +	call	1f</span>
<span class="quote">&gt;&gt; +1:	popl	%edi</span>
<span class="quote">&gt;&gt; +	subl	$1b, %edi</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 32-bit RIP-relative addressing huh? :)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It definitely deserves a comment.</span>
<span class="quote">&gt; </span>

Will add comment in next rev. thanks

-Brijesh
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/boot/compressed/Makefile b/arch/x86/boot/compressed/Makefile</span>
<span class="p_header">index 8a958274b54c..7fc5b7168e4f 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/Makefile</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/Makefile</span>
<span class="p_chunk">@@ -77,6 +77,7 @@</span> <span class="p_context"> vmlinux-objs-$(CONFIG_EARLY_PRINTK) += $(obj)/early_serial_console.o</span>
 vmlinux-objs-$(CONFIG_RANDOMIZE_BASE) += $(obj)/kaslr.o
 ifdef CONFIG_X86_64
 	vmlinux-objs-$(CONFIG_RANDOMIZE_BASE) += $(obj)/pagetable.o
<span class="p_add">+	vmlinux-objs-y += $(obj)/mem_encrypt.o</span>
 endif
 
 $(obj)/eboot.o: KBUILD_CFLAGS += -fshort-wchar -mno-red-zone
<span class="p_header">diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S</span>
<span class="p_header">index b4a5d284391c..3dfad60720d0 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/head_64.S</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/head_64.S</span>
<span class="p_chunk">@@ -130,6 +130,19 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
  /*
   * Build early 4G boot pagetable
   */
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If SEV is active then set the encryption mask in the page tables.</span>
<span class="p_add">+	 * This will insure that when the kernel is copied and decompressed</span>
<span class="p_add">+	 * it will be done so encrypted.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	call	get_sev_encryption_bit</span>
<span class="p_add">+	xorl	%edx, %edx</span>
<span class="p_add">+	testl	%eax, %eax</span>
<span class="p_add">+	jz	1f</span>
<span class="p_add">+	subl	$32, %eax	/* Encryption bit is always above bit 31 */</span>
<span class="p_add">+	bts	%eax, %edx	/* Set encryption mask for page tables */</span>
<span class="p_add">+1:</span>
<span class="p_add">+</span>
 	/* Initialize Page tables to 0 */
 	leal	pgtable(%ebx), %edi
 	xorl	%eax, %eax
<span class="p_chunk">@@ -140,12 +153,14 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
 	leal	pgtable + 0(%ebx), %edi
 	leal	0x1007 (%edi), %eax
 	movl	%eax, 0(%edi)
<span class="p_add">+	addl	%edx, 4(%edi)</span>
 
 	/* Build Level 3 */
 	leal	pgtable + 0x1000(%ebx), %edi
 	leal	0x1007(%edi), %eax
 	movl	$4, %ecx
 1:	movl	%eax, 0x00(%edi)
<span class="p_add">+	addl	%edx, 0x04(%edi)</span>
 	addl	$0x00001000, %eax
 	addl	$8, %edi
 	decl	%ecx
<span class="p_chunk">@@ -156,6 +171,7 @@</span> <span class="p_context"> ENTRY(startup_32)</span>
 	movl	$0x00000183, %eax
 	movl	$2048, %ecx
 1:	movl	%eax, 0(%edi)
<span class="p_add">+	addl	%edx, 4(%edi)</span>
 	addl	$0x00200000, %eax
 	addl	$8, %edi
 	decl	%ecx
<span class="p_header">diff --git a/arch/x86/boot/compressed/mem_encrypt.S b/arch/x86/boot/compressed/mem_encrypt.S</span>
new file mode 100644
<span class="p_header">index 000000000000..03149c77c749</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/mem_encrypt.S</span>
<span class="p_chunk">@@ -0,0 +1,115 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * AMD Memory Encryption Support</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Copyright (C) 2017 Advanced Micro Devices, Inc.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Author: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License version 2 as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;linux/linkage.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/processor-flags.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/asm-offsets.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+	.text</span>
<span class="p_add">+	.code32</span>
<span class="p_add">+ENTRY(get_sev_encryption_bit)</span>
<span class="p_add">+	xor	%eax, %eax</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	push	%ebx</span>
<span class="p_add">+	push	%ecx</span>
<span class="p_add">+	push	%edx</span>
<span class="p_add">+	push	%edi</span>
<span class="p_add">+</span>
<span class="p_add">+	call	1f</span>
<span class="p_add">+1:	popl	%edi</span>
<span class="p_add">+	subl	$1b, %edi</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	enc_bit(%edi), %eax</span>
<span class="p_add">+	cmpl	$0, %eax</span>
<span class="p_add">+	jge	.Lsev_exit</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Check if running under a hypervisor */</span>
<span class="p_add">+	movl	$1, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	bt	$31, %ecx		/* Check the hypervisor bit */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	$0x80000000, %eax	/* CPUID to check the highest leaf */</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	cmpl	$0x8000001f, %eax	/* See if 0x8000001f is available */</span>
<span class="p_add">+	jb	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SEV feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX] - Bit 1</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_add">+	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	movl	$0x8000001f, %eax</span>
<span class="p_add">+	cpuid</span>
<span class="p_add">+	bt	$1, %eax		/* Check if SEV is available */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	$MSR_AMD64_SEV, %ecx	/* Read the SEV MSR */</span>
<span class="p_add">+	rdmsr</span>
<span class="p_add">+	bt	$MSR_AMD64_SEV_ENABLED_BIT, %eax	/* Check if SEV is active */</span>
<span class="p_add">+	jnc	.Lno_sev</span>
<span class="p_add">+</span>
<span class="p_add">+	movl	%ebx, %eax</span>
<span class="p_add">+	andl	$0x3f, %eax		/* Return the encryption bit location */</span>
<span class="p_add">+	movl	%eax, enc_bit(%edi)</span>
<span class="p_add">+	jmp	.Lsev_exit</span>
<span class="p_add">+</span>
<span class="p_add">+.Lno_sev:</span>
<span class="p_add">+	xor	%eax, %eax</span>
<span class="p_add">+	movl	%eax, enc_bit(%edi)</span>
<span class="p_add">+</span>
<span class="p_add">+.Lsev_exit:</span>
<span class="p_add">+	pop	%edi</span>
<span class="p_add">+	pop	%edx</span>
<span class="p_add">+	pop	%ecx</span>
<span class="p_add">+	pop	%ebx</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_AMD_MEM_ENCRYPT */</span>
<span class="p_add">+</span>
<span class="p_add">+	ret</span>
<span class="p_add">+ENDPROC(get_sev_encryption_bit)</span>
<span class="p_add">+</span>
<span class="p_add">+	.code64</span>
<span class="p_add">+ENTRY(get_sev_encryption_mask)</span>
<span class="p_add">+	xor	%rax, %rax</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_AMD_MEM_ENCRYPT</span>
<span class="p_add">+	push	%rbp</span>
<span class="p_add">+	push	%rdx</span>
<span class="p_add">+</span>
<span class="p_add">+	movq	%rsp, %rbp		/* Save current stack pointer */</span>
<span class="p_add">+</span>
<span class="p_add">+	call	get_sev_encryption_bit	/* Get the encryption bit position */</span>
<span class="p_add">+	testl	%eax, %eax</span>
<span class="p_add">+	jz	.Lno_sev_mask</span>
<span class="p_add">+</span>
<span class="p_add">+	xor	%rdx, %rdx</span>
<span class="p_add">+	bts	%rax, %rdx		/* Create the encryption mask */</span>
<span class="p_add">+	mov	%rdx, %rax		/* ... and return it */</span>
<span class="p_add">+</span>
<span class="p_add">+.Lno_sev_mask:</span>
<span class="p_add">+	movq	%rbp, %rsp		/* Restore original stack pointer */</span>
<span class="p_add">+</span>
<span class="p_add">+	pop	%rdx</span>
<span class="p_add">+	pop	%rbp</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	ret</span>
<span class="p_add">+ENDPROC(get_sev_encryption_mask)</span>
<span class="p_add">+</span>
<span class="p_add">+	.data</span>
<span class="p_add">+enc_bit:</span>
<span class="p_add">+	.int	0xffffffff</span>
<span class="p_header">diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h</span>
<span class="p_header">index 766a5211f827..38c5f0e13f7d 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/misc.h</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/misc.h</span>
<span class="p_chunk">@@ -108,4 +108,6 @@</span> <span class="p_context"> static inline void console_init(void)</span>
 { }
 #endif
 
<span class="p_add">+unsigned long get_sev_encryption_mask(void);</span>
<span class="p_add">+</span>
 #endif
<span class="p_header">diff --git a/arch/x86/boot/compressed/pagetable.c b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">index f1aa43854bed..a577329d84c5 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_chunk">@@ -76,16 +76,18 @@</span> <span class="p_context"> static unsigned long top_level_pgt;</span>
  * Mapping information structure passed to kernel_ident_mapping_init().
  * Due to relocation, pointers must be assigned at run time not build time.
  */
<span class="p_del">-static struct x86_mapping_info mapping_info = {</span>
<span class="p_del">-	.page_flag       = __PAGE_KERNEL_LARGE_EXEC,</span>
<span class="p_del">-};</span>
<span class="p_add">+static struct x86_mapping_info mapping_info;</span>
 
 /* Locates and clears a region for a new top level page table. */
 void initialize_identity_maps(void)
 {
<span class="p_add">+	unsigned long sev_me_mask = get_sev_encryption_mask();</span>
<span class="p_add">+</span>
 	/* Init mapping_info with run-time function/buffer pointers. */
 	mapping_info.alloc_pgt_page = alloc_pgt_page;
 	mapping_info.context = &amp;pgt_data;
<span class="p_add">+	mapping_info.page_flag = __PAGE_KERNEL_LARGE_EXEC | sev_me_mask;</span>
<span class="p_add">+	mapping_info.kernpg_flag = _KERNPG_TABLE | sev_me_mask;</span>
 
 	/*
 	 * It should be impossible for this not to already be true,
<span class="p_header">diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h</span>
<span class="p_header">index 17f5c12e1afd..4a4e7d72b565 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/msr-index.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/msr-index.h</span>
<span class="p_chunk">@@ -323,6 +323,9 @@</span> <span class="p_context"></span>
 #define MSR_AMD64_IBSBRTARGET		0xc001103b
 #define MSR_AMD64_IBSOPDATA4		0xc001103d
 #define MSR_AMD64_IBS_REG_COUNT_MAX	8 /* includes MSR_AMD64_IBSBRTARGET */
<span class="p_add">+#define MSR_AMD64_SEV			0xc0010131</span>
<span class="p_add">+#define MSR_AMD64_SEV_ENABLED_BIT	0</span>
<span class="p_add">+#define MSR_AMD64_SEV_ENABLED		BIT_ULL(MSR_AMD64_SEV_ENABLED_BIT)</span>
 
 /* Fam 17h MSRs */
 #define MSR_F17H_IRPERF			0xc00000e9
<span class="p_header">diff --git a/arch/x86/include/uapi/asm/kvm_para.h b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">index a965e5b0d328..c202ba3fba0f 100644</span>
<span class="p_header">--- a/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_header">+++ b/arch/x86/include/uapi/asm/kvm_para.h</span>
<span class="p_chunk">@@ -109,5 +109,4 @@</span> <span class="p_context"> struct kvm_vcpu_pv_apf_data {</span>
 #define KVM_PV_EOI_ENABLED KVM_PV_EOI_MASK
 #define KVM_PV_EOI_DISABLED 0x0
 
<span class="p_del">-</span>
 #endif /* _UAPI_ASM_X86_KVM_PARA_H */
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 967f116ec65e..9b0c921c0597 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -311,7 +311,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void)</span>
 	if (sev_active())
 		dma_ops = &amp;sev_dma_ops;
 
<span class="p_del">-	pr_info(&quot;AMD Secure Memory Encryption (SME) active\n&quot;);</span>
<span class="p_add">+	pr_info(&quot;AMD %s active\n&quot;,</span>
<span class="p_add">+		sev_active() ? &quot;Secure Encrypted Virtualization (SEV)&quot;</span>
<span class="p_add">+			     : &quot;Secure Memory Encryption (SME)&quot;);</span>
 }
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
<span class="p_chunk">@@ -639,37 +641,63 @@</span> <span class="p_context"> void __init __nostackprotector sme_enable(struct boot_params *bp)</span>
 {
 	const char *cmdline_ptr, *cmdline_arg, *cmdline_on, *cmdline_off;
 	unsigned int eax, ebx, ecx, edx;
<span class="p_add">+	unsigned long feature_mask;</span>
 	bool active_by_default;
 	unsigned long me_mask;
 	char buffer[16];
 	u64 msr;
 
<span class="p_del">-	/* Check for the SME support leaf */</span>
<span class="p_add">+	/* Check for the SME/SEV support leaf */</span>
 	eax = 0x80000000;
 	ecx = 0;
 	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);
 	if (eax &lt; 0x8000001f)
 		return;
 
<span class="p_add">+#define AMD_SME_BIT	BIT(0)</span>
<span class="p_add">+#define AMD_SEV_BIT	BIT(1)</span>
 	/*
<span class="p_del">-	 * Check for the SME feature:</span>
<span class="p_del">-	 *   CPUID Fn8000_001F[EAX] - Bit 0</span>
<span class="p_del">-	 *     Secure Memory Encryption support</span>
<span class="p_del">-	 *   CPUID Fn8000_001F[EBX] - Bits 5:0</span>
<span class="p_del">-	 *     Pagetable bit position used to indicate encryption</span>
<span class="p_add">+	 * Set the feature mask (SME or SEV) based on whether we are</span>
<span class="p_add">+	 * running under a hypervisor.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	eax = 1;</span>
<span class="p_add">+	ecx = 0;</span>
<span class="p_add">+	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);</span>
<span class="p_add">+	feature_mask = (ecx &amp; BIT(31)) ? AMD_SEV_BIT : AMD_SME_BIT;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check for the SME/SEV feature:</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EAX]</span>
<span class="p_add">+	 *   - Bit 0 - Secure Memory Encryption support</span>
<span class="p_add">+	 *   - Bit 1 - Secure Encrypted Virtualization support</span>
<span class="p_add">+	 *   CPUID Fn8000_001F[EBX]</span>
<span class="p_add">+	 *   - Bits 5:0 - Pagetable bit position used to indicate encryption</span>
 	 */
 	eax = 0x8000001f;
 	ecx = 0;
 	native_cpuid(&amp;eax, &amp;ebx, &amp;ecx, &amp;edx);
<span class="p_del">-	if (!(eax &amp; 1))</span>
<span class="p_add">+	if (!(eax &amp; feature_mask))</span>
 		return;
 
 	me_mask = 1UL &lt;&lt; (ebx &amp; 0x3f);
 
<span class="p_del">-	/* Check if SME is enabled */</span>
<span class="p_del">-	msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_del">-	if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+	/* Check if memory encryption is enabled */</span>
<span class="p_add">+	if (feature_mask == AMD_SME_BIT) {</span>
<span class="p_add">+		/* For SME, check the SYSCFG MSR */</span>
<span class="p_add">+		msr = __rdmsr(MSR_K8_SYSCFG);</span>
<span class="p_add">+		if (!(msr &amp; MSR_K8_SYSCFG_MEM_ENCRYPT))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		/* For SEV, check the SEV MSR */</span>
<span class="p_add">+		msr = __rdmsr(MSR_AMD64_SEV);</span>
<span class="p_add">+		if (!(msr &amp; MSR_AMD64_SEV_ENABLED))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* SEV state cannot be controlled by a command line option */</span>
<span class="p_add">+		sme_me_mask = me_mask;</span>
<span class="p_add">+		sev_enabled = 1;</span>
 		return;
<span class="p_add">+	}</span>
 
 	/*
 	 * Fixups have not been applied to phys_base yet and we&#39;re running

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



