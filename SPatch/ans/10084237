
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,06/12] perf util: Update and print per-thread shadow stats - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,06/12] perf util: Update and print per-thread shadow stats</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=94151">Jin, Yao</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2017, 11:56 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1512043002-26099-7-git-send-email-yao.jin@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10084237/mbox/"
   >mbox</a>
|
   <a href="/patch/10084237/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10084237/">/patch/10084237/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9D7CE6035E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 04:01:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8EE2B29D1B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 04:01:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8392529D34; Thu, 30 Nov 2017 04:01:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.0 required=2.0 tests=BAYES_00,
	DATE_IN_FUTURE_06_12, 
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A494729D2F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 04:01:49 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753535AbdK3EBq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 29 Nov 2017 23:01:46 -0500
Received: from mga04.intel.com ([192.55.52.120]:33282 &quot;EHLO mga04.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751366AbdK3EBk (ORCPT &lt;rfc822;Linux-kernel@vger.kernel.org&gt;);
	Wed, 29 Nov 2017 23:01:40 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	29 Nov 2017 20:01:39 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.45,339,1508828400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;7475696&quot;
Received: from skl.sh.intel.com ([10.239.161.21])
	by FMSMGA003.fm.intel.com with ESMTP; 29 Nov 2017 20:01:37 -0800
From: Jin Yao &lt;yao.jin@linux.intel.com&gt;
To: acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
	mingo@redhat.com, alexander.shishkin@linux.intel.com
Cc: Linux-kernel@vger.kernel.org, ak@linux.intel.com,
	kan.liang@intel.com, yao.jin@intel.com, Jin Yao &lt;yao.jin@linux.intel.com&gt;
Subject: [PATCH v4 06/12] perf util: Update and print per-thread shadow stats
Date: Thu, 30 Nov 2017 19:56:36 +0800
Message-Id: &lt;1512043002-26099-7-git-send-email-yao.jin@linux.intel.com&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1512043002-26099-1-git-send-email-yao.jin@linux.intel.com&gt;
References: &lt;1512043002-26099-1-git-send-email-yao.jin@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=94151">Jin, Yao</a> - Nov. 30, 2017, 11:56 a.m.</div>
<pre class="content">
The functions perf_stat__update_shadow_stats() and
perf_stat__print_shadow_statss() are called to update
and print the shadow stats on a set of static variables.

But the static variables are the limitations to support
per-thread shadow stats.

This patch lets the perf_stat__update_shadow_stats() support
to update the shadow stats on a input parameter &#39;stat&#39; and
uses update_runtime_stat() to update the stats. It will not
directly update the static variables as before.

And this patch also lets the perf_stat__print_shadow_stats()
support to print the shadow stats from a input parameter &#39;stat&#39;.

It will not directly get value from static variable. Instead, it now
uses runtime_stat_avg() and runtime_stat_n() to get and compute the
values.
<span class="signed-off-by">
Signed-off-by: Jin Yao &lt;yao.jin@linux.intel.com&gt;</span>
---
 tools/perf/builtin-script.c   |   6 +-
 tools/perf/builtin-stat.c     |  27 ++--
 tools/perf/util/stat-shadow.c | 293 +++++++++++++++++++++++++++---------------
 tools/perf/util/stat.c        |   8 +-
 tools/perf/util/stat.h        |   5 +-
 5 files changed, 219 insertions(+), 120 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c</span>
<span class="p_header">index 39d8b55..fac6f05 100644</span>
<span class="p_header">--- a/tools/perf/builtin-script.c</span>
<span class="p_header">+++ b/tools/perf/builtin-script.c</span>
<span class="p_chunk">@@ -1548,7 +1548,8 @@</span> <span class="p_context"> static void perf_sample__fprint_metric(struct perf_script *script,</span>
 	val = sample-&gt;period * evsel-&gt;scale;
 	perf_stat__update_shadow_stats(evsel,
 				       val,
<span class="p_del">-				       sample-&gt;cpu);</span>
<span class="p_add">+				       sample-&gt;cpu,</span>
<span class="p_add">+				       &amp;rt_stat);</span>
 	evsel_script(evsel)-&gt;val = val;
 	if (evsel_script(evsel-&gt;leader)-&gt;gnum == evsel-&gt;leader-&gt;nr_members) {
 		for_each_group_member (ev2, evsel-&gt;leader) {
<span class="p_chunk">@@ -1556,7 +1557,8 @@</span> <span class="p_context"> static void perf_sample__fprint_metric(struct perf_script *script,</span>
 						      evsel_script(ev2)-&gt;val,
 						      sample-&gt;cpu,
 						      &amp;ctx,
<span class="p_del">-						      NULL);</span>
<span class="p_add">+						      NULL,</span>
<span class="p_add">+						      &amp;rt_stat);</span>
 		}
 		evsel_script(evsel-&gt;leader)-&gt;gnum = 0;
 	}
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index a027b47..1edc082 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -1097,7 +1097,8 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 }
 
 static void printout(int id, int nr, struct perf_evsel *counter, double uval,
<span class="p_del">-		     char *prefix, u64 run, u64 ena, double noise)</span>
<span class="p_add">+		     char *prefix, u64 run, u64 ena, double noise,</span>
<span class="p_add">+		     struct runtime_stat *stat)</span>
 {
 	struct perf_stat_output_ctx out;
 	struct outstate os = {
<span class="p_chunk">@@ -1190,7 +1191,8 @@</span> <span class="p_context"> static void printout(int id, int nr, struct perf_evsel *counter, double uval,</span>
 
 	perf_stat__print_shadow_stats(counter, uval,
 				first_shadow_cpu(counter, id),
<span class="p_del">-				&amp;out, &amp;metric_events);</span>
<span class="p_add">+				&amp;out, &amp;metric_events,</span>
<span class="p_add">+				stat);</span>
 	if (!csv_output &amp;&amp; !metric_only) {
 		print_noise(counter, noise);
 		print_running(run, ena);
<span class="p_chunk">@@ -1214,7 +1216,8 @@</span> <span class="p_context"> static void aggr_update_shadow(void)</span>
 				val += perf_counts(counter-&gt;counts, cpu, 0)-&gt;val;
 			}
 			perf_stat__update_shadow_stats(counter, val,
<span class="p_del">-						       first_shadow_cpu(counter, id));</span>
<span class="p_add">+					first_shadow_cpu(counter, id),</span>
<span class="p_add">+					&amp;rt_stat);</span>
 		}
 	}
 }
<span class="p_chunk">@@ -1334,7 +1337,8 @@</span> <span class="p_context"> static void print_aggr(char *prefix)</span>
 				fprintf(output, &quot;%s&quot;, prefix);
 
 			uval = val * counter-&gt;scale;
<span class="p_del">-			printout(id, nr, counter, uval, prefix, run, ena, 1.0);</span>
<span class="p_add">+			printout(id, nr, counter, uval, prefix, run, ena, 1.0,</span>
<span class="p_add">+				 &amp;rt_stat);</span>
 			if (!metric_only)
 				fputc(&#39;\n&#39;, output);
 		}
<span class="p_chunk">@@ -1364,7 +1368,8 @@</span> <span class="p_context"> static void print_aggr_thread(struct perf_evsel *counter, char *prefix)</span>
 			fprintf(output, &quot;%s&quot;, prefix);
 
 		uval = val * counter-&gt;scale;
<span class="p_del">-		printout(thread, 0, counter, uval, prefix, run, ena, 1.0);</span>
<span class="p_add">+		printout(thread, 0, counter, uval, prefix, run, ena, 1.0,</span>
<span class="p_add">+			 &amp;rt_stat);</span>
 		fputc(&#39;\n&#39;, output);
 	}
 }
<span class="p_chunk">@@ -1401,7 +1406,8 @@</span> <span class="p_context"> static void print_counter_aggr(struct perf_evsel *counter, char *prefix)</span>
 		fprintf(output, &quot;%s&quot;, prefix);
 
 	uval = cd.avg * counter-&gt;scale;
<span class="p_del">-	printout(-1, 0, counter, uval, prefix, cd.avg_running, cd.avg_enabled, cd.avg);</span>
<span class="p_add">+	printout(-1, 0, counter, uval, prefix, cd.avg_running, cd.avg_enabled,</span>
<span class="p_add">+		 cd.avg, &amp;rt_stat);</span>
 	if (!metric_only)
 		fprintf(output, &quot;\n&quot;);
 }
<span class="p_chunk">@@ -1440,7 +1446,8 @@</span> <span class="p_context"> static void print_counter(struct perf_evsel *counter, char *prefix)</span>
 			fprintf(output, &quot;%s&quot;, prefix);
 
 		uval = val * counter-&gt;scale;
<span class="p_del">-		printout(cpu, 0, counter, uval, prefix, run, ena, 1.0);</span>
<span class="p_add">+		printout(cpu, 0, counter, uval, prefix, run, ena, 1.0,</span>
<span class="p_add">+			 &amp;rt_stat);</span>
 
 		fputc(&#39;\n&#39;, output);
 	}
<span class="p_chunk">@@ -1472,7 +1479,8 @@</span> <span class="p_context"> static void print_no_aggr_metric(char *prefix)</span>
 			run = perf_counts(counter-&gt;counts, cpu, 0)-&gt;run;
 
 			uval = val * counter-&gt;scale;
<span class="p_del">-			printout(cpu, 0, counter, uval, prefix, run, ena, 1.0);</span>
<span class="p_add">+			printout(cpu, 0, counter, uval, prefix, run, ena, 1.0,</span>
<span class="p_add">+				 &amp;rt_stat);</span>
 		}
 		fputc(&#39;\n&#39;, stat_config.output);
 	}
<span class="p_chunk">@@ -1528,7 +1536,8 @@</span> <span class="p_context"> static void print_metric_headers(const char *prefix, bool no_indent)</span>
 		perf_stat__print_shadow_stats(counter, 0,
 					      0,
 					      &amp;out,
<span class="p_del">-					      &amp;metric_events);</span>
<span class="p_add">+					      &amp;metric_events,</span>
<span class="p_add">+					      &amp;rt_stat);</span>
 	}
 	fputc(&#39;\n&#39;, stat_config.output);
 }
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 7098275..b1c9f37 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -116,19 +116,29 @@</span> <span class="p_context"> static void saved_value_delete(struct rblist *rblist __maybe_unused,</span>
 
 static struct saved_value *saved_value_lookup(struct perf_evsel *evsel,
 					      int cpu,
<span class="p_del">-					      bool create)</span>
<span class="p_add">+					      bool create,</span>
<span class="p_add">+					      enum stat_type type,</span>
<span class="p_add">+					      int ctx,</span>
<span class="p_add">+					      struct runtime_stat *stat)</span>
 {
<span class="p_add">+	struct rblist *rblist;</span>
 	struct rb_node *nd;
 	struct saved_value dm = {
 		.cpu = cpu,
 		.evsel = evsel,
<span class="p_add">+		.type = type,</span>
<span class="p_add">+		.ctx = ctx,</span>
<span class="p_add">+		.stat = stat,</span>
 	};
<span class="p_del">-	nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+</span>
<span class="p_add">+	rblist = &amp;stat-&gt;value_list;</span>
<span class="p_add">+</span>
<span class="p_add">+	nd = rblist__find(rblist, &amp;dm);</span>
 	if (nd)
 		return container_of(nd, struct saved_value, rb_node);
 	if (create) {
<span class="p_del">-		rblist__add_node(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_del">-		nd = rblist__find(&amp;runtime_saved_values, &amp;dm);</span>
<span class="p_add">+		rblist__add_node(rblist, &amp;dm);</span>
<span class="p_add">+		nd = rblist__find(rblist, &amp;dm);</span>
 		if (nd)
 			return container_of(nd, struct saved_value, rb_node);
 	}
<span class="p_chunk">@@ -217,13 +227,24 @@</span> <span class="p_context"> void perf_stat__reset_shadow_stats(void)</span>
 	}
 }
 
<span class="p_add">+static void update_runtime_stat(struct runtime_stat *stat,</span>
<span class="p_add">+				enum stat_type type,</span>
<span class="p_add">+				int ctx, int cpu, u64 count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *v = saved_value_lookup(NULL, cpu, true,</span>
<span class="p_add">+						   type, ctx, stat);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (v)</span>
<span class="p_add">+		update_stats(&amp;v-&gt;stats, count);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Update various tracking values we maintain to print
  * more semantic information such as miss/hit ratios,
  * instruction rates, etc:
  */
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,
<span class="p_del">-				    int cpu)</span>
<span class="p_add">+				    int cpu, struct runtime_stat *stat)</span>
 {
 	int ctx = evsel_context(counter);
 
<span class="p_chunk">@@ -231,50 +252,58 @@</span> <span class="p_context"> void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,</span>
 
 	if (perf_evsel__match(counter, SOFTWARE, SW_TASK_CLOCK) ||
 	    perf_evsel__match(counter, SOFTWARE, SW_CPU_CLOCK))
<span class="p_del">-		update_stats(&amp;runtime_nsecs_stats[cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_NSECS, 0, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CPU_CYCLES))
<span class="p_del">-		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_CYCLES, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, CYCLES_IN_TX))
<span class="p_del">-		update_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_CYCLES_IN_TX, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TRANSACTION_START))
<span class="p_del">-		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TRANSACTION, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, ELISION_START))
<span class="p_del">-		update_stats(&amp;runtime_elision_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_ELISION, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_TOTAL_SLOTS))
<span class="p_del">-		update_stats(&amp;runtime_topdown_total_slots[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TOPDOWN_TOTAL_SLOTS,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_ISSUED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_issued[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TOPDOWN_SLOTS_ISSUED,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_SLOTS_RETIRED))
<span class="p_del">-		update_stats(&amp;runtime_topdown_slots_retired[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TOPDOWN_SLOTS_RETIRED,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_FETCH_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TOPDOWN_FETCH_BUBBLES,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, TOPDOWN_RECOVERY_BUBBLES))
<span class="p_del">-		update_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_TOPDOWN_RECOVERY_BUBBLES,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_STALLED_CYCLES_FRONT,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_STALLED_CYCLES_BACK,</span>
<span class="p_add">+				    ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_BRANCH_INSTRUCTIONS))
<span class="p_del">-		update_stats(&amp;runtime_branches_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_BRANCHES, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HARDWARE, HW_CACHE_REFERENCES))
<span class="p_del">-		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_CACHEREFS, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1D))
<span class="p_del">-		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_L1_DCACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1I))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_L1_ICACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_LL))
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_LL_CACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_DTLB))
<span class="p_del">-		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_DTLB_CACHE, ctx, cpu, count);</span>
 	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))
<span class="p_del">-		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_ITLB_CACHE, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, SMI_NUM))
<span class="p_del">-		update_stats(&amp;runtime_smi_num_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_SMI_NUM, ctx, cpu, count);</span>
 	else if (perf_stat_evsel__is(counter, APERF))
<span class="p_del">-		update_stats(&amp;runtime_aperf_stats[ctx][cpu], count);</span>
<span class="p_add">+		update_runtime_stat(stat, STAT_APERF, ctx, cpu, count);</span>
 
 	if (counter-&gt;collect_stat) {
<span class="p_del">-		struct saved_value *v = saved_value_lookup(counter, cpu, true);</span>
<span class="p_add">+		struct saved_value *v = saved_value_lookup(counter, cpu, true,</span>
<span class="p_add">+							   STAT_NONE, 0, stat);</span>
 		update_stats(&amp;v-&gt;stats, count);
 	}
 }
<span class="p_chunk">@@ -395,15 +424,40 @@</span> <span class="p_context"> void perf_stat__collect_metric_expr(struct perf_evlist *evsel_list)</span>
 	}
 }
 
<span class="p_add">+static double runtime_stat_avg(struct runtime_stat *stat,</span>
<span class="p_add">+			       enum stat_type type, int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *v;</span>
<span class="p_add">+</span>
<span class="p_add">+	v = saved_value_lookup(NULL, cpu, false, type, ctx, stat);</span>
<span class="p_add">+	if (!v)</span>
<span class="p_add">+		return 0.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	return avg_stats(&amp;v-&gt;stats);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static double runtime_stat_n(struct runtime_stat *stat,</span>
<span class="p_add">+			     enum stat_type type, int ctx, int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct saved_value *v;</span>
<span class="p_add">+</span>
<span class="p_add">+	v = saved_value_lookup(NULL, cpu, false, type, ctx, stat);</span>
<span class="p_add">+	if (!v)</span>
<span class="p_add">+		return 0.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	return v-&gt;stats.n;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void print_stalled_cycles_frontend(int cpu,
 					  struct perf_evsel *evsel, double avg,
<span class="p_del">-					  struct perf_stat_output_ctx *out)</span>
<span class="p_add">+					  struct perf_stat_output_ctx *out,</span>
<span class="p_add">+					  struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -419,13 +473,14 @@</span> <span class="p_context"> static void print_stalled_cycles_frontend(int cpu,</span>
 
 static void print_stalled_cycles_backend(int cpu,
 					 struct perf_evsel *evsel, double avg,
<span class="p_del">-					 struct perf_stat_output_ctx *out)</span>
<span class="p_add">+					 struct perf_stat_output_ctx *out,</span>
<span class="p_add">+					 struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -438,13 +493,14 @@</span> <span class="p_context"> static void print_stalled_cycles_backend(int cpu,</span>
 static void print_branch_misses(int cpu,
 				struct perf_evsel *evsel,
 				double avg,
<span class="p_del">-				struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_branches_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_BRANCHES, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -457,13 +513,15 @@</span> <span class="p_context"> static void print_branch_misses(int cpu,</span>
 static void print_l1_dcache_misses(int cpu,
 				   struct perf_evsel *evsel,
 				   double avg,
<span class="p_del">-				   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				   struct runtime_stat *stat)</span>
<span class="p_add">+</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_l1_dcache_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_L1_DCACHE, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -476,13 +534,15 @@</span> <span class="p_context"> static void print_l1_dcache_misses(int cpu,</span>
 static void print_l1_icache_misses(int cpu,
 				   struct perf_evsel *evsel,
 				   double avg,
<span class="p_del">-				   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				   struct runtime_stat *stat)</span>
<span class="p_add">+</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_l1_icache_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_L1_ICACHE, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -494,13 +554,14 @@</span> <span class="p_context"> static void print_l1_icache_misses(int cpu,</span>
 static void print_dtlb_cache_misses(int cpu,
 				    struct perf_evsel *evsel,
 				    double avg,
<span class="p_del">-				    struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				    struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_DTLB_CACHE, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -512,13 +573,14 @@</span> <span class="p_context"> static void print_dtlb_cache_misses(int cpu,</span>
 static void print_itlb_cache_misses(int cpu,
 				    struct perf_evsel *evsel,
 				    double avg,
<span class="p_del">-				    struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				    struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_itlb_cache_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_ITLB_CACHE, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -530,13 +592,14 @@</span> <span class="p_context"> static void print_itlb_cache_misses(int cpu,</span>
 static void print_ll_cache_misses(int cpu,
 				  struct perf_evsel *evsel,
 				  double avg,
<span class="p_del">-				  struct perf_stat_output_ctx *out)</span>
<span class="p_add">+				  struct perf_stat_output_ctx *out,</span>
<span class="p_add">+				  struct runtime_stat *stat)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
 	int ctx = evsel_context(evsel);
 
<span class="p_del">-	total = avg_stats(&amp;runtime_ll_cache_stats[ctx][cpu]);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_LL_CACHE, ctx, cpu);</span>
 
 	if (total)
 		ratio = avg / total * 100.0;
<span class="p_chunk">@@ -594,68 +657,72 @@</span> <span class="p_context"> static double sanitize_val(double x)</span>
 	return x;
 }
 
<span class="p_del">-static double td_total_slots(int ctx, int cpu)</span>
<span class="p_add">+static double td_total_slots(int ctx, int cpu, struct runtime_stat *stat)</span>
 {
<span class="p_del">-	return avg_stats(&amp;runtime_topdown_total_slots[ctx][cpu]);</span>
<span class="p_add">+	return runtime_stat_avg(stat, STAT_TOPDOWN_TOTAL_SLOTS, ctx, cpu);</span>
 }
 
<span class="p_del">-static double td_bad_spec(int ctx, int cpu)</span>
<span class="p_add">+static double td_bad_spec(int ctx, int cpu, struct runtime_stat *stat)</span>
 {
 	double bad_spec = 0;
 	double total_slots;
 	double total;
 
<span class="p_del">-	total = avg_stats(&amp;runtime_topdown_slots_issued[ctx][cpu]) -</span>
<span class="p_del">-		avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]) +</span>
<span class="p_del">-		avg_stats(&amp;runtime_topdown_recovery_bubbles[ctx][cpu]);</span>
<span class="p_del">-	total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_add">+	total = runtime_stat_avg(stat, STAT_TOPDOWN_SLOTS_ISSUED, ctx, cpu) -</span>
<span class="p_add">+		runtime_stat_avg(stat, STAT_TOPDOWN_SLOTS_RETIRED, ctx, cpu) +</span>
<span class="p_add">+		runtime_stat_avg(stat, STAT_TOPDOWN_RECOVERY_BUBBLES, ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	total_slots = td_total_slots(ctx, cpu, stat);</span>
 	if (total_slots)
 		bad_spec = total / total_slots;
 	return sanitize_val(bad_spec);
 }
 
<span class="p_del">-static double td_retiring(int ctx, int cpu)</span>
<span class="p_add">+static double td_retiring(int ctx, int cpu, struct runtime_stat *stat)</span>
 {
 	double retiring = 0;
<span class="p_del">-	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_del">-	double ret_slots = avg_stats(&amp;runtime_topdown_slots_retired[ctx][cpu]);</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu, stat);</span>
<span class="p_add">+	double ret_slots = runtime_stat_avg(stat, STAT_TOPDOWN_SLOTS_RETIRED,</span>
<span class="p_add">+					    ctx, cpu);</span>
 
 	if (total_slots)
 		retiring = ret_slots / total_slots;
 	return retiring;
 }
 
<span class="p_del">-static double td_fe_bound(int ctx, int cpu)</span>
<span class="p_add">+static double td_fe_bound(int ctx, int cpu, struct runtime_stat *stat)</span>
 {
 	double fe_bound = 0;
<span class="p_del">-	double total_slots = td_total_slots(ctx, cpu);</span>
<span class="p_del">-	double fetch_bub = avg_stats(&amp;runtime_topdown_fetch_bubbles[ctx][cpu]);</span>
<span class="p_add">+	double total_slots = td_total_slots(ctx, cpu, stat);</span>
<span class="p_add">+	double fetch_bub = runtime_stat_avg(stat, STAT_TOPDOWN_FETCH_BUBBLES,</span>
<span class="p_add">+					    ctx, cpu);</span>
 
 	if (total_slots)
 		fe_bound = fetch_bub / total_slots;
 	return fe_bound;
 }
 
<span class="p_del">-static double td_be_bound(int ctx, int cpu)</span>
<span class="p_add">+static double td_be_bound(int ctx, int cpu, struct runtime_stat *stat)</span>
 {
<span class="p_del">-	double sum = (td_fe_bound(ctx, cpu) +</span>
<span class="p_del">-		      td_bad_spec(ctx, cpu) +</span>
<span class="p_del">-		      td_retiring(ctx, cpu));</span>
<span class="p_add">+	double sum = (td_fe_bound(ctx, cpu, stat) +</span>
<span class="p_add">+		      td_bad_spec(ctx, cpu, stat) +</span>
<span class="p_add">+		      td_retiring(ctx, cpu, stat));</span>
 	if (sum == 0)
 		return 0;
 	return sanitize_val(1.0 - sum);
 }
 
 static void print_smi_cost(int cpu, struct perf_evsel *evsel,
<span class="p_del">-			   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+			   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+			   struct runtime_stat *stat)</span>
 {
 	double smi_num, aperf, cycles, cost = 0.0;
 	int ctx = evsel_context(evsel);
 	const char *color = NULL;
 
<span class="p_del">-	smi_num = avg_stats(&amp;runtime_smi_num_stats[ctx][cpu]);</span>
<span class="p_del">-	aperf = avg_stats(&amp;runtime_aperf_stats[ctx][cpu]);</span>
<span class="p_del">-	cycles = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+	smi_num = runtime_stat_avg(stat, STAT_SMI_NUM, ctx, cpu);</span>
<span class="p_add">+	aperf = runtime_stat_avg(stat, STAT_APERF, ctx, cpu);</span>
<span class="p_add">+	cycles = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
 
 	if ((cycles == 0) || (aperf == 0))
 		return;
<span class="p_chunk">@@ -675,7 +742,8 @@</span> <span class="p_context"> static void generic_metric(const char *metric_expr,</span>
 			   const char *metric_name,
 			   double avg,
 			   int cpu,
<span class="p_del">-			   struct perf_stat_output_ctx *out)</span>
<span class="p_add">+			   struct perf_stat_output_ctx *out,</span>
<span class="p_add">+			   struct runtime_stat *stat)</span>
 {
 	print_metric_t print_metric = out-&gt;print_metric;
 	struct parse_ctx pctx;
<span class="p_chunk">@@ -694,7 +762,8 @@</span> <span class="p_context"> static void generic_metric(const char *metric_expr,</span>
 			stats = &amp;walltime_nsecs_stats;
 			scale = 1e-9;
 		} else {
<span class="p_del">-			v = saved_value_lookup(metric_events[i], cpu, false);</span>
<span class="p_add">+			v = saved_value_lookup(metric_events[i], cpu, false,</span>
<span class="p_add">+					       STAT_NONE, 0, stat);</span>
 			if (!v)
 				break;
 			stats = &amp;v-&gt;stats;
<span class="p_chunk">@@ -722,7 +791,8 @@</span> <span class="p_context"> static void generic_metric(const char *metric_expr,</span>
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
 				   struct perf_stat_output_ctx *out,
<span class="p_del">-				   struct rblist *metric_events)</span>
<span class="p_add">+				   struct rblist *metric_events,</span>
<span class="p_add">+				   struct runtime_stat *stat)</span>
 {
 	void *ctxp = out-&gt;ctx;
 	print_metric_t print_metric = out-&gt;print_metric;
<span class="p_chunk">@@ -733,7 +803,8 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 	int num = 1;
 
 	if (perf_evsel__match(evsel, HARDWARE, HW_INSTRUCTIONS)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
<span class="p_add">+</span>
 		if (total) {
 			ratio = avg / total;
 			print_metric(ctxp, NULL, &quot;%7.2f &quot;,
<span class="p_chunk">@@ -741,8 +812,13 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		} else {
 			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);
 		}
<span class="p_del">-		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="p_del">-		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="p_add">+</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_STALLED_CYCLES_FRONT,</span>
<span class="p_add">+					 ctx, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+		total = max(total, runtime_stat_avg(stat,</span>
<span class="p_add">+						    STAT_STALLED_CYCLES_BACK,</span>
<span class="p_add">+						    ctx, cpu));</span>
 
 		if (total &amp;&amp; avg) {
 			out-&gt;new_line(ctxp);
<span class="p_chunk">@@ -755,8 +831,8 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 				     &quot;stalled cycles per insn&quot;, 0);
 		}
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES)) {
<span class="p_del">-		if (runtime_branches_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_branch_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_BRANCHES, ctx, cpu) != 0)</span>
<span class="p_add">+			print_branch_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all branches&quot;, 0);
 	} else if (
<span class="p_chunk">@@ -764,8 +840,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {
<span class="p_del">-		if (runtime_l1_dcache_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_l1_dcache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_L1_DCACHE, ctx, cpu) != 0)</span>
<span class="p_add">+			print_l1_dcache_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all L1-dcache hits&quot;, 0);
 	} else if (
<span class="p_chunk">@@ -773,8 +850,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {
<span class="p_del">-		if (runtime_l1_icache_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_l1_icache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_L1_ICACHE, ctx, cpu) != 0)</span>
<span class="p_add">+			print_l1_icache_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all L1-icache hits&quot;, 0);
 	} else if (
<span class="p_chunk">@@ -782,8 +860,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {
<span class="p_del">-		if (runtime_dtlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_dtlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_DTLB_CACHE, ctx, cpu) != 0)</span>
<span class="p_add">+			print_dtlb_cache_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all dTLB cache hits&quot;, 0);
 	} else if (
<span class="p_chunk">@@ -791,8 +870,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {
<span class="p_del">-		if (runtime_itlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_itlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_ITLB_CACHE, ctx, cpu) != 0)</span>
<span class="p_add">+			print_itlb_cache_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all iTLB cache hits&quot;, 0);
 	} else if (
<span class="p_chunk">@@ -800,27 +880,28 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {
<span class="p_del">-		if (runtime_ll_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_del">-			print_ll_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_LL_CACHE, ctx, cpu) != 0)</span>
<span class="p_add">+			print_ll_cache_misses(cpu, evsel, avg, out, stat);</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all LL-cache hits&quot;, 0);
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CACHEREFS, ctx, cpu);</span>
 
 		if (total)
 			ratio = avg * 100 / total;
 
<span class="p_del">-		if (runtime_cacherefs_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_CACHEREFS, ctx, cpu) != 0)</span>
 			print_metric(ctxp, NULL, &quot;%8.3f %%&quot;,
 				     &quot;of all cache refs&quot;, ratio);
 		else
 			print_metric(ctxp, NULL, NULL, &quot;of all cache refs&quot;, 0);
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {
<span class="p_del">-		print_stalled_cycles_frontend(cpu, evsel, avg, out);</span>
<span class="p_add">+		print_stalled_cycles_frontend(cpu, evsel, avg, out, stat);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {
<span class="p_del">-		print_stalled_cycles_backend(cpu, evsel, avg, out);</span>
<span class="p_add">+		print_stalled_cycles_backend(cpu, evsel, avg, out, stat);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_NSECS, 0, cpu);</span>
 
 		if (total) {
 			ratio = avg / total;
<span class="p_chunk">@@ -829,7 +910,8 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 			print_metric(ctxp, NULL, NULL, &quot;Ghz&quot;, 0);
 		}
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
<span class="p_add">+</span>
 		if (total)
 			print_metric(ctxp, NULL,
 					&quot;%7.2f%%&quot;, &quot;transactional cycles&quot;,
<span class="p_chunk">@@ -838,8 +920,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 			print_metric(ctxp, NULL, NULL, &quot;transactional cycles&quot;,
 				     0);
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CYCLES, ctx, cpu);</span>
<span class="p_add">+		total2 = runtime_stat_avg(stat, STAT_CYCLES_IN_TX, ctx, cpu);</span>
<span class="p_add">+</span>
 		if (total2 &lt; avg)
 			total2 = avg;
 		if (total)
<span class="p_chunk">@@ -848,19 +931,21 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;aborted cycles&quot;, 0);
 	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CYCLES_IN_TX,</span>
<span class="p_add">+					 ctx, cpu);</span>
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		if (runtime_cycles_in_tx_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+		if (runtime_stat_n(stat, STAT_CYCLES_IN_TX, ctx, cpu) != 0)</span>
 			print_metric(ctxp, NULL, &quot;%8.0f&quot;,
 				     &quot;cycles / transaction&quot;, ratio);
 		else
 			print_metric(ctxp, NULL, NULL, &quot;cycles / transaction&quot;,
<span class="p_del">-				     0);</span>
<span class="p_add">+				      0);</span>
 	} else if (perf_stat_evsel__is(evsel, ELISION_START)) {
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_CYCLES_IN_TX,</span>
<span class="p_add">+					 ctx, cpu);</span>
 
 		if (avg)
 			ratio = total / avg;
<span class="p_chunk">@@ -874,28 +959,28 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		else
 			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);
 	} else if (perf_stat_evsel__is(evsel, TOPDOWN_FETCH_BUBBLES)) {
<span class="p_del">-		double fe_bound = td_fe_bound(ctx, cpu);</span>
<span class="p_add">+		double fe_bound = td_fe_bound(ctx, cpu, stat);</span>
 
 		if (fe_bound &gt; 0.2)
 			color = PERF_COLOR_RED;
 		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;frontend bound&quot;,
 				fe_bound * 100.);
 	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_RETIRED)) {
<span class="p_del">-		double retiring = td_retiring(ctx, cpu);</span>
<span class="p_add">+		double retiring = td_retiring(ctx, cpu, stat);</span>
 
 		if (retiring &gt; 0.7)
 			color = PERF_COLOR_GREEN;
 		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;retiring&quot;,
 				retiring * 100.);
 	} else if (perf_stat_evsel__is(evsel, TOPDOWN_RECOVERY_BUBBLES)) {
<span class="p_del">-		double bad_spec = td_bad_spec(ctx, cpu);</span>
<span class="p_add">+		double bad_spec = td_bad_spec(ctx, cpu, stat);</span>
 
 		if (bad_spec &gt; 0.1)
 			color = PERF_COLOR_RED;
 		print_metric(ctxp, color, &quot;%8.1f%%&quot;, &quot;bad speculation&quot;,
 				bad_spec * 100.);
 	} else if (perf_stat_evsel__is(evsel, TOPDOWN_SLOTS_ISSUED)) {
<span class="p_del">-		double be_bound = td_be_bound(ctx, cpu);</span>
<span class="p_add">+		double be_bound = td_be_bound(ctx, cpu, stat);</span>
 		const char *name = &quot;backend bound&quot;;
 		static int have_recovery_bubbles = -1;
 
<span class="p_chunk">@@ -908,19 +993,19 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 
 		if (be_bound &gt; 0.2)
 			color = PERF_COLOR_RED;
<span class="p_del">-		if (td_total_slots(ctx, cpu) &gt; 0)</span>
<span class="p_add">+		if (td_total_slots(ctx, cpu, stat) &gt; 0)</span>
 			print_metric(ctxp, color, &quot;%8.1f%%&quot;, name,
 					be_bound * 100.);
 		else
 			print_metric(ctxp, NULL, NULL, name, 0);
 	} else if (evsel-&gt;metric_expr) {
 		generic_metric(evsel-&gt;metric_expr, evsel-&gt;metric_events, evsel-&gt;name,
<span class="p_del">-				evsel-&gt;metric_name, avg, cpu, out);</span>
<span class="p_del">-	} else if (runtime_nsecs_stats[cpu].n != 0) {</span>
<span class="p_add">+				evsel-&gt;metric_name, avg, cpu, out, stat);</span>
<span class="p_add">+	} else if (runtime_stat_n(stat, STAT_NSECS, 0, cpu) != 0) {</span>
 		char unit = &#39;M&#39;;
 		char unit_buf[10];
 
<span class="p_del">-		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_add">+		total = runtime_stat_avg(stat, STAT_NSECS, 0, cpu);</span>
 
 		if (total)
 			ratio = 1000.0 * avg / total;
<span class="p_chunk">@@ -931,7 +1016,7 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);
 		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);
 	} else if (perf_stat_evsel__is(evsel, SMI_NUM)) {
<span class="p_del">-		print_smi_cost(cpu, evsel, out);</span>
<span class="p_add">+		print_smi_cost(cpu, evsel, out, stat);</span>
 	} else {
 		num = 0;
 	}
<span class="p_chunk">@@ -944,7 +1029,7 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
 				out-&gt;new_line(ctxp);
 			generic_metric(mexp-&gt;metric_expr, mexp-&gt;metric_events,
 					evsel-&gt;name, mexp-&gt;metric_name,
<span class="p_del">-					avg, cpu, out);</span>
<span class="p_add">+					avg, cpu, out, stat);</span>
 		}
 	}
 	if (num == 0)
<span class="p_header">diff --git a/tools/perf/util/stat.c b/tools/perf/util/stat.c</span>
<span class="p_header">index 151e9ef..78abfd4 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.c</span>
<span class="p_header">+++ b/tools/perf/util/stat.c</span>
<span class="p_chunk">@@ -278,9 +278,11 @@</span> <span class="p_context"> process_counter_values(struct perf_stat_config *config, struct perf_evsel *evsel</span>
 			perf_evsel__compute_deltas(evsel, cpu, thread, count);
 		perf_counts_values__scale(count, config-&gt;scale, NULL);
 		if (config-&gt;aggr_mode == AGGR_NONE)
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, count-&gt;val, cpu);</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, cpu,</span>
<span class="p_add">+						       &amp;rt_stat);</span>
 		if (config-&gt;aggr_mode == AGGR_THREAD)
<span class="p_del">-			perf_stat__update_shadow_stats(evsel, count-&gt;val, 0);</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;val, 0,</span>
<span class="p_add">+						       &amp;rt_stat);</span>
 		break;
 	case AGGR_GLOBAL:
 		aggr-&gt;val += count-&gt;val;
<span class="p_chunk">@@ -362,7 +364,7 @@</span> <span class="p_context"> int perf_stat_process_counter(struct perf_stat_config *config,</span>
 	/*
 	 * Save the full runtime - to allow normalization during printout:
 	 */
<span class="p_del">-	perf_stat__update_shadow_stats(counter, *count, 0);</span>
<span class="p_add">+	perf_stat__update_shadow_stats(counter, *count, 0, &amp;rt_stat);</span>
 
 	return 0;
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 2d61e37..b25b8f4 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -130,7 +130,7 @@</span> <span class="p_context"> void runtime_stat__free(struct runtime_stat *stat);</span>
 void perf_stat__init_shadow_stats(void);
 void perf_stat__reset_shadow_stats(void);
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 count,
<span class="p_del">-				    int cpu);</span>
<span class="p_add">+				    int cpu, struct runtime_stat *stat);</span>
 struct perf_stat_output_ctx {
 	void *ctx;
 	print_metric_t print_metric;
<span class="p_chunk">@@ -141,7 +141,8 @@</span> <span class="p_context"> struct perf_stat_output_ctx {</span>
 void perf_stat__print_shadow_stats(struct perf_evsel *evsel,
 				   double avg, int cpu,
 				   struct perf_stat_output_ctx *out,
<span class="p_del">-				   struct rblist *metric_events);</span>
<span class="p_add">+				   struct rblist *metric_events,</span>
<span class="p_add">+				   struct runtime_stat *stat);</span>
 void perf_stat__collect_metric_expr(struct perf_evlist *);
 
 int perf_evlist__alloc_stats(struct perf_evlist *evlist, bool alloc_raw);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



