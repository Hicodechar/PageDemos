
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] high preempt off latency in vfree path - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] high preempt off latency in vfree path</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=159251">Joel Fernandes</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 23, 2016, 1:43 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;56F1F4A6.2060400@lab126.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8646741/mbox/"
   >mbox</a>
|
   <a href="/patch/8646741/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8646741/">/patch/8646741/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 69F0B9F3D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 23 Mar 2016 01:44:08 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 85AEF20398
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 23 Mar 2016 01:44:07 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 9C54B2039E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 23 Mar 2016 01:44:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753658AbcCWBoD (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 22 Mar 2016 21:44:03 -0400
Received: from smtp-fw-33001.amazon.com ([207.171.189.228]:55831 &quot;EHLO
	smtp-fw-33001.amazon.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752657AbcCWBoA (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 22 Mar 2016 21:44:00 -0400
X-IronPort-AV: E=Sophos;i=&quot;5.24,380,1454976000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;464476126&quot;
Received: from sea19-co-svc-lb5-vlan3.sea.amazon.com (HELO
	email-inbound-relay-64015.pdx4.amazon.com) ([10.47.22.166])
	by smtp-border-fw-out-33001.sea14.amazon.com with
	ESMTP/TLS/DHE-RSA-AES256-SHA; 23 Mar 2016 01:43:58 +0000
Received: from ex10-hub-7002.ant.amazon.com
	(pdx1-ws-svc-lb16-vlan3.amazon.com [10.239.138.214])
	by email-inbound-relay-64015.pdx4.amazon.com (8.14.7/8.14.7) with
	ESMTP id u2N1hpbh020878
	(version=TLSv1/SSLv3 cipher=AES256-SHA bits=256 verify=FAIL);
	Wed, 23 Mar 2016 01:43:57 GMT
Received: from EX13D03UWC001.ant.amazon.com (10.43.162.136) by
	ex10-hub-7002.ant.amazon.com (10.43.110.153) with Microsoft SMTP
	Server (TLS) id 14.3.181.6; Tue, 22 Mar 2016 18:43:29 -0700
Received: from [10.68.101.68] (10.43.162.39) by EX13D03UWC001.ant.amazon.com
	(10.43.162.136) with Microsoft SMTP Server (TLS) id 15.0.1104.5;
	Wed, 23 Mar 2016 01:43:28 +0000
From: Joel Fernandes &lt;joelaf@lab126.com&gt;
To: &lt;linux-mm@kvack.org&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;tj@kernel.org&gt;, &lt;linux-rt-users@vger.kernel.org&gt;,
	Nick Piggin &lt;npiggin@suse.de&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [RFC] high preempt off latency in vfree path
Message-ID: &lt;56F1F4A6.2060400@lab126.com&gt;
Date: Tue, 22 Mar 2016 18:43:02 -0700
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101
	Thunderbird/38.5.1
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;; format=flowed
Content-Transfer-Encoding: 7bit
X-Originating-IP: [10.43.162.39]
X-ClientProxiedBy: EX13D04UWB004.ant.amazon.com (10.43.161.103) To
	EX13D03UWC001.ant.amazon.com (10.43.162.136)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=159251">Joel Fernandes</a> - March 23, 2016, 1:43 a.m.</div>
<pre class="content">
Hi,

I&#39;m seeing on my system with some real time audio requirements, I&#39;m seeing the preemptirqsoff 
tracer complaining that preempt was off for 17ms in the vfree path. Since we have requirements 
of 8ms scheduling this seems awfully bad.

The tracer output showed __free_vmap_area was about 7300 times. Can we do better here? I have 
proposed 2 potential fixes here, any thoughts on which one&#39;s better?

Here&#39;s the path that blocks preempt (full latency ftrace output uploaded to 
http://raw.codepile.net/pile/OWNpvKkB.js)

  =&gt; preempt_count_sub
  =&gt; _raw_spin_unlock
  =&gt; __purge_vmap_area_lazy
  =&gt; free_vmap_area_noflush
  =&gt; remove_vm_area
  =&gt; __vunmap
  =&gt; vfree
  =&gt; n_tty_close
  =&gt; tty_ldisc_close.isra.1
  =&gt; tty_ldisc_kill
  =&gt; tty_ldisc_release
  =&gt; tty_release

Here are the approaches:
(1)
One is we reduce the number of lazy_max_pages (right now its around 32MB per core worth of pages).

  /*

Thanks!
Joel
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123">Andi Kleen</a> - March 23, 2016, 2:44 a.m.</div>
<pre class="content">
<span class="quote">&gt; (1)</span>
<span class="quote">&gt; One is we reduce the number of lazy_max_pages (right now its around 32MB per core worth of pages).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="quote">&gt; index aa3891e..2720f4f 100644</span>
<span class="quote">&gt; --- a/mm/vmalloc.c</span>
<span class="quote">&gt; +++ b/mm/vmalloc.c</span>
<span class="quote">&gt; @@ -564,7 +564,7 @@ static unsigned long lazy_max_pages(void)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;         log = fls(num_online_cpus());</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -       return log * (32UL * 1024 * 1024 / PAGE_SIZE);</span>
<span class="quote">&gt; +       return log * (8UL * 1024 * 1024 / PAGE_SIZE);</span>
<span class="quote">&gt;  }</span>

This seems like the right fix to me.  Perhaps even make it somewhat smaller.

Even on larger systems it&#39;s probably fine because they have a lot more
cores/threads these days, so it will be still sufficiently large.

-Andi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=159251">Joel Fernandes</a> - March 23, 2016, 7:03 p.m.</div>
<pre class="content">
On 03/22/16 19:44, Andi Kleen wrote:
<span class="quote">&gt;&gt; (1)</span>
<span class="quote">&gt;&gt; One is we reduce the number of lazy_max_pages (right now its around 32MB per core worth of pages).</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="quote">&gt;&gt; index aa3891e..2720f4f 100644</span>
<span class="quote">&gt;&gt; --- a/mm/vmalloc.c</span>
<span class="quote">&gt;&gt; +++ b/mm/vmalloc.c</span>
<span class="quote">&gt;&gt; @@ -564,7 +564,7 @@ static unsigned long lazy_max_pages(void)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;          log = fls(num_online_cpus());</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; -       return log * (32UL * 1024 * 1024 / PAGE_SIZE);</span>
<span class="quote">&gt;&gt; +       return log * (8UL * 1024 * 1024 / PAGE_SIZE);</span>
<span class="quote">&gt;&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This seems like the right fix to me.  Perhaps even make it somewhat smaller.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Even on larger systems it&#39;s probably fine because they have a lot more</span>
<span class="quote">&gt; cores/threads these days, so it will be still sufficiently large.</span>
<span class="quote">&gt;</span>

Thanks Andi. I&#39;ll post a patch then.

Regards,
Joel
<span class="quote">
&gt; -Andi</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index aa3891e..2720f4f 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -564,7 +564,7 @@</span> <span class="p_context"> static unsigned long lazy_max_pages(void)</span>

         log = fls(num_online_cpus());

<span class="p_del">-       return log * (32UL * 1024 * 1024 / PAGE_SIZE);</span>
<span class="p_add">+       return log * (8UL * 1024 * 1024 / PAGE_SIZE);</span>
  }


(2) Second alternative approach I am thinking is to change purge_lock into a mutex and then 
move the vmap_area spinlock around the free_vmap_area call. Thus giving the scheduler a chance 
to put something else on the CPU in between free_vmap_area calls. That would look like:

<span class="p_header">diff --git a/mm/vmalloc.c b/mm/vmalloc.c</span>
<span class="p_header">index aa3891e..9565d72 100644</span>
<span class="p_header">--- a/mm/vmalloc.c</span>
<span class="p_header">+++ b/mm/vmalloc.c</span>
<span class="p_chunk">@@ -594,7 +594,7 @@</span> <span class="p_context"> void set_iounmap_nonlazy(void)</span>
  static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,
                                         int sync, int force_flush)
  {
<span class="p_del">-       static DEFINE_SPINLOCK(purge_lock);</span>
<span class="p_add">+       static DEFINE_MUTEX(purge_lock);</span>
         LIST_HEAD(valist);
         struct vmap_area *va;
         struct vmap_area *n_va;
<span class="p_chunk">@@ -606,10 +606,10 @@</span> <span class="p_context"> static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,</span>
          * the case that isn&#39;t actually used at the moment anyway.
          */
         if (!sync &amp;&amp; !force_flush) {
<span class="p_del">-               if (!spin_trylock(&amp;purge_lock))</span>
<span class="p_add">+               if (!mutex_trylock(&amp;purge_lock))</span>
                         return;
         } else
<span class="p_del">-               spin_lock(&amp;purge_lock);</span>
<span class="p_add">+               mutex_lock(&amp;purge_lock);</span>

         if (sync)
                 purge_fragmented_blocks_allcpus();
<span class="p_chunk">@@ -636,12 +636,13 @@</span> <span class="p_context"> static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,</span>
                 flush_tlb_kernel_range(*start, *end);

         if (nr) {
<span class="p_del">-               spin_lock(&amp;vmap_area_lock);</span>
<span class="p_del">-               list_for_each_entry_safe(va, n_va, &amp;valist, purge_list)</span>
<span class="p_add">+               list_for_each_entry_safe(va, n_va, &amp;valist, purge_list) {</span>
<span class="p_add">+                       spin_lock(&amp;vmap_area_lock);</span>
                         __free_vmap_area(va);
<span class="p_add">+                       spin_unlock(&amp;vmap_area_lock);</span>
<span class="p_add">+               }</span>
<span class="p_del">-               spin_unlock(&amp;vmap_area_lock);</span>

         }
<span class="p_del">-       spin_unlock(&amp;purge_lock);</span>
<span class="p_add">+       mutex_unlock(&amp;purge_lock);</span>
  }


</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



