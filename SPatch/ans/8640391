
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/9] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/9] oom: clear TIF_MEMDIE after oom_reaper managed to unmap the address space</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 22, 2016, 11 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1458644426-22973-4-git-send-email-mhocko@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8640391/mbox/"
   >mbox</a>
|
   <a href="/patch/8640391/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8640391/">/patch/8640391/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 255BEC0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Mar 2016 11:03:36 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 47BB920398
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Mar 2016 11:03:34 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 82F6320397
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Mar 2016 11:03:30 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759321AbcCVLDY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 22 Mar 2016 07:03:24 -0400
Received: from mail-wm0-f68.google.com ([74.125.82.68]:33366 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932727AbcCVLBF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 22 Mar 2016 07:01:05 -0400
Received: by mail-wm0-f68.google.com with SMTP id u125so2596623wmg.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 22 Mar 2016 04:01:04 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=lWhgIbCXniQssrubguoQ0HClXKOIw9nV/vNdViP8Qgs=;
	b=di0exu0oL3i2g7rA/qH04N+UC3iaL2xHq7fiNXW4ELUPQ51B4/WjiBmIH2YNYIKzBX
	nEzhSbNnuQgPLhcVNBfRxuS+4PVkCc60go9JDgf7u4Yjq7tAtEp3sgAB239HHmBq02XG
	OCUdpCIOb1AqVZ7VmUMcj882f/TIR7jy8NKFtvRzs06sHiyS+HdK2hm87zyxD4ll9GjI
	yC0MNx9t6WrWMc5Xa4NoACH5AaAuLPWeHwMgbfy+M1hnvpPwXSYgHqKvmRag4YF5yu4P
	NRemI2v4er3XbkaT58vtMHzZGGFiiLCmJHYpE/Lwr/KexXFUwqf0vzx9tNuc7PWOSatI
	Qg2A==
X-Gm-Message-State: AD7BkJKn7JNhuT+2g86WwdH4RF0JG2zXQw22O8Z9PaK71vwE7h1XgZ8vtnsRMX69n0Af2A==
X-Received: by 10.28.113.155 with SMTP id d27mr20356159wmi.67.1458644463394; 
	Tue, 22 Mar 2016 04:01:03 -0700 (PDT)
Received: from tiehlicka.suse.cz (nat1.scz.suse.com. [213.151.88.250])
	by smtp.gmail.com with ESMTPSA id
	a16sm16764049wmi.0.2016.03.22.04.01.02
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 22 Mar 2016 04:01:02 -0700 (PDT)
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: &lt;linux-mm@kvack.org&gt;, LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Michal Hocko &lt;mhocko@suse.com&gt;
Subject: [PATCH 3/9] oom: clear TIF_MEMDIE after oom_reaper managed to unmap
	the address space
Date: Tue, 22 Mar 2016 12:00:20 +0100
Message-Id: &lt;1458644426-22973-4-git-send-email-mhocko@kernel.org&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1458644426-22973-1-git-send-email-mhocko@kernel.org&gt;
References: &lt;1458644426-22973-1-git-send-email-mhocko@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - March 22, 2016, 11 a.m.</div>
<pre class="content">
<span class="from">From: Michal Hocko &lt;mhocko@suse.com&gt;</span>

When oom_reaper manages to unmap all the eligible vmas there shouldn&#39;t
be much of the freable memory held by the oom victim left anymore so it
makes sense to clear the TIF_MEMDIE flag for the victim and allow the
OOM killer to select another task.

The lack of TIF_MEMDIE also means that the victim cannot access memory
reserves anymore but that shouldn&#39;t be a problem because it would get
the access again if it needs to allocate and hits the OOM killer again
due to the fatal_signal_pending resp. PF_EXITING check. We can safely
hide the task from the OOM killer because it is clearly not a good
candidate anymore as everyhing reclaimable has been torn down already.

This patch will allow to cap the time an OOM victim can keep TIF_MEMDIE
and thus hold off further global OOM killer actions granted the oom
reaper is able to take mmap_sem for the associated mm struct. This is
not guaranteed now but further steps should make sure that mmap_sem
for write should be blocked killable which will help to reduce such a
lock contention. This is not done by this patch.

Note that exit_oom_victim might be called on a remote task from
__oom_reap_task now so we have to check and clear the flag atomically
otherwise we might race and underflow oom_victims or wake up
waiters too early.

Suggested-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Suggested-by: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
<span class="signed-off-by">Signed-off-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
---
 include/linux/oom.h |  2 +-
 kernel/exit.c       |  2 +-
 mm/oom_kill.c       | 73 +++++++++++++++++++++++++++++++++++------------------
 3 files changed, 50 insertions(+), 27 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/oom.h b/include/linux/oom.h</span>
<span class="p_header">index 03e6257321f0..45993b840ed6 100644</span>
<span class="p_header">--- a/include/linux/oom.h</span>
<span class="p_header">+++ b/include/linux/oom.h</span>
<span class="p_chunk">@@ -91,7 +91,7 @@</span> <span class="p_context"> extern enum oom_scan_t oom_scan_process_thread(struct oom_control *oc,</span>
 
 extern bool out_of_memory(struct oom_control *oc);
 
<span class="p_del">-extern void exit_oom_victim(void);</span>
<span class="p_add">+extern void exit_oom_victim(struct task_struct *tsk);</span>
 
 extern int register_oom_notifier(struct notifier_block *nb);
 extern int unregister_oom_notifier(struct notifier_block *nb);
<span class="p_header">diff --git a/kernel/exit.c b/kernel/exit.c</span>
<span class="p_header">index 10e088237fed..ba3bd29d7e1d 100644</span>
<span class="p_header">--- a/kernel/exit.c</span>
<span class="p_header">+++ b/kernel/exit.c</span>
<span class="p_chunk">@@ -434,7 +434,7 @@</span> <span class="p_context"> static void exit_mm(struct task_struct *tsk)</span>
 	mm_update_next_owner(mm);
 	mmput(mm);
 	if (test_thread_flag(TIF_MEMDIE))
<span class="p_del">-		exit_oom_victim();</span>
<span class="p_add">+		exit_oom_victim(tsk);</span>
 }
 
 static struct task_struct *find_alive_thread(struct task_struct *p)
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index f7ed6ece0719..2830b1c6483e 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -416,20 +416,36 @@</span> <span class="p_context"> bool oom_killer_disabled __read_mostly;</span>
  * victim (if that is possible) to help the OOM killer to move on.
  */
 static struct task_struct *oom_reaper_th;
<span class="p_del">-static struct mm_struct *mm_to_reap;</span>
<span class="p_add">+static struct task_struct *task_to_reap;</span>
 static DECLARE_WAIT_QUEUE_HEAD(oom_reaper_wait);
 
<span class="p_del">-static bool __oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static bool __oom_reap_task(struct task_struct *tsk)</span>
 {
 	struct mmu_gather tlb;
 	struct vm_area_struct *vma;
<span class="p_add">+	struct mm_struct *mm;</span>
<span class="p_add">+	struct task_struct *p;</span>
 	struct zap_details details = {.check_swap_entries = true,
 				      .ignore_dirty = true};
 	bool ret = true;
 
<span class="p_del">-	/* We might have raced with exit path */</span>
<span class="p_del">-	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users))</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure we find the associated mm_struct even when the particular</span>
<span class="p_add">+	 * thread has already terminated and cleared its mm.</span>
<span class="p_add">+	 * We might have race with exit path so consider our work done if there</span>
<span class="p_add">+	 * is no mm.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	p = find_lock_task_mm(tsk);</span>
<span class="p_add">+	if (!p)</span>
<span class="p_add">+		return true;</span>
<span class="p_add">+</span>
<span class="p_add">+	mm = p-&gt;mm;</span>
<span class="p_add">+	if (!atomic_inc_not_zero(&amp;mm-&gt;mm_users)) {</span>
<span class="p_add">+		task_unlock(p);</span>
 		return true;
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	task_unlock(p);</span>
 
 	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {
 		ret = false;
<span class="p_chunk">@@ -464,60 +480,66 @@</span> <span class="p_context"> static bool __oom_reap_vmas(struct mm_struct *mm)</span>
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 	up_read(&amp;mm-&gt;mmap_sem);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Clear TIF_MEMDIE because the task shouldn&#39;t be sitting on a</span>
<span class="p_add">+	 * reasonably reclaimable memory anymore. OOM killer can continue</span>
<span class="p_add">+	 * by selecting other victim if unmapping hasn&#39;t led to any</span>
<span class="p_add">+	 * improvements. This also means that selecting this task doesn&#39;t</span>
<span class="p_add">+	 * make any sense.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	tsk-&gt;signal-&gt;oom_score_adj = OOM_SCORE_ADJ_MIN;</span>
<span class="p_add">+	exit_oom_victim(tsk);</span>
 out:
 	mmput(mm);
 	return ret;
 }
 
<span class="p_del">-static void oom_reap_vmas(struct mm_struct *mm)</span>
<span class="p_add">+static void oom_reap_task(struct task_struct *tsk)</span>
 {
 	int attempts = 0;
 
 	/* Retry the down_read_trylock(mmap_sem) a few times */
<span class="p_del">-	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_vmas(mm))</span>
<span class="p_add">+	while (attempts++ &lt; 10 &amp;&amp; !__oom_reap_task(tsk))</span>
 		schedule_timeout_idle(HZ/10);
 
 	/* Drop a reference taken by wake_oom_reaper */
<span class="p_del">-	mmdrop(mm);</span>
<span class="p_add">+	put_task_struct(tsk);</span>
 }
 
 static int oom_reaper(void *unused)
 {
 	while (true) {
<span class="p_del">-		struct mm_struct *mm;</span>
<span class="p_add">+		struct task_struct *tsk;</span>
 
 		wait_event_freezable(oom_reaper_wait,
<span class="p_del">-				     (mm = READ_ONCE(mm_to_reap)));</span>
<span class="p_del">-		oom_reap_vmas(mm);</span>
<span class="p_del">-		WRITE_ONCE(mm_to_reap, NULL);</span>
<span class="p_add">+				     (tsk = READ_ONCE(task_to_reap)));</span>
<span class="p_add">+		oom_reap_task(tsk);</span>
<span class="p_add">+		WRITE_ONCE(task_to_reap, NULL);</span>
 	}
 
 	return 0;
 }
 
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *tsk)</span>
 {
<span class="p_del">-	struct mm_struct *old_mm;</span>
<span class="p_add">+	struct task_struct *old_tsk;</span>
 
 	if (!oom_reaper_th)
 		return;
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Pin the given mm. Use mm_count instead of mm_users because</span>
<span class="p_del">-	 * we do not want to delay the address space tear down.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	atomic_inc(&amp;mm-&gt;mm_count);</span>
<span class="p_add">+	get_task_struct(tsk);</span>
 
 	/*
 	 * Make sure that only a single mm is ever queued for the reaper
 	 * because multiple are not necessary and the operation might be
 	 * disruptive so better reduce it to the bare minimum.
 	 */
<span class="p_del">-	old_mm = cmpxchg(&amp;mm_to_reap, NULL, mm);</span>
<span class="p_del">-	if (!old_mm)</span>
<span class="p_add">+	old_tsk = cmpxchg(&amp;task_to_reap, NULL, tsk);</span>
<span class="p_add">+	if (!old_tsk)</span>
 		wake_up(&amp;oom_reaper_wait);
 	else
<span class="p_del">-		mmdrop(mm);</span>
<span class="p_add">+		put_task_struct(tsk);</span>
 }
 
 static int __init oom_init(void)
<span class="p_chunk">@@ -532,7 +554,7 @@</span> <span class="p_context"> static int __init oom_init(void)</span>
 }
 subsys_initcall(oom_init)
 #else
<span class="p_del">-static void wake_oom_reaper(struct mm_struct *mm)</span>
<span class="p_add">+static void wake_oom_reaper(struct task_struct *tsk)</span>
 {
 }
 #endif
<span class="p_chunk">@@ -563,9 +585,10 @@</span> <span class="p_context"> void mark_oom_victim(struct task_struct *tsk)</span>
 /**
  * exit_oom_victim - note the exit of an OOM victim
  */
<span class="p_del">-void exit_oom_victim(void)</span>
<span class="p_add">+void exit_oom_victim(struct task_struct *tsk)</span>
 {
<span class="p_del">-	clear_thread_flag(TIF_MEMDIE);</span>
<span class="p_add">+	if (!test_and_clear_tsk_thread_flag(tsk, TIF_MEMDIE))</span>
<span class="p_add">+		return;</span>
 
 	if (!atomic_dec_return(&amp;oom_victims))
 		wake_up_all(&amp;oom_victims_wait);
<span class="p_chunk">@@ -748,7 +771,7 @@</span> <span class="p_context"> void oom_kill_process(struct oom_control *oc, struct task_struct *p,</span>
 	rcu_read_unlock();
 
 	if (can_oom_reap)
<span class="p_del">-		wake_oom_reaper(mm);</span>
<span class="p_add">+		wake_oom_reaper(victim);</span>
 
 	mmdrop(mm);
 	put_task_struct(victim);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



