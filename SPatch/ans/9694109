
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM,09/15] mm/hmm/mirror: helper to snapshot CPU page table v2 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM,09/15] mm/hmm/mirror: helper to snapshot CPU page table v2</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 22, 2017, 3:30 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170422033037.3028-10-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9694109/mbox/"
   >mbox</a>
|
   <a href="/patch/9694109/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9694109/">/patch/9694109/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D45AE6037F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 22 Apr 2017 03:31:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C919C28304
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 22 Apr 2017 03:31:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BBAA42868A; Sat, 22 Apr 2017 03:31:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D28F528304
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 22 Apr 2017 03:31:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1946097AbdDVDbL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 21 Apr 2017 23:31:11 -0400
Received: from mx1.redhat.com ([209.132.183.28]:56668 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1426495AbdDVDbA (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 21 Apr 2017 23:31:00 -0400
Received: from smtp.corp.redhat.com
	(int-mx05.intmail.prod.int.phx2.redhat.com [10.5.11.15])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 1D344341591;
	Sat, 22 Apr 2017 03:30:55 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 1D344341591
Authentication-Results: ext-mx05.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx05.extmail.prod.ext.phx2.redhat.com;
	spf=pass smtp.mailfrom=jglisse@redhat.com
DKIM-Filter: OpenDKIM Filter v2.11.0 mx1.redhat.com 1D344341591
Received: from localhost.localdomain.com (ovpn-120-168.rdu2.redhat.com
	[10.10.120.168])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 79471A49BA;
	Sat, 22 Apr 2017 03:30:53 +0000 (UTC)
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Nellans &lt;dnellans@nvidia.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;,
	Evgeny Baskakov &lt;ebaskakov@nvidia.com&gt;,
	Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;,
	Sherry Cheung &lt;SCheung@nvidia.com&gt;, Subhash Gutti &lt;sgutti@nvidia.com&gt;
Subject: [HMM 09/15] mm/hmm/mirror: helper to snapshot CPU page table v2
Date: Fri, 21 Apr 2017 23:30:31 -0400
Message-Id: &lt;20170422033037.3028-10-jglisse@redhat.com&gt;
In-Reply-To: &lt;20170422033037.3028-1-jglisse@redhat.com&gt;
References: &lt;20170422033037.3028-1-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.15
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.29]);
	Sat, 22 Apr 2017 03:30:55 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - April 22, 2017, 3:30 a.m.</div>
<pre class="content">
This does not use existing page table walker because we want to share
same code for our page fault handler.

Changes since v1:
  - Use spinlock instead of rcu synchronized list traversal
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Evgeny Baskakov &lt;ebaskakov@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: John Hubbard &lt;jhubbard@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Mark Hairgrove &lt;mhairgrove@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Sherry Cheung &lt;SCheung@nvidia.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Subhash Gutti &lt;sgutti@nvidia.com&gt;</span>
---
 include/linux/hmm.h |  55 +++++++++-
 mm/hmm.c            | 285 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 338 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/hmm.h b/include/linux/hmm.h</span>
<span class="p_header">index 6668a1b..defa7cd 100644</span>
<span class="p_header">--- a/include/linux/hmm.h</span>
<span class="p_header">+++ b/include/linux/hmm.h</span>
<span class="p_chunk">@@ -79,13 +79,26 @@</span> <span class="p_context"> struct hmm;</span>
  *
  * Flags:
  * HMM_PFN_VALID: pfn is valid
<span class="p_add">+ * HMM_PFN_READ:  CPU page table has read permission set</span>
  * HMM_PFN_WRITE: CPU page table has write permission set
<span class="p_add">+ * HMM_PFN_ERROR: corresponding CPU page table entry points to poisoned memory</span>
<span class="p_add">+ * HMM_PFN_EMPTY: corresponding CPU page table entry is pte_none()</span>
<span class="p_add">+ * HMM_PFN_SPECIAL: corresponding CPU page table entry is special; i.e., the</span>
<span class="p_add">+ *      result of vm_insert_pfn() or vm_insert_page(). Therefore, it should not</span>
<span class="p_add">+ *      be mirrored by a device, because the entry will never have HMM_PFN_VALID</span>
<span class="p_add">+ *      set and the pfn value is undefined.</span>
<span class="p_add">+ * HMM_PFN_DEVICE_UNADDRESSABLE: unaddressable device memory (ZONE_DEVICE)</span>
  */
 typedef unsigned long hmm_pfn_t;
 
 #define HMM_PFN_VALID (1 &lt;&lt; 0)
<span class="p_del">-#define HMM_PFN_WRITE (1 &lt;&lt; 1)</span>
<span class="p_del">-#define HMM_PFN_SHIFT 2</span>
<span class="p_add">+#define HMM_PFN_READ (1 &lt;&lt; 1)</span>
<span class="p_add">+#define HMM_PFN_WRITE (1 &lt;&lt; 2)</span>
<span class="p_add">+#define HMM_PFN_ERROR (1 &lt;&lt; 3)</span>
<span class="p_add">+#define HMM_PFN_EMPTY (1 &lt;&lt; 4)</span>
<span class="p_add">+#define HMM_PFN_SPECIAL (1 &lt;&lt; 5)</span>
<span class="p_add">+#define HMM_PFN_DEVICE_UNADDRESSABLE (1 &lt;&lt; 6)</span>
<span class="p_add">+#define HMM_PFN_SHIFT 7</span>
 
 /*
  * hmm_pfn_t_to_page() - return struct page pointed to by a valid hmm_pfn_t
<span class="p_chunk">@@ -241,6 +254,44 @@</span> <span class="p_context"> struct hmm_mirror {</span>
 
 int hmm_mirror_register(struct hmm_mirror *mirror, struct mm_struct *mm);
 void hmm_mirror_unregister(struct hmm_mirror *mirror);
<span class="p_add">+</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * struct hmm_range - track invalidation lock on virtual address range</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * @list: all range lock are on a list</span>
<span class="p_add">+ * @start: range virtual start address (inclusive)</span>
<span class="p_add">+ * @end: range virtual end address (exclusive)</span>
<span class="p_add">+ * @pfns: array of pfns (big enough for the range)</span>
<span class="p_add">+ * @valid: pfns array did not change since it has been fill by an HMM function</span>
<span class="p_add">+ */</span>
<span class="p_add">+struct hmm_range {</span>
<span class="p_add">+	struct list_head	list;</span>
<span class="p_add">+	unsigned long		start;</span>
<span class="p_add">+	unsigned long		end;</span>
<span class="p_add">+	hmm_pfn_t		*pfns;</span>
<span class="p_add">+	bool			valid;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * To snapshot the CPU page table, call hmm_vma_get_pfns(), then take a device</span>
<span class="p_add">+ * driver lock that serializes device page table updates, then call</span>
<span class="p_add">+ * hmm_vma_range_done(), to check if the snapshot is still valid. The same</span>
<span class="p_add">+ * device driver page table update lock must also be used in the</span>
<span class="p_add">+ * hmm_mirror_ops.sync_cpu_device_pagetables() callback, so that CPU page</span>
<span class="p_add">+ * table invalidation serializes on it.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * YOU MUST CALL hmm_vma_range_done() ONCE AND ONLY ONCE EACH TIME YOU CALL</span>
<span class="p_add">+ * hmm_vma_get_pfns() WITHOUT ERROR !</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * IF YOU DO NOT FOLLOW THE ABOVE RULE THE SNAPSHOT CONTENT MIGHT BE INVALID !</span>
<span class="p_add">+ */</span>
<span class="p_add">+int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
<span class="p_add">+		     struct hmm_range *range,</span>
<span class="p_add">+		     unsigned long start,</span>
<span class="p_add">+		     unsigned long end,</span>
<span class="p_add">+		     hmm_pfn_t *pfns);</span>
<span class="p_add">+bool hmm_vma_range_done(struct vm_area_struct *vma, struct hmm_range *range);</span>
 #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */
 
 
<span class="p_header">diff --git a/mm/hmm.c b/mm/hmm.c</span>
<span class="p_header">index 7ed4b4c..4828b97 100644</span>
<span class="p_header">--- a/mm/hmm.c</span>
<span class="p_header">+++ b/mm/hmm.c</span>
<span class="p_chunk">@@ -19,8 +19,12 @@</span> <span class="p_context"></span>
  */
 #include &lt;linux/mm.h&gt;
 #include &lt;linux/hmm.h&gt;
<span class="p_add">+#include &lt;linux/rmap.h&gt;</span>
<span class="p_add">+#include &lt;linux/swap.h&gt;</span>
 #include &lt;linux/slab.h&gt;
 #include &lt;linux/sched.h&gt;
<span class="p_add">+#include &lt;linux/swapops.h&gt;</span>
<span class="p_add">+#include &lt;linux/hugetlb.h&gt;</span>
 #include &lt;linux/mmu_notifier.h&gt;
 
 static const struct mmu_notifier_ops hmm_mmu_notifier_ops;
<span class="p_chunk">@@ -30,14 +34,18 @@</span> <span class="p_context"> static const struct mmu_notifier_ops hmm_mmu_notifier_ops;</span>
  * struct hmm - HMM per mm struct
  *
  * @mm: mm struct this HMM struct is bound to
<span class="p_add">+ * @lock: lock protecting ranges list</span>
  * @sequence: we track updates to the CPU page table with a sequence number
<span class="p_add">+ * @ranges: list of range being snapshotted</span>
  * @mirrors: list of mirrors for this mm
  * @mmu_notifier: mmu notifier to track updates to CPU page table
  * @mirrors_sem: read/write semaphore protecting the mirrors list
  */
 struct hmm {
 	struct mm_struct	*mm;
<span class="p_add">+	spinlock_t		lock;</span>
 	atomic_t		sequence;
<span class="p_add">+	struct list_head	ranges;</span>
 	struct list_head	mirrors;
 	struct mmu_notifier	mmu_notifier;
 	struct rw_semaphore	mirrors_sem;
<span class="p_chunk">@@ -71,6 +79,8 @@</span> <span class="p_context"> static struct hmm *hmm_register(struct mm_struct *mm)</span>
 	init_rwsem(&amp;hmm-&gt;mirrors_sem);
 	atomic_set(&amp;hmm-&gt;sequence, 0);
 	hmm-&gt;mmu_notifier.ops = NULL;
<span class="p_add">+	INIT_LIST_HEAD(&amp;hmm-&gt;ranges);</span>
<span class="p_add">+	spin_lock_init(&amp;hmm-&gt;lock);</span>
 	hmm-&gt;mm = mm;
 
 	/*
<span class="p_chunk">@@ -111,6 +121,22 @@</span> <span class="p_context"> static void hmm_invalidate_range(struct hmm *hmm,</span>
 				 unsigned long end)
 {
 	struct hmm_mirror *mirror;
<span class="p_add">+	struct hmm_range *range;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;hmm-&gt;lock);</span>
<span class="p_add">+	list_for_each_entry(range, &amp;hmm-&gt;ranges, list) {</span>
<span class="p_add">+		unsigned long addr, idx, npages;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (end &lt; range-&gt;start || start &gt;= range-&gt;end)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		range-&gt;valid = false;</span>
<span class="p_add">+		addr = max(start, range-&gt;start);</span>
<span class="p_add">+		idx = (addr - range-&gt;start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		npages = (min(range-&gt;end, end) - addr) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+		memset(&amp;range-&gt;pfns[idx], 0, sizeof(*range-&gt;pfns) * npages);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	spin_unlock(&amp;hmm-&gt;lock);</span>
 
 	down_read(&amp;hmm-&gt;mirrors_sem);
 	list_for_each_entry(mirror, &amp;hmm-&gt;mirrors, list)
<span class="p_chunk">@@ -208,4 +234,263 @@</span> <span class="p_context"> void hmm_mirror_unregister(struct hmm_mirror *mirror)</span>
 	up_write(&amp;hmm-&gt;mirrors_sem);
 }
 EXPORT_SYMBOL(hmm_mirror_unregister);
<span class="p_add">+</span>
<span class="p_add">+static void hmm_pfns_special(hmm_pfn_t *pfns,</span>
<span class="p_add">+			     unsigned long addr,</span>
<span class="p_add">+			     unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, pfns++)</span>
<span class="p_add">+		*pfns = HMM_PFN_SPECIAL;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int hmm_vma_walk_hole(unsigned long addr,</span>
<span class="p_add">+			     unsigned long end,</span>
<span class="p_add">+			     struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hmm_range *range = walk-&gt;private;</span>
<span class="p_add">+	hmm_pfn_t *pfns = range-&gt;pfns;</span>
<span class="p_add">+	unsigned long i;</span>
<span class="p_add">+</span>
<span class="p_add">+	i = (addr - range-&gt;start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, i++)</span>
<span class="p_add">+		pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int hmm_vma_walk_clear(unsigned long addr,</span>
<span class="p_add">+			      unsigned long end,</span>
<span class="p_add">+			      struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hmm_range *range = walk-&gt;private;</span>
<span class="p_add">+	hmm_pfn_t *pfns = range-&gt;pfns;</span>
<span class="p_add">+	unsigned long i;</span>
<span class="p_add">+</span>
<span class="p_add">+	i = (addr - range-&gt;start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, i++)</span>
<span class="p_add">+		pfns[i] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int hmm_vma_walk_pmd(pmd_t *pmdp,</span>
<span class="p_add">+			    unsigned long start,</span>
<span class="p_add">+			    unsigned long end,</span>
<span class="p_add">+			    struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct hmm_range *range = walk-&gt;private;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	hmm_pfn_t *pfns = range-&gt;pfns;</span>
<span class="p_add">+	unsigned long addr = start, i;</span>
<span class="p_add">+	hmm_pfn_t flag;</span>
<span class="p_add">+	pte_t *ptep;</span>
<span class="p_add">+</span>
<span class="p_add">+	i = (addr - range-&gt;start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	flag = vma-&gt;vm_flags &amp; VM_READ ? HMM_PFN_READ : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pmd_none(*pmdp) || pmd_trans_unstable(pmdp)) {</span>
<span class="p_add">+		pmd_t pmd;</span>
<span class="p_add">+</span>
<span class="p_add">+		pmd = pmd_read_atomic(pmdp);</span>
<span class="p_add">+		barrier();</span>
<span class="p_add">+		if (pmd_none(pmd))</span>
<span class="p_add">+			return hmm_vma_walk_hole(start, end, walk);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmd_bad(pmd) || pmd_protnone(pmd))</span>
<span class="p_add">+			return hmm_vma_walk_clear(start, end, walk);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pmd_trans_huge(pmd) || pmd_devmap(pmd)) {</span>
<span class="p_add">+			unsigned long pfn = pmd_pfn(pmd) + pte_index(addr);</span>
<span class="p_add">+</span>
<span class="p_add">+			flag |= pmd_write(pmd) ? HMM_PFN_WRITE : 0;</span>
<span class="p_add">+			for (; addr &lt; end; addr += PAGE_SIZE, i++, pfn++)</span>
<span class="p_add">+				pfns[i] = hmm_pfn_t_from_pfn(pfn) | flag;</span>
<span class="p_add">+			return 0;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Something unusual is going on. Better to have the</span>
<span class="p_add">+			 * driver assume there is nothing for this range and</span>
<span class="p_add">+			 * let the fault code path sort out proper pages for the</span>
<span class="p_add">+			 * range.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			return hmm_vma_walk_clear(start, end, walk);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ptep = pte_offset_map(pmdp, addr);</span>
<span class="p_add">+	for (; addr &lt; end; addr += PAGE_SIZE, ptep++, i++) {</span>
<span class="p_add">+		pte_t pte = *ptep;</span>
<span class="p_add">+</span>
<span class="p_add">+		pfns[i] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		if (pte_none(pte)) {</span>
<span class="p_add">+			pfns[i] = HMM_PFN_EMPTY;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!pte_present(pte)) {</span>
<span class="p_add">+			swp_entry_t entry;</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!non_swap_entry(entry))</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			entry = pte_to_swp_entry(pte);</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * This is a special swap entry, ignore migration, use</span>
<span class="p_add">+			 * device and report anything else as error.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (is_device_entry(entry)) {</span>
<span class="p_add">+				pfns[i] = hmm_pfn_t_from_pfn(swp_offset(entry));</span>
<span class="p_add">+				if (is_write_device_entry(entry))</span>
<span class="p_add">+					pfns[i] |= HMM_PFN_WRITE;</span>
<span class="p_add">+				pfns[i] |= HMM_PFN_DEVICE_UNADDRESSABLE;</span>
<span class="p_add">+				pfns[i] |= flag;</span>
<span class="p_add">+			} else if (!is_migration_entry(entry)) {</span>
<span class="p_add">+				pfns[i] = HMM_PFN_ERROR;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		pfns[i] = hmm_pfn_t_from_pfn(pte_pfn(pte)) | flag;</span>
<span class="p_add">+		pfns[i] |= pte_write(pte) ? HMM_PFN_WRITE : 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	pte_unmap(ptep - 1);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * hmm_vma_get_pfns() - snapshot CPU page table for a range of virtual addresses</span>
<span class="p_add">+ * @vma: virtual memory area containing the virtual address range</span>
<span class="p_add">+ * @range: used to track snapshot validity</span>
<span class="p_add">+ * @start: range virtual start address (inclusive)</span>
<span class="p_add">+ * @end: range virtual end address (exclusive)</span>
<span class="p_add">+ * @entries: array of hmm_pfn_t: provided by the caller, filled in by function</span>
<span class="p_add">+ * Returns: -EINVAL if invalid argument, -ENOMEM out of memory, 0 success</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This snapshots the CPU page table for a range of virtual addresses. Snapshot</span>
<span class="p_add">+ * validity is tracked by range struct. See hmm_vma_range_done() for further</span>
<span class="p_add">+ * information.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The range struct is initialized here. It tracks the CPU page table, but only</span>
<span class="p_add">+ * if the function returns success (0), in which case the caller must then call</span>
<span class="p_add">+ * hmm_vma_range_done() to stop CPU page table update tracking on this range.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * NOT CALLING hmm_vma_range_done() IF FUNCTION RETURNS 0 WILL LEAD TO SERIOUS</span>
<span class="p_add">+ * MEMORY CORRUPTION ! YOU HAVE BEEN WARNED !</span>
<span class="p_add">+ */</span>
<span class="p_add">+int hmm_vma_get_pfns(struct vm_area_struct *vma,</span>
<span class="p_add">+		     struct hmm_range *range,</span>
<span class="p_add">+		     unsigned long start,</span>
<span class="p_add">+		     unsigned long end,</span>
<span class="p_add">+		     hmm_pfn_t *pfns)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_walk mm_walk;</span>
<span class="p_add">+	struct hmm *hmm;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* FIXME support hugetlb fs */</span>
<span class="p_add">+	if (is_vm_hugetlb_page(vma) || (vma-&gt;vm_flags &amp; VM_SPECIAL)) {</span>
<span class="p_add">+		hmm_pfns_special(pfns, start, end);</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Sanity check, this really should not happen ! */</span>
<span class="p_add">+	if (start &lt; vma-&gt;vm_start || start &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+	if (end &lt; vma-&gt;vm_start || end &gt; vma-&gt;vm_end)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	hmm = hmm_register(vma-&gt;vm_mm);</span>
<span class="p_add">+	if (!hmm)</span>
<span class="p_add">+		return -ENOMEM;</span>
<span class="p_add">+	/* Caller must have registered a mirror, via hmm_mirror_register() ! */</span>
<span class="p_add">+	if (!hmm-&gt;mmu_notifier.ops)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Initialize range to track CPU page table update */</span>
<span class="p_add">+	range-&gt;start = start;</span>
<span class="p_add">+	range-&gt;pfns = pfns;</span>
<span class="p_add">+	range-&gt;end = end;</span>
<span class="p_add">+	spin_lock(&amp;hmm-&gt;lock);</span>
<span class="p_add">+	range-&gt;valid = true;</span>
<span class="p_add">+	list_add_rcu(&amp;range-&gt;list, &amp;hmm-&gt;ranges);</span>
<span class="p_add">+	spin_unlock(&amp;hmm-&gt;lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	mm_walk.vma = vma;</span>
<span class="p_add">+	mm_walk.mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	mm_walk.private = range;</span>
<span class="p_add">+	mm_walk.pte_entry = NULL;</span>
<span class="p_add">+	mm_walk.test_walk = NULL;</span>
<span class="p_add">+	mm_walk.hugetlb_entry = NULL;</span>
<span class="p_add">+	mm_walk.pmd_entry = hmm_vma_walk_pmd;</span>
<span class="p_add">+	mm_walk.pte_hole = hmm_vma_walk_hole;</span>
<span class="p_add">+</span>
<span class="p_add">+	walk_page_range(start, end, &amp;mm_walk);</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(hmm_vma_get_pfns);</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * hmm_vma_range_done() - stop tracking change to CPU page table over a range</span>
<span class="p_add">+ * @vma: virtual memory area containing the virtual address range</span>
<span class="p_add">+ * @range: range being tracked</span>
<span class="p_add">+ * Returns: false if range data has been invalidated, true otherwise</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Range struct is used to track updates to the CPU page table after a call to</span>
<span class="p_add">+ * either hmm_vma_get_pfns() or hmm_vma_fault(). Once the device driver is done</span>
<span class="p_add">+ * using the data,  or wants to lock updates to the data it got from those</span>
<span class="p_add">+ * functions, it must call the hmm_vma_range_done() function, which will then</span>
<span class="p_add">+ * stop tracking CPU page table updates.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Note that device driver must still implement general CPU page table update</span>
<span class="p_add">+ * tracking either by using hmm_mirror (see hmm_mirror_register()) or by using</span>
<span class="p_add">+ * the mmu_notifier API directly.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * CPU page table update tracking done through hmm_range is only temporary and</span>
<span class="p_add">+ * to be used while trying to duplicate CPU page table contents for a range of</span>
<span class="p_add">+ * virtual addresses.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * There are two ways to use this :</span>
<span class="p_add">+ * again:</span>
<span class="p_add">+ *   hmm_vma_get_pfns(vma, range, start, end, pfns);</span>
<span class="p_add">+ *   trans = device_build_page_table_update_transaction(pfns);</span>
<span class="p_add">+ *   device_page_table_lock();</span>
<span class="p_add">+ *   if (!hmm_vma_range_done(vma, range)) {</span>
<span class="p_add">+ *     device_page_table_unlock();</span>
<span class="p_add">+ *     goto again;</span>
<span class="p_add">+ *   }</span>
<span class="p_add">+ *   device_commit_transaction(trans);</span>
<span class="p_add">+ *   device_page_table_unlock();</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Or:</span>
<span class="p_add">+ *   hmm_vma_get_pfns(vma, range, start, end, pfns);</span>
<span class="p_add">+ *   device_page_table_lock();</span>
<span class="p_add">+ *   hmm_vma_range_done(vma, range);</span>
<span class="p_add">+ *   device_update_page_table(pfns);</span>
<span class="p_add">+ *   device_page_table_unlock();</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool hmm_vma_range_done(struct vm_area_struct *vma, struct hmm_range *range)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long npages = (range-&gt;end - range-&gt;start) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+	struct hmm *hmm;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (range-&gt;end &lt;= range-&gt;start) {</span>
<span class="p_add">+		BUG();</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	hmm = hmm_register(vma-&gt;vm_mm);</span>
<span class="p_add">+	if (!hmm) {</span>
<span class="p_add">+		memset(range-&gt;pfns, 0, sizeof(*range-&gt;pfns) * npages);</span>
<span class="p_add">+		return false;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock(&amp;hmm-&gt;lock);</span>
<span class="p_add">+	list_del_rcu(&amp;range-&gt;list);</span>
<span class="p_add">+	spin_unlock(&amp;hmm-&gt;lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	return range-&gt;valid;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(hmm_vma_range_done);</span>
 #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



