
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.8,080/125] mm/hugetlb: check for reserved hugepages during memory offline - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.8,080/125] mm/hugetlb: check for reserved hugepages during memory offline</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 29, 2016, 1:49 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161029134950.509751964@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9403829/mbox/"
   >mbox</a>
|
   <a href="/patch/9403829/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9403829/">/patch/9403829/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9C0C760588 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 29 Oct 2016 14:07:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9F73A29303
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 29 Oct 2016 14:07:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9436F29704; Sat, 29 Oct 2016 14:07:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E941A29651
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat, 29 Oct 2016 14:07:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S943103AbcJ2OHV (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 29 Oct 2016 10:07:21 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:50310 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S943204AbcJ2NyI (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 29 Oct 2016 09:54:08 -0400
Received: from localhost (timessq103.t.subnet.rcn.com [206.71.234.194])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id E6B6A596;
	Sat, 29 Oct 2016 13:53:13 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;, stable@vger.kernel.org,
	Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;Aneesh Kumar K . V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Rui Teng &lt;rui.teng@linux.vnet.ibm.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 4.8 080/125] mm/hugetlb: check for reserved hugepages during
	memory offline
Date: Sat, 29 Oct 2016 09:49:58 -0400
Message-Id: &lt;20161029134950.509751964@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.10.1
In-Reply-To: &lt;20161029134947.232372651@linuxfoundation.org&gt;
References: &lt;20161029134947.232372651@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Oct. 29, 2016, 1:49 p.m.</div>
<pre class="content">
4.8-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;</span>

commit 082d5b6b60e9f25e1511557fcfcb21eedd267446 upstream.

In dissolve_free_huge_pages(), free hugepages will be dissolved without
making sure that there are enough of them left to satisfy hugepage
reservations.

Fix this by adding a return value to dissolve_free_huge_pages() and
checking h-&gt;free_huge_pages vs.  h-&gt;resv_huge_pages.  Note that this may
lead to the situation where dissolve_free_huge_page() returns an error
and all free hugepages that were dissolved before that error are lost,
while the memory block still cannot be set offline.

Fixes: c8721bbb (&quot;mm: memory-hotplug: enable memory hotplug to handle hugepage&quot;)
Link: http://lkml.kernel.org/r/20160926172811.94033-3-gerald.schaefer@de.ibm.com
<span class="signed-off-by">Signed-off-by: Gerald Schaefer &lt;gerald.schaefer@de.ibm.com&gt;</span>
<span class="acked-by">Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="acked-by">Acked-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Cc: &quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: &quot;Aneesh Kumar K . V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;
Cc: Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;
Cc: Rui Teng &lt;rui.teng@linux.vnet.ibm.com&gt;
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;
<span class="signed-off-by">Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>

---
 include/linux/hugetlb.h |    6 +++---
 mm/hugetlb.c            |   26 +++++++++++++++++++++-----
 mm/memory_hotplug.c     |    4 +++-
 3 files changed, 27 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -450,8 +450,8 @@</span> <span class="p_context"> static inline pgoff_t basepage_index(str</span>
 	return __basepage_index(page);
 }
 
<span class="p_del">-extern void dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="p_del">-				     unsigned long end_pfn);</span>
<span class="p_add">+extern int dissolve_free_huge_pages(unsigned long start_pfn,</span>
<span class="p_add">+				    unsigned long end_pfn);</span>
 static inline bool hugepage_migration_supported(struct hstate *h)
 {
 #ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION
<span class="p_chunk">@@ -518,7 +518,7 @@</span> <span class="p_context"> static inline pgoff_t basepage_index(str</span>
 {
 	return page-&gt;index;
 }
<span class="p_del">-#define dissolve_free_huge_pages(s, e)	do {} while (0)</span>
<span class="p_add">+#define dissolve_free_huge_pages(s, e)	0</span>
 #define hugepage_migration_supported(h)	false
 
 static inline spinlock_t *huge_pte_lockptr(struct hstate *h,
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1437,22 +1437,32 @@</span> <span class="p_context"> static int free_pool_huge_page(struct hs</span>
 
 /*
  * Dissolve a given free hugepage into free buddy pages. This function does
<span class="p_del">- * nothing for in-use (including surplus) hugepages.</span>
<span class="p_add">+ * nothing for in-use (including surplus) hugepages. Returns -EBUSY if the</span>
<span class="p_add">+ * number of free hugepages would be reduced below the number of reserved</span>
<span class="p_add">+ * hugepages.</span>
  */
<span class="p_del">-static void dissolve_free_huge_page(struct page *page)</span>
<span class="p_add">+static int dissolve_free_huge_page(struct page *page)</span>
 {
<span class="p_add">+	int rc = 0;</span>
<span class="p_add">+</span>
 	spin_lock(&amp;hugetlb_lock);
 	if (PageHuge(page) &amp;&amp; !page_count(page)) {
 		struct page *head = compound_head(page);
 		struct hstate *h = page_hstate(head);
 		int nid = page_to_nid(head);
<span class="p_add">+		if (h-&gt;free_huge_pages - h-&gt;resv_huge_pages == 0) {</span>
<span class="p_add">+			rc = -EBUSY;</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
 		list_del(&amp;head-&gt;lru);
 		h-&gt;free_huge_pages--;
 		h-&gt;free_huge_pages_node[nid]--;
 		h-&gt;max_huge_pages--;
 		update_and_free_page(h, head);
 	}
<span class="p_add">+out:</span>
 	spin_unlock(&amp;hugetlb_lock);
<span class="p_add">+	return rc;</span>
 }
 
 /*
<span class="p_chunk">@@ -1460,16 +1470,22 @@</span> <span class="p_context"> static void dissolve_free_huge_page(stru</span>
  * make specified memory blocks removable from the system.
  * Note that this will dissolve a free gigantic hugepage completely, if any
  * part of it lies within the given range.
<span class="p_add">+ * Also note that if dissolve_free_huge_page() returns with an error, all</span>
<span class="p_add">+ * free hugepages that were dissolved before that error are lost.</span>
  */
<span class="p_del">-void dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
<span class="p_add">+int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)</span>
 {
 	unsigned long pfn;
<span class="p_add">+	int rc = 0;</span>
 
 	if (!hugepages_supported())
<span class="p_del">-		return;</span>
<span class="p_add">+		return rc;</span>
 
 	for (pfn = start_pfn; pfn &lt; end_pfn; pfn += 1 &lt;&lt; minimum_order)
<span class="p_del">-		dissolve_free_huge_page(pfn_to_page(pfn));</span>
<span class="p_add">+		if (rc = dissolve_free_huge_page(pfn_to_page(pfn)))</span>
<span class="p_add">+			break;</span>
<span class="p_add">+</span>
<span class="p_add">+	return rc;</span>
 }
 
 /*
<span class="p_header">--- a/mm/memory_hotplug.c</span>
<span class="p_header">+++ b/mm/memory_hotplug.c</span>
<span class="p_chunk">@@ -1945,7 +1945,9 @@</span> <span class="p_context"> repeat:</span>
 	 * dissolve free hugepages in the memory block before doing offlining
 	 * actually in order to make hugetlbfs&#39;s object counting consistent.
 	 */
<span class="p_del">-	dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="p_add">+	ret = dissolve_free_huge_pages(start_pfn, end_pfn);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		goto failed_removal;</span>
 	/* check again */
 	offlined_pages = check_pages_isolated(start_pfn, end_pfn);
 	if (offlined_pages &lt; 0) {

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



