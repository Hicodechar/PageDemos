
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[8/8] powerpc/8xx: Use L1 entry APG to handle _PAGE_ACCESSED for CONFIG_SWAP - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [8/8] powerpc/8xx: Use L1 entry APG to handle _PAGE_ACCESSED for CONFIG_SWAP</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 12, 2018, 12:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;7335386c97efeb9e55423483762c7990d357b67d.1515759812.git.christophe.leroy@c-s.fr&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10160697/mbox/"
   >mbox</a>
|
   <a href="/patch/10160697/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10160697/">/patch/10160697/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EA8CA602D8 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:45:50 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D96B62888D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:45:50 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CE007288B6; Fri, 12 Jan 2018 12:45:50 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2AC932888D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 12 Jan 2018 12:45:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933802AbeALMpn (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 12 Jan 2018 07:45:43 -0500
Received: from pegase1.c-s.fr ([93.17.236.30]:12150 &quot;EHLO pegase1.c-s.fr&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S933681AbeALMpf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 12 Jan 2018 07:45:35 -0500
Received: from localhost (mailhub1-int [192.168.12.234])
	by localhost (Postfix) with ESMTP id 3zJ2XG22gyz9tvPZ;
	Fri, 12 Jan 2018 13:45:18 +0100 (CET)
X-Virus-Scanned: Debian amavisd-new at c-s.fr
Received: from pegase1.c-s.fr ([192.168.12.234])
	by localhost (pegase1.c-s.fr [192.168.12.234]) (amavisd-new,
	port 10024)
	with ESMTP id EXvt3FhjdRQs; Fri, 12 Jan 2018 13:45:18 +0100 (CET)
Received: from messagerie.si.c-s.fr (messagerie.si.c-s.fr [192.168.25.192])
	by pegase1.c-s.fr (Postfix) with ESMTP id 3zJ2XG1WYXz9tvPV;
	Fri, 12 Jan 2018 13:45:18 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id B8C9D8BE58;
	Fri, 12 Jan 2018 13:45:33 +0100 (CET)
X-Virus-Scanned: amavisd-new at c-s.fr
Received: from messagerie.si.c-s.fr ([127.0.0.1])
	by localhost (messagerie.si.c-s.fr [127.0.0.1]) (amavisd-new,
	port 10023)
	with ESMTP id GdFP4OzNb0C9; Fri, 12 Jan 2018 13:45:33 +0100 (CET)
Received: from PO15451.localdomain (po15451.idsi0.si.c-s.fr [172.25.231.40])
	by messagerie.si.c-s.fr (Postfix) with ESMTP id 848818BE4E;
	Fri, 12 Jan 2018 13:45:33 +0100 (CET)
Received: by localhost.localdomain (Postfix, from userid 0)
	id 69ADD6EE7C; Fri, 12 Jan 2018 13:45:33 +0100 (CET)
Message-Id: &lt;7335386c97efeb9e55423483762c7990d357b67d.1515759812.git.christophe.leroy@c-s.fr&gt;
In-Reply-To: &lt;bb30d80cc985d7307fa1286c9e6824230698919b.1515759812.git.christophe.leroy@c-s.fr&gt;
References: &lt;bb30d80cc985d7307fa1286c9e6824230698919b.1515759812.git.christophe.leroy@c-s.fr&gt;
From: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;
Subject: [PATCH 8/8] powerpc/8xx: Use L1 entry APG to handle _PAGE_ACCESSED
	for CONFIG_SWAP
To: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, Michael Ellerman &lt;mpe@ellerman.id.au&gt;,
	Scott Wood &lt;oss@buserror.net&gt;
Cc: linux-kernel@vger.kernel.org, linuxppc-dev@lists.ozlabs.org
Date: Fri, 12 Jan 2018 13:45:33 +0100 (CET)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=11492">LEROY Christophe</a> - Jan. 12, 2018, 12:45 p.m.</div>
<pre class="content">
When CONFIG_SWAP is set, the TLB miss handlers have to also take
into account _PAGE_ACCESSED flag. At the moment it is done by
anding _PAGE_ACCESSED into _PAGE_PRESENT using 3 instructions.

This patch uses APG for handling _PAGE_ACCESSED, allowing to
just copy _PAGE_ACCESSED bit into APG field, hence reducing the
action to a single instruction.
<span class="signed-off-by">
Signed-off-by: Christophe Leroy &lt;christophe.leroy@c-s.fr&gt;</span>
---
 arch/powerpc/include/asm/mmu-8xx.h | 34 +++++++++++++++++++++++-----
 arch/powerpc/kernel/head_8xx.S     | 45 +++++++++++++++-----------------------
 arch/powerpc/mm/8xx_mmu.c          |  2 +-
 3 files changed, 47 insertions(+), 34 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/powerpc/include/asm/mmu-8xx.h b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">index ae68f6c848d3..ee5591fe6efc 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/mmu-8xx.h</span>
<span class="p_chunk">@@ -34,12 +34,20 @@</span> <span class="p_context"></span>
  * respectively NA for All or X for Supervisor and no access for User.
  * Then we use the APG to say whether accesses are according to Page rules or
  * &quot;all Supervisor&quot; rules (Access to all)
<span class="p_del">- * Therefore, we define 2 APG groups. lsb is _PMD_USER</span>
<span class="p_del">- * 0 =&gt; No user =&gt; 01 (all accesses performed according to page definition)</span>
<span class="p_del">- * 1 =&gt; User =&gt; 00 (all accesses performed as supervisor iaw page definition)</span>
<span class="p_add">+ * We also use the 2nd APG bit for _PAGE_ACCESSED when having SWAP:</span>
<span class="p_add">+ * When that bit is not set access is done iaw &quot;all user&quot;</span>
<span class="p_add">+ * which means no access iaw page rules.</span>
<span class="p_add">+ * Therefore, we define 4 APG groups. lsb is _PMD_USER, 2nd is _PAGE_ACCESSED</span>
<span class="p_add">+ * 0x =&gt; No access =&gt; 11 (all accesses performed as user iaw page definition)</span>
<span class="p_add">+ * 10 =&gt; No user =&gt; 01 (all accesses performed according to page definition)</span>
<span class="p_add">+ * 11 =&gt; User =&gt; 00 (all accesses performed as supervisor iaw page definition)</span>
  * We define all 16 groups so that all other bits of APG can take any value
  */
<span class="p_add">+#ifdef CONFIG_SWAP</span>
<span class="p_add">+#define MI_APG_INIT	0xf4f4f4f4</span>
<span class="p_add">+#else</span>
 #define MI_APG_INIT	0x44444444
<span class="p_add">+#endif</span>
 
 /* The effective page number register.  When read, contains the information
  * about the last instruction TLB miss.  When MI_RPN is written, bits in
<span class="p_chunk">@@ -107,12 +115,20 @@</span> <span class="p_context"></span>
  * Supervisor and no access for user and NA for ALL.
  * Then we use the APG to say whether accesses are according to Page rules or
  * &quot;all Supervisor&quot; rules (Access to all)
<span class="p_del">- * Therefore, we define 2 APG groups. lsb is _PMD_USER</span>
<span class="p_del">- * 0 =&gt; No user =&gt; 01 (all accesses performed according to page definition)</span>
<span class="p_del">- * 1 =&gt; User =&gt; 00 (all accesses performed as supervisor iaw page definition)</span>
<span class="p_add">+ * We also use the 2nd APG bit for _PAGE_ACCESSED when having SWAP:</span>
<span class="p_add">+ * When that bit is not set access is done iaw &quot;all user&quot;</span>
<span class="p_add">+ * which means no access iaw page rules.</span>
<span class="p_add">+ * Therefore, we define 4 APG groups. lsb is _PMD_USER, 2nd is _PAGE_ACCESSED</span>
<span class="p_add">+ * 0x =&gt; No access =&gt; 11 (all accesses performed as user iaw page definition)</span>
<span class="p_add">+ * 10 =&gt; No user =&gt; 01 (all accesses performed according to page definition)</span>
<span class="p_add">+ * 11 =&gt; User =&gt; 00 (all accesses performed as supervisor iaw page definition)</span>
  * We define all 16 groups so that all other bits of APG can take any value
  */
<span class="p_add">+#ifdef CONFIG_SWAP</span>
<span class="p_add">+#define MD_APG_INIT	0xf4f4f4f4</span>
<span class="p_add">+#else</span>
 #define MD_APG_INIT	0x44444444
<span class="p_add">+#endif</span>
 
 /* The effective page number register.  When read, contains the information
  * about the last instruction TLB miss.  When MD_RPN is written, bits in
<span class="p_chunk">@@ -164,6 +180,12 @@</span> <span class="p_context"></span>
  */
 #define SPRN_M_TW	799
 
<span class="p_add">+/* APGs */</span>
<span class="p_add">+#define M_APG0		0x00000000</span>
<span class="p_add">+#define M_APG1		0x00000020</span>
<span class="p_add">+#define M_APG2		0x00000040</span>
<span class="p_add">+#define M_APG3		0x00000060</span>
<span class="p_add">+</span>
 #ifndef __ASSEMBLY__
 typedef struct {
 	unsigned int id;
<span class="p_header">diff --git a/arch/powerpc/kernel/head_8xx.S b/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_header">index c3b831bb8bad..d8670a37d70c 100644</span>
<span class="p_header">--- a/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_header">+++ b/arch/powerpc/kernel/head_8xx.S</span>
<span class="p_chunk">@@ -354,14 +354,13 @@</span> <span class="p_context"> _ENTRY(ITLBMiss_cmp)</span>
 #if defined(ITLB_MISS_KERNEL) || defined(CONFIG_HUGETLB_PAGE)
 	mtcr	r12
 #endif
<span class="p_del">-	/* Load the MI_TWC with the attributes for this &quot;segment.&quot; */</span>
<span class="p_del">-	mtspr	SPRN_MI_TWC, r11	/* Set segment attributes */</span>
 
 #ifdef CONFIG_SWAP
<span class="p_del">-	rlwinm	r11, r10, 32-5, _PAGE_PRESENT</span>
<span class="p_del">-	and	r11, r11, r10</span>
<span class="p_del">-	rlwimi	r10, r11, 0, _PAGE_PRESENT</span>
<span class="p_add">+	rlwinm	r11, r10, 31, _PAGE_ACCESSED &gt;&gt; 1</span>
 #endif
<span class="p_add">+	/* Load the MI_TWC with the attributes for this &quot;segment.&quot; */</span>
<span class="p_add">+	mtspr	SPRN_MI_TWC, r11	/* Set segment attributes */</span>
<span class="p_add">+</span>
 	li	r11, RPN_PATTERN | 0x200
 	/* The Linux PTE won&#39;t go exactly into the MMU TLB.
 	 * Software indicator bits 20 and 23 must be clear.
<span class="p_chunk">@@ -472,22 +471,14 @@</span> <span class="p_context"> _ENTRY(DTLBMiss_jmp)</span>
 	 * above.
 	 */
 	rlwimi	r11, r10, 0, _PAGE_GUARDED
<span class="p_del">-	mtspr	SPRN_MD_TWC, r11</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Both _PAGE_ACCESSED and _PAGE_PRESENT has to be set.</span>
<span class="p_del">-	 * We also need to know if the insn is a load/store, so:</span>
<span class="p_del">-	 * Clear _PAGE_PRESENT and load that which will</span>
<span class="p_del">-	 * trap into DTLB Error with store bit set accordinly.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	/* PRESENT=0x1, ACCESSED=0x20</span>
<span class="p_del">-	 * r11 = ((r10 &amp; PRESENT) &amp; ((r10 &amp; ACCESSED) &gt;&gt; 5));</span>
<span class="p_del">-	 * r10 = (r10 &amp; ~PRESENT) | r11;</span>
<span class="p_del">-	 */</span>
 #ifdef CONFIG_SWAP
<span class="p_del">-	rlwinm	r11, r10, 32-5, _PAGE_PRESENT</span>
<span class="p_del">-	and	r11, r11, r10</span>
<span class="p_del">-	rlwimi	r10, r11, 0, _PAGE_PRESENT</span>
<span class="p_add">+	/* _PAGE_ACCESSED has to be set. We use second APG bit for that, 0</span>
<span class="p_add">+	 * on that bit will represent a Non Access group</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	rlwinm	r11, r10, 31, _PAGE_ACCESSED &gt;&gt; 1</span>
 #endif
<span class="p_add">+	mtspr	SPRN_MD_TWC, r11</span>
<span class="p_add">+</span>
 	/* The Linux PTE won&#39;t go exactly into the MMU TLB.
 	 * Software indicator bits 24, 25, 26, and 27 must be
 	 * set.  All other Linux PTE bits control the behavior
<span class="p_chunk">@@ -647,8 +638,8 @@</span> <span class="p_context"> InstructionBreakpoint:</span>
  */
 DTLBMissIMMR:
 	mtcr	r12
<span class="p_del">-	/* Set 512k byte guarded page and mark it valid */</span>
<span class="p_del">-	li	r10, MD_PS512K | MD_GUARDED | MD_SVALID</span>
<span class="p_add">+	/* Set 512k byte guarded page and mark it valid and accessed */</span>
<span class="p_add">+	li	r10, MD_PS512K | MD_GUARDED | MD_SVALID | M_APG2</span>
 	mtspr	SPRN_MD_TWC, r10
 	mfspr	r10, SPRN_IMMR			/* Get current IMMR */
 	rlwinm	r10, r10, 0, 0xfff80000		/* Get 512 kbytes boundary */
<span class="p_chunk">@@ -666,8 +657,8 @@</span> <span class="p_context"> _ENTRY(dtlb_miss_exit_2)</span>
 
 DTLBMissLinear:
 	mtcr	r12
<span class="p_del">-	/* Set 8M byte page and mark it valid */</span>
<span class="p_del">-	li	r11, MD_PS8MEG | MD_SVALID</span>
<span class="p_add">+	/* Set 8M byte page and mark it valid and accessed */</span>
<span class="p_add">+	li	r11, MD_PS8MEG | MD_SVALID | M_APG2</span>
 	mtspr	SPRN_MD_TWC, r11
 	rlwinm	r10, r10, 0, 0x0f800000	/* 8xx supports max 256Mb RAM */
 	ori	r10, r10, 0xf0 | MD_SPS16K | _PAGE_PRIVILEGED | _PAGE_DIRTY | \
<span class="p_chunk">@@ -685,8 +676,8 @@</span> <span class="p_context"> _ENTRY(dtlb_miss_exit_3)</span>
 #ifndef CONFIG_PIN_TLB_TEXT
 ITLBMissLinear:
 	mtcr	r12
<span class="p_del">-	/* Set 8M byte page and mark it valid */</span>
<span class="p_del">-	li	r11, MI_PS8MEG | MI_SVALID</span>
<span class="p_add">+	/* Set 8M byte page and mark it valid,accessed */</span>
<span class="p_add">+	li	r11, MI_PS8MEG | MI_SVALID | M_APG2</span>
 	mtspr	SPRN_MI_TWC, r11
 	rlwinm	r10, r10, 0, 0x0f800000	/* 8xx supports max 256Mb RAM */
 	ori	r10, r10, 0xf0 | MI_SPS16K | _PAGE_PRIVILEGED | _PAGE_DIRTY | \
<span class="p_chunk">@@ -969,7 +960,7 @@</span> <span class="p_context"> initial_mmu:</span>
 	ori	r8, r8, MI_EVALID	/* Mark it valid */
 	mtspr	SPRN_MI_EPN, r8
 	li	r8, MI_PS8MEG /* Set 8M byte page */
<span class="p_del">-	ori	r8, r8, MI_SVALID	/* Make it valid */</span>
<span class="p_add">+	ori	r8, r8, MI_SVALID | M_APG2	/* Make it valid, APG 2 */</span>
 	mtspr	SPRN_MI_TWC, r8
 	li	r8, MI_BOOTINIT		/* Create RPN for address 0 */
 	mtspr	SPRN_MI_RPN, r8		/* Store TLB entry */
<span class="p_chunk">@@ -996,7 +987,7 @@</span> <span class="p_context"> initial_mmu:</span>
 	ori	r8, r8, MD_EVALID	/* Mark it valid */
 	mtspr	SPRN_MD_EPN, r8
 	li	r8, MD_PS512K | MD_GUARDED	/* Set 512k byte page */
<span class="p_del">-	ori	r8, r8, MD_SVALID	/* Make it valid */</span>
<span class="p_add">+	ori	r8, r8, MD_SVALID | M_APG2	/* Make it valid and accessed */</span>
 	mtspr	SPRN_MD_TWC, r8
 	mr	r8, r9			/* Create paddr for TLB */
 	ori	r8, r8, MI_BOOTINIT|0x2 /* Inhibit cache -- Cort */
<span class="p_header">diff --git a/arch/powerpc/mm/8xx_mmu.c b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_header">index 5d53684c2ebd..cf77d755246d 100644</span>
<span class="p_header">--- a/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_header">+++ b/arch/powerpc/mm/8xx_mmu.c</span>
<span class="p_chunk">@@ -79,7 +79,7 @@</span> <span class="p_context"> void __init MMU_init_hw(void)</span>
 	for (; i &lt; 32 &amp;&amp; mem &gt;= LARGE_PAGE_SIZE_8M; i++) {
 		mtspr(SPRN_MD_CTR, ctr | (i &lt;&lt; 8));
 		mtspr(SPRN_MD_EPN, (unsigned long)__va(addr) | MD_EVALID);
<span class="p_del">-		mtspr(SPRN_MD_TWC, MD_PS8MEG | MD_SVALID);</span>
<span class="p_add">+		mtspr(SPRN_MD_TWC, MD_PS8MEG | MD_SVALID | M_APG2);</span>
 		mtspr(SPRN_MD_RPN, addr | flags | _PAGE_PRESENT);
 		addr += LARGE_PAGE_SIZE_8M;
 		mem -= LARGE_PAGE_SIZE_8M;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



