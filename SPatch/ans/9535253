
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,4/5] userfaultfd: mcopy_atomic: return -ENOENT when no compatible VMA found - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,4/5] userfaultfd: mcopy_atomic: return -ENOENT when no compatible VMA found</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=165241">Mike Rapoport</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 24, 2017, 1:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1485265923-20256-5-git-send-email-rppt@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9535253/mbox/"
   >mbox</a>
|
   <a href="/patch/9535253/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9535253/">/patch/9535253/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	BD8556042C for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 13:54:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A1113280CF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 13:54:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9556F2817F; Tue, 24 Jan 2017 13:54:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 30265280CF
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 24 Jan 2017 13:54:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751076AbdAXNyM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 24 Jan 2017 08:54:12 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:49662 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751140AbdAXNxT (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 24 Jan 2017 08:53:19 -0500
Received: from pps.filterd (m0098394.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v0ODiUDF077874
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 24 Jan 2017 08:53:13 -0500
Received: from e06smtp06.uk.ibm.com (e06smtp06.uk.ibm.com [195.75.94.102])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2865qypxc0-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Tue, 24 Jan 2017 08:53:13 -0500
Received: from localhost
	by e06smtp06.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;rppt@linux.vnet.ibm.com&gt;;
	Tue, 24 Jan 2017 13:53:10 -0000
Received: from d06dlp02.portsmouth.uk.ibm.com (9.149.20.14)
	by e06smtp06.uk.ibm.com (192.168.101.136) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Tue, 24 Jan 2017 13:53:06 -0000
Received: from b06cxnps4076.portsmouth.uk.ibm.com
	(d06relay13.portsmouth.uk.ibm.com [9.149.109.198])
	by d06dlp02.portsmouth.uk.ibm.com (Postfix) with ESMTP id
	C08E02190019; Tue, 24 Jan 2017 13:52:11 +0000 (GMT)
Received: from d06av23.portsmouth.uk.ibm.com (d06av23.portsmouth.uk.ibm.com
	[9.149.105.59])
	by b06cxnps4076.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id v0ODr5iI9568716; Tue, 24 Jan 2017 13:53:05 GMT
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id C7D37A405B;
	Tue, 24 Jan 2017 13:53:05 +0000 (GMT)
Received: from d06av23.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id D1B4EA404D;
	Tue, 24 Jan 2017 13:53:03 +0000 (GMT)
Received: from rapoport-lnx (unknown [9.148.205.249])
	by d06av23.portsmouth.uk.ibm.com (Postfix) with ESMTPS;
	Tue, 24 Jan 2017 13:53:03 +0000 (GMT)
Received: by rapoport-lnx (sSMTP sendmail emulation);
	Tue, 24 Jan 2017 15:53:01 +0200
From: Mike Rapoport &lt;rppt@linux.vnet.ibm.com&gt;
To: Linux-MM &lt;linux-mm@kvack.org&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Dr. David Alan Gilbert&quot; &lt;dgilbert@redhat.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	Pavel Emelyanov &lt;xemul@virtuozzo.com&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Mike Rapoport &lt;rppt@linux.vnet.ibm.com&gt;
Subject: [RFC PATCH 4/5] userfaultfd: mcopy_atomic: return -ENOENT when no
	compatible VMA found
Date: Tue, 24 Jan 2017 15:52:02 +0200
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1485265923-20256-1-git-send-email-rppt@linux.vnet.ibm.com&gt;
References: &lt;1485265923-20256-1-git-send-email-rppt@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 17012413-0024-0000-0000-000002A7A36D
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17012413-0025-0000-0000-00002228E89E
Message-Id: &lt;1485265923-20256-5-git-send-email-rppt@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-01-24_08:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=0
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1612050000
	definitions=main-1701240098
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=165241">Mike Rapoport</a> - Jan. 24, 2017, 1:52 p.m.</div>
<pre class="content">
The memory mapping of a process may change between #PF event and the call
to mcopy_atomic that comes to resolve the page fault. In such case, there
will be no VMA covering the range passed to mcopy_atomic or the VMA will
not have userfaultfd context.
To allow uffd monitor to distinguish those case from other errors, let&#39;s
return -ENOENT instead of -EINVAL.

Note, that despite availability of UFFD_EVENT_UNMAP there still might be
race between the processing of UFFD_EVENT_UNMAP and outstanding
mcopy_atomic in case of non-cooperative uffd usage.
<span class="signed-off-by">
Signed-off-by: Mike Rapoport &lt;rppt@linux.vnet.ibm.com&gt;</span>
---
 mm/userfaultfd.c | 42 ++++++++++++++++++++++--------------------
 1 file changed, 22 insertions(+), 20 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/userfaultfd.c b/mm/userfaultfd.c</span>
<span class="p_header">index a0817cc..b861cf9 100644</span>
<span class="p_header">--- a/mm/userfaultfd.c</span>
<span class="p_header">+++ b/mm/userfaultfd.c</span>
<span class="p_chunk">@@ -195,11 +195,18 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
 	 * retry, dst_vma will be set to NULL and we must lookup again.
 	 */
 	if (!dst_vma) {
<span class="p_del">-		err = -EINVAL;</span>
<span class="p_add">+		err = -ENOENT;</span>
 		dst_vma = find_vma(dst_mm, dst_start);
 		if (!dst_vma || !is_vm_hugetlb_page(dst_vma))
 			goto out_unlock;
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Only allow __mcopy_atomic_hugetlb on userfaultfd</span>
<span class="p_add">+		 * registered ranges.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (!dst_vma-&gt;vm_userfaultfd_ctx.ctx)</span>
<span class="p_add">+			goto out_unlock;</span>
 
<span class="p_add">+		err = -EINVAL;</span>
 		if (vma_hpagesize != vma_kernel_pagesize(dst_vma))
 			goto out_unlock;
 
<span class="p_chunk">@@ -219,12 +226,6 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,</span>
 		goto out_unlock;
 
 	/*
<span class="p_del">-	 * Only allow __mcopy_atomic_hugetlb on userfaultfd registered ranges.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (!dst_vma-&gt;vm_userfaultfd_ctx.ctx)</span>
<span class="p_del">-		goto out_unlock;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
 	 * Ensure the dst_vma has a anon_vma.
 	 */
 	err = -ENOMEM;
<span class="p_chunk">@@ -368,10 +369,23 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,</span>
 	 * Make sure the vma is not shared, that the dst range is
 	 * both valid and fully within a single existing vma.
 	 */
<span class="p_del">-	err = -EINVAL;</span>
<span class="p_add">+	err = -ENOENT;</span>
 	dst_vma = find_vma(dst_mm, dst_start);
 	if (!dst_vma)
 		goto out_unlock;
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Be strict and only allow __mcopy_atomic on userfaultfd</span>
<span class="p_add">+	 * registered ranges to prevent userland errors going</span>
<span class="p_add">+	 * unnoticed. As far as the VM consistency is concerned, it</span>
<span class="p_add">+	 * would be perfectly safe to remove this check, but there&#39;s</span>
<span class="p_add">+	 * no useful usage for __mcopy_atomic ouside of userfaultfd</span>
<span class="p_add">+	 * registered ranges. This is after all why these are ioctls</span>
<span class="p_add">+	 * belonging to the userfaultfd and not syscalls.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!dst_vma-&gt;vm_userfaultfd_ctx.ctx)</span>
<span class="p_add">+		goto out_unlock;</span>
<span class="p_add">+</span>
<span class="p_add">+	err = -EINVAL;</span>
 	if (!vma_is_shmem(dst_vma) &amp;&amp; dst_vma-&gt;vm_flags &amp; VM_SHARED)
 		goto out_unlock;
 	if (dst_start &lt; dst_vma-&gt;vm_start ||
<span class="p_chunk">@@ -385,18 +399,6 @@</span> <span class="p_context"> static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,</span>
 		return  __mcopy_atomic_hugetlb(dst_mm, dst_vma, dst_start,
 						src_start, len, zeropage);
 
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Be strict and only allow __mcopy_atomic on userfaultfd</span>
<span class="p_del">-	 * registered ranges to prevent userland errors going</span>
<span class="p_del">-	 * unnoticed. As far as the VM consistency is concerned, it</span>
<span class="p_del">-	 * would be perfectly safe to remove this check, but there&#39;s</span>
<span class="p_del">-	 * no useful usage for __mcopy_atomic ouside of userfaultfd</span>
<span class="p_del">-	 * registered ranges. This is after all why these are ioctls</span>
<span class="p_del">-	 * belonging to the userfaultfd and not syscalls.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (!dst_vma-&gt;vm_userfaultfd_ctx.ctx)</span>
<span class="p_del">-		goto out_unlock;</span>
<span class="p_del">-</span>
 	if (!vma_is_anonymous(dst_vma) &amp;&amp; !vma_is_shmem(dst_vma))
 		goto out_unlock;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



