
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>Multiple oom_reaper BUGs: unmap_page_range racing with exit_mmap - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    Multiple oom_reaper BUGs: unmap_page_range racing with exit_mmap</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=579">David Rientjes</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 6, 2017, 2:58 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;alpine.DEB.2.10.1712051857450.98120@chino.kir.corp.google.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10094885/mbox/"
   >mbox</a>
|
   <a href="/patch/10094885/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10094885/">/patch/10094885/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D0540602BF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 02:58:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AAB492969D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 02:58:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 9D2D8296E6; Wed,  6 Dec 2017 02:58:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 73A102969D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  6 Dec 2017 02:58:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754551AbdLFC6O (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 5 Dec 2017 21:58:14 -0500
Received: from mail-it0-f51.google.com ([209.85.214.51]:46503 &quot;EHLO
	mail-it0-f51.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754270AbdLFC6K (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 5 Dec 2017 21:58:10 -0500
Received: by mail-it0-f51.google.com with SMTP id t1so5467189ite.5
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Tue, 05 Dec 2017 18:58:10 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=google.com; s=20161025;
	h=date:from:to:cc:subject:in-reply-to:message-id:references
	:user-agent:mime-version;
	bh=yELJ3r/Q1AytqjtkpRXtVniM5DOi4D2FRKV28gfGiCI=;
	b=CW3JpAWmAdbFH8mHVTnv2fuHmExs1GPRVyMR/+pXlXQV+vphufeq0kUsD3FW7M8S1V
	dl/gcX7K+W4w4BkeUG2I7pwnEdwpQ97U30hAGzo5vsAlYqFaFqMURrvMrj6XcNp9IyJK
	zHTkiRq0OdR0jRB+9KBkXm8nvLdgsZGT+cdLN2kabeB/na4PFgqtNz9zpzOyDGyQHLat
	4RUEqj/a+ElRGGb9441FGEGSpvYuQtqwfWQGX5Zog7ulPtnkAYVXLxJtVvMJxpx6IoPd
	Lu3GeLWgFuMWt31wyZI60obE1eB54EgxbQnvZs7hnb/mNeDkAeV7iUqVo/IbtLGP2NF1
	cYew==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:date:from:to:cc:subject:in-reply-to:message-id
	:references:user-agent:mime-version;
	bh=yELJ3r/Q1AytqjtkpRXtVniM5DOi4D2FRKV28gfGiCI=;
	b=rTQ9vpwuQ6H5xH2miygzuQ0ESQNRzhfHwEOMuGH1S8d9CU3Pd8XI9We63gUFebhf/7
	IhTmv1y5V1kCAs0/kvNpIkIcj3F1OnR7sEdLRSuaBz6ejvPLJ3QhLnOX73I9C+0TCR0Y
	uYe+W059Y2qm46gjTTye5ZHSjgFHZ+OgVf9+kZhkVVwN0pp6gLMFIxCHpMGaBkpUKJyf
	HjVOm9FeM94hsCIeaIKfUC/K3EusxvQ4kHM0YtxYKAA91bKpJ5ms1r2CsH1myC555i4J
	HE3+KtTQLTJjb9U4m/t24thmot6PksBIr6/AXDFjH/lklAUW+jylO/VYtrAqCxibC8ye
	7rJQ==
X-Gm-Message-State: AJaThX5wGFA+1Ktnd7t3O2h46DfmcWWnJ6kPHUHDF8E6Nm3g0rBM5a47
	5qJ6pQBGsTq404uJqr0eDL0aeg==
X-Google-Smtp-Source: AGs4zMYvO3BijR+VeAoOawSnoAh6uLb66VFqnwDlVHBve6kIrMSFpHAr+4Qqp8XZBVu58aizMKZ7hA==
X-Received: by 10.36.164.13 with SMTP id z13mr21910081ite.115.1512529089688; 
	Tue, 05 Dec 2017 18:58:09 -0800 (PST)
Received: from [2620:15c:17:3:1579:dee:6b0c:688c]
	([2620:15c:17:3:1579:dee:6b0c:688c])
	by smtp.gmail.com with ESMTPSA id
	i133sm5825410itf.1.2017.12.05.18.58.08
	(version=TLS1 cipher=ECDHE-RSA-AES128-SHA bits=128/128);
	Tue, 05 Dec 2017 18:58:09 -0800 (PST)
Date: Tue, 5 Dec 2017 18:58:08 -0800 (PST)
From: David Rientjes &lt;rientjes@google.com&gt;
X-X-Sender: rientjes@chino.kir.corp.google.com
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
cc: Michal Hocko &lt;mhocko@suse.com&gt;,
	Tetsuo Handa &lt;penguin-kernel@i-love.sakura.ne.jp&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	linux-kernel@vger.kernel.org, linux-mm@kvack.org
Subject: Re: Multiple oom_reaper BUGs: unmap_page_range racing with exit_mmap
In-Reply-To: &lt;alpine.DEB.2.10.1712051824050.91099@chino.kir.corp.google.com&gt;
Message-ID: &lt;alpine.DEB.2.10.1712051857450.98120@chino.kir.corp.google.com&gt;
References: &lt;alpine.DEB.2.10.1712051824050.91099@chino.kir.corp.google.com&gt;
User-Agent: Alpine 2.10 (DEB 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Dec. 6, 2017, 2:58 a.m.</div>
<pre class="content">
On Tue, 5 Dec 2017, David Rientjes wrote:
<span class="quote">
&gt; One way to solve the issue is to have two mm flags: one to indicate the mm </span>
<span class="quote">&gt; is entering unmap_vmas(): set the flag, do down_write(&amp;mm-&gt;mmap_sem); </span>
<span class="quote">&gt; up_write(&amp;mm-&gt;mmap_sem), then unmap_vmas().  The oom reaper needs this </span>
<span class="quote">&gt; flag clear, not MMF_OOM_SKIP, while holding down_read(&amp;mm-&gt;mmap_sem) to be </span>
<span class="quote">&gt; allowed to call unmap_page_range().  The oom killer will still defer </span>
<span class="quote">&gt; selecting this victim for MMF_OOM_SKIP after unmap_vmas() returns.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The result of that change would be that we do not oom reap from any mm </span>
<span class="quote">&gt; entering unmap_vmas(): we let unmap_vmas() do the work itself and avoid </span>
<span class="quote">&gt; racing with it.</span>
<span class="quote">&gt; </span>

I think we need something like the following?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Dec. 6, 2017, 8:50 a.m.</div>
<pre class="content">
On Wed 06-12-17 12:28:53, Tetsuo Handa wrote:
<span class="quote">&gt; David Rientjes wrote:</span>
<span class="quote">&gt; &gt; On Tue, 5 Dec 2017, David Rientjes wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; One way to solve the issue is to have two mm flags: one to indicate the mm </span>
<span class="quote">&gt; &gt; &gt; is entering unmap_vmas(): set the flag, do down_write(&amp;mm-&gt;mmap_sem); </span>
<span class="quote">&gt; &gt; &gt; up_write(&amp;mm-&gt;mmap_sem), then unmap_vmas().  The oom reaper needs this </span>
<span class="quote">&gt; &gt; &gt; flag clear, not MMF_OOM_SKIP, while holding down_read(&amp;mm-&gt;mmap_sem) to be </span>
<span class="quote">&gt; &gt; &gt; allowed to call unmap_page_range().  The oom killer will still defer </span>
<span class="quote">&gt; &gt; &gt; selecting this victim for MMF_OOM_SKIP after unmap_vmas() returns.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; The result of that change would be that we do not oom reap from any mm </span>
<span class="quote">&gt; &gt; &gt; entering unmap_vmas(): we let unmap_vmas() do the work itself and avoid </span>
<span class="quote">&gt; &gt; &gt; racing with it.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think we need something like the following?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch does not work. __oom_reap_task_mm() can find MMF_REAPING and</span>
<span class="quote">&gt; return true and sets MMF_OOM_SKIP before exit_mmap() calls down_write().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Also, I don&#39;t know what exit_mmap() is doing but I think that there is a</span>
<span class="quote">&gt; possibility that the OOM reaper tries to reclaim mlocked pages as soon as</span>
<span class="quote">&gt; exit_mmap() cleared VM_LOCKED flag by calling munlock_vma_pages_all().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (mm-&gt;locked_vm) {</span>
<span class="quote">&gt; 		vma = mm-&gt;mmap;</span>
<span class="quote">&gt; 		while (vma) {</span>
<span class="quote">&gt; 			if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="quote">&gt; 				munlock_vma_pages_all(vma);</span>
<span class="quote">&gt; 			vma = vma-&gt;vm_next;</span>
<span class="quote">&gt; 		}</span>
<span class="quote">&gt; 	}</span>

I do not really see, why this would matter. munlock_vma_pages_all is
mostly about accounting and clearing the per-page state. It relies on
follow_page which crawls page tables and unmap_page_range clears ptes
under the lock which is taken when resolving a locked page as well.

I still have to think about all the consequences when we are effectively
reaping VM_LOCKED vmas - I suspect we can do some misaccounting but I
yet do not see how this could lead to crashes. Maybe we can move
VM_LOCKED clearing _after_ the munlock bussiness is done but this is
really hard to tell before I re-read the mlock code more throughly.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/sched/coredump.h b/include/linux/sched/coredump.h</span>
<span class="p_header">--- a/include/linux/sched/coredump.h</span>
<span class="p_header">+++ b/include/linux/sched/coredump.h</span>
<span class="p_chunk">@@ -70,6 +70,7 @@</span> <span class="p_context"> static inline int get_dumpable(struct mm_struct *mm)</span>
 #define MMF_UNSTABLE		22	/* mm is unstable for copy_from_user */
 #define MMF_HUGE_ZERO_PAGE	23      /* mm has ever used the global huge zero page */
 #define MMF_DISABLE_THP		24	/* disable THP for all VMAs */
<span class="p_add">+#define MMF_REAPING		25	/* mm is undergoing reaping */</span>
 #define MMF_DISABLE_THP_MASK	(1 &lt;&lt; MMF_DISABLE_THP)
 
 #define MMF_INIT_MASK		(MMF_DUMPABLE_MASK | MMF_DUMP_FILTER_MASK |\
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -3014,16 +3014,11 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 
 	lru_add_drain();
 	flush_cache_mm(mm);
<span class="p_del">-	tlb_gather_mmu(&amp;tlb, mm, 0, -1);</span>
<span class="p_del">-	/* update_hiwater_rss(mm) here? but nobody should be looking */</span>
<span class="p_del">-	/* Use -1 here to ensure all VMAs in the mm are unmapped */</span>
<span class="p_del">-	unmap_vmas(&amp;tlb, vma, 0, -1);</span>
<span class="p_del">-</span>
<span class="p_del">-	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="p_add">+	set_bit(MMF_REAPING, &amp;mm-&gt;flags);</span>
 	if (unlikely(tsk_is_oom_victim(current))) {
 		/*
 		 * Wait for oom_reap_task() to stop working on this
<span class="p_del">-		 * mm. Because MMF_OOM_SKIP is already set before</span>
<span class="p_add">+		 * mm. Because MMF_REAPING is already set before</span>
 		 * calling down_read(), oom_reap_task() will not run
 		 * on this &quot;mm&quot; post up_write().
 		 *
<span class="p_chunk">@@ -3036,6 +3031,11 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 		down_write(&amp;mm-&gt;mmap_sem);
 		up_write(&amp;mm-&gt;mmap_sem);
 	}
<span class="p_add">+	tlb_gather_mmu(&amp;tlb, mm, 0, -1);</span>
<span class="p_add">+	/* update_hiwater_rss(mm) here? but nobody should be looking */</span>
<span class="p_add">+	/* Use -1 here to ensure all VMAs in the mm are unmapped */</span>
<span class="p_add">+	unmap_vmas(&amp;tlb, vma, 0, -1);</span>
<span class="p_add">+	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
 	free_pgtables(&amp;tlb, vma, FIRST_USER_ADDRESS, USER_PGTABLES_CEILING);
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -529,12 +529,12 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 	}
 
 	/*
<span class="p_del">-	 * MMF_OOM_SKIP is set by exit_mmap when the OOM reaper can&#39;t</span>
<span class="p_del">-	 * work on the mm anymore. The check for MMF_OOM_SKIP must run</span>
<span class="p_add">+	 * MMF_REAPING is set by exit_mmap when the OOM reaper can&#39;t</span>
<span class="p_add">+	 * work on the mm anymore. The check for MMF_REAPING must run</span>
 	 * under mmap_sem for reading because it serializes against the
 	 * down_write();up_write() cycle in exit_mmap().
 	 */
<span class="p_del">-	if (test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="p_add">+	if (test_bit(MMF_REAPING, &amp;mm-&gt;flags)) {</span>
 		up_read(&amp;mm-&gt;mmap_sem);
 		trace_skip_task_reaping(tsk-&gt;pid);
 		goto unlock_oom;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



