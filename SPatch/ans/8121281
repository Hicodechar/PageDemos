
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,12/14] mm, page_owner: track and print last migrate reason - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,12/14] mm, page_owner: track and print last migrate reason</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 26, 2016, 12:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1453812353-26744-13-git-send-email-vbabka@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8121281/mbox/"
   >mbox</a>
|
   <a href="/patch/8121281/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8121281/">/patch/8121281/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 2766C9F1C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Jan 2016 12:48:34 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 34B512026D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Jan 2016 12:48:33 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 72FDD20274
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 26 Jan 2016 12:48:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S965039AbcAZMs2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 26 Jan 2016 07:48:28 -0500
Received: from mx2.suse.de ([195.135.220.15]:45978 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S934309AbcAZMq3 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 26 Jan 2016 07:46:29 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay1.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id BE569AD62;
	Tue, 26 Jan 2016 12:46:24 +0000 (UTC)
From: Vlastimil Babka &lt;vbabka@suse.cz&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;,
	Minchan Kim &lt;minchan@kernel.org&gt;, Sasha Levin &lt;sasha.levin@oracle.com&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Mel Gorman &lt;mgorman@suse.de&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;
Subject: [PATCH v4 12/14] mm, page_owner: track and print last migrate reason
Date: Tue, 26 Jan 2016 13:45:51 +0100
Message-Id: &lt;1453812353-26744-13-git-send-email-vbabka@suse.cz&gt;
X-Mailer: git-send-email 2.7.0
In-Reply-To: &lt;1453812353-26744-1-git-send-email-vbabka@suse.cz&gt;
References: &lt;1453812353-26744-1-git-send-email-vbabka@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Jan. 26, 2016, 12:45 p.m.</div>
<pre class="content">
During migration, page_owner info is now copied with the rest of the page, so
the stacktrace leading to free page allocation during migration is overwritten.
For debugging purposes, it might be however useful to know that the page has
been migrated since its initial allocation. This might happen many times during
the lifetime for different reasons and fully tracking this, especially with
stacktraces would incur extra memory costs. As a compromise, store and print
the migrate_reason of the last migration that occurred to the page. This is
enough to distinguish compaction, numa balancing etc.

Example page_owner entry after the patch:

Page allocated via order 0, mask 0x24200ca(GFP_HIGHUSER_MOVABLE)
PFN 628753 type Movable Block 1228 type Movable Flags 0x1fffff80040030(dirty|lru|swapbacked)
 [&lt;ffffffff811682c4&gt;] __alloc_pages_nodemask+0x134/0x230
 [&lt;ffffffff811b6325&gt;] alloc_pages_vma+0xb5/0x250
 [&lt;ffffffff81177491&gt;] shmem_alloc_page+0x61/0x90
 [&lt;ffffffff8117a438&gt;] shmem_getpage_gfp+0x678/0x960
 [&lt;ffffffff8117c2b9&gt;] shmem_fallocate+0x329/0x440
 [&lt;ffffffff811de600&gt;] vfs_fallocate+0x140/0x230
 [&lt;ffffffff811df434&gt;] SyS_fallocate+0x44/0x70
 [&lt;ffffffff8158cc2e&gt;] entry_SYSCALL_64_fastpath+0x12/0x71
Page has been migrated, last migrate reason: compaction
<span class="signed-off-by">
Signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;</span>
Cc: Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;
Cc: Minchan Kim &lt;minchan@kernel.org&gt;
Cc: Sasha Levin &lt;sasha.levin@oracle.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Mel Gorman &lt;mgorman@suse.de&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
---
 include/linux/migrate.h    |  6 +++++-
 include/linux/page_ext.h   |  1 +
 include/linux/page_owner.h |  9 +++++++++
 mm/debug.c                 | 11 +++++++++++
 mm/migrate.c               | 10 +++++++---
 mm/page_owner.c            | 17 +++++++++++++++++
 6 files changed, 50 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/migrate.h b/include/linux/migrate.h</span>
<span class="p_header">index cac1c0904d5f..9b50325e4ddf 100644</span>
<span class="p_header">--- a/include/linux/migrate.h</span>
<span class="p_header">+++ b/include/linux/migrate.h</span>
<span class="p_chunk">@@ -23,9 +23,13 @@</span> <span class="p_context"> enum migrate_reason {</span>
 	MR_SYSCALL,		/* also applies to cpusets */
 	MR_MEMPOLICY_MBIND,
 	MR_NUMA_MISPLACED,
<span class="p_del">-	MR_CMA</span>
<span class="p_add">+	MR_CMA,</span>
<span class="p_add">+	MR_TYPES</span>
 };
 
<span class="p_add">+/* In mm/debug.c; also keep sync with include/trace/events/migrate.h */</span>
<span class="p_add">+extern char *migrate_reason_names[MR_TYPES];</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MIGRATION
 
 extern void putback_movable_pages(struct list_head *l);
<span class="p_header">diff --git a/include/linux/page_ext.h b/include/linux/page_ext.h</span>
<span class="p_header">index 17f118a82854..e1fe7cf5bddf 100644</span>
<span class="p_header">--- a/include/linux/page_ext.h</span>
<span class="p_header">+++ b/include/linux/page_ext.h</span>
<span class="p_chunk">@@ -45,6 +45,7 @@</span> <span class="p_context"> struct page_ext {</span>
 	unsigned int order;
 	gfp_t gfp_mask;
 	unsigned int nr_entries;
<span class="p_add">+	int last_migrate_reason;</span>
 	unsigned long trace_entries[8];
 #endif
 };
<span class="p_header">diff --git a/include/linux/page_owner.h b/include/linux/page_owner.h</span>
<span class="p_header">index 6440daab4ef8..555893bf13d7 100644</span>
<span class="p_header">--- a/include/linux/page_owner.h</span>
<span class="p_header">+++ b/include/linux/page_owner.h</span>
<span class="p_chunk">@@ -12,6 +12,7 @@</span> <span class="p_context"> extern void __set_page_owner(struct page *page,</span>
 			unsigned int order, gfp_t gfp_mask);
 extern gfp_t __get_page_owner_gfp(struct page *page);
 extern void __copy_page_owner(struct page *oldpage, struct page *newpage);
<span class="p_add">+extern void __set_page_owner_migrate_reason(struct page *page, int reason);</span>
 
 static inline void reset_page_owner(struct page *page, unsigned int order)
 {
<span class="p_chunk">@@ -38,6 +39,11 @@</span> <span class="p_context"> static inline void copy_page_owner(struct page *oldpage, struct page *newpage)</span>
 	if (static_branch_unlikely(&amp;page_owner_inited))
 		__copy_page_owner(oldpage, newpage);
 }
<span class="p_add">+static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (static_branch_unlikely(&amp;page_owner_inited))</span>
<span class="p_add">+		__set_page_owner_migrate_reason(page, reason);</span>
<span class="p_add">+}</span>
 #else
 static inline void reset_page_owner(struct page *page, unsigned int order)
 {
<span class="p_chunk">@@ -53,5 +59,8 @@</span> <span class="p_context"> static inline gfp_t get_page_owner_gfp(struct page *page)</span>
 static inline void copy_page_owner(struct page *oldpage, struct page *newpage)
 {
 }
<span class="p_add">+static inline void set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif /* CONFIG_PAGE_OWNER */
 #endif /* __LINUX_PAGE_OWNER_H */
<span class="p_header">diff --git a/mm/debug.c b/mm/debug.c</span>
<span class="p_header">index 231e1452a912..78dc54877075 100644</span>
<span class="p_header">--- a/mm/debug.c</span>
<span class="p_header">+++ b/mm/debug.c</span>
<span class="p_chunk">@@ -10,9 +10,20 @@</span> <span class="p_context"></span>
 #include &lt;linux/trace_events.h&gt;
 #include &lt;linux/memcontrol.h&gt;
 #include &lt;trace/events/mmflags.h&gt;
<span class="p_add">+#include &lt;linux/migrate.h&gt;</span>
 
 #include &quot;internal.h&quot;
 
<span class="p_add">+char *migrate_reason_names[MR_TYPES] = {</span>
<span class="p_add">+	&quot;compaction&quot;,</span>
<span class="p_add">+	&quot;memory_failure&quot;,</span>
<span class="p_add">+	&quot;memory_hotplug&quot;,</span>
<span class="p_add">+	&quot;syscall_or_cpuset&quot;,</span>
<span class="p_add">+	&quot;mempolicy_mbind&quot;,</span>
<span class="p_add">+	&quot;numa_misplaced&quot;,</span>
<span class="p_add">+	&quot;cma&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 const struct trace_print_flags pageflag_names[] = {
 	__def_pageflag_names,
 	{0, NULL}
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 863a0f1fe23f..1c11b73cd834 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -955,8 +955,10 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 	}
 
 	rc = __unmap_and_move(page, newpage, force, mode);
<span class="p_del">-	if (rc == MIGRATEPAGE_SUCCESS)</span>
<span class="p_add">+	if (rc == MIGRATEPAGE_SUCCESS) {</span>
 		put_new_page = NULL;
<span class="p_add">+		set_page_owner_migrate_reason(newpage, reason);</span>
<span class="p_add">+	}</span>
 
 out:
 	if (rc != -EAGAIN) {
<span class="p_chunk">@@ -1021,7 +1023,7 @@</span> <span class="p_context"> static ICE_noinline int unmap_and_move(new_page_t get_new_page,</span>
 static int unmap_and_move_huge_page(new_page_t get_new_page,
 				free_page_t put_new_page, unsigned long private,
 				struct page *hpage, int force,
<span class="p_del">-				enum migrate_mode mode)</span>
<span class="p_add">+				enum migrate_mode mode, int reason)</span>
 {
 	int rc = -EAGAIN;
 	int *result = NULL;
<span class="p_chunk">@@ -1079,6 +1081,7 @@</span> <span class="p_context"> static int unmap_and_move_huge_page(new_page_t get_new_page,</span>
 	if (rc == MIGRATEPAGE_SUCCESS) {
 		hugetlb_cgroup_migrate(hpage, new_hpage);
 		put_new_page = NULL;
<span class="p_add">+		set_page_owner_migrate_reason(new_hpage, reason);</span>
 	}
 
 	unlock_page(hpage);
<span class="p_chunk">@@ -1151,7 +1154,7 @@</span> <span class="p_context"> int migrate_pages(struct list_head *from, new_page_t get_new_page,</span>
 			if (PageHuge(page))
 				rc = unmap_and_move_huge_page(get_new_page,
 						put_new_page, private, page,
<span class="p_del">-						pass &gt; 2, mode);</span>
<span class="p_add">+						pass &gt; 2, mode, reason);</span>
 			else
 				rc = unmap_and_move(get_new_page, put_new_page,
 						private, page, pass &gt; 2, mode,
<span class="p_chunk">@@ -1842,6 +1845,7 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 	set_page_memcg(new_page, page_memcg(page));
 	set_page_memcg(page, NULL);
 	page_remove_rmap(page, true);
<span class="p_add">+	set_page_owner_migrate_reason(new_page, MR_NUMA_MISPLACED);</span>
 
 	spin_unlock(ptl);
 	mmu_notifier_invalidate_range_end(mm, mmun_start, mmun_end);
<span class="p_header">diff --git a/mm/page_owner.c b/mm/page_owner.c</span>
<span class="p_header">index 774b55623212..a57068cfe52f 100644</span>
<span class="p_header">--- a/mm/page_owner.c</span>
<span class="p_header">+++ b/mm/page_owner.c</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/stacktrace.h&gt;
 #include &lt;linux/page_owner.h&gt;
 #include &lt;linux/jump_label.h&gt;
<span class="p_add">+#include &lt;linux/migrate.h&gt;</span>
 #include &quot;internal.h&quot;
 
 static bool page_owner_disabled = true;
<span class="p_chunk">@@ -73,10 +74,18 @@</span> <span class="p_context"> void __set_page_owner(struct page *page, unsigned int order, gfp_t gfp_mask)</span>
 	page_ext-&gt;order = order;
 	page_ext-&gt;gfp_mask = gfp_mask;
 	page_ext-&gt;nr_entries = trace.nr_entries;
<span class="p_add">+	page_ext-&gt;last_migrate_reason = -1;</span>
 
 	__set_bit(PAGE_EXT_OWNER, &amp;page_ext-&gt;flags);
 }
 
<span class="p_add">+void __set_page_owner_migrate_reason(struct page *page, int reason)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct page_ext *page_ext = lookup_page_ext(page);</span>
<span class="p_add">+</span>
<span class="p_add">+	page_ext-&gt;last_migrate_reason = reason;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 gfp_t __get_page_owner_gfp(struct page *page)
 {
 	struct page_ext *page_ext = lookup_page_ext(page);
<span class="p_chunk">@@ -151,6 +160,14 @@</span> <span class="p_context"> print_page_owner(char __user *buf, size_t count, unsigned long pfn,</span>
 	if (ret &gt;= count)
 		goto err;
 
<span class="p_add">+	if (page_ext-&gt;last_migrate_reason != -1) {</span>
<span class="p_add">+		ret += snprintf(kbuf + ret, count - ret,</span>
<span class="p_add">+			&quot;Page has been migrated, last migrate reason: %s\n&quot;,</span>
<span class="p_add">+			migrate_reason_names[page_ext-&gt;last_migrate_reason]);</span>
<span class="p_add">+		if (ret &gt;= count)</span>
<span class="p_add">+			goto err;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	ret += snprintf(kbuf + ret, count - ret, &quot;\n&quot;);
 	if (ret &gt;= count)
 		goto err;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



