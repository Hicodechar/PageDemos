
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[05/15] dax: stop using VM_MIXEDMAP for dax - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [05/15] dax: stop using VM_MIXEDMAP for dax</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=320">Dan Williams</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 31, 2017, 11:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;150949212239.24061.11111318131160225304.stgit@dwillia2-desk3.amr.corp.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10035657/mbox/"
   >mbox</a>
|
   <a href="/patch/10035657/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10035657/">/patch/10035657/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	02ABF60327 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:28:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EAB0F20502
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:28:34 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DEFE527D4D; Tue, 31 Oct 2017 23:28:34 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 28F0D20502
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 31 Oct 2017 23:28:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933079AbdJaX2c (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 31 Oct 2017 19:28:32 -0400
Received: from mga11.intel.com ([192.55.52.93]:27318 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932449AbdJaX22 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 31 Oct 2017 19:28:28 -0400
Received: from orsmga003.jf.intel.com ([10.7.209.27])
	by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	31 Oct 2017 16:28:27 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,326,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1031854867&quot;
Received: from dwillia2-desk3.jf.intel.com (HELO
	dwillia2-desk3.amr.corp.intel.com) ([10.54.39.125])
	by orsmga003.jf.intel.com with ESMTP; 31 Oct 2017 16:28:26 -0700
Subject: [PATCH 05/15] dax: stop using VM_MIXEDMAP for dax
From: Dan Williams &lt;dan.j.williams@intel.com&gt;
To: linux-nvdimm@lists.01.org
Cc: Michal Hocko &lt;mhocko@suse.com&gt;, Jan Kara &lt;jack@suse.cz&gt;,
	linux-kernel@vger.kernel.org, hch@lst.de,
	linux-xfs@vger.kernel.org, linux-mm@kvack.org,
	Jeff Moyer &lt;jmoyer@redhat.com&gt;, linux-fsdevel@vger.kernel.org,
	Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;, akpm@linux-foundation.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Date: Tue, 31 Oct 2017 16:22:02 -0700
Message-ID: &lt;150949212239.24061.11111318131160225304.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
In-Reply-To: &lt;150949209290.24061.6283157778959640151.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
References: &lt;150949209290.24061.6283157778959640151.stgit@dwillia2-desk3.amr.corp.intel.com&gt;
User-Agent: StGit/0.17.1-9-g687f
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=320">Dan Williams</a> - Oct. 31, 2017, 11:22 p.m.</div>
<pre class="content">
VM_MIXEDMAP is used by dax to direct mm paths like vm_normal_page() that
the memory page it is dealing with is not typical memory from the linear
map. The get_user_pages_fast() path, since it does not resolve the vma,
is already using {pte,pmd}_devmap() as a stand-in for VM_MIXEDMAP, so we
use that as a VM_MIXEDMAP replacement in some locations. In the cases
where there is no pte to consult we fallback to using vma_is_dax() to
detect the VM_MIXEDMAP special case.

Now that we have explicit driver pfn_t-flag opt-in/opt-out for
get_user_pages() support for DAX we can stop setting VM_MIXEDMAP.  This
also means we no longer need to worry about safely manipulating vm_flags
in a future where we support dynamically changing the dax mode of a
file.

Cc: Jan Kara &lt;jack@suse.cz&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Jeff Moyer &lt;jmoyer@redhat.com&gt;
Cc: Christoph Hellwig &lt;hch@lst.de&gt;
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
<span class="signed-off-by">Signed-off-by: Dan Williams &lt;dan.j.williams@intel.com&gt;</span>
---
 drivers/dax/device.c |    2 +-
 fs/ext2/file.c       |    1 -
 fs/ext4/file.c       |    2 +-
 fs/xfs/xfs_file.c    |    2 +-
 include/linux/mm.h   |    1 +
 include/linux/vma.h  |   33 +++++++++++++++++++++++++++++++++
 mm/huge_memory.c     |    8 ++++----
 mm/ksm.c             |    3 +++
 mm/madvise.c         |    2 +-
 mm/memory.c          |    8 ++++++--
 mm/migrate.c         |    3 ++-
 mm/mlock.c           |    5 +++--
 mm/mmap.c            |    8 ++++----
 13 files changed, 60 insertions(+), 18 deletions(-)
 create mode 100644 include/linux/vma.h
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/dax/device.c b/drivers/dax/device.c</span>
<span class="p_header">index e9f3b3e4bbf4..ed79d006026e 100644</span>
<span class="p_header">--- a/drivers/dax/device.c</span>
<span class="p_header">+++ b/drivers/dax/device.c</span>
<span class="p_chunk">@@ -450,7 +450,7 @@</span> <span class="p_context"> static int dax_mmap(struct file *filp, struct vm_area_struct *vma)</span>
 		return rc;
 
 	vma-&gt;vm_ops = &amp;dax_vm_ops;
<span class="p_del">-	vma-&gt;vm_flags |= VM_MIXEDMAP | VM_HUGEPAGE;</span>
<span class="p_add">+	vma-&gt;vm_flags |= VM_HUGEPAGE;</span>
 	return 0;
 }
 
<span class="p_header">diff --git a/fs/ext2/file.c b/fs/ext2/file.c</span>
<span class="p_header">index ff3a3636a5ca..70657e8550ed 100644</span>
<span class="p_header">--- a/fs/ext2/file.c</span>
<span class="p_header">+++ b/fs/ext2/file.c</span>
<span class="p_chunk">@@ -125,7 +125,6 @@</span> <span class="p_context"> static int ext2_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
 
 	file_accessed(file);
 	vma-&gt;vm_ops = &amp;ext2_dax_vm_ops;
<span class="p_del">-	vma-&gt;vm_flags |= VM_MIXEDMAP;</span>
 	return 0;
 }
 #else
<span class="p_header">diff --git a/fs/ext4/file.c b/fs/ext4/file.c</span>
<span class="p_header">index b1da660ac3bc..0cc9d205bd96 100644</span>
<span class="p_header">--- a/fs/ext4/file.c</span>
<span class="p_header">+++ b/fs/ext4/file.c</span>
<span class="p_chunk">@@ -352,7 +352,7 @@</span> <span class="p_context"> static int ext4_file_mmap(struct file *file, struct vm_area_struct *vma)</span>
 	file_accessed(file);
 	if (IS_DAX(file_inode(file))) {
 		vma-&gt;vm_ops = &amp;ext4_dax_vm_ops;
<span class="p_del">-		vma-&gt;vm_flags |= VM_MIXEDMAP | VM_HUGEPAGE;</span>
<span class="p_add">+		vma-&gt;vm_flags |= VM_HUGEPAGE;</span>
 	} else {
 		vma-&gt;vm_ops = &amp;ext4_file_vm_ops;
 	}
<span class="p_header">diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c</span>
<span class="p_header">index 309e26c9dddb..c419c6fdb769 100644</span>
<span class="p_header">--- a/fs/xfs/xfs_file.c</span>
<span class="p_header">+++ b/fs/xfs/xfs_file.c</span>
<span class="p_chunk">@@ -1134,7 +1134,7 @@</span> <span class="p_context"> xfs_file_mmap(</span>
 	file_accessed(filp);
 	vma-&gt;vm_ops = &amp;xfs_file_vm_ops;
 	if (IS_DAX(file_inode(filp)))
<span class="p_del">-		vma-&gt;vm_flags |= VM_MIXEDMAP | VM_HUGEPAGE;</span>
<span class="p_add">+		vma-&gt;vm_flags |= VM_HUGEPAGE;</span>
 	return 0;
 }
 
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 065d99deb847..8c1e3ac77285 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -2338,6 +2338,7 @@</span> <span class="p_context"> int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,</span>
 			pfn_t pfn);
 int vm_insert_mixed_mkwrite(struct vm_area_struct *vma, unsigned long addr,
 			pfn_t pfn);
<span class="p_add">+bool vm_mixed_ok(struct vm_area_struct *vma, pfn_t pfn);</span>
 int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);
 
 
<span class="p_header">diff --git a/include/linux/vma.h b/include/linux/vma.h</span>
new file mode 100644
<span class="p_header">index 000000000000..135ad5262cd1</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/include/linux/vma.h</span>
<span class="p_chunk">@@ -0,0 +1,33 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Copyright(c) 2017 Intel Corporation. All rights reserved.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of version 2 of the GNU General Public License as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is distributed in the hope that it will be useful, but</span>
<span class="p_add">+ * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<span class="p_add">+ * General Public License for more details.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifndef __VMA_H__</span>
<span class="p_add">+#define __VMA_H__</span>
<span class="p_add">+#include &lt;linux/fs.h&gt;</span>
<span class="p_add">+#include &lt;linux/mm.h&gt;</span>
<span class="p_add">+#include &lt;linux/mm_types.h&gt;</span>
<span class="p_add">+#include &lt;linux/hugetlb_inline.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * There are several vma types that have special handling in the</span>
<span class="p_add">+ * get_user_pages() path and other core mm paths that must not assume</span>
<span class="p_add">+ * normal pages. vma_is_special() consolidates checks for VM_SPECIAL,</span>
<span class="p_add">+ * hugetlb and dax vmas, but note that there are &#39;special&#39; vmas and</span>
<span class="p_add">+ * special circumstances beyond these types. In other words this helper</span>
<span class="p_add">+ * is not exhaustive.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline bool vma_is_special(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return vma &amp;&amp; (is_vm_hugetlb_page(vma) || (vma-&gt;vm_flags &amp; VM_SPECIAL)</span>
<span class="p_add">+			|| vma_is_dax(vma));</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* __VMA_H__ */</span>
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index 269b5df58543..3cabd682da1c 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -765,11 +765,11 @@</span> <span class="p_context"> int vmf_insert_pfn_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
 	 * but we need to be consistent with PTEs and architectures that
 	 * can&#39;t support a &#39;special&#39; bit.
 	 */
<span class="p_del">-	BUG_ON(!(vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP)));</span>
<span class="p_add">+	BUG_ON(!((vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP))</span>
<span class="p_add">+				|| vm_mixed_ok(vma, pfn)));</span>
 	BUG_ON((vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP)) ==
 						(VM_PFNMAP|VM_MIXEDMAP));
 	BUG_ON((vma-&gt;vm_flags &amp; VM_PFNMAP) &amp;&amp; is_cow_mapping(vma-&gt;vm_flags));
<span class="p_del">-	BUG_ON(!pfn_t_devmap(pfn));</span>
 
 	if (addr &lt; vma-&gt;vm_start || addr &gt;= vma-&gt;vm_end)
 		return VM_FAULT_SIGBUS;
<span class="p_chunk">@@ -824,11 +824,11 @@</span> <span class="p_context"> int vmf_insert_pfn_pud(struct vm_area_struct *vma, unsigned long addr,</span>
 	 * but we need to be consistent with PTEs and architectures that
 	 * can&#39;t support a &#39;special&#39; bit.
 	 */
<span class="p_del">-	BUG_ON(!(vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP)));</span>
<span class="p_add">+	BUG_ON(!((vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP))</span>
<span class="p_add">+				|| vm_mixed_ok(vma, pfn)));</span>
 	BUG_ON((vma-&gt;vm_flags &amp; (VM_PFNMAP|VM_MIXEDMAP)) ==
 						(VM_PFNMAP|VM_MIXEDMAP));
 	BUG_ON((vma-&gt;vm_flags &amp; VM_PFNMAP) &amp;&amp; is_cow_mapping(vma-&gt;vm_flags));
<span class="p_del">-	BUG_ON(!pfn_t_devmap(pfn));</span>
 
 	if (addr &lt; vma-&gt;vm_start || addr &gt;= vma-&gt;vm_end)
 		return VM_FAULT_SIGBUS;
<span class="p_header">diff --git a/mm/ksm.c b/mm/ksm.c</span>
<span class="p_header">index 6cb60f46cce5..72f196a36503 100644</span>
<span class="p_header">--- a/mm/ksm.c</span>
<span class="p_header">+++ b/mm/ksm.c</span>
<span class="p_chunk">@@ -2361,6 +2361,9 @@</span> <span class="p_context"> int ksm_madvise(struct vm_area_struct *vma, unsigned long start,</span>
 				 VM_HUGETLB | VM_MIXEDMAP))
 			return 0;		/* just ignore the advice */
 
<span class="p_add">+		if (vma_is_dax(vma))</span>
<span class="p_add">+			return 0;</span>
<span class="p_add">+</span>
 #ifdef VM_SAO
 		if (*vm_flags &amp; VM_SAO)
 			return 0;
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 25bade36e9ca..50513a7a11f6 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -95,7 +95,7 @@</span> <span class="p_context"> static long madvise_behavior(struct vm_area_struct *vma,</span>
 		new_flags |= VM_DONTDUMP;
 		break;
 	case MADV_DODUMP:
<span class="p_del">-		if (new_flags &amp; VM_SPECIAL) {</span>
<span class="p_add">+		if (vma_is_dax(vma) || (new_flags &amp; VM_SPECIAL)) {</span>
 			error = -EINVAL;
 			goto out;
 		}
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index e764dc5d8a87..150c9194db27 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -830,6 +830,8 @@</span> <span class="p_context"> struct page *_vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
 			return vma-&gt;vm_ops-&gt;find_special_page(vma, addr);
 		if (vma-&gt;vm_flags &amp; (VM_PFNMAP | VM_MIXEDMAP))
 			return NULL;
<span class="p_add">+		if (pte_devmap(pte))</span>
<span class="p_add">+			return NULL;</span>
 		if (is_zero_pfn(pfn))
 			return NULL;
 
<span class="p_chunk">@@ -917,6 +919,8 @@</span> <span class="p_context"> struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,</span>
 		}
 	}
 
<span class="p_add">+	if (pmd_devmap(pmd))</span>
<span class="p_add">+		return NULL;</span>
 	if (is_zero_pfn(pfn))
 		return NULL;
 	if (unlikely(pfn &gt; highest_memmap_pfn))
<span class="p_chunk">@@ -1227,7 +1231,7 @@</span> <span class="p_context"> int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 	 * efficient than faulting.
 	 */
 	if (!(vma-&gt;vm_flags &amp; (VM_HUGETLB | VM_PFNMAP | VM_MIXEDMAP)) &amp;&amp;
<span class="p_del">-			!vma-&gt;anon_vma)</span>
<span class="p_add">+			!vma-&gt;anon_vma &amp;&amp; !vma_is_dax(vma))</span>
 		return 0;
 
 	if (is_vm_hugetlb_page(vma))
<span class="p_chunk">@@ -1896,7 +1900,7 @@</span> <span class="p_context"> int vm_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,</span>
 }
 EXPORT_SYMBOL(vm_insert_pfn_prot);
 
<span class="p_del">-static bool vm_mixed_ok(struct vm_area_struct *vma, pfn_t pfn)</span>
<span class="p_add">+bool vm_mixed_ok(struct vm_area_struct *vma, pfn_t pfn)</span>
 {
 	/* these checks mirror the abort conditions in vm_normal_page */
 	if (vma-&gt;vm_flags &amp; VM_MIXEDMAP)
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 6954c1435833..13f8748e7cba 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -45,6 +45,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/page_owner.h&gt;
 #include &lt;linux/sched/mm.h&gt;
 #include &lt;linux/ptrace.h&gt;
<span class="p_add">+#include &lt;linux/vma.h&gt;</span>
 
 #include &lt;asm/tlbflush.h&gt;
 
<span class="p_chunk">@@ -2927,7 +2928,7 @@</span> <span class="p_context"> int migrate_vma(const struct migrate_vma_ops *ops,</span>
 	/* Sanity check the arguments */
 	start &amp;= PAGE_MASK;
 	end &amp;= PAGE_MASK;
<span class="p_del">-	if (!vma || is_vm_hugetlb_page(vma) || (vma-&gt;vm_flags &amp; VM_SPECIAL))</span>
<span class="p_add">+	if (!vma || vma_is_special(vma))</span>
 		return -EINVAL;
 	if (start &lt; vma-&gt;vm_start || start &gt;= vma-&gt;vm_end)
 		return -EINVAL;
<span class="p_header">diff --git a/mm/mlock.c b/mm/mlock.c</span>
<span class="p_header">index dfc6f1912176..4e20915ddfef 100644</span>
<span class="p_header">--- a/mm/mlock.c</span>
<span class="p_header">+++ b/mm/mlock.c</span>
<span class="p_chunk">@@ -22,6 +22,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb.h&gt;
 #include &lt;linux/memcontrol.h&gt;
 #include &lt;linux/mm_inline.h&gt;
<span class="p_add">+#include &lt;linux/vma.h&gt;</span>
 
 #include &quot;internal.h&quot;
 
<span class="p_chunk">@@ -519,8 +520,8 @@</span> <span class="p_context"> static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,</span>
 	int lock = !!(newflags &amp; VM_LOCKED);
 	vm_flags_t old_flags = vma-&gt;vm_flags;
 
<span class="p_del">-	if (newflags == vma-&gt;vm_flags || (vma-&gt;vm_flags &amp; VM_SPECIAL) ||</span>
<span class="p_del">-	    is_vm_hugetlb_page(vma) || vma == get_gate_vma(current-&gt;mm))</span>
<span class="p_add">+	if (newflags == vma-&gt;vm_flags || vma_is_special(vma)</span>
<span class="p_add">+			|| vma == get_gate_vma(current-&gt;mm))</span>
 		/* don&#39;t set VM_LOCKED or VM_LOCKONFAULT and don&#39;t count */
 		goto out;
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 680506faceae..c28996f74320 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -45,6 +45,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/moduleparam.h&gt;
 #include &lt;linux/pkeys.h&gt;
 #include &lt;linux/oom.h&gt;
<span class="p_add">+#include &lt;linux/vma.h&gt;</span>
 
 #include &lt;linux/uaccess.h&gt;
 #include &lt;asm/cacheflush.h&gt;
<span class="p_chunk">@@ -1722,11 +1723,10 @@</span> <span class="p_context"> unsigned long mmap_region(struct file *file, unsigned long addr,</span>
 
 	vm_stat_account(mm, vm_flags, len &gt;&gt; PAGE_SHIFT);
 	if (vm_flags &amp; VM_LOCKED) {
<span class="p_del">-		if (!((vm_flags &amp; VM_SPECIAL) || is_vm_hugetlb_page(vma) ||</span>
<span class="p_del">-					vma == get_gate_vma(current-&gt;mm)))</span>
<span class="p_del">-			mm-&gt;locked_vm += (len &gt;&gt; PAGE_SHIFT);</span>
<span class="p_del">-		else</span>
<span class="p_add">+		if (vma_is_special(vma) || vma == get_gate_vma(current-&gt;mm))</span>
 			vma-&gt;vm_flags &amp;= VM_LOCKED_CLEAR_MASK;
<span class="p_add">+		else</span>
<span class="p_add">+			mm-&gt;locked_vm += (len &gt;&gt; PAGE_SHIFT);</span>
 	}
 
 	if (file)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



