
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[lkp-robot,mm] 7674270022: will-it-scale.per_process_ops -19.3% regression - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [lkp-robot,mm] 7674270022: will-it-scale.per_process_ops -19.3% regression</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 8, 2017, 8:08 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170808080821.GA31730@bbox&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9886783/mbox/"
   >mbox</a>
|
   <a href="/patch/9886783/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9886783/">/patch/9886783/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6454260352 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 08:08:30 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 558E1287C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 08:08:30 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4A1E1287C8; Tue,  8 Aug 2017 08:08:30 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id B3F81287C0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  8 Aug 2017 08:08:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752094AbdHHII0 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 8 Aug 2017 04:08:26 -0400
Received: from LGEAMRELO11.lge.com ([156.147.23.51]:47166 &quot;EHLO
	lgeamrelo11.lge.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751922AbdHHIIY (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 8 Aug 2017 04:08:24 -0400
Received: from unknown (HELO lgemrelse6q.lge.com) (156.147.1.121)
	by 156.147.23.51 with ESMTP; 8 Aug 2017 17:08:22 +0900
X-Original-SENDERIP: 156.147.1.121
X-Original-MAILFROM: minchan@kernel.org
Received: from unknown (HELO bbox) (10.177.220.163)
	by 156.147.1.121 with ESMTP; 8 Aug 2017 17:08:22 +0900
X-Original-SENDERIP: 10.177.220.163
X-Original-MAILFROM: minchan@kernel.org
Date: Tue, 8 Aug 2017 17:08:21 +0900
From: Minchan Kim &lt;minchan@kernel.org&gt;
To: Nadav Amit &lt;nadav.amit@gmail.com&gt;
Cc: kernel test robot &lt;xiaolong.ye@intel.com&gt;,
	&quot;open list:MEMORY MANAGEMENT&quot; &lt;linux-mm@kvack.org&gt;,
	LKML &lt;linux-kernel@vger.kernel.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Russell King &lt;linux@armlinux.org.uk&gt;,
	Tony Luck &lt;tony.luck@intel.com&gt;,
	Martin Schwidefsky &lt;schwidefsky@de.ibm.com&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Heiko Carstens &lt;heiko.carstens@de.ibm.com&gt;,
	Yoshinori Sato &lt;ysato@users.sourceforge.jp&gt;,
	Jeff Dike &lt;jdike@addtoit.com&gt;, linux-arch@vger.kernel.org, lkp@01.org
Subject: Re: [lkp-robot] [mm]  7674270022:  will-it-scale.per_process_ops
	-19.3% regression
Message-ID: &lt;20170808080821.GA31730@bbox&gt;
References: &lt;20170802000818.4760-7-namit@vmware.com&gt;
	&lt;20170808011923.GE25554@yexl-desktop&gt;
	&lt;20170808022830.GA28570@bbox&gt;
	&lt;93CA4B47-95C2-43A2-8E92-B142CAB1DAF7@gmail.com&gt;
	&lt;970B5DC5-BFC2-461E-AC46-F71B3691D301@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: &lt;970B5DC5-BFC2-461E-AC46-F71B3691D301@gmail.com&gt;
User-Agent: Mutt/1.5.24 (2015-08-30)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 8, 2017, 8:08 a.m.</div>
<pre class="content">
On Mon, Aug 07, 2017 at 10:51:00PM -0700, Nadav Amit wrote:
<span class="quote">&gt; Nadav Amit &lt;nadav.amit@gmail.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; Hi,</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; On Tue, Aug 08, 2017 at 09:19:23AM +0800, kernel test robot wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; Greeting,</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; FYI, we noticed a -19.3% regression of will-it-scale.per_process_ops due to commit:</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; commit: 76742700225cad9df49f05399381ac3f1ec3dc60 (&quot;mm: fix MADV_[FREE|DONTNEED] TLB flush miss problem&quot;)</span>
<span class="quote">&gt; &gt;&gt;&gt; url: https://github.com/0day-ci/linux/commits/Nadav-Amit/mm-migrate-prevent-racy-access-to-tlb_flush_pending/20170802-205715</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; in testcase: will-it-scale</span>
<span class="quote">&gt; &gt;&gt;&gt; on test machine: 88 threads Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz with 64G memory</span>
<span class="quote">&gt; &gt;&gt;&gt; with following parameters:</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; 	nr_task: 16</span>
<span class="quote">&gt; &gt;&gt;&gt; 	mode: process</span>
<span class="quote">&gt; &gt;&gt;&gt; 	test: brk1</span>
<span class="quote">&gt; &gt;&gt;&gt; 	cpufreq_governor: performance</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; test-description: Will It Scale takes a testcase and runs it from 1 through to n parallel copies to see if the testcase will scale. It builds both a process and threads based test in order to see any differences between the two.</span>
<span class="quote">&gt; &gt;&gt;&gt; test-url: https://github.com/antonblanchard/will-it-scale</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Thanks for the report.</span>
<span class="quote">&gt; &gt;&gt; Could you explain what kinds of workload you are testing?</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Does it calls frequently madvise(MADV_DONTNEED) in parallel on multiple</span>
<span class="quote">&gt; &gt;&gt; threads?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt; &gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt; &gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt; &gt; caused during do_munmap().</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt; &gt; to beat me to it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>

Oops, but with second looking, it seems it&#39;s not my fault. ;-)
https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2

Anyway, thanks for the pointing out.
xiaolong.ye, could you retest with this fix?

From 83012114c9cd9304f0d55d899bb4b9329d0e22ac Mon Sep 17 00:00:00 2001
<span class="from">From: Minchan Kim &lt;minchan@kernel.org&gt;</span>
Date: Tue, 8 Aug 2017 17:05:19 +0900
Subject: [PATCH] mm: decrease tlb flush pending count in tlb_finish_mmu

The tlb pending count increased by tlb_gather_mmu should be decreased
at tlb_finish_mmu. Otherwise, A lot of TLB happens which makes
performance regression.
<span class="signed-off-by">
Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
---
 mm/memory.c | 1 +
 1 file changed, 1 insertion(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=163341">Ye Xiaolong</a> - Aug. 9, 2017, 1:25 a.m.</div>
<pre class="content">
On 08/08, Minchan Kim wrote:
<span class="quote">&gt;On Mon, Aug 07, 2017 at 10:51:00PM -0700, Nadav Amit wrote:</span>
<span class="quote">&gt;&gt; Nadav Amit &lt;nadav.amit@gmail.com&gt; wrote:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Hi,</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; On Tue, Aug 08, 2017 at 09:19:23AM +0800, kernel test robot wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; Greeting,</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; FYI, we noticed a -19.3% regression of will-it-scale.per_process_ops due to commit:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; commit: 76742700225cad9df49f05399381ac3f1ec3dc60 (&quot;mm: fix MADV_[FREE|DONTNEED] TLB flush miss problem&quot;)</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; url: https://github.com/0day-ci/linux/commits/Nadav-Amit/mm-migrate-prevent-racy-access-to-tlb_flush_pending/20170802-205715</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; in testcase: will-it-scale</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; on test machine: 88 threads Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz with 64G memory</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; with following parameters:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	nr_task: 16</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	mode: process</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	test: brk1</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	cpufreq_governor: performance</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; test-description: Will It Scale takes a testcase and runs it from 1 through to n parallel copies to see if the testcase will scale. It builds both a process and threads based test in order to see any differences between the two.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; test-url: https://github.com/antonblanchard/will-it-scale</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Thanks for the report.</span>
<span class="quote">&gt;&gt; &gt;&gt; Could you explain what kinds of workload you are testing?</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Does it calls frequently madvise(MADV_DONTNEED) in parallel on multiple</span>
<span class="quote">&gt;&gt; &gt;&gt; threads?</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt;&gt; &gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt;&gt; &gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt;&gt; &gt; caused during do_munmap().</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt;&gt; &gt; to beat me to it.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt;&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Oops, but with second looking, it seems it&#39;s not my fault. ;-)</span>
<span class="quote">&gt;https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Anyway, thanks for the pointing out.</span>
<span class="quote">&gt;xiaolong.ye, could you retest with this fix?</span>

Sure, I&#39;ll provide the result later.

Thanks,
Xiaolong
<span class="quote">&gt;</span>
<span class="quote">&gt;From 83012114c9cd9304f0d55d899bb4b9329d0e22ac Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt;From: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt;Date: Tue, 8 Aug 2017 17:05:19 +0900</span>
<span class="quote">&gt;Subject: [PATCH] mm: decrease tlb flush pending count in tlb_finish_mmu</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;The tlb pending count increased by tlb_gather_mmu should be decreased</span>
<span class="quote">&gt;at tlb_finish_mmu. Otherwise, A lot of TLB happens which makes</span>
<span class="quote">&gt;performance regression.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt;---</span>
<span class="quote">&gt; mm/memory.c | 1 +</span>
<span class="quote">&gt; 1 file changed, 1 insertion(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt;index 34b1fcb829e4..ad2617552f55 100644</span>
<span class="quote">&gt;--- a/mm/memory.c</span>
<span class="quote">&gt;+++ b/mm/memory.c</span>
<span class="quote">&gt;@@ -423,6 +423,7 @@ void tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="quote">&gt; 	bool force = mm_tlb_flush_nested(tlb-&gt;mm);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	arch_tlb_finish_mmu(tlb, start, end, force);</span>
<span class="quote">&gt;+	dec_tlb_flush_pending(tlb-&gt;mm);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;-- </span>
<span class="quote">&gt;2.7.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=163341">Ye Xiaolong</a> - Aug. 9, 2017, 2:59 a.m.</div>
<pre class="content">
On 08/08, Minchan Kim wrote:
<span class="quote">&gt;On Mon, Aug 07, 2017 at 10:51:00PM -0700, Nadav Amit wrote:</span>
<span class="quote">&gt;&gt; Nadav Amit &lt;nadav.amit@gmail.com&gt; wrote:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Hi,</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; On Tue, Aug 08, 2017 at 09:19:23AM +0800, kernel test robot wrote:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; Greeting,</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; FYI, we noticed a -19.3% regression of will-it-scale.per_process_ops due to commit:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; commit: 76742700225cad9df49f05399381ac3f1ec3dc60 (&quot;mm: fix MADV_[FREE|DONTNEED] TLB flush miss problem&quot;)</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; url: https://github.com/0day-ci/linux/commits/Nadav-Amit/mm-migrate-prevent-racy-access-to-tlb_flush_pending/20170802-205715</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; in testcase: will-it-scale</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; on test machine: 88 threads Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz with 64G memory</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; with following parameters:</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	nr_task: 16</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	mode: process</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	test: brk1</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; 	cpufreq_governor: performance</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; test-description: Will It Scale takes a testcase and runs it from 1 through to n parallel copies to see if the testcase will scale. It builds both a process and threads based test in order to see any differences between the two.</span>
<span class="quote">&gt;&gt; &gt;&gt;&gt; test-url: https://github.com/antonblanchard/will-it-scale</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Thanks for the report.</span>
<span class="quote">&gt;&gt; &gt;&gt; Could you explain what kinds of workload you are testing?</span>
<span class="quote">&gt;&gt; &gt;&gt; </span>
<span class="quote">&gt;&gt; &gt;&gt; Does it calls frequently madvise(MADV_DONTNEED) in parallel on multiple</span>
<span class="quote">&gt;&gt; &gt;&gt; threads?</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt;&gt; &gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt;&gt; &gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt;&gt; &gt; caused during do_munmap().</span>
<span class="quote">&gt;&gt; &gt; </span>
<span class="quote">&gt;&gt; &gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt;&gt; &gt; to beat me to it.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt;&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Oops, but with second looking, it seems it&#39;s not my fault. ;-)</span>
<span class="quote">&gt;https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Anyway, thanks for the pointing out.</span>
<span class="quote">&gt;xiaolong.ye, could you retest with this fix?</span>
<span class="quote">&gt;</span>

I&#39;ve queued tests for 5 times and results show this patch (e8f682574e4 &quot;mm:
decrease tlb flush pending count in tlb_finish_mmu&quot;) does help recover the
performance back.

378005bdbac0a2ec  76742700225cad9df49f053993  e8f682574e45b6406dadfffeb4  
----------------  --------------------------  --------------------------  
         %stddev      change         %stddev      change         %stddev
             \          |                \          |                \  
   3405093             -19%    2747088              -2%    3348752        will-it-scale.per_process_ops
      1280 ±  3%        -2%       1257 ±  3%        -6%       1207        vmstat.system.cs
      2702 ± 18%        11%       3002 ± 19%        17%       3156 ± 18%  numa-vmstat.node0.nr_mapped
     10765 ± 18%        11%      11964 ± 19%        17%      12588 ± 18%  numa-meminfo.node0.Mapped
      0.00 ± 47%       -40%       0.00 ± 45%       -84%       0.00 ± 42%  mpstat.cpu.soft%

Thanks,
Xiaolong
<span class="quote">

&gt;From 83012114c9cd9304f0d55d899bb4b9329d0e22ac Mon Sep 17 00:00:00 2001</span>
<span class="quote">&gt;From: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt;Date: Tue, 8 Aug 2017 17:05:19 +0900</span>
<span class="quote">&gt;Subject: [PATCH] mm: decrease tlb flush pending count in tlb_finish_mmu</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;The tlb pending count increased by tlb_gather_mmu should be decreased</span>
<span class="quote">&gt;at tlb_finish_mmu. Otherwise, A lot of TLB happens which makes</span>
<span class="quote">&gt;performance regression.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Signed-off-by: Minchan Kim &lt;minchan@kernel.org&gt;</span>
<span class="quote">&gt;---</span>
<span class="quote">&gt; mm/memory.c | 1 +</span>
<span class="quote">&gt; 1 file changed, 1 insertion(+)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="quote">&gt;index 34b1fcb829e4..ad2617552f55 100644</span>
<span class="quote">&gt;--- a/mm/memory.c</span>
<span class="quote">&gt;+++ b/mm/memory.c</span>
<span class="quote">&gt;@@ -423,6 +423,7 @@ void tlb_finish_mmu(struct mmu_gather *tlb,</span>
<span class="quote">&gt; 	bool force = mm_tlb_flush_nested(tlb-&gt;mm);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	arch_tlb_finish_mmu(tlb, start, end, force);</span>
<span class="quote">&gt;+	dec_tlb_flush_pending(tlb-&gt;mm);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;-- </span>
<span class="quote">&gt;2.7.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 10, 2017, 4:13 a.m.</div>
<pre class="content">
On Wed, Aug 09, 2017 at 10:59:02AM +0800, Ye Xiaolong wrote:
<span class="quote">&gt; On 08/08, Minchan Kim wrote:</span>
<span class="quote">&gt; &gt;On Mon, Aug 07, 2017 at 10:51:00PM -0700, Nadav Amit wrote:</span>
<span class="quote">&gt; &gt;&gt; Nadav Amit &lt;nadav.amit@gmail.com&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt; Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; Hi,</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; On Tue, Aug 08, 2017 at 09:19:23AM +0800, kernel test robot wrote:</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; Greeting,</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; FYI, we noticed a -19.3% regression of will-it-scale.per_process_ops due to commit:</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; commit: 76742700225cad9df49f05399381ac3f1ec3dc60 (&quot;mm: fix MADV_[FREE|DONTNEED] TLB flush miss problem&quot;)</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; url: https://github.com/0day-ci/linux/commits/Nadav-Amit/mm-migrate-prevent-racy-access-to-tlb_flush_pending/20170802-205715</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; in testcase: will-it-scale</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; on test machine: 88 threads Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz with 64G memory</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; with following parameters:</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; 	nr_task: 16</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; 	mode: process</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; 	test: brk1</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; 	cpufreq_governor: performance</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; test-description: Will It Scale takes a testcase and runs it from 1 through to n parallel copies to see if the testcase will scale. It builds both a process and threads based test in order to see any differences between the two.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt;&gt; test-url: https://github.com/antonblanchard/will-it-scale</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; Thanks for the report.</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; Could you explain what kinds of workload you are testing?</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; Does it calls frequently madvise(MADV_DONTNEED) in parallel on multiple</span>
<span class="quote">&gt; &gt;&gt; &gt;&gt; threads?</span>
<span class="quote">&gt; &gt;&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; &gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt; &gt;&gt; &gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt; &gt;&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; &gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt; &gt;&gt; &gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt; &gt;&gt; &gt; caused during do_munmap().</span>
<span class="quote">&gt; &gt;&gt; &gt; </span>
<span class="quote">&gt; &gt;&gt; &gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt; &gt;&gt; &gt; to beat me to it.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt; &gt;&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Oops, but with second looking, it seems it&#39;s not my fault. ;-)</span>
<span class="quote">&gt; &gt;https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;Anyway, thanks for the pointing out.</span>
<span class="quote">&gt; &gt;xiaolong.ye, could you retest with this fix?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I&#39;ve queued tests for 5 times and results show this patch (e8f682574e4 &quot;mm:</span>
<span class="quote">&gt; decrease tlb flush pending count in tlb_finish_mmu&quot;) does help recover the</span>
<span class="quote">&gt; performance back.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 378005bdbac0a2ec  76742700225cad9df49f053993  e8f682574e45b6406dadfffeb4  </span>
<span class="quote">&gt; ----------------  --------------------------  --------------------------  </span>
<span class="quote">&gt;          %stddev      change         %stddev      change         %stddev</span>
<span class="quote">&gt;              \          |                \          |                \  </span>
<span class="quote">&gt;    3405093             -19%    2747088              -2%    3348752        will-it-scale.per_process_ops</span>
<span class="quote">&gt;       1280 ±  3%        -2%       1257 ±  3%        -6%       1207        vmstat.system.cs</span>
<span class="quote">&gt;       2702 ± 18%        11%       3002 ± 19%        17%       3156 ± 18%  numa-vmstat.node0.nr_mapped</span>
<span class="quote">&gt;      10765 ± 18%        11%      11964 ± 19%        17%      12588 ± 18%  numa-meminfo.node0.Mapped</span>
<span class="quote">&gt;       0.00 ± 47%       -40%       0.00 ± 45%       -84%       0.00 ± 42%  mpstat.cpu.soft%</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Xiaolong</span>

Thanks for the testing!
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=55071">Nadav Amit</a> - Aug. 10, 2017, 4:14 a.m.</div>
<pre class="content">
Minchan Kim &lt;minchan@kernel.org&gt; wrote:
<span class="quote">
&gt; On Wed, Aug 09, 2017 at 10:59:02AM +0800, Ye Xiaolong wrote:</span>
<span class="quote">&gt;&gt; On 08/08, Minchan Kim wrote:</span>
<span class="quote">&gt;&gt;&gt; On Mon, Aug 07, 2017 at 10:51:00PM -0700, Nadav Amit wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Nadav Amit &lt;nadav.amit@gmail.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Minchan Kim &lt;minchan@kernel.org&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Hi,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; On Tue, Aug 08, 2017 at 09:19:23AM +0800, kernel test robot wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; Greeting,</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; FYI, we noticed a -19.3% regression of will-it-scale.per_process_ops due to commit:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit: 76742700225cad9df49f05399381ac3f1ec3dc60 (&quot;mm: fix MADV_[FREE|DONTNEED] TLB flush miss problem&quot;)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; url: https://github.com/0day-ci/linux/commits/Nadav-Amit/mm-migrate-prevent-racy-access-to-tlb_flush_pending/20170802-205715</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; in testcase: will-it-scale</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; on test machine: 88 threads Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz with 64G memory</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; with following parameters:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	nr_task: 16</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	mode: process</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	test: brk1</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 	cpufreq_governor: performance</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; test-description: Will It Scale takes a testcase and runs it from 1 through to n parallel copies to see if the testcase will scale. It builds both a process and threads based test in order to see any differences between the two.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt;&gt; test-url: https://github.com/antonblanchard/will-it-scale</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Thanks for the report.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Could you explain what kinds of workload you are testing?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; Does it calls frequently madvise(MADV_DONTNEED) in parallel on multiple</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;&gt; threads?</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; caused during do_munmap().</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; to beat me to it.</span>
<span class="quote">&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt;&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt;&gt;&gt;&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; Oops, but with second looking, it seems it&#39;s not my fault. ;-)</span>
<span class="quote">&gt;&gt;&gt; https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2</span>
<span class="quote">&gt;&gt;&gt; </span>
<span class="quote">&gt;&gt;&gt; Anyway, thanks for the pointing out.</span>
<span class="quote">&gt;&gt;&gt; xiaolong.ye, could you retest with this fix?</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; I&#39;ve queued tests for 5 times and results show this patch (e8f682574e4 &quot;mm:</span>
<span class="quote">&gt;&gt; decrease tlb flush pending count in tlb_finish_mmu&quot;) does help recover the</span>
<span class="quote">&gt;&gt; performance back.</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; 378005bdbac0a2ec  76742700225cad9df49f053993  e8f682574e45b6406dadfffeb4  </span>
<span class="quote">&gt;&gt; ----------------  --------------------------  --------------------------  </span>
<span class="quote">&gt;&gt;         %stddev      change         %stddev      change         %stddev</span>
<span class="quote">&gt;&gt;             \          |                \          |                \  </span>
<span class="quote">&gt;&gt;   3405093             -19%    2747088              -2%    3348752        will-it-scale.per_process_ops</span>
<span class="quote">&gt;&gt;      1280 ±  3%        -2%       1257 ±  3%        -6%       1207        vmstat.system.cs</span>
<span class="quote">&gt;&gt;      2702 ± 18%        11%       3002 ± 19%        17%       3156 ± 18%  numa-vmstat.node0.nr_mapped</span>
<span class="quote">&gt;&gt;     10765 ± 18%        11%      11964 ± 19%        17%      12588 ± 18%  numa-meminfo.node0.Mapped</span>
<span class="quote">&gt;&gt;      0.00 ± 47%       -40%       0.00 ± 45%       -84%       0.00 ± 42%  mpstat.cpu.soft%</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt; Xiaolong</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for the testing!</span>

Sorry again for screwing your patch, Minchan.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36811">Minchan Kim</a> - Aug. 10, 2017, 4:20 a.m.</div>
<pre class="content">
On Wed, Aug 09, 2017 at 09:14:50PM -0700, Nadav Amit wrote:

Hi Nadav,

&lt; snip &gt;
<span class="quote">
&gt; &gt;&gt;&gt;&gt;&gt; According to the description it is &quot;testcase:brk increase/decrease of one</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; page”. According to the mode it spawns multiple processes, not threads.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; Since a single page is unmapped each time, and the iTLB-loads increase</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; dramatically, I would suspect that for some reason a full TLB flush is</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; caused during do_munmap().</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; If I find some free time, I’ll try to profile the workload - but feel free</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; to beat me to it.</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; The root-cause appears to be that tlb_finish_mmu() does not call</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; dec_tlb_flush_pending() - as it should. Any chance you can take care of it?</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; Oops, but with second looking, it seems it&#39;s not my fault. ;-)</span>
<span class="quote">&gt; &gt;&gt;&gt; https://marc.info/?l=linux-mm&amp;m=150156699114088&amp;w=2</span>
<span class="quote">&gt; &gt;&gt;&gt; </span>
<span class="quote">&gt; &gt;&gt;&gt; Anyway, thanks for the pointing out.</span>
<span class="quote">&gt; &gt;&gt;&gt; xiaolong.ye, could you retest with this fix?</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; I&#39;ve queued tests for 5 times and results show this patch (e8f682574e4 &quot;mm:</span>
<span class="quote">&gt; &gt;&gt; decrease tlb flush pending count in tlb_finish_mmu&quot;) does help recover the</span>
<span class="quote">&gt; &gt;&gt; performance back.</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; 378005bdbac0a2ec  76742700225cad9df49f053993  e8f682574e45b6406dadfffeb4  </span>
<span class="quote">&gt; &gt;&gt; ----------------  --------------------------  --------------------------  </span>
<span class="quote">&gt; &gt;&gt;         %stddev      change         %stddev      change         %stddev</span>
<span class="quote">&gt; &gt;&gt;             \          |                \          |                \  </span>
<span class="quote">&gt; &gt;&gt;   3405093             -19%    2747088              -2%    3348752        will-it-scale.per_process_ops</span>
<span class="quote">&gt; &gt;&gt;      1280 ±  3%        -2%       1257 ±  3%        -6%       1207        vmstat.system.cs</span>
<span class="quote">&gt; &gt;&gt;      2702 ± 18%        11%       3002 ± 19%        17%       3156 ± 18%  numa-vmstat.node0.nr_mapped</span>
<span class="quote">&gt; &gt;&gt;     10765 ± 18%        11%      11964 ± 19%        17%      12588 ± 18%  numa-meminfo.node0.Mapped</span>
<span class="quote">&gt; &gt;&gt;      0.00 ± 47%       -40%       0.00 ± 45%       -84%       0.00 ± 42%  mpstat.cpu.soft%</span>
<span class="quote">&gt; &gt;&gt; </span>
<span class="quote">&gt; &gt;&gt; Thanks,</span>
<span class="quote">&gt; &gt;&gt; Xiaolong</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Thanks for the testing!</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry again for screwing your patch, Minchan.</span>

Never mind! It always happens. :)
In this chance, I really appreciates your insight/testing/cooperation!
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 34b1fcb829e4..ad2617552f55 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -423,6 +423,7 @@</span> <span class="p_context"> void tlb_finish_mmu(struct mmu_gather *tlb,</span>
 	bool force = mm_tlb_flush_nested(tlb-&gt;mm);
 
 	arch_tlb_finish_mmu(tlb, start, end, force);
<span class="p_add">+	dec_tlb_flush_pending(tlb-&gt;mm);</span>
 }
 
 /*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



