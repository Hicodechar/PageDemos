
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,5/6] arm64: Add helper for extracting ASIDBits - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,5/6] arm64: Add helper for extracting ASIDBits</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=114661">Suzuki K. Poulose</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 1, 2015, 3:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1448982731-17182-6-git-send-email-suzuki.poulose@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7737921/mbox/"
   >mbox</a>
|
   <a href="/patch/7737921/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7737921/">/patch/7737921/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 6BF51BEEE5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Dec 2015 15:12:50 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 7F1552067A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Dec 2015 15:12:49 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 8810C20684
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  1 Dec 2015 15:12:48 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756638AbbLAPMq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 1 Dec 2015 10:12:46 -0500
Received: from eu-smtp-delivery-143.mimecast.com ([207.82.80.143]:55775 &quot;EHLO
	eu-smtp-delivery-143.mimecast.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1756560AbbLAPMn (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 1 Dec 2015 10:12:43 -0500
Received: from cam-owa2.Emea.Arm.com (fw-tnat.cambridge.arm.com
	[217.140.96.140]) by eu-smtp-1.mimecast.com with ESMTP id
	uk-mta-10-JA157YELRXahaB1Zi_7gSQ-9; Tue, 01 Dec 2015 15:12:41 +0000
Received: from e106634-lin.cambridge.arm.com ([10.1.2.79]) by
	cam-owa2.Emea.Arm.com with Microsoft SMTPSVC(6.0.3790.3959); 
	Tue, 1 Dec 2015 15:12:37 +0000
From: &quot;Suzuki K. Poulose&quot; &lt;suzuki.poulose@arm.com&gt;
To: linux-arm-kernel@lists.infradead.org
Cc: marc.zyngier@arm.com, linux-kernel@vger.kernel.org,
	mark.rutland@arm.com, will.deacon@arm.com, catalin.marinas@arm.com,
	&quot;Suzuki K. Poulose&quot; &lt;suzuki.poulose@arm.com&gt;
Subject: [PATCH v2 5/6] arm64: Add helper for extracting ASIDBits
Date: Tue,  1 Dec 2015 15:12:10 +0000
Message-Id: &lt;1448982731-17182-6-git-send-email-suzuki.poulose@arm.com&gt;
X-Mailer: git-send-email 1.7.9.5
In-Reply-To: &lt;1448982731-17182-1-git-send-email-suzuki.poulose@arm.com&gt;
References: &lt;1448982731-17182-1-git-send-email-suzuki.poulose@arm.com&gt;
X-OriginalArrivalTime: 01 Dec 2015 15:12:37.0474 (UTC)
	FILETIME=[B6B17420:01D12C4A]
X-MC-Unique: JA157YELRXahaB1Zi_7gSQ-9
Content-Type: text/plain; charset=WINDOWS-1252
Content-Transfer-Encoding: quoted-printable
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=114661">Suzuki K. Poulose</a> - Dec. 1, 2015, 3:12 p.m.</div>
<pre class="content">
Add a helper to extract ASIDBits on the current cpu

Cc: Will Deacon &lt;will.deacon@arm.com&gt;
Cc: Mark Rutland &lt;mark.rutland@arm.com&gt;
Cc: Catalin Marinas &lt;catalin.marinas@arm.com&gt;
<span class="signed-off-by">Signed-off-by: Suzuki K. Poulose &lt;suzuki.poulose@arm.com&gt;</span>
---
 arch/arm64/mm/context.c |   36 +++++++++++++++++++++++-------------
 1 file changed, 23 insertions(+), 13 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/mm/context.c b/arch/arm64/mm/context.c</span>
<span class="p_header">index e87f53f..643bf4b 100644</span>
<span class="p_header">--- a/arch/arm64/mm/context.c</span>
<span class="p_header">+++ b/arch/arm64/mm/context.c</span>
<span class="p_chunk">@@ -40,6 +40,28 @@</span> <span class="p_context"> static cpumask_t tlb_flush_pending;</span>
 #define ASID_FIRST_VERSION	(1UL &lt;&lt; asid_bits)
 #define NUM_USER_ASIDS		ASID_FIRST_VERSION
 
<span class="p_add">+/* Get the ASIDBits supported by the current CPU */</span>
<span class="p_add">+static u32 get_cpu_asid_bits(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 asid;</span>
<span class="p_add">+	int fld = cpuid_feature_extract_field(read_cpuid(ID_AA64MMFR0_EL1),</span>
<span class="p_add">+						ID_AA64MMFR0_ASID_SHIFT);</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (fld) {</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		pr_warn(&quot;CPU%d: Unknown ASID size (%d); assuming 8-bit\n&quot;,</span>
<span class="p_add">+					smp_processor_id(),  fld);</span>
<span class="p_add">+		/* Fallthrough */</span>
<span class="p_add">+	case 0:</span>
<span class="p_add">+		asid = 8;</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case 2:</span>
<span class="p_add">+		asid = 16;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return asid;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void flush_context(unsigned int cpu)
 {
 	int i;
<span class="p_chunk">@@ -187,19 +209,7 @@</span> <span class="p_context"> switch_mm_fastpath:</span>
 
 static int asids_init(void)
 {
<span class="p_del">-	int fld = cpuid_feature_extract_field(read_cpuid(ID_AA64MMFR0_EL1), 4);</span>
<span class="p_del">-</span>
<span class="p_del">-	switch (fld) {</span>
<span class="p_del">-	default:</span>
<span class="p_del">-		pr_warn(&quot;Unknown ASID size (%d); assuming 8-bit\n&quot;, fld);</span>
<span class="p_del">-		/* Fallthrough */</span>
<span class="p_del">-	case 0:</span>
<span class="p_del">-		asid_bits = 8;</span>
<span class="p_del">-		break;</span>
<span class="p_del">-	case 2:</span>
<span class="p_del">-		asid_bits = 16;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_add">+	asid_bits = get_cpu_asid_bits();</span>
 	/* If we end up with more CPUs than ASIDs, expect things to crash */
 	WARN_ON(NUM_USER_ASIDS &lt; num_possible_cpus());
 	atomic64_set(&amp;asid_generation, ASID_FIRST_VERSION);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



