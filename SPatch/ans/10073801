
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at runtime - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at runtime</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 24, 2017, 9:14 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171124091448.7649-43-mingo@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10073801/mbox/"
   >mbox</a>
|
   <a href="/patch/10073801/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10073801/">/patch/10073801/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7726460375 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 09:20:35 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 728AD2A373
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 09:20:35 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 67B0E2A380; Fri, 24 Nov 2017 09:20:35 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2FB392A37F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 24 Nov 2017 09:20:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753416AbdKXJRO (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 24 Nov 2017 04:17:14 -0500
Received: from mail-wr0-f196.google.com ([209.85.128.196]:46312 &quot;EHLO
	mail-wr0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753423AbdKXJQC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 24 Nov 2017 04:16:02 -0500
Received: by mail-wr0-f196.google.com with SMTP id r2so13296530wra.13
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 24 Nov 2017 01:16:01 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=Cs9cVKYSkX1qQaJZSXIWSN7S+rHz4fIys8PFrZE9OF8=;
	b=Jh2hb4tkt6cwGKu+DfEB3J43q48oBGSutPohwyVPQgbgU2BVbe5NT9u6h0x9G0rmp9
	0wDa1UQ+4vYYNigdNVk87DWhQdhVg6tD3qaHVy9LY133/lXOzS/SF4YYuwQB4VU6ef/1
	K5/ycmGElBhJpOgBKwgD1gZVUG+j6w0iCTLyPUQvv8lNHSZAtBQ7JOdAGdtKUqNcZZ8f
	xJqwEimt3g2xPXhT3zVWria7lWu6SrYseIwuyj+Iy60D2NzSCjwlibB4pKTbUCZuY0DZ
	C/rqSWVPjWoazxI+4bV1UhxFB9+idX7m94cYqy0LFQIHpMag4hMX8+XKRVcVyUgbCTLt
	t3Cw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=Cs9cVKYSkX1qQaJZSXIWSN7S+rHz4fIys8PFrZE9OF8=;
	b=G9kVs/Pm6bDlyi5Q/oBxMyU53G6WElM56m6cLzaJnFLWm/4A+ajadfWRwwwp2d/PPs
	8qBjQpRDFdOFrotgiJB3YFIODOtB9xQvH7nO+gFVl8EjZqUO8l7GeiQV6PpE9PN++u9R
	KmiA91dWtaABNS5tzFcsOcHb/JbeB0cCdbhXrr5fLzUim6RUXxKX+Grz2Os/ocjPJoAW
	nTyWGrJh1qoqVfIi6uah1UNcjuR50yfSv0Vh8WLTg84uM2EZHSHJslmK+KcnXRmx1qx8
	iig/S+nw/prGRPu4qb72zqQSLcrLb5iSRdi4VMHyX6vgurZiCVMCv1UgCKtn+0wzBdMw
	23AQ==
X-Gm-Message-State: AJaThX4Oby4QaCnIW1mUwTSLUsVrAzlOvCAyh6OsSFU3ILMdTxYekKPk
	h5QpsPEicQI1nP/NZiT5Uc8amw==
X-Google-Smtp-Source: AGs4zMbI7IOtyK1onHOp8Zh/Qd+KFVlJgkTunki0x7evvZwmxp6zfYAJWaeXHxnhArNnN2EsWQ8hvg==
X-Received: by 10.223.184.197 with SMTP id c5mr23062736wrg.18.1511514961058; 
	Fri, 24 Nov 2017 01:16:01 -0800 (PST)
Received: from localhost.localdomain (2E8B0CD5.catv.pool.telekom.hu.
	[46.139.12.213]) by smtp.gmail.com with ESMTPSA id
	k69sm8816168wmg.45.2017.11.24.01.16.00
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Fri, 24 Nov 2017 01:16:00 -0800 (PST)
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: [PATCH 42/43] x86/mm/kaiser: Allow KAISER to be enabled/disabled at
	runtime
Date: Fri, 24 Nov 2017 10:14:47 +0100
Message-Id: &lt;20171124091448.7649-43-mingo@kernel.org&gt;
X-Mailer: git-send-email 2.14.1
In-Reply-To: &lt;20171124091448.7649-1-mingo@kernel.org&gt;
References: &lt;20171124091448.7649-1-mingo@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Nov. 24, 2017, 9:14 a.m.</div>
<pre class="content">
<span class="from">From: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>

The KAISER CR3 switches are expensive for many reasons.  Not all systems
benefit from the protection provided by KAISER.  Some of them can not
pay the high performance cost.

This patch adds a debugfs file.  To disable KAISER, you do:

	echo 0 &gt; /sys/kernel/debug/x86/kaiser-enabled

and to re-enable it, you can:

	echo 1 &gt; /sys/kernel/debug/x86/kaiser-enabled

This is a *minimal* implementation.  There are certainly plenty of
optimizations that can be done on top of this by using ALTERNATIVES
among other things.

This does, however, completely remove all the KAISER-based CR3 writes.
This permits a paravirtualized system that can not tolerate CR3
writes to theoretically survive with CONFIG_KAISER=y, albeit with
/sys/kernel/debug/x86/kaiser-enabled=0.
<span class="signed-off-by">
Signed-off-by: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;</span>
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Daniel Gruss &lt;daniel.gruss@iaik.tugraz.at&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Kees Cook &lt;keescook@google.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Michael Schwarz &lt;michael.schwarz@iaik.tugraz.at&gt;
Cc: Moritz Lipp &lt;moritz.lipp@iaik.tugraz.at&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Richard Fellner &lt;richard.fellner@student.tugraz.at&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20171123003523.28FFBAB6@viggo.jf.intel.com
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/entry/calling.h | 12 +++++++++
 arch/x86/mm/kaiser.c     | 70 +++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 78 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h</span>
<span class="p_header">index 66af80514197..89ccf7ae0e23 100644</span>
<span class="p_header">--- a/arch/x86/entry/calling.h</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h</span>
<span class="p_chunk">@@ -209,19 +209,29 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 	orq     $(KAISER_SWITCH_MASK), \reg
 .endm
 
<span class="p_add">+.macro JUMP_IF_KAISER_OFF	label</span>
<span class="p_add">+	testq   $1, kaiser_asm_do_switch</span>
<span class="p_add">+	jz      \label</span>
<span class="p_add">+.endm</span>
<span class="p_add">+</span>
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_KERNEL_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SWITCH_TO_USER_CR3 scratch_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Lswitch_done_\@</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_USER_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_add">+.Lswitch_done_\@:</span>
 .endm
 
 .macro SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg:req save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	movq	%cr3, %r\scratch_reg
 	movq	%r\scratch_reg, \save_reg
 	/*
<span class="p_chunk">@@ -244,11 +254,13 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro RESTORE_CR3 save_reg:req
<span class="p_add">+	JUMP_IF_KAISER_OFF	.Ldone_\@</span>
 	/*
 	 * The CR3 write could be avoided when not changing its value,
 	 * but would require a CR3 read *and* a scratch register.
 	 */
 	movq	\save_reg, %cr3
<span class="p_add">+.Ldone_\@:</span>
 .endm
 
 #else /* CONFIG_KAISER=n: */
<span class="p_header">diff --git a/arch/x86/mm/kaiser.c b/arch/x86/mm/kaiser.c</span>
<span class="p_header">index 06966b111280..1eb27b410556 100644</span>
<span class="p_header">--- a/arch/x86/mm/kaiser.c</span>
<span class="p_header">+++ b/arch/x86/mm/kaiser.c</span>
<span class="p_chunk">@@ -43,6 +43,9 @@</span> <span class="p_context"></span>
 
 #define KAISER_WALK_ATOMIC  0x1
 
<span class="p_add">+__aligned(PAGE_SIZE)</span>
<span class="p_add">+unsigned long kaiser_asm_do_switch[PAGE_SIZE/sizeof(unsigned long)] = { 1 };</span>
<span class="p_add">+</span>
 /*
  * At runtime, the only things we map are some things for CPU
  * hotplug, and stacks for new processes.  No two CPUs will ever
<span class="p_chunk">@@ -395,6 +398,9 @@</span> <span class="p_context"> void __init kaiser_init(void)</span>
 
 	kaiser_init_all_pgds();
 
<span class="p_add">+	kaiser_add_user_map_early(&amp;kaiser_asm_do_switch, PAGE_SIZE,</span>
<span class="p_add">+				  __PAGE_KERNEL | _PAGE_GLOBAL);</span>
<span class="p_add">+</span>
 	for_each_possible_cpu(cpu) {
 		void *percpu_vaddr = __per_cpu_user_mapped_start +
 				     per_cpu_offset(cpu);
<span class="p_chunk">@@ -483,6 +489,56 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_read_file(struct file *file, char __user *user_buf</span>
 	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
 }
 
<span class="p_add">+enum poison {</span>
<span class="p_add">+	KAISER_POISON,</span>
<span class="p_add">+	KAISER_UNPOISON</span>
<span class="p_add">+};</span>
<span class="p_add">+void kaiser_poison_pgds(enum poison do_poison);</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_disable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Make sure the kernel PGDs are usable by userspace: */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_UNPOISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure all the CPUs have the poison clear in their TLBs.</span>
<span class="p_add">+	 * This also functions as a barrier to ensure that everyone</span>
<span class="p_add">+	 * sees the unpoisoned PGDs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Tell the assembly code to stop switching CR3. */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Make sure everybody does an interrupt.  This means that</span>
<span class="p_add">+	 * they have gone through a SWITCH_TO_KERNEL_CR3 amd are no</span>
<span class="p_add">+	 * longer running on the userspace CR3.  If we did not do</span>
<span class="p_add">+	 * this, we might have CPUs running on the shadow page tables</span>
<span class="p_add">+	 * that then enter the kernel and think they do *not* need to</span>
<span class="p_add">+	 * switch.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void kaiser_do_enable(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	/* Tell the assembly code to start switching CR3: */</span>
<span class="p_add">+	kaiser_asm_do_switch[0] = 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure everyone can see the kaiser_asm_do_switch update: */</span>
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Now that userspace is no longer using the kernel copy of</span>
<span class="p_add">+	 * the page tables, we can poison it:</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	kaiser_poison_pgds(KAISER_POISON);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Make sure all the CPUs see the poison: */</span>
<span class="p_add">+	flush_tlb_all();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static ssize_t kaiser_enabled_write_file(struct file *file,
 		 const char __user *user_buf, size_t count, loff_t *ppos)
 {
<span class="p_chunk">@@ -504,7 +560,17 @@</span> <span class="p_context"> static ssize_t kaiser_enabled_write_file(struct file *file,</span>
 	if (kaiser_enabled == enable)
 		return count;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * This tells the page table code to stop poisoning PGDs</span>
<span class="p_add">+	 */</span>
 	WRITE_ONCE(kaiser_enabled, enable);
<span class="p_add">+	synchronize_rcu();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (enable)</span>
<span class="p_add">+		kaiser_do_enable();</span>
<span class="p_add">+	else</span>
<span class="p_add">+		kaiser_do_disable();</span>
<span class="p_add">+</span>
 	return count;
 }
 
<span class="p_chunk">@@ -522,10 +588,6 @@</span> <span class="p_context"> static int __init create_kaiser_enabled(void)</span>
 }
 late_initcall(create_kaiser_enabled);
 
<span class="p_del">-enum poison {</span>
<span class="p_del">-	KAISER_POISON,</span>
<span class="p_del">-	KAISER_UNPOISON</span>
<span class="p_del">-};</span>
 void kaiser_poison_pgd_page(pgd_t *pgd_page, enum poison do_poison)
 {
 	int i = 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



