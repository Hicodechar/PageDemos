
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/2] x86/microcode/intel: Add a helper which gives the microcode revision - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/2] x86/microcode/intel: Add a helper which gives the microcode revision</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 28, 2016, 12:53 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161228125354.GA30537@nazgul.tnic&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9490331/mbox/"
   >mbox</a>
|
   <a href="/patch/9490331/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9490331/">/patch/9490331/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	08BDC60838 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Dec 2016 12:54:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 005001FFD6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Dec 2016 12:54:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E901D223A6; Wed, 28 Dec 2016 12:54:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 26EC11FFD6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 28 Dec 2016 12:54:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751685AbcL1MyK (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 28 Dec 2016 07:54:10 -0500
Received: from mail.skyhub.de ([78.46.96.112]:59580 &quot;EHLO mail.skyhub.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751435AbcL1MyI (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 28 Dec 2016 07:54:08 -0500
X-Virus-Scanned: Nedap ESD1 at mail.skyhub.de
Received: from mail.skyhub.de ([127.0.0.1])
	by localhost (door.skyhub.de [127.0.0.1]) (amavisd-new, port 10026)
	with ESMTP id hz3K37WvZibV; Wed, 28 Dec 2016 13:53:59 +0100 (CET)
Received: from nazgul.tnic (unknown [85.187.112.43])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id
	DA130245A8D; Wed, 28 Dec 2016 13:53:58 +0100 (CET)
Received: by nazgul.tnic (Postfix, from userid 1000)
	id 1798563BB4; Wed, 28 Dec 2016 13:53:54 +0100 (CET)
Date: Wed, 28 Dec 2016 13:53:54 +0100
From: Borislav Petkov &lt;bp@alien8.de&gt;
To: Junichi Nomura &lt;j-nomura@ce.jp.nec.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: &quot;x86@kernel.org&quot; &lt;x86@kernel.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	&quot;tglx@linutronix.de&quot; &lt;tglx@linutronix.de&gt;,
	&quot;mingo@redhat.com&quot; &lt;mingo@redhat.com&gt;, &quot;hpa@zytor.com&quot; &lt;hpa@zytor.com&gt;
Subject: [PATCH 3/2] x86/microcode/intel: Add a helper which gives the
	microcode revision
Message-ID: &lt;20161228125354.GA30537@nazgul.tnic&gt;
References: &lt;2f771739-a617-0870-2f68-2a8ebba0bc46@ce.jp.nec.com&gt;
	&lt;20161228111830.GA21788@nazgul.tnic&gt;
	&lt;20161228112120.GC21788@nazgul.tnic&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: &lt;20161228112120.GC21788@nazgul.tnic&gt;
User-Agent: Mutt/1.6.0 (2016-04-01)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Dec. 28, 2016, 12:53 p.m.</div>
<pre class="content">
On Wed, Dec 28, 2016 at 12:21:20PM +0100, Borislav Petkov wrote:
<span class="quote">&gt; From: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Intel supplies the microcode revision value in MSR 0x8b</span>
<span class="quote">&gt; (IA32_BIOS_SIGN_ID) after CPUID(1) has been executed. Execute it each</span>
<span class="quote">&gt; time before reading that MSR.</span>

And then, we can go a step further and even do a separate helper which does the
required steps to read out the microcode revision so that we don&#39;t forget them
next time we change the code.

Provided that works for xen, though, because I need to do the native
variants but early_init_intel() can call the paravirt *msr() versions
and I have no idea whether that&#39;s kosher on xen pv.

Boris, any objections?

---
<span class="from">From: Borislav Petkov &lt;bp@suse.de&gt;</span>
Date: Wed, 28 Dec 2016 13:44:56 +0100
Subject: [PATCH] x86/microcode/intel: Add a helper which gives the microcode
 revision

Since on Intel we&#39;re required to do CPUID(1) first, before reading
the microcode revision MSR, let&#39;s add a special helper which does the
required steps so that we don&#39;t forget to do them next time, when we
want to read the microcode revision.
<span class="signed-off-by">
Signed-off-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
---
 arch/x86/include/asm/microcode_intel.h | 15 ++++++++++++
 arch/x86/kernel/cpu/intel.c            | 11 +++------
 arch/x86/kernel/cpu/microcode/intel.c  | 43 ++++++++++------------------------
 3 files changed, 31 insertions(+), 38 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Dec. 28, 2016, 6:12 p.m.</div>
<pre class="content">
On Wed, Dec 28, 2016 at 4:53 AM, Borislav Petkov &lt;bp@alien8.de&gt; wrote:
<span class="quote">&gt; On Wed, Dec 28, 2016 at 12:21:20PM +0100, Borislav Petkov wrote:</span>
<span class="quote">&gt;&gt; From: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Intel supplies the microcode revision value in MSR 0x8b</span>
<span class="quote">&gt;&gt; (IA32_BIOS_SIGN_ID) after CPUID(1) has been executed. Execute it each</span>
<span class="quote">&gt;&gt; time before reading that MSR.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And then, we can go a step further and even do a separate helper which does the</span>
<span class="quote">&gt; required steps to read out the microcode revision so that we don&#39;t forget them</span>
<span class="quote">&gt; next time we change the code.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Provided that works for xen, though, because I need to do the native</span>
<span class="quote">&gt; variants but early_init_intel() can call the paravirt *msr() versions</span>
<span class="quote">&gt; and I have no idea whether that&#39;s kosher on xen pv.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Boris, any objections?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; From: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Date: Wed, 28 Dec 2016 13:44:56 +0100</span>
<span class="quote">&gt; Subject: [PATCH] x86/microcode/intel: Add a helper which gives the microcode</span>
<span class="quote">&gt;  revision</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Since on Intel we&#39;re required to do CPUID(1) first, before reading</span>
<span class="quote">&gt; the microcode revision MSR, let&#39;s add a special helper which does the</span>
<span class="quote">&gt; required steps so that we don&#39;t forget to do them next time, when we</span>
<span class="quote">&gt; want to read the microcode revision.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/microcode_intel.h | 15 ++++++++++++</span>
<span class="quote">&gt;  arch/x86/kernel/cpu/intel.c            | 11 +++------</span>
<span class="quote">&gt;  arch/x86/kernel/cpu/microcode/intel.c  | 43 ++++++++++------------------------</span>
<span class="quote">&gt;  3 files changed, 31 insertions(+), 38 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/microcode_intel.h b/arch/x86/include/asm/microcode_intel.h</span>
<span class="quote">&gt; index 195becc6f780..e793fc9a9b20 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/microcode_intel.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/microcode_intel.h</span>
<span class="quote">&gt; @@ -52,6 +52,21 @@ struct extended_sigtable {</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  #define exttable_size(et) ((et)-&gt;count * EXT_SIGNATURE_SIZE + EXT_HEADER_SIZE)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +static inline u32 intel_get_microcode_revision(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +       u32 rev, dummy;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       native_wrmsrl(MSR_IA32_UCODE_REV, 0);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +       /* As documented in the SDM: Do a CPUID 1 here */</span>
<span class="quote">&gt; +       native_cpuid_eax(1);</span>

As in the other email, could this just be native_cpuid()?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60131">Boris Ostrovsky</a> - Dec. 28, 2016, 7:26 p.m.</div>
<pre class="content">
On 12/28/2016 07:53 AM, Borislav Petkov wrote:
<span class="quote">&gt; On Wed, Dec 28, 2016 at 12:21:20PM +0100, Borislav Petkov wrote:</span>
<span class="quote">&gt;&gt; From: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Intel supplies the microcode revision value in MSR 0x8b</span>
<span class="quote">&gt;&gt; (IA32_BIOS_SIGN_ID) after CPUID(1) has been executed. Execute it each</span>
<span class="quote">&gt;&gt; time before reading that MSR.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And then, we can go a step further and even do a separate helper which does the</span>
<span class="quote">&gt; required steps to read out the microcode revision so that we don&#39;t forget them</span>
<span class="quote">&gt; next time we change the code.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Provided that works for xen, though, because I need to do the native</span>
<span class="quote">&gt; variants but early_init_intel() can call the paravirt *msr() versions</span>
<span class="quote">&gt; and I have no idea whether that&#39;s kosher on xen pv.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Boris, any objections?</span>

I think this should work. MSR_IA32_UCODE_REV can be natively read and 
written with zero without any side effects.

-boris
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Dec. 29, 2016, 9:36 a.m.</div>
<pre class="content">
On Wed, Dec 28, 2016 at 10:12:22AM -0800, Andy Lutomirski wrote:
<span class="quote">&gt; As in the other email, could this just be native_cpuid()?</span>

Right, so we only have use for the native_cpuid_eax() variant right now
but having them all is nicely consistent. They come for almost for free
too.

Also, they&#39;re cpuid_&lt;reg&gt;() counterparts and if we don&#39;t add the
native_cpuid_e[bcd]x() now I can already see the question: &quot;But but, why
didn&#39;t you implement the rest of the CPUID regs?&quot;

Considering how cheap they are, I&#39;d say we keep them all 4.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Dec. 29, 2016, 9:38 a.m.</div>
<pre class="content">
On Wed, Dec 28, 2016 at 02:26:24PM -0500, Boris Ostrovsky wrote:
<span class="quote">&gt; I think this should work. MSR_IA32_UCODE_REV can be natively read and</span>
<span class="quote">&gt; written with zero without any side effects.</span>

Cool, thanks.

I&#39;ll run the pile through the boxes next year to make sure all is fine.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/microcode_intel.h b/arch/x86/include/asm/microcode_intel.h</span>
<span class="p_header">index 195becc6f780..e793fc9a9b20 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/microcode_intel.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/microcode_intel.h</span>
<span class="p_chunk">@@ -52,6 +52,21 @@</span> <span class="p_context"> struct extended_sigtable {</span>
 
 #define exttable_size(et) ((et)-&gt;count * EXT_SIGNATURE_SIZE + EXT_HEADER_SIZE)
 
<span class="p_add">+static inline u32 intel_get_microcode_revision(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u32 rev, dummy;</span>
<span class="p_add">+</span>
<span class="p_add">+	native_wrmsrl(MSR_IA32_UCODE_REV, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* As documented in the SDM: Do a CPUID 1 here */</span>
<span class="p_add">+	native_cpuid_eax(1);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* get the current revision from MSR 0x8B */</span>
<span class="p_add">+	native_rdmsr(MSR_IA32_UCODE_REV, dummy, rev);</span>
<span class="p_add">+</span>
<span class="p_add">+	return rev;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MICROCODE_INTEL
 extern void __init load_ucode_intel_bsp(void);
 extern void load_ucode_intel_ap(void);
<span class="p_header">diff --git a/arch/x86/kernel/cpu/intel.c b/arch/x86/kernel/cpu/intel.c</span>
<span class="p_header">index 2d49aa949fa1..203f860d2ab3 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/intel.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/intel.c</span>
<span class="p_chunk">@@ -14,6 +14,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/bugs.h&gt;
 #include &lt;asm/cpu.h&gt;
 #include &lt;asm/intel-family.h&gt;
<span class="p_add">+#include &lt;asm/microcode_intel.h&gt;</span>
 
 #ifdef CONFIG_X86_64
 #include &lt;linux/topology.h&gt;
<span class="p_chunk">@@ -78,14 +79,8 @@</span> <span class="p_context"> static void early_init_intel(struct cpuinfo_x86 *c)</span>
 		(c-&gt;x86 == 0x6 &amp;&amp; c-&gt;x86_model &gt;= 0x0e))
 		set_cpu_cap(c, X86_FEATURE_CONSTANT_TSC);
 
<span class="p_del">-	if (c-&gt;x86 &gt;= 6 &amp;&amp; !cpu_has(c, X86_FEATURE_IA64)) {</span>
<span class="p_del">-		unsigned lower_word;</span>
<span class="p_del">-</span>
<span class="p_del">-		wrmsr(MSR_IA32_UCODE_REV, 0, 0);</span>
<span class="p_del">-		/* Required by the SDM */</span>
<span class="p_del">-		native_cpuid_eax(1);</span>
<span class="p_del">-		rdmsr(MSR_IA32_UCODE_REV, lower_word, c-&gt;microcode);</span>
<span class="p_del">-	}</span>
<span class="p_add">+	if (c-&gt;x86 &gt;= 6 &amp;&amp; !cpu_has(c, X86_FEATURE_IA64))</span>
<span class="p_add">+		c-&gt;microcode = intel_get_microcode_revision();</span>
 
 	/*
 	 * Atom erratum AAE44/AAF40/AAG38/AAH41:
<span class="p_header">diff --git a/arch/x86/kernel/cpu/microcode/intel.c b/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_header">index f79249fab389..faec8fa68ffd 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/microcode/intel.c</span>
<span class="p_chunk">@@ -390,15 +390,8 @@</span> <span class="p_context"> static int collect_cpu_info_early(struct ucode_cpu_info *uci)</span>
 		native_rdmsr(MSR_IA32_PLATFORM_ID, val[0], val[1]);
 		csig.pf = 1 &lt;&lt; ((val[1] &gt;&gt; 18) &amp; 7);
 	}
<span class="p_del">-	native_wrmsrl(MSR_IA32_UCODE_REV, 0);</span>
 
<span class="p_del">-	/* As documented in the SDM: Do a CPUID 1 here */</span>
<span class="p_del">-	native_cpuid_eax(1);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* get the current revision from MSR 0x8B */</span>
<span class="p_del">-	native_rdmsr(MSR_IA32_UCODE_REV, val[0], val[1]);</span>
<span class="p_del">-</span>
<span class="p_del">-	csig.rev = val[1];</span>
<span class="p_add">+	csig.rev = intel_get_microcode_revision();</span>
 
 	uci-&gt;cpu_sig = csig;
 	uci-&gt;valid = 1;
<span class="p_chunk">@@ -582,7 +575,7 @@</span> <span class="p_context"> static inline void print_ucode(struct ucode_cpu_info *uci)</span>
 static int apply_microcode_early(struct ucode_cpu_info *uci, bool early)
 {
 	struct microcode_intel *mc;
<span class="p_del">-	unsigned int val[2];</span>
<span class="p_add">+	u32 rev;</span>
 
 	mc = uci-&gt;mc;
 	if (!mc)
<span class="p_chunk">@@ -590,21 +583,16 @@</span> <span class="p_context"> static int apply_microcode_early(struct ucode_cpu_info *uci, bool early)</span>
 
 	/* write microcode via MSR 0x79 */
 	native_wrmsrl(MSR_IA32_UCODE_WRITE, (unsigned long)mc-&gt;bits);
<span class="p_del">-	native_wrmsrl(MSR_IA32_UCODE_REV, 0);</span>
 
<span class="p_del">-	/* As documented in the SDM: Do a CPUID 1 here */</span>
<span class="p_del">-	native_cpuid_eax(1);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* get the current revision from MSR 0x8B */</span>
<span class="p_del">-	native_rdmsr(MSR_IA32_UCODE_REV, val[0], val[1]);</span>
<span class="p_del">-	if (val[1] != mc-&gt;hdr.rev)</span>
<span class="p_add">+	rev = intel_get_microcode_revision();</span>
<span class="p_add">+	if (rev != mc-&gt;hdr.rev)</span>
 		return -1;
 
 #ifdef CONFIG_X86_64
 	/* Flush global tlb. This is precaution. */
 	flush_tlb_early();
 #endif
<span class="p_del">-	uci-&gt;cpu_sig.rev = val[1];</span>
<span class="p_add">+	uci-&gt;cpu_sig.rev = rev;</span>
 
 	if (early)
 		print_ucode(uci);
<span class="p_chunk">@@ -784,8 +772,8 @@</span> <span class="p_context"> static int apply_microcode_intel(int cpu)</span>
 	struct microcode_intel *mc;
 	struct ucode_cpu_info *uci;
 	struct cpuinfo_x86 *c;
<span class="p_del">-	unsigned int val[2];</span>
 	static int prev_rev;
<span class="p_add">+	u32 rev;</span>
 
 	/* We should bind the task to the CPU */
 	if (WARN_ON(raw_smp_processor_id() != cpu))
<span class="p_chunk">@@ -802,33 +790,28 @@</span> <span class="p_context"> static int apply_microcode_intel(int cpu)</span>
 
 	/* write microcode via MSR 0x79 */
 	wrmsrl(MSR_IA32_UCODE_WRITE, (unsigned long)mc-&gt;bits);
<span class="p_del">-	wrmsrl(MSR_IA32_UCODE_REV, 0);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* As documented in the SDM: Do a CPUID 1 here */</span>
<span class="p_del">-	native_cpuid_eax(1);</span>
 
<span class="p_del">-	/* get the current revision from MSR 0x8B */</span>
<span class="p_del">-	rdmsr(MSR_IA32_UCODE_REV, val[0], val[1]);</span>
<span class="p_add">+	rev = intel_get_microcode_revision();</span>
 
<span class="p_del">-	if (val[1] != mc-&gt;hdr.rev) {</span>
<span class="p_add">+	if (rev != mc-&gt;hdr.rev) {</span>
 		pr_err(&quot;CPU%d update to revision 0x%x failed\n&quot;,
 		       cpu, mc-&gt;hdr.rev);
 		return -1;
 	}
 
<span class="p_del">-	if (val[1] != prev_rev) {</span>
<span class="p_add">+	if (rev != prev_rev) {</span>
 		pr_info(&quot;updated to revision 0x%x, date = %04x-%02x-%02x\n&quot;,
<span class="p_del">-			val[1],</span>
<span class="p_add">+			rev,</span>
 			mc-&gt;hdr.date &amp; 0xffff,
 			mc-&gt;hdr.date &gt;&gt; 24,
 			(mc-&gt;hdr.date &gt;&gt; 16) &amp; 0xff);
<span class="p_del">-		prev_rev = val[1];</span>
<span class="p_add">+		prev_rev = rev;</span>
 	}
 
 	c = &amp;cpu_data(cpu);
 
<span class="p_del">-	uci-&gt;cpu_sig.rev = val[1];</span>
<span class="p_del">-	c-&gt;microcode = val[1];</span>
<span class="p_add">+	uci-&gt;cpu_sig.rev = rev;</span>
<span class="p_add">+	c-&gt;microcode = rev;</span>
 
 	return 0;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



