
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V4,3/6] mm: gup: Add mm_lock_present() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V4,3/6] mm: gup: Add mm_lock_present()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=111821">Eric B Munson</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 21, 2015, 7:59 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437508781-28655-4-git-send-email-emunson@akamai.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6837971/mbox/"
   >mbox</a>
|
   <a href="/patch/6837971/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6837971/">/patch/6837971/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id BEBDDC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 20:00:16 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B0744206F3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 20:00:15 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 99052206F4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 20:00:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932327AbbGUT7v (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 21 Jul 2015 15:59:51 -0400
Received: from a23-79-238-175.deploy.static.akamaitechnologies.com
	([23.79.238.175]:44662
	&quot;EHLO prod-mail-xrelay07.akamai.com&quot; rhost-flags-OK-FAIL-OK-OK)
	by vger.kernel.org with ESMTP id S1754909AbbGUT7n (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 21 Jul 2015 15:59:43 -0400
Received: from prod-mail-xrelay07.akamai.com (localhost.localdomain
	[127.0.0.1]) by postfix.imss70 (Postfix) with ESMTP id 2E25E47AA1;
	Tue, 21 Jul 2015 20:00:22 +0000 (GMT)
Received: from prod-mail-relay06.akamai.com (prod-mail-relay06.akamai.com
	[172.17.120.126])
	by prod-mail-xrelay07.akamai.com (Postfix) with ESMTP id 16D2D478B9; 
	Tue, 21 Jul 2015 20:00:22 +0000 (GMT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=akamai.com; s=a1;
	t=1437508822; bh=VZVBJlS9NAFeVqDsK3JRx1jcGA1XHD28iozOqOhDBto=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=BAf+NCCK+5ZVXX9vO6Qiopvuj4PuEyzDDNYt5PVyNz+bVuH/C/z7qlNv+0gaHrXk0
	lZIuDp0mi9JI8THdoL/WeZ5oVVGk9rWnJ4RgaM3y/Vs8KAwUeK2v8W4nYxbcQB4ajE
	7DndePpkdjUN/FttZWNKper3/LMK8vw7/p0ENwLg=
Received: from bos-lp6ds.kendall.corp.akamai.com
	(bos-lp6ds.kendall.corp.akamai.com [172.28.12.165])
	by prod-mail-relay06.akamai.com (Postfix) with ESMTP id 53A782107;
	Tue, 21 Jul 2015 19:59:42 +0000 (GMT)
From: Eric B Munson &lt;emunson@akamai.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Eric B Munson &lt;emunson@akamai.com&gt;, Jonathan Corbet &lt;corbet@lwn.net&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: [PATCH V4 3/6] mm: gup: Add mm_lock_present()
Date: Tue, 21 Jul 2015 15:59:38 -0400
Message-Id: &lt;1437508781-28655-4-git-send-email-emunson@akamai.com&gt;
X-Mailer: git-send-email 1.9.1
In-Reply-To: &lt;1437508781-28655-1-git-send-email-emunson@akamai.com&gt;
References: &lt;1437508781-28655-1-git-send-email-emunson@akamai.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=111821">Eric B Munson</a> - July 21, 2015, 7:59 p.m.</div>
<pre class="content">
The upcoming mlock(MLOCK_ONFAULT) implementation will need a way to
request that all present pages in a range are locked without faulting in
pages that are not present.  This logic is very close to what the
__mm_populate() call handles without faulting pages so the patch pulls
out the pieces that can be shared and adds mm_lock_present() to gup.c.
The following patch will call it from do_mlock() when MLOCK_ONFAULT is
specified.
<span class="signed-off-by">
Signed-off-by: Eric B Munson &lt;emunson@akamai.com&gt;</span>
Cc: Jonathan Corbet &lt;corbet@lwn.net&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org
---
 mm/gup.c | 172 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 157 insertions(+), 15 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/gup.c b/mm/gup.c</span>
<span class="p_header">index 6297f6b..233ef17 100644</span>
<span class="p_header">--- a/mm/gup.c</span>
<span class="p_header">+++ b/mm/gup.c</span>
<span class="p_chunk">@@ -818,6 +818,30 @@</span> <span class="p_context"> long get_user_pages(struct task_struct *tsk, struct mm_struct *mm,</span>
 }
 EXPORT_SYMBOL(get_user_pages);
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Helper function used by both populate_vma_page_range() and pin_user_pages</span>
<span class="p_add">+ */</span>
<span class="p_add">+static int get_gup_flags(vm_flags_t vm_flags)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int gup_flags = FOLL_TOUCH | FOLL_POPULATE;</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We want to touch writable mappings with a write fault in order</span>
<span class="p_add">+	 * to break COW, except for shared mappings because these don&#39;t COW</span>
<span class="p_add">+	 * and we would not want to dirty them for nothing.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((vm_flags &amp; (VM_WRITE | VM_SHARED)) == VM_WRITE)</span>
<span class="p_add">+		gup_flags |= FOLL_WRITE;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We want mlock to succeed for regions that have any permissions</span>
<span class="p_add">+	 * other than PROT_NONE.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (vm_flags &amp; (VM_READ | VM_WRITE | VM_EXEC))</span>
<span class="p_add">+		gup_flags |= FOLL_FORCE;</span>
<span class="p_add">+</span>
<span class="p_add">+	return gup_flags;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /**
  * populate_vma_page_range() -  populate a range of pages in the vma.
  * @vma:   target vma
<span class="p_chunk">@@ -850,21 +874,7 @@</span> <span class="p_context"> long populate_vma_page_range(struct vm_area_struct *vma,</span>
 	VM_BUG_ON_VMA(end   &gt; vma-&gt;vm_end, vma);
 	VM_BUG_ON_MM(!rwsem_is_locked(&amp;mm-&gt;mmap_sem), mm);
 
<span class="p_del">-	gup_flags = FOLL_TOUCH | FOLL_POPULATE;</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * We want to touch writable mappings with a write fault in order</span>
<span class="p_del">-	 * to break COW, except for shared mappings because these don&#39;t COW</span>
<span class="p_del">-	 * and we would not want to dirty them for nothing.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if ((vma-&gt;vm_flags &amp; (VM_WRITE | VM_SHARED)) == VM_WRITE)</span>
<span class="p_del">-		gup_flags |= FOLL_WRITE;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * We want mlock to succeed for regions that have any permissions</span>
<span class="p_del">-	 * other than PROT_NONE.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (vma-&gt;vm_flags &amp; (VM_READ | VM_WRITE | VM_EXEC))</span>
<span class="p_del">-		gup_flags |= FOLL_FORCE;</span>
<span class="p_add">+	gup_flags = get_gup_flags(vma-&gt;vm_flags);</span>
 
 	/*
 	 * We made sure addr is within a VMA, so the following will
<span class="p_chunk">@@ -874,6 +884,138 @@</span> <span class="p_context"> long populate_vma_page_range(struct vm_area_struct *vma,</span>
 				NULL, NULL, nonblocking);
 }
 
<span class="p_add">+static long pin_user_pages(struct vm_area_struct *vma, unsigned long start,</span>
<span class="p_add">+			unsigned long end, int *nonblocking)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	unsigned long nr_pages = (end - start) / PAGE_SIZE;</span>
<span class="p_add">+	int gup_flags;</span>
<span class="p_add">+	long i = 0;</span>
<span class="p_add">+	unsigned int page_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	VM_BUG_ON(start &amp; ~PAGE_MASK);</span>
<span class="p_add">+	VM_BUG_ON(end   &amp; ~PAGE_MASK);</span>
<span class="p_add">+	VM_BUG_ON_VMA(start &lt; vma-&gt;vm_start, vma);</span>
<span class="p_add">+	VM_BUG_ON_VMA(end   &gt; vma-&gt;vm_end, vma);</span>
<span class="p_add">+	VM_BUG_ON_MM(!rwsem_is_locked(&amp;mm-&gt;mmap_sem), mm);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!nr_pages)</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	gup_flags = get_gup_flags(vma-&gt;vm_flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * If FOLL_FORCE is set then do not force a full fault as the hinting</span>
<span class="p_add">+	 * fault information is unrelated to the reference behaviour of a task</span>
<span class="p_add">+	 * using the address space</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!(gup_flags &amp; FOLL_FORCE))</span>
<span class="p_add">+		gup_flags |= FOLL_NUMA;</span>
<span class="p_add">+</span>
<span class="p_add">+	vma = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		struct page *page;</span>
<span class="p_add">+		unsigned int foll_flags = gup_flags;</span>
<span class="p_add">+		unsigned int page_increm;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* first iteration or cross vma bound */</span>
<span class="p_add">+		if (!vma || start &gt;= vma-&gt;vm_end) {</span>
<span class="p_add">+			vma = find_extend_vma(mm, start);</span>
<span class="p_add">+			if (!vma &amp;&amp; in_gate_area(mm, start)) {</span>
<span class="p_add">+				int ret;</span>
<span class="p_add">+				ret = get_gate_page(mm, start &amp; PAGE_MASK,</span>
<span class="p_add">+						gup_flags, &amp;vma, NULL);</span>
<span class="p_add">+				if (ret)</span>
<span class="p_add">+					return i ? : ret;</span>
<span class="p_add">+				page_mask = 0;</span>
<span class="p_add">+				goto next_page;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			if (!vma)</span>
<span class="p_add">+				return i ? : -EFAULT;</span>
<span class="p_add">+			if (is_vm_hugetlb_page(vma)) {</span>
<span class="p_add">+				i = follow_hugetlb_page(mm, vma, NULL, NULL,</span>
<span class="p_add">+						&amp;start, &amp;nr_pages, i,</span>
<span class="p_add">+						gup_flags);</span>
<span class="p_add">+				continue;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If we have a pending SIGKILL, don&#39;t keep pinning pages</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (unlikely(fatal_signal_pending(current)))</span>
<span class="p_add">+			return i ? i : -ERESTARTSYS;</span>
<span class="p_add">+		cond_resched();</span>
<span class="p_add">+		page = follow_page_mask(vma, start, foll_flags, &amp;page_mask);</span>
<span class="p_add">+		if (!page)</span>
<span class="p_add">+			goto next_page;</span>
<span class="p_add">+		if (IS_ERR(page))</span>
<span class="p_add">+			return i ? i : PTR_ERR(page);</span>
<span class="p_add">+next_page:</span>
<span class="p_add">+		page_increm = 1 + (~(start &gt;&gt; PAGE_SHIFT) &amp; page_mask);</span>
<span class="p_add">+		if (page_increm &gt; nr_pages)</span>
<span class="p_add">+			page_increm = nr_pages;</span>
<span class="p_add">+		i += page_increm;</span>
<span class="p_add">+		start += page_increm * PAGE_SIZE;</span>
<span class="p_add">+		nr_pages -= page_increm;</span>
<span class="p_add">+	} while (nr_pages);</span>
<span class="p_add">+	return i;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * mm_lock_present - lock present pages within a range of address space.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This is used to implement mlock2(MLOCK_LOCKONFAULT).  VMAs must be already</span>
<span class="p_add">+ * marked with the desired vm_flags, and mmap_sem must not be held.</span>
<span class="p_add">+ */</span>
<span class="p_add">+int mm_lock_present(unsigned long start, unsigned long len)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = current-&gt;mm;</span>
<span class="p_add">+	unsigned long end, nstart, nend;</span>
<span class="p_add">+	struct vm_area_struct *vma = NULL;</span>
<span class="p_add">+	int locked = 0;</span>
<span class="p_add">+	long ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	VM_BUG_ON(start &amp; ~PAGE_MASK);</span>
<span class="p_add">+	VM_BUG_ON(len != PAGE_ALIGN(len));</span>
<span class="p_add">+	end = start + len;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (nstart = start; nstart &lt; end; nstart = nend) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We want to fault in pages for [nstart; end) address range.</span>
<span class="p_add">+		 * Find first corresponding VMA.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (!locked) {</span>
<span class="p_add">+			locked = 1;</span>
<span class="p_add">+			down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+			vma = find_vma(mm, nstart);</span>
<span class="p_add">+		} else if (nstart &gt;= vma-&gt;vm_end)</span>
<span class="p_add">+			vma = vma-&gt;vm_next;</span>
<span class="p_add">+		if (!vma || vma-&gt;vm_start &gt;= end)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Set [nstart; nend) to intersection of desired address</span>
<span class="p_add">+		 * range with the first VMA. Also, skip undesirable VMA types.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		nend = min(end, vma-&gt;vm_end);</span>
<span class="p_add">+		if (vma-&gt;vm_flags &amp; (VM_IO | VM_PFNMAP))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (nstart &lt; vma-&gt;vm_start)</span>
<span class="p_add">+			nstart = vma-&gt;vm_start;</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = pin_user_pages(vma, nstart, nend, &amp;locked);</span>
<span class="p_add">+		if (ret &lt; 0)</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		nend = nstart + ret * PAGE_SIZE;</span>
<span class="p_add">+		ret = 0;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (locked)</span>
<span class="p_add">+		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	return ret;	/* 0 or negative error code */</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * __mm_populate - populate and/or mlock pages within a range of address space.
  *

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



