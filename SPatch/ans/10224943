
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v8,07/24] mm: VMA sequence count - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v8,07/24] mm: VMA sequence count</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 16, 2018, 3:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1518794738-4186-8-git-send-email-ldufour@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10224943/mbox/"
   >mbox</a>
|
   <a href="/patch/10224943/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10224943/">/patch/10224943/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	CF0E9602CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Feb 2018 15:26:29 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id BE1192950B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Feb 2018 15:26:29 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B279729513; Fri, 16 Feb 2018 15:26:29 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 14EB42950B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 16 Feb 2018 15:26:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755403AbeBPP0Z (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 16 Feb 2018 10:26:25 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:34446 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1755429AbeBPP0S (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 16 Feb 2018 10:26:18 -0500
Received: from pps.filterd (m0098393.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.22/8.16.0.22) with SMTP id
	w1GFPG6R083084
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Feb 2018 10:26:18 -0500
Received: from e06smtp10.uk.ibm.com (e06smtp10.uk.ibm.com [195.75.94.106])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2g61dm9f3t-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 16 Feb 2018 10:26:17 -0500
Received: from localhost
	by e06smtp10.uk.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;ldufour@linux.vnet.ibm.com&gt;; 
	Fri, 16 Feb 2018 15:26:14 -0000
Received: from b06cxnps4076.portsmouth.uk.ibm.com (9.149.109.198)
	by e06smtp10.uk.ibm.com (192.168.101.140) with IBM ESMTP SMTP
	Gateway: Authorized Use Only! Violators will be prosecuted; 
	Fri, 16 Feb 2018 15:26:06 -0000
Received: from d06av24.portsmouth.uk.ibm.com (mk.ibm.com [9.149.105.60])
	by b06cxnps4076.portsmouth.uk.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id w1GFQ5GB47972574; Fri, 16 Feb 2018 15:26:05 GMT
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 720F542041;
	Fri, 16 Feb 2018 15:18:49 +0000 (GMT)
Received: from d06av24.portsmouth.uk.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 697254203F;
	Fri, 16 Feb 2018 15:18:47 +0000 (GMT)
Received: from nimbus.lab.toulouse-stg.fr.ibm.com (unknown [9.145.186.2])
	by d06av24.portsmouth.uk.ibm.com (Postfix) with ESMTP;
	Fri, 16 Feb 2018 15:18:47 +0000 (GMT)
From: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;
To: paulmck@linux.vnet.ibm.com, peterz@infradead.org,
	akpm@linux-foundation.org, kirill@shutemov.name,
	ak@linux.intel.com, mhocko@kernel.org, dave@stgolabs.net,
	jack@suse.cz, Matthew Wilcox &lt;willy@infradead.org&gt;,
	benh@kernel.crashing.org, mpe@ellerman.id.au, paulus@samba.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, hpa@zytor.com,
	Will Deacon &lt;will.deacon@arm.com&gt;,
	Sergey Senozhatsky &lt;sergey.senozhatsky@gmail.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Alexei Starovoitov &lt;alexei.starovoitov@gmail.com&gt;,
	kemi.wang@intel.com, sergey.senozhatsky.work@gmail.com,
	Daniel Jordan &lt;daniel.m.jordan@oracle.com&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	haren@linux.vnet.ibm.com, khandual@linux.vnet.ibm.com,
	npiggin@gmail.com, bsingharora@gmail.com,
	Tim Chen &lt;tim.c.chen@linux.intel.com&gt;,
	linuxppc-dev@lists.ozlabs.org, x86@kernel.org
Subject: [PATCH v8 07/24] mm: VMA sequence count
Date: Fri, 16 Feb 2018 16:25:21 +0100
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
References: &lt;1518794738-4186-1-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-TM-AS-GCONF: 00
x-cbid: 18021615-0040-0000-0000-000004137361
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 18021615-0041-0000-0000-000026167780
Message-Id: &lt;1518794738-4186-8-git-send-email-ldufour@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2018-02-16_06:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=2 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1015 lowpriorityscore=0 impostorscore=0 adultscore=0
	classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1709140000
	definitions=main-1802160183
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=89031">Laurent Dufour</a> - Feb. 16, 2018, 3:25 p.m.</div>
<pre class="content">
<span class="from">From: Peter Zijlstra &lt;peterz@infradead.org&gt;</span>

Wrap the VMA modifications (vma_adjust/unmap_page_range) with sequence
counts such that we can easily test if a VMA is changed.

The unmap_page_range() one allows us to make assumptions about
page-tables; when we find the seqcount hasn&#39;t changed we can assume
page-tables are still valid.

The flip side is that we cannot distinguish between a vma_adjust() and
the unmap_page_range() -- where with the former we could have
re-checked the vma bounds against the address.
<span class="signed-off-by">
Signed-off-by: Peter Zijlstra (Intel) &lt;peterz@infradead.org&gt;</span>

[Port to 4.12 kernel]
[Build depends on CONFIG_SPECULATIVE_PAGE_FAULT]
[Introduce vm_write_* inline function depending on
 CONFIG_SPECULATIVE_PAGE_FAULT]
[Fix lock dependency between mapping-&gt;i_mmap_rwsem and vma-&gt;vm_sequence by
 using vm_raw_write* functions]
<span class="signed-off-by">Signed-off-by: Laurent Dufour &lt;ldufour@linux.vnet.ibm.com&gt;</span>
---
 include/linux/mm.h       | 41 +++++++++++++++++++++++++++++++++++++++++
 include/linux/mm_types.h |  3 +++
 mm/memory.c              |  2 ++
 mm/mmap.c                | 35 +++++++++++++++++++++++++++++++++++
 4 files changed, 81 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index e869adec9023..9c22b4134c5d 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1370,6 +1370,47 @@</span> <span class="p_context"> static inline void unmap_shared_mapping_range(struct address_space *mapping,</span>
 	unmap_mapping_range(mapping, holebegin, holelen, 0);
 }
 
<span class="p_add">+#ifdef CONFIG_SPECULATIVE_PAGE_FAULT</span>
<span class="p_add">+static inline void vm_write_begin(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_write_begin_nested(struct vm_area_struct *vma,</span>
<span class="p_add">+					 int subclass)</span>
<span class="p_add">+{</span>
<span class="p_add">+	write_seqcount_begin_nested(&amp;vma-&gt;vm_sequence, subclass);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_write_end(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_raw_write_begin(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	raw_write_seqcount_begin(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_raw_write_end(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+	raw_write_seqcount_end(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void vm_write_begin(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_write_begin_nested(struct vm_area_struct *vma,</span>
<span class="p_add">+					 int subclass)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_write_end(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_raw_write_begin(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+static inline void vm_raw_write_end(struct vm_area_struct *vma)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* CONFIG_SPECULATIVE_PAGE_FAULT */</span>
<span class="p_add">+</span>
 extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
 		void *buf, int len, unsigned int gup_flags);
 extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index fd1af6b9591d..34fde7111e88 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -333,6 +333,9 @@</span> <span class="p_context"> struct vm_area_struct {</span>
 	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
 #endif
 	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
<span class="p_add">+#ifdef CONFIG_SPECULATIVE_PAGE_FAULT</span>
<span class="p_add">+	seqcount_t vm_sequence;</span>
<span class="p_add">+#endif</span>
 } __randomize_layout;
 
 struct core_thread {
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index a301b9003200..3cc1a13417cf 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -1503,6 +1503,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 	unsigned long next;
 
 	BUG_ON(addr &gt;= end);
<span class="p_add">+	vm_write_begin(vma);</span>
 	tlb_start_vma(tlb, vma);
 	pgd = pgd_offset(vma-&gt;vm_mm, addr);
 	do {
<span class="p_chunk">@@ -1512,6 +1513,7 @@</span> <span class="p_context"> void unmap_page_range(struct mmu_gather *tlb,</span>
 		next = zap_p4d_range(tlb, vma, pgd, addr, next, details);
 	} while (pgd++, addr = next, addr != end);
 	tlb_end_vma(tlb, vma);
<span class="p_add">+	vm_write_end(vma);</span>
 }
 
 
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 4bb038e7984b..671940b72696 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -558,6 +558,10 @@</span> <span class="p_context"> void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 	else
 		mm-&gt;highest_vm_end = vm_end_gap(vma);
 
<span class="p_add">+#ifdef CONFIG_SPECULATIVE_PAGE_FAULT</span>
<span class="p_add">+	seqcount_init(&amp;vma-&gt;vm_sequence);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 	/*
 	 * vma-&gt;vm_prev wasn&#39;t known when we followed the rbtree to find the
 	 * correct insertion point for that vma. As a result, we could not
<span class="p_chunk">@@ -692,6 +696,30 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 	long adjust_next = 0;
 	int remove_next = 0;
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Why using vm_raw_write*() functions here to avoid lockdep&#39;s warning ?</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Locked is complaining about a theoretical lock dependency, involving</span>
<span class="p_add">+	 * 3 locks:</span>
<span class="p_add">+	 *   mapping-&gt;i_mmap_rwsem --&gt; vma-&gt;vm_sequence --&gt; fs_reclaim</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * Here are the major path leading to this dependency :</span>
<span class="p_add">+	 *  1. __vma_adjust() mmap_sem  -&gt; vm_sequence -&gt; i_mmap_rwsem</span>
<span class="p_add">+	 *  2. move_vmap() mmap_sem -&gt; vm_sequence -&gt; fs_reclaim</span>
<span class="p_add">+	 *  3. __alloc_pages_nodemask() fs_reclaim -&gt; i_mmap_rwsem</span>
<span class="p_add">+	 *  4. unmap_mapping_range() i_mmap_rwsem -&gt; vm_sequence</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * So there is no way to solve this easily, especially because in</span>
<span class="p_add">+	 * unmap_mapping_range() the i_mmap_rwsem is grab while the impacted</span>
<span class="p_add">+	 * VMAs are not yet known.</span>
<span class="p_add">+	 * However, the way the vm_seq is used is guarantying that we will</span>
<span class="p_add">+	 * never block on it since we just check for its value and never wait</span>
<span class="p_add">+	 * for it to move, see vma_has_changed() and handle_speculative_fault().</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	vm_raw_write_begin(vma);</span>
<span class="p_add">+	if (next)</span>
<span class="p_add">+		vm_raw_write_begin(next);</span>
<span class="p_add">+</span>
 	if (next &amp;&amp; !insert) {
 		struct vm_area_struct *exporter = NULL, *importer = NULL;
 
<span class="p_chunk">@@ -902,6 +930,7 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 			anon_vma_merge(vma, next);
 		mm-&gt;map_count--;
 		mpol_put(vma_policy(next));
<span class="p_add">+		vm_raw_write_end(next);</span>
 		kmem_cache_free(vm_area_cachep, next);
 		/*
 		 * In mprotect&#39;s case 6 (see comments on vma_merge),
<span class="p_chunk">@@ -916,6 +945,8 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 			 * &quot;vma-&gt;vm_next&quot; gap must be updated.
 			 */
 			next = vma-&gt;vm_next;
<span class="p_add">+			if (next)</span>
<span class="p_add">+				vm_raw_write_begin(next);</span>
 		} else {
 			/*
 			 * For the scope of the comment &quot;next&quot; and
<span class="p_chunk">@@ -962,6 +993,10 @@</span> <span class="p_context"> int __vma_adjust(struct vm_area_struct *vma, unsigned long start,</span>
 	if (insert &amp;&amp; file)
 		uprobe_mmap(insert);
 
<span class="p_add">+	if (next &amp;&amp; next != vma)</span>
<span class="p_add">+		vm_raw_write_end(next);</span>
<span class="p_add">+	vm_raw_write_end(vma);</span>
<span class="p_add">+</span>
 	validate_mm(mm);
 
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



