
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, oom: prevent additional oom kills before memory is freed - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, oom: prevent additional oom kills before memory is freed</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 15, 2017, 12:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170615122031.GL1486@dhcp22.suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9788761/mbox/"
   >mbox</a>
|
   <a href="/patch/9788761/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9788761/">/patch/9788761/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6B97560325 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 12:20:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5790227F17
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 12:20:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4AD99285A9; Thu, 15 Jun 2017 12:20:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D849827F17
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 12:20:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752141AbdFOMUg (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Jun 2017 08:20:36 -0400
Received: from mx2.suse.de ([195.135.220.15]:38497 &quot;EHLO mx1.suse.de&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1751016AbdFOMUf (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Jun 2017 08:20:35 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx1.suse.de (Postfix) with ESMTP id 25911ACA7;
	Thu, 15 Jun 2017 12:20:34 +0000 (UTC)
Date: Thu, 15 Jun 2017 14:20:31 +0200
From: Michal Hocko &lt;mhocko@kernel.org&gt;
To: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
Cc: rientjes@google.com, akpm@linux-foundation.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: Re: [patch] mm, oom: prevent additional oom kills before memory is
	freed
Message-ID: &lt;20170615122031.GL1486@dhcp22.suse.cz&gt;
References: &lt;alpine.DEB.2.10.1706141632100.93071@chino.kir.corp.google.com&gt;
	&lt;20170615103909.GG1486@dhcp22.suse.cz&gt;
	&lt;201706151953.HFH78657.tFFLOOOQHSMVFJ@I-love.SAKURA.ne.jp&gt;
	&lt;20170615110119.GI1486@dhcp22.suse.cz&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20170615110119.GI1486@dhcp22.suse.cz&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 15, 2017, 12:20 p.m.</div>
<pre class="content">
On Thu 15-06-17 13:01:19, Michal Hocko wrote:
<span class="quote">&gt; On Thu 15-06-17 19:53:24, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed 14-06-17 16:43:03, David Rientjes wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; If mm-&gt;mm_users is not incremented because it is already zero by the oom</span>
<span class="quote">&gt; &gt; &gt; &gt; reaper, meaning the final refcount has been dropped, do not set</span>
<span class="quote">&gt; &gt; &gt; &gt; MMF_OOM_SKIP prematurely.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; __mmput() may not have had a chance to do exit_mmap() yet, so memory from</span>
<span class="quote">&gt; &gt; &gt; &gt; a previous oom victim is still mapped.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; true and do we have a _guarantee_ it will do it? E.g. can somebody block</span>
<span class="quote">&gt; &gt; &gt; exit_aio from completing? Or can somebody hold mmap_sem and thus block</span>
<span class="quote">&gt; &gt; &gt; ksm_exit resp. khugepaged_exit from completing? The reason why I was</span>
<span class="quote">&gt; &gt; &gt; conservative and set such a mm as MMF_OOM_SKIP was because I couldn&#39;t</span>
<span class="quote">&gt; &gt; &gt; give a definitive answer to those questions. And we really _want_ to</span>
<span class="quote">&gt; &gt; &gt; have a guarantee of a forward progress here. Killing an additional</span>
<span class="quote">&gt; &gt; &gt; proecess is a price to pay and if that doesn&#39;t trigger normall it sounds</span>
<span class="quote">&gt; &gt; &gt; like a reasonable compromise to me.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Right. If you want this patch, __oom_reap_task_mm() must not return true without</span>
<span class="quote">&gt; &gt; setting MMF_OOM_SKIP (in other words, return false if __oom_reap_task_mm()</span>
<span class="quote">&gt; &gt; does not set MMF_OOM_SKIP). The most important role of the OOM reaper is to</span>
<span class="quote">&gt; &gt; guarantee that the OOM killer is re-enabled within finite time, for __mmput()</span>
<span class="quote">&gt; &gt; cannot guarantee that MMF_OOM_SKIP is set within finite time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; An alternative would be to allow reaping and exit_mmap race. The unmap</span>
<span class="quote">&gt; part should just work I guess. We just have to be careful to not race</span>
<span class="quote">&gt; with free_pgtables and that shouldn&#39;t be too hard to implement (e.g.</span>
<span class="quote">&gt; (ab)use mmap_sem for write there). I haven&#39;t thought that through</span>
<span class="quote">&gt; completely though so I might miss something of course.</span>

Just to illustrate what I&#39;ve had in mind. This is completely untested
(not even compile tested) and it may be completely broken but let&#39;s try
to evaluate this approach.
---
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/mmap.c b/mm/mmap.c</span>
<span class="p_header">index 3bd5ecd20d4d..761ba1dc9ec6 100644</span>
<span class="p_header">--- a/mm/mmap.c</span>
<span class="p_header">+++ b/mm/mmap.c</span>
<span class="p_chunk">@@ -2962,7 +2962,13 @@</span> <span class="p_context"> void exit_mmap(struct mm_struct *mm)</span>
 	/* Use -1 here to ensure all VMAs in the mm are unmapped */
 	unmap_vmas(&amp;tlb, vma, 0, -1);
 
<span class="p_add">+	/*</span>
<span class="p_add">+	 * oom reaper might race with exit_mmap so make sure we won&#39;t free</span>
<span class="p_add">+	 * page tables under its feet</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	down_write(&amp;mm-&gt;mmap_sem);</span>
 	free_pgtables(&amp;tlb, vma, FIRST_USER_ADDRESS, USER_PGTABLES_CEILING);
<span class="p_add">+	up_write(&amp;mm-&gt;mmap_sem);</span>
 	tlb_finish_mmu(&amp;tlb, 0, -1);
 
 	/*
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 0e2c925e7826..3df464f0f48b 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -494,16 +494,6 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 	}
 
 	/*
<span class="p_del">-	 * increase mm_users only after we know we will reap something so</span>
<span class="p_del">-	 * that the mmput_async is called only when we have reaped something</span>
<span class="p_del">-	 * and delayed __mmput doesn&#39;t matter that much</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	if (!mmget_not_zero(mm)) {</span>
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_del">-		goto unlock_oom;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
 	 * Tell all users of get_user/copy_from_user etc... that the content
 	 * is no longer stable. No barriers really needed because unmapping
 	 * should imply barriers already and the reader would hit a page fault
<span class="p_chunk">@@ -537,13 +527,6 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 			K(get_mm_counter(mm, MM_FILEPAGES)),
 			K(get_mm_counter(mm, MM_SHMEMPAGES)));
 	up_read(&amp;mm-&gt;mmap_sem);
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * Drop our reference but make sure the mmput slow path is called from a</span>
<span class="p_del">-	 * different context because we shouldn&#39;t risk we get stuck there and</span>
<span class="p_del">-	 * put the oom_reaper out of the way.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-	mmput_async(mm);</span>
 unlock_oom:
 	mutex_unlock(&amp;oom_lock);
 	return ret;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



