
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot; - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot;</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 4, 2017, 11:16 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;c513bbd4e653747213e05bc7062de000bf0202a5.1509793738.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10041489/mbox/"
   >mbox</a>
|
   <a href="/patch/10041489/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10041489/">/patch/10041489/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	5417C6032D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 11:16:26 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 4990529344
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 11:16:26 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 3B8B42943B; Sat,  4 Nov 2017 11:16:26 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A018E29344
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sat,  4 Nov 2017 11:16:25 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756649AbdKDLQT (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sat, 4 Nov 2017 07:16:19 -0400
Received: from mail.kernel.org ([198.145.29.99]:36782 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751400AbdKDLQR (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sat, 4 Nov 2017 07:16:17 -0400
Received: from localhost (199.28.71.37.rev.sfr.net [37.71.28.199])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id EFA7B21871;
	Sat,  4 Nov 2017 11:16:15 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org EFA7B21871
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: X86 ML &lt;x86@kernel.org&gt;
Cc: Borislav Petkov &lt;bpetkov@suse.de&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [PATCH urgent] Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot;
Date: Sat,  4 Nov 2017 04:16:12 -0700
Message-Id: &lt;c513bbd4e653747213e05bc7062de000bf0202a5.1509793738.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.13.6
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Nov. 4, 2017, 11:16 a.m.</div>
<pre class="content">
This reverts commit 43858b4f25cf0adc5c2ca9cf5ce5fdf2532941e5.

The reason I removed the leave_mm() calls in question is because the
heuristic wasn&#39;t needed after that patch.  With the original version
of my PCID series, we never flushed a &quot;lazy cpu&quot; (i.e. a CPU running
kernel thread) due a flush on the loaded mm.

Unfortunately, that caused architectural issues, so now I&#39;ve
reinstated these flushes on non-PCID systems in

    commit b956575bed91 (&quot;x86/mm: Flush more aggressively in lazy TLB mode&quot;).

That, in turn, gives us a power management and occasionally
performance regression as compared to old kernels: a process that
goes into a deep idle state on a given CPU and gets its mm flushed
due to activity on a different CPU will wake the idle CPU.

Reinstate the old ugly heuristic: if a CPU goes into ACPI C3 or an
intel_idle state that is likely to cause a TLB flush gets its mm
switched to init_mm before going idle.

FWIW, this heuristic is lousy.  Whether we should change CR3 before
idle isn&#39;t a good hint except insofar as the performance hit is a bit
lower if the TLB is getting flushed by the idle code anyway.  What we
really want to know is whether we anticipate being idle long enough
that the mm is likely to be flushed before we wake up.  Ths is more a
matter of the expected latency than the idle state that gets chosen.
This heuristic also completely fails on systems that don&#39;t know
whether the TLB will be flushed (e.g. AMD systems?).  OTOH it may be a
bit obsolete anyway -- PCID systems don&#39;t presently benefit from this
heuristic at all.

We also shouldn&#39;t do this callback from innermost bit of the idle code
due to the RCU nastiness it causes.  All the information need is
available before rcu_idle_enter() needs to happen.

Fixes: 43858b4f25cf &quot;x86/mm: Stop calling leave_mm() in idle code&quot;
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---

Sorry, got distracted by KS, travel, and entry stuff and didn&#39;t send
this.

 arch/ia64/include/asm/acpi.h  |  2 ++
 arch/x86/include/asm/acpi.h   |  2 ++
 arch/x86/mm/tlb.c             | 18 +++++++++++++++---
 drivers/acpi/processor_idle.c |  2 ++
 drivers/idle/intel_idle.c     |  9 +++++----
 5 files changed, 26 insertions(+), 7 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ia64/include/asm/acpi.h b/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">index c86a947f5368..a3d0211970e9 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -112,6 +112,8 @@</span> <span class="p_context"> static inline void arch_acpi_set_pdc_bits(u32 *buf)</span>
 	buf[2] |= ACPI_PDC_EST_CAPABILITY_SMP;
 }
 
<span class="p_add">+#define acpi_unlazy_tlb(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_NUMA
 extern cpumask_t early_cpu_possible_map;
 #define for_each_possible_early_cpu(cpu)  \
<span class="p_header">diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="p_header">index 72d867f6b518..8d0ec9df1cbe 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/acpi.h</span>
<span class="p_chunk">@@ -150,6 +150,8 @@</span> <span class="p_context"> static inline void disable_acpi(void) { }</span>
 extern int x86_acpi_numa_init(void);
 #endif /* CONFIG_ACPI_NUMA */
 
<span class="p_add">+#define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_APEI
 static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
 {
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 0f3d0cea4d00..7b6444fd2f36 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 
 	switch_mm(NULL, &amp;init_mm, NULL);
 }
<span class="p_add">+EXPORT_SYMBOL_GPL(leave_mm);</span>
 
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
<span class="p_chunk">@@ -195,12 +196,23 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].ctx_id, next-&gt;context.ctx_id);
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].tlb_gen, next_tlb_gen);
 			write_cr3(build_cr3(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_del">-					TLB_FLUSH_ALL);</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * NB: This gets called via leave_mm() in the idle path</span>
<span class="p_add">+			 * where RCU functions differently.  Tracing normally</span>
<span class="p_add">+			 * uses RCU, so  we need to use the _rcuidle variant.</span>
<span class="p_add">+			 *</span>
<span class="p_add">+			 * (There is no good reason for this.  The idle code should</span>
<span class="p_add">+			 *  be rearranged to call this before rcu_idle_enter().)</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_add">+						TLB_FLUSH_ALL);</span>
 		} else {
 			/* The new ASID is already up to date. */
 			write_cr3(build_cr3_noflush(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			/* See above wrt _rcuidle. */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
 		}
 
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
<span class="p_header">diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c</span>
<span class="p_header">index 2736e25e9dc6..d50a7b6ccddd 100644</span>
<span class="p_header">--- a/drivers/acpi/processor_idle.c</span>
<span class="p_header">+++ b/drivers/acpi/processor_idle.c</span>
<span class="p_chunk">@@ -710,6 +710,8 @@</span> <span class="p_context"> static DEFINE_RAW_SPINLOCK(c3_lock);</span>
 static void acpi_idle_enter_bm(struct acpi_processor *pr,
 			       struct acpi_processor_cx *cx, bool timer_bc)
 {
<span class="p_add">+	acpi_unlazy_tlb(smp_processor_id());</span>
<span class="p_add">+</span>
 	/*
 	 * Must be done before busmaster disable as we might need to
 	 * access HPET !
<span class="p_header">diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c</span>
<span class="p_header">index 5dc7ea4b6bc4..f0b06b14e782 100644</span>
<span class="p_header">--- a/drivers/idle/intel_idle.c</span>
<span class="p_header">+++ b/drivers/idle/intel_idle.c</span>
<span class="p_chunk">@@ -913,15 +913,16 @@</span> <span class="p_context"> static __cpuidle int intel_idle(struct cpuidle_device *dev,</span>
 	struct cpuidle_state *state = &amp;drv-&gt;states[index];
 	unsigned long eax = flg2MWAIT(state-&gt;flags);
 	unsigned int cstate;
<span class="p_add">+	int cpu = smp_processor_id();</span>
 
 	cstate = (((eax) &gt;&gt; MWAIT_SUBSTATE_SIZE) &amp; MWAIT_CSTATE_MASK) + 1;
 
 	/*
<span class="p_del">-	 * NB: if CPUIDLE_FLAG_TLB_FLUSHED is set, this idle transition</span>
<span class="p_del">-	 * will probably flush the TLB.  It&#39;s not guaranteed to flush</span>
<span class="p_del">-	 * the TLB, though, so it&#39;s not clear that we can do anything</span>
<span class="p_del">-	 * useful with this knowledge.</span>
<span class="p_add">+	 * leave_mm() to avoid costly and often unnecessary wakeups</span>
<span class="p_add">+	 * for flushing the user TLB&#39;s associated with the active mm.</span>
 	 */
<span class="p_add">+	if (state-&gt;flags &amp; CPUIDLE_FLAG_TLB_FLUSHED)</span>
<span class="p_add">+		leave_mm(cpu);</span>
 
 	if (!(lapic_timer_reliable_states &amp; (1 &lt;&lt; (cstate))))
 		tick_broadcast_enter();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



