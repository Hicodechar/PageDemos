
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,06/10] x86/mm: Stop calling leave_mm() in idle code - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,06/10] x86/mm: Stop calling leave_mm() in idle code</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 14, 2017, 4:56 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;f48afbbfc246354c3696af035aacdac659ff9054.1497415951.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9785337/mbox/"
   >mbox</a>
|
   <a href="/patch/9785337/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9785337/">/patch/9785337/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	487AC602C9 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 04:56:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2330928575
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 04:56:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 180262858E; Wed, 14 Jun 2017 04:56:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8FAC328575
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 14 Jun 2017 04:56:54 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754324AbdFNE4t (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 14 Jun 2017 00:56:49 -0400
Received: from mail.kernel.org ([198.145.29.99]:45854 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754302AbdFNE4p (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 14 Jun 2017 00:56:45 -0400
Received: from localhost (c-71-202-137-17.hsd1.ca.comcast.net
	[71.202.137.17])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256
	bits)) (No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id ED81923A02;
	Wed, 14 Jun 2017 04:56:39 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mail.kernel.org ED81923A02
Authentication-Results: mail.kernel.org;
	dmarc=none (p=none dis=none) header.from=kernel.org
Authentication-Results: mail.kernel.org;
	spf=none smtp.mailfrom=luto@kernel.org
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org
Cc: linux-kernel@vger.kernel.org, Borislav Petkov &lt;bp@alien8.de&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Nadav Amit &lt;nadav.amit@gmail.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;,
	Peter Zijlstra &lt;peterz@infradead.org&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [PATCH v2 06/10] x86/mm: Stop calling leave_mm() in idle code
Date: Tue, 13 Jun 2017 21:56:24 -0700
Message-Id: &lt;f48afbbfc246354c3696af035aacdac659ff9054.1497415951.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;cover.1497415951.git.luto@kernel.org&gt;
References: &lt;cover.1497415951.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1497415951.git.luto@kernel.org&gt;
References: &lt;cover.1497415951.git.luto@kernel.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - June 14, 2017, 4:56 a.m.</div>
<pre class="content">
Now that lazy TLB suppresses all flush IPIs (as opposed to all but
the first), there&#39;s no need to leave_mm() when going idle.

This means we can get rid of the rcuidle hack in
switch_mm_irqs_off() and we can unexport leave_mm().

This also removes acpi_unlazy_tlb() from the x86 and ia64 headers,
since it has no callers any more.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/ia64/include/asm/acpi.h  |  2 --
 arch/x86/include/asm/acpi.h   |  2 --
 arch/x86/mm/tlb.c             | 19 +++----------------
 drivers/acpi/processor_idle.c |  2 --
 drivers/idle/intel_idle.c     |  9 ++++-----
 5 files changed, 7 insertions(+), 27 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ia64/include/asm/acpi.h b/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">index a3d0211970e9..c86a947f5368 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -112,8 +112,6 @@</span> <span class="p_context"> static inline void arch_acpi_set_pdc_bits(u32 *buf)</span>
 	buf[2] |= ACPI_PDC_EST_CAPABILITY_SMP;
 }
 
<span class="p_del">-#define acpi_unlazy_tlb(x)</span>
<span class="p_del">-</span>
 #ifdef CONFIG_ACPI_NUMA
 extern cpumask_t early_cpu_possible_map;
 #define for_each_possible_early_cpu(cpu)  \
<span class="p_header">diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="p_header">index 2efc768e4362..562286fa151f 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/acpi.h</span>
<span class="p_chunk">@@ -150,8 +150,6 @@</span> <span class="p_context"> static inline void disable_acpi(void) { }</span>
 extern int x86_acpi_numa_init(void);
 #endif /* CONFIG_ACPI_NUMA */
 
<span class="p_del">-#define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="p_del">-</span>
 #ifdef CONFIG_ACPI_APEI
 static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
 {
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index fea2b07ac7d8..5f932fd80881 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -50,7 +50,6 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 
 	switch_mm(NULL, &amp;init_mm, NULL);
 }
<span class="p_del">-EXPORT_SYMBOL_GPL(leave_mm);</span>
 
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
<span class="p_chunk">@@ -113,14 +112,8 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			this_cpu_write(cpu_tlbstate.ctxs[0].tlb_gen,
 				       next_tlb_gen);
 			write_cr3(__pa(next-&gt;pgd));
<span class="p_del">-			/*</span>
<span class="p_del">-			 * This gets called via leave_mm() in the idle path</span>
<span class="p_del">-			 * where RCU functions differently.  Tracing normally</span>
<span class="p_del">-			 * uses RCU, so we have to call the tracepoint</span>
<span class="p_del">-			 * specially here.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_del">-						TLB_FLUSH_ALL);</span>
<span class="p_add">+			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_add">+					TLB_FLUSH_ALL);</span>
 		}
 
 		/*
<span class="p_chunk">@@ -166,13 +159,7 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
 		write_cr3(__pa(next-&gt;pgd));
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * This gets called via leave_mm() in the idle path where RCU</span>
<span class="p_del">-		 * functions differently.  Tracing normally uses RCU, so we</span>
<span class="p_del">-		 * have to call the tracepoint specially here.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_del">-					TLB_FLUSH_ALL);</span>
<span class="p_add">+		trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
 	}
 
 	load_mm_cr4(next);
<span class="p_header">diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c</span>
<span class="p_header">index 5c8aa9cf62d7..fe3d2a40f311 100644</span>
<span class="p_header">--- a/drivers/acpi/processor_idle.c</span>
<span class="p_header">+++ b/drivers/acpi/processor_idle.c</span>
<span class="p_chunk">@@ -708,8 +708,6 @@</span> <span class="p_context"> static DEFINE_RAW_SPINLOCK(c3_lock);</span>
 static void acpi_idle_enter_bm(struct acpi_processor *pr,
 			       struct acpi_processor_cx *cx, bool timer_bc)
 {
<span class="p_del">-	acpi_unlazy_tlb(smp_processor_id());</span>
<span class="p_del">-</span>
 	/*
 	 * Must be done before busmaster disable as we might need to
 	 * access HPET !
<span class="p_header">diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c</span>
<span class="p_header">index 216d7ec88c0c..2ae43f59091d 100644</span>
<span class="p_header">--- a/drivers/idle/intel_idle.c</span>
<span class="p_header">+++ b/drivers/idle/intel_idle.c</span>
<span class="p_chunk">@@ -912,16 +912,15 @@</span> <span class="p_context"> static __cpuidle int intel_idle(struct cpuidle_device *dev,</span>
 	struct cpuidle_state *state = &amp;drv-&gt;states[index];
 	unsigned long eax = flg2MWAIT(state-&gt;flags);
 	unsigned int cstate;
<span class="p_del">-	int cpu = smp_processor_id();</span>
 
 	cstate = (((eax) &gt;&gt; MWAIT_SUBSTATE_SIZE) &amp; MWAIT_CSTATE_MASK) + 1;
 
 	/*
<span class="p_del">-	 * leave_mm() to avoid costly and often unnecessary wakeups</span>
<span class="p_del">-	 * for flushing the user TLB&#39;s associated with the active mm.</span>
<span class="p_add">+	 * NB: if CPUIDLE_FLAG_TLB_FLUSHED is set, this idle transition</span>
<span class="p_add">+	 * will probably flush the TLB.  It&#39;s not guaranteed to flush</span>
<span class="p_add">+	 * the TLB, though, so it&#39;s not clear that we can do anything</span>
<span class="p_add">+	 * useful with this knowledge.</span>
 	 */
<span class="p_del">-	if (state-&gt;flags &amp; CPUIDLE_FLAG_TLB_FLUSHED)</span>
<span class="p_del">-		leave_mm(cpu);</span>
 
 	if (!(lapic_timer_reliable_states &amp; (1 &lt;&lt; (cstate))))
 		tick_broadcast_enter();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



