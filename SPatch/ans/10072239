
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[01/11] Initialize the mapping of KASan shadow memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [01/11] Initialize the mapping of KASan shadow memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=176771">Abbott Liu</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2017, 1:54 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;B8AC3E80E903784988AB3003E3E97330C0069083@dggemm510-mbx.china.huawei.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10072239/mbox/"
   >mbox</a>
|
   <a href="/patch/10072239/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10072239/">/patch/10072239/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9A74060353 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 01:56:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 88FFA29D0B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 01:56:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7D59729D2C; Thu, 23 Nov 2017 01:56:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7427629D0B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 01:56:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752074AbdKWB4u (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 22 Nov 2017 20:56:50 -0500
Received: from szxga03-in.huawei.com ([45.249.212.189]:13363 &quot;EHLO
	szxga03-in.huawei.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751525AbdKWB4s (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 22 Nov 2017 20:56:48 -0500
Received: from 172.30.72.54 (EHLO DGGEMM402-HUB.china.huawei.com)
	([172.30.72.54])
	by dggrg03-dlp.huawei.com (MOS 4.4.6-GA FastPath queued)
	with ESMTP id AZF70592; Thu, 23 Nov 2017 09:55:12 +0800 (CST)
Received: from DGGEMM421-HUB.china.huawei.com (10.1.198.38) by
	DGGEMM402-HUB.china.huawei.com (10.3.20.210) with Microsoft SMTP
	Server (TLS) id 14.3.361.1; Thu, 23 Nov 2017 09:55:09 +0800
Received: from DGGEMM510-MBX.china.huawei.com ([169.254.12.180]) by
	dggemm421-hub.china.huawei.com ([10.1.198.38]) with mapi id
	14.03.0361.001; Thu, 23 Nov 2017 09:55:00 +0800
From: &quot;Liuwenliang (Abbott Liu)&quot; &lt;liuwenliang@huawei.com&gt;
To: Marc Zyngier &lt;marc.zyngier@arm.com&gt;, Mark Rutland &lt;mark.rutland@arm.com&gt;
CC: &quot;tixy@linaro.org&quot; &lt;tixy@linaro.org&gt;, &quot;mhocko@suse.com&quot; &lt;mhocko@suse.com&gt;,
	&quot;grygorii.strashko@linaro.org&quot; &lt;grygorii.strashko@linaro.org&gt;,
	&quot;catalin.marinas@arm.com&quot; &lt;catalin.marinas@arm.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	&quot;glider@google.com&quot; &lt;glider@google.com&gt;,
	&quot;afzal.mohd.ma@gmail.com&quot; &lt;afzal.mohd.ma@gmail.com&gt;,
	&quot;mingo@kernel.org&quot; &lt;mingo@kernel.org&gt;,
	Christoffer Dall &lt;cdall@linaro.org&gt;,
	&quot;f.fainelli@gmail.com&quot; &lt;f.fainelli@gmail.com&gt;,
	&quot;mawilcox@microsoft.com&quot; &lt;mawilcox@microsoft.com&gt;,
	&quot;linux@armlinux.org.uk&quot; &lt;linux@armlinux.org.uk&gt;,
	&quot;kasan-dev@googlegroups.com&quot; &lt;kasan-dev@googlegroups.com&gt;,
	Dailei &lt;dylix.dailei@huawei.com&gt;, &quot;linux-arm-kernel@lists.infradead.org&quot; 
	&lt;linux-arm-kernel@lists.infradead.org&gt;,
	&quot;aryabinin@virtuozzo.com&quot; &lt;aryabinin@virtuozzo.com&gt;,
	&quot;labbott@redhat.com&quot; &lt;labbott@redhat.com&gt;,
	&quot;vladimir.murzin@arm.com&quot; &lt;vladimir.murzin@arm.com&gt;,
	&quot;keescook@chromium.org&quot; &lt;keescook@chromium.org&gt;,
	&quot;arnd@arndb.de&quot; &lt;arnd@arndb.de&gt;, Zengweilin &lt;zengweilin@huawei.com&gt;,
	&quot;opendmb@gmail.com&quot; &lt;opendmb@gmail.com&gt;,
	Heshaoliang &lt;heshaoliang@huawei.com&gt;,
	&quot;tglx@linutronix.de&quot; &lt;tglx@linutronix.de&gt;,
	&quot;dvyukov@google.com&quot; &lt;dvyukov@google.com&gt;,
	&quot;ard.biesheuvel@linaro.org&quot; &lt;ard.biesheuvel@linaro.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Jiazhenghua &lt;jiazhenghua@huawei.com&gt;,
	&quot;akpm@linux-foundation.org&quot; &lt;akpm@linux-foundation.org&gt;,
	&quot;robin.murphy@arm.com&quot; &lt;robin.murphy@arm.com&gt;,
	&quot;thgarnie@google.com&quot; &lt;thgarnie@google.com&gt;,
	&quot;kirill.shutemov@linux.intel.com&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: Re: [PATCH 01/11] Initialize the mapping of KASan shadow memory
Thread-Topic: [PATCH 01/11] Initialize the mapping of KASan shadow memory
Thread-Index: AQHTY5FZRgwPxy9r6kqLVsGKXnTkPKMf2B8AgAFa0pA=
Date: Thu, 23 Nov 2017 01:54:59 +0000
Message-ID: &lt;B8AC3E80E903784988AB3003E3E97330C0069083@dggemm510-mbx.china.huawei.com&gt;
References: &lt;bbf43f92-3d0c-940d-b66b-68f92eb9b282@arm.com&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C00635F3@dggemm510-mbs.china.huawei.com&gt;
	&lt;87po8ir1kg.fsf@on-the-bus.cambridge.arm.com&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C006371B@dggemm510-mbs.china.huawei.com&gt;
	&lt;87375eqobb.fsf@on-the-bus.cambridge.arm.com&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C0063816@dggemm510-mbs.china.huawei.com&gt;
	&lt;20171117073556.GB28855@cbox&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C00638D4@dggemm510-mbs.china.huawei.com&gt;
	&lt;20171118134841.3f6c9183@why.wild-wind.fr.eu.org&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C0068F12@dggemm510-mbx.china.huawei.com&gt;
	&lt;20171121122938.sydii3i36jbzi7x4@lakrids.cambridge.arm.com&gt;
	&lt;B8AC3E80E903784988AB3003E3E97330C0069032@dggemm510-mbx.china.huawei.com&gt;
	&lt;757534e5-fcea-3eb4-3c8d-b8c7e709f555@arm.com&gt;
In-Reply-To: &lt;757534e5-fcea-3eb4-3c8d-b8c7e709f555@arm.com&gt;
Accept-Language: en-US
Content-Language: zh-CN
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.57.90.243]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
X-CFilter-Loop: Reflected
X-Mirapoint-Virus-RAPID-Raw: score=unknown(0),
	refid=str=0001.0A0C0207.5A162A82.0056, ss=1, re=0.000, recu=0.000,
	reip=0.000, cl=1, cld=1, fgs=0, 
	ip=169.254.12.180, so=2014-11-16 11:51:01,
	dmn=2013-03-21 17:37:32
X-Mirapoint-Loop-Id: 656b33ec11cc64de7e525d8b592277a7
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176771">Abbott Liu</a> - Nov. 23, 2017, 1:54 a.m.</div>
<pre class="content">
On Nov 23, 2017  20:30  Marc Zyngier [mailto:marc.zyngier@arm.com]  wrote:
<span class="quote">&gt;Please define both PAR accessors. Yes, I know the 32bit version is not</span>
<span class="quote">&gt;used yet, but it doesn&#39;t hurt to make it visible.</span>

Thanks for your review.
I&#39;m going to change it in the new version.
Here is the code I tested on vexpress_a9 and vexpress_a15:



-----邮件原件-----
发件人: Marc Zyngier [mailto:marc.zyngier@arm.com] 
发送时间: 2017年11月22日 21:06
收件人: Liuwenliang (Abbott Liu); Mark Rutland
抄送: tixy@linaro.org; mhocko@suse.com; grygorii.strashko@linaro.org; catalin.marinas@arm.com; linux-mm@kvack.org; glider@google.com; afzal.mohd.ma@gmail.com; mingo@kernel.org; Christoffer Dall; f.fainelli@gmail.com; mawilcox@microsoft.com; linux@armlinux.org.uk; kasan-dev@googlegroups.com; Dailei; linux-arm-kernel@lists.infradead.org; aryabinin@virtuozzo.com; labbott@redhat.com; vladimir.murzin@arm.com; keescook@chromium.org; arnd@arndb.de; Zengweilin; opendmb@gmail.com; Heshaoliang; tglx@linutronix.de; dvyukov@google.com; ard.biesheuvel@linaro.org; linux-kernel@vger.kernel.org; Jiazhenghua; akpm@linux-foundation.org; robin.murphy@arm.com; thgarnie@google.com; kirill.shutemov@linux.intel.com
主题: Re: [PATCH 01/11] Initialize the mapping of KASan shadow memory

On 22/11/17 12:56, Liuwenliang (Abbott Liu) wrote:
<span class="quote">&gt; On Nov 22, 2017  20:30  Mark Rutland [mailto:mark.rutland@arm.com] wrote:</span>
<span class="quote">&gt;&gt; On Tue, Nov 21, 2017 at 07:59:01AM +0000, Liuwenliang (Abbott Liu) wrote:</span>
<span class="quote">&gt;&gt;&gt; On Nov 17, 2017  21:49  Marc Zyngier [mailto:marc.zyngier@arm.com]  wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On Sat, 18 Nov 2017 10:40:08 +0000</span>
<span class="quote">&gt;&gt;&gt;&gt; &quot;Liuwenliang (Abbott Liu)&quot; &lt;liuwenliang@huawei.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; On Nov 17, 2017  15:36 Christoffer Dall [mailto:cdall@linaro.org]  wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; Please don&#39;t ask people to limit to 4GB of physical space on CPU</span>
<span class="quote">&gt;&gt;&gt; supporting LPAE, please don&#39;t ask people to guaranteed to have some</span>
<span class="quote">&gt;&gt;&gt; memory below 4GB on CPU supporting LPAE.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; I don&#39;t think that Marc is suggesting that you&#39;d always use the 32-bit</span>
<span class="quote">&gt;&gt; accessors on an LPAE system, just that all the definitions should exist</span>
<span class="quote">&gt;&gt; regardless of configuration.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; So rather than this:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; +#ifdef CONFIG_ARM_LPAE</span>
<span class="quote">&gt;&gt;&gt; +#define TTBR0           __ACCESS_CP15_64(0, c2)</span>
<span class="quote">&gt;&gt;&gt; +#define TTBR1           __ACCESS_CP15_64(1, c2)</span>
<span class="quote">&gt;&gt;&gt; +#define PAR             __ACCESS_CP15_64(0, c7)</span>
<span class="quote">&gt;&gt;&gt; +#else</span>
<span class="quote">&gt;&gt;&gt; +#define TTBR0           __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="quote">&gt;&gt;&gt; +#define TTBR1           __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="quote">&gt;&gt;&gt; +#define PAR             __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="quote">&gt;&gt;&gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; ... you&#39;d have the following in cp15.h:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; #define TTBR0_64       __ACCESS_CP15_64(0, c2)</span>
<span class="quote">&gt;&gt; #define TTBR1_64       __ACCESS_CP15_64(1, c2)</span>
<span class="quote">&gt;&gt; #define PAR_64         __ACCESS_CP15_64(0, c7)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; #define TTBR0_32       __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="quote">&gt;&gt; #define TTBR1_32       __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="quote">&gt;&gt; #define PAR_32         __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; ... and elsewhere, where it matters, we choose which to use depending on</span>
<span class="quote">&gt;&gt; the kernel configuration, e.g.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; void set_ttbr0(u64 val)</span>
<span class="quote">&gt;&gt; {</span>
<span class="quote">&gt;&gt;       if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt;&gt;               write_sysreg(val, TTBR0_64);</span>
<span class="quote">&gt;&gt;       else</span>
<span class="quote">&gt;&gt;               write_sysreg(val, TTBR0_32);</span>
<span class="quote">&gt;&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt; Mark.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for your solution.</span>
<span class="quote">&gt; I didn&#39;t know there was a IS_ENABLED macro that I can use, so I can&#39;t write a function </span>
<span class="quote">&gt; like:</span>
<span class="quote">&gt; void set_ttbr0(u64 val)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt;        if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt;                write_sysreg(val, TTBR0_64);</span>
<span class="quote">&gt;        else</span>
<span class="quote">&gt;                write_sysreg(val, TTBR0_32);</span>
<span class="quote">&gt; }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Here is the code I tested on vexpress_a9 and vexpress_a15:</span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/cp15.h b/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; index dbdbce1..5eb0185 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; @@ -2,6 +2,7 @@</span>
<span class="quote">&gt;  #define __ASM_ARM_CP15_H</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &lt;asm/barrier.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/stringify.h&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * CR1 bits (CP#15 CR1)</span>
<span class="quote">&gt; @@ -64,8 +65,93 @@</span>
<span class="quote">&gt;  #define __write_sysreg(v, r, w, c, t)  asm volatile(w &quot; &quot; c : : &quot;r&quot; ((t)(v)))</span>
<span class="quote">&gt;  #define write_sysreg(v, ...)           __write_sysreg(v, __VA_ARGS__)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#define TTBR0_32           __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="quote">&gt; +#define TTBR1_32           __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="quote">&gt; +#define TTBR0_64           __ACCESS_CP15_64(0, c2)</span>
<span class="quote">&gt; +#define TTBR1_64           __ACCESS_CP15_64(1, c2)</span>
<span class="quote">&gt; +#define PAR             __ACCESS_CP15_64(0, c7)</span>

Please define both PAR accessors. Yes, I know the 32bit version is not
used yet, but it doesn&#39;t hurt to make it visible.

Thanks,

	M.
-- 
Jazz is not dead. It just smells funny...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=166571">Russell King - ARM Linux</a> - Nov. 23, 2017, 3:22 p.m.</div>
<pre class="content">
On Thu, Nov 23, 2017 at 01:54:59AM +0000, Liuwenliang (Abbott Liu) wrote:
<span class="quote">&gt; On Nov 23, 2017  20:30  Marc Zyngier [mailto:marc.zyngier@arm.com]  wrote:</span>
<span class="quote">&gt; &gt;Please define both PAR accessors. Yes, I know the 32bit version is not</span>
<span class="quote">&gt; &gt;used yet, but it doesn&#39;t hurt to make it visible.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks for your review.</span>
<span class="quote">&gt; I&#39;m going to change it in the new version.</span>
<span class="quote">&gt; Here is the code I tested on vexpress_a9 and vexpress_a15:</span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/cp15.h b/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; index dbdbce1..b8353b1 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/cp15.h</span>
<span class="quote">&gt; @@ -2,6 +2,7 @@</span>
<span class="quote">&gt;  #define __ASM_ARM_CP15_H</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &lt;asm/barrier.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/stringify.h&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * CR1 bits (CP#15 CR1)</span>
<span class="quote">&gt; @@ -64,8 +65,109 @@</span>
<span class="quote">&gt;  #define __write_sysreg(v, r, w, c, t)  asm volatile(w &quot; &quot; c : : &quot;r&quot; ((t)(v)))</span>
<span class="quote">&gt;  #define write_sysreg(v, ...)           __write_sysreg(v, __VA_ARGS__)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#define TTBR0_32     __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="quote">&gt; +#define TTBR1_32     __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="quote">&gt; +#define PAR_32               __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="quote">&gt; +#define TTBR0_64     __ACCESS_CP15_64(0, c2)</span>
<span class="quote">&gt; +#define TTBR1_64     __ACCESS_CP15_64(1, c2)</span>
<span class="quote">&gt; +#define PAR_64               __ACCESS_CP15_64(0, c7)</span>
<span class="quote">&gt; +#define VTTBR           __ACCESS_CP15_64(6, c2)</span>
<span class="quote">&gt; +#define CNTV_CVAL       __ACCESS_CP15_64(3, c14)</span>
<span class="quote">&gt; +#define CNTVOFF         __ACCESS_CP15_64(4, c14)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define MIDR            __ACCESS_CP15(c0, 0, c0, 0)</span>
<span class="quote">&gt; +#define CSSELR          __ACCESS_CP15(c0, 2, c0, 0)</span>
<span class="quote">&gt; +#define VPIDR           __ACCESS_CP15(c0, 4, c0, 0)</span>
<span class="quote">&gt; +#define VMPIDR          __ACCESS_CP15(c0, 4, c0, 5)</span>
<span class="quote">&gt; +#define SCTLR           __ACCESS_CP15(c1, 0, c0, 0)</span>
<span class="quote">&gt; +#define CPACR           __ACCESS_CP15(c1, 0, c0, 2)</span>
<span class="quote">&gt; +#define HCR             __ACCESS_CP15(c1, 4, c1, 0)</span>
<span class="quote">&gt; +#define HDCR            __ACCESS_CP15(c1, 4, c1, 1)</span>
<span class="quote">&gt; +#define HCPTR           __ACCESS_CP15(c1, 4, c1, 2)</span>
<span class="quote">&gt; +#define HSTR            __ACCESS_CP15(c1, 4, c1, 3)</span>
<span class="quote">&gt; +#define TTBCR           __ACCESS_CP15(c2, 0, c0, 2)</span>
<span class="quote">&gt; +#define HTCR            __ACCESS_CP15(c2, 4, c0, 2)</span>
<span class="quote">&gt; +#define VTCR            __ACCESS_CP15(c2, 4, c1, 2)</span>
<span class="quote">&gt; +#define DACR            __ACCESS_CP15(c3, 0, c0, 0)</span>
<span class="quote">&gt; +#define DFSR            __ACCESS_CP15(c5, 0, c0, 0)</span>
<span class="quote">&gt; +#define IFSR            __ACCESS_CP15(c5, 0, c0, 1)</span>
<span class="quote">&gt; +#define ADFSR           __ACCESS_CP15(c5, 0, c1, 0)</span>
<span class="quote">&gt; +#define AIFSR           __ACCESS_CP15(c5, 0, c1, 1)</span>
<span class="quote">&gt; +#define HSR             __ACCESS_CP15(c5, 4, c2, 0)</span>
<span class="quote">&gt; +#define DFAR            __ACCESS_CP15(c6, 0, c0, 0)</span>
<span class="quote">&gt; +#define IFAR            __ACCESS_CP15(c6, 0, c0, 2)</span>
<span class="quote">&gt; +#define HDFAR           __ACCESS_CP15(c6, 4, c0, 0)</span>
<span class="quote">&gt; +#define HIFAR           __ACCESS_CP15(c6, 4, c0, 2)</span>
<span class="quote">&gt; +#define HPFAR           __ACCESS_CP15(c6, 4, c0, 4)</span>
<span class="quote">&gt; +#define ICIALLUIS       __ACCESS_CP15(c7, 0, c1, 0)</span>
<span class="quote">&gt; +#define ATS1CPR         __ACCESS_CP15(c7, 0, c8, 0)</span>
<span class="quote">&gt; +#define TLBIALLIS       __ACCESS_CP15(c8, 0, c3, 0)</span>
<span class="quote">&gt; +#define TLBIALL         __ACCESS_CP15(c8, 0, c7, 0)</span>
<span class="quote">&gt; +#define TLBIALLNSNHIS   __ACCESS_CP15(c8, 4, c3, 4)</span>
<span class="quote">&gt; +#define PRRR            __ACCESS_CP15(c10, 0, c2, 0)</span>
<span class="quote">&gt; +#define NMRR            __ACCESS_CP15(c10, 0, c2, 1)</span>
<span class="quote">&gt; +#define AMAIR0          __ACCESS_CP15(c10, 0, c3, 0)</span>
<span class="quote">&gt; +#define AMAIR1          __ACCESS_CP15(c10, 0, c3, 1)</span>
<span class="quote">&gt; +#define VBAR            __ACCESS_CP15(c12, 0, c0, 0)</span>
<span class="quote">&gt; +#define CID             __ACCESS_CP15(c13, 0, c0, 1)</span>
<span class="quote">&gt; +#define TID_URW         __ACCESS_CP15(c13, 0, c0, 2)</span>
<span class="quote">&gt; +#define TID_URO         __ACCESS_CP15(c13, 0, c0, 3)</span>
<span class="quote">&gt; +#define TID_PRIV        __ACCESS_CP15(c13, 0, c0, 4)</span>
<span class="quote">&gt; +#define HTPIDR          __ACCESS_CP15(c13, 4, c0, 2)</span>
<span class="quote">&gt; +#define CNTKCTL         __ACCESS_CP15(c14, 0, c1, 0)</span>
<span class="quote">&gt; +#define CNTV_CTL        __ACCESS_CP15(c14, 0, c3, 1)</span>
<span class="quote">&gt; +#define CNTHCTL         __ACCESS_CP15(c14, 4, c1, 0)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  extern unsigned long cr_alignment;     /* defined in entry-armv.S */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static inline void set_par(u64 val)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +        if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +                write_sysreg(val, PAR_64);</span>
<span class="quote">&gt; +        else</span>
<span class="quote">&gt; +                write_sysreg(val, PAR_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 get_par(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +        if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +                return read_sysreg(PAR_64);</span>
<span class="quote">&gt; +        else</span>
<span class="quote">&gt; +                return (u64)read_sysreg(PAR_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void set_ttbr0(u64 val)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; + if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +         write_sysreg(val, TTBR0_64);</span>
<span class="quote">&gt; + else</span>
<span class="quote">&gt; +         write_sysreg(val, TTBR0_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 get_ttbr0(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; + if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +         return read_sysreg(TTBR0_64);</span>
<span class="quote">&gt; + else</span>
<span class="quote">&gt; +         return (u64)read_sysreg(TTBR0_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void set_ttbr1(u64 val)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; + if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +         write_sysreg(val, TTBR1_64);</span>
<span class="quote">&gt; + else</span>
<span class="quote">&gt; +         write_sysreg(val, TTBR1_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline u64 get_ttbr1(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; + if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="quote">&gt; +         return read_sysreg(TTBR1_64);</span>
<span class="quote">&gt; + else</span>
<span class="quote">&gt; +         return (u64)read_sysreg(TTBR1_32);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>

Please pay attention to the project coding style whenever creating code
for a program.  It doesn&#39;t matter what the project coding style is, as
long as you write your code to match the style that is already there.

For the kernel, that is: tabs not spaces for indentation of code.
You seem to be using a variable number of spaces for all the new code
above.

Some of it seems to be your email client thinking it knows better about
white space - and such behaviours basically makes patches unapplyable.
See Documentation/process/email-clients.rst for hints about email
clients.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176771">Abbott Liu</a> - Nov. 27, 2017, 1:23 a.m.</div>
<pre class="content">
On Nov 23, 2017  23:22  Russell King - ARM Linux [mailto:linux@armlinux.org.uk]  wrote:
<span class="quote">&gt;Please pay attention to the project coding style whenever creating code</span>
<span class="quote">&gt;for a program.  It doesn&#39;t matter what the project coding style is, as</span>
<span class="quote">&gt;long as you write your code to match the style that is already there.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;For the kernel, that is: tabs not spaces for indentation of code.</span>
<span class="quote">&gt;You seem to be using a variable number of spaces for all the new code</span>
<span class="quote">&gt;above.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;Some of it seems to be your email client thinking it knows better about</span>
<span class="quote">&gt;white space - and such behaviours basically makes patches unapplyable.</span>
<span class="quote">&gt;See Documentation/process/email-clients.rst for hints about email</span>
<span class="quote">&gt;clients.</span>
Thanks for your review.
I&#39;m going to change it in the new version.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/cp15.h b/arch/arm/include/asm/cp15.h</span>
<span class="p_header">index dbdbce1..b8353b1 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/cp15.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/cp15.h</span>
<span class="p_chunk">@@ -2,6 +2,7 @@</span> <span class="p_context"></span>
 #define __ASM_ARM_CP15_H

 #include &lt;asm/barrier.h&gt;
<span class="p_add">+#include &lt;linux/stringify.h&gt;</span>

 /*
  * CR1 bits (CP#15 CR1)
<span class="p_chunk">@@ -64,8 +65,109 @@</span> <span class="p_context"></span>
 #define __write_sysreg(v, r, w, c, t)  asm volatile(w &quot; &quot; c : : &quot;r&quot; ((t)(v)))
 #define write_sysreg(v, ...)           __write_sysreg(v, __VA_ARGS__)

<span class="p_add">+#define TTBR0_32     __ACCESS_CP15(c2, 0, c0, 0)</span>
<span class="p_add">+#define TTBR1_32     __ACCESS_CP15(c2, 0, c0, 1)</span>
<span class="p_add">+#define PAR_32               __ACCESS_CP15(c7, 0, c4, 0)</span>
<span class="p_add">+#define TTBR0_64     __ACCESS_CP15_64(0, c2)</span>
<span class="p_add">+#define TTBR1_64     __ACCESS_CP15_64(1, c2)</span>
<span class="p_add">+#define PAR_64               __ACCESS_CP15_64(0, c7)</span>
<span class="p_add">+#define VTTBR           __ACCESS_CP15_64(6, c2)</span>
<span class="p_add">+#define CNTV_CVAL       __ACCESS_CP15_64(3, c14)</span>
<span class="p_add">+#define CNTVOFF         __ACCESS_CP15_64(4, c14)</span>
<span class="p_add">+</span>
<span class="p_add">+#define MIDR            __ACCESS_CP15(c0, 0, c0, 0)</span>
<span class="p_add">+#define CSSELR          __ACCESS_CP15(c0, 2, c0, 0)</span>
<span class="p_add">+#define VPIDR           __ACCESS_CP15(c0, 4, c0, 0)</span>
<span class="p_add">+#define VMPIDR          __ACCESS_CP15(c0, 4, c0, 5)</span>
<span class="p_add">+#define SCTLR           __ACCESS_CP15(c1, 0, c0, 0)</span>
<span class="p_add">+#define CPACR           __ACCESS_CP15(c1, 0, c0, 2)</span>
<span class="p_add">+#define HCR             __ACCESS_CP15(c1, 4, c1, 0)</span>
<span class="p_add">+#define HDCR            __ACCESS_CP15(c1, 4, c1, 1)</span>
<span class="p_add">+#define HCPTR           __ACCESS_CP15(c1, 4, c1, 2)</span>
<span class="p_add">+#define HSTR            __ACCESS_CP15(c1, 4, c1, 3)</span>
<span class="p_add">+#define TTBCR           __ACCESS_CP15(c2, 0, c0, 2)</span>
<span class="p_add">+#define HTCR            __ACCESS_CP15(c2, 4, c0, 2)</span>
<span class="p_add">+#define VTCR            __ACCESS_CP15(c2, 4, c1, 2)</span>
<span class="p_add">+#define DACR            __ACCESS_CP15(c3, 0, c0, 0)</span>
<span class="p_add">+#define DFSR            __ACCESS_CP15(c5, 0, c0, 0)</span>
<span class="p_add">+#define IFSR            __ACCESS_CP15(c5, 0, c0, 1)</span>
<span class="p_add">+#define ADFSR           __ACCESS_CP15(c5, 0, c1, 0)</span>
<span class="p_add">+#define AIFSR           __ACCESS_CP15(c5, 0, c1, 1)</span>
<span class="p_add">+#define HSR             __ACCESS_CP15(c5, 4, c2, 0)</span>
<span class="p_add">+#define DFAR            __ACCESS_CP15(c6, 0, c0, 0)</span>
<span class="p_add">+#define IFAR            __ACCESS_CP15(c6, 0, c0, 2)</span>
<span class="p_add">+#define HDFAR           __ACCESS_CP15(c6, 4, c0, 0)</span>
<span class="p_add">+#define HIFAR           __ACCESS_CP15(c6, 4, c0, 2)</span>
<span class="p_add">+#define HPFAR           __ACCESS_CP15(c6, 4, c0, 4)</span>
<span class="p_add">+#define ICIALLUIS       __ACCESS_CP15(c7, 0, c1, 0)</span>
<span class="p_add">+#define ATS1CPR         __ACCESS_CP15(c7, 0, c8, 0)</span>
<span class="p_add">+#define TLBIALLIS       __ACCESS_CP15(c8, 0, c3, 0)</span>
<span class="p_add">+#define TLBIALL         __ACCESS_CP15(c8, 0, c7, 0)</span>
<span class="p_add">+#define TLBIALLNSNHIS   __ACCESS_CP15(c8, 4, c3, 4)</span>
<span class="p_add">+#define PRRR            __ACCESS_CP15(c10, 0, c2, 0)</span>
<span class="p_add">+#define NMRR            __ACCESS_CP15(c10, 0, c2, 1)</span>
<span class="p_add">+#define AMAIR0          __ACCESS_CP15(c10, 0, c3, 0)</span>
<span class="p_add">+#define AMAIR1          __ACCESS_CP15(c10, 0, c3, 1)</span>
<span class="p_add">+#define VBAR            __ACCESS_CP15(c12, 0, c0, 0)</span>
<span class="p_add">+#define CID             __ACCESS_CP15(c13, 0, c0, 1)</span>
<span class="p_add">+#define TID_URW         __ACCESS_CP15(c13, 0, c0, 2)</span>
<span class="p_add">+#define TID_URO         __ACCESS_CP15(c13, 0, c0, 3)</span>
<span class="p_add">+#define TID_PRIV        __ACCESS_CP15(c13, 0, c0, 4)</span>
<span class="p_add">+#define HTPIDR          __ACCESS_CP15(c13, 4, c0, 2)</span>
<span class="p_add">+#define CNTKCTL         __ACCESS_CP15(c14, 0, c1, 0)</span>
<span class="p_add">+#define CNTV_CTL        __ACCESS_CP15(c14, 0, c3, 1)</span>
<span class="p_add">+#define CNTHCTL         __ACCESS_CP15(c14, 4, c1, 0)</span>
<span class="p_add">+</span>
 extern unsigned long cr_alignment;     /* defined in entry-armv.S */

<span class="p_add">+static inline void set_par(u64 val)</span>
<span class="p_add">+{</span>
<span class="p_add">+        if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+                write_sysreg(val, PAR_64);</span>
<span class="p_add">+        else</span>
<span class="p_add">+                write_sysreg(val, PAR_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u64 get_par(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+        if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+                return read_sysreg(PAR_64);</span>
<span class="p_add">+        else</span>
<span class="p_add">+                return (u64)read_sysreg(PAR_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void set_ttbr0(u64 val)</span>
<span class="p_add">+{</span>
<span class="p_add">+ if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+         write_sysreg(val, TTBR0_64);</span>
<span class="p_add">+ else</span>
<span class="p_add">+         write_sysreg(val, TTBR0_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u64 get_ttbr0(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+ if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+         return read_sysreg(TTBR0_64);</span>
<span class="p_add">+ else</span>
<span class="p_add">+         return (u64)read_sysreg(TTBR0_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void set_ttbr1(u64 val)</span>
<span class="p_add">+{</span>
<span class="p_add">+ if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+         write_sysreg(val, TTBR1_64);</span>
<span class="p_add">+ else</span>
<span class="p_add">+         write_sysreg(val, TTBR1_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline u64 get_ttbr1(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+ if (IS_ENABLED(CONFIG_ARM_LPAE))</span>
<span class="p_add">+         return read_sysreg(TTBR1_64);</span>
<span class="p_add">+ else</span>
<span class="p_add">+         return (u64)read_sysreg(TTBR1_32);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline unsigned long get_cr(void)
 {
        unsigned long val;
<span class="p_header">diff --git a/arch/arm/include/asm/kvm_hyp.h b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_header">index 14b5903..8db8a8c 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/kvm_hyp.h</span>
<span class="p_chunk">@@ -37,56 +37,6 @@</span> <span class="p_context"></span>
        __val;                                                  \
 })

<span class="p_del">-#define TTBR0              __ACCESS_CP15_64(0, c2)</span>
<span class="p_del">-#define TTBR1              __ACCESS_CP15_64(1, c2)</span>
<span class="p_del">-#define VTTBR              __ACCESS_CP15_64(6, c2)</span>
<span class="p_del">-#define PAR                __ACCESS_CP15_64(0, c7)</span>
<span class="p_del">-#define CNTV_CVAL  __ACCESS_CP15_64(3, c14)</span>
<span class="p_del">-#define CNTVOFF            __ACCESS_CP15_64(4, c14)</span>
<span class="p_del">-</span>
<span class="p_del">-#define MIDR               __ACCESS_CP15(c0, 0, c0, 0)</span>
<span class="p_del">-#define CSSELR             __ACCESS_CP15(c0, 2, c0, 0)</span>
<span class="p_del">-#define VPIDR              __ACCESS_CP15(c0, 4, c0, 0)</span>
<span class="p_del">-#define VMPIDR             __ACCESS_CP15(c0, 4, c0, 5)</span>
<span class="p_del">-#define SCTLR              __ACCESS_CP15(c1, 0, c0, 0)</span>
<span class="p_del">-#define CPACR              __ACCESS_CP15(c1, 0, c0, 2)</span>
<span class="p_del">-#define HCR                __ACCESS_CP15(c1, 4, c1, 0)</span>
<span class="p_del">-#define HDCR               __ACCESS_CP15(c1, 4, c1, 1)</span>
<span class="p_del">-#define HCPTR              __ACCESS_CP15(c1, 4, c1, 2)</span>
<span class="p_del">-#define HSTR               __ACCESS_CP15(c1, 4, c1, 3)</span>
<span class="p_del">-#define TTBCR              __ACCESS_CP15(c2, 0, c0, 2)</span>
<span class="p_del">-#define HTCR               __ACCESS_CP15(c2, 4, c0, 2)</span>
<span class="p_del">-#define VTCR               __ACCESS_CP15(c2, 4, c1, 2)</span>
<span class="p_del">-#define DACR               __ACCESS_CP15(c3, 0, c0, 0)</span>
<span class="p_del">-#define DFSR               __ACCESS_CP15(c5, 0, c0, 0)</span>
<span class="p_del">-#define IFSR               __ACCESS_CP15(c5, 0, c0, 1)</span>
<span class="p_del">-#define ADFSR              __ACCESS_CP15(c5, 0, c1, 0)</span>
<span class="p_del">-#define AIFSR              __ACCESS_CP15(c5, 0, c1, 1)</span>
<span class="p_del">-#define HSR                __ACCESS_CP15(c5, 4, c2, 0)</span>
<span class="p_del">-#define DFAR               __ACCESS_CP15(c6, 0, c0, 0)</span>
<span class="p_del">-#define IFAR               __ACCESS_CP15(c6, 0, c0, 2)</span>
<span class="p_del">-#define HDFAR              __ACCESS_CP15(c6, 4, c0, 0)</span>
<span class="p_del">-#define HIFAR              __ACCESS_CP15(c6, 4, c0, 2)</span>
<span class="p_del">-#define HPFAR              __ACCESS_CP15(c6, 4, c0, 4)</span>
<span class="p_del">-#define ICIALLUIS  __ACCESS_CP15(c7, 0, c1, 0)</span>
<span class="p_del">-#define ATS1CPR            __ACCESS_CP15(c7, 0, c8, 0)</span>
<span class="p_del">-#define TLBIALLIS  __ACCESS_CP15(c8, 0, c3, 0)</span>
<span class="p_del">-#define TLBIALL            __ACCESS_CP15(c8, 0, c7, 0)</span>
<span class="p_del">-#define TLBIALLNSNHIS      __ACCESS_CP15(c8, 4, c3, 4)</span>
<span class="p_del">-#define PRRR               __ACCESS_CP15(c10, 0, c2, 0)</span>
<span class="p_del">-#define NMRR               __ACCESS_CP15(c10, 0, c2, 1)</span>
<span class="p_del">-#define AMAIR0             __ACCESS_CP15(c10, 0, c3, 0)</span>
<span class="p_del">-#define AMAIR1             __ACCESS_CP15(c10, 0, c3, 1)</span>
<span class="p_del">-#define VBAR               __ACCESS_CP15(c12, 0, c0, 0)</span>
<span class="p_del">-#define CID                __ACCESS_CP15(c13, 0, c0, 1)</span>
<span class="p_del">-#define TID_URW            __ACCESS_CP15(c13, 0, c0, 2)</span>
<span class="p_del">-#define TID_URO            __ACCESS_CP15(c13, 0, c0, 3)</span>
<span class="p_del">-#define TID_PRIV   __ACCESS_CP15(c13, 0, c0, 4)</span>
<span class="p_del">-#define HTPIDR             __ACCESS_CP15(c13, 4, c0, 2)</span>
<span class="p_del">-#define CNTKCTL            __ACCESS_CP15(c14, 0, c1, 0)</span>
<span class="p_del">-#define CNTV_CTL   __ACCESS_CP15(c14, 0, c3, 1)</span>
<span class="p_del">-#define CNTHCTL            __ACCESS_CP15(c14, 4, c1, 0)</span>
<span class="p_del">-</span>
 #define VFP_FPEXC      __ACCESS_VFP(FPEXC)

 /* AArch64 compatibility macros, only for the timer so far */
<span class="p_header">diff --git a/arch/arm/kvm/hyp/cp15-sr.c b/arch/arm/kvm/hyp/cp15-sr.c</span>
<span class="p_header">index c478281..d365e3c 100644</span>
<span class="p_header">--- a/arch/arm/kvm/hyp/cp15-sr.c</span>
<span class="p_header">+++ b/arch/arm/kvm/hyp/cp15-sr.c</span>
<span class="p_chunk">@@ -31,8 +31,8 @@</span> <span class="p_context"> void __hyp_text __sysreg_save_state(struct kvm_cpu_context *ctxt)</span>
        ctxt-&gt;cp15[c0_CSSELR]           = read_sysreg(CSSELR);
        ctxt-&gt;cp15[c1_SCTLR]            = read_sysreg(SCTLR);
        ctxt-&gt;cp15[c1_CPACR]            = read_sysreg(CPACR);
<span class="p_del">-   *cp15_64(ctxt, c2_TTBR0)        = read_sysreg(TTBR0);</span>
<span class="p_del">-   *cp15_64(ctxt, c2_TTBR1)        = read_sysreg(TTBR1);</span>
<span class="p_add">+ *cp15_64(ctxt, c2_TTBR0)    = read_sysreg(TTBR0_64);</span>
<span class="p_add">+ *cp15_64(ctxt, c2_TTBR1)    = read_sysreg(TTBR1_64);</span>
        ctxt-&gt;cp15[c2_TTBCR]            = read_sysreg(TTBCR);
        ctxt-&gt;cp15[c3_DACR]             = read_sysreg(DACR);
        ctxt-&gt;cp15[c5_DFSR]             = read_sysreg(DFSR);
<span class="p_chunk">@@ -41,7 +41,7 @@</span> <span class="p_context"> void __hyp_text __sysreg_save_state(struct kvm_cpu_context *ctxt)</span>
        ctxt-&gt;cp15[c5_AIFSR]            = read_sysreg(AIFSR);
        ctxt-&gt;cp15[c6_DFAR]             = read_sysreg(DFAR);
        ctxt-&gt;cp15[c6_IFAR]             = read_sysreg(IFAR);
<span class="p_del">-   *cp15_64(ctxt, c7_PAR)          = read_sysreg(PAR);</span>
<span class="p_add">+ *cp15_64(ctxt, c7_PAR)              = read_sysreg(PAR_64);</span>
        ctxt-&gt;cp15[c10_PRRR]            = read_sysreg(PRRR);
        ctxt-&gt;cp15[c10_NMRR]            = read_sysreg(NMRR);
        ctxt-&gt;cp15[c10_AMAIR0]          = read_sysreg(AMAIR0);
<span class="p_chunk">@@ -60,8 +60,8 @@</span> <span class="p_context"> void __hyp_text __sysreg_restore_state(struct kvm_cpu_context *ctxt)</span>
        write_sysreg(ctxt-&gt;cp15[c0_CSSELR],     CSSELR);
        write_sysreg(ctxt-&gt;cp15[c1_SCTLR],      SCTLR);
        write_sysreg(ctxt-&gt;cp15[c1_CPACR],      CPACR);
<span class="p_del">-   write_sysreg(*cp15_64(ctxt, c2_TTBR0),  TTBR0);</span>
<span class="p_del">-   write_sysreg(*cp15_64(ctxt, c2_TTBR1),  TTBR1);</span>
<span class="p_add">+ write_sysreg(*cp15_64(ctxt, c2_TTBR0),      TTBR0_64);</span>
<span class="p_add">+ write_sysreg(*cp15_64(ctxt, c2_TTBR1),      TTBR1_64);</span>
        write_sysreg(ctxt-&gt;cp15[c2_TTBCR],      TTBCR);
        write_sysreg(ctxt-&gt;cp15[c3_DACR],       DACR);
        write_sysreg(ctxt-&gt;cp15[c5_DFSR],       DFSR);
<span class="p_chunk">@@ -70,7 +70,7 @@</span> <span class="p_context"> void __hyp_text __sysreg_restore_state(struct kvm_cpu_context *ctxt)</span>
        write_sysreg(ctxt-&gt;cp15[c5_AIFSR],      AIFSR);
        write_sysreg(ctxt-&gt;cp15[c6_DFAR],       DFAR);
        write_sysreg(ctxt-&gt;cp15[c6_IFAR],       IFAR);
<span class="p_del">-   write_sysreg(*cp15_64(ctxt, c7_PAR),    PAR);</span>
<span class="p_add">+ write_sysreg(*cp15_64(ctxt, c7_PAR),        PAR_64);</span>
        write_sysreg(ctxt-&gt;cp15[c10_PRRR],      PRRR);
        write_sysreg(ctxt-&gt;cp15[c10_NMRR],      NMRR);
        write_sysreg(ctxt-&gt;cp15[c10_AMAIR0],    AMAIR0);
<span class="p_header">diff --git a/arch/arm/kvm/hyp/switch.c b/arch/arm/kvm/hyp/switch.c</span>
<span class="p_header">index ebd2dd4..4879588 100644</span>
<span class="p_header">--- a/arch/arm/kvm/hyp/switch.c</span>
<span class="p_header">+++ b/arch/arm/kvm/hyp/switch.c</span>
<span class="p_chunk">@@ -133,12 +133,12 @@</span> <span class="p_context"> static bool __hyp_text __populate_fault_info(struct kvm_vcpu *vcpu)</span>
        if (!(hsr &amp; HSR_DABT_S1PTW) &amp;&amp; (hsr &amp; HSR_FSC_TYPE) == FSC_PERM) {
                u64 par, tmp;

<span class="p_del">-           par = read_sysreg(PAR);</span>
<span class="p_add">+         par = read_sysreg(PAR_64);</span>
                write_sysreg(far, ATS1CPR);
                isb();

<span class="p_del">-           tmp = read_sysreg(PAR);</span>
<span class="p_del">-           write_sysreg(par, PAR);</span>
<span class="p_add">+         tmp = read_sysreg(PAR_64);</span>
<span class="p_add">+         write_sysreg(par, PAR_64);</span>

                if (unlikely(tmp &amp; 1))
                        return false; /* Translation failed, back to guest */
<span class="p_header">diff --git a/arch/arm/mm/kasan_init.c b/arch/arm/mm/kasan_init.c</span>
<span class="p_header">index 049ee0a..87c86c7 100644</span>
<span class="p_header">--- a/arch/arm/mm/kasan_init.c</span>
<span class="p_header">+++ b/arch/arm/mm/kasan_init.c</span>
<span class="p_chunk">@@ -203,16 +203,16 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
        u64 orig_ttbr0;
        int i;

<span class="p_del">-   orig_ttbr0 = cpu_get_ttbr(0);</span>
<span class="p_add">+ orig_ttbr0 = get_ttbr0();</span>

 #ifdef CONFIG_ARM_LPAE
        memcpy(tmp_pmd_table, pgd_page_vaddr(*pgd_offset_k(KASAN_SHADOW_START)), sizeof(tmp_pmd_table));
        memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));
        set_pgd(&amp;tmp_page_table[pgd_index(KASAN_SHADOW_START)], __pgd(__pa(tmp_pmd_table) | PMD_TYPE_TABLE | L_PGD_SWAPPER));
<span class="p_del">-   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="p_add">+ set_ttbr0(__pa(tmp_page_table));</span>
 #else
        memcpy(tmp_page_table, swapper_pg_dir, sizeof(tmp_page_table));
<span class="p_del">-   cpu_set_ttbr0(__pa(tmp_page_table));</span>
<span class="p_add">+ set_ttbr0((u64)__pa(tmp_page_table));</span>
 #endif
        flush_cache_all();
        local_flush_bp_all();
<span class="p_chunk">@@ -257,7 +257,7 @@</span> <span class="p_context"> void __init kasan_init(void)</span>
                                 /*__pgprot(_L_PTE_DEFAULT | L_PTE_DIRTY | L_PTE_XN | L_PTE_RDONLY))*/
                                __pgprot(pgprot_val(PAGE_KERNEL) | L_PTE_RDONLY)));
        memset(kasan_zero_page, 0, PAGE_SIZE);
<span class="p_del">-   cpu_set_ttbr0(orig_ttbr0);</span>
<span class="p_add">+ set_ttbr0(orig_ttbr0);</span>
        flush_cache_all();
        local_flush_bp_all();
        local_flush_tlb_all();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



