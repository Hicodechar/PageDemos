
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/3] mm: memfd: remove memfd code from shmem files and use new memfd files - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/3] mm: memfd: remove memfd code from shmem files and use new memfd files</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 30, 2018, 12:01 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180130000101.7329-4-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10191117/mbox/"
   >mbox</a>
|
   <a href="/patch/10191117/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10191117/">/patch/10191117/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	8A05960375 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 00:02:07 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 77FF32879A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 00:02:07 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6C28A28829; Tue, 30 Jan 2018 00:02:07 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8F5502879A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 30 Jan 2018 00:02:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752261AbeA3AB7 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 29 Jan 2018 19:01:59 -0500
Received: from userp2120.oracle.com ([156.151.31.85]:55420 &quot;EHLO
	userp2120.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751417AbeA3ABn (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 29 Jan 2018 19:01:43 -0500
Received: from pps.filterd (userp2120.oracle.com [127.0.0.1])
	by userp2120.oracle.com (8.16.0.22/8.16.0.22) with SMTP id
	w0TNvOqS046179; Tue, 30 Jan 2018 00:01:33 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
	h=from : to : cc :
	subject : date : message-id : in-reply-to : references;
	s=corp-2017-10-26; 
	bh=ZDWjyuYDcfoCY3vOfLyit7DeWpgAAVMYl0WCAzhk0/E=;
	b=CIKh1PCX7zZm7DB0vS88mtbOXlIlDPGit2VxKPecsb5leJtCBTGdzJ4tDQTizBvy9u2G
	3xORRG1VFS2cf7UH8UCKBHo7vA4IOczVthQBu9J2WiO5dmB7TMfS9NvR0ZZUAF2qr1+e
	BBbfTVC5D9J3h0MbtZgqhOKOlS3q5rDAuy3F1IA7tfeWchACq/Glsz2R6tg9WlUwnBaa
	yfUMPK/juXzYjP2flxXEVkwSLSBnaujwc1AGwv0u4u5qSKkRc2hYhcNvKe6D2FKsD2jW
	5d6BFhmydqFqctvvuCOrl8t/TV8FulIrHOHpTpFTdeIyhNC8hD5e83Gy0+SeozCIArqY
	vA== 
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp2120.oracle.com with ESMTP id 2ftdmtr29d-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256
	verify=OK); Tue, 30 Jan 2018 00:01:33 +0000
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0022.oracle.com (8.14.4/8.14.4) with ESMTP id w0U01Xtm025567
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256
	verify=FAIL); Tue, 30 Jan 2018 00:01:33 GMT
Received: from abhmp0018.oracle.com (abhmp0018.oracle.com [141.146.116.24])
	by userv0121.oracle.com (8.14.4/8.13.8) with ESMTP id
	w0U01Wr2017445; Tue, 30 Jan 2018 00:01:32 GMT
Received: from monkey.oracle.com (/98.246.252.205)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Mon, 29 Jan 2018 16:01:32 -0800
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Hugh Dickins &lt;hughd@google.com&gt;, Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Michal Hocko &lt;mhocko@kernel.org&gt;,
	=?UTF-8?q?Marc-Andr=C3=A9=20Lureau?= &lt;marcandre.lureau@gmail.com&gt;,
	David Herrmann &lt;dh.herrmann@gmail.com&gt;,
	Khalid Aziz &lt;khalid.aziz@oracle.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH 3/3] mm: memfd: remove memfd code from shmem files and use
	new memfd files
Date: Mon, 29 Jan 2018 16:01:01 -0800
Message-Id: &lt;20180130000101.7329-4-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.13.6
In-Reply-To: &lt;20180130000101.7329-1-mike.kravetz@oracle.com&gt;
References: &lt;20180130000101.7329-1-mike.kravetz@oracle.com&gt;
X-Proofpoint-Virus-Version: vendor=nai engine=5900 definitions=8789
	signatures=668655
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0
	suspectscore=0 malwarescore=0
	phishscore=0 bulkscore=0 spamscore=0 mlxscore=0 mlxlogscore=999
	adultscore=0 classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1711220000 definitions=main-1801290304
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Jan. 30, 2018, 12:01 a.m.</div>
<pre class="content">
Remove memfd and file sealing routines from shmem.c, and enable
the use of the new files (memfd.c and memfd.h).

A new config option MEMFD_CREATE is defined that is enabled if
TMPFS -or- HUGETLBFS is enabled.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 fs/Kconfig               |   3 +
 fs/fcntl.c               |   2 +-
 include/linux/shmem_fs.h |  13 --
 mm/Makefile              |   1 +
 mm/shmem.c               | 323 -----------------------------------------------
 5 files changed, 5 insertions(+), 337 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - Jan. 30, 2018, 11:49 p.m.</div>
<pre class="content">
Hi Mike,

Thank you for the patch! Perhaps something to improve:

[auto build test WARNING on mmotm/master]
[also build test WARNING on next-20180126]
[cannot apply to linus/master v4.15]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/Mike-Kravetz/restructure-memfd-code/20180131-023405
base:   git://git.cmpxchg.org/linux-mmotm.git master
reproduce:
        # apt-get install sparse
        make ARCH=x86_64 allmodconfig
        make C=1 CF=-D__CHECK_ENDIAN__


sparse warnings: (new ones prefixed by &gt;&gt;)
<span class="quote">
&gt;&gt; mm/memfd.c:40:9: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@</span>
   mm/memfd.c:40:9: expected void
   mm/memfd.c:40:9: got void
<span class="quote">&gt;&gt; mm/memfd.c:40:9: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@</span>
   mm/memfd.c:40:9: expected void
   mm/memfd.c:40:9: got void
<span class="quote">&gt;&gt; mm/memfd.c:41:46: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@</span>
   mm/memfd.c:41:46: expected void
   mm/memfd.c:41:46: got void
   mm/memfd.c:44:38: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:44:38: expected void
   mm/memfd.c:44:38: got void
   mm/memfd.c:55:55: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@
   mm/memfd.c:55:55: expected void
   mm/memfd.c:55:55: got void
   mm/memfd.c:55:30: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:55:30: expected void
   mm/memfd.c:55:30: got void
   mm/memfd.c:40:9: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@
   mm/memfd.c:40:9: expected void
   mm/memfd.c:40:9: got void
<span class="quote">&gt;&gt; mm/memfd.c:40:9: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@</span>
   mm/memfd.c:40:9: expected void
   mm/memfd.c:40:9: got void
   mm/memfd.c:93:17: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:93:17: expected void
   mm/memfd.c:93:17: got void
   mm/memfd.c:93:17: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:93:17: expected void
   mm/memfd.c:93:17: got void
   mm/memfd.c:96:54: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@
   mm/memfd.c:96:54: expected void
   mm/memfd.c:96:54: got void
   mm/memfd.c:99:46: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:99:46: expected void
   mm/memfd.c:99:46: got void
   mm/memfd.c:125:63: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@
   mm/memfd.c:125:63: expected void
   mm/memfd.c:125:63: got void
   mm/memfd.c:125:38: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:125:38: expected void
   mm/memfd.c:125:38: got void
   mm/memfd.c:93:17: sparse: incorrect type in argument 1 (different address spaces) @@ expected void @@ got @@
   mm/memfd.c:93:17: expected void
   mm/memfd.c:93:17: got void
   mm/memfd.c:93:17: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@
   mm/memfd.c:93:17: expected void
   mm/memfd.c:93:17: got void

vim +40 mm/memfd.c

6df4ed2a41 Mike Kravetz 2018-01-29  28  
6df4ed2a41 Mike Kravetz 2018-01-29  29  static void shmem_tag_pins(struct address_space *mapping)
6df4ed2a41 Mike Kravetz 2018-01-29  30  {
6df4ed2a41 Mike Kravetz 2018-01-29  31  	struct radix_tree_iter iter;
6df4ed2a41 Mike Kravetz 2018-01-29  32  	void **slot;
6df4ed2a41 Mike Kravetz 2018-01-29  33  	pgoff_t start;
6df4ed2a41 Mike Kravetz 2018-01-29  34  	struct page *page;
6df4ed2a41 Mike Kravetz 2018-01-29  35  
6df4ed2a41 Mike Kravetz 2018-01-29  36  	lru_add_drain();
6df4ed2a41 Mike Kravetz 2018-01-29  37  	start = 0;
6df4ed2a41 Mike Kravetz 2018-01-29  38  	rcu_read_lock();
6df4ed2a41 Mike Kravetz 2018-01-29  39  
6df4ed2a41 Mike Kravetz 2018-01-29 @40  	radix_tree_for_each_slot(slot, &amp;mapping-&gt;page_tree, &amp;iter, start) {
6df4ed2a41 Mike Kravetz 2018-01-29 @41  		page = radix_tree_deref_slot(slot);
6df4ed2a41 Mike Kravetz 2018-01-29  42  		if (!page || radix_tree_exception(page)) {
6df4ed2a41 Mike Kravetz 2018-01-29  43  			if (radix_tree_deref_retry(page)) {
6df4ed2a41 Mike Kravetz 2018-01-29  44  				slot = radix_tree_iter_retry(&amp;iter);
6df4ed2a41 Mike Kravetz 2018-01-29  45  				continue;
6df4ed2a41 Mike Kravetz 2018-01-29  46  			}
6df4ed2a41 Mike Kravetz 2018-01-29  47  		} else if (page_count(page) - page_mapcount(page) &gt; 1) {
6df4ed2a41 Mike Kravetz 2018-01-29  48  			spin_lock_irq(&amp;mapping-&gt;tree_lock);
6df4ed2a41 Mike Kravetz 2018-01-29  49  			radix_tree_tag_set(&amp;mapping-&gt;page_tree, iter.index,
6df4ed2a41 Mike Kravetz 2018-01-29  50  					   SHMEM_TAG_PINNED);
6df4ed2a41 Mike Kravetz 2018-01-29  51  			spin_unlock_irq(&amp;mapping-&gt;tree_lock);
6df4ed2a41 Mike Kravetz 2018-01-29  52  		}
6df4ed2a41 Mike Kravetz 2018-01-29  53  
6df4ed2a41 Mike Kravetz 2018-01-29  54  		if (need_resched()) {
6df4ed2a41 Mike Kravetz 2018-01-29  55  			slot = radix_tree_iter_resume(slot, &amp;iter);
6df4ed2a41 Mike Kravetz 2018-01-29  56  			cond_resched_rcu();
6df4ed2a41 Mike Kravetz 2018-01-29  57  		}
6df4ed2a41 Mike Kravetz 2018-01-29  58  	}
6df4ed2a41 Mike Kravetz 2018-01-29  59  	rcu_read_unlock();
6df4ed2a41 Mike Kravetz 2018-01-29  60  }
6df4ed2a41 Mike Kravetz 2018-01-29  61  

:::::: The code at line 40 was first introduced by commit
:::::: 6df4ed2a410bc04f1ec04dce16ccd236707f7f32 mm: memfd: split out memfd for use by multiple filesystems

:::::: TO: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
:::::: CC: 0day robot &lt;fengguang.wu@intel.com&gt;

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Jan. 31, 2018, 2:28 a.m.</div>
<pre class="content">
On 01/30/2018 03:49 PM, kbuild test robot wrote:
<span class="quote">&gt; Hi Mike,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thank you for the patch! Perhaps something to improve:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; [auto build test WARNING on mmotm/master]</span>
<span class="quote">&gt; [also build test WARNING on next-20180126]</span>
<span class="quote">&gt; [cannot apply to linus/master v4.15]</span>
<span class="quote">&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improve the system]</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; url:    https://github.com/0day-ci/linux/commits/Mike-Kravetz/restructure-memfd-code/20180131-023405</span>
<span class="quote">&gt; base:   git://git.cmpxchg.org/linux-mmotm.git master</span>
<span class="quote">&gt; reproduce:</span>
<span class="quote">&gt;         # apt-get install sparse</span>
<span class="quote">&gt;         make ARCH=x86_64 allmodconfig</span>
<span class="quote">&gt;         make C=1 CF=-D__CHECK_ENDIAN__</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; sparse warnings: (new ones prefixed by &gt;&gt;)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt;&gt; mm/memfd.c:40:9: sparse: incorrect type in assignment (different address spaces) @@ expected void @@ got void &lt;avoid @@</span>

&lt;snip&gt;
<span class="quote">
&gt; :::::: The code at line 40 was first introduced by commit</span>
<span class="quote">&gt; :::::: 6df4ed2a410bc04f1ec04dce16ccd236707f7f32 mm: memfd: split out memfd for use by multiple filesystems</span>

Yes, but I also removed those same warnings from mm/shmem.c so I should
get some credit for that. :)

I fixed up the warnings in the moved code and will send out v2.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/Kconfig b/fs/Kconfig</span>
<span class="p_header">index 7aee6d699fd6..a480ea0c7a44 100644</span>
<span class="p_header">--- a/fs/Kconfig</span>
<span class="p_header">+++ b/fs/Kconfig</span>
<span class="p_chunk">@@ -200,6 +200,9 @@</span> <span class="p_context"> config HUGETLBFS</span>
 config HUGETLB_PAGE
 	def_bool HUGETLBFS
 
<span class="p_add">+config MEMFD_CREATE</span>
<span class="p_add">+	def_bool TMPFS || HUGETLBFS</span>
<span class="p_add">+</span>
 config ARCH_HAS_GIGANTIC_PAGE
 	bool
 
<span class="p_header">diff --git a/fs/fcntl.c b/fs/fcntl.c</span>
<span class="p_header">index ad7995c64370..122e3dea9794 100644</span>
<span class="p_header">--- a/fs/fcntl.c</span>
<span class="p_header">+++ b/fs/fcntl.c</span>
<span class="p_chunk">@@ -23,7 +23,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/rcupdate.h&gt;
 #include &lt;linux/pid_namespace.h&gt;
 #include &lt;linux/user_namespace.h&gt;
<span class="p_del">-#include &lt;linux/shmem_fs.h&gt;</span>
<span class="p_add">+#include &lt;linux/memfd.h&gt;</span>
 #include &lt;linux/compat.h&gt;
 
 #include &lt;asm/poll.h&gt;
<span class="p_header">diff --git a/include/linux/shmem_fs.h b/include/linux/shmem_fs.h</span>
<span class="p_header">index 33b659f62c2b..71acdf4906bb 100644</span>
<span class="p_header">--- a/include/linux/shmem_fs.h</span>
<span class="p_header">+++ b/include/linux/shmem_fs.h</span>
<span class="p_chunk">@@ -108,19 +108,6 @@</span> <span class="p_context"> static inline bool shmem_file(struct file *file)</span>
 extern bool shmem_charge(struct inode *inode, long pages);
 extern void shmem_uncharge(struct inode *inode, long pages);
 
<span class="p_del">-#ifdef CONFIG_TMPFS</span>
<span class="p_del">-</span>
<span class="p_del">-extern long memfd_fcntl(struct file *file, unsigned int cmd, unsigned long arg);</span>
<span class="p_del">-</span>
<span class="p_del">-#else</span>
<span class="p_del">-</span>
<span class="p_del">-static inline long memfd_fcntl(struct file *f, unsigned int c, unsigned long a)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return -EINVAL;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
 #ifdef CONFIG_TRANSPARENT_HUGE_PAGECACHE
 extern bool shmem_huge_enabled(struct vm_area_struct *vma);
 #else
<span class="p_header">diff --git a/mm/Makefile b/mm/Makefile</span>
<span class="p_header">index e669f02c5a54..1e0edbc59211 100644</span>
<span class="p_header">--- a/mm/Makefile</span>
<span class="p_header">+++ b/mm/Makefile</span>
<span class="p_chunk">@@ -105,3 +105,4 @@</span> <span class="p_context"> obj-$(CONFIG_DEBUG_PAGE_REF) += debug_page_ref.o</span>
 obj-$(CONFIG_HARDENED_USERCOPY) += usercopy.o
 obj-$(CONFIG_PERCPU_STATS) += percpu-stats.o
 obj-$(CONFIG_HMM) += hmm.o
<span class="p_add">+obj-$(CONFIG_MEMFD_CREATE) += memfd.o</span>
<span class="p_header">diff --git a/mm/shmem.c b/mm/shmem.c</span>
<span class="p_header">index d8d3ea6dc3f4..6c4f960b9e70 100644</span>
<span class="p_header">--- a/mm/shmem.c</span>
<span class="p_header">+++ b/mm/shmem.c</span>
<span class="p_chunk">@@ -2604,241 +2604,6 @@</span> <span class="p_context"> static loff_t shmem_file_llseek(struct file *file, loff_t offset, int whence)</span>
 	return offset;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * We need a tag: a new tag would expand every radix_tree_node by 8 bytes,</span>
<span class="p_del">- * so reuse a tag which we firmly believe is never set or cleared on shmem.</span>
<span class="p_del">- */</span>
<span class="p_del">-#define SHMEM_TAG_PINNED        PAGECACHE_TAG_TOWRITE</span>
<span class="p_del">-#define LAST_SCAN               4       /* about 150ms max */</span>
<span class="p_del">-</span>
<span class="p_del">-static void shmem_tag_pins(struct address_space *mapping)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct radix_tree_iter iter;</span>
<span class="p_del">-	void **slot;</span>
<span class="p_del">-	pgoff_t start;</span>
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-</span>
<span class="p_del">-	lru_add_drain();</span>
<span class="p_del">-	start = 0;</span>
<span class="p_del">-	rcu_read_lock();</span>
<span class="p_del">-</span>
<span class="p_del">-	radix_tree_for_each_slot(slot, &amp;mapping-&gt;page_tree, &amp;iter, start) {</span>
<span class="p_del">-		page = radix_tree_deref_slot(slot);</span>
<span class="p_del">-		if (!page || radix_tree_exception(page)) {</span>
<span class="p_del">-			if (radix_tree_deref_retry(page)) {</span>
<span class="p_del">-				slot = radix_tree_iter_retry(&amp;iter);</span>
<span class="p_del">-				continue;</span>
<span class="p_del">-			}</span>
<span class="p_del">-		} else if (page_count(page) - page_mapcount(page) &gt; 1) {</span>
<span class="p_del">-			spin_lock_irq(&amp;mapping-&gt;tree_lock);</span>
<span class="p_del">-			radix_tree_tag_set(&amp;mapping-&gt;page_tree, iter.index,</span>
<span class="p_del">-					   SHMEM_TAG_PINNED);</span>
<span class="p_del">-			spin_unlock_irq(&amp;mapping-&gt;tree_lock);</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		if (need_resched()) {</span>
<span class="p_del">-			slot = radix_tree_iter_resume(slot, &amp;iter);</span>
<span class="p_del">-			cond_resched_rcu();</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-	rcu_read_unlock();</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-/*</span>
<span class="p_del">- * Setting SEAL_WRITE requires us to verify there&#39;s no pending writer. However,</span>
<span class="p_del">- * via get_user_pages(), drivers might have some pending I/O without any active</span>
<span class="p_del">- * user-space mappings (eg., direct-IO, AIO). Therefore, we look at all pages</span>
<span class="p_del">- * and see whether it has an elevated ref-count. If so, we tag them and wait for</span>
<span class="p_del">- * them to be dropped.</span>
<span class="p_del">- * The caller must guarantee that no new user will acquire writable references</span>
<span class="p_del">- * to those pages to avoid races.</span>
<span class="p_del">- */</span>
<span class="p_del">-static int shmem_wait_for_pins(struct address_space *mapping)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct radix_tree_iter iter;</span>
<span class="p_del">-	void **slot;</span>
<span class="p_del">-	pgoff_t start;</span>
<span class="p_del">-	struct page *page;</span>
<span class="p_del">-	int error, scan;</span>
<span class="p_del">-</span>
<span class="p_del">-	shmem_tag_pins(mapping);</span>
<span class="p_del">-</span>
<span class="p_del">-	error = 0;</span>
<span class="p_del">-	for (scan = 0; scan &lt;= LAST_SCAN; scan++) {</span>
<span class="p_del">-		if (!radix_tree_tagged(&amp;mapping-&gt;page_tree, SHMEM_TAG_PINNED))</span>
<span class="p_del">-			break;</span>
<span class="p_del">-</span>
<span class="p_del">-		if (!scan)</span>
<span class="p_del">-			lru_add_drain_all();</span>
<span class="p_del">-		else if (schedule_timeout_killable((HZ &lt;&lt; scan) / 200))</span>
<span class="p_del">-			scan = LAST_SCAN;</span>
<span class="p_del">-</span>
<span class="p_del">-		start = 0;</span>
<span class="p_del">-		rcu_read_lock();</span>
<span class="p_del">-		radix_tree_for_each_tagged(slot, &amp;mapping-&gt;page_tree, &amp;iter,</span>
<span class="p_del">-					   start, SHMEM_TAG_PINNED) {</span>
<span class="p_del">-</span>
<span class="p_del">-			page = radix_tree_deref_slot(slot);</span>
<span class="p_del">-			if (radix_tree_exception(page)) {</span>
<span class="p_del">-				if (radix_tree_deref_retry(page)) {</span>
<span class="p_del">-					slot = radix_tree_iter_retry(&amp;iter);</span>
<span class="p_del">-					continue;</span>
<span class="p_del">-				}</span>
<span class="p_del">-</span>
<span class="p_del">-				page = NULL;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			if (page &amp;&amp;</span>
<span class="p_del">-			    page_count(page) - page_mapcount(page) != 1) {</span>
<span class="p_del">-				if (scan &lt; LAST_SCAN)</span>
<span class="p_del">-					goto continue_resched;</span>
<span class="p_del">-</span>
<span class="p_del">-				/*</span>
<span class="p_del">-				 * On the last scan, we clean up all those tags</span>
<span class="p_del">-				 * we inserted; but make a note that we still</span>
<span class="p_del">-				 * found pages pinned.</span>
<span class="p_del">-				 */</span>
<span class="p_del">-				error = -EBUSY;</span>
<span class="p_del">-			}</span>
<span class="p_del">-</span>
<span class="p_del">-			spin_lock_irq(&amp;mapping-&gt;tree_lock);</span>
<span class="p_del">-			radix_tree_tag_clear(&amp;mapping-&gt;page_tree,</span>
<span class="p_del">-					     iter.index, SHMEM_TAG_PINNED);</span>
<span class="p_del">-			spin_unlock_irq(&amp;mapping-&gt;tree_lock);</span>
<span class="p_del">-continue_resched:</span>
<span class="p_del">-			if (need_resched()) {</span>
<span class="p_del">-				slot = radix_tree_iter_resume(slot, &amp;iter);</span>
<span class="p_del">-				cond_resched_rcu();</span>
<span class="p_del">-			}</span>
<span class="p_del">-		}</span>
<span class="p_del">-		rcu_read_unlock();</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return error;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static unsigned int *memfd_file_seals_ptr(struct file *file)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (file-&gt;f_op == &amp;shmem_file_operations)</span>
<span class="p_del">-		return &amp;SHMEM_I(file_inode(file))-&gt;seals;</span>
<span class="p_del">-</span>
<span class="p_del">-#ifdef CONFIG_HUGETLBFS</span>
<span class="p_del">-	if (file-&gt;f_op == &amp;hugetlbfs_file_operations)</span>
<span class="p_del">-		return &amp;HUGETLBFS_I(file_inode(file))-&gt;seals;</span>
<span class="p_del">-#endif</span>
<span class="p_del">-</span>
<span class="p_del">-	return NULL;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-#define F_ALL_SEALS (F_SEAL_SEAL | \</span>
<span class="p_del">-		     F_SEAL_SHRINK | \</span>
<span class="p_del">-		     F_SEAL_GROW | \</span>
<span class="p_del">-		     F_SEAL_WRITE)</span>
<span class="p_del">-</span>
<span class="p_del">-static int memfd_add_seals(struct file *file, unsigned int seals)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct inode *inode = file_inode(file);</span>
<span class="p_del">-	unsigned int *file_seals;</span>
<span class="p_del">-	int error;</span>
<span class="p_del">-</span>
<span class="p_del">-	/*</span>
<span class="p_del">-	 * SEALING</span>
<span class="p_del">-	 * Sealing allows multiple parties to share a shmem-file but restrict</span>
<span class="p_del">-	 * access to a specific subset of file operations. Seals can only be</span>
<span class="p_del">-	 * added, but never removed. This way, mutually untrusted parties can</span>
<span class="p_del">-	 * share common memory regions with a well-defined policy. A malicious</span>
<span class="p_del">-	 * peer can thus never perform unwanted operations on a shared object.</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * Seals are only supported on special shmem-files and always affect</span>
<span class="p_del">-	 * the whole underlying inode. Once a seal is set, it may prevent some</span>
<span class="p_del">-	 * kinds of access to the file. Currently, the following seals are</span>
<span class="p_del">-	 * defined:</span>
<span class="p_del">-	 *   SEAL_SEAL: Prevent further seals from being set on this file</span>
<span class="p_del">-	 *   SEAL_SHRINK: Prevent the file from shrinking</span>
<span class="p_del">-	 *   SEAL_GROW: Prevent the file from growing</span>
<span class="p_del">-	 *   SEAL_WRITE: Prevent write access to the file</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * As we don&#39;t require any trust relationship between two parties, we</span>
<span class="p_del">-	 * must prevent seals from being removed. Therefore, sealing a file</span>
<span class="p_del">-	 * only adds a given set of seals to the file, it never touches</span>
<span class="p_del">-	 * existing seals. Furthermore, the &quot;setting seals&quot;-operation can be</span>
<span class="p_del">-	 * sealed itself, which basically prevents any further seal from being</span>
<span class="p_del">-	 * added.</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * Semantics of sealing are only defined on volatile files. Only</span>
<span class="p_del">-	 * anonymous shmem files support sealing. More importantly, seals are</span>
<span class="p_del">-	 * never written to disk. Therefore, there&#39;s no plan to support it on</span>
<span class="p_del">-	 * other file types.</span>
<span class="p_del">-	 */</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!(file-&gt;f_mode &amp; FMODE_WRITE))</span>
<span class="p_del">-		return -EPERM;</span>
<span class="p_del">-	if (seals &amp; ~(unsigned int)F_ALL_SEALS)</span>
<span class="p_del">-		return -EINVAL;</span>
<span class="p_del">-</span>
<span class="p_del">-	inode_lock(inode);</span>
<span class="p_del">-</span>
<span class="p_del">-	file_seals = memfd_file_seals_ptr(file);</span>
<span class="p_del">-	if (!file_seals) {</span>
<span class="p_del">-		error = -EINVAL;</span>
<span class="p_del">-		goto unlock;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (*file_seals &amp; F_SEAL_SEAL) {</span>
<span class="p_del">-		error = -EPERM;</span>
<span class="p_del">-		goto unlock;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if ((seals &amp; F_SEAL_WRITE) &amp;&amp; !(*file_seals &amp; F_SEAL_WRITE)) {</span>
<span class="p_del">-		error = mapping_deny_writable(file-&gt;f_mapping);</span>
<span class="p_del">-		if (error)</span>
<span class="p_del">-			goto unlock;</span>
<span class="p_del">-</span>
<span class="p_del">-		error = shmem_wait_for_pins(file-&gt;f_mapping);</span>
<span class="p_del">-		if (error) {</span>
<span class="p_del">-			mapping_allow_writable(file-&gt;f_mapping);</span>
<span class="p_del">-			goto unlock;</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	*file_seals |= seals;</span>
<span class="p_del">-	error = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-unlock:</span>
<span class="p_del">-	inode_unlock(inode);</span>
<span class="p_del">-	return error;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static int memfd_get_seals(struct file *file)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned int *seals = memfd_file_seals_ptr(file);</span>
<span class="p_del">-</span>
<span class="p_del">-	return seals ? *seals : -EINVAL;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-long memfd_fcntl(struct file *file, unsigned int cmd, unsigned long arg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	long error;</span>
<span class="p_del">-</span>
<span class="p_del">-	switch (cmd) {</span>
<span class="p_del">-	case F_ADD_SEALS:</span>
<span class="p_del">-		/* disallow upper 32bit */</span>
<span class="p_del">-		if (arg &gt; UINT_MAX)</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_del">-</span>
<span class="p_del">-		error = memfd_add_seals(file, arg);</span>
<span class="p_del">-		break;</span>
<span class="p_del">-	case F_GET_SEALS:</span>
<span class="p_del">-		error = memfd_get_seals(file);</span>
<span class="p_del">-		break;</span>
<span class="p_del">-	default:</span>
<span class="p_del">-		error = -EINVAL;</span>
<span class="p_del">-		break;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	return error;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static long shmem_fallocate(struct file *file, int mode, loff_t offset,
 							 loff_t len)
 {
<span class="p_chunk">@@ -3660,94 +3425,6 @@</span> <span class="p_context"> static int shmem_show_options(struct seq_file *seq, struct dentry *root)</span>
 	shmem_show_mpol(seq, sbinfo-&gt;mpol);
 	return 0;
 }
<span class="p_del">-</span>
<span class="p_del">-#define MFD_NAME_PREFIX &quot;memfd:&quot;</span>
<span class="p_del">-#define MFD_NAME_PREFIX_LEN (sizeof(MFD_NAME_PREFIX) - 1)</span>
<span class="p_del">-#define MFD_NAME_MAX_LEN (NAME_MAX - MFD_NAME_PREFIX_LEN)</span>
<span class="p_del">-</span>
<span class="p_del">-#define MFD_ALL_FLAGS (MFD_CLOEXEC | MFD_ALLOW_SEALING | MFD_HUGETLB)</span>
<span class="p_del">-</span>
<span class="p_del">-SYSCALL_DEFINE2(memfd_create,</span>
<span class="p_del">-		const char __user *, uname,</span>
<span class="p_del">-		unsigned int, flags)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned int *file_seals;</span>
<span class="p_del">-	struct file *file;</span>
<span class="p_del">-	int fd, error;</span>
<span class="p_del">-	char *name;</span>
<span class="p_del">-	long len;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (!(flags &amp; MFD_HUGETLB)) {</span>
<span class="p_del">-		if (flags &amp; ~(unsigned int)MFD_ALL_FLAGS)</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		/* Allow huge page size encoding in flags. */</span>
<span class="p_del">-		if (flags &amp; ~(unsigned int)(MFD_ALL_FLAGS |</span>
<span class="p_del">-				(MFD_HUGE_MASK &lt;&lt; MFD_HUGE_SHIFT)))</span>
<span class="p_del">-			return -EINVAL;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	/* length includes terminating zero */</span>
<span class="p_del">-	len = strnlen_user(uname, MFD_NAME_MAX_LEN + 1);</span>
<span class="p_del">-	if (len &lt;= 0)</span>
<span class="p_del">-		return -EFAULT;</span>
<span class="p_del">-	if (len &gt; MFD_NAME_MAX_LEN + 1)</span>
<span class="p_del">-		return -EINVAL;</span>
<span class="p_del">-</span>
<span class="p_del">-	name = kmalloc(len + MFD_NAME_PREFIX_LEN, GFP_KERNEL);</span>
<span class="p_del">-	if (!name)</span>
<span class="p_del">-		return -ENOMEM;</span>
<span class="p_del">-</span>
<span class="p_del">-	strcpy(name, MFD_NAME_PREFIX);</span>
<span class="p_del">-	if (copy_from_user(&amp;name[MFD_NAME_PREFIX_LEN], uname, len)) {</span>
<span class="p_del">-		error = -EFAULT;</span>
<span class="p_del">-		goto err_name;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	/* terminating-zero may have changed after strnlen_user() returned */</span>
<span class="p_del">-	if (name[len + MFD_NAME_PREFIX_LEN - 1]) {</span>
<span class="p_del">-		error = -EFAULT;</span>
<span class="p_del">-		goto err_name;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	fd = get_unused_fd_flags((flags &amp; MFD_CLOEXEC) ? O_CLOEXEC : 0);</span>
<span class="p_del">-	if (fd &lt; 0) {</span>
<span class="p_del">-		error = fd;</span>
<span class="p_del">-		goto err_name;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	if (flags &amp; MFD_HUGETLB) {</span>
<span class="p_del">-		struct user_struct *user = NULL;</span>
<span class="p_del">-</span>
<span class="p_del">-		file = hugetlb_file_setup(name, 0, VM_NORESERVE, &amp;user,</span>
<span class="p_del">-					HUGETLB_ANONHUGE_INODE,</span>
<span class="p_del">-					(flags &gt;&gt; MFD_HUGE_SHIFT) &amp;</span>
<span class="p_del">-					MFD_HUGE_MASK);</span>
<span class="p_del">-	} else</span>
<span class="p_del">-		file = shmem_file_setup(name, 0, VM_NORESERVE);</span>
<span class="p_del">-	if (IS_ERR(file)) {</span>
<span class="p_del">-		error = PTR_ERR(file);</span>
<span class="p_del">-		goto err_fd;</span>
<span class="p_del">-	}</span>
<span class="p_del">-	file-&gt;f_mode |= FMODE_LSEEK | FMODE_PREAD | FMODE_PWRITE;</span>
<span class="p_del">-	file-&gt;f_flags |= O_RDWR | O_LARGEFILE;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (flags &amp; MFD_ALLOW_SEALING) {</span>
<span class="p_del">-		file_seals = memfd_file_seals_ptr(file);</span>
<span class="p_del">-		*file_seals &amp;= ~F_SEAL_SEAL;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_del">-	fd_install(fd, file);</span>
<span class="p_del">-	kfree(name);</span>
<span class="p_del">-	return fd;</span>
<span class="p_del">-</span>
<span class="p_del">-err_fd:</span>
<span class="p_del">-	put_unused_fd(fd);</span>
<span class="p_del">-err_name:</span>
<span class="p_del">-	kfree(name);</span>
<span class="p_del">-	return error;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 #endif /* CONFIG_TMPFS */
 
 static void shmem_put_super(struct super_block *sb)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



