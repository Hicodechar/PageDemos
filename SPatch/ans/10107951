
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[03/16] x86/ldt: Prevent ldt inheritance on exec - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [03/16] x86/ldt: Prevent ldt inheritance on exec</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 12, 2017, 5:32 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171212173333.510281767@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10107951/mbox/"
   >mbox</a>
|
   <a href="/patch/10107951/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10107951/">/patch/10107951/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	4D934602C2 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 17:37:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 34CEB2818A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 17:37:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 296CD2944F; Tue, 12 Dec 2017 17:37:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 802A62818A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 12 Dec 2017 17:37:13 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752731AbdLLRhL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 12 Dec 2017 12:37:11 -0500
Received: from Galois.linutronix.de ([146.0.238.70]:33796 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752500AbdLLReV (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 12 Dec 2017 12:34:21 -0500
Received: from localhost ([127.0.0.1] helo=[127.0.1.1])
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1eOoQ8-0005qq-DM; Tue, 12 Dec 2017 18:32:44 +0100
Message-Id: &lt;20171212173333.510281767@linutronix.de&gt;
User-Agent: quilt/0.63-1
Date: Tue, 12 Dec 2017 18:32:24 +0100
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: x86@kernel.org, Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Borislav Petkov &lt;bpetkov@suse.de&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, linux-mm@kvack.org
Subject: [patch 03/16] x86/ldt: Prevent ldt inheritance on exec
References: &lt;20171212173221.496222173@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=x86-ldt--Prevent-ldt-inheritance-on-exec.patch
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Dec. 12, 2017, 5:32 p.m.</div>
<pre class="content">
<span class="from">From: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>

The LDT is inheritet independent of fork or exec, but that makes no sense
at all because exec is supposed to start the process clean.

The reason why this happens is that init_new_context_ldt() is called from
init_new_context() which obviously needs to be called for both fork() and
exec().

It would be surprising if anything relies on that behaviour, so it seems to
be safe to remove that misfeature.

Split the context initialization into two parts. Clear the ldt pointer and
initialize the mutex from the general context init and move the LDT
duplication to arch_dup_mmap() which is only called on fork().
<span class="signed-off-by">
Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 arch/x86/include/asm/mmu_context.h    |   21 ++++++++++++++-------
 arch/x86/kernel/ldt.c                 |   18 +++++-------------
 tools/testing/selftests/x86/ldt_gdt.c |    9 +++------
 3 files changed, 22 insertions(+), 26 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -57,11 +57,17 @@</span> <span class="p_context"> struct ldt_struct {</span>
 /*
  * Used for LDT copy/destruction.
  */
<span class="p_del">-int init_new_context_ldt(struct task_struct *tsk, struct mm_struct *mm);</span>
<span class="p_add">+static inline void init_new_context_ldt(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	mm-&gt;context.ldt = NULL;</span>
<span class="p_add">+	init_rwsem(&amp;mm-&gt;context.ldt_usr_sem);</span>
<span class="p_add">+}</span>
<span class="p_add">+int ldt_dup_context(struct mm_struct *oldmm, struct mm_struct *mm);</span>
 void destroy_context_ldt(struct mm_struct *mm);
 #else	/* CONFIG_MODIFY_LDT_SYSCALL */
<span class="p_del">-static inline int init_new_context_ldt(struct task_struct *tsk,</span>
<span class="p_del">-				       struct mm_struct *mm)</span>
<span class="p_add">+static inline void init_new_context_ldt(struct mm_struct *mm) { }</span>
<span class="p_add">+static inline int ldt_dup_context(struct mm_struct *oldmm,</span>
<span class="p_add">+				  struct mm_struct *mm)</span>
 {
 	return 0;
 }
<span class="p_chunk">@@ -137,15 +143,16 @@</span> <span class="p_context"> static inline int init_new_context(struc</span>
 	mm-&gt;context.ctx_id = atomic64_inc_return(&amp;last_mm_ctx_id);
 	atomic64_set(&amp;mm-&gt;context.tlb_gen, 0);
 
<span class="p_del">-	#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
<span class="p_add">+#ifdef CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</span>
 	if (cpu_feature_enabled(X86_FEATURE_OSPKE)) {
 		/* pkey 0 is the default and always allocated */
 		mm-&gt;context.pkey_allocation_map = 0x1;
 		/* -1 means unallocated or invalid */
 		mm-&gt;context.execute_only_pkey = -1;
 	}
<span class="p_del">-	#endif</span>
<span class="p_del">-	return init_new_context_ldt(tsk, mm);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	init_new_context_ldt(mm);</span>
<span class="p_add">+	return 0;</span>
 }
 static inline void destroy_context(struct mm_struct *mm)
 {
<span class="p_chunk">@@ -181,7 +188,7 @@</span> <span class="p_context"> do {						\</span>
 static inline int arch_dup_mmap(struct mm_struct *oldmm, struct mm_struct *mm)
 {
 	paravirt_arch_dup_mmap(oldmm, mm);
<span class="p_del">-	return 0;</span>
<span class="p_add">+	return ldt_dup_context(oldmm, mm);</span>
 }
 
 static inline void arch_exit_mmap(struct mm_struct *mm)
<span class="p_header">--- a/arch/x86/kernel/ldt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/ldt.c</span>
<span class="p_chunk">@@ -131,28 +131,20 @@</span> <span class="p_context"> static void free_ldt_struct(struct ldt_s</span>
 }
 
 /*
<span class="p_del">- * we do not have to muck with descriptors here, that is</span>
<span class="p_del">- * done in switch_mm() as needed.</span>
<span class="p_add">+ * Called on fork from arch_dup_mmap(). Just copy the current LDT state,</span>
<span class="p_add">+ * the new task is not running, so nothing can be installed.</span>
  */
<span class="p_del">-int init_new_context_ldt(struct task_struct *tsk, struct mm_struct *mm)</span>
<span class="p_add">+int ldt_dup_context(struct mm_struct *old_mm, struct mm_struct *mm)</span>
 {
 	struct ldt_struct *new_ldt;
<span class="p_del">-	struct mm_struct *old_mm;</span>
 	int retval = 0;
 
<span class="p_del">-	init_rwsem(&amp;mm-&gt;context.ldt_usr_sem);</span>
<span class="p_del">-</span>
<span class="p_del">-	old_mm = current-&gt;mm;</span>
<span class="p_del">-	if (!old_mm) {</span>
<span class="p_del">-		mm-&gt;context.ldt = NULL;</span>
<span class="p_add">+	if (!old_mm)</span>
 		return 0;
<span class="p_del">-	}</span>
 
 	mutex_lock(&amp;old_mm-&gt;context.lock);
<span class="p_del">-	if (!old_mm-&gt;context.ldt) {</span>
<span class="p_del">-		mm-&gt;context.ldt = NULL;</span>
<span class="p_add">+	if (!old_mm-&gt;context.ldt)</span>
 		goto out_unlock;
<span class="p_del">-	}</span>
 
 	new_ldt = alloc_ldt_struct(old_mm-&gt;context.ldt-&gt;nr_entries);
 	if (!new_ldt) {
<span class="p_header">--- a/tools/testing/selftests/x86/ldt_gdt.c</span>
<span class="p_header">+++ b/tools/testing/selftests/x86/ldt_gdt.c</span>
<span class="p_chunk">@@ -627,13 +627,10 @@</span> <span class="p_context"> static void do_multicpu_tests(void)</span>
 static int finish_exec_test(void)
 {
 	/*
<span class="p_del">-	 * In a sensible world, this would be check_invalid_segment(0, 1);</span>
<span class="p_del">-	 * For better or for worse, though, the LDT is inherited across exec.</span>
<span class="p_del">-	 * We can probably change this safely, but for now we test it.</span>
<span class="p_add">+	 * Older kernel versions did inherit the LDT on exec() which is</span>
<span class="p_add">+	 * wrong because exec() starts from a clean state.</span>
 	 */
<span class="p_del">-	check_valid_segment(0, 1,</span>
<span class="p_del">-			    AR_DPL3 | AR_TYPE_XRCODE | AR_S | AR_P | AR_DB,</span>
<span class="p_del">-			    42, true);</span>
<span class="p_add">+	check_invalid_segment(0, 1);</span>
 
 	return nerrs ? 1 : 0;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



