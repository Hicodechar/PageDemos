
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[62/64] drivers: use mm locking wrappers (the rest) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [62/64] drivers: use mm locking wrappers (the rest)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2018, 1:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180205012754.23615-63-dbueso@wotan.suse.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10199725/mbox/"
   >mbox</a>
|
   <a href="/patch/10199725/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10199725/">/patch/10199725/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6A14A60247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:34:56 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5802B285C4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:34:56 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 4B31A285C9; Mon,  5 Feb 2018 01:34:56 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 09F59285C4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:34:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752907AbeBEBev (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Feb 2018 20:34:51 -0500
Received: from mx2.suse.de ([195.135.220.15]:44139 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752775AbeBEB3O (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Feb 2018 20:29:14 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 54248AE15;
	Mon,  5 Feb 2018 01:28:01 +0000 (UTC)
From: Davidlohr Bueso &lt;dbueso@suse.de&gt;
To: akpm@linux-foundation.org, mingo@kernel.org
Cc: peterz@infradead.org, ldufour@linux.vnet.ibm.com, jack@suse.cz,
	mhocko@kernel.org, kirill.shutemov@linux.intel.com,
	mawilcox@microsoft.com, mgorman@techsingularity.net,
	dave@stgolabs.net, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Davidlohr Bueso &lt;dbueso@suse.de&gt;
Subject: [PATCH 62/64] drivers: use mm locking wrappers (the rest)
Date: Mon,  5 Feb 2018 02:27:52 +0100
Message-Id: &lt;20180205012754.23615-63-dbueso@wotan.suse.de&gt;
X-Mailer: git-send-email 2.12.3
In-Reply-To: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
References: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a> - Feb. 5, 2018, 1:27 a.m.</div>
<pre class="content">
<span class="from">From: Davidlohr Bueso &lt;dave@stgolabs.net&gt;</span>

This converts the rest of the drivers&#39; mmap_sem usage to
mm locking wrappers. This becomes quite straightforward
with the mmrange in place.
<span class="signed-off-by">
Signed-off-by: Davidlohr Bueso &lt;dbueso@suse.de&gt;</span>
---
 drivers/media/v4l2-core/videobuf-core.c            |  5 ++-
 drivers/media/v4l2-core/videobuf-dma-contig.c      |  5 ++-
 drivers/media/v4l2-core/videobuf-dma-sg.c          |  4 +-
 drivers/misc/cxl/cxllib.c                          |  5 ++-
 drivers/misc/cxl/fault.c                           |  5 ++-
 drivers/misc/mic/scif/scif_rma.c                   | 14 +++---
 drivers/misc/sgi-gru/grufault.c                    | 52 +++++++++++++---------
 drivers/misc/sgi-gru/grufile.c                     |  5 ++-
 drivers/oprofile/buffer_sync.c                     | 12 ++---
 .../media/atomisp/pci/atomisp2/hmm/hmm_bo.c        |  5 ++-
 drivers/tee/optee/call.c                           |  5 ++-
 drivers/vfio/vfio_iommu_spapr_tce.c                |  8 ++--
 drivers/vfio/vfio_iommu_type1.c                    | 15 ++++---
 13 files changed, 80 insertions(+), 60 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/media/v4l2-core/videobuf-core.c b/drivers/media/v4l2-core/videobuf-core.c</span>
<span class="p_header">index 9a89d3ae170f..2081606e179e 100644</span>
<span class="p_header">--- a/drivers/media/v4l2-core/videobuf-core.c</span>
<span class="p_header">+++ b/drivers/media/v4l2-core/videobuf-core.c</span>
<span class="p_chunk">@@ -533,11 +533,12 @@</span> <span class="p_context"> int videobuf_qbuf(struct videobuf_queue *q, struct v4l2_buffer *b)</span>
 	enum v4l2_field field;
 	unsigned long flags = 0;
 	int retval;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	MAGIC_CHECK(q-&gt;int_ops-&gt;magic, MAGIC_QTYPE_OPS);
 
 	if (b-&gt;memory == V4L2_MEMORY_MMAP)
<span class="p_del">-		down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 
 	videobuf_queue_lock(q);
 	retval = -EBUSY;
<span class="p_chunk">@@ -624,7 +625,7 @@</span> <span class="p_context"> int videobuf_qbuf(struct videobuf_queue *q, struct v4l2_buffer *b)</span>
 	videobuf_queue_unlock(q);
 
 	if (b-&gt;memory == V4L2_MEMORY_MMAP)
<span class="p_del">-		up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 
 	return retval;
 }
<span class="p_header">diff --git a/drivers/media/v4l2-core/videobuf-dma-contig.c b/drivers/media/v4l2-core/videobuf-dma-contig.c</span>
<span class="p_header">index e02353e340dd..8b1f58807c0d 100644</span>
<span class="p_header">--- a/drivers/media/v4l2-core/videobuf-dma-contig.c</span>
<span class="p_header">+++ b/drivers/media/v4l2-core/videobuf-dma-contig.c</span>
<span class="p_chunk">@@ -166,12 +166,13 @@</span> <span class="p_context"> static int videobuf_dma_contig_user_get(struct videobuf_dma_contig_memory *mem,</span>
 	unsigned long pages_done, user_address;
 	unsigned int offset;
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	offset = vb-&gt;baddr &amp; ~PAGE_MASK;
 	mem-&gt;size = PAGE_ALIGN(vb-&gt;size + offset);
 	ret = -EINVAL;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	vma = find_vma(mm, vb-&gt;baddr);
 	if (!vma)
<span class="p_chunk">@@ -203,7 +204,7 @@</span> <span class="p_context"> static int videobuf_dma_contig_user_get(struct videobuf_dma_contig_memory *mem,</span>
 	}
 
 out_up:
<span class="p_del">-	up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_header">diff --git a/drivers/media/v4l2-core/videobuf-dma-sg.c b/drivers/media/v4l2-core/videobuf-dma-sg.c</span>
<span class="p_header">index 64a4cd62eeb3..e7ff32aca981 100644</span>
<span class="p_header">--- a/drivers/media/v4l2-core/videobuf-dma-sg.c</span>
<span class="p_header">+++ b/drivers/media/v4l2-core/videobuf-dma-sg.c</span>
<span class="p_chunk">@@ -204,9 +204,9 @@</span> <span class="p_context"> static int videobuf_dma_init_user(struct videobuf_dmabuf *dma, int direction,</span>
 	int ret;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 	ret = videobuf_dma_init_user_locked(dma, direction, data, size, &amp;mmrange);
<span class="p_del">-	up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_header">diff --git a/drivers/misc/cxl/cxllib.c b/drivers/misc/cxl/cxllib.c</span>
<span class="p_header">index 30ccba436b3b..bf147735945c 100644</span>
<span class="p_header">--- a/drivers/misc/cxl/cxllib.c</span>
<span class="p_header">+++ b/drivers/misc/cxl/cxllib.c</span>
<span class="p_chunk">@@ -214,11 +214,12 @@</span> <span class="p_context"> int cxllib_handle_fault(struct mm_struct *mm, u64 addr, u64 size, u64 flags)</span>
 	u64 dar;
 	struct vm_area_struct *vma = NULL;
 	unsigned long page_size;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (mm == NULL)
 		return -EFAULT;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	vma = find_vma(mm, addr);
 	if (!vma) {
<span class="p_chunk">@@ -250,7 +251,7 @@</span> <span class="p_context"> int cxllib_handle_fault(struct mm_struct *mm, u64 addr, u64 size, u64 flags)</span>
 	}
 	rc = 0;
 out:
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	return rc;
 }
 EXPORT_SYMBOL_GPL(cxllib_handle_fault);
<span class="p_header">diff --git a/drivers/misc/cxl/fault.c b/drivers/misc/cxl/fault.c</span>
<span class="p_header">index 70dbb6de102c..f95169703f71 100644</span>
<span class="p_header">--- a/drivers/misc/cxl/fault.c</span>
<span class="p_header">+++ b/drivers/misc/cxl/fault.c</span>
<span class="p_chunk">@@ -317,6 +317,7 @@</span> <span class="p_context"> static void cxl_prefault_vma(struct cxl_context *ctx)</span>
 	struct vm_area_struct *vma;
 	int rc;
 	struct mm_struct *mm;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	mm = get_mem_context(ctx);
 	if (mm == NULL) {
<span class="p_chunk">@@ -325,7 +326,7 @@</span> <span class="p_context"> static void cxl_prefault_vma(struct cxl_context *ctx)</span>
 		return;
 	}
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
 		for (ea = vma-&gt;vm_start; ea &lt; vma-&gt;vm_end;
 				ea = next_segment(ea, slb.vsid)) {
<span class="p_chunk">@@ -340,7 +341,7 @@</span> <span class="p_context"> static void cxl_prefault_vma(struct cxl_context *ctx)</span>
 			last_esid = slb.esid;
 		}
 	}
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	mmput(mm);
 }
<span class="p_header">diff --git a/drivers/misc/mic/scif/scif_rma.c b/drivers/misc/mic/scif/scif_rma.c</span>
<span class="p_header">index 6ecac843e5f3..4bbdf875b5da 100644</span>
<span class="p_header">--- a/drivers/misc/mic/scif/scif_rma.c</span>
<span class="p_header">+++ b/drivers/misc/mic/scif/scif_rma.c</span>
<span class="p_chunk">@@ -274,19 +274,21 @@</span> <span class="p_context"> static inline int</span>
 __scif_dec_pinned_vm_lock(struct mm_struct *mm,
 			  int nr_pages, bool try_lock)
 {
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
 	if (!mm || !nr_pages || !scif_ulimit_check)
 		return 0;
 	if (try_lock) {
<span class="p_del">-		if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+		if (!mm_write_trylock(mm, &amp;mmrange)) {</span>
 			dev_err(scif_info.mdev.this_device,
 				&quot;%s %d err\n&quot;, __func__, __LINE__);
 			return -1;
 		}
 	} else {
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 	}
 	mm-&gt;pinned_vm -= nr_pages;
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -1386,11 +1388,11 @@</span> <span class="p_context"> int __scif_pin_pages(void *addr, size_t len, int *out_prot,</span>
 		prot |= SCIF_PROT_WRITE;
 retry:
 		mm = current-&gt;mm;
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 		if (ulimit) {
 			err = __scif_check_inc_pinned_vm(mm, nr_pages);
 			if (err) {
<span class="p_del">-				up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+				mm_write_unlock(mm, &amp;mmrange);</span>
 				pinned_pages-&gt;nr_pages = 0;
 				goto error_unmap;
 			}
<span class="p_chunk">@@ -1402,7 +1404,7 @@</span> <span class="p_context"> int __scif_pin_pages(void *addr, size_t len, int *out_prot,</span>
 				(prot &amp; SCIF_PROT_WRITE) ? FOLL_WRITE : 0,
 				pinned_pages-&gt;pages,
 				NULL, &amp;mmrange);
<span class="p_del">-		up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_unlock(mm, &amp;mmrange);</span>
 		if (nr_pages != pinned_pages-&gt;nr_pages) {
 			if (try_upgrade) {
 				if (ulimit)
<span class="p_header">diff --git a/drivers/misc/sgi-gru/grufault.c b/drivers/misc/sgi-gru/grufault.c</span>
<span class="p_header">index b35d60bb2197..bac8bb94ba65 100644</span>
<span class="p_header">--- a/drivers/misc/sgi-gru/grufault.c</span>
<span class="p_header">+++ b/drivers/misc/sgi-gru/grufault.c</span>
<span class="p_chunk">@@ -76,20 +76,21 @@</span> <span class="p_context"> struct vm_area_struct *gru_find_vma(unsigned long vaddr)</span>
  *	- NULL if vaddr invalid OR is not a valid GSEG vaddr.
  */
 
<span class="p_del">-static struct gru_thread_state *gru_find_lock_gts(unsigned long vaddr)</span>
<span class="p_add">+static struct gru_thread_state *gru_find_lock_gts(unsigned long vaddr,</span>
<span class="p_add">+						  struct range_lock *mmrange)</span>
 {
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *vma;
 	struct gru_thread_state *gts = NULL;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, mmrange);</span>
 	vma = gru_find_vma(vaddr);
 	if (vma)
 		gts = gru_find_thread_state(vma, TSID(vaddr, vma));
 	if (gts)
 		mutex_lock(&amp;gts-&gt;ts_ctxlock);
 	else
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, mmrange);</span>
 	return gts;
 }
 
<span class="p_chunk">@@ -98,8 +99,9 @@</span> <span class="p_context"> static struct gru_thread_state *gru_alloc_locked_gts(unsigned long vaddr)</span>
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *vma;
 	struct gru_thread_state *gts = ERR_PTR(-EINVAL);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	vma = gru_find_vma(vaddr);
 	if (!vma)
 		goto err;
<span class="p_chunk">@@ -108,21 +110,22 @@</span> <span class="p_context"> static struct gru_thread_state *gru_alloc_locked_gts(unsigned long vaddr)</span>
 	if (IS_ERR(gts))
 		goto err;
 	mutex_lock(&amp;gts-&gt;ts_ctxlock);
<span class="p_del">-	downgrade_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_downgrade_write(mm, &amp;mmrange);</span>
 	return gts;
 
 err:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	return gts;
 }
 
 /*
  * Unlock a GTS that was previously locked with gru_find_lock_gts().
  */
<span class="p_del">-static void gru_unlock_gts(struct gru_thread_state *gts)</span>
<span class="p_add">+static void gru_unlock_gts(struct gru_thread_state *gts,</span>
<span class="p_add">+			   struct range_lock *mmrange)</span>
 {
 	mutex_unlock(&amp;gts-&gt;ts_ctxlock);
<span class="p_del">-	up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(current-&gt;mm, mmrange);</span>
 }
 
 /*
<span class="p_chunk">@@ -597,9 +600,9 @@</span> <span class="p_context"> static irqreturn_t gru_intr(int chiplet, int blade)</span>
 		if (!gts-&gt;ts_force_cch_reload) {
 			DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-			if (down_read_trylock(&amp;gts-&gt;ts_mm-&gt;mmap_sem)) {</span>
<span class="p_add">+			if (mm_read_trylock(gts-&gt;ts_mm, &amp;mmrange)) {</span>
 				gru_try_dropin(gru, gts, tfh, NULL, &amp;mmrange);
<span class="p_del">-				up_read(&amp;gts-&gt;ts_mm-&gt;mmap_sem);</span>
<span class="p_add">+				mm_read_unlock(gts-&gt;ts_mm, &amp;mmrange);</span>
 			}
 		} else {
 			tfh_user_polling_mode(tfh);
<span class="p_chunk">@@ -672,7 +675,7 @@</span> <span class="p_context"> int gru_handle_user_call_os(unsigned long cb)</span>
 	if ((cb &amp; (GRU_HANDLE_STRIDE - 1)) || ucbnum &gt;= GRU_NUM_CB)
 		return -EINVAL;
 
<span class="p_del">-	gts = gru_find_lock_gts(cb);</span>
<span class="p_add">+	gts = gru_find_lock_gts(cb, &amp;mmrange);</span>
 	if (!gts)
 		return -EINVAL;
 	gru_dbg(grudev, &quot;address 0x%lx, gid %d, gts 0x%p\n&quot;, cb, gts-&gt;ts_gru ? gts-&gt;ts_gru-&gt;gs_gid : -1, gts);
<span class="p_chunk">@@ -699,7 +702,7 @@</span> <span class="p_context"> int gru_handle_user_call_os(unsigned long cb)</span>
 		ret = gru_user_dropin(gts, tfh, cbk, &amp;mmrange);
 	}
 exit:
<span class="p_del">-	gru_unlock_gts(gts);</span>
<span class="p_add">+	gru_unlock_gts(gts, &amp;mmrange);</span>
 	return ret;
 }
 
<span class="p_chunk">@@ -713,12 +716,13 @@</span> <span class="p_context"> int gru_get_exception_detail(unsigned long arg)</span>
 	struct gru_control_block_extended *cbe;
 	struct gru_thread_state *gts;
 	int ucbnum, cbrnum, ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	STAT(user_exception);
 	if (copy_from_user(&amp;excdet, (void __user *)arg, sizeof(excdet)))
 		return -EFAULT;
 
<span class="p_del">-	gts = gru_find_lock_gts(excdet.cb);</span>
<span class="p_add">+	gts = gru_find_lock_gts(excdet.cb, &amp;mmrange);</span>
 	if (!gts)
 		return -EINVAL;
 
<span class="p_chunk">@@ -743,7 +747,7 @@</span> <span class="p_context"> int gru_get_exception_detail(unsigned long arg)</span>
 	} else {
 		ret = -EAGAIN;
 	}
<span class="p_del">-	gru_unlock_gts(gts);</span>
<span class="p_add">+	gru_unlock_gts(gts, &amp;mmrange);</span>
 
 	gru_dbg(grudev,
 		&quot;cb 0x%lx, op %d, exopc %d, cbrstate %d, cbrexecstatus 0x%x, ecause 0x%x, &quot;
<span class="p_chunk">@@ -787,6 +791,7 @@</span> <span class="p_context"> int gru_user_unload_context(unsigned long arg)</span>
 {
 	struct gru_thread_state *gts;
 	struct gru_unload_context_req req;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	STAT(user_unload_context);
 	if (copy_from_user(&amp;req, (void __user *)arg, sizeof(req)))
<span class="p_chunk">@@ -797,13 +802,13 @@</span> <span class="p_context"> int gru_user_unload_context(unsigned long arg)</span>
 	if (!req.gseg)
 		return gru_unload_all_contexts();
 
<span class="p_del">-	gts = gru_find_lock_gts(req.gseg);</span>
<span class="p_add">+	gts = gru_find_lock_gts(req.gseg, &amp;mmrange);</span>
 	if (!gts)
 		return -EINVAL;
 
 	if (gts-&gt;ts_gru)
 		gru_unload_context(gts, 1);
<span class="p_del">-	gru_unlock_gts(gts);</span>
<span class="p_add">+	gru_unlock_gts(gts, &amp;mmrange);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -817,6 +822,7 @@</span> <span class="p_context"> int gru_user_flush_tlb(unsigned long arg)</span>
 	struct gru_thread_state *gts;
 	struct gru_flush_tlb_req req;
 	struct gru_mm_struct *gms;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	STAT(user_flush_tlb);
 	if (copy_from_user(&amp;req, (void __user *)arg, sizeof(req)))
<span class="p_chunk">@@ -825,12 +831,12 @@</span> <span class="p_context"> int gru_user_flush_tlb(unsigned long arg)</span>
 	gru_dbg(grudev, &quot;gseg 0x%lx, vaddr 0x%lx, len 0x%lx\n&quot;, req.gseg,
 		req.vaddr, req.len);
 
<span class="p_del">-	gts = gru_find_lock_gts(req.gseg);</span>
<span class="p_add">+	gts = gru_find_lock_gts(req.gseg, &amp;mmrange);</span>
 	if (!gts)
 		return -EINVAL;
 
 	gms = gts-&gt;ts_gms;
<span class="p_del">-	gru_unlock_gts(gts);</span>
<span class="p_add">+	gru_unlock_gts(gts, &amp;mmrange);</span>
 	gru_flush_tlb_range(gms, req.vaddr, req.len);
 
 	return 0;
<span class="p_chunk">@@ -843,6 +849,7 @@</span> <span class="p_context"> long gru_get_gseg_statistics(unsigned long arg)</span>
 {
 	struct gru_thread_state *gts;
 	struct gru_get_gseg_statistics_req req;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (copy_from_user(&amp;req, (void __user *)arg, sizeof(req)))
 		return -EFAULT;
<span class="p_chunk">@@ -852,10 +859,10 @@</span> <span class="p_context"> long gru_get_gseg_statistics(unsigned long arg)</span>
 	 * If no gts exists in the array, the context has never been used &amp; all
 	 * statistics are implicitly 0.
 	 */
<span class="p_del">-	gts = gru_find_lock_gts(req.gseg);</span>
<span class="p_add">+	gts = gru_find_lock_gts(req.gseg, &amp;mmrange);</span>
 	if (gts) {
 		memcpy(&amp;req.stats, &amp;gts-&gt;ustats, sizeof(gts-&gt;ustats));
<span class="p_del">-		gru_unlock_gts(gts);</span>
<span class="p_add">+		gru_unlock_gts(gts, &amp;mmrange);</span>
 	} else {
 		memset(&amp;req.stats, 0, sizeof(gts-&gt;ustats));
 	}
<span class="p_chunk">@@ -875,13 +882,14 @@</span> <span class="p_context"> int gru_set_context_option(unsigned long arg)</span>
 	struct gru_thread_state *gts;
 	struct gru_set_context_option_req req;
 	int ret = 0;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	STAT(set_context_option);
 	if (copy_from_user(&amp;req, (void __user *)arg, sizeof(req)))
 		return -EFAULT;
 	gru_dbg(grudev, &quot;op %d, gseg 0x%lx, value1 0x%lx\n&quot;, req.op, req.gseg, req.val1);
 
<span class="p_del">-	gts = gru_find_lock_gts(req.gseg);</span>
<span class="p_add">+	gts = gru_find_lock_gts(req.gseg, &amp;mmrange);</span>
 	if (!gts) {
 		gts = gru_alloc_locked_gts(req.gseg);
 		if (IS_ERR(gts))
<span class="p_chunk">@@ -912,7 +920,7 @@</span> <span class="p_context"> int gru_set_context_option(unsigned long arg)</span>
 	default:
 		ret = -EINVAL;
 	}
<span class="p_del">-	gru_unlock_gts(gts);</span>
<span class="p_add">+	gru_unlock_gts(gts, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_header">diff --git a/drivers/misc/sgi-gru/grufile.c b/drivers/misc/sgi-gru/grufile.c</span>
<span class="p_header">index 104a05f6b738..1403a4f73cbd 100644</span>
<span class="p_header">--- a/drivers/misc/sgi-gru/grufile.c</span>
<span class="p_header">+++ b/drivers/misc/sgi-gru/grufile.c</span>
<span class="p_chunk">@@ -136,6 +136,7 @@</span> <span class="p_context"> static int gru_create_new_context(unsigned long arg)</span>
 	struct vm_area_struct *vma;
 	struct gru_vma_data *vdata;
 	int ret = -EINVAL;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (copy_from_user(&amp;req, (void __user *)arg, sizeof(req)))
 		return -EFAULT;
<span class="p_chunk">@@ -148,7 +149,7 @@</span> <span class="p_context"> static int gru_create_new_context(unsigned long arg)</span>
 	if (!(req.options &amp; GRU_OPT_MISS_MASK))
 		req.options |= GRU_OPT_MISS_FMM_INTR;
 
<span class="p_del">-	down_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(current-&gt;mm, &amp;mmrange);</span>
 	vma = gru_find_vma(req.gseg);
 	if (vma) {
 		vdata = vma-&gt;vm_private_data;
<span class="p_chunk">@@ -159,7 +160,7 @@</span> <span class="p_context"> static int gru_create_new_context(unsigned long arg)</span>
 		vdata-&gt;vd_tlb_preload_count = req.tlb_preload_count;
 		ret = 0;
 	}
<span class="p_del">-	up_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(current-&gt;mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_header">diff --git a/drivers/oprofile/buffer_sync.c b/drivers/oprofile/buffer_sync.c</span>
<span class="p_header">index ac27f3d3fbb4..33a36b97f8a5 100644</span>
<span class="p_header">--- a/drivers/oprofile/buffer_sync.c</span>
<span class="p_header">+++ b/drivers/oprofile/buffer_sync.c</span>
<span class="p_chunk">@@ -90,12 +90,13 @@</span> <span class="p_context"> munmap_notify(struct notifier_block *self, unsigned long val, void *data)</span>
 	unsigned long addr = (unsigned long)data;
 	struct mm_struct *mm = current-&gt;mm;
 	struct vm_area_struct *mpnt;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	mpnt = find_vma(mm, addr);
 	if (mpnt &amp;&amp; mpnt-&gt;vm_file &amp;&amp; (mpnt-&gt;vm_flags &amp; VM_EXEC)) {
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 		/* To avoid latency problems, we only process the current CPU,
 		 * hoping that most samples for the task are on this CPU
 		 */
<span class="p_chunk">@@ -103,7 +104,7 @@</span> <span class="p_context"> munmap_notify(struct notifier_block *self, unsigned long val, void *data)</span>
 		return 0;
 	}
 
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	return 0;
 }
 
<span class="p_chunk">@@ -255,8 +256,9 @@</span> <span class="p_context"> lookup_dcookie(struct mm_struct *mm, unsigned long addr, off_t *offset)</span>
 {
 	unsigned long cookie = NO_COOKIE;
 	struct vm_area_struct *vma;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (vma = find_vma(mm, addr); vma; vma = vma-&gt;vm_next) {
 
 		if (addr &lt; vma-&gt;vm_start || addr &gt;= vma-&gt;vm_end)
<span class="p_chunk">@@ -276,7 +278,7 @@</span> <span class="p_context"> lookup_dcookie(struct mm_struct *mm, unsigned long addr, off_t *offset)</span>
 
 	if (!vma)
 		cookie = INVALID_COOKIE;
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	return cookie;
 }
<span class="p_header">diff --git a/drivers/staging/media/atomisp/pci/atomisp2/hmm/hmm_bo.c b/drivers/staging/media/atomisp/pci/atomisp2/hmm/hmm_bo.c</span>
<span class="p_header">index 79bd540d7882..f38303ea8470 100644</span>
<span class="p_header">--- a/drivers/staging/media/atomisp/pci/atomisp2/hmm/hmm_bo.c</span>
<span class="p_header">+++ b/drivers/staging/media/atomisp/pci/atomisp2/hmm/hmm_bo.c</span>
<span class="p_chunk">@@ -983,6 +983,7 @@</span> <span class="p_context"> static int alloc_user_pages(struct hmm_buffer_object *bo,</span>
 	int i;
 	struct vm_area_struct *vma;
 	struct page **pages;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	pages = kmalloc_array(bo-&gt;pgnr, sizeof(struct page *), GFP_KERNEL);
 	if (unlikely(!pages))
<span class="p_chunk">@@ -996,9 +997,9 @@</span> <span class="p_context"> static int alloc_user_pages(struct hmm_buffer_object *bo,</span>
 	}
 
 	mutex_unlock(&amp;bo-&gt;mutex);
<span class="p_del">-	down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 	vma = find_vma(current-&gt;mm, (unsigned long)userptr);
<span class="p_del">-	up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 	if (vma == NULL) {
 		dev_err(atomisp_dev, &quot;find_vma failed\n&quot;);
 		kfree(bo-&gt;page_obj);
<span class="p_header">diff --git a/drivers/tee/optee/call.c b/drivers/tee/optee/call.c</span>
<span class="p_header">index a5afbe6dee68..488a08e17a93 100644</span>
<span class="p_header">--- a/drivers/tee/optee/call.c</span>
<span class="p_header">+++ b/drivers/tee/optee/call.c</span>
<span class="p_chunk">@@ -561,11 +561,12 @@</span> <span class="p_context"> static int check_mem_type(unsigned long start, size_t num_pages)</span>
 {
 	struct mm_struct *mm = current-&gt;mm;
 	int rc;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	rc = __check_mem_type(find_vma(mm, start),
 			      start + num_pages * PAGE_SIZE);
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	return rc;
 }
<span class="p_header">diff --git a/drivers/vfio/vfio_iommu_spapr_tce.c b/drivers/vfio/vfio_iommu_spapr_tce.c</span>
<span class="p_header">index 759a5bdd40e1..114da7865bd2 100644</span>
<span class="p_header">--- a/drivers/vfio/vfio_iommu_spapr_tce.c</span>
<span class="p_header">+++ b/drivers/vfio/vfio_iommu_spapr_tce.c</span>
<span class="p_chunk">@@ -44,7 +44,7 @@</span> <span class="p_context"> static long try_increment_locked_vm(struct mm_struct *mm, long npages)</span>
 	if (!npages)
 		return 0;
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	locked = mm-&gt;locked_vm + npages;
 	lock_limit = rlimit(RLIMIT_MEMLOCK) &gt;&gt; PAGE_SHIFT;
 	if (locked &gt; lock_limit &amp;&amp; !capable(CAP_IPC_LOCK))
<span class="p_chunk">@@ -58,7 +58,7 @@</span> <span class="p_context"> static long try_increment_locked_vm(struct mm_struct *mm, long npages)</span>
 			rlimit(RLIMIT_MEMLOCK),
 			ret ? &quot; - exceeded&quot; : &quot;&quot;);
 
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_chunk">@@ -68,7 +68,7 @@</span> <span class="p_context"> static void decrement_locked_vm(struct mm_struct *mm, long npages)</span>
 	if (!mm || !npages)
 		return;
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	if (WARN_ON_ONCE(npages &gt; mm-&gt;locked_vm))
 		npages = mm-&gt;locked_vm;
 	mm-&gt;locked_vm -= npages;
<span class="p_chunk">@@ -76,7 +76,7 @@</span> <span class="p_context"> static void decrement_locked_vm(struct mm_struct *mm, long npages)</span>
 			npages &lt;&lt; PAGE_SHIFT,
 			mm-&gt;locked_vm &lt;&lt; PAGE_SHIFT,
 			rlimit(RLIMIT_MEMLOCK));
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 }
 
 /*
<span class="p_header">diff --git a/drivers/vfio/vfio_iommu_type1.c b/drivers/vfio/vfio_iommu_type1.c</span>
<span class="p_header">index 1b3b103da637..80a6ec8722fb 100644</span>
<span class="p_header">--- a/drivers/vfio/vfio_iommu_type1.c</span>
<span class="p_header">+++ b/drivers/vfio/vfio_iommu_type1.c</span>
<span class="p_chunk">@@ -251,6 +251,7 @@</span> <span class="p_context"> static int vfio_lock_acct(struct task_struct *task, long npage, bool *lock_cap)</span>
 	struct mm_struct *mm;
 	bool is_current;
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (!npage)
 		return 0;
<span class="p_chunk">@@ -261,7 +262,7 @@</span> <span class="p_context"> static int vfio_lock_acct(struct task_struct *task, long npage, bool *lock_cap)</span>
 	if (!mm)
 		return -ESRCH; /* process exited */
 
<span class="p_del">-	ret = down_write_killable(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	ret = mm_write_lock_killable(mm, &amp;mmrange);</span>
 	if (!ret) {
 		if (npage &gt; 0) {
 			if (lock_cap ? !*lock_cap :
<span class="p_chunk">@@ -279,7 +280,7 @@</span> <span class="p_context"> static int vfio_lock_acct(struct task_struct *task, long npage, bool *lock_cap)</span>
 		if (!ret)
 			mm-&gt;locked_vm += npage;
 
<span class="p_del">-		up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_unlock(mm, &amp;mmrange);</span>
 	}
 
 	if (!is_current)
<span class="p_chunk">@@ -339,21 +340,21 @@</span> <span class="p_context"> static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,</span>
 	struct page *page[1];
 	struct vm_area_struct *vma;
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (mm == current-&gt;mm) {
 		ret = get_user_pages_fast(vaddr, 1, !!(prot &amp; IOMMU_WRITE),
 					  page);
 	} else {
 		unsigned int flags = 0;
<span class="p_del">-		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 		if (prot &amp; IOMMU_WRITE)
 			flags |= FOLL_WRITE;
 
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(mm, &amp;mmrange);</span>
 		ret = get_user_pages_remote(NULL, mm, vaddr, 1, flags, page,
 					    NULL, NULL, &amp;mmrange);
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 	}
 
 	if (ret == 1) {
<span class="p_chunk">@@ -361,7 +362,7 @@</span> <span class="p_context"> static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,</span>
 		return 0;
 	}
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	vma = find_vma_intersection(mm, vaddr, vaddr + 1);
 
<span class="p_chunk">@@ -371,7 +372,7 @@</span> <span class="p_context"> static int vaddr_get_pfn(struct mm_struct *mm, unsigned long vaddr,</span>
 			ret = 0;
 	}
 
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 	return ret;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



