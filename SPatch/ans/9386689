
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] fs/proc/meminfo: introduce Unaccounted statistic - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] fs/proc/meminfo: introduce Unaccounted statistic</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 20, 2016, 12:11 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161020121149.9935-1-vbabka@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9386689/mbox/"
   >mbox</a>
|
   <a href="/patch/9386689/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9386689/">/patch/9386689/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	148A060762 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 20 Oct 2016 12:12:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 05CD129892
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 20 Oct 2016 12:12:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id EE8DB29C0A; Thu, 20 Oct 2016 12:12:18 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EDC7F29892
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 20 Oct 2016 12:12:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757164AbcJTMMG (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 20 Oct 2016 08:12:06 -0400
Received: from mx2.suse.de ([195.135.220.15]:33004 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753320AbcJTMMF (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 20 Oct 2016 08:12:05 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 2C773AD20;
	Thu, 20 Oct 2016 12:12:02 +0000 (UTC)
From: Vlastimil Babka &lt;vbabka@suse.cz&gt;
To: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Vlastimil Babka &lt;vbabka@suse.cz&gt;, Michal Hocko &lt;mhocko@suse.com&gt;,
	Mel Gorman &lt;mgorman@techsingularity.net&gt;,
	Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, David Rientjes &lt;rientjes@google.com&gt;
Subject: [RFC] fs/proc/meminfo: introduce Unaccounted statistic
Date: Thu, 20 Oct 2016 14:11:49 +0200
Message-Id: &lt;20161020121149.9935-1-vbabka@suse.cz&gt;
X-Mailer: git-send-email 2.10.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Oct. 20, 2016, 12:11 p.m.</div>
<pre class="content">
The /proc/meminfo virtual file is a collection of various system-wide memory
usage statistics. One of the use cases for looking at the output is to see
whether the kernel might be leaking memory by direct allocations that are not
counted among any of the statistics. This is hovewer not immediately obvious,
because some fields are meant to add up to the MemTotal value, and others not.
Subtle changes also happen over time, e.g. the AnonPages field started
including THP&#39;s since commit 3cd14fcd3f12 (&quot;thp: account anon transparent
huge pages into NR_ANON_PAGES&quot;) and the Cached field used to include hugetlb
until commit 4165b9b46181 (&quot;hugetlb: do not account hugetlb pages as
NR_FILE_PAGES&quot;).

To make kernel memory leaks more obvious, this patch adds an Unaccounted field
whose value is calculated by subtracting a sum of fields that are supposed to
add up to MemTotal without overlap, from the MeTotal value. This should also
help anyone looking at the code to determine these fields easily.

Not-yet-signed-off-by: Vlastimil Babka &lt;vbabka@suse.cz&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Mel Gorman &lt;mgorman@techsingularity.net&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Cc: Hugh Dickins &lt;hughd@google.com&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;
---
Hi, I&#39;m wondering if people would find this useful. If you think it is, and
to not make performance worse, I could also make sure in proper submission
that values are not read via global_page_state() multiple times etc...

 fs/proc/meminfo.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Oct. 20, 2016, 1:33 p.m.</div>
<pre class="content">
On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:
[...]
<span class="quote">&gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt; that values are not read via global_page_state() multiple times etc...</span>

I definitely find this information useful and hate to do the math all
the time but on the other hand this is quite fragile and I can imagine
we can easily forget to add something there and provide a misleading
information to the userspace. So I would be worried with a long term
maintainability of this.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=160">Dave Chinner</a> - Oct. 20, 2016, 10:59 p.m.</div>
<pre class="content">
On Thu, Oct 20, 2016 at 03:33:58PM +0200, Michal Hocko wrote:
<span class="quote">&gt; On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt; &gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt; &gt; that values are not read via global_page_state() multiple times etc...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I definitely find this information useful and hate to do the math all</span>
<span class="quote">&gt; the time but on the other hand this is quite fragile and I can imagine</span>
<span class="quote">&gt; we can easily forget to add something there and provide a misleading</span>
<span class="quote">&gt; information to the userspace. So I would be worried with a long term</span>
<span class="quote">&gt; maintainability of this.</span>

This will result in valid memory usage by subsystems like the XFS
buffer cache being reported as &quot;unaccounted&quot;. Given this cache
(whose size is shrinker controlled) can grow to gigabytes in size
under various metadata intensive workloads, there&#39;s every chance
that such reporting will make users incorrectly think they have a
massive memory leak....

Cheers,

Dave.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Oct. 21, 2016, 7:25 a.m.</div>
<pre class="content">
On 10/21/2016 12:59 AM, Dave Chinner wrote:
<span class="quote">&gt; On Thu, Oct 20, 2016 at 03:33:58PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt;&gt; On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:</span>
<span class="quote">&gt;&gt; [...]</span>
<span class="quote">&gt;&gt; &gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt;&gt; &gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt;&gt; &gt; that values are not read via global_page_state() multiple times etc...</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I definitely find this information useful and hate to do the math all</span>
<span class="quote">&gt;&gt; the time but on the other hand this is quite fragile and I can imagine</span>
<span class="quote">&gt;&gt; we can easily forget to add something there and provide a misleading</span>
<span class="quote">&gt;&gt; information to the userspace. So I would be worried with a long term</span>
<span class="quote">&gt;&gt; maintainability of this.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This will result in valid memory usage by subsystems like the XFS</span>
<span class="quote">&gt; buffer cache being reported as &quot;unaccounted&quot;. Given this cache</span>
<span class="quote">&gt; (whose size is shrinker controlled) can grow to gigabytes in size</span>
<span class="quote">&gt; under various metadata intensive workloads, there&#39;s every chance</span>
<span class="quote">&gt; that such reporting will make users incorrectly think they have a</span>
<span class="quote">&gt; massive memory leak....</span>

Is the XFS buffer cache accounted (and visible) somewhere then? I&#39;d say getting 
such large consumers to become visible on the same level as others would be 
another advantage...

And yeah, I can even recall a bug report, where I had to do the calculation 
myself and it looked like a big leak, and it took some effort to connect it to 
xfs buffers. I&#39;d very much welcome for it to be more obvious.

Vlastimil
<span class="quote">
&gt; Cheers,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Dave.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Oct. 21, 2016, 7:31 a.m.</div>
<pre class="content">
On 10/20/2016 03:33 PM, Michal Hocko wrote:
<span class="quote">&gt; On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt;&gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt;&gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt;&gt; that values are not read via global_page_state() multiple times etc...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I definitely find this information useful and hate to do the math all</span>
<span class="quote">&gt; the time but on the other hand this is quite fragile and I can imagine</span>
<span class="quote">&gt; we can easily forget to add something there and provide a misleading</span>
<span class="quote">&gt; information to the userspace. So I would be worried with a long term</span>
<span class="quote">&gt; maintainability of this.</span>

I wouldn&#39;t fear this that much. Maybe even on the contrary - if we unknowingly 
change the picture by misacounting something, or changing a counter to become 
subset of another, and Unaccounted starts to give weird values, it will give us 
hint that there&#39;s either a problem to fix, or a missed documentation update.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Oct. 21, 2016, 7:36 a.m.</div>
<pre class="content">
On Fri 21-10-16 09:59:29, Dave Chinner wrote:
<span class="quote">&gt; On Thu, Oct 20, 2016 at 03:33:58PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:</span>
<span class="quote">&gt; &gt; [...]</span>
<span class="quote">&gt; &gt; &gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt; &gt; &gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt; &gt; &gt; that values are not read via global_page_state() multiple times etc...</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I definitely find this information useful and hate to do the math all</span>
<span class="quote">&gt; &gt; the time but on the other hand this is quite fragile and I can imagine</span>
<span class="quote">&gt; &gt; we can easily forget to add something there and provide a misleading</span>
<span class="quote">&gt; &gt; information to the userspace. So I would be worried with a long term</span>
<span class="quote">&gt; &gt; maintainability of this.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This will result in valid memory usage by subsystems like the XFS</span>
<span class="quote">&gt; buffer cache being reported as &quot;unaccounted&quot;.</span>

I would argue that the file is more intended for developers than regular
users. Most of those counters simply require a deep knowledge of the MM
subsystem to interpret them correctly (yeah we have seen many reports
that the free memory is too low but we always managed to explain...).

So to me this is more a convenience thing for developers than anything
else. But my worry about maintainability still stands. People who are
adding new counters might easily forget to update this part, so I am not
actually sure it is a good idea long term. Getting a misleading data is
worse than pushing developers to do the math and scratch their heads
about what should be included IMHO.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=160">Dave Chinner</a> - Oct. 21, 2016, 11:17 a.m.</div>
<pre class="content">
On Fri, Oct 21, 2016 at 09:25:10AM +0200, Vlastimil Babka wrote:
<span class="quote">&gt; On 10/21/2016 12:59 AM, Dave Chinner wrote:</span>
<span class="quote">&gt; &gt;On Thu, Oct 20, 2016 at 03:33:58PM +0200, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt;&gt;On Thu 20-10-16 14:11:49, Vlastimil Babka wrote:</span>
<span class="quote">&gt; &gt;&gt;[...]</span>
<span class="quote">&gt; &gt;&gt;&gt; Hi, I&#39;m wondering if people would find this useful. If you think it is, and</span>
<span class="quote">&gt; &gt;&gt;&gt; to not make performance worse, I could also make sure in proper submission</span>
<span class="quote">&gt; &gt;&gt;&gt; that values are not read via global_page_state() multiple times etc...</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;I definitely find this information useful and hate to do the math all</span>
<span class="quote">&gt; &gt;&gt;the time but on the other hand this is quite fragile and I can imagine</span>
<span class="quote">&gt; &gt;&gt;we can easily forget to add something there and provide a misleading</span>
<span class="quote">&gt; &gt;&gt;information to the userspace. So I would be worried with a long term</span>
<span class="quote">&gt; &gt;&gt;maintainability of this.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;This will result in valid memory usage by subsystems like the XFS</span>
<span class="quote">&gt; &gt;buffer cache being reported as &quot;unaccounted&quot;. Given this cache</span>
<span class="quote">&gt; &gt;(whose size is shrinker controlled) can grow to gigabytes in size</span>
<span class="quote">&gt; &gt;under various metadata intensive workloads, there&#39;s every chance</span>
<span class="quote">&gt; &gt;that such reporting will make users incorrectly think they have a</span>
<span class="quote">&gt; &gt;massive memory leak....</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is the XFS buffer cache accounted (and visible) somewhere then? I&#39;d</span>
<span class="quote">&gt; say getting such large consumers to become visible on the same level</span>
<span class="quote">&gt; as others would be another advantage...</span>

It&#39;s handles are visible via the xfs_buf slab cache. By the time
you&#39;ve got enough memory in the buffer cache for it to be noticed,
the xfs_buf slab is near the top of the list in slabtop.

Of course, because of the crazy way slub names caches, this can be
impossible to find because there isn&#39;t a &quot;xfs_buf&quot; slab cache that
shows up in slabtop. It&#39;ll end being called something like
&quot;mnt_cache&quot;....

Cheers,

Dave.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/meminfo.c b/fs/proc/meminfo.c</span>
<span class="p_header">index 8a428498d6b2..3fcd71d4d805 100644</span>
<span class="p_header">--- a/fs/proc/meminfo.c</span>
<span class="p_header">+++ b/fs/proc/meminfo.c</span>
<span class="p_chunk">@@ -48,6 +48,7 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 	unsigned long committed;
 	long cached;
 	long available;
<span class="p_add">+	long unaccounted;</span>
 	unsigned long pages[NR_LRU_LISTS];
 	int lru;
 
<span class="p_chunk">@@ -65,6 +66,18 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 
 	available = si_mem_available();
 
<span class="p_add">+	unaccounted = i.totalram - i.freeram</span>
<span class="p_add">+			- global_node_page_state(NR_ANON_MAPPED)</span>
<span class="p_add">+			- global_node_page_state(NR_FILE_PAGES)</span>
<span class="p_add">+			- global_page_state(NR_PAGETABLE)</span>
<span class="p_add">+			- global_page_state(NR_SLAB_RECLAIMABLE)</span>
<span class="p_add">+			- global_page_state(NR_SLAB_UNRECLAIMABLE)</span>
<span class="p_add">+			- (global_page_state(NR_KERNEL_STACK_KB)</span>
<span class="p_add">+							&gt;&gt; (PAGE_SHIFT - 10))</span>
<span class="p_add">+			- global_page_state(NR_BOUNCE)</span>
<span class="p_add">+			- global_node_page_state(NR_WRITEBACK_TEMP)</span>
<span class="p_add">+			- hugetlb_total_pages();</span>
<span class="p_add">+</span>
 	show_val_kb(m, &quot;MemTotal:       &quot;, i.totalram);
 	show_val_kb(m, &quot;MemFree:        &quot;, i.freeram);
 	show_val_kb(m, &quot;MemAvailable:   &quot;, available);
<span class="p_chunk">@@ -119,6 +132,7 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 		    global_page_state(NR_PAGETABLE));
 #ifdef CONFIG_QUICKLIST
 	show_val_kb(m, &quot;Quicklists:     &quot;, quicklist_total_size());
<span class="p_add">+	unaccounted -= quicklist_total_size();</span>
 #endif
 
 	show_val_kb(m, &quot;NFS_Unstable:   &quot;,
<span class="p_chunk">@@ -156,6 +170,10 @@</span> <span class="p_context"> static int meminfo_proc_show(struct seq_file *m, void *v)</span>
 
 	hugetlb_report_meminfo(m);
 
<span class="p_add">+	if (unaccounted &lt; 0)</span>
<span class="p_add">+		unaccounted = 0;</span>
<span class="p_add">+	show_val_kb(m, &quot;Unaccounted:    &quot;, unaccounted);</span>
<span class="p_add">+</span>
 	arch_report_meminfo(m);
 
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



