
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2] sparc64 mm: Fix more TSB sizing issues - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2] sparc64 mm: Fix more TSB sizing issues</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 31, 2016, 8:48 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1472676499-6325-1-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9307783/mbox/"
   >mbox</a>
|
   <a href="/patch/9307783/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9307783/">/patch/9307783/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DC58C60756 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Aug 2016 20:49:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C5E6F28E90
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Aug 2016 20:49:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id B8563290B0; Wed, 31 Aug 2016 20:49:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	UNPARSEABLE_RELAY autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 086AB28E90
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 31 Aug 2016 20:49:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759982AbcHaUtJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 31 Aug 2016 16:49:09 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:33745 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753198AbcHaUtF (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 31 Aug 2016 16:49:05 -0400
Received: from userv0021.oracle.com (userv0021.oracle.com [156.151.31.71])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id u7VKmUNB028416
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Wed, 31 Aug 2016 20:48:31 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0021.oracle.com (8.13.8/8.13.8) with ESMTP id u7VKmUZT017252
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Wed, 31 Aug 2016 20:48:30 GMT
Received: from abhmp0015.oracle.com (abhmp0015.oracle.com [141.146.116.21])
	by userv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	u7VKmOAD028906; Wed, 31 Aug 2016 20:48:30 GMT
Received: from monkey.oracle.com (/50.188.161.229)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Wed, 31 Aug 2016 13:48:24 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-kernel@vger.kernel.org, sparclinux@vger.kernel.org
Cc: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Nitin Gupta &lt;nitin.m.gupta@oracle.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v2] sparc64 mm: Fix more TSB sizing issues
Date: Wed, 31 Aug 2016 13:48:19 -0700
Message-Id: &lt;1472676499-6325-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.11
X-Source-IP: userv0021.oracle.com [156.151.31.71]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Aug. 31, 2016, 8:48 p.m.</div>
<pre class="content">
Commit af1b1a9b36b8 (&quot;sparc64 mm: Fix base TSB sizing when hugetlb
pages are used&quot;) addressed the difference between hugetlb and THP
pages when computing TSB sizes.  The following additional issues
were also discovered while working with the code.

In order to save memory, THP makes use of a huge zero page.  This huge
zero page does not count against a task&#39;s RSS, but it does consume TSB
entries.  This is similar to hugetlb pages.  Therefore, count huge
zero page entries in hugetlb_pte_count.

Accounting of THP pages is done in the routine set_pmd_at().
Unfortunately, this does not catch the case where a THP page is split.
To handle this case, decrement the count in pmdp_invalidate().
pmdp_invalidate is only called when splitting a THP.  However, &#39;sanity
checks&#39; are added in case it is ever called for other purposes.

A more general issue exists with HPAGE_SIZE accounting.
hugetlb_pte_count tracks the number of HPAGE_SIZE (8M) pages.  This
value is used to size the TSB for HPAGE_SIZE pages.  However,
each HPAGE_SIZE page consists of two REAL_HPAGE_SIZE (4M) pages.
The TSB contains an entry for each REAL_HPAGE_SIZE page.  Therefore,
the number of REAL_HPAGE_SIZE pages should be used to size the huge
page TSB.  A new compile time constant REAL_HPAGE_PER_HPAGE is used
to multiply hugetlb_pte_count before sizing the TSB.

Changes from V1
- Fixed build issue if hugetlb or THP not configured
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 arch/sparc/include/asm/page_64.h |  1 +
 arch/sparc/mm/fault_64.c         |  1 +
 arch/sparc/mm/tlb.c              | 35 +++++++++++++++++++++++++++++++----
 arch/sparc/mm/tsb.c              | 18 ++++++++++++------
 4 files changed, 45 insertions(+), 10 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=129">David Miller</a> - Sept. 28, 2016, 3:30 p.m.</div>
<pre class="content">
<span class="from">From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
Date: Wed, 31 Aug 2016 13:48:19 -0700
<span class="quote">
&gt; Commit af1b1a9b36b8 (&quot;sparc64 mm: Fix base TSB sizing when hugetlb</span>
<span class="quote">&gt; pages are used&quot;) addressed the difference between hugetlb and THP</span>
<span class="quote">&gt; pages when computing TSB sizes.  The following additional issues</span>
<span class="quote">&gt; were also discovered while working with the code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In order to save memory, THP makes use of a huge zero page.  This huge</span>
<span class="quote">&gt; zero page does not count against a task&#39;s RSS, but it does consume TSB</span>
<span class="quote">&gt; entries.  This is similar to hugetlb pages.  Therefore, count huge</span>
<span class="quote">&gt; zero page entries in hugetlb_pte_count.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Accounting of THP pages is done in the routine set_pmd_at().</span>
<span class="quote">&gt; Unfortunately, this does not catch the case where a THP page is split.</span>
<span class="quote">&gt; To handle this case, decrement the count in pmdp_invalidate().</span>
<span class="quote">&gt; pmdp_invalidate is only called when splitting a THP.  However, &#39;sanity</span>
<span class="quote">&gt; checks&#39; are added in case it is ever called for other purposes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A more general issue exists with HPAGE_SIZE accounting.</span>
<span class="quote">&gt; hugetlb_pte_count tracks the number of HPAGE_SIZE (8M) pages.  This</span>
<span class="quote">&gt; value is used to size the TSB for HPAGE_SIZE pages.  However,</span>
<span class="quote">&gt; each HPAGE_SIZE page consists of two REAL_HPAGE_SIZE (4M) pages.</span>
<span class="quote">&gt; The TSB contains an entry for each REAL_HPAGE_SIZE page.  Therefore,</span>
<span class="quote">&gt; the number of REAL_HPAGE_SIZE pages should be used to size the huge</span>
<span class="quote">&gt; page TSB.  A new compile time constant REAL_HPAGE_PER_HPAGE is used</span>
<span class="quote">&gt; to multiply hugetlb_pte_count before sizing the TSB.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes from V1</span>
<span class="quote">&gt; - Fixed build issue if hugetlb or THP not configured</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>

Applied.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/sparc/include/asm/page_64.h b/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">index 8c2a8c9..c1263fc 100644</span>
<span class="p_header">--- a/arch/sparc/include/asm/page_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/page_64.h</span>
<span class="p_chunk">@@ -25,6 +25,7 @@</span> <span class="p_context"></span>
 #define HPAGE_MASK		(~(HPAGE_SIZE - 1UL))
 #define HUGETLB_PAGE_ORDER	(HPAGE_SHIFT - PAGE_SHIFT)
 #define HAVE_ARCH_HUGETLB_UNMAPPED_AREA
<span class="p_add">+#define REAL_HPAGE_PER_HPAGE	(_AC(1,UL) &lt;&lt; (HPAGE_SHIFT - REAL_HPAGE_SHIFT))</span>
 #endif
 
 #ifndef __ASSEMBLY__
<span class="p_header">diff --git a/arch/sparc/mm/fault_64.c b/arch/sparc/mm/fault_64.c</span>
<span class="p_header">index e16fdd2..3f291d8 100644</span>
<span class="p_header">--- a/arch/sparc/mm/fault_64.c</span>
<span class="p_header">+++ b/arch/sparc/mm/fault_64.c</span>
<span class="p_chunk">@@ -484,6 +484,7 @@</span> <span class="p_context"> good_area:</span>
 		tsb_grow(mm, MM_TSB_BASE, mm_rss);
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
 	mm_rss = mm-&gt;context.hugetlb_pte_count + mm-&gt;context.thp_pte_count;
<span class="p_add">+	mm_rss *= REAL_HPAGE_PER_HPAGE;</span>
 	if (unlikely(mm_rss &gt;
 		     mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb_rss_limit)) {
 		if (mm-&gt;context.tsb_block[MM_TSB_HUGE].tsb)
<span class="p_header">diff --git a/arch/sparc/mm/tlb.c b/arch/sparc/mm/tlb.c</span>
<span class="p_header">index 3659d37..c56a195 100644</span>
<span class="p_header">--- a/arch/sparc/mm/tlb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tlb.c</span>
<span class="p_chunk">@@ -174,10 +174,25 @@</span> <span class="p_context"> void set_pmd_at(struct mm_struct *mm, unsigned long addr,</span>
 		return;
 
 	if ((pmd_val(pmd) ^ pmd_val(orig)) &amp; _PAGE_PMD_HUGE) {
<span class="p_del">-		if (pmd_val(pmd) &amp; _PAGE_PMD_HUGE)</span>
<span class="p_del">-			mm-&gt;context.thp_pte_count++;</span>
<span class="p_del">-		else</span>
<span class="p_del">-			mm-&gt;context.thp_pte_count--;</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Note that this routine only sets pmds for THP pages.</span>
<span class="p_add">+		 * Hugetlb pages are handled elsewhere.  We need to check</span>
<span class="p_add">+		 * for huge zero page.  Huge zero pages are like hugetlb</span>
<span class="p_add">+		 * pages in that there is no RSS, but there is the need</span>
<span class="p_add">+		 * for TSB entries.  So, huge zero page counts go into</span>
<span class="p_add">+		 * hugetlb_pte_count.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (pmd_val(pmd) &amp; _PAGE_PMD_HUGE) {</span>
<span class="p_add">+			if (is_huge_zero_page(pmd_page(pmd)))</span>
<span class="p_add">+				mm-&gt;context.hugetlb_pte_count++;</span>
<span class="p_add">+			else</span>
<span class="p_add">+				mm-&gt;context.thp_pte_count++;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			if (is_huge_zero_page(pmd_page(orig)))</span>
<span class="p_add">+				mm-&gt;context.hugetlb_pte_count--;</span>
<span class="p_add">+			else</span>
<span class="p_add">+				mm-&gt;context.thp_pte_count--;</span>
<span class="p_add">+		}</span>
 
 		/* Do not try to allocate the TSB hash table if we
 		 * don&#39;t have one already.  We have various locks held
<span class="p_chunk">@@ -204,6 +219,9 @@</span> <span class="p_context"> void set_pmd_at(struct mm_struct *mm, unsigned long addr,</span>
 	}
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * This routine is only called when splitting a THP</span>
<span class="p_add">+ */</span>
 void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
 		     pmd_t *pmdp)
 {
<span class="p_chunk">@@ -213,6 +231,15 @@</span> <span class="p_context"> void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,</span>
 
 	set_pmd_at(vma-&gt;vm_mm, address, pmdp, entry);
 	flush_tlb_range(vma, address, address + HPAGE_PMD_SIZE);
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * set_pmd_at() will not be called in a way to decrement</span>
<span class="p_add">+	 * thp_pte_count when splitting a THP, so do it now.</span>
<span class="p_add">+	 * Sanity check pmd before doing the actual decrement.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if ((pmd_val(entry) &amp; _PAGE_PMD_HUGE) &amp;&amp;</span>
<span class="p_add">+	    !is_huge_zero_page(pmd_page(entry)))</span>
<span class="p_add">+		(vma-&gt;vm_mm)-&gt;context.thp_pte_count--;</span>
 }
 
 void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
<span class="p_header">diff --git a/arch/sparc/mm/tsb.c b/arch/sparc/mm/tsb.c</span>
<span class="p_header">index 6725ed4..f2b7711 100644</span>
<span class="p_header">--- a/arch/sparc/mm/tsb.c</span>
<span class="p_header">+++ b/arch/sparc/mm/tsb.c</span>
<span class="p_chunk">@@ -469,8 +469,10 @@</span> <span class="p_context"> retry_tsb_alloc:</span>
 
 int init_new_context(struct task_struct *tsk, struct mm_struct *mm)
 {
<span class="p_add">+	unsigned long mm_rss = get_mm_rss(mm);</span>
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	unsigned long total_huge_pte_count;</span>
<span class="p_add">+	unsigned long saved_hugetlb_pte_count;</span>
<span class="p_add">+	unsigned long saved_thp_pte_count;</span>
 #endif
 	unsigned int i;
 
<span class="p_chunk">@@ -483,10 +485,12 @@</span> <span class="p_context"> int init_new_context(struct task_struct *tsk, struct mm_struct *mm)</span>
 	 * will re-increment the counters as the parent PTEs are
 	 * copied into the child address space.
 	 */
<span class="p_del">-	total_huge_pte_count = mm-&gt;context.hugetlb_pte_count +</span>
<span class="p_del">-			 mm-&gt;context.thp_pte_count;</span>
<span class="p_add">+	saved_hugetlb_pte_count = mm-&gt;context.hugetlb_pte_count;</span>
<span class="p_add">+	saved_thp_pte_count = mm-&gt;context.thp_pte_count;</span>
 	mm-&gt;context.hugetlb_pte_count = 0;
 	mm-&gt;context.thp_pte_count = 0;
<span class="p_add">+</span>
<span class="p_add">+	mm_rss -= saved_thp_pte_count * (HPAGE_SIZE / PAGE_SIZE);</span>
 #endif
 
 	/* copy_mm() copies over the parent&#39;s mm_struct before calling
<span class="p_chunk">@@ -499,11 +503,13 @@</span> <span class="p_context"> int init_new_context(struct task_struct *tsk, struct mm_struct *mm)</span>
 	/* If this is fork, inherit the parent&#39;s TSB size.  We would
 	 * grow it to that size on the first page fault anyways.
 	 */
<span class="p_del">-	tsb_grow(mm, MM_TSB_BASE, get_mm_rss(mm));</span>
<span class="p_add">+	tsb_grow(mm, MM_TSB_BASE, mm_rss);</span>
 
 #if defined(CONFIG_HUGETLB_PAGE) || defined(CONFIG_TRANSPARENT_HUGEPAGE)
<span class="p_del">-	if (unlikely(total_huge_pte_count))</span>
<span class="p_del">-		tsb_grow(mm, MM_TSB_HUGE, total_huge_pte_count);</span>
<span class="p_add">+	if (unlikely(saved_hugetlb_pte_count + saved_thp_pte_count))</span>
<span class="p_add">+		tsb_grow(mm, MM_TSB_HUGE,</span>
<span class="p_add">+			 (saved_hugetlb_pte_count + saved_thp_pte_count) *</span>
<span class="p_add">+			 REAL_HPAGE_PER_HPAGE);</span>
 #endif
 
 	if (unlikely(!mm-&gt;context.tsb_block[MM_TSB_BASE].tsb))

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



