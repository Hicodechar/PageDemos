
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,31/33] netfilter: nf_conntrack: don&#39;t release a conntrack with non-zero refcnt - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,31/33] netfilter: nf_conntrack: don&#39;t release a conntrack with non-zero refcnt</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 15, 2015, 2:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;a7775d15b11a277f8af0dc4df69ae420b266e3dd.1442326825.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7185751/mbox/"
   >mbox</a>
|
   <a href="/patch/7185751/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7185751/">/patch/7185751/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id B0FC1BEEC1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Sep 2015 14:24:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 7C506205CA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Sep 2015 14:24:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 28E9020690
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 15 Sep 2015 14:24:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753413AbbIOOYd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 15 Sep 2015 10:24:33 -0400
Received: from mx2.suse.de ([195.135.220.15]:60485 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751766AbbIOOW4 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 15 Sep 2015 10:22:56 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 8E09DACEF;
	Tue, 15 Sep 2015 14:22:54 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org, Pablo Neira Ayuso &lt;pablo@netfilter.org&gt;,
	Eric Dumazet &lt;edumazet@google.com&gt;, Andrew Vagin &lt;avagin@parallels.com&gt;,
	Florian Westphal &lt;fw@strlen.de&gt;, Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 31/33] netfilter: nf_conntrack: don&#39;t release a
	conntrack with non-zero refcnt
Date: Tue, 15 Sep 2015 16:22:26 +0200
Message-Id: &lt;a7775d15b11a277f8af0dc4df69ae420b266e3dd.1442326825.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.5.2
In-Reply-To: &lt;350624fa32cb152bfec51f236b0b62b8d480a05a.1442326825.git.jslaby@suse.cz&gt;
References: &lt;350624fa32cb152bfec51f236b0b62b8d480a05a.1442326825.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1442326825.git.jslaby@suse.cz&gt;
References: &lt;cover.1442326825.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Sept. 15, 2015, 2:22 p.m.</div>
<pre class="content">
<span class="from">From: Pablo Neira Ayuso &lt;pablo@netfilter.org&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

[ Upstream commit e53376bef2cd97d3e3f61fdc677fb8da7d03d0da ]

With this patch, the conntrack refcount is initially set to zero and
it is bumped once it is added to any of the list, so we fulfill
Eric&#39;s golden rule which is that all released objects always have a
refcount that equals zero.

Andrey Vagin reports that nf_conntrack_free can&#39;t be called for a
conntrack with non-zero ref-counter, because it can race with
nf_conntrack_find_get().

A conntrack slab is created with SLAB_DESTROY_BY_RCU. Non-zero
ref-counter says that this conntrack is used. So when we release
a conntrack with non-zero counter, we break this assumption.

CPU1                                    CPU2
____nf_conntrack_find()
                                        nf_ct_put()
                                         destroy_conntrack()
                                        ...
                                        init_conntrack
                                         __nf_conntrack_alloc (set use = 1)
atomic_inc_not_zero(&amp;ct-&gt;use) (use = 2)
                                         if (!l4proto-&gt;new(ct, skb, dataoff, timeouts))
                                          nf_conntrack_free(ct); (use = 2 !!!)
                                        ...
                                        __nf_conntrack_alloc (set use = 1)
 if (!nf_ct_key_equal(h, tuple, zone))
  nf_ct_put(ct); (use = 0)
   destroy_conntrack()
                                        /* continue to work with CT */

After applying the path &quot;[PATCH] netfilter: nf_conntrack: fix RCU
race in nf_conntrack_find_get&quot; another bug was triggered in
destroy_conntrack():

&lt;4&gt;[67096.759334] ------------[ cut here ]------------
&lt;2&gt;[67096.759353] kernel BUG at net/netfilter/nf_conntrack_core.c:211!
...
&lt;4&gt;[67096.759837] Pid: 498649, comm: atdd veid: 666 Tainted: G         C ---------------    2.6.32-042stab084.18 #1 042stab084_18 /DQ45CB
&lt;4&gt;[67096.759932] RIP: 0010:[&lt;ffffffffa03d99ac&gt;]  [&lt;ffffffffa03d99ac&gt;] destroy_conntrack+0x15c/0x190 [nf_conntrack]
&lt;4&gt;[67096.760255] Call Trace:
&lt;4&gt;[67096.760255]  [&lt;ffffffff814844a7&gt;] nf_conntrack_destroy+0x17/0x30
&lt;4&gt;[67096.760255]  [&lt;ffffffffa03d9bb5&gt;] nf_conntrack_find_get+0x85/0x130 [nf_conntrack]
&lt;4&gt;[67096.760255]  [&lt;ffffffffa03d9fb2&gt;] nf_conntrack_in+0x352/0xb60 [nf_conntrack]
&lt;4&gt;[67096.760255]  [&lt;ffffffffa048c771&gt;] ipv4_conntrack_local+0x51/0x60 [nf_conntrack_ipv4]
&lt;4&gt;[67096.760255]  [&lt;ffffffff81484419&gt;] nf_iterate+0x69/0xb0
&lt;4&gt;[67096.760255]  [&lt;ffffffff814b5b00&gt;] ? dst_output+0x0/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff814845d4&gt;] nf_hook_slow+0x74/0x110
&lt;4&gt;[67096.760255]  [&lt;ffffffff814b5b00&gt;] ? dst_output+0x0/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff814b66d5&gt;] raw_sendmsg+0x775/0x910
&lt;4&gt;[67096.760255]  [&lt;ffffffff8104c5a8&gt;] ? flush_tlb_others_ipi+0x128/0x130
&lt;4&gt;[67096.760255]  [&lt;ffffffff8100bc4e&gt;] ? apic_timer_interrupt+0xe/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff8100bc4e&gt;] ? apic_timer_interrupt+0xe/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff814c136a&gt;] inet_sendmsg+0x4a/0xb0
&lt;4&gt;[67096.760255]  [&lt;ffffffff81444e93&gt;] ? sock_sendmsg+0x13/0x140
&lt;4&gt;[67096.760255]  [&lt;ffffffff81444f97&gt;] sock_sendmsg+0x117/0x140
&lt;4&gt;[67096.760255]  [&lt;ffffffff8102e299&gt;] ? native_smp_send_reschedule+0x49/0x60
&lt;4&gt;[67096.760255]  [&lt;ffffffff81519beb&gt;] ? _spin_unlock_bh+0x1b/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff8109d930&gt;] ? autoremove_wake_function+0x0/0x40
&lt;4&gt;[67096.760255]  [&lt;ffffffff814960f0&gt;] ? do_ip_setsockopt+0x90/0xd80
&lt;4&gt;[67096.760255]  [&lt;ffffffff8100bc4e&gt;] ? apic_timer_interrupt+0xe/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff8100bc4e&gt;] ? apic_timer_interrupt+0xe/0x20
&lt;4&gt;[67096.760255]  [&lt;ffffffff814457c9&gt;] sys_sendto+0x139/0x190
&lt;4&gt;[67096.760255]  [&lt;ffffffff810efa77&gt;] ? audit_syscall_entry+0x1d7/0x200
&lt;4&gt;[67096.760255]  [&lt;ffffffff810ef7c5&gt;] ? __audit_syscall_exit+0x265/0x290
&lt;4&gt;[67096.760255]  [&lt;ffffffff81474daf&gt;] compat_sys_socketcall+0x13f/0x210
&lt;4&gt;[67096.760255]  [&lt;ffffffff8104dea3&gt;] ia32_sysret+0x0/0x5

I have reused the original title for the RFC patch that Andrey posted and
most of the original patch description.

Cc: Eric Dumazet &lt;edumazet@google.com&gt;
Cc: Andrew Vagin &lt;avagin@parallels.com&gt;
Cc: Florian Westphal &lt;fw@strlen.de&gt;
Reported-by: Andrew Vagin &lt;avagin@parallels.com&gt;
Signed-off-by: Pablo Neira Ayuso &lt;pablo@netfilter.org&gt;
Reviewed-by: Eric Dumazet &lt;edumazet@google.com&gt;
Acked-by: Andrew Vagin &lt;avagin@parallels.com&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 include/net/netfilter/nf_conntrack.h |  2 ++
 net/netfilter/nf_conntrack_core.c    | 34 +++++++++++++++++++++++++++++-----
 net/netfilter/nf_synproxy_core.c     |  5 ++---
 net/netfilter/xt_CT.c                |  7 +------
 4 files changed, 34 insertions(+), 14 deletions(-)

<span class="p_header">diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h</span>
<span class="p_header">index 0c1288a50e8b..a68a061882f4 100644</span>
<span class="p_header">--- a/include/net/netfilter/nf_conntrack.h</span>
<span class="p_header">+++ b/include/net/netfilter/nf_conntrack.h</span>
<span class="p_chunk">@@ -293,6 +293,8 @@</span> <span class="p_context"> extern unsigned int nf_conntrack_max;</span>
 extern unsigned int nf_conntrack_hash_rnd;
 void init_nf_conntrack_hash_rnd(void);
 
<span class="p_add">+void nf_conntrack_tmpl_insert(struct net *net, struct nf_conn *tmpl);</span>
<span class="p_add">+</span>
 #define NF_CT_STAT_INC(net, count)	  __this_cpu_inc((net)-&gt;ct.stat-&gt;count)
 #define NF_CT_STAT_INC_ATOMIC(net, count) this_cpu_inc((net)-&gt;ct.stat-&gt;count)
 
<span class="p_header">diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c</span>
<span class="p_header">index da541b78b88e..cf9bfc5ddb34 100644</span>
<span class="p_header">--- a/net/netfilter/nf_conntrack_core.c</span>
<span class="p_header">+++ b/net/netfilter/nf_conntrack_core.c</span>
<span class="p_chunk">@@ -463,7 +463,9 @@</span> <span class="p_context"> nf_conntrack_hash_check_insert(struct nf_conn *ct)</span>
 			goto out;
 
 	add_timer(&amp;ct-&gt;timeout);
<span class="p_del">-	nf_conntrack_get(&amp;ct-&gt;ct_general);</span>
<span class="p_add">+	smp_wmb();</span>
<span class="p_add">+	/* The caller holds a reference to this object */</span>
<span class="p_add">+	atomic_set(&amp;ct-&gt;ct_general.use, 2);</span>
 	__nf_conntrack_hash_insert(ct, hash, repl_hash);
 	NF_CT_STAT_INC(net, insert);
 	spin_unlock_bh(&amp;nf_conntrack_lock);
<span class="p_chunk">@@ -477,6 +479,21 @@</span> <span class="p_context"> out:</span>
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_hash_check_insert);
 
<span class="p_add">+/* deletion from this larval template list happens via nf_ct_put() */</span>
<span class="p_add">+void nf_conntrack_tmpl_insert(struct net *net, struct nf_conn *tmpl)</span>
<span class="p_add">+{</span>
<span class="p_add">+	__set_bit(IPS_TEMPLATE_BIT, &amp;tmpl-&gt;status);</span>
<span class="p_add">+	__set_bit(IPS_CONFIRMED_BIT, &amp;tmpl-&gt;status);</span>
<span class="p_add">+	nf_conntrack_get(&amp;tmpl-&gt;ct_general);</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_bh(&amp;nf_conntrack_lock);</span>
<span class="p_add">+	/* Overload tuple linked list to put us in template list. */</span>
<span class="p_add">+	hlist_nulls_add_head_rcu(&amp;tmpl-&gt;tuplehash[IP_CT_DIR_ORIGINAL].hnnode,</span>
<span class="p_add">+				 &amp;net-&gt;ct.tmpl);</span>
<span class="p_add">+	spin_unlock_bh(&amp;nf_conntrack_lock);</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(nf_conntrack_tmpl_insert);</span>
<span class="p_add">+</span>
 /* Confirm a connection given skb; places it in hash table */
 int
 __nf_conntrack_confirm(struct sk_buff *skb)
<span class="p_chunk">@@ -748,11 +765,10 @@</span> <span class="p_context"> __nf_conntrack_alloc(struct net *net, u16 zone,</span>
 		nf_ct_zone-&gt;id = zone;
 	}
 #endif
<span class="p_del">-	/*</span>
<span class="p_del">-	 * changes to lookup keys must be done before setting refcnt to 1</span>
<span class="p_add">+	/* Because we use RCU lookups, we set ct_general.use to zero before</span>
<span class="p_add">+	 * this is inserted in any list.</span>
 	 */
<span class="p_del">-	smp_wmb();</span>
<span class="p_del">-	atomic_set(&amp;ct-&gt;ct_general.use, 1);</span>
<span class="p_add">+	atomic_set(&amp;ct-&gt;ct_general.use, 0);</span>
 	return ct;
 
 #ifdef CONFIG_NF_CONNTRACK_ZONES
<span class="p_chunk">@@ -776,6 +792,11 @@</span> <span class="p_context"> void nf_conntrack_free(struct nf_conn *ct)</span>
 {
 	struct net *net = nf_ct_net(ct);
 
<span class="p_add">+	/* A freed object has refcnt == 0, that&#39;s</span>
<span class="p_add">+	 * the golden rule for SLAB_DESTROY_BY_RCU</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	NF_CT_ASSERT(atomic_read(&amp;ct-&gt;ct_general.use) == 0);</span>
<span class="p_add">+</span>
 	nf_ct_ext_destroy(ct);
 	atomic_dec(&amp;net-&gt;ct.count);
 	nf_ct_ext_free(ct);
<span class="p_chunk">@@ -870,6 +891,9 @@</span> <span class="p_context"> init_conntrack(struct net *net, struct nf_conn *tmpl,</span>
 		NF_CT_STAT_INC(net, new);
 	}
 
<span class="p_add">+	/* Now it is inserted into the unconfirmed list, bump refcount */</span>
<span class="p_add">+	nf_conntrack_get(&amp;ct-&gt;ct_general);</span>
<span class="p_add">+</span>
 	/* Overload tuple linked list to put us in unconfirmed list. */
 	hlist_nulls_add_head_rcu(&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].hnnode,
 		       &amp;net-&gt;ct.unconfirmed);
<span class="p_header">diff --git a/net/netfilter/nf_synproxy_core.c b/net/netfilter/nf_synproxy_core.c</span>
<span class="p_header">index cdf4567ba9b3..bf6e9a144dac 100644</span>
<span class="p_header">--- a/net/netfilter/nf_synproxy_core.c</span>
<span class="p_header">+++ b/net/netfilter/nf_synproxy_core.c</span>
<span class="p_chunk">@@ -362,9 +362,8 @@</span> <span class="p_context"> static int __net_init synproxy_net_init(struct net *net)</span>
 		goto err2;
 	if (!nfct_synproxy_ext_add(ct))
 		goto err2;
<span class="p_del">-	__set_bit(IPS_TEMPLATE_BIT, &amp;ct-&gt;status);</span>
<span class="p_del">-	__set_bit(IPS_CONFIRMED_BIT, &amp;ct-&gt;status);</span>
 
<span class="p_add">+	nf_conntrack_tmpl_insert(net, ct);</span>
 	snet-&gt;tmpl = ct;
 
 	snet-&gt;stats = alloc_percpu(struct synproxy_stats);
<span class="p_chunk">@@ -389,7 +388,7 @@</span> <span class="p_context"> static void __net_exit synproxy_net_exit(struct net *net)</span>
 {
 	struct synproxy_net *snet = synproxy_pernet(net);
 
<span class="p_del">-	nf_conntrack_free(snet-&gt;tmpl);</span>
<span class="p_add">+	nf_ct_put(snet-&gt;tmpl);</span>
 	synproxy_proc_exit(net);
 	free_percpu(snet-&gt;stats);
 }
<span class="p_header">diff --git a/net/netfilter/xt_CT.c b/net/netfilter/xt_CT.c</span>
<span class="p_header">index da35ac06a975..889960193544 100644</span>
<span class="p_header">--- a/net/netfilter/xt_CT.c</span>
<span class="p_header">+++ b/net/netfilter/xt_CT.c</span>
<span class="p_chunk">@@ -226,12 +226,7 @@</span> <span class="p_context"> static int xt_ct_tg_check(const struct xt_tgchk_param *par,</span>
 			goto err3;
 	}
 
<span class="p_del">-	__set_bit(IPS_TEMPLATE_BIT, &amp;ct-&gt;status);</span>
<span class="p_del">-	__set_bit(IPS_CONFIRMED_BIT, &amp;ct-&gt;status);</span>
<span class="p_del">-</span>
<span class="p_del">-	/* Overload tuple linked list to put us in template list. */</span>
<span class="p_del">-	hlist_nulls_add_head_rcu(&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].hnnode,</span>
<span class="p_del">-				 &amp;par-&gt;net-&gt;ct.tmpl);</span>
<span class="p_add">+	nf_conntrack_tmpl_insert(par-&gt;net, ct);</span>
 out:
 	info-&gt;ct = ct;
 	return 0;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



