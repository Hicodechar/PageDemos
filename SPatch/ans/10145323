
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[5/7] x86: Use IBRS for firmware update path - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [5/7] x86: Use IBRS for firmware update path</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7886">tim</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 4, 2018, 5:56 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;8d3710432534b27d224283557c4629cd1aa5b0ea.1515086770.git.tim.c.chen@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10145323/mbox/"
   >mbox</a>
|
   <a href="/patch/10145323/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10145323/">/patch/10145323/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6B5146034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Jan 2018 18:18:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 63A482882C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Jan 2018 18:18:15 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 588832882F; Thu,  4 Jan 2018 18:18:15 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8A82D2882C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  4 Jan 2018 18:18:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752737AbeADSSL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 4 Jan 2018 13:18:11 -0500
Received: from mga06.intel.com ([134.134.136.31]:8415 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752637AbeADSSH (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 4 Jan 2018 13:18:07 -0500
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	04 Jan 2018 10:18:06 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.46,315,1511856000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;21446989&quot;
Received: from skl-02.jf.intel.com ([10.54.74.43])
	by orsmga001.jf.intel.com with ESMTP; 04 Jan 2018 10:18:06 -0800
From: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;, Andy Lutomirski &lt;luto@kernel.org&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;
Cc: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;, Andi Kleen &lt;ak@linux.intel.com&gt;,
	Arjan Van De Ven &lt;arjan.van.de.ven@intel.com&gt;,
	linux-kernel@vger.kernel.org, David Woodhouse &lt;dwmw@amazon.co.uk&gt;
Subject: [PATCH 5/7] x86: Use IBRS for firmware update path
Date: Thu,  4 Jan 2018 09:56:46 -0800
Message-Id: &lt;8d3710432534b27d224283557c4629cd1aa5b0ea.1515086770.git.tim.c.chen@linux.intel.com&gt;
X-Mailer: git-send-email 2.9.4
In-Reply-To: &lt;cover.1515086770.git.tim.c.chen@linux.intel.com&gt;
References: &lt;cover.1515086770.git.tim.c.chen@linux.intel.com&gt;
In-Reply-To: &lt;cover.1515086770.git.tim.c.chen@linux.intel.com&gt;
References: &lt;cover.1515086770.git.tim.c.chen@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 4, 2018, 5:56 p.m.</div>
<pre class="content">
<span class="from">From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>

We are impervious to the indirect branch prediction attack with retpoline
but firmware won&#39;t be, so we still need to set IBRS to protect
firmware code execution when calling into firmware at runtime.
<span class="signed-off-by">
Signed-off-by: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="signed-off-by">Signed-off-by: Tim Chen &lt;tim.c.chen@linux.intel.com&gt;</span>
---
 arch/x86/include/asm/apm.h       |  6 ++++++
 arch/x86/include/asm/efi.h       | 16 ++++++++++++++--
 arch/x86/include/asm/spec_ctrl.h | 37 +++++++++++++++++++++++++++++++++++++
 3 files changed, 57 insertions(+), 2 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=80821">One Thousand Gnomes</a> - Jan. 4, 2018, 6:48 p.m.</div>
<pre class="content">
On Thu,  4 Jan 2018 09:56:46 -0800
Tim Chen &lt;tim.c.chen@linux.intel.com&gt; wrote:
<span class="quote">
&gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We are impervious to the indirect branch prediction attack with retpoline</span>
<span class="quote">&gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; firmware code execution when calling into firmware at runtime.</span>

If you are going to care about APM then you also need to care about
BIOS32 interfaces (arch/x86/pc/pcibios.c) and PNPBIOS
(drivers/pnp/pnpbios/bioscalls.c)

Alan
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 4, 2018, 8:05 p.m.</div>
<pre class="content">
On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:
<span class="quote">&gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We are impervious to the indirect branch prediction attack with retpoline</span>
<span class="quote">&gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; firmware code execution when calling into firmware at runtime.</span>

Wait, what?

Maybe it&#39;s just the wine from dinner talking, but if the firmware has
issues, we have bigger things to worry about here, right?  It already
handed over the &quot;chain of trust&quot; to us, so we have already implicitly
trusted that the firmware was correct here.  So why do we need to do
anything about firmware calls in this manner?

Or am I totally missing something else here?

thanks,

greg k-h
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=178213">Woodhouse, David</a> - Jan. 4, 2018, 8:08 p.m.</div>
<pre class="content">
On Thu, 2018-01-04 at 21:05 +0100, Greg KH wrote:
<span class="quote">&gt; On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We are impervious to the indirect branch prediction attack with</span>
<span class="quote">&gt; &gt; retpoline</span>
<span class="quote">&gt; &gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; &gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; Wait, what?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe it&#39;s just the wine from dinner talking, but if the firmware has</span>
<span class="quote">&gt; issues, we have bigger things to worry about here, right?  It already</span>
<span class="quote">&gt; handed over the &quot;chain of trust&quot; to us, so we have already implicitly</span>
<span class="quote">&gt; trusted that the firmware was correct here.  So why do we need to do</span>
<span class="quote">&gt; anything about firmware calls in this manner?</span>

In the ideal world, firmware exists to boot the kernel and then it gets
out of the way, never to be thought of again.

In the Intel world, firmware idiocy permeates everything and we
sometimes end up making calls to it at runtime.

If an attacker can poison the BTB for an indirect branch in EFI
firmware, then reliably do something which calls EFI runtime calls,
that might lead to an exploit. So if we&#39;re using retpoline for the
kernel, then we should be setting IBRS before any firmware calls.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=53881">Andrew Cooper</a> - Jan. 4, 2018, 8:21 p.m.</div>
<pre class="content">
On 04/01/18 20:05, Greg KH wrote:
<span class="quote">&gt; On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:</span>
<span class="quote">&gt;&gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; We are impervious to the indirect branch prediction attack with retpoline</span>
<span class="quote">&gt;&gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt;&gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; Wait, what?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Maybe it&#39;s just the wine from dinner talking, but if the firmware has</span>
<span class="quote">&gt; issues, we have bigger things to worry about here, right?  It already</span>
<span class="quote">&gt; handed over the &quot;chain of trust&quot; to us, so we have already implicitly</span>
<span class="quote">&gt; trusted that the firmware was correct here.  So why do we need to do</span>
<span class="quote">&gt; anything about firmware calls in this manner?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Or am I totally missing something else here?</span>

The firmware doesn&#39;t have to be malicious to cause problems for the OS.

There is still an open question of what happens in the RSB-to-SMM case,
where the SMM handler empties the RSB just before supervisor code
executes a ret instruction.  Hardware (other than the Skylake+ case
which uses a BTB prediction) speculates to the stale top-of-RSB entry,
for want of anything better to do.  (AMD have confirmed this, Intel
haven&#39;t replied to my query yet.)

Therefore, a crafty piece of userspace can stick a speculative leaky
gadget at a linear address which aliases the SMM code, and wait for an
SMI to hit.

To mitigate, a kernel has to hope that the SMM handler doesn&#39;t run in a
non-identity mappings, and either rely on SMEP being active, or disallow
userspace mmap()&#39;s covering the SMM region.

True, exploiting this is probably on the upper end of the difficulty
scale here, but I&#39;m willing to be its not the only unexpected
interaction going.

~Andrew
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=965">Andrea Arcangeli</a> - Jan. 4, 2018, 8:48 p.m.</div>
<pre class="content">
On Thu, Jan 04, 2018 at 09:05:15PM +0100, Greg Kroah-Hartman wrote:
<span class="quote">&gt; On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:</span>
<span class="quote">&gt; &gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We are impervious to the indirect branch prediction attack with retpoline</span>
<span class="quote">&gt; &gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; &gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Wait, what?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe it&#39;s just the wine from dinner talking, but if the firmware has</span>
<span class="quote">&gt; issues, we have bigger things to worry about here, right?  It already</span>
<span class="quote">&gt; handed over the &quot;chain of trust&quot; to us, so we have already implicitly</span>
<span class="quote">&gt; trusted that the firmware was correct here.  So why do we need to do</span>
<span class="quote">&gt; anything about firmware calls in this manner?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Or am I totally missing something else here?</span>

Reptoline-only case there. BIOS isn&#39;t built with reptoline. Kernel is
trusted too but it can be tricked unless built with reptoline.

If reptoline wasn&#39;t used IBRS would already be set and no issue would
materialize in the BIOS.

This is just a fallout of the reptoline being used, which requires to
close holes here and there by using IBRS where reptoline alone can&#39;t
reach.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=3114">Yves-Alexis Perez</a> - Jan. 4, 2018, 8:51 p.m.</div>
<pre class="content">
On Thu, 2018-01-04 at 09:56 -0800, Tim Chen wrote:
<span class="quote">&gt; @@ -44,6 +47,7 @@ static inline void apm_bios_call_asm(u32 func, u32 ebx_in,</span>
<span class="quote">&gt; u32 ecx_in,</span>
<span class="quote">&gt;                   &quot;=S&quot; (*esi)</span>
<span class="quote">&gt;                 : &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)</span>
<span class="quote">&gt;                 : &quot;memory&quot;, &quot;cc&quot;);</span>
<span class="quote">&gt; +       unprotected_formware_end();</span>

Just an obvious typo (form/firm) but I thought I&#39;d report it.
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
<span class="quote">&gt; @@ -52,6 +56,7 @@ static inline bool apm_bios_call_simple_asm(u32 func, u32</span>
<span class="quote">&gt; ebx_in,</span>
<span class="quote">&gt;         int     cx, dx, si;</span>
<span class="quote">&gt;         bool    error;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +       unprotected_firmware_begin();</span>
<span class="quote">&gt;         /*</span>
<span class="quote">&gt;          * N.B. We do NOT need a cld after the BIOS call</span>
<span class="quote">&gt;          * because we always save and restore the flags.</span>
<span class="quote">&gt; @@ -68,6 +73,7 @@ static inline bool apm_bios_call_simple_asm(u32 func, u32</span>
<span class="quote">&gt; ebx_in,</span>
<span class="quote">&gt;                   &quot;=S&quot; (si)</span>
<span class="quote">&gt;                 : &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)</span>
<span class="quote">&gt;                 : &quot;memory&quot;, &quot;cc&quot;);</span>
<span class="quote">&gt; +       unprotected_formware_end();</span>
<span class="quote">&gt;         return error;</span>
<span class="quote">&gt;  }</span>

Same here.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7886">tim</a> - Jan. 4, 2018, 9:13 p.m.</div>
<pre class="content">
On 01/04/2018 12:51 PM, Yves-Alexis Perez wrote:
<span class="quote">&gt; On Thu, 2018-01-04 at 09:56 -0800, Tim Chen wrote:</span>
<span class="quote">&gt;&gt; @@ -44,6 +47,7 @@ static inline void apm_bios_call_asm(u32 func, u32 ebx_in,</span>
<span class="quote">&gt;&gt; u32 ecx_in,</span>
<span class="quote">&gt;&gt;                   &quot;=S&quot; (*esi)</span>
<span class="quote">&gt;&gt;                 : &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)</span>
<span class="quote">&gt;&gt;                 : &quot;memory&quot;, &quot;cc&quot;);</span>
<span class="quote">&gt;&gt; +       unprotected_formware_end();</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Just an obvious typo (form/firm) but I thought I&#39;d report it.</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
<span class="quote">&gt;&gt; @@ -52,6 +56,7 @@ static inline bool apm_bios_call_simple_asm(u32 func, u32</span>
<span class="quote">&gt;&gt; ebx_in,</span>
<span class="quote">&gt;&gt;         int     cx, dx, si;</span>
<span class="quote">&gt;&gt;         bool    error;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +       unprotected_firmware_begin();</span>
<span class="quote">&gt;&gt;         /*</span>
<span class="quote">&gt;&gt;          * N.B. We do NOT need a cld after the BIOS call</span>
<span class="quote">&gt;&gt;          * because we always save and restore the flags.</span>
<span class="quote">&gt;&gt; @@ -68,6 +73,7 @@ static inline bool apm_bios_call_simple_asm(u32 func, u32</span>
<span class="quote">&gt;&gt; ebx_in,</span>
<span class="quote">&gt;&gt;                   &quot;=S&quot; (si)</span>
<span class="quote">&gt;&gt;                 : &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)</span>
<span class="quote">&gt;&gt;                 : &quot;memory&quot;, &quot;cc&quot;);</span>
<span class="quote">&gt;&gt; +       unprotected_formware_end();</span>
<span class="quote">&gt;&gt;         return error;</span>
<span class="quote">&gt;&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Same here.</span>
<span class="quote">&gt; </span>

Thanks.  Noted.

Tim
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137">Peter Zijlstra</a> - Jan. 4, 2018, 10:51 p.m.</div>
<pre class="content">
On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:
<span class="quote">&gt; diff --git a/arch/x86/include/asm/spec_ctrl.h b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="quote">&gt; index 28b0314..23b2804 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/spec_ctrl.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="quote">&gt; @@ -113,5 +113,42 @@ static inline void unprotected_speculation_end(void)</span>
<span class="quote">&gt;  		rmb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#if defined(RETPOLINE)</span>
<span class="quote">&gt; +/*</span>
<span class="quote">&gt; + * RETPOLINE does not protect against indirect speculation</span>
<span class="quote">&gt; + * in firmware code.  Enable IBRS to protect firmware execution.</span>
<span class="quote">&gt; + */</span>
<span class="quote">&gt; +static inline void unprotected_firmware_begin(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (boot_cpu_has(X86_FEATURE_SPEC_CTRL))</span>
<span class="quote">&gt; +                __disable_indirect_speculation();</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * If we intended to disable indirect speculation</span>
<span class="quote">&gt; +		 * but come here due to mis-speculation, we need</span>
<span class="quote">&gt; +		 * to stop the mis-speculation with rmb.</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		rmb();</span>
<span class="quote">&gt; +}</span>

Looks like an exact replica of unprotected_speculation_end() we&#39;re going
for max linecount or something?
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +static inline void unprotected_firmware_end(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	if (boot_cpu_has(X86_FEATURE_SPEC_CTRL))</span>
<span class="quote">&gt; +                __enable_indirect_speculation();</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#else</span>
<span class="quote">&gt; +static inline void unprotected_firmware_begin(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void unprotected_firmware_end(void)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return;</span>
<span class="quote">&gt; +}</span>

Those return&#39;s are superfluous.
<span class="quote">
&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  #endif /* __ASSEMBLY__ */</span>
<span class="quote">&gt;  #endif /* _ASM_X86_SPEC_CTRL_H */</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.9.4</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Jan. 5, 2018, 1:40 p.m.</div>
<pre class="content">
On Thu, 4 Jan 2018, Tim Chen wrote:
<span class="quote">&gt;  #ifdef APM_ZERO_SEGS</span>
<span class="quote">&gt;  #	define APM_DO_ZERO_SEGS \</span>
<span class="quote">&gt;  		&quot;pushl %%ds\n\t&quot; \</span>
<span class="quote">&gt; @@ -28,6 +30,7 @@ static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
<span class="quote">&gt;  					u32 *eax, u32 *ebx, u32 *ecx,</span>
<span class="quote">&gt;  					u32 *edx, u32 *esi)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	unprotected_firmware_begin();</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * N.B. We do NOT need a cld after the BIOS call</span>
<span class="quote">&gt;  	 * because we always save and restore the flags.</span>
<span class="quote">&gt; @@ -44,6 +47,7 @@ static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
<span class="quote">&gt;  		  &quot;=S&quot; (*esi)</span>
<span class="quote">&gt;  		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)</span>
<span class="quote">&gt;  		: &quot;memory&quot;, &quot;cc&quot;);</span>
<span class="quote">&gt; +	unprotected_formware_end();</span>

This doesn&#39;t even compile unless the new compiler speculates that into
unprotected_firmware_end().

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - Jan. 5, 2018, 4:08 p.m.</div>
<pre class="content">
On Thu, Jan 04, 2018 at 08:08:55PM +0000, Woodhouse, David wrote:
<span class="quote">&gt; On Thu, 2018-01-04 at 21:05 +0100, Greg KH wrote:</span>
<span class="quote">&gt; &gt; On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; We are impervious to the indirect branch prediction attack with</span>
<span class="quote">&gt; &gt; &gt; retpoline</span>
<span class="quote">&gt; &gt; &gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; &gt; &gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; &gt; Wait, what?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Maybe it&#39;s just the wine from dinner talking, but if the firmware has</span>
<span class="quote">&gt; &gt; issues, we have bigger things to worry about here, right?  It already</span>
<span class="quote">&gt; &gt; handed over the &quot;chain of trust&quot; to us, so we have already implicitly</span>
<span class="quote">&gt; &gt; trusted that the firmware was correct here.  So why do we need to do</span>
<span class="quote">&gt; &gt; anything about firmware calls in this manner?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In the ideal world, firmware exists to boot the kernel and then it gets</span>
<span class="quote">&gt; out of the way, never to be thought of again.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In the Intel world, firmware idiocy permeates everything and we</span>
<span class="quote">&gt; sometimes end up making calls to it at runtime.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If an attacker can poison the BTB for an indirect branch in EFI</span>
<span class="quote">&gt; firmware, then reliably do something which calls EFI runtime calls,</span>
<span class="quote">&gt; that might lead to an exploit. So if we&#39;re using retpoline for the</span>
<span class="quote">&gt; kernel, then we should be setting IBRS before any firmware calls.</span>

Ugh, ok, seems a bit far-fetched to me, but I will not object anymore.

Except that the patch doesn&#39;t actually build, which means no one has
actually tested it at all :(

greg k-h
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=965">Andrea Arcangeli</a> - Jan. 5, 2018, 4:37 p.m.</div>
<pre class="content">
On Fri, Jan 05, 2018 at 05:08:48PM +0100, Greg Kroah-Hartman wrote:
<span class="quote">&gt; On Thu, Jan 04, 2018 at 08:08:55PM +0000, Woodhouse, David wrote:</span>
<span class="quote">&gt; &gt; On Thu, 2018-01-04 at 21:05 +0100, Greg KH wrote:</span>
<span class="quote">&gt; &gt; &gt; On Thu, Jan 04, 2018 at 09:56:46AM -0800, Tim Chen wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; From: David Woodhouse &lt;dwmw@amazon.co.uk&gt;</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; We are impervious to the indirect branch prediction attack with</span>
<span class="quote">&gt; &gt; &gt; &gt; retpoline</span>
<span class="quote">&gt; &gt; &gt; &gt; but firmware won&#39;t be, so we still need to set IBRS to protect</span>
<span class="quote">&gt; &gt; &gt; &gt; firmware code execution when calling into firmware at runtime.</span>
<span class="quote">&gt; &gt; &gt; Wait, what?</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Maybe it&#39;s just the wine from dinner talking, but if the firmware has</span>
<span class="quote">&gt; &gt; &gt; issues, we have bigger things to worry about here, right?  It already</span>
<span class="quote">&gt; &gt; &gt; handed over the &quot;chain of trust&quot; to us, so we have already implicitly</span>
<span class="quote">&gt; &gt; &gt; trusted that the firmware was correct here.  So why do we need to do</span>
<span class="quote">&gt; &gt; &gt; anything about firmware calls in this manner?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; In the ideal world, firmware exists to boot the kernel and then it gets</span>
<span class="quote">&gt; &gt; out of the way, never to be thought of again.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; In the Intel world, firmware idiocy permeates everything and we</span>
<span class="quote">&gt; &gt; sometimes end up making calls to it at runtime.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If an attacker can poison the BTB for an indirect branch in EFI</span>
<span class="quote">&gt; &gt; firmware, then reliably do something which calls EFI runtime calls,</span>
<span class="quote">&gt; &gt; that might lead to an exploit. So if we&#39;re using retpoline for the</span>
<span class="quote">&gt; &gt; kernel, then we should be setting IBRS before any firmware calls.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Ugh, ok, seems a bit far-fetched to me, but I will not object anymore.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Except that the patch doesn&#39;t actually build, which means no one has</span>
<span class="quote">&gt; actually tested it at all :(</span>

One more wish, I personally would prefer the whole:

+#if defined(RETPOLINE)                                                                                               

to be dropped too and if this could be respinned without any REPTOLINE
knowledge at all. It can&#39;t be activated anyway so it should go in a
different patchset that can actually activate it if something but
that&#39;s much lower prio.

It was great info to know reptoline still needs IBRS anyway though.

Thanks,
Andrea
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/apm.h b/arch/x86/include/asm/apm.h</span>
<span class="p_header">index 4d4015d..1ca4f7b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/apm.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/apm.h</span>
<span class="p_chunk">@@ -7,6 +7,8 @@</span> <span class="p_context"></span>
 #ifndef _ASM_X86_MACH_DEFAULT_APM_H
 #define _ASM_X86_MACH_DEFAULT_APM_H
 
<span class="p_add">+#include &lt;asm/spec_ctrl.h&gt;</span>
<span class="p_add">+</span>
 #ifdef APM_ZERO_SEGS
 #	define APM_DO_ZERO_SEGS \
 		&quot;pushl %%ds\n\t&quot; \
<span class="p_chunk">@@ -28,6 +30,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 					u32 *eax, u32 *ebx, u32 *ecx,
 					u32 *edx, u32 *esi)
 {
<span class="p_add">+	unprotected_firmware_begin();</span>
 	/*
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
<span class="p_chunk">@@ -44,6 +47,7 @@</span> <span class="p_context"> static inline void apm_bios_call_asm(u32 func, u32 ebx_in, u32 ecx_in,</span>
 		  &quot;=S&quot; (*esi)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	unprotected_formware_end();</span>
 }
 
 static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,
<span class="p_chunk">@@ -52,6 +56,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 	int	cx, dx, si;
 	bool	error;
 
<span class="p_add">+	unprotected_firmware_begin();</span>
 	/*
 	 * N.B. We do NOT need a cld after the BIOS call
 	 * because we always save and restore the flags.
<span class="p_chunk">@@ -68,6 +73,7 @@</span> <span class="p_context"> static inline bool apm_bios_call_simple_asm(u32 func, u32 ebx_in,</span>
 		  &quot;=S&quot; (si)
 		: &quot;a&quot; (func), &quot;b&quot; (ebx_in), &quot;c&quot; (ecx_in)
 		: &quot;memory&quot;, &quot;cc&quot;);
<span class="p_add">+	unprotected_formware_end();</span>
 	return error;
 }
 
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 85f6ccb..25bd506 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;asm/pgtable.h&gt;
 #include &lt;asm/processor-flags.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_add">+#include &lt;asm/spec_ctrl.h&gt;</span>
 
 /*
  * We map the EFI regions needed for runtime services non-contiguously,
<span class="p_chunk">@@ -36,8 +37,17 @@</span> <span class="p_context"></span>
 
 extern asmlinkage unsigned long efi_call_phys(void *, ...);
 
<span class="p_del">-#define arch_efi_call_virt_setup()	kernel_fpu_begin()</span>
<span class="p_del">-#define arch_efi_call_virt_teardown()	kernel_fpu_end()</span>
<span class="p_add">+#define arch_efi_call_virt_setup()					\</span>
<span class="p_add">+{(									\</span>
<span class="p_add">+	kernel_fpu_begin();						\</span>
<span class="p_add">+	unprotected_firmware_begin();					\</span>
<span class="p_add">+)}</span>
<span class="p_add">+</span>
<span class="p_add">+#define arch_efi_call_virt_teardown()					\</span>
<span class="p_add">+{(									\</span>
<span class="p_add">+	unprotected_firmware_end();					\</span>
<span class="p_add">+	kernel_fpu_end();						\</span>
<span class="p_add">+)}</span>
 
 /*
  * Wrap all the virtual calls in a way that forces the parameters on the stack.
<span class="p_chunk">@@ -73,6 +83,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	efi_sync_low_kernel_mappings();					\
 	preempt_disable();						\
 	__kernel_fpu_begin();						\
<span class="p_add">+	unprotected_firmware_begin();					\</span>
 									\
 	if (efi_scratch.use_pgd) {					\
 		efi_scratch.prev_cr3 = __read_cr3();			\
<span class="p_chunk">@@ -91,6 +102,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 		__flush_tlb_all();					\
 	}								\
 									\
<span class="p_add">+	unprotected_firmware_end();					\</span>
 	__kernel_fpu_end();						\
 	preempt_enable();						\
 })
<span class="p_header">diff --git a/arch/x86/include/asm/spec_ctrl.h b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_header">index 28b0314..23b2804 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/spec_ctrl.h</span>
<span class="p_chunk">@@ -113,5 +113,42 @@</span> <span class="p_context"> static inline void unprotected_speculation_end(void)</span>
 		rmb();
 }
 
<span class="p_add">+</span>
<span class="p_add">+#if defined(RETPOLINE)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * RETPOLINE does not protect against indirect speculation</span>
<span class="p_add">+ * in firmware code.  Enable IBRS to protect firmware execution.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline void unprotected_firmware_begin(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (boot_cpu_has(X86_FEATURE_SPEC_CTRL))</span>
<span class="p_add">+                __disable_indirect_speculation();</span>
<span class="p_add">+	else</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If we intended to disable indirect speculation</span>
<span class="p_add">+		 * but come here due to mis-speculation, we need</span>
<span class="p_add">+		 * to stop the mis-speculation with rmb.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		rmb();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void unprotected_firmware_end(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (boot_cpu_has(X86_FEATURE_SPEC_CTRL))</span>
<span class="p_add">+                __enable_indirect_speculation();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline void unprotected_firmware_begin(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void unprotected_firmware_end(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif /* __ASSEMBLY__ */
 #endif /* _ASM_X86_SPEC_CTRL_H */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



