
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3.12,72/72] x86/mm/hotplug: Modify PGD entry when removing memory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3.12,72/72] x86/mm/hotplug: Modify PGD entry when removing memory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2015, 1:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;5f2f951264d00b7abbba4ce95ead10d5ff25c0da.1448283890.git.jslaby@suse.cz&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7681341/mbox/"
   >mbox</a>
|
   <a href="/patch/7681341/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7681341/">/patch/7681341/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id D71C7BF90C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 13:13:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id CD63720704
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 13:13:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B40E1205DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 23 Nov 2015 13:13:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754758AbbKWNMw (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 23 Nov 2015 08:12:52 -0500
Received: from mx2.suse.de ([195.135.220.15]:59861 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754737AbbKWNMt (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 23 Nov 2015 08:12:49 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
X-Amavis-Alert: BAD HEADER SECTION, Duplicate header field: &quot;References&quot;
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id C5A81AD0D;
	Mon, 23 Nov 2015 13:11:41 +0000 (UTC)
From: Jiri Slaby &lt;jslaby@suse.cz&gt;
To: stable@vger.kernel.org
Cc: linux-kernel@vger.kernel.org,
	Yasuaki Ishimatsu &lt;isimatu.yasuaki@jp.fujitsu.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Tang Chen &lt;tangchen@cn.fujitsu.com&gt;, Gu Zheng &lt;guz.fnst@cn.fujitsu.com&gt;,
	Zhang Yanfei &lt;zhangyanfei@cn.fujitsu.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;,
	Vlastimil Babka &lt;vbabka@suse.com&gt;, Jiri Slaby &lt;jslaby@suse.cz&gt;
Subject: [PATCH 3.12 72/72] x86/mm/hotplug: Modify PGD entry when removing
	memory
Date: Mon, 23 Nov 2015 14:12:33 +0100
Message-Id: &lt;5f2f951264d00b7abbba4ce95ead10d5ff25c0da.1448283890.git.jslaby@suse.cz&gt;
X-Mailer: git-send-email 2.6.3
In-Reply-To: &lt;09f041d02b9d5407d544d6fd5a9026072c44956f.1448283890.git.jslaby@suse.cz&gt;
References: &lt;09f041d02b9d5407d544d6fd5a9026072c44956f.1448283890.git.jslaby@suse.cz&gt;
In-Reply-To: &lt;cover.1448283890.git.jslaby@suse.cz&gt;
References: &lt;cover.1448283890.git.jslaby@suse.cz&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.5 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=887">Jiri Slaby</a> - Nov. 23, 2015, 1:12 p.m.</div>
<pre class="content">
<span class="from">From: Yasuaki Ishimatsu &lt;isimatu.yasuaki@jp.fujitsu.com&gt;</span>

3.12-stable review patch.  If anyone has any objections, please let me know.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
===============

commit 9661d5bcd058fe15b4138a00d96bd36516134543 upstream.

When hot-adding/removing memory, sync_global_pgds() is called
for synchronizing PGD to PGD entries of all processes MM.  But
when hot-removing memory, sync_global_pgds() does not work
correctly.

At first, sync_global_pgds() checks whether target PGD is none
or not.  And if PGD is none, the PGD is skipped.  But when
hot-removing memory, PGD may be none since PGD may be cleared by
free_pud_table().  So when sync_global_pgds() is called after
hot-removing memory, sync_global_pgds() should not skip PGD even
if the PGD is none.  And sync_global_pgds() must clear PGD
entries of all processes MM.

Currently sync_global_pgds() does not clear PGD entries of all
processes MM when hot-removing memory.  So when hot adding
memory which is same memory range as removed memory after
hot-removing memory, following call traces are shown:

 kernel BUG at arch/x86/mm/init_64.c:206!
 ...
 [&lt;ffffffff815e0c80&gt;] kernel_physical_mapping_init+0x1b2/0x1d2
 [&lt;ffffffff815ced94&gt;] init_memory_mapping+0x1d4/0x380
 [&lt;ffffffff8104aebd&gt;] arch_add_memory+0x3d/0xd0
 [&lt;ffffffff815d03d9&gt;] add_memory+0xb9/0x1b0
 [&lt;ffffffff81352415&gt;] acpi_memory_device_add+0x1af/0x28e
 [&lt;ffffffff81325dc4&gt;] acpi_bus_device_attach+0x8c/0xf0
 [&lt;ffffffff813413b9&gt;] acpi_ns_walk_namespace+0xc8/0x17f
 [&lt;ffffffff81325d38&gt;] ? acpi_bus_type_and_status+0xb7/0xb7
 [&lt;ffffffff81325d38&gt;] ? acpi_bus_type_and_status+0xb7/0xb7
 [&lt;ffffffff813418ed&gt;] acpi_walk_namespace+0x95/0xc5
 [&lt;ffffffff81326b4c&gt;] acpi_bus_scan+0x9a/0xc2
 [&lt;ffffffff81326bff&gt;] acpi_scan_bus_device_check+0x8b/0x12e
 [&lt;ffffffff81326cb5&gt;] acpi_scan_device_check+0x13/0x15
 [&lt;ffffffff81320122&gt;] acpi_os_execute_deferred+0x25/0x32
 [&lt;ffffffff8107e02b&gt;] process_one_work+0x17b/0x460
 [&lt;ffffffff8107edfb&gt;] worker_thread+0x11b/0x400
 [&lt;ffffffff8107ece0&gt;] ? rescuer_thread+0x400/0x400
 [&lt;ffffffff81085aef&gt;] kthread+0xcf/0xe0
 [&lt;ffffffff81085a20&gt;] ? kthread_create_on_node+0x140/0x140
 [&lt;ffffffff815fc76c&gt;] ret_from_fork+0x7c/0xb0
 [&lt;ffffffff81085a20&gt;] ? kthread_create_on_node+0x140/0x140

This patch clears PGD entries of all processes MM when
sync_global_pgds() is called after hot-removing memory

Signed-off-by: Yasuaki Ishimatsu &lt;isimatu.yasuaki@jp.fujitsu.com&gt;
Acked-by: Toshi Kani &lt;toshi.kani@hp.com&gt;
Signed-off-by: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Tang Chen &lt;tangchen@cn.fujitsu.com&gt;
Cc: Gu Zheng &lt;guz.fnst@cn.fujitsu.com&gt;
Cc: Zhang Yanfei &lt;zhangyanfei@cn.fujitsu.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;
Cc: Vlastimil Babka &lt;vbabka@suse.com&gt;
Signed-off-by: Jiri Slaby &lt;jslaby@suse.cz&gt;
<span class="p_del">---</span>
 arch/x86/include/asm/pgtable_64.h |  3 ++-
 arch/x86/mm/fault.c               |  2 +-
 arch/x86/mm/init_64.c             | 27 +++++++++++++++++++--------
 3 files changed, 22 insertions(+), 10 deletions(-)

<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index e22c1dbf7feb..60ac4a1a7761 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -115,7 +115,8 @@</span> <span class="p_context"> static inline void native_pgd_clear(pgd_t *pgd)</span>
 	native_set_pgd(pgd, native_make_pgd(0));
 }
 
<span class="p_del">-extern void sync_global_pgds(unsigned long start, unsigned long end);</span>
<span class="p_add">+extern void sync_global_pgds(unsigned long start, unsigned long end,</span>
<span class="p_add">+			     int removed);</span>
 
 /*
  * Conversion functions: convert a page and protection to a page entry,
<span class="p_header">diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c</span>
<span class="p_header">index 814a25d88738..43df028362f9 100644</span>
<span class="p_header">--- a/arch/x86/mm/fault.c</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c</span>
<span class="p_chunk">@@ -345,7 +345,7 @@</span> <span class="p_context"> out:</span>
 
 void vmalloc_sync_all(void)
 {
<span class="p_del">-	sync_global_pgds(VMALLOC_START &amp; PGDIR_MASK, VMALLOC_END);</span>
<span class="p_add">+	sync_global_pgds(VMALLOC_START &amp; PGDIR_MASK, VMALLOC_END, 0);</span>
 }
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c</span>
<span class="p_header">index 427b536a5fd6..d7735ceca5ac 100644</span>
<span class="p_header">--- a/arch/x86/mm/init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/init_64.c</span>
<span class="p_chunk">@@ -178,7 +178,7 @@</span> <span class="p_context"> __setup(&quot;noexec32=&quot;, nonx32_setup);</span>
  * When memory was added/removed make sure all the processes MM have
  * suitable PGD entries in the local PGD level page.
  */
<span class="p_del">-void sync_global_pgds(unsigned long start, unsigned long end)</span>
<span class="p_add">+void sync_global_pgds(unsigned long start, unsigned long end, int removed)</span>
 {
 	unsigned long address;
 
<span class="p_chunk">@@ -186,7 +186,12 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end)</span>
 		const pgd_t *pgd_ref = pgd_offset_k(address);
 		struct page *page;
 
<span class="p_del">-		if (pgd_none(*pgd_ref))</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * When it is called after memory hot remove, pgd_none()</span>
<span class="p_add">+		 * returns true. In this case (removed == 1), we must clear</span>
<span class="p_add">+		 * the PGD entries in the local PGD level page.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (pgd_none(*pgd_ref) &amp;&amp; !removed)</span>
 			continue;
 
 		spin_lock(&amp;pgd_lock);
<span class="p_chunk">@@ -199,12 +204,18 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end)</span>
 			pgt_lock = &amp;pgd_page_get_mm(page)-&gt;page_table_lock;
 			spin_lock(pgt_lock);
 
<span class="p_del">-			if (pgd_none(*pgd))</span>
<span class="p_del">-				set_pgd(pgd, *pgd_ref);</span>
<span class="p_del">-			else</span>
<span class="p_add">+			if (!pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
 				BUG_ON(pgd_page_vaddr(*pgd)
 				       != pgd_page_vaddr(*pgd_ref));
 
<span class="p_add">+			if (removed) {</span>
<span class="p_add">+				if (pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
<span class="p_add">+					pgd_clear(pgd);</span>
<span class="p_add">+			} else {</span>
<span class="p_add">+				if (pgd_none(*pgd))</span>
<span class="p_add">+					set_pgd(pgd, *pgd_ref);</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
 			spin_unlock(pgt_lock);
 		}
 		spin_unlock(&amp;pgd_lock);
<span class="p_chunk">@@ -633,7 +644,7 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long start,</span>
 	}
 
 	if (pgd_changed)
<span class="p_del">-		sync_global_pgds(addr, end - 1);</span>
<span class="p_add">+		sync_global_pgds(addr, end - 1, 0);</span>
 
 	__flush_tlb_all();
 
<span class="p_chunk">@@ -994,7 +1005,7 @@</span> <span class="p_context"> remove_pagetable(unsigned long start, unsigned long end, bool direct)</span>
 	}
 
 	if (pgd_changed)
<span class="p_del">-		sync_global_pgds(start, end - 1);</span>
<span class="p_add">+		sync_global_pgds(start, end - 1, 1);</span>
 
 	flush_tlb_all();
 }
<span class="p_chunk">@@ -1325,7 +1336,7 @@</span> <span class="p_context"> int __meminit vmemmap_populate(unsigned long start, unsigned long end, int node)</span>
 	else
 		err = vmemmap_populate_basepages(start, end, node);
 	if (!err)
<span class="p_del">-		sync_global_pgds(start, end - 1);</span>
<span class="p_add">+		sync_global_pgds(start, end - 1, 0);</span>
 	return err;
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



