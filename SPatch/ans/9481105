
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,07/11] powerpc/kvm: Allow KVM_PPC_ALLOCATE_HTAB ioctl() to change HPT size - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,07/11] powerpc/kvm: Allow KVM_PPC_ALLOCATE_HTAB ioctl() to change HPT size</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1741">David Gibson</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 20, 2016, 5:49 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161220054907.9204-8-david@gibson.dropbear.id.au&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9481105/mbox/"
   >mbox</a>
|
   <a href="/patch/9481105/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9481105/">/patch/9481105/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E6A0660820 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 05:50:20 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D79DD2844B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 05:50:20 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id CC6A42849D; Tue, 20 Dec 2016 05:50:20 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id AF38D28470
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Dec 2016 05:50:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757143AbcLTFtX (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Dec 2016 00:49:23 -0500
Received: from ozlabs.org ([103.22.144.67]:57255 &quot;EHLO ozlabs.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753128AbcLTFtQ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Dec 2016 00:49:16 -0500
Received: by ozlabs.org (Postfix, from userid 1007)
	id 3tjRgC3ybgz9t1d; Tue, 20 Dec 2016 16:49:11 +1100 (AEDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
	d=gibson.dropbear.id.au; s=201602; t=1482212951;
	bh=JmvWIjYQZp5BhOX7k6GQ6UnD4tzS46xqdxfAFBOj6PU=;
	h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
	b=HGJvC1kcjQhdh3+YB8xWB4HDozjSPIrMyMTZ+gqfUxkBo6s+ymDphydXZlvxeJrcY
	fewrWy6GRQ83rcIsKMUN00h7VKQlHHX/wLCu9VO1jQybaR8lsemwKIX4EdxzNDA5Gp
	r2PgCEN0gRYbCUq1ukcrYGLnqUc9G/8u36fP03qo=
From: David Gibson &lt;david@gibson.dropbear.id.au&gt;
To: paulus@samba.org, sjitindarsingh@gmail.com
Cc: benh@kernel.crashing.org, thuth@redhat.com, lvivier@redhat.com,
	linuxppc-dev@lists.ozlabs.org, kvm@vger.kernel.org,
	linux-kernel@vger.kernel.org, David Gibson &lt;david@gibson.dropbear.id.au&gt;
Subject: [PATCHv2 07/11] powerpc/kvm: Allow KVM_PPC_ALLOCATE_HTAB ioctl() to
	change HPT size
Date: Tue, 20 Dec 2016 16:49:03 +1100
Message-Id: &lt;20161220054907.9204-8-david@gibson.dropbear.id.au&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20161220054907.9204-1-david@gibson.dropbear.id.au&gt;
References: &lt;20161220054907.9204-1-david@gibson.dropbear.id.au&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1741">David Gibson</a> - Dec. 20, 2016, 5:49 a.m.</div>
<pre class="content">
The KVM_PPC_ALLOCATE_HTAB ioctl() is used to set the size of hashed page
table (HPT) that userspace expects a guest VM to have, and is also used to
clear that HPT when necessary (e.g. guest reboot).

At present, once the ioctl() is called for the first time, the HPT size can
never be changed thereafter - it will be cleared but always sized as from
the first call.

With upcoming HPT resize implementation, we&#39;re going to need to allow
userspace to resize the HPT at reset (to change it back to the default size
if the guest changed it).

So, we need to allow this ioctl() to change the HPT size.

This patch also updates Documentation/virtual/kvm/api.txt to reflect
the new behaviour.  In fact the documentation was already slightly
incorrect since 572abd5 &quot;KVM: PPC: Book3S HV: Don&#39;t fall back to
smaller HPT size in allocation ioctl&quot;
<span class="signed-off-by">
Signed-off-by: David Gibson &lt;david@gibson.dropbear.id.au&gt;</span>
---
 Documentation/virtual/kvm/api.txt   | 14 ++++++++------
 arch/powerpc/include/asm/kvm_ppc.h  |  2 +-
 arch/powerpc/kvm/book3s_64_mmu_hv.c | 29 ++++++++++++++++-------------
 arch/powerpc/kvm/book3s_hv.c        |  5 +----
 4 files changed, 26 insertions(+), 24 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/Documentation/virtual/kvm/api.txt b/Documentation/virtual/kvm/api.txt</span>
<span class="p_header">index f452c72..c12da23 100644</span>
<span class="p_header">--- a/Documentation/virtual/kvm/api.txt</span>
<span class="p_header">+++ b/Documentation/virtual/kvm/api.txt</span>
<span class="p_chunk">@@ -2443,18 +2443,20 @@</span> <span class="p_context"> are, it will do nothing and return an EBUSY error.</span>
 The parameter is a pointer to a 32-bit unsigned integer variable
 containing the order (log base 2) of the desired size of the hash
 table, which must be between 18 and 46.  On successful return from the
<span class="p_del">-ioctl, it will have been updated with the order of the hash table that</span>
<span class="p_del">-was allocated.</span>
<span class="p_add">+ioctl, the value will not be changed by the kernel.</span>
 
 If no hash table has been allocated when any vcpu is asked to run
 (with the KVM_RUN ioctl), the host kernel will allocate a
 default-sized hash table (16 MB).
 
 If this ioctl is called when a hash table has already been allocated,
<span class="p_del">-the kernel will clear out the existing hash table (zero all HPTEs) and</span>
<span class="p_del">-return the hash table order in the parameter.  (If the guest is using</span>
<span class="p_del">-the virtualized real-mode area (VRMA) facility, the kernel will</span>
<span class="p_del">-re-create the VMRA HPTEs on the next KVM_RUN of any vcpu.)</span>
<span class="p_add">+with a different order from the existing hash table, the existing hash</span>
<span class="p_add">+table will be freed and a new one allocated.  If this is ioctl is</span>
<span class="p_add">+called when a hash table has already been allocated of the same order</span>
<span class="p_add">+as specified, the kernel will clear out the existing hash table (zero</span>
<span class="p_add">+all HPTEs).  In either case, if the guest is using the virtualized</span>
<span class="p_add">+real-mode area (VRMA) facility, the kernel will re-create the VMRA</span>
<span class="p_add">+HPTEs on the next KVM_RUN of any vcpu.</span>
 
 4.77 KVM_S390_INTERRUPT
 
<span class="p_header">diff --git a/arch/powerpc/include/asm/kvm_ppc.h b/arch/powerpc/include/asm/kvm_ppc.h</span>
<span class="p_header">index 41575b8..3b837bc 100644</span>
<span class="p_header">--- a/arch/powerpc/include/asm/kvm_ppc.h</span>
<span class="p_header">+++ b/arch/powerpc/include/asm/kvm_ppc.h</span>
<span class="p_chunk">@@ -157,7 +157,7 @@</span> <span class="p_context"> extern void kvmppc_map_magic(struct kvm_vcpu *vcpu);</span>
 
 extern int kvmppc_allocate_hpt(struct kvm_hpt_info *info, u32 order);
 extern void kvmppc_set_hpt(struct kvm *kvm, struct kvm_hpt_info *info);
<span class="p_del">-extern long kvmppc_alloc_reset_hpt(struct kvm *kvm, u32 *htab_orderp);</span>
<span class="p_add">+extern long kvmppc_alloc_reset_hpt(struct kvm *kvm, int order);</span>
 extern void kvmppc_free_hpt(struct kvm_hpt_info *info);
 extern long kvmppc_prepare_vrma(struct kvm *kvm,
 				struct kvm_userspace_memory_region *mem);
<span class="p_header">diff --git a/arch/powerpc/kvm/book3s_64_mmu_hv.c b/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_header">index 4683d87..2765d04 100644</span>
<span class="p_header">--- a/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_header">+++ b/arch/powerpc/kvm/book3s_64_mmu_hv.c</span>
<span class="p_chunk">@@ -102,10 +102,10 @@</span> <span class="p_context"> void kvmppc_set_hpt(struct kvm *kvm, struct kvm_hpt_info *info)</span>
 		info-&gt;virt, (long)info-&gt;order, kvm-&gt;arch.lpid);
 }
 
<span class="p_del">-long kvmppc_alloc_reset_hpt(struct kvm *kvm, u32 *htab_orderp)</span>
<span class="p_add">+long kvmppc_alloc_reset_hpt(struct kvm *kvm, int order)</span>
 {
 	long err = -EBUSY;
<span class="p_del">-	long order;</span>
<span class="p_add">+	struct kvm_hpt_info info;</span>
 
 	mutex_lock(&amp;kvm-&gt;lock);
 	if (kvm-&gt;arch.hpte_setup_done) {
<span class="p_chunk">@@ -117,8 +117,9 @@</span> <span class="p_context"> long kvmppc_alloc_reset_hpt(struct kvm *kvm, u32 *htab_orderp)</span>
 			goto out;
 		}
 	}
<span class="p_del">-	if (kvm-&gt;arch.hpt.virt) {</span>
<span class="p_del">-		order = kvm-&gt;arch.hpt.order;</span>
<span class="p_add">+	if (kvm-&gt;arch.hpt.order == order) {</span>
<span class="p_add">+		/* We already have a suitable HPT */</span>
<span class="p_add">+</span>
 		/* Set the entire HPT to 0, i.e. invalid HPTEs */
 		memset((void *)kvm-&gt;arch.hpt.virt, 0, 1ul &lt;&lt; order);
 		/*
<span class="p_chunk">@@ -127,17 +128,19 @@</span> <span class="p_context"> long kvmppc_alloc_reset_hpt(struct kvm *kvm, u32 *htab_orderp)</span>
 		kvmppc_rmap_reset(kvm);
 		/* Ensure that each vcpu will flush its TLB on next entry. */
 		cpumask_setall(&amp;kvm-&gt;arch.need_tlb_flush);
<span class="p_del">-		*htab_orderp = order;</span>
 		err = 0;
<span class="p_del">-	} else {</span>
<span class="p_del">-		struct kvm_hpt_info info;</span>
<span class="p_del">-</span>
<span class="p_del">-		err = kvmppc_allocate_hpt(&amp;info, *htab_orderp);</span>
<span class="p_del">-		if (err &lt; 0)</span>
<span class="p_del">-			goto out;</span>
<span class="p_del">-		kvmppc_set_hpt(kvm, &amp;info);</span>
<span class="p_add">+		goto out;</span>
 	}
<span class="p_del">- out:</span>
<span class="p_add">+</span>
<span class="p_add">+	if (kvm-&gt;arch.hpt.virt)</span>
<span class="p_add">+		kvmppc_free_hpt(&amp;kvm-&gt;arch.hpt);</span>
<span class="p_add">+</span>
<span class="p_add">+	err = kvmppc_allocate_hpt(&amp;info, order);</span>
<span class="p_add">+	if (err &lt; 0)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	kvmppc_set_hpt(kvm, &amp;info);</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
 	mutex_unlock(&amp;kvm-&gt;lock);
 	return err;
 }
<span class="p_header">diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c</span>
<span class="p_header">index 436508e..9ebb9e6 100644</span>
<span class="p_header">--- a/arch/powerpc/kvm/book3s_hv.c</span>
<span class="p_header">+++ b/arch/powerpc/kvm/book3s_hv.c</span>
<span class="p_chunk">@@ -3600,12 +3600,9 @@</span> <span class="p_context"> static long kvm_arch_vm_ioctl_hv(struct file *filp,</span>
 		r = -EFAULT;
 		if (get_user(htab_order, (u32 __user *)argp))
 			break;
<span class="p_del">-		r = kvmppc_alloc_reset_hpt(kvm, &amp;htab_order);</span>
<span class="p_add">+		r = kvmppc_alloc_reset_hpt(kvm, htab_order);</span>
 		if (r)
 			break;
<span class="p_del">-		r = -EFAULT;</span>
<span class="p_del">-		if (put_user(htab_order, (u32 __user *)argp))</span>
<span class="p_del">-			break;</span>
 		r = 0;
 		break;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



