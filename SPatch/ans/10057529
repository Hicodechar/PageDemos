
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm: show total hugetlb memory consumption in /proc/meminfo - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm: show total hugetlb memory consumption in /proc/meminfo</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=174271">Roman Gushchin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 14, 2017, 12:50 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171114125026.7055-1-guro@fb.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10057529/mbox/"
   >mbox</a>
|
   <a href="/patch/10057529/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10057529/">/patch/10057529/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	68AB160231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 12:52:04 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 7C0C02971B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 12:52:04 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7088629763; Tue, 14 Nov 2017 12:52:04 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9600C29760
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 12:52:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754937AbdKNMv6 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Nov 2017 07:51:58 -0500
Received: from mx0b-00082601.pphosted.com ([67.231.153.30]:56414 &quot;EHLO
	mx0b-00082601.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1753753AbdKNMvs (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Nov 2017 07:51:48 -0500
Received: from pps.filterd (m0109332.ppops.net [127.0.0.1])
	by mx0a-00082601.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id
	vAECnBqr017684; Tue, 14 Nov 2017 04:51:10 -0800
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.com;
	h=from : to : cc : subject
	: date : message-id : mime-version : content-type; s=facebook;
	bh=ApWEnxKocHr/bAzXaV6HPusYVgGWxT1H+qjNLIhLlpo=;
	b=NR77CzorQtWuUCjv8Y7f9UCJEsrhgpQw4yHsfT961qqHffm9ah8/MH9ao9a8u5r/NR1+
	OD5gRmNCiLWWsdb4FDYTIoJcCWL8RxlbToCVHJcQ9qRt4BSjHEbDhX7xVwGvvrns6oaU
	5GA20pIT9YUQIEbzrSQF5mREkZ1WkDMSy8s= 
Received: from maileast.thefacebook.com ([199.201.65.23])
	by mx0a-00082601.pphosted.com with ESMTP id 2e7u1xgwbk-1
	(version=TLSv1 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT);
	Tue, 14 Nov 2017 04:51:10 -0800
Received: from NAM01-BN3-obe.outbound.protection.outlook.com (192.168.183.28)
	by o365-in.thefacebook.com (192.168.177.29) with Microsoft SMTP
	Server (TLS) id 14.3.361.1; Tue, 14 Nov 2017 07:51:09 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=fb.onmicrosoft.com; 
	s=selector1-fb-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version; 
	bh=ApWEnxKocHr/bAzXaV6HPusYVgGWxT1H+qjNLIhLlpo=;
	b=kLbWOZZ5qh6Z49U8boNyynQ42/hlOYIW6ZA+C4Q8oPHAvaThL7W/mZdHifOYFIVIajtR+Us9Q5T8f1VXDNMH6q7x5KKJIyKiCf06xWJjZsV6hRMtx3OzoPOOsx4RHcW6IDJ9E7NDb9PWniDAz1wrCbrqrnVnM8rLup5EgTt2BQI=
Received: from castle.thefacebook.com (2620:10d:c092:200::1:c60) by
	SN2PR15MB1088.namprd15.prod.outlook.com (2603:10b6:804:22::10) with
	Microsoft SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id 15.20.218.12;
	Tue, 14 Nov 2017 12:50:45 +0000
From: Roman Gushchin &lt;guro@fb.com&gt;
To: &lt;linux-mm@kvack.org&gt;
CC: Roman Gushchin &lt;guro@fb.com&gt;, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, Johannes Weiner &lt;hannes@cmpxchg.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, &lt;kernel-team@fb.com&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;
Subject: [PATCH] mm: show total hugetlb memory consumption in /proc/meminfo
Date: Tue, 14 Nov 2017 12:50:26 +0000
Message-ID: &lt;20171114125026.7055-1-guro@fb.com&gt;
X-Mailer: git-send-email 2.13.6
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [2620:10d:c092:200::1:c60]
X-ClientProxiedBy: AM5PR0202CA0010.eurprd02.prod.outlook.com
	(2603:10a6:203:69::20) To SN2PR15MB1088.namprd15.prod.outlook.com
	(2603:10b6:804:22::10)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 84c23272-4b8b-4e2b-869d-08d52b5e5397
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(4534020)(4602075)(4627115)(201703031133081)(201702281549075)(2017052603199);
	SRVR:SN2PR15MB1088; 
X-Microsoft-Exchange-Diagnostics: 1; SN2PR15MB1088;
	3:4bDizcDRrLZS6Q+CAUn2/rhK1u576EtEve87COUCPjZOLYFVAmXw+8IhLu/TqCkBFfxBMuTOEXE6CklTra7cahinT3ZtccuwxoUc5HP03pSRGnsXh/geWeJ/8SOu1BD5BH871gBA9ZEOP2QwjyyJXiv48AIpGehEkedR1LEElAj7r/pbstAEDBOcC+9ysaT4Lb1t6I1c+fI81mSF4is0/KWyiLWCNP0lYF/vVwMzZZYxdSbsFh3TQal9A2qxcONP;
	25:euQmeHtFp1lUjGnC0lEswPIl4GGAV4YDtUW1a5wVbFL5QiuOYJm60jlX1QK8jfU6GjnHmj0M+hVCZvZXW9sCEkbTV5yjFHhxNc3V5cPOmwqHkDRxuyjftCYk7Agpspl8NalI9fRuyE3ItKlkkGLynxOyGsJLxr6f+4W6InTo5MS7is0rFwXg4qZSlbYjZyEJqQTox7YhTKABTeUVGI5D6GKD2VCQ09MDEe34/mjZpUM7AawX5Hk3U2J/zkArgjTXqhypoIJLRsJyPpps5y/quaYenN7Sk50/zXeBm8IlOhHyz/xxaYI2HwzkujSNWSzm1WgLE1w5XCxaB8G/wKsZCJrzozgDcBbel62d6vFZ3xE=;
	31:FWX3aIRDe3AmkE0d5BF0u2sYLRdW8UXyLABHoaQjbeOpwj6rWt6WhIFwZz0ZXC1nDTw6HJiKmNyi52TIlTs2mYnhrcicEeh/dtFoWrp+GI0UaQwZRmXWVznWxSfUgIowumQAcC+Gcnc2yxV5yHyzhKs5puc3M4u42eOHGL3j3G3Wzij4Mu+KDm7put78TbEvudeWBwjpI0Ndo6F/ci+Nx4ZNVdTXU5LuBXKcSKGTzRc=
X-MS-TrafficTypeDiagnostic: SN2PR15MB1088:
X-Microsoft-Exchange-Diagnostics: 1; SN2PR15MB1088;
	20:sNoJ1KTNLL/pAxTwtjtkuJDuuBd8D00Rsslj7Tl9X1SIuWKJLucmoew+H9eR8Cfi0bTks9erXG2OBb2SuSzldHxpC27fY/N8sBByB3+E9lR29NdEaDtc65XqTG0G+SARfshGbFS7wXN0ej0C61ZTNkEr6gW5yr3l3VfzbdhqNzxMQPs3TItj8yjn+E9haKcZYNr/MhzJ5O6zNCXlKGIAMPRVIhb64XOfxqXPwg0lG9okXsbxg9H4Qmzk85AhGhS0LbEFzsEPFo/DRb1lW+IRmCbvK3GkcbsYECbenUFIl8g9kUDJWunw0AcQdUTePc/2hH9UswRKZVbtYlZCcz5f+iKxOhkVqUdy18dS7TEe7WGnqA3STFhUOU6mxwHYlTpEA4y2vaSqElZNgrtdFa2N9nX4W/rurAxWnpMFwR6q4JH/yz+OPOmg4eCNwZnyTt5O3qJL+iTtdDGtZKchiGIcMgxWDj2I9fT5xIsGlWLsm8geNfX8vNSyCDLsqvC7dXia
X-Microsoft-Antispam-PRVS: &lt;SN2PR15MB10889B5182341778F6950110BE280@SN2PR15MB1088.namprd15.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(67672495146484)(104084551191319)(146099531331640)(228905959029699);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(11241501159)(6040450)(2401047)(5005006)(8121501046)(3002001)(93006095)(93001095)(3231022)(10201501046)(100000703101)(100105400095)(6041248)(20161123564025)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123562025)(20161123558100)(20161123555025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:SN2PR15MB1088; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:SN2PR15MB1088; 
X-Microsoft-Exchange-Diagnostics: 1; SN2PR15MB1088;
	4:z6AZSKC8L5jrwbRgZ7FmckHzy50PygifJc7xO1yA2VGfUp7zfbNfEVdPRVkmdcwqB2pHgVuhlyuTqwFgHOcJfv37r5+0RVKfKdbKMk9ICP37HOYCF4Al+6ev9u1mOW0SOpmOYcMx9r2KCOHuosWoLUzr2yJIZ92F2oE0O6TD7DKjBMwxuk94HlZ/TSEt7eN3Xfy80+PsOWzr7df6AAWK37YzW/Gr+i3xfycgFyAPnThuMUkHtjEqoFuHKG25Se9lkdmE+NdLD8HXCeXLCn/tKW1BeS3/r536Ci94pEwgJrX0EqNfBV+U6F7SanjSW9hLbVj6ZpjAsvCKgmg1GbXFKmxLKLBshLzcdgHlOATuspRCvXUoNm2pfCqhvX9T8VFynoTNmvj/kYCk0x1pdRCqhzev8+J2Cj0eZBqMKeCDyTIsxH3dw/LrcsNIIeefzB+C
X-Forefront-PRVS: 04916EA04C
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10019020)(6009001)(346002)(376002)(199003)(189002)(105586002)(189998001)(47776003)(106356001)(7736002)(53416004)(6506006)(50466002)(101416001)(50986999)(6486002)(5003940100001)(69596002)(478600001)(305945005)(4326008)(6916009)(6666003)(5660300001)(48376002)(25786009)(8936002)(33646002)(54906003)(81166006)(81156014)(2361001)(8676002)(2351001)(36756003)(97736004)(6512007)(53936002)(316002)(16586007)(68736007)(50226002)(86362001)(6116002)(2906002)(1076002)(42262002);
	DIR:OUT; SFP:1102; SCL:1; SRVR:SN2PR15MB1088;
	H:castle.thefacebook.com; FPR:; SPF:None; PTR:InfoNoRecords;
	A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: fb.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; SN2PR15MB1088;
	23:y1rc46ICsMpkpRWaS3241HAhAB5byG/VEaAkvdAhm?=
	=?us-ascii?Q?oP9muLhwW91tlpgDCQWJbKBdUq15Nved2bR3lgrDuIR+Bb6ZgaWElh2RF8op?=
	=?us-ascii?Q?iNi4UzGk/9AGb3blZUGTE/XcX46Ku1/h38ODh84CoiiQgf2BESG9lOlh9zBS?=
	=?us-ascii?Q?ggKEJrj3hHQpb1wHNMGxnorlvgH60eUWsd+SMZK9pYs7axDWb9ykXBoV89L4?=
	=?us-ascii?Q?lVAa+SRnfLUEdJrSA7X0yYps94TPmOPjUCb13fWP8j82qZWmUBN5fgkvEr25?=
	=?us-ascii?Q?IxWl3WBXKvKp+jE67q/hCgtkSiyOZopMsH1ryu58ZYG1XyGbh9Jgq01A4hXM?=
	=?us-ascii?Q?ReBUgRREGQdGYYG2Yh6/qDec6Dz8BKHfvt9qhbkH54e3MA6qhsH95nD3fU0H?=
	=?us-ascii?Q?q24QgyeAZU8mZOvYqdFf6c8STzisNoNfToCUls8UMJQ5SUJUhVFG6pDAxZcY?=
	=?us-ascii?Q?hEYlJq0DDnSz5ssj1hmwqVzDi6YYwYEtTZRUWDvir1wEw+uKoehxjtqcCkj/?=
	=?us-ascii?Q?hEBa0IGhrQ+oCwZUkEZt26cIdDZTOBWeJDS23INPSEK4DTa042LuK458GC/n?=
	=?us-ascii?Q?TL+N9ky4LNAAorjrTHDZmhSSn5ZXGt25jjyR6U31DYhvhNYfVK/0HdQ49j+T?=
	=?us-ascii?Q?VaDn7n6UJUIggZynBz8BLMOavN0UsHot7hg/29pPgFCiX65PEuLxgBxVLHNJ?=
	=?us-ascii?Q?FHbLb/SFndt2m9I864JNGtJhrbxQ6oxqhW+RxxwCht400AWR4+P97+MtymYH?=
	=?us-ascii?Q?XQ1GOmRjzaDxP9icyWlObh0wtcYUikE8GwWm9Cp81w5vIWqv0ld7mf2XuyNL?=
	=?us-ascii?Q?RPqRQC9esK5QAESUwsFjRQxCY1ixEeajwRMcSN1cjwUAd2zh+dFwkXjwFdSC?=
	=?us-ascii?Q?9HxrI6j99UeJl47wEw0uDarAjcvRnvZ/EHJ0y8rAA6Gvfm755puQqmkbdlk9?=
	=?us-ascii?Q?z2zEgGcn3e4cS+VnhsaQ7Q+qqaayBgfH+txxu3b6nQB7Pgu8uqUKF2png1Kd?=
	=?us-ascii?Q?63cQrCz/mw9kM3wL7Nm+0jygrKTz+n/sus+MoID2C6/0qH5kLu8cWGmsjt2k?=
	=?us-ascii?Q?Kg4l47Q9NtioCm9irlD/3O4b6odOGR8OBYCMz8SX7MwVuJ9KQ=3D=3D?=
X-Microsoft-Exchange-Diagnostics: 1; SN2PR15MB1088;
	6:CD4Clqau2cetdce98FyXaxMX0srceosoWh9Uc13t0xsbCJp4CYUpyTCySTOX/aRQD7ZVwCC/YqxQ7RAoE9s4qZFk9wJZodIJ3Y4OacKtBpNnwLVR787+3gAVVboWAEFHJtqXsg4Ap7GEvvvKiKB15yBR5xo+GWcihGpZ8Jo+JWKq0U9MhADAHK4Q6sNVGgCLmuns1c7XFVWKy0uL1NOg9S8ysqwuGrw3x3oO6lDN9IGF0HfKQ4enavU7iEQXWnwfSMv47nbkgbk7VHlwy4vlqx5dwHqoCukAf6LiqNurCYWGH+oX/mc2EmkLzKWNlUsg9K6d+v7rq4HupjQiwHVfAEPDa6kNygqy0SDjeC2R1DI=;
	5:SiDI38/V74aX+M8q+9nHxKKG+B2khN+yPhxGxJ0ND1b5mQNtLhDDk58b/McCGOHxrrSohgUBV10Jzn/WaA721dIcI9TBnt7boGi2hG414tRkZwaJ7gl8z74KlIPG3+u8eIL3yuniiZ3KRW5bcxoiNppWUBNYR8dKCyyeFg50pG4=;
	24:S/09sXDwa8DTvFniMwmyXer0BgnvlkDS24M6UX//2M4fHrBK44o4ZjtCdJPPYTf6pRXqhTgkulcO6XW54nBYI1d+6rblVuFH465PMoAeq8k=;
	7:wg/a74rVsUR7rGoGUzx0m/u+sgWotASIPxWOxNbinmVZyRFCzL9dRs6TEWLBgLOdZoZTKT7flG5NCeKKhz+TL1vgN8cUfQfLpgP319P+kSimt/ZsssUbeOqQgSUSfIlzRhqujB2BZNIzcaNI5oRgQ1AXoWaL8z5en0d73uMGzTntFGvmSNM8eFtUJhNC69lsVXwHbY1ky4GFfkggzeGF6hXBrsxVkQVijNPk4Pij/jY9mVDwWkf4YLklqMUpwObE
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; SN2PR15MB1088;
	20:CxPf9eupbtR7tyHSJwI54eQQxQX6/XqV53ZHLDt8HMb6iwzwWA1nTa15twXotjLU+j8cDfOZPezoQwgyGTQLgKsSfAvnkN/RjhWO8oyD880i3LdPumADGmFATMZeMLZkPo2ZY0ayHS/UPdyif2wdzIfpRCEB+b4cjwYFTymhy8g=
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 14 Nov 2017 12:50:45.5589
	(UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 84c23272-4b8b-4e2b-869d-08d52b5e5397
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 8ae927fe-1255-47a7-a2af-5f3a069daaa2
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SN2PR15MB1088
X-OriginatorOrg: fb.com
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-11-14_05:, , signatures=0
X-Proofpoint-Spam-Reason: safe
X-FB-Internal: Safe
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=174271">Roman Gushchin</a> - Nov. 14, 2017, 12:50 p.m.</div>
<pre class="content">
Currently we display some hugepage statistics (total, free, etc)
in /proc/meminfo, but only for default hugepage size (e.g. 2Mb).

If hugepages of different sizes are used (like 2Mb and 1Gb on x86-64),
/proc/meminfo output can be confusing, as non-default sized hugepages
are not reflected at all, and there are no signs that they are
existing and consuming system memory.

To solve this problem, let&#39;s display the total amount of memory,
consumed by hugetlb pages of all sized (both free and used).
Let&#39;s call it &quot;Hugetlb&quot;, and display size in kB to match generic
/proc/meminfo style.

For example, (1024 2Mb pages and 2 1Gb pages are pre-allocated):
  $ cat /proc/meminfo
  MemTotal:        8168984 kB
  MemFree:         3789276 kB
  &lt;...&gt;
  CmaFree:               0 kB
  HugePages_Total:    1024
  HugePages_Free:     1024
  HugePages_Rsvd:        0
  HugePages_Surp:        0
  Hugepagesize:       2048 kB
  Hugetlb:         4194304 kB
  DirectMap4k:       32632 kB
  DirectMap2M:     4161536 kB
  DirectMap1G:     6291456 kB
<span class="signed-off-by">
Signed-off-by: Roman Gushchin &lt;guro@fb.com&gt;</span>
Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: Michal Hocko &lt;mhocko@suse.com&gt;
Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;
Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;
Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;
Cc: kernel-team@fb.com
Cc: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org
---
 mm/hugetlb.c | 7 +++++++
 1 file changed, 7 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Nov. 14, 2017, 1:17 p.m.</div>
<pre class="content">
On Tue 14-11-17 12:50:26, Roman Gushchin wrote:
<span class="quote">&gt; Currently we display some hugepage statistics (total, free, etc)</span>
<span class="quote">&gt; in /proc/meminfo, but only for default hugepage size (e.g. 2Mb).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If hugepages of different sizes are used (like 2Mb and 1Gb on x86-64),</span>
<span class="quote">&gt; /proc/meminfo output can be confusing, as non-default sized hugepages</span>
<span class="quote">&gt; are not reflected at all, and there are no signs that they are</span>
<span class="quote">&gt; existing and consuming system memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To solve this problem, let&#39;s display the total amount of memory,</span>
<span class="quote">&gt; consumed by hugetlb pages of all sized (both free and used).</span>
<span class="quote">&gt; Let&#39;s call it &quot;Hugetlb&quot;, and display size in kB to match generic</span>
<span class="quote">&gt; /proc/meminfo style.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For example, (1024 2Mb pages and 2 1Gb pages are pre-allocated):</span>
<span class="quote">&gt;   $ cat /proc/meminfo</span>
<span class="quote">&gt;   MemTotal:        8168984 kB</span>
<span class="quote">&gt;   MemFree:         3789276 kB</span>
<span class="quote">&gt;   &lt;...&gt;</span>
<span class="quote">&gt;   CmaFree:               0 kB</span>
<span class="quote">&gt;   HugePages_Total:    1024</span>
<span class="quote">&gt;   HugePages_Free:     1024</span>
<span class="quote">&gt;   HugePages_Rsvd:        0</span>
<span class="quote">&gt;   HugePages_Surp:        0</span>
<span class="quote">&gt;   Hugepagesize:       2048 kB</span>
<span class="quote">&gt;   Hugetlb:         4194304 kB</span>
<span class="quote">&gt;   DirectMap4k:       32632 kB</span>
<span class="quote">&gt;   DirectMap2M:     4161536 kB</span>
<span class="quote">&gt;   DirectMap1G:     6291456 kB</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Roman Gushchin &lt;guro@fb.com&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
<span class="quote">&gt; Cc: kernel-team@fb.com</span>
<span class="quote">&gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>

/proc/meminfo is paved with mistakes throughout the history. It pretends
to give a good picture of the memory usage, yet we have many pointless
entries while large consumers are not reflected at all in many case.

Hugetlb data with that great details shouldn&#39;t have been exported in the
first place when they reflect only one specific hugepage size. I would
argue that if somebody went down to configure non-default hugetlb page
sizes then checking for the sysfs stats would be an immediate place to
look at. Anyway I can see that the cumulative information might be
helpful for those who do not own the machine but merely debug an issue
which is the primary usacase for the file.

That being said, I am not rely happy to add more to the file but it is
too late to fix it now. The patch is non-intrusive
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>

One nit below
<span class="quote">
&gt; ---</span>
<span class="quote">&gt;  mm/hugetlb.c | 7 +++++++</span>
<span class="quote">&gt;  1 file changed, 7 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; index 4b3bbd2980bb..1a65f8482282 100644</span>
<span class="quote">&gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -2974,6 +2974,8 @@ int hugetlb_overcommit_handler(struct ctl_table *table, int write,</span>
<span class="quote">&gt;  void hugetlb_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct hstate *h = &amp;default_hstate;</span>
<span class="quote">&gt; +	unsigned long total = 0;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	if (!hugepages_supported())</span>
<span class="quote">&gt;  		return;</span>
<span class="quote">&gt;  	seq_printf(m,</span>
<span class="quote">&gt; @@ -2987,6 +2989,11 @@ void hugetlb_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt;  			h-&gt;resv_huge_pages,</span>
<span class="quote">&gt;  			h-&gt;surplus_huge_pages,</span>
<span class="quote">&gt;  			1UL &lt;&lt; (huge_page_order(h) + PAGE_SHIFT - 10));</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	for_each_hstate(h)</span>
<span class="quote">&gt; +		total += (PAGE_SIZE &lt;&lt; huge_page_order(h)) * h-&gt;nr_huge_pages;</span>

Please keep the total calculation consistent with what we have there
already.
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	seq_printf(m, &quot;Hugetlb:        %8lu kB\n&quot;, total / 1024);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  int hugetlb_report_node_meminfo(int nid, char *buf)</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.13.6</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=45">Johannes Weiner</a> - Nov. 14, 2017, 9:07 p.m.</div>
<pre class="content">
On Tue, Nov 14, 2017 at 12:50:26PM +0000, Roman Gushchin wrote:
<span class="quote">&gt; Currently we display some hugepage statistics (total, free, etc)</span>
<span class="quote">&gt; in /proc/meminfo, but only for default hugepage size (e.g. 2Mb).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If hugepages of different sizes are used (like 2Mb and 1Gb on x86-64),</span>
<span class="quote">&gt; /proc/meminfo output can be confusing, as non-default sized hugepages</span>
<span class="quote">&gt; are not reflected at all, and there are no signs that they are</span>
<span class="quote">&gt; existing and consuming system memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; To solve this problem, let&#39;s display the total amount of memory,</span>
<span class="quote">&gt; consumed by hugetlb pages of all sized (both free and used).</span>
<span class="quote">&gt; Let&#39;s call it &quot;Hugetlb&quot;, and display size in kB to match generic</span>
<span class="quote">&gt; /proc/meminfo style.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For example, (1024 2Mb pages and 2 1Gb pages are pre-allocated):</span>
<span class="quote">&gt;   $ cat /proc/meminfo</span>
<span class="quote">&gt;   MemTotal:        8168984 kB</span>
<span class="quote">&gt;   MemFree:         3789276 kB</span>
<span class="quote">&gt;   &lt;...&gt;</span>
<span class="quote">&gt;   CmaFree:               0 kB</span>
<span class="quote">&gt;   HugePages_Total:    1024</span>
<span class="quote">&gt;   HugePages_Free:     1024</span>
<span class="quote">&gt;   HugePages_Rsvd:        0</span>
<span class="quote">&gt;   HugePages_Surp:        0</span>
<span class="quote">&gt;   Hugepagesize:       2048 kB</span>
<span class="quote">&gt;   Hugetlb:         4194304 kB</span>
<span class="quote">&gt;   DirectMap4k:       32632 kB</span>
<span class="quote">&gt;   DirectMap2M:     4161536 kB</span>
<span class="quote">&gt;   DirectMap1G:     6291456 kB</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Roman Gushchin &lt;guro@fb.com&gt;</span>
<span class="quote">&gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>
<span class="quote">&gt; Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
<span class="quote">&gt; Cc: kernel-team@fb.com</span>
<span class="quote">&gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="acked-by">
Acked-by: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Nov. 14, 2017, 9:10 p.m.</div>
<pre class="content">
Do we get an update for Documentation/vm/hugetlbpage.txt to spell out
what our shiny, new and intentionally-ambiguous entry is supposed to
mean and be used for?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Nov. 14, 2017, 10:28 p.m.</div>
<pre class="content">
On Tue, 14 Nov 2017, Michal Hocko wrote:
<span class="quote">
&gt; &gt; Currently we display some hugepage statistics (total, free, etc)</span>
<span class="quote">&gt; &gt; in /proc/meminfo, but only for default hugepage size (e.g. 2Mb).</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If hugepages of different sizes are used (like 2Mb and 1Gb on x86-64),</span>
<span class="quote">&gt; &gt; /proc/meminfo output can be confusing, as non-default sized hugepages</span>
<span class="quote">&gt; &gt; are not reflected at all, and there are no signs that they are</span>
<span class="quote">&gt; &gt; existing and consuming system memory.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; To solve this problem, let&#39;s display the total amount of memory,</span>
<span class="quote">&gt; &gt; consumed by hugetlb pages of all sized (both free and used).</span>
<span class="quote">&gt; &gt; Let&#39;s call it &quot;Hugetlb&quot;, and display size in kB to match generic</span>
<span class="quote">&gt; &gt; /proc/meminfo style.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; For example, (1024 2Mb pages and 2 1Gb pages are pre-allocated):</span>
<span class="quote">&gt; &gt;   $ cat /proc/meminfo</span>
<span class="quote">&gt; &gt;   MemTotal:        8168984 kB</span>
<span class="quote">&gt; &gt;   MemFree:         3789276 kB</span>
<span class="quote">&gt; &gt;   &lt;...&gt;</span>
<span class="quote">&gt; &gt;   CmaFree:               0 kB</span>
<span class="quote">&gt; &gt;   HugePages_Total:    1024</span>
<span class="quote">&gt; &gt;   HugePages_Free:     1024</span>
<span class="quote">&gt; &gt;   HugePages_Rsvd:        0</span>
<span class="quote">&gt; &gt;   HugePages_Surp:        0</span>
<span class="quote">&gt; &gt;   Hugepagesize:       2048 kB</span>
<span class="quote">&gt; &gt;   Hugetlb:         4194304 kB</span>
<span class="quote">&gt; &gt;   DirectMap4k:       32632 kB</span>
<span class="quote">&gt; &gt;   DirectMap2M:     4161536 kB</span>
<span class="quote">&gt; &gt;   DirectMap1G:     6291456 kB</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Roman Gushchin &lt;guro@fb.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Andrew Morton &lt;akpm@linux-foundation.org&gt;</span>
<span class="quote">&gt; &gt; Cc: Michal Hocko &lt;mhocko@suse.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Johannes Weiner &lt;hannes@cmpxchg.org&gt;</span>
<span class="quote">&gt; &gt; Cc: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
<span class="quote">&gt; &gt; Cc: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Andrea Arcangeli &lt;aarcange@redhat.com&gt;</span>
<span class="quote">&gt; &gt; Cc: Dave Hansen &lt;dave.hansen@intel.com&gt;</span>
<span class="quote">&gt; &gt; Cc: kernel-team@fb.com</span>
<span class="quote">&gt; &gt; Cc: linux-mm@kvack.org</span>
<span class="quote">&gt; &gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="acked-by">
Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">
&gt; /proc/meminfo is paved with mistakes throughout the history. It pretends</span>
<span class="quote">&gt; to give a good picture of the memory usage, yet we have many pointless</span>
<span class="quote">&gt; entries while large consumers are not reflected at all in many case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Hugetlb data with that great details shouldn&#39;t have been exported in the</span>
<span class="quote">&gt; first place when they reflect only one specific hugepage size. I would</span>
<span class="quote">&gt; argue that if somebody went down to configure non-default hugetlb page</span>
<span class="quote">&gt; sizes then checking for the sysfs stats would be an immediate place to</span>
<span class="quote">&gt; look at. Anyway I can see that the cumulative information might be</span>
<span class="quote">&gt; helpful for those who do not own the machine but merely debug an issue</span>
<span class="quote">&gt; which is the primary usacase for the file.</span>
<span class="quote">&gt; </span>

I agree in principle, but I think it&#39;s inevitable on projects that span 
decades and accumulate features that evolve over time.
<span class="quote">
&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  mm/hugetlb.c | 7 +++++++</span>
<span class="quote">&gt; &gt;  1 file changed, 7 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; index 4b3bbd2980bb..1a65f8482282 100644</span>
<span class="quote">&gt; &gt; --- a/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; +++ b/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; @@ -2974,6 +2974,8 @@ int hugetlb_overcommit_handler(struct ctl_table *table, int write,</span>
<span class="quote">&gt; &gt;  void hugetlb_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	struct hstate *h = &amp;default_hstate;</span>
<span class="quote">&gt; &gt; +	unsigned long total = 0;</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt;  	if (!hugepages_supported())</span>
<span class="quote">&gt; &gt;  		return;</span>
<span class="quote">&gt; &gt;  	seq_printf(m,</span>
<span class="quote">&gt; &gt; @@ -2987,6 +2989,11 @@ void hugetlb_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt; &gt;  			h-&gt;resv_huge_pages,</span>
<span class="quote">&gt; &gt;  			h-&gt;surplus_huge_pages,</span>
<span class="quote">&gt; &gt;  			1UL &lt;&lt; (huge_page_order(h) + PAGE_SHIFT - 10));</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	for_each_hstate(h)</span>
<span class="quote">&gt; &gt; +		total += (PAGE_SIZE &lt;&lt; huge_page_order(h)) * h-&gt;nr_huge_pages;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Please keep the total calculation consistent with what we have there</span>
<span class="quote">&gt; already.</span>
<span class="quote">&gt; </span>

Yeah, and I&#39;m not sure if your comment eludes to this being racy, but it 
would be better to store the default size for default_hstate during the 
iteration to total the size for all hstates.
<span class="quote">
&gt; &gt; +</span>
<span class="quote">&gt; &gt; +	seq_printf(m, &quot;Hugetlb:        %8lu kB\n&quot;, total / 1024);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  int hugetlb_report_node_meminfo(int nid, char *buf)</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Nov. 15, 2017, 8:18 a.m.</div>
<pre class="content">
On Tue 14-11-17 14:28:11, David Rientjes wrote:
[...]
<span class="quote">&gt; &gt; /proc/meminfo is paved with mistakes throughout the history. It pretends</span>
<span class="quote">&gt; &gt; to give a good picture of the memory usage, yet we have many pointless</span>
<span class="quote">&gt; &gt; entries while large consumers are not reflected at all in many case.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Hugetlb data with that great details shouldn&#39;t have been exported in the</span>
<span class="quote">&gt; &gt; first place when they reflect only one specific hugepage size. I would</span>
<span class="quote">&gt; &gt; argue that if somebody went down to configure non-default hugetlb page</span>
<span class="quote">&gt; &gt; sizes then checking for the sysfs stats would be an immediate place to</span>
<span class="quote">&gt; &gt; look at. Anyway I can see that the cumulative information might be</span>
<span class="quote">&gt; &gt; helpful for those who do not own the machine but merely debug an issue</span>
<span class="quote">&gt; &gt; which is the primary usacase for the file.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I agree in principle, but I think it&#39;s inevitable on projects that span </span>
<span class="quote">&gt; decades and accumulate features that evolve over time.</span>

Yes, this is acceptable in earlier stages but I believe we have reached
a mature state where we shouldn&#39;t repeat those mistakes.
[...]
<span class="quote">&gt; &gt; &gt;  	if (!hugepages_supported())</span>
<span class="quote">&gt; &gt; &gt;  		return;</span>
<span class="quote">&gt; &gt; &gt;  	seq_printf(m,</span>
<span class="quote">&gt; &gt; &gt; @@ -2987,6 +2989,11 @@ void hugetlb_report_meminfo(struct seq_file *m)</span>
<span class="quote">&gt; &gt; &gt;  			h-&gt;resv_huge_pages,</span>
<span class="quote">&gt; &gt; &gt;  			h-&gt;surplus_huge_pages,</span>
<span class="quote">&gt; &gt; &gt;  			1UL &lt;&lt; (huge_page_order(h) + PAGE_SHIFT - 10));</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; +	for_each_hstate(h)</span>
<span class="quote">&gt; &gt; &gt; +		total += (PAGE_SIZE &lt;&lt; huge_page_order(h)) * h-&gt;nr_huge_pages;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Please keep the total calculation consistent with what we have there</span>
<span class="quote">&gt; &gt; already.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yeah, and I&#39;m not sure if your comment eludes to this being racy, but it </span>
<span class="quote">&gt; would be better to store the default size for default_hstate during the </span>
<span class="quote">&gt; iteration to total the size for all hstates.</span>

I just meant to have the code consistent. I do not prefer one or other
option.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index 4b3bbd2980bb..1a65f8482282 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2974,6 +2974,8 @@</span> <span class="p_context"> int hugetlb_overcommit_handler(struct ctl_table *table, int write,</span>
 void hugetlb_report_meminfo(struct seq_file *m)
 {
 	struct hstate *h = &amp;default_hstate;
<span class="p_add">+	unsigned long total = 0;</span>
<span class="p_add">+</span>
 	if (!hugepages_supported())
 		return;
 	seq_printf(m,
<span class="p_chunk">@@ -2987,6 +2989,11 @@</span> <span class="p_context"> void hugetlb_report_meminfo(struct seq_file *m)</span>
 			h-&gt;resv_huge_pages,
 			h-&gt;surplus_huge_pages,
 			1UL &lt;&lt; (huge_page_order(h) + PAGE_SHIFT - 10));
<span class="p_add">+</span>
<span class="p_add">+	for_each_hstate(h)</span>
<span class="p_add">+		total += (PAGE_SIZE &lt;&lt; huge_page_order(h)) * h-&gt;nr_huge_pages;</span>
<span class="p_add">+</span>
<span class="p_add">+	seq_printf(m, &quot;Hugetlb:        %8lu kB\n&quot;, total / 1024);</span>
 }
 
 int hugetlb_report_node_meminfo(int nid, char *buf)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



