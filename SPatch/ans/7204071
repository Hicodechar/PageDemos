
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,2/2] mm: hugetlb: proc: add HugetlbPages field to /proc/PID/status - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,2/2] mm: hugetlb: proc: add HugetlbPages field to /proc/PID/status</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 17, 2015, 9:09 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1442480955-7297-3-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7204071/mbox/"
   >mbox</a>
|
   <a href="/patch/7204071/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7204071/">/patch/7204071/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 451899F40A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:12:40 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8E7DB20768
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:12:39 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id B077C207D7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Sep 2015 09:12:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754698AbbIQJLt (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 17 Sep 2015 05:11:49 -0400
Received: from TYO201.gate.nec.co.jp ([210.143.35.51]:61764 &quot;EHLO
	tyo201.gate.nec.co.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1754395AbbIQJLG (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 17 Sep 2015 05:11:06 -0400
Received: from mailgate3.nec.co.jp ([10.7.69.192])
	by tyo201.gate.nec.co.jp (8.13.8/8.13.4) with ESMTP id t8H9AlLg008638;
	Thu, 17 Sep 2015 18:10:47 +0900 (JST)
Received: from mailsv.nec.co.jp (imss62.nec.co.jp [10.7.69.157]) by
	mailgate3.nec.co.jp (8.11.7/3.7W-MAILGATE-NEC) with ESMTP
	id t8H9Ak203224; Thu, 17 Sep 2015 18:10:46 +0900 (JST)
Received: from mail02.kamome.nec.co.jp (mail02.kamome.nec.co.jp [10.25.43.5])
	by mailsv.nec.co.jp (8.13.8/8.13.4) with ESMTP id t8H9Aks0010783;
	Thu, 17 Sep 2015 18:10:46 +0900 (JST)
Received: from bpxc99gp.gisp.nec.co.jp ([10.38.151.149] [10.38.151.149]) by
	mail03.kamome.nec.co.jp with ESMTP id BT-MMP-2063043;
	Thu, 17 Sep 2015 18:09:33 +0900
Received: from BPXM23GP.gisp.nec.co.jp ([169.254.2.176]) by
	BPXC21GP.gisp.nec.co.jp ([10.38.151.149]) with mapi id 14.03.0224.002;
	Thu, 17 Sep 2015 18:09:32 +0900
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
CC: Michal Hocko &lt;mhocko@suse.cz&gt;, Vlastimil Babka &lt;vbabka@suse.cz&gt;,
	=?utf-8?B?UMOhZHJhaWcgQnJhZHk=?= &lt;P@draigBrady.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	=?utf-8?B?SsO2cm4gRW5nZWw=?= &lt;joern@purestorage.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Subject: [PATCH v6 2/2] mm: hugetlb: proc: add HugetlbPages field to
	/proc/PID/status
Thread-Topic: [PATCH v6 2/2] mm: hugetlb: proc: add HugetlbPages field to
	/proc/PID/status
Thread-Index: AQHQ8SiQEu6fKEE320abX6KFgS/ZkQ==
Date: Thu, 17 Sep 2015 09:09:31 +0000
Message-ID: &lt;1442480955-7297-3-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
References: &lt;1442480955-7297-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
In-Reply-To: &lt;1442480955-7297-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
Accept-Language: ja-JP, en-US
Content-Language: ja-JP
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.128.101.27]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Sept. 17, 2015, 9:09 a.m.</div>
<pre class="content">
Currently there&#39;s no easy way to get per-process usage of hugetlb pages, which
is inconvenient because userspace applications which use hugetlb typically want
to control their processes on the basis of how much memory (including hugetlb)
they use. So this patch simply provides easy access to the info via
/proc/PID/status.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="acked-by">Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="acked-by">Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
---
v5 -&gt; v6:
- drop showing per-pagesize info

v4 -&gt; v5:
- add (struct hugetlb_usage *) to struct mm_struct
- use %lu instead of %d for seq_printf()
- introduce hugetlb_fork

v3 -&gt; v4:
- rename field (VmHugetlbRSS is not the best name)
- introduce struct hugetlb_usage in struct mm_struct (no invasion to struct
  mm_rss_stat)
- introduce hugetlb_report_usage()
- merged documentation update

v2 -&gt; v3:
- use inline functions instead of macros for !CONFIG_HUGETLB_PAGE
---
 Documentation/filesystems/proc.txt |  2 ++
 fs/proc/task_mmu.c                 |  1 +
 include/linux/hugetlb.h            | 19 +++++++++++++++++++
 include/linux/mm_types.h           |  3 +++
 mm/hugetlb.c                       |  9 +++++++++
 mm/rmap.c                          |  4 +++-
 6 files changed, 37 insertions(+), 1 deletion(-)

-- 
2.4.3
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Sept. 20, 2015, 10:58 a.m.</div>
<pre class="content">
On Thu 17-09-15 09:09:31, Naoya Horiguchi wrote:
<span class="quote">&gt; Currently there&#39;s no easy way to get per-process usage of hugetlb pages, which</span>
<span class="quote">&gt; is inconvenient because userspace applications which use hugetlb typically want</span>
<span class="quote">&gt; to control their processes on the basis of how much memory (including hugetlb)</span>
<span class="quote">&gt; they use. So this patch simply provides easy access to the info via</span>
<span class="quote">&gt; /proc/PID/status.</span>

Thank you for making this much more lightweight. If we ever have a
request for a per-size breakdown we can add HugetlbPages-$size: value kB
<span class="quote">
&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.com&gt;</span>

Just a small nit-pick, feel free to ignore if this was really intended:

[...]
<span class="quote">&gt; +static inline void hugetlb_count_add(long l, struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	atomic_long_add(l, &amp;mm-&gt;hugetlb_usage);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline void hugetlb_count_sub(long l, struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	atomic_long_sub(l, &amp;mm-&gt;hugetlb_usage);</span>
<span class="quote">&gt; +}</span>

I can see why you didn&#39;t use dec_mm_counter but the ordering could be
same. Other functions which handle counters follow the same template
(target, counter/count).
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git v4.3-rc1/Documentation/filesystems/proc.txt v4.3-rc1_patched/Documentation/filesystems/proc.txt</span>
<span class="p_header">index b9467d91052a..da29faaf685e 100644</span>
<span class="p_header">--- v4.3-rc1/Documentation/filesystems/proc.txt</span>
<span class="p_header">+++ v4.3-rc1_patched/Documentation/filesystems/proc.txt</span>
<span class="p_chunk">@@ -174,6 +174,7 @@</span> <span class="p_context"> For example, to get the status information of a process, all you have to do is</span>
   VmLib:      1412 kB
   VmPTE:        20 kb
   VmSwap:        0 kB
<span class="p_add">+  HugetlbPages:          0 kB</span>
   Threads:        1
   SigQ:   0/28578
   SigPnd: 0000000000000000
<span class="p_chunk">@@ -237,6 +238,7 @@</span> <span class="p_context"> Table 1-2: Contents of the status files (as of 4.1)</span>
  VmPTE                       size of page table entries
  VmPMD                       size of second level page tables
  VmSwap                      size of swap usage (the number of referred swapents)
<span class="p_add">+ HugetlbPages                size of hugetlb memory portions</span>
  Threads                     number of threads
  SigQ                        number of signals queued/max. number for queue
  SigPnd                      bitmap of pending signals for the thread
<span class="p_header">diff --git v4.3-rc1/fs/proc/task_mmu.c v4.3-rc1_patched/fs/proc/task_mmu.c</span>
<span class="p_header">index 22c02917f265..bd167675a06f 100644</span>
<span class="p_header">--- v4.3-rc1/fs/proc/task_mmu.c</span>
<span class="p_header">+++ v4.3-rc1_patched/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -70,6 +70,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		ptes &gt;&gt; 10,
 		pmds &gt;&gt; 10,
 		swap &lt;&lt; (PAGE_SHIFT-10));
<span class="p_add">+	hugetlb_report_usage(m, mm);</span>
 }
 
 unsigned long task_vsize(struct mm_struct *mm)
<span class="p_header">diff --git v4.3-rc1/include/linux/hugetlb.h v4.3-rc1_patched/include/linux/hugetlb.h</span>
<span class="p_header">index 5e35379f58a5..685c262e0be8 100644</span>
<span class="p_header">--- v4.3-rc1/include/linux/hugetlb.h</span>
<span class="p_header">+++ v4.3-rc1_patched/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -483,6 +483,17 @@</span> <span class="p_context"> static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
 #define hugepages_supported() (HPAGE_SHIFT != 0)
 #endif
 
<span class="p_add">+void hugetlb_report_usage(struct seq_file *m, struct mm_struct *mm);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void hugetlb_count_add(long l, struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_long_add(l, &amp;mm-&gt;hugetlb_usage);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void hugetlb_count_sub(long l, struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	atomic_long_sub(l, &amp;mm-&gt;hugetlb_usage);</span>
<span class="p_add">+}</span>
 #else	/* CONFIG_HUGETLB_PAGE */
 struct hstate {};
 #define alloc_huge_page(v, a, r) NULL
<span class="p_chunk">@@ -519,6 +530,14 @@</span> <span class="p_context"> static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
 {
 	return &amp;mm-&gt;page_table_lock;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline void hugetlb_report_usage(struct seq_file *f, struct mm_struct *m)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void hugetlb_count_sub(long l, struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif	/* CONFIG_HUGETLB_PAGE */
 
 static inline spinlock_t *huge_pte_lock(struct hstate *h,
<span class="p_header">diff --git v4.3-rc1/include/linux/mm_types.h v4.3-rc1_patched/include/linux/mm_types.h</span>
<span class="p_header">index 3d6baa7d4534..0a85da25a822 100644</span>
<span class="p_header">--- v4.3-rc1/include/linux/mm_types.h</span>
<span class="p_header">+++ v4.3-rc1_patched/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -486,6 +486,9 @@</span> <span class="p_context"> struct mm_struct {</span>
 	/* address of the bounds directory */
 	void __user *bd_addr;
 #endif
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+	atomic_long_t hugetlb_usage;</span>
<span class="p_add">+#endif</span>
 };
 
 static inline void mm_init_cpumask(struct mm_struct *mm)
<span class="p_header">diff --git v4.3-rc1/mm/hugetlb.c v4.3-rc1_patched/mm/hugetlb.c</span>
<span class="p_header">index 999fb0aef8f1..444a55de3c4a 100644</span>
<span class="p_header">--- v4.3-rc1/mm/hugetlb.c</span>
<span class="p_header">+++ v4.3-rc1_patched/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2790,6 +2790,12 @@</span> <span class="p_context"> void hugetlb_show_meminfo(void)</span>
 				1UL &lt;&lt; (huge_page_order(h) + PAGE_SHIFT - 10));
 }
 
<span class="p_add">+void hugetlb_report_usage(struct seq_file *m, struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	seq_printf(m, &quot;HugetlbPages:\t%8lu kB\n&quot;,</span>
<span class="p_add">+		   atomic_long_read(&amp;mm-&gt;hugetlb_usage) &lt;&lt; (PAGE_SHIFT - 10));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* Return the number pages of memory we physically have, in PAGE_SIZE units. */
 unsigned long hugetlb_total_pages(void)
 {
<span class="p_chunk">@@ -3025,6 +3031,7 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 			get_page(ptepage);
 			page_dup_rmap(ptepage);
 			set_huge_pte_at(dst, addr, dst_pte, entry);
<span class="p_add">+			hugetlb_count_add(pages_per_huge_page(h), dst);</span>
 		}
 		spin_unlock(src_ptl);
 		spin_unlock(dst_ptl);
<span class="p_chunk">@@ -3105,6 +3112,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		if (huge_pte_dirty(pte))
 			set_page_dirty(page);
 
<span class="p_add">+		hugetlb_count_sub(pages_per_huge_page(h), mm);</span>
 		page_remove_rmap(page);
 		force_flush = !__tlb_remove_page(tlb, page);
 		if (force_flush) {
<span class="p_chunk">@@ -3501,6 +3509,7 @@</span> <span class="p_context"> static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 				&amp;&amp; (vma-&gt;vm_flags &amp; VM_SHARED)));
 	set_huge_pte_at(mm, address, ptep, new_pte);
 
<span class="p_add">+	hugetlb_count_add(pages_per_huge_page(h), mm);</span>
 	if ((flags &amp; FAULT_FLAG_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_SHARED)) {
 		/* Optimization, do the COW without a second fault */
 		ret = hugetlb_cow(mm, vma, address, ptep, new_pte, page, ptl);
<span class="p_header">diff --git v4.3-rc1/mm/rmap.c v4.3-rc1_patched/mm/rmap.c</span>
<span class="p_header">index f5b5c1f3dcd7..d40e7aefb888 100644</span>
<span class="p_header">--- v4.3-rc1/mm/rmap.c</span>
<span class="p_header">+++ v4.3-rc1_patched/mm/rmap.c</span>
<span class="p_chunk">@@ -1352,7 +1352,9 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	update_hiwater_rss(mm);
 
 	if (PageHWPoison(page) &amp;&amp; !(flags &amp; TTU_IGNORE_HWPOISON)) {
<span class="p_del">-		if (!PageHuge(page)) {</span>
<span class="p_add">+		if (PageHuge(page)) {</span>
<span class="p_add">+			hugetlb_count_sub(1 &lt;&lt; compound_order(page), mm);</span>
<span class="p_add">+		} else {</span>
 			if (PageAnon(page))
 				dec_mm_counter(mm, MM_ANONPAGES);
 			else

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



