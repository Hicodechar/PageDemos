
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>clarify how insecure CPU is - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    clarify how insecure CPU is</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1167">Pavel Machek</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 4, 2018, 8:51 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180304085159.GB7931@amd&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10257569/mbox/"
   >mbox</a>
|
   <a href="/patch/10257569/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10257569/">/patch/10257569/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	244B960365 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  4 Mar 2018 08:52:21 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1DADD287E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  4 Mar 2018 08:52:21 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0EAD6287E5; Sun,  4 Mar 2018 08:52:21 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3CB73287E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  4 Mar 2018 08:52:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752564AbeCDIwC (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Mar 2018 03:52:02 -0500
Received: from atrey.karlin.mff.cuni.cz ([195.113.26.193]:38406 &quot;EHLO
	atrey.karlin.mff.cuni.cz&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751819AbeCDIwB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Mar 2018 03:52:01 -0500
Received: by atrey.karlin.mff.cuni.cz (Postfix, from userid 512)
	id E0B0680176; Sun,  4 Mar 2018 09:51:59 +0100 (CET)
Date: Sun, 4 Mar 2018 09:51:59 +0100
From: Pavel Machek &lt;pavel@ucw.cz&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: linux-kernel@vger.kernel.org, r.marek@assembler.cz,
	ricardo.neri-calderon@linux.intel.com, rkrcmar@redhat.com,
	Janakarajan.Natarajan@amd.com, bp@suse.de, x86@kernel.org,
	hpa@zytor.com, mingo@redhat.com,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Subject: Re: [PATCH] clarify how insecure CPU is
Message-ID: &lt;20180304085159.GB7931@amd&gt;
References: &lt;20180108201017.GA20588@amd&gt;
	&lt;alpine.DEB.2.20.1801082125530.2253@nanos&gt;
	&lt;20180108230355.GA25349@amd&gt;
	&lt;alpine.DEB.2.20.1801090043160.2253@nanos&gt;
	&lt;20180303210653.GB22392@amd&gt;
	&lt;alpine.DEB.2.21.1803040825130.1654@nanos.tec.linutronix.de&gt;
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol=&quot;application/pgp-signature&quot;; boundary=&quot;LyciRD1jyfeSSjG0&quot;
Content-Disposition: inline
In-Reply-To: &lt;alpine.DEB.2.21.1803040825130.1654@nanos.tec.linutronix.de&gt;
User-Agent: Mutt/1.5.23 (2014-03-12)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1167">Pavel Machek</a> - March 4, 2018, 8:51 a.m.</div>
<pre class="content">
Hi!
<span class="quote">
&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; First, what is going on with X86_BUG_AMD_E400 and X86_BUG_AMD_APIC_C1E</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; ? They seem to refer to the same bug, perhaps comment should mention</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; that? (Do we need two flags for one bug?)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; Next, maybe X86_BUG_CPU_INSECURE is a bit too generic? This seems to</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; address &quot;Meltdown&quot; problem, but not &quot;Spectre&quot;. Should it be limited to</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; PPro and newer Intel CPUs?</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; Should another erratum be added for &quot;Spectre&quot;? This is present even on</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; AMD CPUs, but should not be present in 486, maybe Pentium, and some</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; Atom chips?</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; Plus... is this reasonable interface?</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; bugs		: cpu_insecure</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; We&#39;ve renamed it to meltdown already and added spectre_v1/v2 bits for the</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; rest of the mess.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; Could you explain (best with code comment) what is going on with</span>
<span class="quote">&gt; &gt; &gt; &gt; X86_BUG_AMD_E400 and X86_BUG_AMD_APIC_C1E ? They seem to refer to the</span>
<span class="quote">&gt; &gt; &gt; &gt; same bug.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Sorry, that;s really not the time for this.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Ok, is there better time now? The code is a bit confusing...</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; What&#39;s confusing? Here are the relevant code snippets in invocation order.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt; 	 * Check whether the machine is affected by erratum 400. This is</span>
<span class="quote">&gt; 	 * used to select the proper idle routine and to enable the check</span>
<span class="quote">&gt; 	 * whether the machine is affected in arch_post_acpi_init(), which</span>
<span class="quote">&gt; 	 * sets the X86_BUG_AMD_APIC_C1E bug depending on the MSR check.</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt; 	if (cpu_has_amd_erratum(c, amd_erratum_400))</span>
<span class="quote">&gt; 		set_cpu_bug(c, X86_BUG_AMD_E400);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This sets the errate 400 bug bit to tell subsequent code that the CPU might</span>
<span class="quote">&gt; be affected by that erratum.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; void select_idle_routine(const struct cpuinfo_x86 *c)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (boot_cpu_has_bug(X86_BUG_AMD_E400)) {</span>
<span class="quote">&gt; 		pr_info(&quot;using AMD E400 aware idle routine\n&quot;);</span>
<span class="quote">&gt; 		x86_idle = amd_e400_idle;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Selects the idle routine depending on the bug flag</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; void __init arch_post_acpi_subsys_init(void)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	u32 lo, hi;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	if (!boot_cpu_has_bug(X86_BUG_AMD_E400))</span>
<span class="quote">&gt; 		return;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt; 	 * AMD E400 detection needs to happen after ACPI has been enabled. If</span>
<span class="quote">&gt; 	 * the machine is affected K8_INTP_C1E_ACTIVE_MASK bits are set in</span>
<span class="quote">&gt; 	 * MSR_K8_INT_PENDING_MSG.</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt; 	rdmsr(MSR_K8_INT_PENDING_MSG, lo, hi);</span>
<span class="quote">&gt; 	if (!(lo &amp; K8_INTP_C1E_ACTIVE_MASK))</span>
<span class="quote">&gt; 		return;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Late detection whether C1E which halts TSC and APIC is enabled. This needs</span>
<span class="quote">&gt; to be done after ACPI is initialized.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; /*</span>
<span class="quote">&gt;  * AMD Erratum 400 aware idle routine. We handle it the same way as C3 power</span>
<span class="quote">&gt;  * states (local apic timer and TSC stop).</span>
<span class="quote">&gt;  */</span>
<span class="quote">&gt; static void amd_e400_idle(void)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	/*</span>
<span class="quote">&gt; 	 * We cannot use static_cpu_has_bug() here because X86_BUG_AMD_APIC_C1E</span>
<span class="quote">&gt; 	 * gets set after static_cpu_has() places have been converted via</span>
<span class="quote">&gt; 	 * alternatives.</span>
<span class="quote">&gt; 	 */</span>
<span class="quote">&gt; 	if (!boot_cpu_has_bug(X86_BUG_AMD_APIC_C1E)) {</span>
<span class="quote">&gt; 		default_idle();</span>
<span class="quote">&gt; 		return;</span>
<span class="quote">&gt; 	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The actual idle routine. If the C1E bug flag is not set, CPU is not</span>
<span class="quote">&gt; affected, use default idle, otherwise handle it like other C-States which</span>
<span class="quote">&gt; stop TSC and APIC.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The comments are clear enough, but Feel free to send patches which enhance</span>
<span class="quote">&gt; them if you think thats necessary.</span>

Thanks for explanation. Might this be good idea?
<span class="signed-off-by">
Signed-off-by: Pavel Machek &lt;pavel@ucw.cz&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 4, 2018, 9:29 a.m.</div>
<pre class="content">
On Sun, Mar 04, 2018 at 09:51:59AM +0100, Pavel Machek wrote:
<span class="quote">&gt; diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; index f41079d..4901742 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; @@ -341,7 +341,7 @@</span>
<span class="quote">&gt;  #define X86_BUG_FDIV			X86_BUG(1) /* FPU FDIV */</span>
<span class="quote">&gt;  #define X86_BUG_COMA			X86_BUG(2) /* Cyrix 6x86 coma */</span>
<span class="quote">&gt;  #define X86_BUG_AMD_TLB_MMATCH		X86_BUG(3) /* &quot;tlb_mmatch&quot; AMD Erratum 383 */</span>
<span class="quote">&gt; -#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* &quot;apic_c1e&quot; AMD Erratum 400 */</span>
<span class="quote">&gt; +#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* System is affected AMD Erratum 400, special idle routine is needed */</span>
<span class="quote">&gt;  #define X86_BUG_11AP			X86_BUG(5) /* Bad local APIC aka 11AP */</span>
<span class="quote">&gt;  #define X86_BUG_FXSAVE_LEAK		X86_BUG(6) /* FXSAVE leaks FOP/FIP/FOP */</span>
<span class="quote">&gt;  #define X86_BUG_CLFLUSH_MONITOR		X86_BUG(7) /* AAI65, CLFLUSH required before MONITOR */</span>
<span class="quote">&gt; @@ -356,7 +356,7 @@</span>
<span class="quote">&gt;  #define X86_BUG_NULL_SEG		X86_BUG(10) /* Nulling a selector preserves the base */</span>
<span class="quote">&gt;  #define X86_BUG_SWAPGS_FENCE		X86_BUG(11) /* SWAPGS without input dep on GS */</span>
<span class="quote">&gt;  #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */</span>
<span class="quote">&gt; -#define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */</span>
<span class="quote">&gt; +#define X86_BUG_AMD_E400		X86_BUG(13) /* System may be affected by Erratum 400, X86_BUG_AMD_APIC_C1E might be needed  */</span>

Not &quot;might be needed&quot; - &quot;X86_BUG_AMD_APIC_C1E will be set if platform is
affected&quot;.

And then you don&#39;t need the above comment change. And you can&#39;t remove
&quot;apic_c1e&quot; there because it is magical.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1167">Pavel Machek</a> - March 4, 2018, 2:01 p.m.</div>
<pre class="content">
On Sun 2018-03-04 10:29:18, Borislav Petkov wrote:
<span class="quote">&gt; On Sun, Mar 04, 2018 at 09:51:59AM +0100, Pavel Machek wrote:</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; &gt; index f41079d..4901742 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; &gt; @@ -341,7 +341,7 @@</span>
<span class="quote">&gt; &gt;  #define X86_BUG_FDIV			X86_BUG(1) /* FPU FDIV */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_COMA			X86_BUG(2) /* Cyrix 6x86 coma */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_AMD_TLB_MMATCH		X86_BUG(3) /* &quot;tlb_mmatch&quot; AMD Erratum 383 */</span>
<span class="quote">&gt; &gt; -#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* &quot;apic_c1e&quot; AMD Erratum 400 */</span>
<span class="quote">&gt; &gt; +#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* System is affected AMD Erratum 400, special idle routine is needed */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_11AP			X86_BUG(5) /* Bad local APIC aka 11AP */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_FXSAVE_LEAK		X86_BUG(6) /* FXSAVE leaks FOP/FIP/FOP */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_CLFLUSH_MONITOR		X86_BUG(7) /* AAI65, CLFLUSH required before MONITOR */</span>
<span class="quote">&gt; &gt; @@ -356,7 +356,7 @@</span>
<span class="quote">&gt; &gt;  #define X86_BUG_NULL_SEG		X86_BUG(10) /* Nulling a selector preserves the base */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_SWAPGS_FENCE		X86_BUG(11) /* SWAPGS without input dep on GS */</span>
<span class="quote">&gt; &gt;  #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */</span>
<span class="quote">&gt; &gt; -#define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */</span>
<span class="quote">&gt; &gt; +#define X86_BUG_AMD_E400		X86_BUG(13) /* System may be affected by Erratum 400, X86_BUG_AMD_APIC_C1E might be needed  */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Not &quot;might be needed&quot; - &quot;X86_BUG_AMD_APIC_C1E will be set if platform is</span>
<span class="quote">&gt; affected&quot;.</span>

That&#39;s not what Thomas was explaining to me.
<span class="quote">
&gt; And then you don&#39;t need the above comment change. And you can&#39;t remove</span>
<span class="quote">&gt; &quot;apic_c1e&quot; there because it is magical.</span>

So.. what&#39;s magical about it, why do we need two bits, and why is that
not explained in the header file?

Please go through the email thread, I&#39;m trying to understand what is
going on here, and no, the comments in the header are not helpful.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - March 4, 2018, 2:27 p.m.</div>
<pre class="content">
On Sun, Mar 04, 2018 at 03:01:48PM +0100, Pavel Machek wrote:
<span class="quote">&gt; &gt; Not &quot;might be needed&quot; - &quot;X86_BUG_AMD_APIC_C1E will be set if platform is</span>
<span class="quote">&gt; &gt; affected&quot;.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s not what Thomas was explaining to me.</span>

It is in the comment he pasted:

         * Check whether the machine is affected by erratum 400. This is
         * used to select the proper idle routine and to enable the check
         * whether the machine is affected in arch_post_acpi_init(), which
         * sets the X86_BUG_AMD_APIC_C1E bug depending on the MSR check.
<span class="quote">
&gt; So.. what&#39;s magical about it, why do we need two bits, and why is that</span>
<span class="quote">&gt; not explained in the header file?</span>

Lemme enable line numbers so that you can find it:

arch/x86/include/asm/cpufeatures.h:
 19 /*
 20  * Note: If the comment begins with a quoted string, that string is used
 21  * in /proc/cpuinfo instead of the macro name.  If the string is &quot;&quot;,
 22  * this feature bit is not displayed in /proc/cpuinfo at all.
<span class="quote">
&gt; Please go through the email thread,</span>

No, you read Thomas&#39; mail again.
<span class="quote">
&gt; I&#39;m trying to understand what is going on here,</span>

Nothing&#39;s going on, it works as designed.

X86_BUG_AMD_E400 marks all CPUs which could be affected by erratum 400
and X86_BUG_AMD_APIC_C1E is the bit we set when we detect that the CPU
is *actually* affected because we need to do the detection late, after
ACPI has been initialized.

A CPU might be affected by the erratum - bit X86_BUG_AMD_E400 - but if
the BIOS doesn&#39;t enter C1E, then the erratum doesn&#39;t come to manifest
itself, i.e., we don&#39;t set X86_BUG_AMD_APIC_C1E.

If it is still not clear, read the erratum 400 description in the
revision guide.

The code works perfectly fine.

Unless you&#39;re experiencing a problem with it. Then I&#39;m all ears.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">index f41079d..4901742 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -341,7 +341,7 @@</span> <span class="p_context"></span>
 #define X86_BUG_FDIV			X86_BUG(1) /* FPU FDIV */
 #define X86_BUG_COMA			X86_BUG(2) /* Cyrix 6x86 coma */
 #define X86_BUG_AMD_TLB_MMATCH		X86_BUG(3) /* &quot;tlb_mmatch&quot; AMD Erratum 383 */
<span class="p_del">-#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* &quot;apic_c1e&quot; AMD Erratum 400 */</span>
<span class="p_add">+#define X86_BUG_AMD_APIC_C1E		X86_BUG(4) /* System is affected AMD Erratum 400, special idle routine is needed */</span>
 #define X86_BUG_11AP			X86_BUG(5) /* Bad local APIC aka 11AP */
 #define X86_BUG_FXSAVE_LEAK		X86_BUG(6) /* FXSAVE leaks FOP/FIP/FOP */
 #define X86_BUG_CLFLUSH_MONITOR		X86_BUG(7) /* AAI65, CLFLUSH required before MONITOR */
<span class="p_chunk">@@ -356,7 +356,7 @@</span> <span class="p_context"></span>
 #define X86_BUG_NULL_SEG		X86_BUG(10) /* Nulling a selector preserves the base */
 #define X86_BUG_SWAPGS_FENCE		X86_BUG(11) /* SWAPGS without input dep on GS */
 #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */
<span class="p_del">-#define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */</span>
<span class="p_add">+#define X86_BUG_AMD_E400		X86_BUG(13) /* System may be affected by Erratum 400, X86_BUG_AMD_APIC_C1E might be needed  */</span>
 #define X86_BUG_CPU_MELTDOWN		X86_BUG(14) /* CPU is affected by meltdown attack and needs kernel page table isolation */
 #define X86_BUG_SPECTRE_V1		X86_BUG(15) /* CPU is affected by Spectre variant 1 attack with conditional branches */
 #define X86_BUG_SPECTRE_V2		X86_BUG(16) /* CPU is affected by Spectre variant 2 attack with indirect branches */

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



