
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[17/20] arch/hotplug: Call into idle with a proper state - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [17/20] arch/hotplug: Call into idle with a proper state</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 26, 2016, 6:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160226182341.614102639@linutronix.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8441051/mbox/"
   >mbox</a>
|
   <a href="/patch/8441051/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8441051/">/patch/8441051/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 38657C0553
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 Feb 2016 18:46:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 44340202E6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 Feb 2016 18:46:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 2B30220259
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 26 Feb 2016 18:46:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1423077AbcBZSpW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 26 Feb 2016 13:45:22 -0500
Received: from www.linutronix.de ([62.245.132.108]:33483 &quot;EHLO
	Galois.linutronix.de&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1423034AbcBZSpM (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 26 Feb 2016 13:45:12 -0500
Received: from localhost ([127.0.0.1] helo=[127.0.1.1])
	by Galois.linutronix.de with esmtp (Exim 4.80)
	(envelope-from &lt;tglx@linutronix.de&gt;)
	id 1aZNNq-00015k-En; Fri, 26 Feb 2016 19:44:58 +0100
Message-Id: &lt;20160226182341.614102639@linutronix.de&gt;
User-Agent: quilt/0.63-1
Date: Fri, 26 Feb 2016 18:43:40 -0000
From: Thomas Gleixner &lt;tglx@linutronix.de&gt;
To: LKML &lt;linux-kernel@vger.kernel.org&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Ingo Molnar &lt;mingo@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Peter Anvin &lt;hpa@zytor.com&gt;, Oleg Nesterov &lt;oleg@redhat.com&gt;,
	linux-arch@vger.kernel.org, Tejun Heo &lt;tj@kernel.org&gt;,
	Steven Rostedt &lt;rostedt@goodmis.org&gt;,
	Rusty Russell &lt;rusty@rustcorp.com.au&gt;,
	Paul McKenney &lt;paulmck@linux.vnet.ibm.com&gt;,
	Rafael Wysocki &lt;rafael.j.wysocki@intel.com&gt;,
	Arjan van de Ven &lt;arjan@linux.intel.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	&quot;Srivatsa S. Bhat&quot; &lt;srivatsa@mit.edu&gt;,
	Sebastian Siewior &lt;bigeasy@linutronix.de&gt;, Paul Turner &lt;pjt@google.com&gt;
Subject: [patch 17/20] arch/hotplug: Call into idle with a proper state
References: &lt;20160226164321.657646833@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Content-Disposition: inline;
	filename=arch-hotplug--Call-into-idle-with-a-proper-state.patch
X-Linutronix-Spam-Score: -1.0
X-Linutronix-Spam-Level: -
X-Linutronix-Spam-Status: No , -1.0 points, 5.0 required, ALL_TRUSTED=-1,
	SHORTCIRCUIT=-0.0001, URIBL_BLOCKED=0.001
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Feb. 26, 2016, 6:43 p.m.</div>
<pre class="content">
Let the non boot cpus call into idle with the corresponding hotplug state, so
the hotplug core can handle the further bringup. That&#39;s a first step to
convert the boot side of the hotplugged cpus to do all the synchronization
with the other side through the state machine. For now it&#39;ll only start the
hotplug thread and kick the full bringup of the cpu.
<span class="signed-off-by">
Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
---
 arch/alpha/kernel/smp.c         |    2 +-
 arch/arc/kernel/smp.c           |    2 +-
 arch/arm/kernel/smp.c           |    2 +-
 arch/arm64/kernel/smp.c         |    2 +-
 arch/blackfin/mach-common/smp.c |    2 +-
 arch/hexagon/kernel/smp.c       |    2 +-
 arch/ia64/kernel/smpboot.c      |    2 +-
 arch/m32r/kernel/smpboot.c      |    2 +-
 arch/metag/kernel/smp.c         |    2 +-
 arch/mips/kernel/smp.c          |    2 +-
 arch/mn10300/kernel/smp.c       |    2 +-
 arch/parisc/kernel/smp.c        |    2 +-
 arch/powerpc/kernel/smp.c       |    2 +-
 arch/s390/kernel/smp.c          |    2 +-
 arch/sh/kernel/smp.c            |    2 +-
 arch/sparc/kernel/smp_32.c      |    2 +-
 arch/sparc/kernel/smp_64.c      |    2 +-
 arch/tile/kernel/smpboot.c      |    2 +-
 arch/x86/kernel/smpboot.c       |    2 +-
 arch/x86/xen/smp.c              |    2 +-
 arch/xtensa/kernel/smp.c        |    2 +-
 include/linux/cpuhotplug.h      |    1 +
 22 files changed, 22 insertions(+), 21 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">Index: b/arch/alpha/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/alpha/kernel/smp.c</span>
<span class="p_header">+++ b/arch/alpha/kernel/smp.c</span>
<span class="p_chunk">@@ -168,7 +168,7 @@</span> <span class="p_context"> smp_callin(void)</span>
 	      cpuid, current, current-&gt;active_mm));
 
 	preempt_disable();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 /* Wait until hwrpb-&gt;txrdy is clear for cpu.  Return -1 on timeout.  */
<span class="p_header">Index: b/arch/arc/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/arc/kernel/smp.c</span>
<span class="p_header">+++ b/arch/arc/kernel/smp.c</span>
<span class="p_chunk">@@ -142,7 +142,7 @@</span> <span class="p_context"> void start_kernel_secondary(void)</span>
 
 	local_irq_enable();
 	preempt_disable();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 /*
<span class="p_header">Index: b/arch/arm/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/arm/kernel/smp.c</span>
<span class="p_header">+++ b/arch/arm/kernel/smp.c</span>
<span class="p_chunk">@@ -409,7 +409,7 @@</span> <span class="p_context"> asmlinkage void secondary_start_kernel(v</span>
 	/*
 	 * OK, it&#39;s off to the idle thread for us
 	 */
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 void __init smp_cpus_done(unsigned int max_cpus)
<span class="p_header">Index: b/arch/arm64/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/arm64/kernel/smp.c</span>
<span class="p_header">+++ b/arch/arm64/kernel/smp.c</span>
<span class="p_chunk">@@ -195,7 +195,7 @@</span> <span class="p_context"> asmlinkage void secondary_start_kernel(v</span>
 	/*
 	 * OK, it&#39;s off to the idle thread for us
 	 */
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 #ifdef CONFIG_HOTPLUG_CPU
<span class="p_header">Index: b/arch/blackfin/mach-common/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/blackfin/mach-common/smp.c</span>
<span class="p_header">+++ b/arch/blackfin/mach-common/smp.c</span>
<span class="p_chunk">@@ -333,7 +333,7 @@</span> <span class="p_context"> void secondary_start_kernel(void)</span>
 
 	/* We are done with local CPU inits, unblock the boot CPU. */
 	set_cpu_online(cpu, true);
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 void __init smp_prepare_boot_cpu(void)
<span class="p_header">Index: b/arch/hexagon/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/hexagon/kernel/smp.c</span>
<span class="p_header">+++ b/arch/hexagon/kernel/smp.c</span>
<span class="p_chunk">@@ -180,7 +180,7 @@</span> <span class="p_context"> void start_secondary(void)</span>
 
 	local_irq_enable();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 
<span class="p_header">Index: b/arch/ia64/kernel/smpboot.c</span>
===================================================================
<span class="p_header">--- a/arch/ia64/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/ia64/kernel/smpboot.c</span>
<span class="p_chunk">@@ -454,7 +454,7 @@</span> <span class="p_context"> start_secondary (void *unused)</span>
 	preempt_disable();
 	smp_callin();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 	return 0;
 }
 
<span class="p_header">Index: b/arch/m32r/kernel/smpboot.c</span>
===================================================================
<span class="p_header">--- a/arch/m32r/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/m32r/kernel/smpboot.c</span>
<span class="p_chunk">@@ -432,7 +432,7 @@</span> <span class="p_context"> int __init start_secondary(void *unused)</span>
 	 */
 	local_flush_tlb_all();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 	return 0;
 }
 
<span class="p_header">Index: b/arch/metag/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/metag/kernel/smp.c</span>
<span class="p_header">+++ b/arch/metag/kernel/smp.c</span>
<span class="p_chunk">@@ -396,7 +396,7 @@</span> <span class="p_context"> asmlinkage void secondary_start_kernel(v</span>
 	/*
 	 * OK, it&#39;s off to the idle thread for us
 	 */
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 void __init smp_cpus_done(unsigned int max_cpus)
<span class="p_header">Index: b/arch/mips/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/mips/kernel/smp.c</span>
<span class="p_header">+++ b/arch/mips/kernel/smp.c</span>
<span class="p_chunk">@@ -191,7 +191,7 @@</span> <span class="p_context"> asmlinkage void start_secondary(void)</span>
 	WARN_ON_ONCE(!irqs_disabled());
 	mp_ops-&gt;smp_finish();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 static void stop_this_cpu(void *dummy)
<span class="p_header">Index: b/arch/mn10300/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/mn10300/kernel/smp.c</span>
<span class="p_header">+++ b/arch/mn10300/kernel/smp.c</span>
<span class="p_chunk">@@ -675,7 +675,7 @@</span> <span class="p_context"> int __init start_secondary(void *unused)</span>
 #ifdef CONFIG_GENERIC_CLOCKEVENTS
 	init_clockevents();
 #endif
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 	return 0;
 }
 
<span class="p_header">Index: b/arch/parisc/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/parisc/kernel/smp.c</span>
<span class="p_header">+++ b/arch/parisc/kernel/smp.c</span>
<span class="p_chunk">@@ -305,7 +305,7 @@</span> <span class="p_context"> void __init smp_callin(void)</span>
 
 	local_irq_enable();  /* Interrupts have been off until now */
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 
 	/* NOTREACHED */
 	panic(&quot;smp_callin() AAAAaaaaahhhh....\n&quot;);
<span class="p_header">Index: b/arch/powerpc/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/powerpc/kernel/smp.c</span>
<span class="p_header">+++ b/arch/powerpc/kernel/smp.c</span>
<span class="p_chunk">@@ -727,7 +727,7 @@</span> <span class="p_context"> void start_secondary(void *unused)</span>
 
 	local_irq_enable();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 
 	BUG();
 }
<span class="p_header">Index: b/arch/s390/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/s390/kernel/smp.c</span>
<span class="p_header">+++ b/arch/s390/kernel/smp.c</span>
<span class="p_chunk">@@ -798,7 +798,7 @@</span> <span class="p_context"> static void smp_start_secondary(void *cp</span>
 	set_cpu_online(smp_processor_id(), true);
 	inc_irq_stat(CPU_RST);
 	local_irq_enable();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 /* Upping and downing of CPUs */
<span class="p_header">Index: b/arch/sh/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/sh/kernel/smp.c</span>
<span class="p_header">+++ b/arch/sh/kernel/smp.c</span>
<span class="p_chunk">@@ -203,7 +203,7 @@</span> <span class="p_context"> asmlinkage void start_secondary(void)</span>
 	set_cpu_online(cpu, true);
 	per_cpu(cpu_state, cpu) = CPU_ONLINE;
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 extern struct {
<span class="p_header">Index: b/arch/sparc/kernel/smp_32.c</span>
===================================================================
<span class="p_header">--- a/arch/sparc/kernel/smp_32.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/smp_32.c</span>
<span class="p_chunk">@@ -364,7 +364,7 @@</span> <span class="p_context"> static void sparc_start_secondary(void *</span>
 	local_irq_enable();
 
 	wmb();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 
 	/* We should never reach here! */
 	BUG();
<span class="p_header">Index: b/arch/sparc/kernel/smp_64.c</span>
===================================================================
<span class="p_header">--- a/arch/sparc/kernel/smp_64.c</span>
<span class="p_header">+++ b/arch/sparc/kernel/smp_64.c</span>
<span class="p_chunk">@@ -134,7 +134,7 @@</span> <span class="p_context"> void smp_callin(void)</span>
 
 	local_irq_enable();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 void cpu_panic(void)
<span class="p_header">Index: b/arch/tile/kernel/smpboot.c</span>
===================================================================
<span class="p_header">--- a/arch/tile/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/tile/kernel/smpboot.c</span>
<span class="p_chunk">@@ -208,7 +208,7 @@</span> <span class="p_context"> void online_secondary(void)</span>
 	/* Set up tile-timer clock-event device on this cpu */
 	setup_tile_timer();
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 int __cpu_up(unsigned int cpu, struct task_struct *tidle)
<span class="p_header">Index: b/arch/x86/kernel/smpboot.c</span>
===================================================================
<span class="p_header">--- a/arch/x86/kernel/smpboot.c</span>
<span class="p_header">+++ b/arch/x86/kernel/smpboot.c</span>
<span class="p_chunk">@@ -248,7 +248,7 @@</span> <span class="p_context"> static void notrace start_secondary(void</span>
 	x86_cpuinit.setup_percpu_clockev();
 
 	wmb();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 void __init smp_store_boot_cpu_info(void)
<span class="p_header">Index: b/arch/x86/xen/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/x86/xen/smp.c</span>
<span class="p_header">+++ b/arch/x86/xen/smp.c</span>
<span class="p_chunk">@@ -112,7 +112,7 @@</span> <span class="p_context"> asmlinkage __visible void cpu_bringup_an</span>
 		xen_pvh_secondary_vcpu_init(cpu);
 #endif
 	cpu_bringup();
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 static void xen_smp_intr_free(unsigned int cpu)
<span class="p_header">Index: b/arch/xtensa/kernel/smp.c</span>
===================================================================
<span class="p_header">--- a/arch/xtensa/kernel/smp.c</span>
<span class="p_header">+++ b/arch/xtensa/kernel/smp.c</span>
<span class="p_chunk">@@ -157,7 +157,7 @@</span> <span class="p_context"> void secondary_start_kernel(void)</span>
 
 	complete(&amp;cpu_running);
 
<span class="p_del">-	cpu_startup_entry(CPUHP_ONLINE);</span>
<span class="p_add">+	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);</span>
 }
 
 static void mx_cpu_start(void *p)
<span class="p_header">Index: b/include/linux/cpuhotplug.h</span>
===================================================================
<span class="p_header">--- a/include/linux/cpuhotplug.h</span>
<span class="p_header">+++ b/include/linux/cpuhotplug.h</span>
<span class="p_chunk">@@ -13,6 +13,7 @@</span> <span class="p_context"> enum cpuhp_state {</span>
 	CPUHP_CPU_SET_ACTIVE,
 	CPUHP_KICK_AP_THREAD,
 	CPUHP_BP_ONLINE,
<span class="p_add">+	CPUHP_AP_ONLINE_IDLE,</span>
 	CPUHP_AP_SMPBOOT_THREADS,
 	CPUHP_AP_NOTIFY_ONLINE,
 	CPUHP_AP_ONLINE_DYN,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



