
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[4.4,59/75] sparc64: Fix return from trap window fill crashes. - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [4.4,59/75] sparc64: Fix return from trap window fill crashes.</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 22, 2016, 10:41 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160622223502.967073825@linuxfoundation.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9194129/mbox/"
   >mbox</a>
|
   <a href="/patch/9194129/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9194129/">/patch/9194129/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	911326075A for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 23:12:57 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 844022841F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 23:12:57 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 7878128423; Wed, 22 Jun 2016 23:12:57 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8450D2841F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 22 Jun 2016 23:12:56 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752711AbcFVXMv (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 22 Jun 2016 19:12:51 -0400
Received: from mail.linuxfoundation.org ([140.211.169.12]:46319 &quot;EHLO
	mail.linuxfoundation.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752374AbcFVWl4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 22 Jun 2016 18:41:56 -0400
Received: from localhost (unknown [216.239.55.136])
	by mail.linuxfoundation.org (Postfix) with ESMTPSA id 6CBA398C;
	Wed, 22 Jun 2016 22:41:55 +0000 (UTC)
From: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;,
	stable@vger.kernel.org, Nick Alcock &lt;nix@esperi.org.uk&gt;,
	&quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;
Subject: [PATCH 4.4 59/75] sparc64: Fix return from trap window fill crashes.
Date: Wed, 22 Jun 2016 15:41:21 -0700
Message-Id: &lt;20160622223502.967073825@linuxfoundation.org&gt;
X-Mailer: git-send-email 2.9.0
In-Reply-To: &lt;20160622223500.055133765@linuxfoundation.org&gt;
References: &lt;20160622223500.055133765@linuxfoundation.org&gt;
User-Agent: quilt/0.64
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-15
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=37061">gregkh@linuxfoundation.org</a> - June 22, 2016, 10:41 p.m.</div>
<pre class="content">
4.4-stable review patch.  If anyone has any objections, please let me know.

------------------
<span class="from">
From: &quot;David S. Miller&quot; &lt;davem@davemloft.net&gt;</span>

[ Upstream commit 7cafc0b8bf130f038b0ec2dcdd6a9de6dc59b65a ]

We must handle data access exception as well as memory address unaligned
exceptions from return from trap window fill faults, not just normal
TLB misses.

Otherwise we can get an OOPS that looks like this:

ld-linux.so.2(36808): Kernel bad sw trap 5 [#1]
CPU: 1 PID: 36808 Comm: ld-linux.so.2 Not tainted 4.6.0 #34
task: fff8000303be5c60 ti: fff8000301344000 task.ti: fff8000301344000
TSTATE: 0000004410001601 TPC: 0000000000a1a784 TNPC: 0000000000a1a788 Y: 00000002    Not tainted
TPC: &lt;do_sparc64_fault+0x5c4/0x700&gt;
g0: fff8000024fc8248 g1: 0000000000db04dc g2: 0000000000000000 g3: 0000000000000001
g4: fff8000303be5c60 g5: fff800030e672000 g6: fff8000301344000 g7: 0000000000000001
o0: 0000000000b95ee8 o1: 000000000000012b o2: 0000000000000000 o3: 0000000200b9b358
o4: 0000000000000000 o5: fff8000301344040 sp: fff80003013475c1 ret_pc: 0000000000a1a77c
RPC: &lt;do_sparc64_fault+0x5bc/0x700&gt;
l0: 00000000000007ff l1: 0000000000000000 l2: 000000000000005f l3: 0000000000000000
l4: fff8000301347e98 l5: fff8000024ff3060 l6: 0000000000000000 l7: 0000000000000000
i0: fff8000301347f60 i1: 0000000000102400 i2: 0000000000000000 i3: 0000000000000000
i4: 0000000000000000 i5: 0000000000000000 i6: fff80003013476a1 i7: 0000000000404d4c
I7: &lt;user_rtt_fill_fixup+0x6c/0x7c&gt;
Call Trace:
 [0000000000404d4c] user_rtt_fill_fixup+0x6c/0x7c

The window trap handlers are slightly clever, the trap table entries for them are
composed of two pieces of code.  First comes the code that actually performs
the window fill or spill trap handling, and then there are three instructions at
the end which are for exception processing.

The userland register window fill handler is:

	add	%sp, STACK_BIAS + 0x00, %g1;		\
	ldxa	[%g1 + %g0] ASI, %l0;			\
	mov	0x08, %g2;				\
	mov	0x10, %g3;				\
	ldxa	[%g1 + %g2] ASI, %l1;			\
	mov	0x18, %g5;				\
	ldxa	[%g1 + %g3] ASI, %l2;			\
	ldxa	[%g1 + %g5] ASI, %l3;			\
	add	%g1, 0x20, %g1;				\
	ldxa	[%g1 + %g0] ASI, %l4;			\
	ldxa	[%g1 + %g2] ASI, %l5;			\
	ldxa	[%g1 + %g3] ASI, %l6;			\
	ldxa	[%g1 + %g5] ASI, %l7;			\
	add	%g1, 0x20, %g1;				\
	ldxa	[%g1 + %g0] ASI, %i0;			\
	ldxa	[%g1 + %g2] ASI, %i1;			\
	ldxa	[%g1 + %g3] ASI, %i2;			\
	ldxa	[%g1 + %g5] ASI, %i3;			\
	add	%g1, 0x20, %g1;				\
	ldxa	[%g1 + %g0] ASI, %i4;			\
	ldxa	[%g1 + %g2] ASI, %i5;			\
	ldxa	[%g1 + %g3] ASI, %i6;			\
	ldxa	[%g1 + %g5] ASI, %i7;			\
	restored;					\
	retry; nop; nop; nop; nop;			\
	b,a,pt	%xcc, fill_fixup_dax;			\
	b,a,pt	%xcc, fill_fixup_mna;			\
	b,a,pt	%xcc, fill_fixup;

And the way this works is that if any of those memory accesses
generate an exception, the exception handler can revector to one of
those final three branch instructions depending upon which kind of
exception the memory access took.  In this way, the fault handler
doesn&#39;t have to know if it was a spill or a fill that it&#39;s handling
the fault for.  It just always branches to the last instruction in
the parent trap&#39;s handler.

For example, for a regular fault, the code goes:

winfix_trampoline:
	rdpr	%tpc, %g3
	or	%g3, 0x7c, %g3
	wrpr	%g3, %tnpc
	done

All window trap handlers are 0x80 aligned, so if we &quot;or&quot; 0x7c into the
trap time program counter, we&#39;ll get that final instruction in the
trap handler.

On return from trap, we have to pull the register window in but we do
this by hand instead of just executing a &quot;restore&quot; instruction for
several reasons.  The largest being that from Niagara and onward we
simply don&#39;t have enough levels in the trap stack to fully resolve all
possible exception cases of a window fault when we are already at
trap level 1 (which we enter to get ready to return from the original
trap).

This is executed inline via the FILL_*_RTRAP handlers.  rtrap_64.S&#39;s
code branches directly to these to do the window fill by hand if
necessary.  Now if you look at them, we&#39;ll see at the end:

	    ba,a,pt    %xcc, user_rtt_fill_fixup;
	    ba,a,pt    %xcc, user_rtt_fill_fixup;
	    ba,a,pt    %xcc, user_rtt_fill_fixup;

And oops, all three cases are handled like a fault.

This doesn&#39;t work because each of these trap types (data access
exception, memory address unaligned, and faults) store their auxiliary
info in different registers to pass on to the C handler which does the
real work.

So in the case where the stack was unaligned, the unaligned trap
handler sets up the arg registers one way, and then we branched to
the fault handler which expects them setup another way.

So the FAULT_TYPE_* value ends up basically being garbage, and
randomly would generate the backtrace seen above.

Reported-by: Nick Alcock &lt;nix@esperi.org.uk&gt;
<span class="signed-off-by">Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;</span>
<span class="signed-off-by">Signed-off-by: Greg Kroah-Hartman &lt;gregkh@linuxfoundation.org&gt;</span>
---
 arch/sparc/include/asm/head_64.h |    4 +
 arch/sparc/include/asm/ttable.h  |    8 +--
 arch/sparc/kernel/Makefile       |    1 
 arch/sparc/kernel/rtrap_64.S     |   59 +++--------------------
 arch/sparc/kernel/urtt_fill.S    |   98 +++++++++++++++++++++++++++++++++++++++
 5 files changed, 117 insertions(+), 53 deletions(-)
 create mode 100644 arch/sparc/kernel/urtt_fill.S
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- a/arch/sparc/include/asm/head_64.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/head_64.h</span>
<span class="p_chunk">@@ -15,6 +15,10 @@</span> <span class="p_context"></span>
 
 #define	PTREGS_OFF	(STACK_BIAS + STACKFRAME_SZ)
 
<span class="p_add">+#define	RTRAP_PSTATE		(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV|PSTATE_IE)</span>
<span class="p_add">+#define	RTRAP_PSTATE_IRQOFF	(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV)</span>
<span class="p_add">+#define RTRAP_PSTATE_AG_IRQOFF	(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV|PSTATE_AG)</span>
<span class="p_add">+</span>
 #define __CHEETAH_ID	0x003e0014
 #define __JALAPENO_ID	0x003e0016
 #define __SERRANO_ID	0x003e0022
<span class="p_header">--- a/arch/sparc/include/asm/ttable.h</span>
<span class="p_header">+++ b/arch/sparc/include/asm/ttable.h</span>
<span class="p_chunk">@@ -589,8 +589,8 @@</span> <span class="p_context"> user_rtt_fill_64bit:					\</span>
 	 restored;					\
 	nop; nop; nop; nop; nop; nop;			\
 	nop; nop; nop; nop; nop;			\
<span class="p_del">-	ba,a,pt	%xcc, user_rtt_fill_fixup;		\</span>
<span class="p_del">-	ba,a,pt	%xcc, user_rtt_fill_fixup;		\</span>
<span class="p_add">+	ba,a,pt	%xcc, user_rtt_fill_fixup_dax;		\</span>
<span class="p_add">+	ba,a,pt	%xcc, user_rtt_fill_fixup_mna;		\</span>
 	ba,a,pt	%xcc, user_rtt_fill_fixup;
 
 
<span class="p_chunk">@@ -652,8 +652,8 @@</span> <span class="p_context"> user_rtt_fill_32bit:					\</span>
 	 restored;					\
 	nop; nop; nop; nop; nop;			\
 	nop; nop; nop;					\
<span class="p_del">-	ba,a,pt	%xcc, user_rtt_fill_fixup;		\</span>
<span class="p_del">-	ba,a,pt	%xcc, user_rtt_fill_fixup;		\</span>
<span class="p_add">+	ba,a,pt	%xcc, user_rtt_fill_fixup_dax;		\</span>
<span class="p_add">+	ba,a,pt	%xcc, user_rtt_fill_fixup_mna;		\</span>
 	ba,a,pt	%xcc, user_rtt_fill_fixup;
 
 
<span class="p_header">--- a/arch/sparc/kernel/Makefile</span>
<span class="p_header">+++ b/arch/sparc/kernel/Makefile</span>
<span class="p_chunk">@@ -21,6 +21,7 @@</span> <span class="p_context"> CFLAGS_REMOVE_perf_event.o := -pg</span>
 CFLAGS_REMOVE_pcr.o := -pg
 endif
 
<span class="p_add">+obj-$(CONFIG_SPARC64)   += urtt_fill.o</span>
 obj-$(CONFIG_SPARC32)   += entry.o wof.o wuf.o
 obj-$(CONFIG_SPARC32)   += etrap_32.o
 obj-$(CONFIG_SPARC32)   += rtrap_32.o
<span class="p_header">--- a/arch/sparc/kernel/rtrap_64.S</span>
<span class="p_header">+++ b/arch/sparc/kernel/rtrap_64.S</span>
<span class="p_chunk">@@ -14,10 +14,6 @@</span> <span class="p_context"></span>
 #include &lt;asm/visasm.h&gt;
 #include &lt;asm/processor.h&gt;
 
<span class="p_del">-#define		RTRAP_PSTATE		(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV|PSTATE_IE)</span>
<span class="p_del">-#define		RTRAP_PSTATE_IRQOFF	(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV)</span>
<span class="p_del">-#define		RTRAP_PSTATE_AG_IRQOFF	(PSTATE_TSO|PSTATE_PEF|PSTATE_PRIV|PSTATE_AG)</span>
<span class="p_del">-</span>
 #ifdef CONFIG_CONTEXT_TRACKING
 # define SCHEDULE_USER schedule_user
 #else
<span class="p_chunk">@@ -242,52 +238,17 @@</span> <span class="p_context"> rt_continue:	ldx			[%sp + PTREGS_OFF + P</span>
 		 wrpr			%g1, %cwp
 		ba,a,pt			%xcc, user_rtt_fill_64bit
 
<span class="p_del">-user_rtt_fill_fixup:</span>
<span class="p_del">-		rdpr	%cwp, %g1</span>
<span class="p_del">-		add	%g1, 1, %g1</span>
<span class="p_del">-		wrpr	%g1, 0x0, %cwp</span>
<span class="p_del">-</span>
<span class="p_del">-		rdpr	%wstate, %g2</span>
<span class="p_del">-		sll	%g2, 3, %g2</span>
<span class="p_del">-		wrpr	%g2, 0x0, %wstate</span>
<span class="p_del">-</span>
<span class="p_del">-		/* We know %canrestore and %otherwin are both zero.  */</span>
<span class="p_del">-</span>
<span class="p_del">-		sethi	%hi(sparc64_kern_pri_context), %g2</span>
<span class="p_del">-		ldx	[%g2 + %lo(sparc64_kern_pri_context)], %g2</span>
<span class="p_del">-		mov	PRIMARY_CONTEXT, %g1</span>
<span class="p_del">-</span>
<span class="p_del">-661:		stxa	%g2, [%g1] ASI_DMMU</span>
<span class="p_del">-		.section .sun4v_1insn_patch, &quot;ax&quot;</span>
<span class="p_del">-		.word	661b</span>
<span class="p_del">-		stxa	%g2, [%g1] ASI_MMU</span>
<span class="p_del">-		.previous</span>
<span class="p_del">-</span>
<span class="p_del">-		sethi	%hi(KERNBASE), %g1</span>
<span class="p_del">-		flush	%g1</span>
<span class="p_add">+user_rtt_fill_fixup_dax:</span>
<span class="p_add">+		ba,pt	%xcc, user_rtt_fill_fixup_common</span>
<span class="p_add">+		 mov	1, %g3</span>
<span class="p_add">+</span>
<span class="p_add">+user_rtt_fill_fixup_mna:</span>
<span class="p_add">+		ba,pt	%xcc, user_rtt_fill_fixup_common</span>
<span class="p_add">+		 mov	2, %g3</span>
 
<span class="p_del">-		or	%g4, FAULT_CODE_WINFIXUP, %g4</span>
<span class="p_del">-		stb	%g4, [%g6 + TI_FAULT_CODE]</span>
<span class="p_del">-		stx	%g5, [%g6 + TI_FAULT_ADDR]</span>
<span class="p_del">-</span>
<span class="p_del">-		mov	%g6, %l1</span>
<span class="p_del">-		wrpr	%g0, 0x0, %tl</span>
<span class="p_del">-</span>
<span class="p_del">-661:		nop</span>
<span class="p_del">-		.section		.sun4v_1insn_patch, &quot;ax&quot;</span>
<span class="p_del">-		.word			661b</span>
<span class="p_del">-		SET_GL(0)</span>
<span class="p_del">-		.previous</span>
<span class="p_del">-</span>
<span class="p_del">-		wrpr	%g0, RTRAP_PSTATE, %pstate</span>
<span class="p_del">-</span>
<span class="p_del">-		mov	%l1, %g6</span>
<span class="p_del">-		ldx	[%g6 + TI_TASK], %g4</span>
<span class="p_del">-		LOAD_PER_CPU_BASE(%g5, %g6, %g1, %g2, %g3)</span>
<span class="p_del">-		call	do_sparc64_fault</span>
<span class="p_del">-		 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_del">-		ba,pt	%xcc, rtrap</span>
<span class="p_del">-		 nop</span>
<span class="p_add">+user_rtt_fill_fixup:</span>
<span class="p_add">+		ba,pt	%xcc, user_rtt_fill_fixup_common</span>
<span class="p_add">+		 clr	%g3</span>
 
 user_rtt_pre_restore:
 		add			%g1, 1, %g1
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/sparc/kernel/urtt_fill.S</span>
<span class="p_chunk">@@ -0,0 +1,98 @@</span> <span class="p_context"></span>
<span class="p_add">+#include &lt;asm/thread_info.h&gt;</span>
<span class="p_add">+#include &lt;asm/trap_block.h&gt;</span>
<span class="p_add">+#include &lt;asm/spitfire.h&gt;</span>
<span class="p_add">+#include &lt;asm/ptrace.h&gt;</span>
<span class="p_add">+#include &lt;asm/head.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+		.text</span>
<span class="p_add">+		.align	8</span>
<span class="p_add">+		.globl	user_rtt_fill_fixup_common</span>
<span class="p_add">+user_rtt_fill_fixup_common:</span>
<span class="p_add">+		rdpr	%cwp, %g1</span>
<span class="p_add">+		add	%g1, 1, %g1</span>
<span class="p_add">+		wrpr	%g1, 0x0, %cwp</span>
<span class="p_add">+</span>
<span class="p_add">+		rdpr	%wstate, %g2</span>
<span class="p_add">+		sll	%g2, 3, %g2</span>
<span class="p_add">+		wrpr	%g2, 0x0, %wstate</span>
<span class="p_add">+</span>
<span class="p_add">+		/* We know %canrestore and %otherwin are both zero.  */</span>
<span class="p_add">+</span>
<span class="p_add">+		sethi	%hi(sparc64_kern_pri_context), %g2</span>
<span class="p_add">+		ldx	[%g2 + %lo(sparc64_kern_pri_context)], %g2</span>
<span class="p_add">+		mov	PRIMARY_CONTEXT, %g1</span>
<span class="p_add">+</span>
<span class="p_add">+661:		stxa	%g2, [%g1] ASI_DMMU</span>
<span class="p_add">+		.section .sun4v_1insn_patch, &quot;ax&quot;</span>
<span class="p_add">+		.word	661b</span>
<span class="p_add">+		stxa	%g2, [%g1] ASI_MMU</span>
<span class="p_add">+		.previous</span>
<span class="p_add">+</span>
<span class="p_add">+		sethi	%hi(KERNBASE), %g1</span>
<span class="p_add">+		flush	%g1</span>
<span class="p_add">+</span>
<span class="p_add">+		mov	%g4, %l4</span>
<span class="p_add">+		mov	%g5, %l5</span>
<span class="p_add">+		brnz,pn	%g3, 1f</span>
<span class="p_add">+		 mov	%g3, %l3</span>
<span class="p_add">+</span>
<span class="p_add">+		or	%g4, FAULT_CODE_WINFIXUP, %g4</span>
<span class="p_add">+		stb	%g4, [%g6 + TI_FAULT_CODE]</span>
<span class="p_add">+		stx	%g5, [%g6 + TI_FAULT_ADDR]</span>
<span class="p_add">+1:</span>
<span class="p_add">+		mov	%g6, %l1</span>
<span class="p_add">+		wrpr	%g0, 0x0, %tl</span>
<span class="p_add">+</span>
<span class="p_add">+661:		nop</span>
<span class="p_add">+		.section		.sun4v_1insn_patch, &quot;ax&quot;</span>
<span class="p_add">+		.word			661b</span>
<span class="p_add">+		SET_GL(0)</span>
<span class="p_add">+		.previous</span>
<span class="p_add">+</span>
<span class="p_add">+		wrpr	%g0, RTRAP_PSTATE, %pstate</span>
<span class="p_add">+</span>
<span class="p_add">+		mov	%l1, %g6</span>
<span class="p_add">+		ldx	[%g6 + TI_TASK], %g4</span>
<span class="p_add">+		LOAD_PER_CPU_BASE(%g5, %g6, %g1, %g2, %g3)</span>
<span class="p_add">+</span>
<span class="p_add">+		brnz,pn	%l3, 1f</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+</span>
<span class="p_add">+		call	do_sparc64_fault</span>
<span class="p_add">+		 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_add">+		ba,pt	%xcc, rtrap</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+</span>
<span class="p_add">+1:		cmp	%g3, 2</span>
<span class="p_add">+		bne,pn	%xcc, 2f</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+</span>
<span class="p_add">+		sethi	%hi(tlb_type), %g1</span>
<span class="p_add">+		lduw	[%g1 + %lo(tlb_type)], %g1</span>
<span class="p_add">+		cmp	%g1, 3</span>
<span class="p_add">+		bne,pt	%icc, 1f</span>
<span class="p_add">+		 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_add">+		mov	%l4, %o2</span>
<span class="p_add">+		call	sun4v_do_mna</span>
<span class="p_add">+		 mov	%l5, %o1</span>
<span class="p_add">+		ba,a,pt	%xcc, rtrap</span>
<span class="p_add">+1:		mov	%l4, %o1</span>
<span class="p_add">+		mov	%l5, %o2</span>
<span class="p_add">+		call	mem_address_unaligned</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+		ba,a,pt	%xcc, rtrap</span>
<span class="p_add">+</span>
<span class="p_add">+2:		sethi	%hi(tlb_type), %g1</span>
<span class="p_add">+		mov	%l4, %o1</span>
<span class="p_add">+		lduw	[%g1 + %lo(tlb_type)], %g1</span>
<span class="p_add">+		mov	%l5, %o2</span>
<span class="p_add">+		cmp	%g1, 3</span>
<span class="p_add">+		bne,pt	%icc, 1f</span>
<span class="p_add">+		 add	%sp, PTREGS_OFF, %o0</span>
<span class="p_add">+		call	sun4v_data_access_exception</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+		ba,a,pt	%xcc, rtrap</span>
<span class="p_add">+</span>
<span class="p_add">+1:		call	spitfire_data_access_exception</span>
<span class="p_add">+		 nop</span>
<span class="p_add">+		ba,a,pt	%xcc, rtrap</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



