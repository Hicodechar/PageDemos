
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[5/6] MIPS: tlbex: avoid placing software PTE bits in Entry* PFN fields - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [5/6] MIPS: tlbex: avoid placing software PTE bits in Entry* PFN fields</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=86321">Paul Burton</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 22, 2015, 6:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1442947373-13345-6-git-send-email-paul.burton@imgtec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7243831/mbox/"
   >mbox</a>
|
   <a href="/patch/7243831/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7243831/">/patch/7243831/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 637F3BEEC1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Sep 2015 18:46:12 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 91764206A5
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Sep 2015 18:46:11 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 96B9220645
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 22 Sep 2015 18:46:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1759468AbbIVSpB (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 22 Sep 2015 14:45:01 -0400
Received: from mailapp01.imgtec.com ([195.59.15.196]:59889 &quot;EHLO
	mailapp01.imgtec.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1759213AbbIVSox (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 22 Sep 2015 14:44:53 -0400
Received: from KLMAIL01.kl.imgtec.org (unknown [192.168.5.35])
	by Websense Email Security Gateway with ESMTPS id 78D25DC84D70A;
	Tue, 22 Sep 2015 19:44:48 +0100 (IST)
Received: from LEMAIL01.le.imgtec.org (192.168.152.62) by
	KLMAIL01.kl.imgtec.org (192.168.5.35) with Microsoft SMTP Server
	(TLS) id 14.3.195.1; Tue, 22 Sep 2015 19:44:52 +0100
Received: from localhost (192.168.159.189) by LEMAIL01.le.imgtec.org
	(192.168.152.62) with Microsoft SMTP Server (TLS) id 14.3.210.2;
	Tue, 22 Sep 2015 19:44:48 +0100
From: Paul Burton &lt;paul.burton@imgtec.com&gt;
To: &lt;linux-mips@linux-mips.org&gt;
CC: Paul Burton &lt;paul.burton@imgtec.com&gt;,
	&quot;Steven J. Hill&quot; &lt;Steven.Hill@imgtec.com&gt;,
	Leonid Yegoshin &lt;Leonid.Yegoshin@imgtec.com&gt;,
	&quot;Paul Gortmaker&quot; &lt;paul.gortmaker@windriver.com&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, James Hogan &lt;james.hogan@imgtec.com&gt;,
	Markos Chandras &lt;markos.chandras@imgtec.com&gt;,
	Ralf Baechle &lt;ralf@linux-mips.org&gt;
Subject: [PATCH 5/6] MIPS: tlbex: avoid placing software PTE bits in Entry*
	PFN fields
Date: Tue, 22 Sep 2015 11:42:52 -0700
Message-ID: &lt;1442947373-13345-6-git-send-email-paul.burton@imgtec.com&gt;
X-Mailer: git-send-email 2.5.3
In-Reply-To: &lt;1442947373-13345-1-git-send-email-paul.burton@imgtec.com&gt;
References: &lt;1442947373-13345-1-git-send-email-paul.burton@imgtec.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [192.168.159.189]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=86321">Paul Burton</a> - Sept. 22, 2015, 6:42 p.m.</div>
<pre class="content">
Commit 748e787eb6de (&quot;MIPS: Optimize TLB refill for RI/XI
configurations.&quot;) stopped explicitly clearing the bits used by software
in PTEs by making use of a rotate instruction that rotates them into the
fill bits of the Entry{Lo,Hi} register. This can only work if there are
actually enough fill bits in the register to cover the software
maintained bits, otherwise we end up writing those bits into the upper
bits of the PFN or PFNX field of the Entry{Lo,Hi} register.

Fix this by detecting the number of fill bits present in the
Entry{Lo,Hi} registers &amp; explicitly clearing the software bits where
necessary.
<span class="signed-off-by">
Signed-off-by: Paul Burton &lt;paul.burton@imgtec.com&gt;</span>
---

 arch/mips/mm/tlbex.c | 47 +++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 45 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/mips/mm/tlbex.c b/arch/mips/mm/tlbex.c</span>
<span class="p_header">index bc829fc..6b7cc20 100644</span>
<span class="p_header">--- a/arch/mips/mm/tlbex.c</span>
<span class="p_header">+++ b/arch/mips/mm/tlbex.c</span>
<span class="p_chunk">@@ -311,6 +311,7 @@</span> <span class="p_context"> static struct uasm_label labels[128];</span>
 static struct uasm_reloc relocs[128];
 
 static int check_for_high_segbits;
<span class="p_add">+static bool fill_includes_sw_bits;</span>
 
 static unsigned int kscratch_used_mask;
 
<span class="p_chunk">@@ -630,8 +631,14 @@</span> <span class="p_context"> static void build_tlb_write_entry(u32 **p, struct uasm_label **l,</span>
 static __maybe_unused void build_convert_pte_to_entrylo(u32 **p,
 							unsigned int reg)
 {
<span class="p_del">-	if (cpu_has_rixi) {</span>
<span class="p_del">-		UASM_i_ROTR(p, reg, reg, ilog2(_PAGE_GLOBAL));</span>
<span class="p_add">+	if (cpu_has_rixi &amp;&amp; _PAGE_NO_EXEC) {</span>
<span class="p_add">+		if (fill_includes_sw_bits) {</span>
<span class="p_add">+			UASM_i_ROTR(p, reg, reg, ilog2(_PAGE_GLOBAL));</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			UASM_i_SRL(p, reg, reg, ilog2(_PAGE_NO_EXEC));</span>
<span class="p_add">+			UASM_i_ROTR(p, reg, reg,</span>
<span class="p_add">+				    ilog2(_PAGE_GLOBAL) - ilog2(_PAGE_NO_EXEC));</span>
<span class="p_add">+		}</span>
 	} else {
 #ifdef CONFIG_PHYS_ADDR_T_64BIT
 		uasm_i_dsrl_safe(p, reg, reg, ilog2(_PAGE_GLOBAL));
<span class="p_chunk">@@ -2338,6 +2345,41 @@</span> <span class="p_context"> static void config_xpa_params(void)</span>
 #endif
 }
 
<span class="p_add">+static void check_pabits(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long entry;</span>
<span class="p_add">+	unsigned pabits, fillbits;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!cpu_has_rixi || !_PAGE_NO_EXEC) {</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We&#39;ll only be making use of the fact that we can rotate bits</span>
<span class="p_add">+		 * into the fill if the CPU supports RIXI, so don&#39;t bother</span>
<span class="p_add">+		 * probing this for CPUs which don&#39;t.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	write_c0_entrylo0(~0ul);</span>
<span class="p_add">+	back_to_back_c0_hazard();</span>
<span class="p_add">+	entry = read_c0_entrylo0();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* clear all non-PFN bits */</span>
<span class="p_add">+	entry &amp;= ~((1 &lt;&lt; MIPS_ENTRYLO_PFN_SHIFT) - 1);</span>
<span class="p_add">+	entry &amp;= ~(MIPS_ENTRYLO_RI | MIPS_ENTRYLO_XI);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* find a lower bound on PABITS, and upper bound on fill bits */</span>
<span class="p_add">+	pabits = fls_long(entry) + 6;</span>
<span class="p_add">+	fillbits = max_t(int, (int)BITS_PER_LONG - pabits, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* minus the RI &amp; XI bits */</span>
<span class="p_add">+	fillbits -= min_t(unsigned, fillbits, 2);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (fillbits &gt;= ilog2(_PAGE_NO_EXEC))</span>
<span class="p_add">+		fill_includes_sw_bits = true;</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_debug(&quot;Entry* registers contain %u fill bits\n&quot;, fillbits);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void build_tlb_refill_handler(void)
 {
 	/*
<span class="p_chunk">@@ -2348,6 +2390,7 @@</span> <span class="p_context"> void build_tlb_refill_handler(void)</span>
 	static int run_once = 0;
 
 	output_pgtable_bits_defines();
<span class="p_add">+	check_pabits();</span>
 
 #ifdef CONFIG_64BIT
 	check_for_high_segbits = current_cpu_data.vmbits &gt; (PGDIR_SHIFT + PGD_ORDER + PAGE_SHIFT - 3);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



