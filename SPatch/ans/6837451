
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v4,02/10] mm/hugetlb: add region_del() to delete a specific range of entries - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v4,02/10] mm/hugetlb: add region_del() to delete a specific range of entries</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 21, 2015, 6:09 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1437502184-14269-3-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6837451/mbox/"
   >mbox</a>
|
   <a href="/patch/6837451/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6837451/">/patch/6837451/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 34E329F358
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:14 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 170A6206BE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:12 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id C48C220690
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 21 Jul 2015 18:11:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933590AbbGUSK5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 21 Jul 2015 14:10:57 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:47537 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932970AbbGUSKz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 21 Jul 2015 14:10:55 -0400
Received: from userv0022.oracle.com (userv0022.oracle.com [156.151.31.74])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2) with
	ESMTP id t6LIA3UN006423
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 21 Jul 2015 18:10:03 GMT
Received: from userv0121.oracle.com (userv0121.oracle.com [156.151.31.72])
	by userv0022.oracle.com (8.13.8/8.13.8) with ESMTP id t6LIA2lK003451
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 21 Jul 2015 18:10:02 GMT
Received: from abhmp0017.oracle.com (abhmp0017.oracle.com [141.146.116.23])
	by userv0121.oracle.com (8.13.8/8.13.8) with ESMTP id
	t6LIA2MS003300; Tue, 21 Jul 2015 18:10:02 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 21 Jul 2015 11:10:01 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	linux-api@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Christoph Hellwig &lt;hch@infradead.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, Michal Hocko &lt;mhocko@suse.cz&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v4 02/10] mm/hugetlb: add region_del() to delete a specific
	range of entries
Date: Tue, 21 Jul 2015 11:09:36 -0700
Message-Id: &lt;1437502184-14269-3-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.1.0
In-Reply-To: &lt;1437502184-14269-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1437502184-14269-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: userv0022.oracle.com [156.151.31.74]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-8.1 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - July 21, 2015, 6:09 p.m.</div>
<pre class="content">
fallocate hole punch will want to remove a specific range of pages.
The existing region_truncate() routine deletes all region/reserve
map entries after a specified offset.  region_del() will provide
this same functionality if the end of region is specified as LONG_MAX.
Hence, region_del() can replace region_truncate().

Unlike region_truncate(), region_del() can return an error in the
rare case where it can not allocate memory for a region descriptor.
This ONLY happens in the case where an existing region must be split.
Current callers passing LONG_MAX as end of range will never experience
this error and do not need to deal with error handling.  Future
callers of region_del() (such as fallocate hole punch) will need to
handle this error.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 mm/hugetlb.c | 122 +++++++++++++++++++++++++++++++++++++++++------------------
 1 file changed, 85 insertions(+), 37 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index c3923a1..a573396 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -462,43 +462,90 @@</span> <span class="p_context"> static void region_abort(struct resv_map *resv, long f, long t)</span>
 }
 
 /*
<span class="p_del">- * Truncate the reserve map at index &#39;end&#39;.  Modify/truncate any</span>
<span class="p_del">- * region which contains end.  Delete any regions past end.</span>
<span class="p_del">- * Return the number of huge pages removed from the map.</span>
<span class="p_add">+ * Delete the specified range [f, t) from the reserve map.  If the</span>
<span class="p_add">+ * t parameter is LONG_MAX, this indicates that ALL regions after f</span>
<span class="p_add">+ * should be deleted.  Locate the regions which intersect [f, t)</span>
<span class="p_add">+ * and either trim, delete or split the existing regions.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Returns the number of huge pages deleted from the reserve map.</span>
<span class="p_add">+ * In the normal case, the return value is zero or more.  In the</span>
<span class="p_add">+ * case where a region must be split, a new region descriptor must</span>
<span class="p_add">+ * be allocated.  If the allocation fails, -ENOMEM will be returned.</span>
<span class="p_add">+ * NOTE: If the parameter t == LONG_MAX, then we will never split</span>
<span class="p_add">+ * a region and possibly return -ENOMEM.  Callers specifying</span>
<span class="p_add">+ * t == LONG_MAX do not need to check for -ENOMEM error.</span>
  */
<span class="p_del">-static long region_truncate(struct resv_map *resv, long end)</span>
<span class="p_add">+static long region_del(struct resv_map *resv, long f, long t)</span>
 {
 	struct list_head *head = &amp;resv-&gt;regions;
 	struct file_region *rg, *trg;
<span class="p_del">-	long chg = 0;</span>
<span class="p_add">+	struct file_region *nrg = NULL;</span>
<span class="p_add">+	long del = 0;</span>
 
<span class="p_add">+retry:</span>
 	spin_lock(&amp;resv-&gt;lock);
<span class="p_del">-	/* Locate the region we are either in or before. */</span>
<span class="p_del">-	list_for_each_entry(rg, head, link)</span>
<span class="p_del">-		if (end &lt;= rg-&gt;to)</span>
<span class="p_add">+	list_for_each_entry_safe(rg, trg, head, link) {</span>
<span class="p_add">+		if (rg-&gt;to &lt;= f)</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (rg-&gt;from &gt;= t)</span>
 			break;
<span class="p_del">-	if (&amp;rg-&gt;link == head)</span>
<span class="p_del">-		goto out;</span>
 
<span class="p_del">-	/* If we are in the middle of a region then adjust it. */</span>
<span class="p_del">-	if (end &gt; rg-&gt;from) {</span>
<span class="p_del">-		chg = rg-&gt;to - end;</span>
<span class="p_del">-		rg-&gt;to = end;</span>
<span class="p_del">-		rg = list_entry(rg-&gt;link.next, typeof(*rg), link);</span>
<span class="p_del">-	}</span>
<span class="p_add">+		if (f &gt; rg-&gt;from &amp;&amp; t &lt; rg-&gt;to) { /* Must split region */</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Check for an entry in the cache before dropping</span>
<span class="p_add">+			 * lock and attempting allocation.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			if (!nrg &amp;&amp;</span>
<span class="p_add">+			    resv-&gt;rgn_cache_count &gt; resv-&gt;adds_in_progress) {</span>
<span class="p_add">+				nrg = list_first_entry(&amp;resv-&gt;rgn_cache,</span>
<span class="p_add">+							struct file_region,</span>
<span class="p_add">+							link);</span>
<span class="p_add">+				list_del(&amp;nrg-&gt;link);</span>
<span class="p_add">+				resv-&gt;rgn_cache_count--;</span>
<span class="p_add">+			}</span>
 
<span class="p_del">-	/* Drop any remaining regions. */</span>
<span class="p_del">-	list_for_each_entry_safe(rg, trg, rg-&gt;link.prev, link) {</span>
<span class="p_del">-		if (&amp;rg-&gt;link == head)</span>
<span class="p_add">+			if (!nrg) {</span>
<span class="p_add">+				spin_unlock(&amp;resv-&gt;lock);</span>
<span class="p_add">+				nrg = kmalloc(sizeof(*nrg), GFP_KERNEL);</span>
<span class="p_add">+				if (!nrg)</span>
<span class="p_add">+					return -ENOMEM;</span>
<span class="p_add">+				goto retry;</span>
<span class="p_add">+			}</span>
<span class="p_add">+</span>
<span class="p_add">+			del += t - f;</span>
<span class="p_add">+</span>
<span class="p_add">+			/* New entry for end of split region */</span>
<span class="p_add">+			nrg-&gt;from = t;</span>
<span class="p_add">+			nrg-&gt;to = rg-&gt;to;</span>
<span class="p_add">+			INIT_LIST_HEAD(&amp;nrg-&gt;link);</span>
<span class="p_add">+</span>
<span class="p_add">+			/* Original entry is trimmed */</span>
<span class="p_add">+			rg-&gt;to = f;</span>
<span class="p_add">+</span>
<span class="p_add">+			list_add(&amp;nrg-&gt;link, &amp;rg-&gt;link);</span>
<span class="p_add">+			nrg = NULL;</span>
 			break;
<span class="p_del">-		chg += rg-&gt;to - rg-&gt;from;</span>
<span class="p_del">-		list_del(&amp;rg-&gt;link);</span>
<span class="p_del">-		kfree(rg);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (f &lt;= rg-&gt;from &amp;&amp; t &gt;= rg-&gt;to) { /* Remove entire region */</span>
<span class="p_add">+			del += rg-&gt;to - rg-&gt;from;</span>
<span class="p_add">+			list_del(&amp;rg-&gt;link);</span>
<span class="p_add">+			kfree(rg);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (f &lt;= rg-&gt;from) {	/* Trim beginning of region */</span>
<span class="p_add">+			del += t - rg-&gt;from;</span>
<span class="p_add">+			rg-&gt;from = t;</span>
<span class="p_add">+		} else {		/* Trim end of region */</span>
<span class="p_add">+			del += rg-&gt;to - f;</span>
<span class="p_add">+			rg-&gt;to = f;</span>
<span class="p_add">+		}</span>
 	}
 
<span class="p_del">-out:</span>
 	spin_unlock(&amp;resv-&gt;lock);
<span class="p_del">-	return chg;</span>
<span class="p_add">+	kfree(nrg);</span>
<span class="p_add">+	return del;</span>
 }
 
 /*
<span class="p_chunk">@@ -649,7 +696,7 @@</span> <span class="p_context"> void resv_map_release(struct kref *ref)</span>
 	struct file_region *rg, *trg;
 
 	/* Clear out any active regions before we release the map. */
<span class="p_del">-	region_truncate(resv_map, 0);</span>
<span class="p_add">+	region_del(resv_map, 0, LONG_MAX);</span>
 
 	/* ... and any entries left in the cache */
 	list_for_each_entry_safe(rg, trg, head, link) {
<span class="p_chunk">@@ -1574,7 +1621,7 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
 
 
 /*
<span class="p_del">- * vma_needs_reservation, vma_commit_reservation and vma_abort_reservation</span>
<span class="p_add">+ * vma_needs_reservation, vma_commit_reservation and vma_end_reservation</span>
  * are used by the huge page allocation routines to manage reservations.
  *
  * vma_needs_reservation is called to determine if the huge page at addr
<span class="p_chunk">@@ -1582,8 +1629,9 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
  * needed, the value 1 is returned.  The caller is then responsible for
  * managing the global reservation and subpool usage counts.  After
  * the huge page has been allocated, vma_commit_reservation is called
<span class="p_del">- * to add the page to the reservation map.  If the reservation must be</span>
<span class="p_del">- * aborted instead of committed, vma_abort_reservation is called.</span>
<span class="p_add">+ * to add the page to the reservation map.  If the page allocation fails,</span>
<span class="p_add">+ * the reservation must be ended instead of committed.  vma_end_reservation</span>
<span class="p_add">+ * is called in such cases.</span>
  *
  * In the normal case, vma_commit_reservation returns the same value
  * as the preceding vma_needs_reservation call.  The only time this
<span class="p_chunk">@@ -1594,7 +1642,7 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
 enum vma_resv_mode {
 	VMA_NEEDS_RESV,
 	VMA_COMMIT_RESV,
<span class="p_del">-	VMA_ABORT_RESV,</span>
<span class="p_add">+	VMA_END_RESV,</span>
 };
 static long __vma_reservation_common(struct hstate *h,
 				struct vm_area_struct *vma, unsigned long addr,
<span class="p_chunk">@@ -1616,7 +1664,7 @@</span> <span class="p_context"> static long __vma_reservation_common(struct hstate *h,</span>
 	case VMA_COMMIT_RESV:
 		ret = region_add(resv, idx, idx + 1);
 		break;
<span class="p_del">-	case VMA_ABORT_RESV:</span>
<span class="p_add">+	case VMA_END_RESV:</span>
 		region_abort(resv, idx, idx + 1);
 		ret = 0;
 		break;
<span class="p_chunk">@@ -1642,10 +1690,10 @@</span> <span class="p_context"> static long vma_commit_reservation(struct hstate *h,</span>
 	return __vma_reservation_common(h, vma, addr, VMA_COMMIT_RESV);
 }
 
<span class="p_del">-static void vma_abort_reservation(struct hstate *h,</span>
<span class="p_add">+static void vma_end_reservation(struct hstate *h,</span>
 			struct vm_area_struct *vma, unsigned long addr)
 {
<span class="p_del">-	(void)__vma_reservation_common(h, vma, addr, VMA_ABORT_RESV);</span>
<span class="p_add">+	(void)__vma_reservation_common(h, vma, addr, VMA_END_RESV);</span>
 }
 
 static struct page *alloc_huge_page(struct vm_area_struct *vma,
<span class="p_chunk">@@ -1672,7 +1720,7 @@</span> <span class="p_context"> static struct page *alloc_huge_page(struct vm_area_struct *vma,</span>
 		return ERR_PTR(-ENOMEM);
 	if (chg || avoid_reserve)
 		if (hugepage_subpool_get_pages(spool, 1) &lt; 0) {
<span class="p_del">-			vma_abort_reservation(h, vma, addr);</span>
<span class="p_add">+			vma_end_reservation(h, vma, addr);</span>
 			return ERR_PTR(-ENOSPC);
 		}
 
<span class="p_chunk">@@ -1720,7 +1768,7 @@</span> <span class="p_context"> out_uncharge_cgroup:</span>
 out_subpool_put:
 	if (chg || avoid_reserve)
 		hugepage_subpool_put_pages(spool, 1);
<span class="p_del">-	vma_abort_reservation(h, vma, addr);</span>
<span class="p_add">+	vma_end_reservation(h, vma, addr);</span>
 	return ERR_PTR(-ENOSPC);
 }
 
<span class="p_chunk">@@ -3367,7 +3415,7 @@</span> <span class="p_context"> retry:</span>
 			goto backout_unlocked;
 		}
 		/* Just decrements count, does not deallocate */
<span class="p_del">-		vma_abort_reservation(h, vma, address);</span>
<span class="p_add">+		vma_end_reservation(h, vma, address);</span>
 	}
 
 	ptl = huge_pte_lockptr(h, mm, ptep);
<span class="p_chunk">@@ -3516,7 +3564,7 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 			goto out_mutex;
 		}
 		/* Just decrements count, does not deallocate */
<span class="p_del">-		vma_abort_reservation(h, vma, address);</span>
<span class="p_add">+		vma_end_reservation(h, vma, address);</span>
 
 		if (!(vma-&gt;vm_flags &amp; VM_MAYSHARE))
 			pagecache_page = hugetlbfs_pagecache_page(h,
<span class="p_chunk">@@ -3872,7 +3920,7 @@</span> <span class="p_context"> void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)</span>
 	long gbl_reserve;
 
 	if (resv_map)
<span class="p_del">-		chg = region_truncate(resv_map, offset);</span>
<span class="p_add">+		chg = region_del(resv_map, offset, LONG_MAX);</span>
 	spin_lock(&amp;inode-&gt;i_lock);
 	inode-&gt;i_blocks -= (blocks_per_huge_page(h) * freed);
 	spin_unlock(&amp;inode-&gt;i_lock);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



