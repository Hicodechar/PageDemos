
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V3] selftest/vm: Move 128TB mmap boundary test to generic directory - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V3] selftest/vm: Move 128TB mmap boundary test to generic directory</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 23, 2017, 4:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10073089/mbox/"
   >mbox</a>
|
   <a href="/patch/10073089/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10073089/">/patch/10073089/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B03AA6056E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 16:53:23 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 955832A034
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 16:53:23 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 88F702A03F; Thu, 23 Nov 2017 16:53:23 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8D2322A034
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 23 Nov 2017 16:53:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753023AbdKWQwm (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 23 Nov 2017 11:52:42 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:53974 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751982AbdKWQwl (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 23 Nov 2017 11:52:41 -0500
Received: from pps.filterd (m0098409.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.21/8.16.0.21) with SMTP id
	vANGnmOw112031
	for &lt;linux-kernel@vger.kernel.org&gt;; Thu, 23 Nov 2017 11:52:40 -0500
Received: from e36.co.us.ibm.com (e36.co.us.ibm.com [32.97.110.154])
	by mx0a-001b2d01.pphosted.com with ESMTP id 2edyhw8664-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Thu, 23 Nov 2017 11:52:39 -0500
Received: from localhost
	by e36.co.us.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from
	&lt;aneesh.kumar@linux.vnet.ibm.com&gt;; Thu, 23 Nov 2017 09:52:39 -0700
Received: from b03cxnp07029.gho.boulder.ibm.com (9.17.130.16)
	by e36.co.us.ibm.com (192.168.1.136) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Thu, 23 Nov 2017 09:52:36 -0700
Received: from b03ledav002.gho.boulder.ibm.com
	(b03ledav002.gho.boulder.ibm.com [9.17.130.233])
	by b03cxnp07029.gho.boulder.ibm.com (8.14.9/8.14.9/NCO v10.0) with
	ESMTP id vANGqaha64094388; Thu, 23 Nov 2017 09:52:36 -0700
Received: from b03ledav002.gho.boulder.ibm.com (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 13D43136043;
	Thu, 23 Nov 2017 09:52:36 -0700 (MST)
Received: from skywalker.ibmmodules.com (unknown [9.80.234.65])
	by b03ledav002.gho.boulder.ibm.com (Postfix) with ESMTP id
	9498F136046; Thu, 23 Nov 2017 09:52:32 -0700 (MST)
From: &quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
To: akpm@linux-foundation.org,
	&quot;Kirill A . Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H . Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: linux-mm@kvack.org, linux-kernel@vger.kernel.org,
	&quot;Aneesh Kumar K.V&quot; &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Subject: [PATCH V3] selftest/vm: Move 128TB mmap boundary test to generic
	directory
Date: Thu, 23 Nov 2017 22:22:26 +0530
X-Mailer: git-send-email 2.14.3
X-TM-AS-GCONF: 00
x-cbid: 17112316-0020-0000-0000-00000D0E8EB9
X-IBM-SpamModules-Scores: 
X-IBM-SpamModules-Versions: BY=3.00008107; HX=3.00000241; KW=3.00000007;
	PH=3.00000004; SC=3.00000241; SDB=6.00950107; UDB=6.00479814;
	IPR=6.00730216; 
	BA=6.00005706; NDR=6.00000001; ZLA=6.00000005; ZF=6.00000009;
	ZB=6.00000000; 
	ZP=6.00000000; ZH=6.00000000; ZU=6.00000002; MB=3.00018150;
	XFM=3.00000015; UTC=2017-11-23 16:52:38
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17112316-0021-0000-0000-00005F07BA35
Message-Id: &lt;20171123165226.32582-1-aneesh.kumar@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-11-23_06:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	priorityscore=1501
	malwarescore=0 suspectscore=0 phishscore=0 bulkscore=0 spamscore=0
	clxscore=1015 lowpriorityscore=0 impostorscore=0 adultscore=0
	classifier=spam adjust=0 reason=mlx scancount=1
	engine=8.0.1-1709140000
	definitions=main-1711230228
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1141">Aneesh Kumar K.V</a> - Nov. 23, 2017, 4:52 p.m.</div>
<pre class="content">
Architectures like ppc64 do support mmap hint addr based large address space
selection. This test can be run on those architectures too. Move the test to
selftest/vm so that other archs can use the same.

We also add a few new test scenarios in this patch. We do test few boundary
condition before we do a high address mmap. ppc64 use the addr limit to validate
addr in the fault path. We had bugs in this area w.r.t slb fault handling
before we updated the addr limit.

We also touch the allocated space to make sure we don&#39;t have any bugs in the
fault handling path.
<span class="signed-off-by">
Signed-off-by: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
---
Changes from V2:
* Rebase on top of -tip tree.
* update the correct license
* use memset to touch the full mmap range.

 tools/testing/selftests/vm/Makefile         |   1 +
 tools/testing/selftests/vm/run_vmtests      |  11 ++
 tools/testing/selftests/vm/va_128TBswitch.c | 297 ++++++++++++++++++++++++++++
 tools/testing/selftests/x86/5lvl.c          | 177 -----------------
 4 files changed, 309 insertions(+), 177 deletions(-)
 create mode 100644 tools/testing/selftests/vm/va_128TBswitch.c
 delete mode 100644 tools/testing/selftests/x86/5lvl.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/testing/selftests/vm/Makefile b/tools/testing/selftests/vm/Makefile</span>
<span class="p_header">index e49eca1915f8..f33f2d6d5014 100644</span>
<span class="p_header">--- a/tools/testing/selftests/vm/Makefile</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/Makefile</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"> TEST_GEN_FILES += transhuge-stress</span>
 TEST_GEN_FILES += userfaultfd
 TEST_GEN_FILES += mlock-random-test
 TEST_GEN_FILES += virtual_address_range
<span class="p_add">+TEST_GEN_FILES += va_128TBswitch</span>
 
 TEST_PROGS := run_vmtests
 
<span class="p_header">diff --git a/tools/testing/selftests/vm/run_vmtests b/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_header">index cc826326de87..d2561895a021 100755</span>
<span class="p_header">--- a/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/run_vmtests</span>
<span class="p_chunk">@@ -177,4 +177,15 @@</span> <span class="p_context"> else</span>
 	echo &quot;[PASS]&quot;
 fi
 
<span class="p_add">+echo &quot;-----------------------------&quot;</span>
<span class="p_add">+echo &quot;running virtual address 128TB switch test&quot;</span>
<span class="p_add">+echo &quot;-----------------------------&quot;</span>
<span class="p_add">+./va_128TBswitch</span>
<span class="p_add">+if [ $? -ne 0 ]; then</span>
<span class="p_add">+    echo &quot;[FAIL]&quot;</span>
<span class="p_add">+    exitcode=1</span>
<span class="p_add">+else</span>
<span class="p_add">+    echo &quot;[PASS]&quot;</span>
<span class="p_add">+fi</span>
<span class="p_add">+</span>
 exit $exitcode
<span class="p_header">diff --git a/tools/testing/selftests/vm/va_128TBswitch.c b/tools/testing/selftests/vm/va_128TBswitch.c</span>
new file mode 100644
<span class="p_header">index 000000000000..e7fe734c374f</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/testing/selftests/vm/va_128TBswitch.c</span>
<span class="p_chunk">@@ -0,0 +1,297 @@</span> <span class="p_context"></span>
<span class="p_add">+/*</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * Authors: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="p_add">+ * Authors: Aneesh Kumar K.V &lt;aneesh.kumar@linux.vnet.ibm.com&gt;</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * This program is free software; you can redistribute it and/or modify</span>
<span class="p_add">+ * it under the terms of the GNU General Public License, version 2, as</span>
<span class="p_add">+ * published by the Free Software Foundation.</span>
<span class="p_add">+</span>
<span class="p_add">+ * This program is distributed in the hope that it would be useful, but</span>
<span class="p_add">+ * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="p_add">+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ */</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;stdio.h&gt;</span>
<span class="p_add">+#include &lt;sys/mman.h&gt;</span>
<span class="p_add">+#include &lt;string.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef __powerpc64__</span>
<span class="p_add">+#define PAGE_SIZE	(64 &lt;&lt; 10)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * This will work with 16M and 2M hugepage size</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define HUGETLB_SIZE	(16 &lt;&lt; 20)</span>
<span class="p_add">+#else</span>
<span class="p_add">+#define PAGE_SIZE	(4 &lt;&lt; 10)</span>
<span class="p_add">+#define HUGETLB_SIZE	(2 &lt;&lt; 20)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * &gt;= 128TB is the hint addr value we used to select</span>
<span class="p_add">+ * large address space.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define ADDR_SWITCH_HINT (1UL &lt;&lt; 47)</span>
<span class="p_add">+#define LOW_ADDR	((void *) (1UL &lt;&lt; 30))</span>
<span class="p_add">+#define HIGH_ADDR	((void *) (1UL &lt;&lt; 48))</span>
<span class="p_add">+</span>
<span class="p_add">+struct testcase {</span>
<span class="p_add">+	void *addr;</span>
<span class="p_add">+	unsigned long size;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	const char *msg;</span>
<span class="p_add">+	unsigned int low_addr_required:1;</span>
<span class="p_add">+	unsigned int keep_mapped:1;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct testcase testcases[] = {</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * If stack is moved, we could possibly allocate</span>
<span class="p_add">+		 * this at the requested address.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We should never allocate at the requested address or above it</span>
<span class="p_add">+		 * The len cross the 128TB boundary. Without MAP_FIXED</span>
<span class="p_add">+		 * we will always search in the lower address space.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, (2 * PAGE_SIZE))&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Exact mapping at 128TB, the area is free we should get that</span>
<span class="p_add">+		 * even without MAP_FIXED.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = NULL,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(NULL)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = LOW_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(LOW_ADDR)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR) again&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1) again&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT - PAGE_SIZE)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, 2 * PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE / 2),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE/2 , 2 * PAGE_SIZE)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = ((void *)(ADDR_SWITCH_HINT)),</span>
<span class="p_add">+		.size = PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, PAGE_SIZE)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * PAGE_SIZE,</span>
<span class="p_add">+		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static struct testcase hugetlb_testcases[] = {</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = NULL,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(NULL, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = LOW_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(LOW_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = HIGH_ADDR,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *) -1,</span>
<span class="p_add">+		.size = HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT - PAGE_SIZE),</span>
<span class="p_add">+		.size = 2 * HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT - PAGE_SIZE, 2*HUGETLB_SIZE, MAP_HUGETLB)&quot;,</span>
<span class="p_add">+		.low_addr_required = 1,</span>
<span class="p_add">+		.keep_mapped = 1,</span>
<span class="p_add">+	},</span>
<span class="p_add">+	{</span>
<span class="p_add">+		.addr = (void *)(ADDR_SWITCH_HINT),</span>
<span class="p_add">+		.size = 2 * HUGETLB_SIZE,</span>
<span class="p_add">+		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_add">+		.msg = &quot;mmap(ADDR_SWITCH_HINT , 2*HUGETLB_SIZE, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_add">+	},</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static int run_test(struct testcase *test, int count)</span>
<span class="p_add">+{</span>
<span class="p_add">+	void *p;</span>
<span class="p_add">+	int i, ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; count; i++) {</span>
<span class="p_add">+		struct testcase *t = test + i;</span>
<span class="p_add">+</span>
<span class="p_add">+		p = mmap(t-&gt;addr, t-&gt;size, PROT_READ | PROT_WRITE, t-&gt;flags, -1, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+		printf(&quot;%s: %p - &quot;, t-&gt;msg, p);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (p == MAP_FAILED) {</span>
<span class="p_add">+			printf(&quot;FAILED\n&quot;);</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(ADDR_SWITCH_HINT)) {</span>
<span class="p_add">+			printf(&quot;FAILED\n&quot;);</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * Do a dereference of the address returned so that we catch</span>
<span class="p_add">+			 * bugs in page fault handling</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			memset(p, 0, t-&gt;size);</span>
<span class="p_add">+			printf(&quot;OK\n&quot;);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		if (!t-&gt;keep_mapped)</span>
<span class="p_add">+			munmap(p, t-&gt;size);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int supported_arch(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+#if defined(__powerpc64__)</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+#elif defined(__x86_64__)</span>
<span class="p_add">+	return 1;</span>
<span class="p_add">+#else</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int main(int argc, char **argv)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!supported_arch())</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = run_test(testcases, ARRAY_SIZE(testcases));</span>
<span class="p_add">+	if (argc == 2 &amp;&amp; !strcmp(argv[1], &quot;--run-hugetlb&quot;))</span>
<span class="p_add">+		ret = run_test(hugetlb_testcases, ARRAY_SIZE(hugetlb_testcases));</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/testing/selftests/x86/5lvl.c b/tools/testing/selftests/x86/5lvl.c</span>
deleted file mode 100644
<span class="p_header">index 2eafdcd4c2b3..000000000000</span>
<span class="p_header">--- a/tools/testing/selftests/x86/5lvl.c</span>
<span class="p_header">+++ /dev/null</span>
<span class="p_chunk">@@ -1,177 +0,0 @@</span> <span class="p_context"></span>
<span class="p_del">-#include &lt;stdio.h&gt;</span>
<span class="p_del">-#include &lt;sys/mman.h&gt;</span>
<span class="p_del">-</span>
<span class="p_del">-#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</span>
<span class="p_del">-</span>
<span class="p_del">-#define PAGE_SIZE	4096</span>
<span class="p_del">-#define LOW_ADDR	((void *) (1UL &lt;&lt; 30))</span>
<span class="p_del">-#define HIGH_ADDR	((void *) (1UL &lt;&lt; 50))</span>
<span class="p_del">-</span>
<span class="p_del">-struct testcase {</span>
<span class="p_del">-	void *addr;</span>
<span class="p_del">-	unsigned long size;</span>
<span class="p_del">-	unsigned long flags;</span>
<span class="p_del">-	const char *msg;</span>
<span class="p_del">-	unsigned int low_addr_required:1;</span>
<span class="p_del">-	unsigned int keep_mapped:1;</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static struct testcase testcases[] = {</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = NULL,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(NULL)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = LOW_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(LOW_ADDR)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR) again&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1) again&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE / 2),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE / 2)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 2 * PAGE_SIZE,</span>
<span class="p_del">-		.flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47) - PAGE_SIZE, 2 * PAGE_SIZE, MAP_FIXED)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = NULL,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(NULL, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = LOW_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(LOW_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_HUGETLB) again&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = HIGH_ADDR,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void*) -1,</span>
<span class="p_del">-		.size = 2UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap(-1, MAP_HUGETLB) again&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - PAGE_SIZE),</span>
<span class="p_del">-		.size = 4UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47), 4UL &lt;&lt; 20, MAP_HUGETLB)&quot;,</span>
<span class="p_del">-		.low_addr_required = 1,</span>
<span class="p_del">-		.keep_mapped = 1,</span>
<span class="p_del">-	},</span>
<span class="p_del">-	{</span>
<span class="p_del">-		.addr = (void *)((1UL &lt;&lt; 47) - (2UL &lt;&lt; 20)),</span>
<span class="p_del">-		.size = 4UL &lt;&lt; 20,</span>
<span class="p_del">-		.flags = MAP_HUGETLB | MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,</span>
<span class="p_del">-		.msg = &quot;mmap((1UL &lt;&lt; 47) - (2UL &lt;&lt; 20), 4UL &lt;&lt; 20, MAP_FIXED | MAP_HUGETLB)&quot;,</span>
<span class="p_del">-	},</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-int main(int argc, char **argv)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int i;</span>
<span class="p_del">-	void *p;</span>
<span class="p_del">-</span>
<span class="p_del">-	for (i = 0; i &lt; ARRAY_SIZE(testcases); i++) {</span>
<span class="p_del">-		struct testcase *t = testcases + i;</span>
<span class="p_del">-</span>
<span class="p_del">-		p = mmap(t-&gt;addr, t-&gt;size, PROT_NONE, t-&gt;flags, -1, 0);</span>
<span class="p_del">-</span>
<span class="p_del">-		printf(&quot;%s: %p - &quot;, t-&gt;msg, p);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (p == MAP_FAILED) {</span>
<span class="p_del">-			printf(&quot;FAILED\n&quot;);</span>
<span class="p_del">-			continue;</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		if (t-&gt;low_addr_required &amp;&amp; p &gt;= (void *)(1UL &lt;&lt; 47))</span>
<span class="p_del">-			printf(&quot;FAILED\n&quot;);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			printf(&quot;OK\n&quot;);</span>
<span class="p_del">-		if (!t-&gt;keep_mapped)</span>
<span class="p_del">-			munmap(p, t-&gt;size);</span>
<span class="p_del">-	}</span>
<span class="p_del">-	return 0;</span>
<span class="p_del">-}</span>

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



