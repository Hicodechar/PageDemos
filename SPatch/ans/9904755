
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[HMM-v25,18/19] mm/device-public-memory: device memory cache coherent with CPU v5 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [HMM-v25,18/19] mm/device-public-memory: device memory cache coherent with CPU v5</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 17, 2017, 12:05 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170817000548.32038-19-jglisse@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9904755/mbox/"
   >mbox</a>
|
   <a href="/patch/9904755/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9904755/">/patch/9904755/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	DA11C60231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:51 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id CBBA328955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:51 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C065028A71; Thu, 17 Aug 2017 00:06:51 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3C7D128955
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 17 Aug 2017 00:06:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752541AbdHQAGq (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 16 Aug 2017 20:06:46 -0400
Received: from mx1.redhat.com ([209.132.183.28]:33084 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752435AbdHQAG0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 16 Aug 2017 20:06:26 -0400
Received: from smtp.corp.redhat.com
	(int-mx01.intmail.prod.int.phx2.redhat.com [10.5.11.11])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 48E4F745A3;
	Thu, 17 Aug 2017 00:06:25 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 mx1.redhat.com 48E4F745A3
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	dmarc=none (p=none dis=none) header.from=redhat.com
Authentication-Results: ext-mx03.extmail.prod.ext.phx2.redhat.com;
	spf=fail smtp.mailfrom=jglisse@redhat.com
Received: from localhost.localdomain.com (ovpn-120-132.rdu2.redhat.com
	[10.10.120.132])
	by smtp.corp.redhat.com (Postfix) with ESMTP id 84E9F6031B;
	Thu, 17 Aug 2017 00:06:23 +0000 (UTC)
From: =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
To: akpm@linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-mm@kvack.org
Cc: John Hubbard &lt;jhubbard@nvidia.com&gt;,
	Dan Williams &lt;dan.j.williams@intel.com&gt;,
	David Nellans &lt;dnellans@nvidia.com&gt;,
	Balbir Singh &lt;bsingharora@gmail.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;,
	Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;,
	&quot;Paul E . McKenney&quot; &lt;paulmck@linux.vnet.ibm.com&gt;,
	Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;,
	Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;
Subject: [HMM-v25 18/19] mm/device-public-memory: device memory cache
	coherent with CPU v5
Date: Wed, 16 Aug 2017 20:05:47 -0400
Message-Id: &lt;20170817000548.32038-19-jglisse@redhat.com&gt;
In-Reply-To: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
References: &lt;20170817000548.32038-1-jglisse@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 17 Aug 2017 00:06:25 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2554">Jerome Glisse</a> - Aug. 17, 2017, 12:05 a.m.</div>
<pre class="content">
Platform with advance system bus (like CAPI or CCIX) allow device
memory to be accessible from CPU in a cache coherent fashion. Add
a new type of ZONE_DEVICE to represent such memory. The use case
are the same as for the un-addressable device memory but without
all the corners cases.

Changed since v4:
  - added memory cgroup change to this patch
Changed since v3:
  - s/public/public (going back)
Changed since v2:
  - s/public/public
  - add proper include in migrate.c and drop useless #if/#endif
Changed since v1:
  - Kconfig and #if/#else cleanup
<span class="signed-off-by">
Signed-off-by: Jérôme Glisse &lt;jglisse@redhat.com&gt;</span>
Cc: Aneesh Kumar &lt;aneesh.kumar@linux.vnet.ibm.com&gt;
Cc: Paul E. McKenney &lt;paulmck@linux.vnet.ibm.com&gt;
Cc: Benjamin Herrenschmidt &lt;benh@kernel.crashing.org&gt;
Cc: Dan Williams &lt;dan.j.williams@intel.com&gt;
Cc: Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;
---
 fs/proc/task_mmu.c       |  2 +-
 include/linux/hmm.h      |  4 ++--
 include/linux/ioport.h   |  1 +
 include/linux/memremap.h | 21 ++++++++++++++++++
 include/linux/mm.h       | 20 ++++++++++-------
 kernel/memremap.c        |  8 +++----
 mm/Kconfig               | 11 ++++++++++
 mm/gup.c                 |  7 ++++++
 mm/hmm.c                 |  4 ++--
 mm/madvise.c             |  2 +-
 mm/memcontrol.c          | 12 +++++-----
 mm/memory.c              | 46 +++++++++++++++++++++++++++++++++-----
 mm/migrate.c             | 57 ++++++++++++++++++++++++++++++++----------------
 mm/swap.c                | 11 ++++++++++
 14 files changed, 159 insertions(+), 47 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index e3ba93b35925..d3a57b43f9f1 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -1189,7 +1189,7 @@</span> <span class="p_context"> static pagemap_entry_t pte_to_pagemap_entry(struct pagemapread *pm,</span>
 		if (pm-&gt;show_pfn)
 			frame = pte_pfn(pte);
 		flags |= PM_PRESENT;
<span class="p_del">-		page = vm_normal_page(vma, addr, pte);</span>
<span class="p_add">+		page = _vm_normal_page(vma, addr, pte, true);</span>
 		if (pte_soft_dirty(pte))
 			flags |= PM_SOFT_DIRTY;
 	} else if (is_swap_pte(pte)) {
<span class="p_header">diff --git a/include/linux/hmm.h b/include/linux/hmm.h</span>
<span class="p_header">index aeba696a4385..79e63178fd87 100644</span>
<span class="p_header">--- a/include/linux/hmm.h</span>
<span class="p_header">+++ b/include/linux/hmm.h</span>
<span class="p_chunk">@@ -327,7 +327,7 @@</span> <span class="p_context"> int hmm_vma_fault(struct vm_area_struct *vma,</span>
 #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */
 
 
<span class="p_del">-#if IS_ENABLED(CONFIG_DEVICE_PRIVATE)</span>
<span class="p_add">+#if IS_ENABLED(CONFIG_DEVICE_PRIVATE) ||  IS_ENABLED(CONFIG_DEVICE_PUBLIC)</span>
 struct hmm_devmem;
 
 struct page *hmm_vma_alloc_locked_page(struct vm_area_struct *vma,
<span class="p_chunk">@@ -494,7 +494,7 @@</span> <span class="p_context"> struct hmm_device {</span>
  */
 struct hmm_device *hmm_device_new(void *drvdata);
 void hmm_device_put(struct hmm_device *hmm_device);
<span class="p_del">-#endif /* IS_ENABLED(CONFIG_DEVICE_PRIVATE) */</span>
<span class="p_add">+#endif /* CONFIG_DEVICE_PRIVATE || CONFIG_DEVICE_PUBLIC */</span>
 
 
 /* Below are for HMM internal use only! Not to be used by device driver! */
<span class="p_header">diff --git a/include/linux/ioport.h b/include/linux/ioport.h</span>
<span class="p_header">index 3a4f69137bc2..f5cf32e80041 100644</span>
<span class="p_header">--- a/include/linux/ioport.h</span>
<span class="p_header">+++ b/include/linux/ioport.h</span>
<span class="p_chunk">@@ -131,6 +131,7 @@</span> <span class="p_context"> enum {</span>
 	IORES_DESC_PERSISTENT_MEMORY		= 4,
 	IORES_DESC_PERSISTENT_MEMORY_LEGACY	= 5,
 	IORES_DESC_DEVICE_PRIVATE_MEMORY	= 6,
<span class="p_add">+	IORES_DESC_DEVICE_PUBLIC_MEMORY		= 7,</span>
 };
 
 /* helpers to define resources */
<span class="p_header">diff --git a/include/linux/memremap.h b/include/linux/memremap.h</span>
<span class="p_header">index 8aa6b82679e2..f8ee1c73ad2d 100644</span>
<span class="p_header">--- a/include/linux/memremap.h</span>
<span class="p_header">+++ b/include/linux/memremap.h</span>
<span class="p_chunk">@@ -57,10 +57,18 @@</span> <span class="p_context"> static inline struct vmem_altmap *to_vmem_altmap(unsigned long memmap_start)</span>
  *
  * A more complete discussion of unaddressable memory may be found in
  * include/linux/hmm.h and Documentation/vm/hmm.txt.
<span class="p_add">+ *</span>
<span class="p_add">+ * MEMORY_DEVICE_PUBLIC:</span>
<span class="p_add">+ * Device memory that is cache coherent from device and CPU point of view. This</span>
<span class="p_add">+ * is use on platform that have an advance system bus (like CAPI or CCIX). A</span>
<span class="p_add">+ * driver can hotplug the device memory using ZONE_DEVICE and with that memory</span>
<span class="p_add">+ * type. Any page of a process can be migrated to such memory. However no one</span>
<span class="p_add">+ * should be allow to pin such memory so that it can always be evicted.</span>
  */
 enum memory_type {
 	MEMORY_DEVICE_HOST = 0,
 	MEMORY_DEVICE_PRIVATE,
<span class="p_add">+	MEMORY_DEVICE_PUBLIC,</span>
 };
 
 /*
<span class="p_chunk">@@ -92,6 +100,8 @@</span> <span class="p_context"> enum memory_type {</span>
  * The page_free() callback is called once the page refcount reaches 1
  * (ZONE_DEVICE pages never reach 0 refcount unless there is a refcount bug.
  * This allows the device driver to implement its own memory management.)
<span class="p_add">+ *</span>
<span class="p_add">+ * For MEMORY_DEVICE_PUBLIC only the page_free() callback matter.</span>
  */
 typedef int (*dev_page_fault_t)(struct vm_area_struct *vma,
 				unsigned long addr,
<span class="p_chunk">@@ -134,6 +144,12 @@</span> <span class="p_context"> static inline bool is_device_private_page(const struct page *page)</span>
 	return is_zone_device_page(page) &amp;&amp;
 		page-&gt;pgmap-&gt;type == MEMORY_DEVICE_PRIVATE;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline bool is_device_public_page(const struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return is_zone_device_page(page) &amp;&amp;</span>
<span class="p_add">+		page-&gt;pgmap-&gt;type == MEMORY_DEVICE_PUBLIC;</span>
<span class="p_add">+}</span>
 #else
 static inline void *devm_memremap_pages(struct device *dev,
 		struct resource *res, struct percpu_ref *ref,
<span class="p_chunk">@@ -157,6 +173,11 @@</span> <span class="p_context"> static inline bool is_device_private_page(const struct page *page)</span>
 {
 	return false;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline bool is_device_public_page(const struct page *page)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return false;</span>
<span class="p_add">+}</span>
 #endif
 
 /**
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 515d4ae611b2..d1d161efefa0 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -796,15 +796,16 @@</span> <span class="p_context"> static inline bool is_zone_device_page(const struct page *page)</span>
 }
 #endif
 
<span class="p_del">-#ifdef CONFIG_DEVICE_PRIVATE</span>
<span class="p_del">-void put_zone_device_private_page(struct page *page);</span>
<span class="p_add">+#if IS_ENABLED(CONFIG_DEVICE_PRIVATE) ||  IS_ENABLED(CONFIG_DEVICE_PUBLIC)</span>
<span class="p_add">+void put_zone_device_private_or_public_page(struct page *page);</span>
 #else
<span class="p_del">-static inline void put_zone_device_private_page(struct page *page)</span>
<span class="p_add">+static inline void put_zone_device_private_or_public_page(struct page *page)</span>
 {
 }
<span class="p_del">-#endif</span>
<span class="p_add">+#endif /* CONFIG_DEVICE_PRIVATE || CONFIG_DEVICE_PUBLIC */</span>
 
 static inline bool is_device_private_page(const struct page *page);
<span class="p_add">+static inline bool is_device_public_page(const struct page *page);</span>
 
 DECLARE_STATIC_KEY_FALSE(device_private_key);
 
<span class="p_chunk">@@ -830,8 +831,9 @@</span> <span class="p_context"> static inline void put_page(struct page *page)</span>
 	 * include/linux/memremap.h and HMM for details.
 	 */
 	if (static_branch_unlikely(&amp;device_private_key) &amp;&amp;
<span class="p_del">-	    unlikely(is_device_private_page(page))) {</span>
<span class="p_del">-		put_zone_device_private_page(page);</span>
<span class="p_add">+	    unlikely(is_device_private_page(page) ||</span>
<span class="p_add">+		     is_device_public_page(page))) {</span>
<span class="p_add">+		put_zone_device_private_or_public_page(page);</span>
 		return;
 	}
 
<span class="p_chunk">@@ -1220,8 +1222,10 @@</span> <span class="p_context"> struct zap_details {</span>
 	pgoff_t last_index;			/* Highest page-&gt;index to unmap */
 };
 
<span class="p_del">-struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="p_del">-		pte_t pte);</span>
<span class="p_add">+struct page *_vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="p_add">+			     pte_t pte, bool with_public_device);</span>
<span class="p_add">+#define vm_normal_page(vma, addr, pte) _vm_normal_page(vma, addr, pte, false)</span>
<span class="p_add">+</span>
 struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
 				pmd_t pmd);
 
<span class="p_header">diff --git a/kernel/memremap.c b/kernel/memremap.c</span>
<span class="p_header">index f42d7483e886..d5ce737af5d7 100644</span>
<span class="p_header">--- a/kernel/memremap.c</span>
<span class="p_header">+++ b/kernel/memremap.c</span>
<span class="p_chunk">@@ -477,8 +477,8 @@</span> <span class="p_context"> struct vmem_altmap *to_vmem_altmap(unsigned long memmap_start)</span>
 #endif /* CONFIG_ZONE_DEVICE */
 
 
<span class="p_del">-#ifdef CONFIG_DEVICE_PRIVATE</span>
<span class="p_del">-void put_zone_device_private_page(struct page *page)</span>
<span class="p_add">+#if IS_ENABLED(CONFIG_DEVICE_PRIVATE) ||  IS_ENABLED(CONFIG_DEVICE_PUBLIC)</span>
<span class="p_add">+void put_zone_device_private_or_public_page(struct page *page)</span>
 {
 	int count = page_ref_dec_return(page);
 
<span class="p_chunk">@@ -498,5 +498,5 @@</span> <span class="p_context"> void put_zone_device_private_page(struct page *page)</span>
 	} else if (!count)
 		__put_page(page);
 }
<span class="p_del">-EXPORT_SYMBOL(put_zone_device_private_page);</span>
<span class="p_del">-#endif /* CONFIG_DEVICE_PRIVATE */</span>
<span class="p_add">+EXPORT_SYMBOL(put_zone_device_private_or_public_page);</span>
<span class="p_add">+#endif /* CONFIG_DEVICE_PRIVATE || CONFIG_DEVICE_PUBLIC */</span>
<span class="p_header">diff --git a/mm/Kconfig b/mm/Kconfig</span>
<span class="p_header">index c07cb590b2d6..5152959e1912 100644</span>
<span class="p_header">--- a/mm/Kconfig</span>
<span class="p_header">+++ b/mm/Kconfig</span>
<span class="p_chunk">@@ -719,12 +719,23 @@</span> <span class="p_context"> config HMM_MIRROR</span>
 config DEVICE_PRIVATE
 	bool &quot;Unaddressable device memory (GPU memory, ...)&quot;
 	depends on ARCH_HAS_HMM
<span class="p_add">+	select HMM</span>
 
 	help
 	  Allows creation of struct pages to represent unaddressable device
 	  memory; i.e., memory that is only accessible from the device (or
 	  group of devices). You likely also want to select HMM_MIRROR.
 
<span class="p_add">+config DEVICE_PUBLIC</span>
<span class="p_add">+	bool &quot;Addressable device memory (like GPU memory)&quot;</span>
<span class="p_add">+	depends on ARCH_HAS_HMM</span>
<span class="p_add">+	select HMM</span>
<span class="p_add">+</span>
<span class="p_add">+	help</span>
<span class="p_add">+	  Allows creation of struct pages to represent addressable device</span>
<span class="p_add">+	  memory; i.e., memory that is accessible from both the device and</span>
<span class="p_add">+	  the CPU</span>
<span class="p_add">+</span>
 config FRAME_VECTOR
 	bool
 
<span class="p_header">diff --git a/mm/gup.c b/mm/gup.c</span>
<span class="p_header">index 76fd199aaae2..b2b4d4263768 100644</span>
<span class="p_header">--- a/mm/gup.c</span>
<span class="p_header">+++ b/mm/gup.c</span>
<span class="p_chunk">@@ -456,6 +456,13 @@</span> <span class="p_context"> static int get_gate_page(struct mm_struct *mm, unsigned long address,</span>
 		if ((gup_flags &amp; FOLL_DUMP) || !is_zero_pfn(pte_pfn(*pte)))
 			goto unmap;
 		*page = pte_page(*pte);
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * This should never happen (a device public page in the gate</span>
<span class="p_add">+		 * area).</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (is_device_public_page(*page))</span>
<span class="p_add">+			goto unmap;</span>
 	}
 	get_page(*page);
 out:
<span class="p_header">diff --git a/mm/hmm.c b/mm/hmm.c</span>
<span class="p_header">index 8c5ce5f76b2e..1a1e79d390c1 100644</span>
<span class="p_header">--- a/mm/hmm.c</span>
<span class="p_header">+++ b/mm/hmm.c</span>
<span class="p_chunk">@@ -752,7 +752,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(hmm_vma_fault);</span>
 #endif /* IS_ENABLED(CONFIG_HMM_MIRROR) */
 
 
<span class="p_del">-#if IS_ENABLED(CONFIG_DEVICE_PRIVATE)</span>
<span class="p_add">+#if IS_ENABLED(CONFIG_DEVICE_PRIVATE) ||  IS_ENABLED(CONFIG_DEVICE_PUBLIC)</span>
 struct page *hmm_vma_alloc_locked_page(struct vm_area_struct *vma,
 				       unsigned long addr)
 {
<span class="p_chunk">@@ -1192,4 +1192,4 @@</span> <span class="p_context"> static int __init hmm_init(void)</span>
 }
 
 device_initcall(hmm_init);
<span class="p_del">-#endif /* IS_ENABLED(CONFIG_DEVICE_PRIVATE) */</span>
<span class="p_add">+#endif /* CONFIG_DEVICE_PRIVATE || CONFIG_DEVICE_PUBLIC */</span>
<span class="p_header">diff --git a/mm/madvise.c b/mm/madvise.c</span>
<span class="p_header">index 47d8d8a25eae..6cf68d5c49f1 100644</span>
<span class="p_header">--- a/mm/madvise.c</span>
<span class="p_header">+++ b/mm/madvise.c</span>
<span class="p_chunk">@@ -344,7 +344,7 @@</span> <span class="p_context"> static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,</span>
 			continue;
 		}
 
<span class="p_del">-		page = vm_normal_page(vma, addr, ptent);</span>
<span class="p_add">+		page = _vm_normal_page(vma, addr, ptent, true);</span>
 		if (!page)
 			continue;
 
<span class="p_header">diff --git a/mm/memcontrol.c b/mm/memcontrol.c</span>
<span class="p_header">index 977d1cf3493a..504eb015f3c4 100644</span>
<span class="p_header">--- a/mm/memcontrol.c</span>
<span class="p_header">+++ b/mm/memcontrol.c</span>
<span class="p_chunk">@@ -4616,10 +4616,11 @@</span> <span class="p_context"> static int mem_cgroup_move_account(struct page *page,</span>
  *   2(MC_TARGET_SWAP): if the swap entry corresponding to this pte is a
  *     target for charge migration. if @target is not NULL, the entry is stored
  *     in target-&gt;ent.
<span class="p_del">- *   3(MC_TARGET_DEVICE): like MC_TARGET_PAGE  but page is MEMORY_DEVICE_PRIVATE</span>
<span class="p_del">- *     (so ZONE_DEVICE page and thus not on the lru). For now we such page is</span>
<span class="p_del">- *     charge like a regular page would be as for all intent and purposes it is</span>
<span class="p_del">- *     just special memory taking the place of a regular page.</span>
<span class="p_add">+ *   3(MC_TARGET_DEVICE): like MC_TARGET_PAGE  but page is MEMORY_DEVICE_PUBLIC</span>
<span class="p_add">+ *     or MEMORY_DEVICE_PRIVATE (so ZONE_DEVICE page and thus not on the lru).</span>
<span class="p_add">+ *     For now we such page is charge like a regular page would be as for all</span>
<span class="p_add">+ *     intent and purposes it is just special memory taking the place of a</span>
<span class="p_add">+ *     regular page.</span>
  *
  *     See Documentations/vm/hmm.txt and include/linux/hmm.h
  *
<span class="p_chunk">@@ -4650,7 +4651,8 @@</span> <span class="p_context"> static enum mc_target_type get_mctgt_type(struct vm_area_struct *vma,</span>
 		 */
 		if (page-&gt;mem_cgroup == mc.from) {
 			ret = MC_TARGET_PAGE;
<span class="p_del">-			if (is_device_private_page(page))</span>
<span class="p_add">+			if (is_device_private_page(page) ||</span>
<span class="p_add">+			    is_device_public_page(page))</span>
 				ret = MC_TARGET_DEVICE;
 			if (target)
 				target-&gt;page = page;
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index d1b2da5fe70e..f3af4e21c8df 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -789,8 +789,8 @@</span> <span class="p_context"> static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,</span>
 #else
 # define HAVE_PTE_SPECIAL 0
 #endif
<span class="p_del">-struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="p_del">-				pte_t pte)</span>
<span class="p_add">+struct page *_vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
<span class="p_add">+			     pte_t pte, bool with_public_device)</span>
 {
 	unsigned long pfn = pte_pfn(pte);
 
<span class="p_chunk">@@ -801,8 +801,31 @@</span> <span class="p_context"> struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,</span>
 			return vma-&gt;vm_ops-&gt;find_special_page(vma, addr);
 		if (vma-&gt;vm_flags &amp; (VM_PFNMAP | VM_MIXEDMAP))
 			return NULL;
<span class="p_del">-		if (!is_zero_pfn(pfn))</span>
<span class="p_del">-			print_bad_pte(vma, addr, pte, NULL);</span>
<span class="p_add">+		if (is_zero_pfn(pfn))</span>
<span class="p_add">+			return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Device public pages are special pages (they are ZONE_DEVICE</span>
<span class="p_add">+		 * pages but different from persistent memory). They behave</span>
<span class="p_add">+		 * allmost like normal pages. The difference is that they are</span>
<span class="p_add">+		 * not on the lru and thus should never be involve with any-</span>
<span class="p_add">+		 * thing that involve lru manipulation (mlock, numa balancing,</span>
<span class="p_add">+		 * ...).</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * This is why we still want to return NULL for such page from</span>
<span class="p_add">+		 * vm_normal_page() so that we do not have to special case all</span>
<span class="p_add">+		 * call site of vm_normal_page().</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (likely(pfn &lt; highest_memmap_pfn)) {</span>
<span class="p_add">+			struct page *page = pfn_to_page(pfn);</span>
<span class="p_add">+</span>
<span class="p_add">+			if (is_device_public_page(page)) {</span>
<span class="p_add">+				if (with_public_device)</span>
<span class="p_add">+					return page;</span>
<span class="p_add">+				return NULL;</span>
<span class="p_add">+			}</span>
<span class="p_add">+		}</span>
<span class="p_add">+		print_bad_pte(vma, addr, pte, NULL);</span>
 		return NULL;
 	}
 
<span class="p_chunk">@@ -983,6 +1006,19 @@</span> <span class="p_context"> copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,</span>
 		get_page(page);
 		page_dup_rmap(page, false);
 		rss[mm_counter(page)]++;
<span class="p_add">+	} else if (pte_devmap(pte)) {</span>
<span class="p_add">+		page = pte_page(pte);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Cache coherent device memory behave like regular page and</span>
<span class="p_add">+		 * not like persistent memory page. For more informations see</span>
<span class="p_add">+		 * MEMORY_DEVICE_CACHE_COHERENT in memory_hotplug.h</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (is_device_public_page(page)) {</span>
<span class="p_add">+			get_page(page);</span>
<span class="p_add">+			page_dup_rmap(page, false);</span>
<span class="p_add">+			rss[mm_counter(page)]++;</span>
<span class="p_add">+		}</span>
 	}
 
 out_set_pte:
<span class="p_chunk">@@ -1238,7 +1274,7 @@</span> <span class="p_context"> static unsigned long zap_pte_range(struct mmu_gather *tlb,</span>
 		if (pte_present(ptent)) {
 			struct page *page;
 
<span class="p_del">-			page = vm_normal_page(vma, addr, ptent);</span>
<span class="p_add">+			page = _vm_normal_page(vma, addr, ptent, true);</span>
 			if (unlikely(details) &amp;&amp; page) {
 				/*
 				 * unmap_shared_mapping_pages() wants to
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 5500e3738354..850001bc3c12 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -36,6 +36,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/hugetlb.h&gt;
 #include &lt;linux/hugetlb_cgroup.h&gt;
 #include &lt;linux/gfp.h&gt;
<span class="p_add">+#include &lt;linux/pfn_t.h&gt;</span>
 #include &lt;linux/memremap.h&gt;
 #include &lt;linux/userfaultfd_k.h&gt;
 #include &lt;linux/balloon_compaction.h&gt;
<span class="p_chunk">@@ -238,10 +239,14 @@</span> <span class="p_context"> static bool remove_migration_pte(struct page *page, struct vm_area_struct *vma,</span>
 		if (is_write_migration_entry(entry))
 			pte = maybe_mkwrite(pte, vma);
 
<span class="p_del">-		if (unlikely(is_zone_device_page(new)) &amp;&amp;</span>
<span class="p_del">-		    is_device_private_page(new)) {</span>
<span class="p_del">-			entry = make_device_private_entry(new, pte_write(pte));</span>
<span class="p_del">-			pte = swp_entry_to_pte(entry);</span>
<span class="p_add">+		if (unlikely(is_zone_device_page(new))) {</span>
<span class="p_add">+			if (is_device_private_page(new)) {</span>
<span class="p_add">+				entry = make_device_private_entry(new, pte_write(pte));</span>
<span class="p_add">+				pte = swp_entry_to_pte(entry);</span>
<span class="p_add">+			} else if (is_device_public_page(new)) {</span>
<span class="p_add">+				pte = pte_mkdevmap(pte);</span>
<span class="p_add">+				flush_dcache_page(new);</span>
<span class="p_add">+			}</span>
 		} else
 			flush_dcache_page(new);
 
<span class="p_chunk">@@ -436,12 +441,11 @@</span> <span class="p_context"> int migrate_page_move_mapping(struct address_space *mapping,</span>
 	void **pslot;
 
 	/*
<span class="p_del">-	 * ZONE_DEVICE pages have 1 refcount always held by their device</span>
<span class="p_del">-	 *</span>
<span class="p_del">-	 * Note that DAX memory will never reach that point as it does not have</span>
<span class="p_del">-	 * the MEMORY_DEVICE_ALLOW_MIGRATE flag set (see memory_hotplug.h).</span>
<span class="p_add">+	 * Device public or private pages have an extra refcount as they are</span>
<span class="p_add">+	 * ZONE_DEVICE pages.</span>
 	 */
<span class="p_del">-	expected_count += is_zone_device_page(page);</span>
<span class="p_add">+	expected_count += is_device_private_page(page);</span>
<span class="p_add">+	expected_count += is_device_public_page(page);</span>
 
 	if (!mapping) {
 		/* Anonymous page without mapping */
<span class="p_chunk">@@ -2134,7 +2138,6 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 
 #endif /* CONFIG_NUMA */
 
<span class="p_del">-</span>
 struct migrate_vma {
 	struct vm_area_struct	*vma;
 	unsigned long		*dst;
<span class="p_chunk">@@ -2274,7 +2277,7 @@</span> <span class="p_context"> static int migrate_vma_collect_pmd(pmd_t *pmdp,</span>
 				pfn = 0;
 				goto next;
 			}
<span class="p_del">-			page = vm_normal_page(migrate-&gt;vma, addr, pte);</span>
<span class="p_add">+			page = _vm_normal_page(migrate-&gt;vma, addr, pte, true);</span>
 			mpfn = migrate_pfn(pfn) | MIGRATE_PFN_MIGRATE;
 			mpfn |= pte_write(pte) ? MIGRATE_PFN_WRITE : 0;
 		}
<span class="p_chunk">@@ -2417,10 +2420,19 @@</span> <span class="p_context"> static bool migrate_vma_check_page(struct page *page)</span>
 		if (is_device_private_page(page))
 			return true;
 
<span class="p_del">-		/* Other ZONE_DEVICE memory type are not supported */</span>
<span class="p_del">-		return false;</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Only allow device public page to be migrated and account for</span>
<span class="p_add">+		 * the extra reference count imply by ZONE_DEVICE pages.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (!is_device_public_page(page))</span>
<span class="p_add">+			return false;</span>
<span class="p_add">+		extra++;</span>
 	}
 
<span class="p_add">+	/* For file back page */</span>
<span class="p_add">+	if (page_mapping(page))</span>
<span class="p_add">+		extra += 1 + page_has_private(page);</span>
<span class="p_add">+</span>
 	if ((page_count(page) - extra) &gt; page_mapcount(page))
 		return false;
 
<span class="p_chunk">@@ -2658,11 +2670,18 @@</span> <span class="p_context"> static void migrate_vma_insert_page(struct migrate_vma *migrate,</span>
 	 */
 	__SetPageUptodate(page);
 
<span class="p_del">-	if (is_zone_device_page(page) &amp;&amp; is_device_private_page(page)) {</span>
<span class="p_del">-		swp_entry_t swp_entry;</span>
<span class="p_del">-</span>
<span class="p_del">-		swp_entry = make_device_private_entry(page, vma-&gt;vm_flags &amp; VM_WRITE);</span>
<span class="p_del">-		entry = swp_entry_to_pte(swp_entry);</span>
<span class="p_add">+	if (is_zone_device_page(page)) {</span>
<span class="p_add">+		if (is_device_private_page(page)) {</span>
<span class="p_add">+			swp_entry_t swp_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+			swp_entry = make_device_private_entry(page, vma-&gt;vm_flags &amp; VM_WRITE);</span>
<span class="p_add">+			entry = swp_entry_to_pte(swp_entry);</span>
<span class="p_add">+		} else if (is_device_public_page(page)) {</span>
<span class="p_add">+			entry = pte_mkold(mk_pte(page, READ_ONCE(vma-&gt;vm_page_prot)));</span>
<span class="p_add">+			if (vma-&gt;vm_flags &amp; VM_WRITE)</span>
<span class="p_add">+				entry = pte_mkwrite(pte_mkdirty(entry));</span>
<span class="p_add">+			entry = pte_mkdevmap(entry);</span>
<span class="p_add">+		}</span>
 	} else {
 		entry = mk_pte(page, vma-&gt;vm_page_prot);
 		if (vma-&gt;vm_flags &amp; VM_WRITE)
<span class="p_chunk">@@ -2779,7 +2798,7 @@</span> <span class="p_context"> static void migrate_vma_pages(struct migrate_vma *migrate)</span>
 					migrate-&gt;src[i] &amp;= ~MIGRATE_PFN_MIGRATE;
 					continue;
 				}
<span class="p_del">-			} else {</span>
<span class="p_add">+			} else if (!is_device_public_page(newpage)) {</span>
 				/*
 				 * Other types of ZONE_DEVICE page are not
 				 * supported.
<span class="p_header">diff --git a/mm/swap.c b/mm/swap.c</span>
<span class="p_header">index 62d96b8e5eb3..9295ae960d66 100644</span>
<span class="p_header">--- a/mm/swap.c</span>
<span class="p_header">+++ b/mm/swap.c</span>
<span class="p_chunk">@@ -765,6 +765,17 @@</span> <span class="p_context"> void release_pages(struct page **pages, int nr, bool cold)</span>
 		if (is_huge_zero_page(page))
 			continue;
 
<span class="p_add">+		/* Device public page can not be huge page */</span>
<span class="p_add">+		if (is_device_public_page(page)) {</span>
<span class="p_add">+			if (locked_pgdat) {</span>
<span class="p_add">+				spin_unlock_irqrestore(&amp;locked_pgdat-&gt;lru_lock,</span>
<span class="p_add">+						       flags);</span>
<span class="p_add">+				locked_pgdat = NULL;</span>
<span class="p_add">+			}</span>
<span class="p_add">+			put_zone_device_private_or_public_page(page);</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
 		page = compound_head(page);
 		if (!put_page_testzero(page))
 			continue;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



