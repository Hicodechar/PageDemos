
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,12/13] x86/mm: Uninline switch_mm - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,12/13] x86/mm: Uninline switch_mm</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 8, 2016, 11:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;df4b08184f61f5b87deb065ab87e56699009253d.1452294700.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7990961/mbox/"
   >mbox</a>
|
   <a href="/patch/7990961/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7990961/">/patch/7990961/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id AB7D29F6FA
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:16:09 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id C7FB82014A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:16:08 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id BD4F5201FE
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:16:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756341AbcAHXP5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 8 Jan 2016 18:15:57 -0500
Received: from mail.kernel.org ([198.145.29.136]:49846 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1756227AbcAHXPx (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 8 Jan 2016 18:15:53 -0500
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 08FFF201F2;
	Fri,  8 Jan 2016 23:15:52 +0000 (UTC)
Received: from localhost (50-76-60-73-ip-static.hfc.comcastbusiness.net
	[50.76.60.73])
	(using TLSv1.2 with cipher AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 01D74201E4;
	Fri,  8 Jan 2016 23:15:50 +0000 (UTC)
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org
Cc: Borislav Petkov &lt;bp@alien8.de&gt;, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [RFC 12/13] x86/mm: Uninline switch_mm
Date: Fri,  8 Jan 2016 15:15:30 -0800
Message-Id: &lt;df4b08184f61f5b87deb065ab87e56699009253d.1452294700.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;cover.1452294700.git.luto@kernel.org&gt;
References: &lt;cover.1452294700.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1452294700.git.luto@kernel.org&gt;
References: &lt;cover.1452294700.git.luto@kernel.org&gt;
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Jan. 8, 2016, 11:15 p.m.</div>
<pre class="content">
It&#39;s fairly large and it has quite a few callers.  This may also
help untangle some headers down the road.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/include/asm/mmu_context.h | 93 +-----------------------------------
 arch/x86/mm/tlb.c                  | 97 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 99 insertions(+), 91 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index 1edc9cd198b8..05c4d0ab64bb 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -104,102 +104,13 @@</span> <span class="p_context"> static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)</span>
 #endif
 }
 
<span class="p_del">-static inline void switch_mm(struct mm_struct *prev, struct mm_struct *next,</span>
<span class="p_del">-			     struct task_struct *tsk)</span>
<span class="p_del">-{</span>
<span class="p_del">-	unsigned cpu = smp_processor_id();</span>
<span class="p_del">-</span>
<span class="p_del">-	if (likely(prev != next)) {</span>
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.active_mm, next);</span>
<span class="p_del">-#endif</span>
<span class="p_del">-		cpumask_set_cpu(cpu, mm_cpumask(next));</span>
<span class="p_add">+extern void switch_mm(struct mm_struct *prev, struct mm_struct *next,</span>
<span class="p_add">+		      struct task_struct *tsk);</span>
 
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Re-load page tables.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * This logic has an ordering constraint:</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 *  CPU 0: Write to a PTE for &#39;next&#39;</span>
<span class="p_del">-		 *  CPU 0: load bit 1 in mm_cpumask.  if nonzero, send IPI.</span>
<span class="p_del">-		 *  CPU 1: set bit 1 in next&#39;s mm_cpumask</span>
<span class="p_del">-		 *  CPU 1: load from the PTE that CPU 0 writes (implicit)</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * We need to prevent an outcome in which CPU 1 observes</span>
<span class="p_del">-		 * the new PTE value and CPU 0 observes bit 1 clear in</span>
<span class="p_del">-		 * mm_cpumask.  (If that occurs, then the IPI will never</span>
<span class="p_del">-		 * be sent, and CPU 0&#39;s TLB will contain a stale entry.)</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * The bad outcome can occur if either CPU&#39;s load is</span>
<span class="p_del">-		 * reordered before that CPU&#39;s store, so both CPUs much</span>
<span class="p_del">-		 * execute full barriers to prevent this from happening.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * Thus, switch_mm needs a full barrier between the</span>
<span class="p_del">-		 * store to mm_cpumask and any operation that could load</span>
<span class="p_del">-		 * from next-&gt;pgd.  This barrier synchronizes with</span>
<span class="p_del">-		 * remote TLB flushers.  Fortunately, load_cr3 is</span>
<span class="p_del">-		 * serializing and thus acts as a full barrier.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		load_cr3(next-&gt;pgd);</span>
 
<span class="p_del">-		trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
 
<span class="p_del">-		/* Stop flush ipis for the previous mm */</span>
<span class="p_del">-		cpumask_clear_cpu(cpu, mm_cpumask(prev));</span>
 
<span class="p_del">-		/* Load per-mm CR4 state */</span>
<span class="p_del">-		load_mm_cr4(next);</span>
 
<span class="p_del">-#ifdef CONFIG_MODIFY_LDT_SYSCALL</span>
<span class="p_del">-		/*</span>
<span class="p_del">-		 * Load the LDT, if the LDT is different.</span>
<span class="p_del">-		 *</span>
<span class="p_del">-		 * It&#39;s possible that prev-&gt;context.ldt doesn&#39;t match</span>
<span class="p_del">-		 * the LDT register.  This can happen if leave_mm(prev)</span>
<span class="p_del">-		 * was called and then modify_ldt changed</span>
<span class="p_del">-		 * prev-&gt;context.ldt but suppressed an IPI to this CPU.</span>
<span class="p_del">-		 * In this case, prev-&gt;context.ldt != NULL, because we</span>
<span class="p_del">-		 * never set context.ldt to NULL while the mm still</span>
<span class="p_del">-		 * exists.  That means that next-&gt;context.ldt !=</span>
<span class="p_del">-		 * prev-&gt;context.ldt, because mms never share an LDT.</span>
<span class="p_del">-		 */</span>
<span class="p_del">-		if (unlikely(prev-&gt;context.ldt != next-&gt;context.ldt))</span>
<span class="p_del">-			load_mm_ldt(next);</span>
<span class="p_del">-#endif</span>
<span class="p_del">-	}</span>
<span class="p_del">-#ifdef CONFIG_SMP</span>
<span class="p_del">-	  else {</span>
<span class="p_del">-		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);</span>
<span class="p_del">-		BUG_ON(this_cpu_read(cpu_tlbstate.active_mm) != next);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (!cpumask_test_cpu(cpu, mm_cpumask(next))) {</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * On established mms, the mm_cpumask is only changed</span>
<span class="p_del">-			 * from irq context, from ptep_clear_flush() while in</span>
<span class="p_del">-			 * lazy tlb mode, and here. Irqs are blocked during</span>
<span class="p_del">-			 * schedule, protecting us from simultaneous changes.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			cpumask_set_cpu(cpu, mm_cpumask(next));</span>
<span class="p_del">-</span>
<span class="p_del">-			/*</span>
<span class="p_del">-			 * We were in lazy tlb mode and leave_mm disabled</span>
<span class="p_del">-			 * tlb flush IPI delivery. We must reload CR3</span>
<span class="p_del">-			 * to make sure to use no freed page tables.</span>
<span class="p_del">-			 *</span>
<span class="p_del">-			 * As above, this is a barrier that forces</span>
<span class="p_del">-			 * TLB repopulation to be ordered after the</span>
<span class="p_del">-			 * store to mm_cpumask.</span>
<span class="p_del">-			 */</span>
<span class="p_del">-			load_cr3(next-&gt;pgd);</span>
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
<span class="p_del">-			load_mm_cr4(next);</span>
<span class="p_del">-			load_mm_ldt(next);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	}</span>
<span class="p_del">-#endif</span>
<span class="p_del">-}</span>
 
 #define activate_mm(prev, next)			\
 do {						\
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 87fcc7a62e71..9790c9338e52 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -59,6 +59,103 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 }
 EXPORT_SYMBOL_GPL(leave_mm);
 
<span class="p_add">+void switch_mm(struct mm_struct *prev, struct mm_struct *next,</span>
<span class="p_add">+	       struct task_struct *tsk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned cpu = smp_processor_id();</span>
<span class="p_add">+</span>
<span class="p_add">+	if (likely(prev != next)) {</span>
<span class="p_add">+#ifdef CONFIG_SMP</span>
<span class="p_add">+		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);</span>
<span class="p_add">+		this_cpu_write(cpu_tlbstate.active_mm, next);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+		cpumask_set_cpu(cpu, mm_cpumask(next));</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Re-load page tables.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * This logic has an ordering constraint:</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 *  CPU 0: Write to a PTE for &#39;next&#39;</span>
<span class="p_add">+		 *  CPU 0: load bit 1 in mm_cpumask.  if nonzero, send IPI.</span>
<span class="p_add">+		 *  CPU 1: set bit 1 in next&#39;s mm_cpumask</span>
<span class="p_add">+		 *  CPU 1: load from the PTE that CPU 0 writes (implicit)</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * We need to prevent an outcome in which CPU 1 observes</span>
<span class="p_add">+		 * the new PTE value and CPU 0 observes bit 1 clear in</span>
<span class="p_add">+		 * mm_cpumask.  (If that occurs, then the IPI will never</span>
<span class="p_add">+		 * be sent, and CPU 0&#39;s TLB will contain a stale entry.)</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * The bad outcome can occur if either CPU&#39;s load is</span>
<span class="p_add">+		 * reordered before that CPU&#39;s store, so both CPUs much</span>
<span class="p_add">+		 * execute full barriers to prevent this from happening.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * Thus, switch_mm needs a full barrier between the</span>
<span class="p_add">+		 * store to mm_cpumask and any operation that could load</span>
<span class="p_add">+		 * from next-&gt;pgd.  This barrier synchronizes with</span>
<span class="p_add">+		 * remote TLB flushers.  Fortunately, load_cr3 is</span>
<span class="p_add">+		 * serializing and thus acts as a full barrier.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		load_cr3(next-&gt;pgd);</span>
<span class="p_add">+</span>
<span class="p_add">+		trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Stop flush ipis for the previous mm */</span>
<span class="p_add">+		cpumask_clear_cpu(cpu, mm_cpumask(prev));</span>
<span class="p_add">+</span>
<span class="p_add">+		/* Load per-mm CR4 state */</span>
<span class="p_add">+		load_mm_cr4(next);</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_MODIFY_LDT_SYSCALL</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Load the LDT, if the LDT is different.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * It&#39;s possible that prev-&gt;context.ldt doesn&#39;t match</span>
<span class="p_add">+		 * the LDT register.  This can happen if leave_mm(prev)</span>
<span class="p_add">+		 * was called and then modify_ldt changed</span>
<span class="p_add">+		 * prev-&gt;context.ldt but suppressed an IPI to this CPU.</span>
<span class="p_add">+		 * In this case, prev-&gt;context.ldt != NULL, because we</span>
<span class="p_add">+		 * never set context.ldt to NULL while the mm still</span>
<span class="p_add">+		 * exists.  That means that next-&gt;context.ldt !=</span>
<span class="p_add">+		 * prev-&gt;context.ldt, because mms never share an LDT.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (unlikely(prev-&gt;context.ldt != next-&gt;context.ldt))</span>
<span class="p_add">+			load_mm_ldt(next);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	}</span>
<span class="p_add">+#ifdef CONFIG_SMP</span>
<span class="p_add">+	  else {</span>
<span class="p_add">+		this_cpu_write(cpu_tlbstate.state, TLBSTATE_OK);</span>
<span class="p_add">+		BUG_ON(this_cpu_read(cpu_tlbstate.active_mm) != next);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!cpumask_test_cpu(cpu, mm_cpumask(next))) {</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * On established mms, the mm_cpumask is only changed</span>
<span class="p_add">+			 * from irq context, from ptep_clear_flush() while in</span>
<span class="p_add">+			 * lazy tlb mode, and here. Irqs are blocked during</span>
<span class="p_add">+			 * schedule, protecting us from simultaneous changes.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			cpumask_set_cpu(cpu, mm_cpumask(next));</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * We were in lazy tlb mode and leave_mm disabled</span>
<span class="p_add">+			 * tlb flush IPI delivery. We must reload CR3</span>
<span class="p_add">+			 * to make sure to use no freed page tables.</span>
<span class="p_add">+			 *</span>
<span class="p_add">+			 * As above, this is a barrier that forces</span>
<span class="p_add">+			 * TLB repopulation to be ordered after the</span>
<span class="p_add">+			 * store to mm_cpumask.</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			load_cr3(next-&gt;pgd);</span>
<span class="p_add">+			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
<span class="p_add">+			load_mm_cr4(next);</span>
<span class="p_add">+			load_mm_ldt(next);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * The flush IPI assumes that a thread switch happens in this order:
  * [cpu0: the cpu that switches]

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



