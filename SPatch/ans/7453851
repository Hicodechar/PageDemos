
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/4] mm/hugetlb: Setup hugetlb_falloc during fallocate hole punch - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/4] mm/hugetlb: Setup hugetlb_falloc during fallocate hole punch</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 20, 2015, 11:52 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1445385142-29936-3-git-send-email-mike.kravetz@oracle.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7453851/mbox/"
   >mbox</a>
|
   <a href="/patch/7453851/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7453851/">/patch/7453851/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 9B32ABEEA4
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:37 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B848B2089C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:36 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id BF700208A0
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 20 Oct 2015 23:53:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752939AbbJTXx2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:28 -0400
Received: from userp1040.oracle.com ([156.151.31.81]:49925 &quot;EHLO
	userp1040.oracle.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752761AbbJTXxX (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 20 Oct 2015 19:53:23 -0400
Received: from aserv0022.oracle.com (aserv0022.oracle.com [141.146.126.234])
	by userp1040.oracle.com (Sentrion-MTA-4.3.2/Sentrion-MTA-4.3.2)
	with ESMTP id t9KNqulN022009
	(version=TLSv1 cipher=DHE-RSA-AES256-SHA bits=256 verify=OK);
	Tue, 20 Oct 2015 23:52:56 GMT
Received: from userv0122.oracle.com (userv0122.oracle.com [156.151.31.75])
	by aserv0022.oracle.com (8.13.8/8.13.8) with ESMTP id t9KNqtM0031464
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL); 
	Tue, 20 Oct 2015 23:52:56 GMT
Received: from abhmp0001.oracle.com (abhmp0001.oracle.com [141.146.116.7])
	by userv0122.oracle.com (8.13.8/8.13.8) with ESMTP id t9KNqtxC005016; 
	Tue, 20 Oct 2015 23:52:55 GMT
Received: from monkey.oracle.com (/50.53.81.168)
	by default (Oracle Beehive Gateway v4.0)
	with ESMTP ; Tue, 20 Oct 2015 16:52:54 -0700
From: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Hugh Dickins &lt;hughd@google.com&gt;, Davidlohr Bueso &lt;dave@stgolabs.net&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;
Subject: [PATCH v2 2/4] mm/hugetlb: Setup hugetlb_falloc during fallocate
	hole punch
Date: Tue, 20 Oct 2015 16:52:20 -0700
Message-Id: &lt;1445385142-29936-3-git-send-email-mike.kravetz@oracle.com&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
References: &lt;1445385142-29936-1-git-send-email-mike.kravetz@oracle.com&gt;
X-Source-IP: aserv0022.oracle.com [141.146.126.234]
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Oct. 20, 2015, 11:52 p.m.</div>
<pre class="content">
When performing a fallocate hole punch, set up a hugetlb_falloc struct
and make i_private point to it.  i_private will point to this struct for
the duration of the operation.  At the end of the operation, wake up
anyone who faulted on the hole and is on the waitq.
<span class="signed-off-by">
Signed-off-by: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;</span>
---
 fs/hugetlbfs/inode.c | 32 +++++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=65121">Dave Hansen</a> - Oct. 21, 2015, 12:11 a.m.</div>
<pre class="content">
On 10/20/2015 04:52 PM, Mike Kravetz wrote:
<span class="quote">&gt;  	if (hole_end &gt; hole_start) {</span>
<span class="quote">&gt;  		struct address_space *mapping = inode-&gt;i_mapping;</span>
<span class="quote">&gt; +		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(hugetlb_falloc_waitq);</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * Page faults on the area to be hole punched must be stopped</span>
<span class="quote">&gt; +		 * during the operation.  Initialize struct and have</span>
<span class="quote">&gt; +		 * inode-&gt;i_private point to it.</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		struct hugetlb_falloc hugetlb_falloc = {</span>
<span class="quote">&gt; +			.waitq = &amp;hugetlb_falloc_waitq,</span>
<span class="quote">&gt; +			.start = hole_start &gt;&gt; hpage_shift,</span>
<span class="quote">&gt; +			.end = hole_end &gt;&gt; hpage_shift</span>
<span class="quote">&gt; +		};</span>
...
<span class="quote">&gt; @@ -527,6 +550,12 @@ static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
<span class="quote">&gt;  						hole_end  &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;  		i_mmap_unlock_write(mapping);</span>
<span class="quote">&gt;  		remove_inode_hugepages(inode, hole_start, hole_end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; +		inode-&gt;i_private = NULL;</span>
<span class="quote">&gt; +		wake_up_all(&amp;hugetlb_falloc_waitq);</span>
<span class="quote">&gt; +		spin_unlock(&amp;inode-&gt;i_lock);</span>

I see the shmem code doing something similar.  But, in the end, we&#39;re
passing the stack-allocated &#39;hugetlb_falloc_waitq&#39; over to the page
faulting thread.  Is there something subtle that keeps
&#39;hugetlb_falloc_waitq&#39; from becoming invalid while the other task is
sleeping?

That wake_up_all() obviously can&#39;t sleep, but it seems like the faulting
thread&#39;s finish_wait() *HAS* to run before wake_up_all() can return.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Oct. 21, 2015, 1:02 a.m.</div>
<pre class="content">
On 10/20/2015 05:11 PM, Dave Hansen wrote:
<span class="quote">&gt; On 10/20/2015 04:52 PM, Mike Kravetz wrote:</span>
<span class="quote">&gt;&gt;  	if (hole_end &gt; hole_start) {</span>
<span class="quote">&gt;&gt;  		struct address_space *mapping = inode-&gt;i_mapping;</span>
<span class="quote">&gt;&gt; +		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(hugetlb_falloc_waitq);</span>
<span class="quote">&gt;&gt; +		/*</span>
<span class="quote">&gt;&gt; +		 * Page faults on the area to be hole punched must be stopped</span>
<span class="quote">&gt;&gt; +		 * during the operation.  Initialize struct and have</span>
<span class="quote">&gt;&gt; +		 * inode-&gt;i_private point to it.</span>
<span class="quote">&gt;&gt; +		 */</span>
<span class="quote">&gt;&gt; +		struct hugetlb_falloc hugetlb_falloc = {</span>
<span class="quote">&gt;&gt; +			.waitq = &amp;hugetlb_falloc_waitq,</span>
<span class="quote">&gt;&gt; +			.start = hole_start &gt;&gt; hpage_shift,</span>
<span class="quote">&gt;&gt; +			.end = hole_end &gt;&gt; hpage_shift</span>
<span class="quote">&gt;&gt; +		};</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;&gt; @@ -527,6 +550,12 @@ static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
<span class="quote">&gt;&gt;  						hole_end  &gt;&gt; PAGE_SHIFT);</span>
<span class="quote">&gt;&gt;  		i_mmap_unlock_write(mapping);</span>
<span class="quote">&gt;&gt;  		remove_inode_hugepages(inode, hole_start, hole_end);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt;&gt; +		inode-&gt;i_private = NULL;</span>
<span class="quote">&gt;&gt; +		wake_up_all(&amp;hugetlb_falloc_waitq);</span>
<span class="quote">&gt;&gt; +		spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I see the shmem code doing something similar.  But, in the end, we&#39;re</span>
<span class="quote">&gt; passing the stack-allocated &#39;hugetlb_falloc_waitq&#39; over to the page</span>
<span class="quote">&gt; faulting thread.  Is there something subtle that keeps</span>
<span class="quote">&gt; &#39;hugetlb_falloc_waitq&#39; from becoming invalid while the other task is</span>
<span class="quote">&gt; sleeping?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That wake_up_all() obviously can&#39;t sleep, but it seems like the faulting</span>
<span class="quote">&gt; thread&#39;s finish_wait() *HAS* to run before wake_up_all() can return.</span>
<span class="quote">&gt; </span>

The &#39;trick&#39; is noted in the comment in the shmem_fault code:

                        /*
                         * shmem_falloc_waitq points into the
shmem_fallocate()
                         * stack of the hole-punching task:
shmem_falloc_waitq
                         * is usually invalid by the time we reach here, but
                         * finish_wait() does not dereference it in that
case;
                         * though i_lock needed lest racing with
wake_up_all().
                         */

The faulting thread is removed from the waitq when awakened with
wake_up_all().  See the DEFINE_WAIT() and supporting code in the
faulting thread.  Because of this, when the faulting thread calls
finish_wait() it does not access the waitq that was/is on the stack.

At least I&#39;ve convinced myself it works this way. :)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/hugetlbfs/inode.c b/fs/hugetlbfs/inode.c</span>
<span class="p_header">index 316adb9..719bbe0 100644</span>
<span class="p_header">--- a/fs/hugetlbfs/inode.c</span>
<span class="p_header">+++ b/fs/hugetlbfs/inode.c</span>
<span class="p_chunk">@@ -507,6 +507,7 @@</span> <span class="p_context"> static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
 {
 	struct hstate *h = hstate_inode(inode);
 	loff_t hpage_size = huge_page_size(h);
<span class="p_add">+	unsigned long hpage_shift = huge_page_shift(h);</span>
 	loff_t hole_start, hole_end;
 
 	/*
<span class="p_chunk">@@ -518,8 +519,30 @@</span> <span class="p_context"> static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
 
 	if (hole_end &gt; hole_start) {
 		struct address_space *mapping = inode-&gt;i_mapping;
<span class="p_add">+		DECLARE_WAIT_QUEUE_HEAD_ONSTACK(hugetlb_falloc_waitq);</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Page faults on the area to be hole punched must be stopped</span>
<span class="p_add">+		 * during the operation.  Initialize struct and have</span>
<span class="p_add">+		 * inode-&gt;i_private point to it.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		struct hugetlb_falloc hugetlb_falloc = {</span>
<span class="p_add">+			.waitq = &amp;hugetlb_falloc_waitq,</span>
<span class="p_add">+			.start = hole_start &gt;&gt; hpage_shift,</span>
<span class="p_add">+			.end = hole_end &gt;&gt; hpage_shift</span>
<span class="p_add">+		};</span>
 
 		mutex_lock(&amp;inode-&gt;i_mutex);
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * inode-&gt;i_private will be checked in the page fault path.</span>
<span class="p_add">+		 * The locking assures that all writes to the structure are</span>
<span class="p_add">+		 * complete before assigning to i_private.  A fault on another</span>
<span class="p_add">+		 * CPU will see the fully initialized structure.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+		inode-&gt;i_private = &amp;hugetlb_falloc;</span>
<span class="p_add">+		spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+</span>
 		i_mmap_lock_write(mapping);
 		if (!RB_EMPTY_ROOT(&amp;mapping-&gt;i_mmap))
 			hugetlb_vmdelete_list(&amp;mapping-&gt;i_mmap,
<span class="p_chunk">@@ -527,6 +550,12 @@</span> <span class="p_context"> static long hugetlbfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)</span>
 						hole_end  &gt;&gt; PAGE_SHIFT);
 		i_mmap_unlock_write(mapping);
 		remove_inode_hugepages(inode, hole_start, hole_end);
<span class="p_add">+</span>
<span class="p_add">+		spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+		inode-&gt;i_private = NULL;</span>
<span class="p_add">+		wake_up_all(&amp;hugetlb_falloc_waitq);</span>
<span class="p_add">+		spin_unlock(&amp;inode-&gt;i_lock);</span>
<span class="p_add">+</span>
 		mutex_unlock(&amp;inode-&gt;i_mutex);
 	}
 
<span class="p_chunk">@@ -647,9 +676,6 @@</span> <span class="p_context"> static long hugetlbfs_fallocate(struct file *file, int mode, loff_t offset,</span>
 	if (!(mode &amp; FALLOC_FL_KEEP_SIZE) &amp;&amp; offset + len &gt; inode-&gt;i_size)
 		i_size_write(inode, offset + len);
 	inode-&gt;i_ctime = CURRENT_TIME;
<span class="p_del">-	spin_lock(&amp;inode-&gt;i_lock);</span>
<span class="p_del">-	inode-&gt;i_private = NULL;</span>
<span class="p_del">-	spin_unlock(&amp;inode-&gt;i_lock);</span>
 out:
 	mutex_unlock(&amp;inode-&gt;i_mutex);
 	return error;

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



