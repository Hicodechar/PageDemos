
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,1/2] x86/mm: Do not allow non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,1/2] x86/mm: Do not allow non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 15, 2017, 2:13 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171115141326.xzsbkycdwq4vafxf@node.shutemov.name&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10059509/mbox/"
   >mbox</a>
|
   <a href="/patch/10059509/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10059509/">/patch/10059509/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	0CA7A60231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:14:15 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 000FC2A03E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:14:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E90EF2A040; Wed, 15 Nov 2017 14:14:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3FB4A2A03E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 15 Nov 2017 14:14:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1758266AbdKOOOL (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 15 Nov 2017 09:14:11 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:35512 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756801AbdKOON3 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 15 Nov 2017 09:13:29 -0500
Received: by mail-wm0-f68.google.com with SMTP id y80so3264655wmd.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 15 Nov 2017 06:13:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=shutemov-name.20150623.gappssmtp.com; s=20150623;
	h=date:from:to:cc:subject:message-id:references:mime-version
	:content-disposition:in-reply-to:user-agent;
	bh=C6m4Xb/PmxeodXBwmO4SGqG2fvS3R2WFlyhQcUvFjao=;
	b=uU1KlsL53X8XfNGuSjP8qCUQlj0Rd1lkC2VlSfA+4D3VgzLReQZTEQKwPh9dJeSEHV
	OE774CFVfXYHI2kJAEWQ0UbmZ34wy300IE0TLnnRuRuVUpPXLQ0Xu7VfoRZUz6SFcdE9
	bBsW7Dw8K7osaPJhwOcgNWpDiduzOHVSUuNm4PfheqPPCB64hTTpDun9dvHaC3X6TMQu
	hWVslXuSmeUgIhRqA+X0ETysXWwfTCQ92WlNRLrz1+JNcimDHnzwkNEIRExgUZfAkBdR
	hYOwwrOOAu63RWm47GeF1Qjqq0hY4h7T1xELXjfmxM2VHe+b6Ql/WcwuDA6rVsSQfSU8
	ttQQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:date:from:to:cc:subject:message-id:references
	:mime-version:content-disposition:in-reply-to:user-agent;
	bh=C6m4Xb/PmxeodXBwmO4SGqG2fvS3R2WFlyhQcUvFjao=;
	b=JLcU9Rjt7CAk1yhsKZSq8WfSJWTcvMrgsTB/BCIYGpSBt/bxwNQz+vGHSKeTVWDq74
	VBDIrKy8RQFXVIXd5ROC7BkaQSIheEhx7SKUrqp40X8Te7GFVLcFmv1tAuRYeDLXmC25
	0goH2YqpqTq7jn/McxfzivaOr2MWKRtDOMKusExlMzf+H7U376RQ9aCR0vOImeNWSujt
	VXac1CspQQS4RCiNgROUQkoxTB13J4XH40QxLCqowZjBlsuB3r3i85KM/qIvFufaOdL8
	7s3eVqAWu0zaYGKBc2FW4rZ641Aoq9OocdDXqHCux0Zf0MD399rQ7DJz2dxEO5y9EnbS
	bIHw==
X-Gm-Message-State: AJaThX4UerrIdYU3pM2lZIqZB1UtrggvmtBItgLhDRDpQz5zQX40bLfv
	9EWHLCCxNPYx80RhbNI0TcsZ9w==
X-Google-Smtp-Source: AGs4zMaRYSK2C3JzvJ/h38FSxKDmBCP0X2sgs2GtUIckeLwQJ215RZIDasuj8ECBbL+ri6cLO1ZLsg==
X-Received: by 10.80.137.214 with SMTP id h22mr2564323edh.295.1510755208507; 
	Wed, 15 Nov 2017 06:13:28 -0800 (PST)
Received: from node.shutemov.name ([93.84.11.81])
	by smtp.gmail.com with ESMTPSA id
	e24sm17289079edc.9.2017.11.15.06.13.27
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 15 Nov 2017 06:13:27 -0800 (PST)
Received: by node.shutemov.name (Postfix, from userid 1000)
	id 0CB0B648D520; Wed, 15 Nov 2017 17:13:27 +0300 (+03)
Date: Wed, 15 Nov 2017 17:13:27 +0300
From: &quot;Kirill A. Shutemov&quot; &lt;kirill@shutemov.name&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, x86@kernel.org,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Nicholas Piggin &lt;npiggin@gmail.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: Re: [PATCHv2 1/2] x86/mm: Do not allow non-MAP_FIXED mapping across
	DEFAULT_MAP_WINDOW border
Message-ID: &lt;20171115141326.xzsbkycdwq4vafxf@node.shutemov.name&gt;
References: &lt;20171114134322.40321-1-kirill.shutemov@linux.intel.com&gt;
	&lt;alpine.DEB.2.20.1711141630210.2044@nanos&gt;
	&lt;20171114202102.crpgiwgv2lu5aboq@node.shutemov.name&gt;
	&lt;alpine.DEB.2.20.1711142131010.2221@nanos&gt;
	&lt;20171114222718.76w4lmclf6wasbl3@node.shutemov.name&gt;
	&lt;alpine.DEB.2.20.1711142354520.2221@nanos&gt;
	&lt;20171115112702.e2m66wons37imtcj@node.shutemov.name&gt;
	&lt;alpine.DEB.2.20.1711151238500.1805@nanos&gt;
	&lt;20171115121042.dt2us5fsuqmepx4i@node.shutemov.name&gt;
	&lt;20171115140426.bgvcd3bmegqadm5q@node.shutemov.name&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: &lt;20171115140426.bgvcd3bmegqadm5q@node.shutemov.name&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 15, 2017, 2:13 p.m.</div>
<pre class="content">
On Wed, Nov 15, 2017 at 05:04:26PM +0300, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Wed, Nov 15, 2017 at 03:10:42PM +0300, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Wed, Nov 15, 2017 at 12:39:40PM +0100, Thomas Gleixner wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed, 15 Nov 2017, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; On Wed, Nov 15, 2017 at 12:00:46AM +0100, Thomas Gleixner wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; On Wed, 15 Nov 2017, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; On Tue, Nov 14, 2017 at 09:54:52PM +0100, Thomas Gleixner wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; On Tue, 14 Nov 2017, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; On Tue, Nov 14, 2017 at 05:01:50PM +0100, Thomas Gleixner wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; @@ -198,11 +199,14 @@ arch_get_unmapped_area_topdown(struct fi</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	/* requesting a specific address */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  	if (addr) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;  		addr = PAGE_ALIGN(addr);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +			goto get_unmapped_area;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; Here and in hugetlb_get_unmapped_area(), we should align the addr after</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; the check, not before. Otherwise the alignment itself can bring us over</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; the borderline as we align up.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; Hmm, then I wonder whether the next check against vm_start_gap() which</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; checks against the aligned address is correct:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt;                 addr = PAGE_ALIGN(addr);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt;                 vma = find_vma(mm, addr);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt;                 if (end - len &gt;= addr &amp;&amp;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt;                     (!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; &gt;                         return addr;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; I think the check is correct. The check is against resulting addresses</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; that end up in vm_start/vm_end. In our case we want to figure out what</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; &gt; user asked for.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; Well, but then checking just against the user supplied addr is only half of</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; the story.</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;     addr = boundary - PAGE_SIZE - PAGE_SIZE / 2;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;     len = PAGE_SIZE - PAGE_SIZE / 2;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; That fits, but then after alignment we end up with</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;     addr = boudary - PAGE_SIZE;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; and due to len &gt; PAGE_SIZE this will result in a mapping which crosses the</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; boundary, right? So checking against the PAGE_ALIGN(addr) should be the</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; right thing to do.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; IIUC, this is only the case if &#39;len&#39; is not aligned, right?</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;From what I see we expect caller to align it (and mm/mmap.c does this, I</span>
<span class="quote">&gt; &gt; &gt; &gt; haven&#39;t checked other callers).</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; And hugetlb would actively reject non-aligned len.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; I *think* we should be fine with checking unaligned &#39;addr&#39;.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; I think we should keep it consistent for the normal and the huge case and</span>
<span class="quote">&gt; &gt; &gt; just check aligned and be done with it.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Aligned &#39;addr&#39;? Or &#39;len&#39;? Both?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We would have problem with checking aligned addr. I steped it in hugetlb</span>
<span class="quote">&gt; &gt; case:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   - User asks for mmap((1UL &lt;&lt; 47) - PAGE_SIZE, 2 &lt;&lt; 20, MAP_HUGETLB);</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   - On 4-level paging machine this gives us invalid hint address as</span>
<span class="quote">&gt; &gt;     &#39;TASK_SIZE - len&#39; is more than &#39;addr&#39;. Goto get_unmapped_area.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   - On 5-level paging machine hint address gets rounded up to next 2MB</span>
<span class="quote">&gt; &gt;     boundary that is exactly 1UL &lt;&lt; 47 and we happily allocate from full</span>
<span class="quote">&gt; &gt;     address space which may lead to trouble.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Below is updated patch with self-test.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Output on 5-level paging machine:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; mmap(NULL): 0x7fbbad1f3000 - OK</span>
<span class="quote">&gt; mmap(LOW_ADDR): 0x40000000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR): 0x4000000000000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR) again: 0xffffbbad1fb000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR, MAP_FIXED): 0x4000000000000 - OK</span>
<span class="quote">&gt; mmap(-1): 0xffffbbad1f9000 - OK</span>
<span class="quote">&gt; mmap(-1) again: 0xffffbbad1f7000 - OK</span>
<span class="quote">&gt; mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE): 0x7fbbad1f3000 - OK</span>
<span class="quote">&gt; mmap((1UL &lt;&lt; 47), 2 * PAGE_SIZE / 2): 0x7fbbad1f1000 - OK</span>
<span class="quote">&gt; mmap((1UL &lt;&lt; 47) - PAGE_SIZE, 2 * PAGE_SIZE, MAP_FIXED): 0x7ffffffff000 - OK</span>
<span class="quote">&gt; mmap(NULL, MAP_HUGETLB): 0x7fbbac400000 - OK</span>
<span class="quote">&gt; mmap(LOW_ADDR, MAP_HUGETLB): 0x40000000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR, MAP_HUGETLB): 0x4000000000000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR, MAP_HUGETLB) again: 0xffffbbace00000 - OK</span>
<span class="quote">&gt; mmap(HIGH_ADDR, MAP_FIXED | MAP_HUGETLB): 0x4000000000000 - OK</span>
<span class="quote">&gt; mmap(-1, MAP_HUGETLB): (nil) - OK</span>
<span class="quote">&gt; mmap(-1, MAP_HUGETLB) again: 0x7fbbac400000 - OK</span>
<span class="quote">&gt; mmap((1UL &lt;&lt; 47), 2UL &lt;&lt; 20, MAP_HUGETLB): 0x800000000000 - FAILED</span>
<span class="quote">&gt; mmap((1UL &lt;&lt; 47) - (2UL &lt;&lt; 20), 4UL &lt;&lt; 20, MAP_FIXED | MAP_HUGETLB): 0x7fffffe00000 - OK</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So, only hugetlb is problematic. mmap() aligns addr to PAGE_SIZE.</span>
<span class="quote">&gt; See round_hint_to_min(). In this case we round address *down* and it works</span>
<span class="quote">&gt; fine.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Replacing &#39;addr = ALIGN(addr, huge_page_size(h))&#39; in hugetlbpage.c with</span>
<span class="quote">&gt; &#39;addr &amp;= huge_page_mask(h)&#39; fixes the issue.</span>

What about this fixup:
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=107">Thomas Gleixner</a> - Nov. 15, 2017, 2:23 p.m.</div>
<pre class="content">
On Wed, 15 Nov 2017, Kirill A. Shutemov wrote:
<span class="quote">&gt; On Wed, Nov 15, 2017 at 05:04:26PM +0300, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt;  	/* requesting a specific address */</span>
<span class="quote">&gt;  	if (addr) {</span>
<span class="quote">&gt; -		addr = PAGE_ALIGN(addr);</span>
<span class="quote">&gt; +		addr &amp;= PAGE_MASK;</span>
<span class="quote">&gt;  		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt;  			goto get_unmapped_area;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; index 92db903c3dad..00b296617ca4 100644</span>
<span class="quote">&gt; --- a/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; +++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; @@ -166,7 +166,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (addr) {</span>
<span class="quote">&gt; -		addr = ALIGN(addr, huge_page_size(h));</span>
<span class="quote">&gt; +		addr &amp;= huge_page_mask(h);</span>
<span class="quote">&gt;  		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt;  			goto get_unmapped_area;</span>

That should work. Care to pickup my variant, make the fixups and resend
along with the selftest which covers both normal and huge mappings?

Thanks,

	tglx
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=874">Kirill A. Shutemov</a> - Nov. 15, 2017, 2:24 p.m.</div>
<pre class="content">
On Wed, Nov 15, 2017 at 03:23:32PM +0100, Thomas Gleixner wrote:
<span class="quote">&gt; On Wed, 15 Nov 2017, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt; On Wed, Nov 15, 2017 at 05:04:26PM +0300, Kirill A. Shutemov wrote:</span>
<span class="quote">&gt; &gt;  	/* requesting a specific address */</span>
<span class="quote">&gt; &gt;  	if (addr) {</span>
<span class="quote">&gt; &gt; -		addr = PAGE_ALIGN(addr);</span>
<span class="quote">&gt; &gt; +		addr &amp;= PAGE_MASK;</span>
<span class="quote">&gt; &gt;  		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt; &gt;  			goto get_unmapped_area;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; &gt; index 92db903c3dad..00b296617ca4 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="quote">&gt; &gt; @@ -166,7 +166,7 @@ hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	if (addr) {</span>
<span class="quote">&gt; &gt; -		addr = ALIGN(addr, huge_page_size(h));</span>
<span class="quote">&gt; &gt; +		addr &amp;= huge_page_mask(h);</span>
<span class="quote">&gt; &gt;  		if (!mmap_address_hint_valid(addr, len))</span>
<span class="quote">&gt; &gt;  			goto get_unmapped_area;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That should work. Care to pickup my variant, make the fixups and resend</span>
<span class="quote">&gt; along with the selftest which covers both normal and huge mappings?</span>

Sure.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index 835b78720ca2..676774b9bb8d 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -198,7 +198,7 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 
 	/* requesting a specific address */
 	if (addr) {
<span class="p_del">-		addr = PAGE_ALIGN(addr);</span>
<span class="p_add">+		addr &amp;= PAGE_MASK;</span>
 		if (!mmap_address_hint_valid(addr, len))
 			goto get_unmapped_area;
 
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 92db903c3dad..00b296617ca4 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -166,7 +166,7 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 	}
 
 	if (addr) {
<span class="p_del">-		addr = ALIGN(addr, huge_page_size(h));</span>
<span class="p_add">+		addr &amp;= huge_page_mask(h);</span>
 		if (!mmap_address_hint_valid(addr, len))
 			goto get_unmapped_area;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



