
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[9/9] perf stat: Move shadow stat counters into separate object - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [9/9] perf stat: Move shadow stat counters into separate object</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 3, 2015, 2:25 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1433341559-31848-10-git-send-email-jolsa@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6538521/mbox/"
   >mbox</a>
|
   <a href="/patch/6538521/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6538521/">/patch/6538521/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 4EA3D9F1CC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:27 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 09A9B20607
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:25 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id A75962061E
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jun 2015 14:27:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932987AbbFCO1M (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jun 2015 10:27:12 -0400
Received: from mx1.redhat.com ([209.132.183.28]:34840 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S932951AbbFCO0w (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jun 2015 10:26:52 -0400
Received: from int-mx09.intmail.prod.int.phx2.redhat.com
	(int-mx09.intmail.prod.int.phx2.redhat.com [10.5.11.22])
	by mx1.redhat.com (Postfix) with ESMTPS id C04BAC6578;
	Wed,  3 Jun 2015 14:26:51 +0000 (UTC)
Received: from krava.redhat.com (vpn-203-104.tlv.redhat.com [10.35.203.104])
	by int-mx09.intmail.prod.int.phx2.redhat.com (8.14.4/8.14.4) with
	ESMTP id t53EQ0Aa030580; Wed, 3 Jun 2015 10:26:47 -0400
From: Jiri Olsa &lt;jolsa@kernel.org&gt;
To: Arnaldo Carvalho de Melo &lt;acme@kernel.org&gt;
Cc: lkml &lt;linux-kernel@vger.kernel.org&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Paul Mackerras &lt;paulus@samba.org&gt;, David Ahern &lt;dsahern@gmail.com&gt;,
	Namhyung Kim &lt;namhyung@kernel.org&gt;, Ingo Molnar &lt;mingo@kernel.org&gt;,
	Andi Kleen &lt;ak@linux.intel.com&gt;, Stephane Eranian &lt;eranian@google.com&gt;
Subject: [PATCH 9/9] perf stat: Move shadow stat counters into separate
	object
Date: Wed,  3 Jun 2015 16:25:59 +0200
Message-Id: &lt;1433341559-31848-10-git-send-email-jolsa@kernel.org&gt;
In-Reply-To: &lt;1433341559-31848-1-git-send-email-jolsa@kernel.org&gt;
References: &lt;1433341559-31848-1-git-send-email-jolsa@kernel.org&gt;
X-Scanned-By: MIMEDefang 2.68 on 10.5.11.22
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	T_RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=95161">Jiri Olsa</a> - June 3, 2015, 2:25 p.m.</div>
<pre class="content">
Separating shadow counters code into separate object
as a cleanup, but mainly for upcomming changes, so
could use it from script command context.

Link: http://lkml.kernel.org/n/tip-ic34l55jem02kx4h3wodn7ql@git.kernel.org
<span class="signed-off-by">Signed-off-by: Jiri Olsa &lt;jolsa@kernel.org&gt;</span>
---
 tools/perf/builtin-stat.c     | 444 +-----------------------------------------
 tools/perf/util/Build         |   1 +
 tools/perf/util/stat-shadow.c | 434 +++++++++++++++++++++++++++++++++++++++++
 tools/perf/util/stat.h        |  16 ++
 4 files changed, 455 insertions(+), 440 deletions(-)
 create mode 100644 tools/perf/util/stat-shadow.c
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 50918dc9fb31..ff3d25803400 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -102,13 +102,6 @@</span> <span class="p_context"> static struct target target = {</span>
 	.uid	= UINT_MAX,
 };
 
<span class="p_del">-enum aggr_mode {</span>
<span class="p_del">-	AGGR_NONE,</span>
<span class="p_del">-	AGGR_GLOBAL,</span>
<span class="p_del">-	AGGR_SOCKET,</span>
<span class="p_del">-	AGGR_CORE,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
 static int			run_count			=  1;
 static bool			no_inherit			= false;
 static bool			scale				=  true;
<span class="p_chunk">@@ -234,72 +227,6 @@</span> <span class="p_context"> out_free:</span>
 	return -1;
 }
 
<span class="p_del">-enum {</span>
<span class="p_del">-	CTX_BIT_USER	= 1 &lt;&lt; 0,</span>
<span class="p_del">-	CTX_BIT_KERNEL	= 1 &lt;&lt; 1,</span>
<span class="p_del">-	CTX_BIT_HV	= 1 &lt;&lt; 2,</span>
<span class="p_del">-	CTX_BIT_HOST	= 1 &lt;&lt; 3,</span>
<span class="p_del">-	CTX_BIT_IDLE	= 1 &lt;&lt; 4,</span>
<span class="p_del">-	CTX_BIT_MAX	= 1 &lt;&lt; 5,</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-#define NUM_CTX CTX_BIT_MAX</span>
<span class="p_del">-</span>
<span class="p_del">-static struct stats runtime_nsecs_stats[MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cycles_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_stalled_cycles_front_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_stalled_cycles_back_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_branches_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cacherefs_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_l1_dcache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_l1_icache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_ll_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_itlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats walltime_nsecs_stats;</span>
<span class="p_del">-static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_del">-</span>
<span class="p_del">-static int evsel_context(struct perf_evsel *evsel)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int ctx = 0;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (evsel-&gt;attr.exclude_kernel)</span>
<span class="p_del">-		ctx |= CTX_BIT_KERNEL;</span>
<span class="p_del">-	if (evsel-&gt;attr.exclude_user)</span>
<span class="p_del">-		ctx |= CTX_BIT_USER;</span>
<span class="p_del">-	if (evsel-&gt;attr.exclude_hv)</span>
<span class="p_del">-		ctx |= CTX_BIT_HV;</span>
<span class="p_del">-	if (evsel-&gt;attr.exclude_host)</span>
<span class="p_del">-		ctx |= CTX_BIT_HOST;</span>
<span class="p_del">-	if (evsel-&gt;attr.exclude_idle)</span>
<span class="p_del">-		ctx |= CTX_BIT_IDLE;</span>
<span class="p_del">-</span>
<span class="p_del">-	return ctx;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void reset_shadow_stats(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	memset(runtime_nsecs_stats, 0, sizeof(runtime_nsecs_stats));</span>
<span class="p_del">-	memset(runtime_cycles_stats, 0, sizeof(runtime_cycles_stats));</span>
<span class="p_del">-	memset(runtime_stalled_cycles_front_stats, 0, sizeof(runtime_stalled_cycles_front_stats));</span>
<span class="p_del">-	memset(runtime_stalled_cycles_back_stats, 0, sizeof(runtime_stalled_cycles_back_stats));</span>
<span class="p_del">-	memset(runtime_branches_stats, 0, sizeof(runtime_branches_stats));</span>
<span class="p_del">-	memset(runtime_cacherefs_stats, 0, sizeof(runtime_cacherefs_stats));</span>
<span class="p_del">-	memset(runtime_l1_dcache_stats, 0, sizeof(runtime_l1_dcache_stats));</span>
<span class="p_del">-	memset(runtime_l1_icache_stats, 0, sizeof(runtime_l1_icache_stats));</span>
<span class="p_del">-	memset(runtime_ll_cache_stats, 0, sizeof(runtime_ll_cache_stats));</span>
<span class="p_del">-	memset(runtime_itlb_cache_stats, 0, sizeof(runtime_itlb_cache_stats));</span>
<span class="p_del">-	memset(runtime_dtlb_cache_stats, 0, sizeof(runtime_dtlb_cache_stats));</span>
<span class="p_del">-	memset(runtime_cycles_in_tx_stats, 0,</span>
<span class="p_del">-			sizeof(runtime_cycles_in_tx_stats));</span>
<span class="p_del">-	memset(runtime_transaction_stats, 0,</span>
<span class="p_del">-		sizeof(runtime_transaction_stats));</span>
<span class="p_del">-	memset(runtime_elision_stats, 0, sizeof(runtime_elision_stats));</span>
<span class="p_del">-	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void perf_stat__reset_stats(struct perf_evlist *evlist)
 {
 	struct perf_evsel *evsel;
<span class="p_chunk">@@ -309,7 +236,7 @@</span> <span class="p_context"> static void perf_stat__reset_stats(struct perf_evlist *evlist)</span>
 		perf_evsel__reset_counts(evsel, perf_evsel__nr_cpus(evsel));
 	}
 
<span class="p_del">-	reset_shadow_stats();</span>
<span class="p_add">+	perf_stat__reset_shadow_stats();</span>
 }
 
 static int create_perf_stat_counter(struct perf_evsel *evsel)
<span class="p_chunk">@@ -346,46 +273,6 @@</span> <span class="p_context"> static inline int nsec_counter(struct perf_evsel *evsel)</span>
 	return 0;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Update various tracking values we maintain to print</span>
<span class="p_del">- * more semantic information such as miss/hit ratios,</span>
<span class="p_del">- * instruction rates, etc:</span>
<span class="p_del">- */</span>
<span class="p_del">-static void update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="p_del">-				int cpu)</span>
<span class="p_del">-{</span>
<span class="p_del">-	int ctx = evsel_context(counter);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (perf_evsel__match(counter, SOFTWARE, SW_TASK_CLOCK))</span>
<span class="p_del">-		update_stats(&amp;runtime_nsecs_stats[cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HARDWARE, HW_CPU_CYCLES))</span>
<span class="p_del">-		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_stat_evsel__is(counter, CYCLES_IN_TX))</span>
<span class="p_del">-		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_stat_evsel__is(counter, TRANSACTION_START))</span>
<span class="p_del">-		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_stat_evsel__is(counter, ELISION_START))</span>
<span class="p_del">-		update_stats(&amp;runtime_elision_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))</span>
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))</span>
<span class="p_del">-		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HARDWARE, HW_BRANCH_INSTRUCTIONS))</span>
<span class="p_del">-		update_stats(&amp;runtime_branches_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HARDWARE, HW_CACHE_REFERENCES))</span>
<span class="p_del">-		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1D))</span>
<span class="p_del">-		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1I))</span>
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_LL))</span>
<span class="p_del">-		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_DTLB))</span>
<span class="p_del">-		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))</span>
<span class="p_del">-		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void zero_per_pkg(struct perf_evsel *counter)
 {
 	if (counter-&gt;per_pkg_mask)
<span class="p_chunk">@@ -446,7 +333,7 @@</span> <span class="p_context"> static int read_cb(struct perf_evsel *evsel, int cpu, int thread __maybe_unused,</span>
 		perf_counts_values__scale(count, scale, NULL);
 		evsel-&gt;counts-&gt;cpu[cpu] = *count;
 		if (aggr_mode == AGGR_NONE)
<span class="p_del">-			update_shadow_stats(evsel, count-&gt;values, cpu);</span>
<span class="p_add">+			perf_stat__update_shadow_stats(evsel, count-&gt;values, cpu);</span>
 		break;
 	case AGGR_GLOBAL:
 		aggr-&gt;val += count-&gt;val;
<span class="p_chunk">@@ -494,7 +381,7 @@</span> <span class="p_context"> static int read_counter_aggr(struct perf_evsel *counter)</span>
 	/*
 	 * Save the full runtime - to allow normalization during printout:
 	 */
<span class="p_del">-	update_shadow_stats(counter, count, 0);</span>
<span class="p_add">+	perf_stat__update_shadow_stats(counter, count, 0);</span>
 
 	return 0;
 }
<span class="p_chunk">@@ -872,329 +759,6 @@</span> <span class="p_context"> static void nsec_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 		fprintf(output, &quot;                                   &quot;);
 }
 
<span class="p_del">-/* used for get_ratio_color() */</span>
<span class="p_del">-enum grc_type {</span>
<span class="p_del">-	GRC_STALLED_CYCLES_FE,</span>
<span class="p_del">-	GRC_STALLED_CYCLES_BE,</span>
<span class="p_del">-	GRC_CACHE_MISSES,</span>
<span class="p_del">-	GRC_MAX_NR</span>
<span class="p_del">-};</span>
<span class="p_del">-</span>
<span class="p_del">-static const char *get_ratio_color(enum grc_type type, double ratio)</span>
<span class="p_del">-{</span>
<span class="p_del">-	static const double grc_table[GRC_MAX_NR][3] = {</span>
<span class="p_del">-		[GRC_STALLED_CYCLES_FE] = { 50.0, 30.0, 10.0 },</span>
<span class="p_del">-		[GRC_STALLED_CYCLES_BE] = { 75.0, 50.0, 20.0 },</span>
<span class="p_del">-		[GRC_CACHE_MISSES] 	= { 20.0, 10.0, 5.0 },</span>
<span class="p_del">-	};</span>
<span class="p_del">-	const char *color = PERF_COLOR_NORMAL;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (ratio &gt; grc_table[type][0])</span>
<span class="p_del">-		color = PERF_COLOR_RED;</span>
<span class="p_del">-	else if (ratio &gt; grc_table[type][1])</span>
<span class="p_del">-		color = PERF_COLOR_MAGENTA;</span>
<span class="p_del">-	else if (ratio &gt; grc_table[type][2])</span>
<span class="p_del">-		color = PERF_COLOR_YELLOW;</span>
<span class="p_del">-</span>
<span class="p_del">-	return color;</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="p_del">-					  struct perf_evsel *evsel</span>
<span class="p_del">-					  __maybe_unused, double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="p_del">-					 struct perf_evsel *evsel</span>
<span class="p_del">-					 __maybe_unused, double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_branch_misses(FILE *out, int cpu,</span>
<span class="p_del">-				struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_branches_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="p_del">-				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				   double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_l1_dcache_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="p_del">-				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				   double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_l1_icache_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_del">-				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				    double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_del">-				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				    double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_itlb_cache_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="p_del">-				  struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_del">-				  double avg)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0;</span>
<span class="p_del">-	const char *color;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	total = avg_stats(&amp;runtime_ll_cache_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (total)</span>
<span class="p_del">-		ratio = avg / total * 100.0;</span>
<span class="p_del">-</span>
<span class="p_del">-	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-			       double avg, int cpu, enum aggr_mode aggr)</span>
<span class="p_del">-{</span>
<span class="p_del">-	double total, ratio = 0.0, total2;</span>
<span class="p_del">-	int ctx = evsel_context(evsel);</span>
<span class="p_del">-</span>
<span class="p_del">-	if (perf_evsel__match(evsel, HARDWARE, HW_INSTRUCTIONS)) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-		if (total) {</span>
<span class="p_del">-			ratio = avg / total;</span>
<span class="p_del">-			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_del">-		}</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="p_del">-		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total &amp;&amp; avg) {</span>
<span class="p_del">-			ratio = total / avg;</span>
<span class="p_del">-			fprintf(out, &quot;\n&quot;);</span>
<span class="p_del">-			if (aggr == AGGR_NONE)</span>
<span class="p_del">-				fprintf(out, &quot;        &quot;);</span>
<span class="p_del">-			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (</span>
<span class="p_del">-		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_del">-		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (</span>
<span class="p_del">-		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_del">-		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (</span>
<span class="p_del">-		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_del">-		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (</span>
<span class="p_del">-		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_del">-		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (</span>
<span class="p_del">-		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_del">-		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			ratio = avg * 100 / total;</span>
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_del">-</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {</span>
<span class="p_del">-		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {</span>
<span class="p_del">-		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total) {</span>
<span class="p_del">-			ratio = avg / total;</span>
<span class="p_del">-			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_del">-		} else {</span>
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="p_del">-				100.0 * (avg / total));</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_del">-		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_del">-		if (total2 &lt; avg)</span>
<span class="p_del">-			total2 = avg;</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="p_del">-				100.0 * ((total2-avg) / total));</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="p_del">-		   avg &gt; 0 &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			ratio = total / avg;</span>
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="p_del">-		   avg &gt; 0 &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			ratio = total / avg;</span>
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_del">-	} else if (runtime_nsecs_stats[cpu].n != 0) {</span>
<span class="p_del">-		char unit = &#39;M&#39;;</span>
<span class="p_del">-</span>
<span class="p_del">-		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_del">-</span>
<span class="p_del">-		if (total)</span>
<span class="p_del">-			ratio = 1000.0 * avg / total;</span>
<span class="p_del">-		if (ratio &lt; 0.001) {</span>
<span class="p_del">-			ratio *= 1000;</span>
<span class="p_del">-			unit = &#39;K&#39;;</span>
<span class="p_del">-		}</span>
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		fprintf(out, &quot;                                   &quot;);</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)
 {
 	double sc =  evsel-&gt;scale;
<span class="p_chunk">@@ -1230,7 +794,7 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 	if (csv_output || interval)
 		return;
 
<span class="p_del">-	print_shadow_stats(output, evsel, avg, cpu, aggr_mode);</span>
<span class="p_add">+	perf_stat__print_shadow_stats(output, evsel, avg, cpu, aggr_mode);</span>
 }
 
 static void print_aggr(char *prefix)
<span class="p_header">diff --git a/tools/perf/util/Build b/tools/perf/util/Build</span>
<span class="p_header">index e4b676de2f64..586a59d46022 100644</span>
<span class="p_header">--- a/tools/perf/util/Build</span>
<span class="p_header">+++ b/tools/perf/util/Build</span>
<span class="p_chunk">@@ -68,6 +68,7 @@</span> <span class="p_context"> libperf-y += rblist.o</span>
 libperf-y += intlist.o
 libperf-y += vdso.o
 libperf-y += stat.o
<span class="p_add">+libperf-y += stat-shadow.o</span>
 libperf-y += record.o
 libperf-y += srcline.o
 libperf-y += data.o
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
new file mode 100644
<span class="p_header">index 000000000000..53e8bb7bc852</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -0,0 +1,434 @@</span> <span class="p_context"></span>
<span class="p_add">+#include &lt;stdio.h&gt;</span>
<span class="p_add">+#include &quot;evsel.h&quot;</span>
<span class="p_add">+#include &quot;stat.h&quot;</span>
<span class="p_add">+#include &quot;color.h&quot;</span>
<span class="p_add">+</span>
<span class="p_add">+enum {</span>
<span class="p_add">+	CTX_BIT_USER	= 1 &lt;&lt; 0,</span>
<span class="p_add">+	CTX_BIT_KERNEL	= 1 &lt;&lt; 1,</span>
<span class="p_add">+	CTX_BIT_HV	= 1 &lt;&lt; 2,</span>
<span class="p_add">+	CTX_BIT_HOST	= 1 &lt;&lt; 3,</span>
<span class="p_add">+	CTX_BIT_IDLE	= 1 &lt;&lt; 4,</span>
<span class="p_add">+	CTX_BIT_MAX	= 1 &lt;&lt; 5,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define NUM_CTX CTX_BIT_MAX</span>
<span class="p_add">+</span>
<span class="p_add">+static struct stats runtime_nsecs_stats[MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_cycles_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_stalled_cycles_front_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_stalled_cycles_back_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_branches_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_cacherefs_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_l1_dcache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_l1_icache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_ll_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_itlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_dtlb_cache_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_cycles_in_tx_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_transaction_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+static struct stats runtime_elision_stats[NUM_CTX][MAX_NR_CPUS];</span>
<span class="p_add">+</span>
<span class="p_add">+struct stats walltime_nsecs_stats;</span>
<span class="p_add">+</span>
<span class="p_add">+static int evsel_context(struct perf_evsel *evsel)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ctx = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (evsel-&gt;attr.exclude_kernel)</span>
<span class="p_add">+		ctx |= CTX_BIT_KERNEL;</span>
<span class="p_add">+	if (evsel-&gt;attr.exclude_user)</span>
<span class="p_add">+		ctx |= CTX_BIT_USER;</span>
<span class="p_add">+	if (evsel-&gt;attr.exclude_hv)</span>
<span class="p_add">+		ctx |= CTX_BIT_HV;</span>
<span class="p_add">+	if (evsel-&gt;attr.exclude_host)</span>
<span class="p_add">+		ctx |= CTX_BIT_HOST;</span>
<span class="p_add">+	if (evsel-&gt;attr.exclude_idle)</span>
<span class="p_add">+		ctx |= CTX_BIT_IDLE;</span>
<span class="p_add">+</span>
<span class="p_add">+	return ctx;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__reset_shadow_stats(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	memset(runtime_nsecs_stats, 0, sizeof(runtime_nsecs_stats));</span>
<span class="p_add">+	memset(runtime_cycles_stats, 0, sizeof(runtime_cycles_stats));</span>
<span class="p_add">+	memset(runtime_stalled_cycles_front_stats, 0, sizeof(runtime_stalled_cycles_front_stats));</span>
<span class="p_add">+	memset(runtime_stalled_cycles_back_stats, 0, sizeof(runtime_stalled_cycles_back_stats));</span>
<span class="p_add">+	memset(runtime_branches_stats, 0, sizeof(runtime_branches_stats));</span>
<span class="p_add">+	memset(runtime_cacherefs_stats, 0, sizeof(runtime_cacherefs_stats));</span>
<span class="p_add">+	memset(runtime_l1_dcache_stats, 0, sizeof(runtime_l1_dcache_stats));</span>
<span class="p_add">+	memset(runtime_l1_icache_stats, 0, sizeof(runtime_l1_icache_stats));</span>
<span class="p_add">+	memset(runtime_ll_cache_stats, 0, sizeof(runtime_ll_cache_stats));</span>
<span class="p_add">+	memset(runtime_itlb_cache_stats, 0, sizeof(runtime_itlb_cache_stats));</span>
<span class="p_add">+	memset(runtime_dtlb_cache_stats, 0, sizeof(runtime_dtlb_cache_stats));</span>
<span class="p_add">+	memset(runtime_cycles_in_tx_stats, 0,</span>
<span class="p_add">+			sizeof(runtime_cycles_in_tx_stats));</span>
<span class="p_add">+	memset(runtime_transaction_stats, 0,</span>
<span class="p_add">+		sizeof(runtime_transaction_stats));</span>
<span class="p_add">+	memset(runtime_elision_stats, 0, sizeof(runtime_elision_stats));</span>
<span class="p_add">+	memset(&amp;walltime_nsecs_stats, 0, sizeof(walltime_nsecs_stats));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Update various tracking values we maintain to print</span>
<span class="p_add">+ * more semantic information such as miss/hit ratios,</span>
<span class="p_add">+ * instruction rates, etc:</span>
<span class="p_add">+ */</span>
<span class="p_add">+void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="p_add">+				    int cpu)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ctx = evsel_context(counter);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (perf_evsel__match(counter, SOFTWARE, SW_TASK_CLOCK))</span>
<span class="p_add">+		update_stats(&amp;runtime_nsecs_stats[cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HARDWARE, HW_CPU_CYCLES))</span>
<span class="p_add">+		update_stats(&amp;runtime_cycles_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, CYCLES_IN_TX))</span>
<span class="p_add">+		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, TRANSACTION_START))</span>
<span class="p_add">+		update_stats(&amp;runtime_transaction_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_stat_evsel__is(counter, ELISION_START))</span>
<span class="p_add">+		update_stats(&amp;runtime_elision_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_FRONTEND))</span>
<span class="p_add">+		update_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HARDWARE, HW_STALLED_CYCLES_BACKEND))</span>
<span class="p_add">+		update_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HARDWARE, HW_BRANCH_INSTRUCTIONS))</span>
<span class="p_add">+		update_stats(&amp;runtime_branches_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HARDWARE, HW_CACHE_REFERENCES))</span>
<span class="p_add">+		update_stats(&amp;runtime_cacherefs_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1D))</span>
<span class="p_add">+		update_stats(&amp;runtime_l1_dcache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_L1I))</span>
<span class="p_add">+		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_LL))</span>
<span class="p_add">+		update_stats(&amp;runtime_ll_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_DTLB))</span>
<span class="p_add">+		update_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+	else if (perf_evsel__match(counter, HW_CACHE, HW_CACHE_ITLB))</span>
<span class="p_add">+		update_stats(&amp;runtime_itlb_cache_stats[ctx][cpu], count[0]);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* used for get_ratio_color() */</span>
<span class="p_add">+enum grc_type {</span>
<span class="p_add">+	GRC_STALLED_CYCLES_FE,</span>
<span class="p_add">+	GRC_STALLED_CYCLES_BE,</span>
<span class="p_add">+	GRC_CACHE_MISSES,</span>
<span class="p_add">+	GRC_MAX_NR</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char *get_ratio_color(enum grc_type type, double ratio)</span>
<span class="p_add">+{</span>
<span class="p_add">+	static const double grc_table[GRC_MAX_NR][3] = {</span>
<span class="p_add">+		[GRC_STALLED_CYCLES_FE] = { 50.0, 30.0, 10.0 },</span>
<span class="p_add">+		[GRC_STALLED_CYCLES_BE] = { 75.0, 50.0, 20.0 },</span>
<span class="p_add">+		[GRC_CACHE_MISSES] 	= { 20.0, 10.0, 5.0 },</span>
<span class="p_add">+	};</span>
<span class="p_add">+	const char *color = PERF_COLOR_NORMAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (ratio &gt; grc_table[type][0])</span>
<span class="p_add">+		color = PERF_COLOR_RED;</span>
<span class="p_add">+	else if (ratio &gt; grc_table[type][1])</span>
<span class="p_add">+		color = PERF_COLOR_MAGENTA;</span>
<span class="p_add">+	else if (ratio &gt; grc_table[type][2])</span>
<span class="p_add">+		color = PERF_COLOR_YELLOW;</span>
<span class="p_add">+</span>
<span class="p_add">+	return color;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="p_add">+					  struct perf_evsel *evsel</span>
<span class="p_add">+					  __maybe_unused, double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="p_add">+					 struct perf_evsel *evsel</span>
<span class="p_add">+					 __maybe_unused, double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_branch_misses(FILE *out, int cpu,</span>
<span class="p_add">+				struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_branches_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="p_add">+				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				   double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_l1_dcache_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="p_add">+				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				   double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_l1_icache_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				    double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_dtlb_cache_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				    double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_itlb_cache_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+				  struct perf_evsel *evsel __maybe_unused,</span>
<span class="p_add">+				  double avg)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0;</span>
<span class="p_add">+	const char *color;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	total = avg_stats(&amp;runtime_ll_cache_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (total)</span>
<span class="p_add">+		ratio = avg / total * 100.0;</span>
<span class="p_add">+</span>
<span class="p_add">+	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	fprintf(out, &quot; #  &quot;);</span>
<span class="p_add">+	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_add">+	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	double total, ratio = 0.0, total2;</span>
<span class="p_add">+	int ctx = evsel_context(evsel);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (perf_evsel__match(evsel, HARDWARE, HW_INSTRUCTIONS)) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+		if (total) {</span>
<span class="p_add">+			ratio = avg / total;</span>
<span class="p_add">+			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="p_add">+		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total &amp;&amp; avg) {</span>
<span class="p_add">+			ratio = total / avg;</span>
<span class="p_add">+			fprintf(out, &quot;\n&quot;);</span>
<span class="p_add">+			if (aggr == AGGR_NONE)</span>
<span class="p_add">+				fprintf(out, &quot;        &quot;);</span>
<span class="p_add">+			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="p_add">+			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (</span>
<span class="p_add">+		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_add">+		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_add">+			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (</span>
<span class="p_add">+		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_add">+		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_add">+			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (</span>
<span class="p_add">+		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_add">+		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_add">+			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (</span>
<span class="p_add">+		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_add">+		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_add">+			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (</span>
<span class="p_add">+		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="p_add">+		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="p_add">+					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_add">+			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="p_add">+			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			ratio = avg * 100 / total;</span>
<span class="p_add">+</span>
<span class="p_add">+		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_add">+</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {</span>
<span class="p_add">+		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {</span>
<span class="p_add">+		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total) {</span>
<span class="p_add">+			ratio = avg / total;</span>
<span class="p_add">+			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			fprintf(out,</span>
<span class="p_add">+				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="p_add">+				100.0 * (avg / total));</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="p_add">+		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+		if (total2 &lt; avg)</span>
<span class="p_add">+			total2 = avg;</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			fprintf(out,</span>
<span class="p_add">+				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="p_add">+				100.0 * ((total2-avg) / total));</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="p_add">+		   avg &gt; 0 &amp;&amp;</span>
<span class="p_add">+		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			ratio = total / avg;</span>
<span class="p_add">+</span>
<span class="p_add">+		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="p_add">+		   avg &gt; 0 &amp;&amp;</span>
<span class="p_add">+		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			ratio = total / avg;</span>
<span class="p_add">+</span>
<span class="p_add">+		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_add">+	} else if (runtime_nsecs_stats[cpu].n != 0) {</span>
<span class="p_add">+		char unit = &#39;M&#39;;</span>
<span class="p_add">+</span>
<span class="p_add">+		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (total)</span>
<span class="p_add">+			ratio = 1000.0 * avg / total;</span>
<span class="p_add">+		if (ratio &lt; 0.001) {</span>
<span class="p_add">+			ratio *= 1000;</span>
<span class="p_add">+			unit = &#39;K&#39;;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 3df529bd0774..615c779eb42a 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -2,6 +2,7 @@</span> <span class="p_context"></span>
 #define __PERF_STATS_H
 
 #include &lt;linux/types.h&gt;
<span class="p_add">+#include &lt;stdio.h&gt;</span>
 
 struct stats
 {
<span class="p_chunk">@@ -23,6 +24,13 @@</span> <span class="p_context"> struct perf_stat {</span>
 	enum perf_stat_evsel_id	id;
 };
 
<span class="p_add">+enum aggr_mode {</span>
<span class="p_add">+	AGGR_NONE,</span>
<span class="p_add">+	AGGR_GLOBAL,</span>
<span class="p_add">+	AGGR_SOCKET,</span>
<span class="p_add">+	AGGR_CORE,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 void update_stats(struct stats *stats, u64 val);
 double avg_stats(struct stats *stats);
 double stddev_stats(struct stats *stats);
<span class="p_chunk">@@ -46,4 +54,12 @@</span> <span class="p_context"> bool __perf_evsel_stat__is(struct perf_evsel *evsel,</span>
 
 void perf_stat_evsel_id_init(struct perf_evsel *evsel);
 
<span class="p_add">+extern struct stats walltime_nsecs_stats;</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__reset_shadow_stats(void);</span>
<span class="p_add">+void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="p_add">+				    int cpu);</span>
<span class="p_add">+void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu, enum aggr_mode aggr);</span>
<span class="p_add">+</span>
 #endif

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



