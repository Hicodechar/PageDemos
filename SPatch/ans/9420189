
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[swiotlb,v3,3/3] swiotlb: Add support for DMA_ATTR_SKIP_CPU_SYNC - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [swiotlb,v3,3/3] swiotlb: Add support for DMA_ATTR_SKIP_CPU_SYNC</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=1465">Duyck, Alexander H</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 9, 2016, 3:20 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161109152039.25151.37018.stgit@ahduyck-blue-test.jf.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9420189/mbox/"
   >mbox</a>
|
   <a href="/patch/9420189/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9420189/">/patch/9420189/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D500860585 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Nov 2016 21:22:17 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C841E2933B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Nov 2016 21:22:17 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BCD00293FC; Wed,  9 Nov 2016 21:22:17 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.4 required=2.0 tests=BAYES_00, DATE_IN_PAST_06_12,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D70752933B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Nov 2016 21:22:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754643AbcKIVV4 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 9 Nov 2016 16:21:56 -0500
Received: from mga11.intel.com ([192.55.52.93]:64208 &quot;EHLO mga11.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754139AbcKIVVx (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 9 Nov 2016 16:21:53 -0500
Received: from fmsmga005.fm.intel.com ([10.253.24.32])
	by fmsmga102.fm.intel.com with ESMTP; 09 Nov 2016 13:21:53 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.31,615,1473145200&quot;; d=&quot;scan&#39;208&quot;;a=&quot;29426211&quot;
Received: from ahduyck-blue-test.jf.intel.com ([134.134.2.201])
	by fmsmga005.fm.intel.com with ESMTP; 09 Nov 2016 13:21:53 -0800
Subject: [swiotlb PATCH v3 3/3] swiotlb: Add support for
	DMA_ATTR_SKIP_CPU_SYNC
From: Alexander Duyck &lt;alexander.h.duyck@intel.com&gt;
To: linux-mm@kvack.org, konrad.wilk@oracle.com
Cc: netdev@vger.kernel.org, linux-kernel@vger.kernel.org
Date: Wed, 09 Nov 2016 10:20:49 -0500
Message-ID: &lt;20161109152039.25151.37018.stgit@ahduyck-blue-test.jf.intel.com&gt;
In-Reply-To: &lt;20161109151639.25151.24290.stgit@ahduyck-blue-test.jf.intel.com&gt;
References: &lt;20161109151639.25151.24290.stgit@ahduyck-blue-test.jf.intel.com&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=1465">Duyck, Alexander H</a> - Nov. 9, 2016, 3:20 p.m.</div>
<pre class="content">
As a first step to making DMA_ATTR_SKIP_CPU_SYNC apply to architectures
beyond just ARM I need to make it so that the swiotlb will respect the
flag.  In order to do that I also need to update the swiotlb-xen since it
heavily makes use of the functionality.

In addition I am applying the attribute to the unmap calls in the case of
map_single or map_sg has to later destroy a buffer because the device is
not able to access the DMA region.
<span class="signed-off-by">
Signed-off-by: Alexander Duyck &lt;alexander.h.duyck@intel.com&gt;</span>
---

v1: Found different fix for avoiding lines longer than 80 characters
    Dropped code that moved section to a label at end of function.
    Split out mapping error fix to separate patch.
v3: Used 0 where applying DMA_ATTR_SKIP_CPU_SYNC is redundant
    Applied DMA_ATTR_SKIP_CPU_SYNC to attr instead of ORing in parameter
    Unwrap a few lines that are more readable as a single line
    Updated patch to work with changes in xen_swiotlb_map_page code flow

 drivers/xen/swiotlb-xen.c |   10 ++++++----
 include/linux/swiotlb.h   |    6 ++++--
 lib/swiotlb.c             |   37 ++++++++++++++++++++++---------------
 3 files changed, 32 insertions(+), 21 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">index c36caa5..b0d5d27 100644</span>
<span class="p_header">--- a/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">+++ b/drivers/xen/swiotlb-xen.c</span>
<span class="p_chunk">@@ -405,7 +405,7 @@</span> <span class="p_context"> dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
 	 */
 	trace_swiotlb_bounced(dev, dev_addr, size, swiotlb_force);
 
<span class="p_del">-	map = swiotlb_tbl_map_single(dev, start_dma_addr, phys, size, dir);</span>
<span class="p_add">+	map = swiotlb_tbl_map_single(dev, start_dma_addr, phys, size, dir, attrs);</span>
 	if (map == SWIOTLB_MAP_ERROR)
 		return DMA_ERROR_CODE;
 
<span class="p_chunk">@@ -417,7 +417,8 @@</span> <span class="p_context"> dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,</span>
 	 * Ensure that the address returned is DMA&#39;ble
 	 */
 	if (!dma_capable(dev, dev_addr, size)) {
<span class="p_del">-		swiotlb_tbl_unmap_single(dev, map, size, dir);</span>
<span class="p_add">+		attrs |= DMA_ATTR_SKIP_CPU_SYNC;</span>
<span class="p_add">+		swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);</span>
 		return DMA_ERROR_CODE;
 	}
 	return dev_addr;
<span class="p_chunk">@@ -444,7 +445,7 @@</span> <span class="p_context"> static void xen_unmap_single(struct device *hwdev, dma_addr_t dev_addr,</span>
 
 	/* NOTE: We use dev_addr here, not paddr! */
 	if (is_xen_swiotlb_buffer(dev_addr)) {
<span class="p_del">-		swiotlb_tbl_unmap_single(hwdev, paddr, size, dir);</span>
<span class="p_add">+		swiotlb_tbl_unmap_single(hwdev, paddr, size, dir, attrs);</span>
 		return;
 	}
 
<span class="p_chunk">@@ -557,11 +558,12 @@</span> <span class="p_context"> xen_swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
 								 start_dma_addr,
 								 sg_phys(sg),
 								 sg-&gt;length,
<span class="p_del">-								 dir);</span>
<span class="p_add">+								 dir, attrs);</span>
 			if (map == SWIOTLB_MAP_ERROR) {
 				dev_warn(hwdev, &quot;swiotlb buffer is full\n&quot;);
 				/* Don&#39;t panic here, we expect map_sg users
 				   to do proper error handling. */
<span class="p_add">+				attrs |= DMA_ATTR_SKIP_CPU_SYNC;</span>
 				xen_swiotlb_unmap_sg_attrs(hwdev, sgl, i, dir,
 							   attrs);
 				sg_dma_len(sgl) = 0;
<span class="p_header">diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h</span>
<span class="p_header">index f0d2589..183f37c 100644</span>
<span class="p_header">--- a/include/linux/swiotlb.h</span>
<span class="p_header">+++ b/include/linux/swiotlb.h</span>
<span class="p_chunk">@@ -44,11 +44,13 @@</span> <span class="p_context"> enum dma_sync_target {</span>
 extern phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,
 					  dma_addr_t tbl_dma_addr,
 					  phys_addr_t phys, size_t size,
<span class="p_del">-					  enum dma_data_direction dir);</span>
<span class="p_add">+					  enum dma_data_direction dir,</span>
<span class="p_add">+					  unsigned long attrs);</span>
 
 extern void swiotlb_tbl_unmap_single(struct device *hwdev,
 				     phys_addr_t tlb_addr,
<span class="p_del">-				     size_t size, enum dma_data_direction dir);</span>
<span class="p_add">+				     size_t size, enum dma_data_direction dir,</span>
<span class="p_add">+				     unsigned long attrs);</span>
 
 extern void swiotlb_tbl_sync_single(struct device *hwdev,
 				    phys_addr_t tlb_addr,
<span class="p_header">diff --git a/lib/swiotlb.c b/lib/swiotlb.c</span>
<span class="p_header">index 5005316..1fa0491 100644</span>
<span class="p_header">--- a/lib/swiotlb.c</span>
<span class="p_header">+++ b/lib/swiotlb.c</span>
<span class="p_chunk">@@ -425,7 +425,8 @@</span> <span class="p_context"> static void swiotlb_bounce(phys_addr_t orig_addr, phys_addr_t tlb_addr,</span>
 phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,
 				   dma_addr_t tbl_dma_addr,
 				   phys_addr_t orig_addr, size_t size,
<span class="p_del">-				   enum dma_data_direction dir)</span>
<span class="p_add">+				   enum dma_data_direction dir,</span>
<span class="p_add">+				   unsigned long attrs)</span>
 {
 	unsigned long flags;
 	phys_addr_t tlb_addr;
<span class="p_chunk">@@ -526,7 +527,8 @@</span> <span class="p_context"> found:</span>
 	 */
 	for (i = 0; i &lt; nslots; i++)
 		io_tlb_orig_addr[index+i] = orig_addr + (i &lt;&lt; IO_TLB_SHIFT);
<span class="p_del">-	if (dir == DMA_TO_DEVICE || dir == DMA_BIDIRECTIONAL)</span>
<span class="p_add">+	if (!(attrs &amp; DMA_ATTR_SKIP_CPU_SYNC) &amp;&amp;</span>
<span class="p_add">+	    (dir == DMA_TO_DEVICE || dir == DMA_BIDIRECTIONAL))</span>
 		swiotlb_bounce(orig_addr, tlb_addr, size, DMA_TO_DEVICE);
 
 	return tlb_addr;
<span class="p_chunk">@@ -539,18 +541,19 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(swiotlb_tbl_map_single);</span>
 
 static phys_addr_t
 map_single(struct device *hwdev, phys_addr_t phys, size_t size,
<span class="p_del">-	   enum dma_data_direction dir)</span>
<span class="p_add">+	   enum dma_data_direction dir, unsigned long attrs)</span>
 {
 	dma_addr_t start_dma_addr = phys_to_dma(hwdev, io_tlb_start);
 
<span class="p_del">-	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size, dir);</span>
<span class="p_add">+	return swiotlb_tbl_map_single(hwdev, start_dma_addr, phys, size, dir, attrs);</span>
 }
 
 /*
  * dma_addr is the kernel virtual address of the bounce buffer to unmap.
  */
 void swiotlb_tbl_unmap_single(struct device *hwdev, phys_addr_t tlb_addr,
<span class="p_del">-			      size_t size, enum dma_data_direction dir)</span>
<span class="p_add">+			      size_t size, enum dma_data_direction dir,</span>
<span class="p_add">+			      unsigned long attrs)</span>
 {
 	unsigned long flags;
 	int i, count, nslots = ALIGN(size, 1 &lt;&lt; IO_TLB_SHIFT) &gt;&gt; IO_TLB_SHIFT;
<span class="p_chunk">@@ -561,6 +564,7 @@</span> <span class="p_context"> void swiotlb_tbl_unmap_single(struct device *hwdev, phys_addr_t tlb_addr,</span>
 	 * First, sync the memory before unmapping the entry
 	 */
 	if (orig_addr != INVALID_PHYS_ADDR &amp;&amp;
<span class="p_add">+	    !(attrs &amp; DMA_ATTR_SKIP_CPU_SYNC) &amp;&amp;</span>
 	    ((dir == DMA_FROM_DEVICE) || (dir == DMA_BIDIRECTIONAL)))
 		swiotlb_bounce(orig_addr, tlb_addr, size, DMA_FROM_DEVICE);
 
<span class="p_chunk">@@ -654,7 +658,7 @@</span> <span class="p_context"> swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 		 * GFP_DMA memory; fall back on map_single(), which
 		 * will grab memory from the lowest available address range.
 		 */
<span class="p_del">-		phys_addr_t paddr = map_single(hwdev, 0, size, DMA_FROM_DEVICE);</span>
<span class="p_add">+		phys_addr_t paddr = map_single(hwdev, 0, size, DMA_FROM_DEVICE, 0);</span>
 		if (paddr == SWIOTLB_MAP_ERROR)
 			goto err_warn;
 
<span class="p_chunk">@@ -669,7 +673,7 @@</span> <span class="p_context"> swiotlb_alloc_coherent(struct device *hwdev, size_t size,</span>
 
 			/* DMA_TO_DEVICE to avoid memcpy in unmap_single */
 			swiotlb_tbl_unmap_single(hwdev, paddr,
<span class="p_del">-						 size, DMA_TO_DEVICE);</span>
<span class="p_add">+						 size, DMA_TO_DEVICE, 0);</span>
 			goto err_warn;
 		}
 	}
<span class="p_chunk">@@ -699,7 +703,7 @@</span> <span class="p_context"> swiotlb_free_coherent(struct device *hwdev, size_t size, void *vaddr,</span>
 		free_pages((unsigned long)vaddr, get_order(size));
 	else
 		/* DMA_TO_DEVICE to avoid memcpy in swiotlb_tbl_unmap_single */
<span class="p_del">-		swiotlb_tbl_unmap_single(hwdev, paddr, size, DMA_TO_DEVICE);</span>
<span class="p_add">+		swiotlb_tbl_unmap_single(hwdev, paddr, size, DMA_TO_DEVICE, 0);</span>
 }
 EXPORT_SYMBOL(swiotlb_free_coherent);
 
<span class="p_chunk">@@ -755,7 +759,7 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 	trace_swiotlb_bounced(dev, dev_addr, size, swiotlb_force);
 
 	/* Oh well, have to allocate and map a bounce buffer. */
<span class="p_del">-	map = map_single(dev, phys, size, dir);</span>
<span class="p_add">+	map = map_single(dev, phys, size, dir, attrs);</span>
 	if (map == SWIOTLB_MAP_ERROR) {
 		swiotlb_full(dev, size, dir, 1);
 		return phys_to_dma(dev, io_tlb_overflow_buffer);
<span class="p_chunk">@@ -765,7 +769,8 @@</span> <span class="p_context"> dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,</span>
 
 	/* Ensure that the address returned is DMA&#39;ble */
 	if (!dma_capable(dev, dev_addr, size)) {
<span class="p_del">-		swiotlb_tbl_unmap_single(dev, map, size, dir);</span>
<span class="p_add">+		attrs |= DMA_ATTR_SKIP_CPU_SYNC;</span>
<span class="p_add">+		swiotlb_tbl_unmap_single(dev, map, size, dir, attrs);</span>
 		return phys_to_dma(dev, io_tlb_overflow_buffer);
 	}
 
<span class="p_chunk">@@ -782,14 +787,15 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(swiotlb_map_page);</span>
  * whatever the device wrote there.
  */
 static void unmap_single(struct device *hwdev, dma_addr_t dev_addr,
<span class="p_del">-			 size_t size, enum dma_data_direction dir)</span>
<span class="p_add">+			 size_t size, enum dma_data_direction dir,</span>
<span class="p_add">+			 unsigned long attrs)</span>
 {
 	phys_addr_t paddr = dma_to_phys(hwdev, dev_addr);
 
 	BUG_ON(dir == DMA_NONE);
 
 	if (is_swiotlb_buffer(paddr)) {
<span class="p_del">-		swiotlb_tbl_unmap_single(hwdev, paddr, size, dir);</span>
<span class="p_add">+		swiotlb_tbl_unmap_single(hwdev, paddr, size, dir, attrs);</span>
 		return;
 	}
 
<span class="p_chunk">@@ -809,7 +815,7 @@</span> <span class="p_context"> void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,</span>
 			size_t size, enum dma_data_direction dir,
 			unsigned long attrs)
 {
<span class="p_del">-	unmap_single(hwdev, dev_addr, size, dir);</span>
<span class="p_add">+	unmap_single(hwdev, dev_addr, size, dir, attrs);</span>
 }
 EXPORT_SYMBOL_GPL(swiotlb_unmap_page);
 
<span class="p_chunk">@@ -891,11 +897,12 @@</span> <span class="p_context"> swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl, int nelems,</span>
 		if (swiotlb_force ||
 		    !dma_capable(hwdev, dev_addr, sg-&gt;length)) {
 			phys_addr_t map = map_single(hwdev, sg_phys(sg),
<span class="p_del">-						     sg-&gt;length, dir);</span>
<span class="p_add">+						     sg-&gt;length, dir, attrs);</span>
 			if (map == SWIOTLB_MAP_ERROR) {
 				/* Don&#39;t panic here, we expect map_sg users
 				   to do proper error handling. */
 				swiotlb_full(hwdev, sg-&gt;length, dir, 0);
<span class="p_add">+				attrs |= DMA_ATTR_SKIP_CPU_SYNC;</span>
 				swiotlb_unmap_sg_attrs(hwdev, sgl, i, dir,
 						       attrs);
 				sg_dma_len(sgl) = 0;
<span class="p_chunk">@@ -925,7 +932,7 @@</span> <span class="p_context"> swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,</span>
 	BUG_ON(dir == DMA_NONE);
 
 	for_each_sg(sgl, sg, nelems, i)
<span class="p_del">-		unmap_single(hwdev, sg-&gt;dma_address, sg_dma_len(sg), dir);</span>
<span class="p_add">+		unmap_single(hwdev, sg-&gt;dma_address, sg_dma_len(sg), dir, attrs);</span>
 
 }
 EXPORT_SYMBOL(swiotlb_unmap_sg_attrs);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



