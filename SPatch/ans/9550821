
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[3/4] mm: Fix checkpatch errors, whitespace errors - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [3/4] mm: Fix checkpatch errors, whitespace errors</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=161771">Tobin C. Harding</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 1, 2017, 11:37 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1485992240-10986-4-git-send-email-me@tobin.cc&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9550821/mbox/"
   >mbox</a>
|
   <a href="/patch/9550821/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9550821/">/patch/9550821/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	EB3E1604A7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Feb 2017 23:38:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E3F2F28440
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Feb 2017 23:38:12 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D8DAC28464; Wed,  1 Feb 2017 23:38:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5F49E28462
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  1 Feb 2017 23:38:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751199AbdBAXiI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 1 Feb 2017 18:38:08 -0500
Received: from out1-smtp.messagingengine.com ([66.111.4.25]:34046 &quot;EHLO
	out1-smtp.messagingengine.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751066AbdBAXiE (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 1 Feb 2017 18:38:04 -0500
Received: from compute5.internal (compute5.nyi.internal [10.202.2.45])
	by mailout.nyi.internal (Postfix) with ESMTP id 5D2F820A9A;
	Wed,  1 Feb 2017 18:38:03 -0500 (EST)
Received: from frontend2 ([10.202.2.161])
	by compute5.internal (MEProxy); Wed, 01 Feb 2017 18:38:03 -0500
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=tobin.cc; h=cc
	:date:from:in-reply-to:message-id:references:subject:to
	:x-me-sender:x-me-sender:x-sasl-enc:x-sasl-enc; s=mesmtp; bh=Sxi
	CEfCR7jdnuEnjC02xYW/CG/8=; b=HktFdOvWQo+iXwUPUzZGjHBv2Y2+DxMNa9C
	baZLYaQhWKl6gfN81YUlwmXf6Dchapu8XfdQ9ajFf3BbG0N06oSRHbOztM5iqL4O
	GmMBousP2FozcL3cQGIIPQeaIovFTbfPT6HiTdLFYtwjyhxQcqJyftFpeLzBG5j6
	MGgUNqLc=
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-me-sender:x-me-sender:x-sasl-enc
	:x-sasl-enc; s=smtpout; bh=SxiCEfCR7jdnuEnjC02xYW/CG/8=; b=o5E/+
	CPkTP18/TqpMu0240TYbYTsV+O11HQXzcBR0HQu2vUt/VotVtkg3VTxjdqco6Lze
	4TaszvkYNaWiBwZP9lKExCEk6sPH+eo52MOKqsn4YkfZbAFIRmWuVfwB1u1DQBf3
	pWin7pzijAUwsDP1yrN+oyGCmQVSWQ/MpM/WL8=
X-ME-Sender: &lt;xms:W3GSWOC8fSGPVketC86YxXKt-cAATqwsjb9vdoOOogBH5NH9Wg6yug&gt;
X-Sasl-enc: 1yGXpRHTptwER511U96/uMMg0G2HJKsnxkZEUfOZ7hHt 1485992282
Received: from eros.fritz.box (ppp121-44-130-139.lns20.syd7.internode.on.net
	[121.44.130.139])
	by mail.messagingengine.com (Postfix) with ESMTPA id 829E52459C;
	Wed,  1 Feb 2017 18:38:00 -0500 (EST)
From: &quot;Tobin C. Harding&quot; &lt;me@tobin.cc&gt;
To: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org, Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;,
	Jan Kara &lt;jack@suse.cz&gt;, Ross Zwisler &lt;ross.zwisler@linux.intel.com&gt;,
	Michal Hocko &lt;mhocko@suse.com&gt;, Tobin C Harding &lt;me@tobin.cc&gt;
Subject: [PATCH 3/4] mm: Fix checkpatch errors, whitespace errors
Date: Thu,  2 Feb 2017 10:37:19 +1100
Message-Id: &lt;1485992240-10986-4-git-send-email-me@tobin.cc&gt;
X-Mailer: git-send-email 2.7.4
In-Reply-To: &lt;1485992240-10986-1-git-send-email-me@tobin.cc&gt;
References: &lt;1485992240-10986-1-git-send-email-me@tobin.cc&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=161771">Tobin C. Harding</a> - Feb. 1, 2017, 11:37 p.m.</div>
<pre class="content">
<span class="from">From: Tobin C Harding &lt;me@tobin.cc&gt;</span>

Patch fixes whitespace checkpatch errors.
<span class="signed-off-by">
Signed-off-by: Tobin C Harding &lt;me@tobin.cc&gt;</span>
---
 mm/memory.c | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 3562314..35fb8b2 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -95,7 +95,7 @@</span> <span class="p_context"> EXPORT_SYMBOL(mem_map);</span>
  * highstart_pfn must be the same; there must be no gap between ZONE_NORMAL
  * and ZONE_HIGHMEM.
  */
<span class="p_del">-void * high_memory;</span>
<span class="p_add">+void *high_memory;</span>
 EXPORT_SYMBOL(high_memory);
 
 /*
<span class="p_chunk">@@ -555,7 +555,7 @@</span> <span class="p_context"> void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 
 		if (is_vm_hugetlb_page(vma)) {
 			hugetlb_free_pgd_range(tlb, addr, vma-&gt;vm_end,
<span class="p_del">-				floor, next? next-&gt;vm_start: ceiling);</span>
<span class="p_add">+				floor, next ? next-&gt;vm_start : ceiling);</span>
 		} else {
 			/*
 			 * Optimization: gather nearby vmas into one call down
<span class="p_chunk">@@ -568,7 +568,7 @@</span> <span class="p_context"> void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 				unlink_file_vma(vma);
 			}
 			free_pgd_range(tlb, addr, vma-&gt;vm_end,
<span class="p_del">-				floor, next? next-&gt;vm_start: ceiling);</span>
<span class="p_add">+				floor, next ? next-&gt;vm_start : ceiling);</span>
 		}
 		vma = next;
 	}
<span class="p_chunk">@@ -1447,10 +1447,10 @@</span> <span class="p_context"> EXPORT_SYMBOL_GPL(zap_vma_ptes);</span>
 pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
 			spinlock_t **ptl)
 {
<span class="p_del">-	pgd_t * pgd = pgd_offset(mm, addr);</span>
<span class="p_del">-	pud_t * pud = pud_alloc(mm, pgd, addr);</span>
<span class="p_add">+	pgd_t *pgd = pgd_offset(mm, addr);</span>
<span class="p_add">+	pud_t *pud = pud_alloc(mm, pgd, addr);</span>
 	if (pud) {
<span class="p_del">-		pmd_t * pmd = pmd_alloc(mm, pud, addr);</span>
<span class="p_add">+		pmd_t *pmd = pmd_alloc(mm, pud, addr);</span>
 		if (pmd) {
 			VM_BUG_ON(pmd_trans_huge(*pmd));
 			return pte_alloc_map_lock(mm, pmd, addr, ptl);
<span class="p_chunk">@@ -2509,7 +2509,7 @@</span> <span class="p_context"> void unmap_mapping_range(struct address_space *mapping,</span>
 			hlen = ULONG_MAX - hba + 1;
 	}
 
<span class="p_del">-	details.check_mapping = even_cows? NULL: mapping;</span>
<span class="p_add">+	details.check_mapping = even_cows ? NULL : mapping;</span>
 	details.first_index = hba;
 	details.last_index = hba + hlen - 1;
 	if (details.last_index &lt; details.first_index)
<span class="p_chunk">@@ -3391,14 +3391,14 @@</span> <span class="p_context"> static int do_numa_page(struct vm_fault *vmf)</span>
 	int flags = 0;
 
 	/*
<span class="p_del">-	* The &quot;pte&quot; at this point cannot be used safely without</span>
<span class="p_del">-	* validation through pte_unmap_same(). It&#39;s of NUMA type but</span>
<span class="p_del">-	* the pfn may be screwed if the read is non atomic.</span>
<span class="p_del">-	*</span>
<span class="p_del">-	* We can safely just do a &quot;set_pte_at()&quot;, because the old</span>
<span class="p_del">-	* page table entry is not accessible, so there would be no</span>
<span class="p_del">-	* concurrent hardware modifications to the PTE.</span>
<span class="p_del">-	*/</span>
<span class="p_add">+	 * The &quot;pte&quot; at this point cannot be used safely without</span>
<span class="p_add">+	 * validation through pte_unmap_same(). It&#39;s of NUMA type but</span>
<span class="p_add">+	 * the pfn may be screwed if the read is non atomic.</span>
<span class="p_add">+	 *</span>
<span class="p_add">+	 * We can safely just do a &quot;set_pte_at()&quot;, because the old</span>
<span class="p_add">+	 * page table entry is not accessible, so there would be no</span>
<span class="p_add">+	 * concurrent hardware modifications to the PTE.</span>
<span class="p_add">+	 */</span>
 	vmf-&gt;ptl = pte_lockptr(vma-&gt;vm_mm, vmf-&gt;pmd);
 	spin_lock(vmf-&gt;ptl);
 	if (unlikely(!pte_same(*vmf-&gt;pte, pte))) {
<span class="p_chunk">@@ -3689,12 +3689,12 @@</span> <span class="p_context"> int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,</span>
 
 	if (flags &amp; FAULT_FLAG_USER) {
 		mem_cgroup_oom_disable();
<span class="p_del">-                /*</span>
<span class="p_del">-                 * The task may have entered a memcg OOM situation but</span>
<span class="p_del">-                 * if the allocation error was handled gracefully (no</span>
<span class="p_del">-                 * VM_FAULT_OOM), there is no need to kill anything.</span>
<span class="p_del">-                 * Just clean up the OOM state peacefully.</span>
<span class="p_del">-                 */</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The task may have entered a memcg OOM situation but</span>
<span class="p_add">+		 * if the allocation error was handled gracefully (no</span>
<span class="p_add">+		 * VM_FAULT_OOM), there is no need to kill anything.</span>
<span class="p_add">+		 * Just clean up the OOM state peacefully.</span>
<span class="p_add">+		 */</span>
 		if (task_in_memcg_oom(current) &amp;&amp; !(ret &amp; VM_FAULT_OOM))
 			mem_cgroup_oom_synchronize(false);
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



