
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v3,2/3] mm: hugetlb: add VmHugetlbRSS: field in /proc/pid/status - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v3,2/3] mm: hugetlb: add VmHugetlbRSS: field in /proc/pid/status</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 10, 2015, 1:16 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150810011625.GB17762@hori1.linux.bs1.fc.nec.co.jp&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6978951/mbox/"
   >mbox</a>
|
   <a href="/patch/6978951/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6978951/">/patch/6978951/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 9D77A9F344
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 10 Aug 2015 01:18:21 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id ACD5D2044C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 10 Aug 2015 01:18:20 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 61CF02044B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 10 Aug 2015 01:18:19 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752421AbbHJBRv (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 9 Aug 2015 21:17:51 -0400
Received: from TYO201.gate.nec.co.jp ([210.143.35.51]:34779 &quot;EHLO
	tyo201.gate.nec.co.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751248AbbHJBRu (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 9 Aug 2015 21:17:50 -0400
Received: from mailgate3.nec.co.jp ([10.7.69.195])
	by tyo201.gate.nec.co.jp (8.13.8/8.13.4) with ESMTP id t7A1HZf2010189;
	Mon, 10 Aug 2015 10:17:35 +0900 (JST)
Received: from mailsv4.nec.co.jp (imss61.nec.co.jp [10.7.69.156]) by
	mailgate3.nec.co.jp (8.11.7/3.7W-MAILGATE-NEC) with ESMTP
	id t7A1HYe09701; Mon, 10 Aug 2015 10:17:34 +0900 (JST)
Received: from mail02.kamome.nec.co.jp (mail02.kamome.nec.co.jp [10.25.43.5])
	by mailsv4.nec.co.jp (8.13.8/8.13.4) with ESMTP id t7A1HXBx019130;
	Mon, 10 Aug 2015 10:17:34 +0900 (JST)
Received: from bpxc99gp.gisp.nec.co.jp ([10.38.151.148] [10.38.151.148]) by
	mail01b.kamome.nec.co.jp with ESMTP id BT-MMP-1120186;
	Mon, 10 Aug 2015 10:16:27 +0900
Received: from BPXM23GP.gisp.nec.co.jp ([169.254.2.176]) by
	BPXC20GP.gisp.nec.co.jp ([10.38.151.148]) with mapi id 14.03.0224.002;
	Mon, 10 Aug 2015 10:16:26 +0900
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	=?utf-8?B?SsO2cm4gRW5nZWw=?= &lt;joern@purestorage.com&gt;
CC: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;
Subject: Re: [PATCH v3 2/3] mm: hugetlb: add VmHugetlbRSS: field in
	/proc/pid/status
Thread-Topic: [PATCH v3 2/3] mm: hugetlb: add VmHugetlbRSS: field in
	/proc/pid/status
Thread-Index: AQHQ0wYWsPQUJsKEO0ONsvtYB0cJ7p4D122A
Date: Mon, 10 Aug 2015 01:16:26 +0000
Message-ID: &lt;20150810011625.GB17762@hori1.linux.bs1.fc.nec.co.jp&gt;
References: &lt;20150807155537.d483456f753355059f9ce10a@linux-foundation.org&gt;
	&lt;1439167624-17772-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
	&lt;1439167624-17772-3-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
In-Reply-To: &lt;1439167624-17772-3-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
Accept-Language: ja-JP, en-US
Content-Language: ja-JP
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.128.101.31]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-ID: &lt;4B78D6BEEBFEE44ABD2ACAA0636D4CF4@gisp.nec.co.jp&gt;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 10, 2015, 1:16 a.m.</div>
<pre class="content">
<span class="quote">&gt; @@ -504,6 +519,15 @@ static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return &amp;mm-&gt;page_table_lock;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline get_hugetlb_rss(struct mm_struct *mm)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline mod_hugetlb_rss(struct mm_struct *mm, long value)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  #endif	/* CONFIG_HUGETLB_PAGE */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline spinlock_t *huge_pte_lock(struct hstate *h,</span>

sorry for my silly mistake, this doesn&#39;t build.
Let me resend this.

Thanks,
Naoya Horiguchi
---
<span class="from">From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Subject: [PATCH] mm: hugetlb: add VmHugetlbRSS: field in /proc/pid/status

Currently there&#39;s no easy way to get per-process usage of hugetlb pages, which
is inconvenient because applications which use hugetlb typically want to control
their processes on the basis of how much memory (including hugetlb) they use.
So this patch simply provides easy access to the info via /proc/pid/status.

This patch shouldn&#39;t change the OOM behavior (so hugetlb usage is ignored as
is now,) which I guess is fine until we have some strong reason to do it.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
---
v2 -&gt; v3:
- use inline functions instead of macros for !CONFIG_HUGETLB_PAGE
---
 fs/proc/task_mmu.c       |  5 ++++-
 include/linux/hugetlb.h  | 24 ++++++++++++++++++++++++
 include/linux/mm.h       |  3 +++
 include/linux/mm_types.h |  3 +++
 mm/hugetlb.c             |  9 +++++++++
 mm/memory.c              |  4 ++--
 mm/rmap.c                |  4 +++-
 7 files changed, 48 insertions(+), 4 deletions(-)

-- 
2.4.3
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index c7218603306d..f181f56fcce2 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -22,7 +22,7 @@</span> <span class="p_context"></span>
 void task_mem(struct seq_file *m, struct mm_struct *mm)
 {
 	unsigned long data, text, lib, swap, ptes, pmds;
<span class="p_del">-	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss;</span>
<span class="p_add">+	unsigned long hiwater_vm, total_vm, hiwater_rss, total_rss, hugetlb_rss;</span>
 
 	/*
 	 * Note: to minimize their overhead, mm maintains hiwater_vm and
<span class="p_chunk">@@ -37,6 +37,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 	hiwater_rss = total_rss = get_mm_rss(mm);
 	if (hiwater_rss &lt; mm-&gt;hiwater_rss)
 		hiwater_rss = mm-&gt;hiwater_rss;
<span class="p_add">+	hugetlb_rss = get_hugetlb_rss(mm);</span>
 
 	data = mm-&gt;total_vm - mm-&gt;shared_vm - mm-&gt;stack_vm;
 	text = (PAGE_ALIGN(mm-&gt;end_code) - (mm-&gt;start_code &amp; PAGE_MASK)) &gt;&gt; 10;
<span class="p_chunk">@@ -51,6 +52,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		&quot;VmPin:\t%8lu kB\n&quot;
 		&quot;VmHWM:\t%8lu kB\n&quot;
 		&quot;VmRSS:\t%8lu kB\n&quot;
<span class="p_add">+		&quot;VmHugetlbRSS:\t%8lu kB\n&quot;</span>
 		&quot;VmData:\t%8lu kB\n&quot;
 		&quot;VmStk:\t%8lu kB\n&quot;
 		&quot;VmExe:\t%8lu kB\n&quot;
<span class="p_chunk">@@ -64,6 +66,7 @@</span> <span class="p_context"> void task_mem(struct seq_file *m, struct mm_struct *mm)</span>
 		mm-&gt;pinned_vm &lt;&lt; (PAGE_SHIFT-10),
 		hiwater_rss &lt;&lt; (PAGE_SHIFT-10),
 		total_rss &lt;&lt; (PAGE_SHIFT-10),
<span class="p_add">+		hugetlb_rss &lt;&lt; (PAGE_SHIFT-10),</span>
 		data &lt;&lt; (PAGE_SHIFT-10),
 		mm-&gt;stack_vm &lt;&lt; (PAGE_SHIFT-10), text, lib,
 		ptes &gt;&gt; 10,
<span class="p_header">diff --git a/include/linux/hugetlb.h b/include/linux/hugetlb.h</span>
<span class="p_header">index d891f949466a..8c72e935bda8 100644</span>
<span class="p_header">--- a/include/linux/hugetlb.h</span>
<span class="p_header">+++ b/include/linux/hugetlb.h</span>
<span class="p_chunk">@@ -469,6 +469,21 @@</span> <span class="p_context"> static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
 #define hugepages_supported() (HPAGE_SHIFT != 0)
 #endif
 
<span class="p_add">+/*</span>
<span class="p_add">+ * This simple wrappers are to hide MM_HUGETLBPAGES from outside hugetlbfs</span>
<span class="p_add">+ * subsystem. The counter MM_HUGETLBPAGES is maintained in page unit basis,</span>
<span class="p_add">+ * so it changes by 512 for example if a 2MB hugepage is mapped or unmapped.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int get_hugetlb_rss(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return get_mm_counter(mm, MM_HUGETLBPAGES);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void mod_hugetlb_rss(struct mm_struct *mm, long value)</span>
<span class="p_add">+{</span>
<span class="p_add">+	add_mm_counter(mm, MM_HUGETLBPAGES, value);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #else	/* CONFIG_HUGETLB_PAGE */
 struct hstate {};
 #define alloc_huge_page_node(h, nid) NULL
<span class="p_chunk">@@ -504,6 +519,15 @@</span> <span class="p_context"> static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
 {
 	return &amp;mm-&gt;page_table_lock;
 }
<span class="p_add">+</span>
<span class="p_add">+static inline int get_hugetlb_rss(struct mm_struct *mm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void mod_hugetlb_rss(struct mm_struct *mm, long value)</span>
<span class="p_add">+{</span>
<span class="p_add">+}</span>
 #endif	/* CONFIG_HUGETLB_PAGE */
 
 static inline spinlock_t *huge_pte_lock(struct hstate *h,
<span class="p_header">diff --git a/include/linux/mm.h b/include/linux/mm.h</span>
<span class="p_header">index 2e872f92dbac..9218a8856483 100644</span>
<span class="p_header">--- a/include/linux/mm.h</span>
<span class="p_header">+++ b/include/linux/mm.h</span>
<span class="p_chunk">@@ -1355,6 +1355,9 @@</span> <span class="p_context"> static inline void sync_mm_rss(struct mm_struct *mm)</span>
 }
 #endif
 
<span class="p_add">+extern inline void init_rss_vec(int *rss);</span>
<span class="p_add">+extern inline void add_mm_rss_vec(struct mm_struct *mm, int *rss);</span>
<span class="p_add">+</span>
 int vma_wants_writenotify(struct vm_area_struct *vma);
 
 extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
<span class="p_header">diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h</span>
<span class="p_header">index 0038ac7466fd..887b43ba5a18 100644</span>
<span class="p_header">--- a/include/linux/mm_types.h</span>
<span class="p_header">+++ b/include/linux/mm_types.h</span>
<span class="p_chunk">@@ -348,6 +348,9 @@</span> <span class="p_context"> enum {</span>
 	MM_FILEPAGES,
 	MM_ANONPAGES,
 	MM_SWAPENTS,
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+	MM_HUGETLBPAGES,</span>
<span class="p_add">+#endif</span>
 	NR_MM_COUNTERS
 };
 
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index a8c3087089d8..12e5e7d3b60f 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -2743,9 +2743,11 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 	unsigned long mmun_start;	/* For mmu_notifiers */
 	unsigned long mmun_end;		/* For mmu_notifiers */
 	int ret = 0;
<span class="p_add">+	int rss[NR_MM_COUNTERS];</span>
 
 	cow = (vma-&gt;vm_flags &amp; (VM_SHARED | VM_MAYWRITE)) == VM_MAYWRITE;
 
<span class="p_add">+	init_rss_vec(rss);</span>
 	mmun_start = vma-&gt;vm_start;
 	mmun_end = vma-&gt;vm_end;
 	if (cow)
<span class="p_chunk">@@ -2797,6 +2799,7 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 			get_page(ptepage);
 			page_dup_rmap(ptepage);
 			set_huge_pte_at(dst, addr, dst_pte, entry);
<span class="p_add">+			rss[MM_HUGETLBPAGES] += pages_per_huge_page(h);</span>
 		}
 		spin_unlock(src_ptl);
 		spin_unlock(dst_ptl);
<span class="p_chunk">@@ -2805,6 +2808,7 @@</span> <span class="p_context"> int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,</span>
 	if (cow)
 		mmu_notifier_invalidate_range_end(src, mmun_start, mmun_end);
 
<span class="p_add">+	add_mm_rss_vec(dst, rss);</span>
 	return ret;
 }
 
<span class="p_chunk">@@ -2823,6 +2827,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 	unsigned long sz = huge_page_size(h);
 	const unsigned long mmun_start = start;	/* For mmu_notifiers */
 	const unsigned long mmun_end   = end;	/* For mmu_notifiers */
<span class="p_add">+	int rss[NR_MM_COUNTERS];</span>
 
 	WARN_ON(!is_vm_hugetlb_page(vma));
 	BUG_ON(start &amp; ~huge_page_mask(h));
<span class="p_chunk">@@ -2832,6 +2837,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 	mmu_notifier_invalidate_range_start(mm, mmun_start, mmun_end);
 	address = start;
 again:
<span class="p_add">+	init_rss_vec(rss);</span>
 	for (; address &lt; end; address += sz) {
 		ptep = huge_pte_offset(mm, address);
 		if (!ptep)
<span class="p_chunk">@@ -2877,6 +2883,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 		if (huge_pte_dirty(pte))
 			set_page_dirty(page);
 
<span class="p_add">+		rss[MM_HUGETLBPAGES] -= pages_per_huge_page(h);</span>
 		page_remove_rmap(page);
 		force_flush = !__tlb_remove_page(tlb, page);
 		if (force_flush) {
<span class="p_chunk">@@ -2892,6 +2899,7 @@</span> <span class="p_context"> void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,</span>
 unlock:
 		spin_unlock(ptl);
 	}
<span class="p_add">+	add_mm_rss_vec(mm, rss);</span>
 	/*
 	 * mmu_gather ran out of room to batch pages, we break out of
 	 * the PTE lock to avoid doing the potential expensive TLB invalidate
<span class="p_chunk">@@ -3261,6 +3269,7 @@</span> <span class="p_context"> static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 				&amp;&amp; (vma-&gt;vm_flags &amp; VM_SHARED)));
 	set_huge_pte_at(mm, address, ptep, new_pte);
 
<span class="p_add">+	mod_hugetlb_rss(mm, pages_per_huge_page(h));</span>
 	if ((flags &amp; FAULT_FLAG_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_SHARED)) {
 		/* Optimization, do the COW without a second fault */
 		ret = hugetlb_cow(mm, vma, address, ptep, new_pte, page, ptl);
<span class="p_header">diff --git a/mm/memory.c b/mm/memory.c</span>
<span class="p_header">index 388dcf9aa283..e09b53da2733 100644</span>
<span class="p_header">--- a/mm/memory.c</span>
<span class="p_header">+++ b/mm/memory.c</span>
<span class="p_chunk">@@ -620,12 +620,12 @@</span> <span class="p_context"> int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)</span>
 	return 0;
 }
 
<span class="p_del">-static inline void init_rss_vec(int *rss)</span>
<span class="p_add">+inline void init_rss_vec(int *rss)</span>
 {
 	memset(rss, 0, sizeof(int) * NR_MM_COUNTERS);
 }
 
<span class="p_del">-static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
<span class="p_add">+inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
 {
 	int i;
 
<span class="p_header">diff --git a/mm/rmap.c b/mm/rmap.c</span>
<span class="p_header">index 171b68768df1..78e77b0ea3c3 100644</span>
<span class="p_header">--- a/mm/rmap.c</span>
<span class="p_header">+++ b/mm/rmap.c</span>
<span class="p_chunk">@@ -1230,7 +1230,9 @@</span> <span class="p_context"> static int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,</span>
 	update_hiwater_rss(mm);
 
 	if (PageHWPoison(page) &amp;&amp; !(flags &amp; TTU_IGNORE_HWPOISON)) {
<span class="p_del">-		if (!PageHuge(page)) {</span>
<span class="p_add">+		if (PageHuge(page)) {</span>
<span class="p_add">+			mod_hugetlb_rss(mm, -(1 &lt;&lt; compound_order(page)));</span>
<span class="p_add">+		} else {</span>
 			if (PageAnon(page))
 				dec_mm_counter(mm, MM_ANONPAGES);
 			else

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



