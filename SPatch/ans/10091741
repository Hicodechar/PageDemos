
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[27/60] x86/cpufeatures: Add X86_BUG_CPU_INSECURE - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [27/60] x86/cpufeatures: Add X86_BUG_CPU_INSECURE</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 4, 2017, 11:18 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171204231842.2c7q562omvfeqyif@pd.tnic&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10091741/mbox/"
   >mbox</a>
|
   <a href="/patch/10091741/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10091741/">/patch/10091741/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	88567600C5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 23:19:03 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 782E028A31
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 23:19:03 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 6C9A7294CE; Mon,  4 Dec 2017 23:19:03 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A71A028A31
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  4 Dec 2017 23:19:02 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752228AbdLDXS7 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 4 Dec 2017 18:18:59 -0500
Received: from mx2.suse.de ([195.135.220.15]:52657 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752182AbdLDXSx (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 4 Dec 2017 18:18:53 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id A4D4FAE84;
	Mon,  4 Dec 2017 23:18:51 +0000 (UTC)
Date: Tue, 5 Dec 2017 00:18:42 +0100
From: Borislav Petkov &lt;bp@suse.de&gt;
To: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: LKML &lt;linux-kernel@vger.kernel.org&gt;, x86@kernel.org,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirsky &lt;luto@kernel.org&gt;, Peter Zijlstra &lt;peterz@infradead.org&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Greg KH &lt;gregkh@linuxfoundation.org&gt;, keescook@google.com,
	hughd@google.com, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;,
	Denys Vlasenko &lt;dvlasenk@redhat.com&gt;, Rik van Riel &lt;riel@redhat.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	Juergen Gross &lt;jgross@suse.com&gt;, David Laight &lt;David.Laight@aculab.com&gt;,
	Eduardo Valentin &lt;eduval@amazon.com&gt;, aliguori@amazon.com,
	Will Deacon &lt;will.deacon@arm.com&gt;, daniel.gruss@iaik.tugraz.at
Subject: Re: [patch 27/60] x86/cpufeatures: Add X86_BUG_CPU_INSECURE
Message-ID: &lt;20171204231842.2c7q562omvfeqyif@pd.tnic&gt;
References: &lt;20171204140706.296109558@linutronix.de&gt;
	&lt;20171204150607.071247746@linutronix.de&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: &lt;20171204150607.071247746@linutronix.de&gt;
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=57321">Borislav Petkov</a> - Dec. 4, 2017, 11:18 p.m.</div>
<pre class="content">
On Mon, Dec 04, 2017 at 03:07:33PM +0100, Thomas Gleixner wrote:
<span class="quote">&gt; From: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Many x86 CPUs leak information to user space due to missing isolation of</span>
<span class="quote">&gt; user space and kernel space page tables. There are many well documented</span>
<span class="quote">&gt; ways to exploit that.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The upcoming software migitation of isolating the user and kernel space</span>
<span class="quote">&gt; page tables needs a misfeature flag so code can be made runtime</span>
<span class="quote">&gt; conditional.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add two BUG bits: One which indicates that the CPU is affected and one that</span>
<span class="quote">&gt; the software migitation is enabled.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Assume for now that _ALL_ x86 CPUs are affected by this. Exceptions can be</span>
<span class="quote">&gt; made later.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/include/asm/cpufeatures.h |    2 ++</span>
<span class="quote">&gt;  arch/x86/kernel/cpu/common.c       |    4 ++++</span>
<span class="quote">&gt;  2 files changed, 6 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="quote">&gt; @@ -340,5 +340,7 @@</span>
<span class="quote">&gt;  #define X86_BUG_SWAPGS_FENCE		X86_BUG(11) /* SWAPGS without input dep on GS */</span>
<span class="quote">&gt;  #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */</span>
<span class="quote">&gt;  #define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */</span>
<span class="quote">&gt; +#define X86_BUG_CPU_INSECURE		X86_BUG(14) /* CPU is insecure and needs kernel page table isolation */</span>
<span class="quote">&gt; +#define X86_BUG_CPU_SECURE_MODE_KPTI	X86_BUG(15) /* Kernel Page Table Isolation enabled*/</span>

Right, if this second one is going to denote that the workaround is
enabled, let&#39;s make it a feature bit and shorter:

#define X86_FEATURE_KPTI

Delta diff below.

---
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/entry/calling.h b/arch/x86/entry/calling.h</span>
<span class="p_header">index 4dd0bda9fe09..604b62a5a2fe 100644</span>
<span class="p_header">--- a/arch/x86/entry/calling.h</span>
<span class="p_header">+++ b/arch/x86/entry/calling.h</span>
<span class="p_chunk">@@ -212,7 +212,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro SWITCH_TO_KERNEL_CR3 scratch_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_KPTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_KPTI</span>
 	mov	%cr3, \scratch_reg
 	ADJUST_KERNEL_CR3 \scratch_reg
 	mov	\scratch_reg, %cr3
<span class="p_chunk">@@ -223,7 +223,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 	PER_CPU_VAR(cpu_tlbstate) + TLB_STATE_user_pcid_flush_mask
 
 .macro SWITCH_TO_USER_CR3_NOSTACK scratch_reg:req scratch_reg2:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_KPTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_KPTI</span>
 	mov	%cr3, \scratch_reg
 
 	ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID
<span class="p_chunk">@@ -259,7 +259,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro SAVE_AND_SWITCH_TO_KERNEL_CR3 scratch_reg:req save_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Ldone_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_KPTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Ldone_\@&quot;, &quot;&quot;, X86_FEATURE_KPTI</span>
 	movq	%cr3, \scratch_reg
 	movq	\scratch_reg, \save_reg
 	/*
<span class="p_chunk">@@ -282,7 +282,7 @@</span> <span class="p_context"> For 32-bit we have the following conventions - kernel is built with</span>
 .endm
 
 .macro RESTORE_CR3 scratch_reg:req save_reg:req
<span class="p_del">-	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_BUG_CPU_SECURE_MODE_KPTI</span>
<span class="p_add">+	ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_KPTI</span>
 
 	ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID
 
<span class="p_header">diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">index 6e905acb4e97..b367c23e7d83 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/cpufeatures.h</span>
<span class="p_chunk">@@ -198,10 +198,10 @@</span> <span class="p_context"></span>
 #define X86_FEATURE_CAT_L2		( 7*32+ 5) /* Cache Allocation Technology L2 */
 #define X86_FEATURE_CDP_L3		( 7*32+ 6) /* Code and Data Prioritization L3 */
 #define X86_FEATURE_INVPCID_SINGLE	( 7*32+ 7) /* Effectively INVPCID &amp;&amp; CR4.PCIDE=1 */
<span class="p_del">-</span>
 #define X86_FEATURE_HW_PSTATE		( 7*32+ 8) /* AMD HW-PState */
 #define X86_FEATURE_PROC_FEEDBACK	( 7*32+ 9) /* AMD ProcFeedbackInterface */
 #define X86_FEATURE_SME			( 7*32+10) /* AMD Secure Memory Encryption */
<span class="p_add">+#define X86_FEATURE_KPTI		( 7*32+11) /* Kernel Page Table Isolation enabled */</span>
 
 #define X86_FEATURE_INTEL_PPIN		( 7*32+14) /* Intel Processor Inventory Number */
 #define X86_FEATURE_INTEL_PT		( 7*32+15) /* Intel Processor Trace */
<span class="p_chunk">@@ -342,6 +342,5 @@</span> <span class="p_context"></span>
 #define X86_BUG_MONITOR			X86_BUG(12) /* IPI required to wake up remote CPU */
 #define X86_BUG_AMD_E400		X86_BUG(13) /* CPU is among the affected by Erratum 400 */
 #define X86_BUG_CPU_INSECURE		X86_BUG(14) /* CPU is insecure and needs kernel page table isolation */
<span class="p_del">-#define X86_BUG_CPU_SECURE_MODE_KPTI	X86_BUG(15) /* Kernel Page Table Isolation enabled*/</span>
 
 #endif /* _ASM_X86_CPUFEATURES_H */
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 0405960cee25..d1bf0b3a8232 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -210,7 +210,7 @@</span> <span class="p_context"> static inline bool pgd_userspace_access(pgd_t pgd)</span>
 static inline pgd_t kpti_set_user_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 #ifdef CONFIG_KERNEL_PAGE_TABLE_ISOLATION
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return pgd;
 
 	if (pgd_userspace_access(pgd)) {
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 55ebfd144f18..d84167c036c0 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -330,7 +330,7 @@</span> <span class="p_context"> static inline void invalidate_pcid_other(void)</span>
 	 * are set as _PAGE_GLOBAL.  We have no shared nonglobals
 	 * and nothing to do here.
 	 */
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return;
 
 	this_cpu_write(cpu_tlbstate.invalidate_other, true);
<span class="p_chunk">@@ -374,7 +374,7 @@</span> <span class="p_context"> static inline void invalidate_user_asid(u16 asid)</span>
 	if (!cpu_feature_enabled(X86_FEATURE_PCID))
 		return;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return;
 
 	__set_bit(kern_pcid(asid),
<span class="p_chunk">@@ -438,7 +438,7 @@</span> <span class="p_context"> static inline void __native_flush_tlb_single(unsigned long addr)</span>
 
 	asm volatile(&quot;invlpg (%0)&quot; ::&quot;r&quot; (addr) : &quot;memory&quot;);
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return;
 
 	/*
<span class="p_header">diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">index b38a426a9855..4aa7b1efa6d8 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/common.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/common.c</span>
<span class="p_chunk">@@ -1481,7 +1481,7 @@</span> <span class="p_context"> void syscall_init(void)</span>
 		(entry_SYSCALL_64_trampoline - _entry_trampoline);
 
 	wrmsr(MSR_STAR, 0, (__USER32_CS &lt;&lt; 16) | __KERNEL_CS);
<span class="p_del">-	if (static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (static_cpu_has(X86_FEATURE_KPTI))</span>
 		wrmsrl(MSR_LSTAR, SYSCALL64_entry_trampoline);
 	else
 		wrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64);
<span class="p_header">diff --git a/arch/x86/kernel/ldt.c b/arch/x86/kernel/ldt.c</span>
<span class="p_header">index f63a2b00d775..15dfdb76523d 100644</span>
<span class="p_header">--- a/arch/x86/kernel/ldt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/ldt.c</span>
<span class="p_chunk">@@ -53,7 +53,7 @@</span> <span class="p_context"> static void set_ldt_and_map(struct ldt_struct *ldt)</span>
 	void *fixva;
 	int idx, i;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI)) {</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI)) {</span>
 		set_ldt(ldt-&gt;entries_va, ldt-&gt;nr_entries);
 		return;
 	}
<span class="p_header">diff --git a/arch/x86/mm/dump_pagetables.c b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">index f9dfc20234e9..f18041e7d4d2 100644</span>
<span class="p_header">--- a/arch/x86/mm/dump_pagetables.c</span>
<span class="p_header">+++ b/arch/x86/mm/dump_pagetables.c</span>
<span class="p_chunk">@@ -504,7 +504,7 @@</span> <span class="p_context"> void ptdump_walk_pgd_level(struct seq_file *m, pgd_t *pgd)</span>
 void ptdump_walk_pgd_level_debugfs(struct seq_file *m, pgd_t *pgd, bool user)
 {
 #ifdef CONFIG_KERNEL_PAGE_TABLE_ISOLATION
<span class="p_del">-	if (user &amp;&amp; static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (user &amp;&amp; static_cpu_has(X86_FEATURE_KPTI))</span>
 		pgd = kernel_to_user_pgdp(pgd);
 #endif
 	ptdump_walk_pgd_level_core(m, pgd, false, false);
<span class="p_chunk">@@ -516,7 +516,7 @@</span> <span class="p_context"> static void ptdump_walk_user_pgd_level_checkwx(void)</span>
 #ifdef CONFIG_KERNEL_PAGE_TABLE_ISOLATION
 	pgd_t *pgd = (pgd_t *) &amp;init_top_pgt;
 
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return;
 
 	pr_info(&quot;x86/mm: Checking user space page tables\n&quot;);
<span class="p_header">diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c</span>
<span class="p_header">index ffd55531206e..d65bc503da44 100644</span>
<span class="p_header">--- a/arch/x86/mm/init.c</span>
<span class="p_header">+++ b/arch/x86/mm/init.c</span>
<span class="p_chunk">@@ -164,7 +164,7 @@</span> <span class="p_context"> static int page_size_mask;</span>
 
 static void enable_global_pages(void)
 {
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		__supported_pte_mask |= _PAGE_GLOBAL;
 }
 
<span class="p_header">diff --git a/arch/x86/mm/kpti.c b/arch/x86/mm/kpti.c</span>
<span class="p_header">index a3b39c01e028..b8f2e300e26c 100644</span>
<span class="p_header">--- a/arch/x86/mm/kpti.c</span>
<span class="p_header">+++ b/arch/x86/mm/kpti.c</span>
<span class="p_chunk">@@ -61,7 +61,7 @@</span> <span class="p_context"> void __init kpti_check_boottime_disable(void)</span>
 		enable = false;
 	}
 	if (enable)
<span class="p_del">-		setup_force_cpu_bug(X86_BUG_CPU_SECURE_MODE_KPTI);</span>
<span class="p_add">+		setup_force_cpu_cap(X86_FEATURE_KPTI);</span>
 }
 
 /*
<span class="p_chunk">@@ -236,7 +236,7 @@</span> <span class="p_context"> static void __init kpti_init_all_pgds(void)</span>
  */
 void __init kpti_init(void)
 {
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI))</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI))</span>
 		return;
 
 	pr_info(&quot;enabled\n&quot;);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 20f6cc4e49b8..430c6ba24ad7 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -42,7 +42,7 @@</span> <span class="p_context"> void clear_asid_other(void)</span>
 	 * This is only expected to be set if we have disabled
 	 * kernel _PAGE_GLOBAL pages.
 	 */
<span class="p_del">-	if (!static_cpu_has_bug(X86_BUG_CPU_SECURE_MODE_KPTI)) {</span>
<span class="p_add">+	if (!static_cpu_has(X86_FEATURE_KPTI)) {</span>
 		WARN_ON_ONCE(1);
 		return;
 	}

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



