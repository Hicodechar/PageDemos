
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,1/2] smaps: fill missing fields for vma(VM_HUGETLB) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,1/2] smaps: fill missing fields for vma(VM_HUGETLB)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 7, 2015, 7:24 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1438932278-7973-2-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6965761/mbox/"
   >mbox</a>
|
   <a href="/patch/6965761/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6965761/">/patch/6965761/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 0E795C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  7 Aug 2015 07:26:05 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 8A1B720437
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  7 Aug 2015 07:26:04 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id E6AFB2068A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  7 Aug 2015 07:26:02 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756625AbbHGHZs (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 7 Aug 2015 03:25:48 -0400
Received: from TYO201.gate.nec.co.jp ([210.143.35.51]:64576 &quot;EHLO
	tyo201.gate.nec.co.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751612AbbHGHZn (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 7 Aug 2015 03:25:43 -0400
Received: from mailgate3.nec.co.jp ([10.7.69.195])
	by tyo201.gate.nec.co.jp (8.13.8/8.13.4) with ESMTP id t777PUas015091;
	Fri, 7 Aug 2015 16:25:30 +0900 (JST)
Received: from mailsv.nec.co.jp (imss61.nec.co.jp [10.7.69.156]) by
	mailgate3.nec.co.jp (8.11.7/3.7W-MAILGATE-NEC) with ESMTP
	id t777PTe06503; Fri, 7 Aug 2015 16:25:29 +0900 (JST)
Received: from mail02.kamome.nec.co.jp (mail02.kamome.nec.co.jp [10.25.43.5])
	by mailsv.nec.co.jp (8.13.8/8.13.4) with ESMTP id t777PTxt027343;
	Fri, 7 Aug 2015 16:25:29 +0900 (JST)
Received: from bpxc99gp.gisp.nec.co.jp ([10.38.151.147] [10.38.151.147]) by
	mail01b.kamome.nec.co.jp with ESMTP id BT-MMP-1096810;
	Fri, 7 Aug 2015 16:24:51 +0900
Received: from BPXM23GP.gisp.nec.co.jp ([169.254.2.176]) by
	BPXC19GP.gisp.nec.co.jp ([10.38.151.147]) with mapi id 14.03.0224.002;
	Fri, 7 Aug 2015 16:24:50 +0900
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	=?utf-8?B?SsO2cm4gRW5nZWw=?= &lt;joern@purestorage.com&gt;
CC: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	&quot;linux-kernel@vger.kernel.org&quot; &lt;linux-kernel@vger.kernel.org&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Subject: [PATCH v2 1/2] smaps: fill missing fields for vma(VM_HUGETLB)
Thread-Topic: [PATCH v2 1/2] smaps: fill missing fields for vma(VM_HUGETLB)
Thread-Index: AQHQ0OIlYN4n4pnEQkipw+r1zw5T/w==
Date: Fri, 7 Aug 2015 07:24:50 +0000
Message-ID: &lt;1438932278-7973-2-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
References: &lt;20150806074443.GA7870@hori1.linux.bs1.fc.nec.co.jp&gt;
	&lt;1438932278-7973-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
In-Reply-To: &lt;1438932278-7973-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
Accept-Language: ja-JP, en-US
Content-Language: ja-JP
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.128.101.10]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-ID: &lt;019B25B7041C0D43A202E166A1F4B9FD@gisp.nec.co.jp&gt;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 7, 2015, 7:24 a.m.</div>
<pre class="content">
Currently smaps reports many zero fields for vma(VM_HUGETLB), which is
inconvenient when we want to know per-task or per-vma base hugetlb usage.
This patch enables these fields by introducing smaps_hugetlb_range().

before patch:

  Size:              20480 kB
  Rss:                   0 kB
  Pss:                   0 kB
  Shared_Clean:          0 kB
  Shared_Dirty:          0 kB
  Private_Clean:         0 kB
  Private_Dirty:         0 kB
  Referenced:            0 kB
  Anonymous:             0 kB
  AnonHugePages:         0 kB
  Swap:                  0 kB
  KernelPageSize:     2048 kB
  MMUPageSize:        2048 kB
  Locked:                0 kB
  VmFlags: rd wr mr mw me de ht

after patch:

  Size:              20480 kB
  Rss:               18432 kB
  Pss:               18432 kB
  Shared_Clean:          0 kB
  Shared_Dirty:          0 kB
  Private_Clean:         0 kB
  Private_Dirty:     18432 kB
  Referenced:        18432 kB
  Anonymous:         18432 kB
  AnonHugePages:         0 kB
  Swap:                  0 kB
  KernelPageSize:     2048 kB
  MMUPageSize:        2048 kB
  Locked:                0 kB
  VmFlags: rd wr mr mw me de ht
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="acked-by">Acked-by: JÃ¶rn Engel &lt;joern@logfs.org&gt;</span>
---
 fs/proc/task_mmu.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

-- 
2.4.3
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Aug. 7, 2015, 10:50 p.m.</div>
<pre class="content">
On Fri, 7 Aug 2015 07:24:50 +0000 Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt; wrote:
<span class="quote">
&gt; Currently smaps reports many zero fields for vma(VM_HUGETLB), which is</span>
<span class="quote">&gt; inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; This patch enables these fields by introducing smaps_hugetlb_range().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; before patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; after patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:               18432 kB</span>
<span class="quote">&gt;   Pss:               18432 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:     18432 kB</span>
<span class="quote">&gt;   Referenced:        18432 kB</span>
<span class="quote">&gt;   Anonymous:         18432 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>

Is there something we can say about this in
Documentation/filesystems/proc.txt?

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Aug. 11, 2015, 12:37 a.m.</div>
<pre class="content">
On Fri, 7 Aug 2015, Naoya Horiguchi wrote:
<span class="quote">
&gt; Currently smaps reports many zero fields for vma(VM_HUGETLB), which is</span>
<span class="quote">&gt; inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; This patch enables these fields by introducing smaps_hugetlb_range().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; before patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; after patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:               18432 kB</span>
<span class="quote">&gt;   Pss:               18432 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:     18432 kB</span>
<span class="quote">&gt;   Referenced:        18432 kB</span>
<span class="quote">&gt;   Anonymous:         18432 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>

I think this will lead to breakage, unfortunately, specifically for users 
who are concerned with resource management.

An example: we use memcg hierarchies to charge memory for individual jobs, 
specific users, and system overhead.  Memcg is a cgroup, so this is done 
for an aggregate of processes, and we often have to monitor their memory 
usage.  Each process isn&#39;t assigned to its own memcg, and I don&#39;t believe 
common users of memcg assign individual processes to their own memcgs.  

When a memcg is out of memory, we need to track the memory usage of 
processes attached to its memcg hierarchy to determine what is unexpected, 
either as a result of a new rollout or because of a memory leak.  To do 
that, we use the rss exported by smaps that is now changed with this 
patch.  By using smaps rather than /proc/pid/status, we can report where 
memory usage is unexpected.

This would cause our process that manages all memcgs on our systems to 
break.  Perhaps I haven&#39;t been as convincing in my previous messages of 
this, but it&#39;s quite an obvious userspace regression.

This memory was not included in rss originally because memory in the 
hugetlb persistent pool is always resident.  Unmapping the memory does not 
free memory.  For this reason, hugetlb memory has always been treated as 
its own type of memory.

It would have been arguable back when hugetlbfs was introduced whether it 
should be included.  I&#39;m afraid the ship has sailed on that since a decade 
has past and it would cause userspace to break if existing metrics are 
used that already have cleared defined semantics.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Aug. 11, 2015, 11:48 p.m.</div>
<pre class="content">
On Tue, 11 Aug 2015, Naoya Horiguchi wrote:
<span class="quote">
&gt; &gt; This memory was not included in rss originally because memory in the </span>
<span class="quote">&gt; &gt; hugetlb persistent pool is always resident.  Unmapping the memory does not </span>
<span class="quote">&gt; &gt; free memory.  For this reason, hugetlb memory has always been treated as </span>
<span class="quote">&gt; &gt; its own type of memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right, so it might be better not to use the word &quot;RSS&quot; for hugetlb, maybe</span>
<span class="quote">&gt; something like &quot;HugetlbPages:&quot; seems better to me.</span>
<span class="quote">&gt; </span>

When the pagesize is also specified, as it is in smaps, I think this would 
be the best option.  Note that we can&#39;t distinguish between variable 
hugetlb sizes with VmFlags alone.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git v4.2-rc4.orig/fs/proc/task_mmu.c v4.2-rc4/fs/proc/task_mmu.c</span>
<span class="p_header">index ca1e091881d4..c7218603306d 100644</span>
<span class="p_header">--- v4.2-rc4.orig/fs/proc/task_mmu.c</span>
<span class="p_header">+++ v4.2-rc4/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -610,12 +610,39 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
 	seq_putc(m, &#39;\n&#39;);
 }
 
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="p_add">+				 unsigned long addr, unsigned long end,</span>
<span class="p_add">+				 struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mem_size_stats *mss = walk-&gt;private;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	struct page *page = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_present(*pte)) {</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, *pte);</span>
<span class="p_add">+	} else if (is_swap_pte(*pte)) {</span>
<span class="p_add">+		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_migration_entry(swpent))</span>
<span class="p_add">+			page = migration_entry_to_page(swpent);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (page)</span>
<span class="p_add">+		smaps_account(mss, page, huge_page_size(hstate_vma(vma)),</span>
<span class="p_add">+			      pte_young(*pte), pte_dirty(*pte));</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* HUGETLB_PAGE */</span>
<span class="p_add">+</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct vm_area_struct *vma = v;
 	struct mem_size_stats mss;
 	struct mm_walk smaps_walk = {
 		.pmd_entry = smaps_pte_range,
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+		.hugetlb_entry = smaps_hugetlb_range,</span>
<span class="p_add">+#endif</span>
 		.mm = vma-&gt;vm_mm,
 		.private = &amp;mss,
 	};

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



