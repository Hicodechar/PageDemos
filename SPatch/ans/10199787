
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[17/64] kernel: use mm locking wrappers - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [17/64] kernel: use mm locking wrappers</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2018, 1:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180205012754.23615-18-dbueso@wotan.suse.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10199787/mbox/"
   >mbox</a>
|
   <a href="/patch/10199787/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10199787/">/patch/10199787/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	01EF660247 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:42:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E5E6C285E1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:42:36 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id D363F285DE; Mon,  5 Feb 2018 01:42:36 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id F12F8285DC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:42:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752982AbeBEBma (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Feb 2018 20:42:30 -0500
Received: from mx2.suse.de ([195.135.220.15]:44091 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752444AbeBEB2R (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Feb 2018 20:28:17 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id 3DCDEADE4;
	Mon,  5 Feb 2018 01:28:00 +0000 (UTC)
From: Davidlohr Bueso &lt;dbueso@suse.de&gt;
To: akpm@linux-foundation.org, mingo@kernel.org
Cc: peterz@infradead.org, ldufour@linux.vnet.ibm.com, jack@suse.cz,
	mhocko@kernel.org, kirill.shutemov@linux.intel.com,
	mawilcox@microsoft.com, mgorman@techsingularity.net,
	dave@stgolabs.net, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Davidlohr Bueso &lt;dbueso@suse.de&gt;
Subject: [PATCH 17/64] kernel: use mm locking wrappers
Date: Mon,  5 Feb 2018 02:27:07 +0100
Message-Id: &lt;20180205012754.23615-18-dbueso@wotan.suse.de&gt;
X-Mailer: git-send-email 2.12.3
In-Reply-To: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
References: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a> - Feb. 5, 2018, 1:27 a.m.</div>
<pre class="content">
<span class="from">From: Davidlohr Bueso &lt;dave@stgolabs.net&gt;</span>

Most of the users are already aware of mmrange, so conversion
is straightforward. For those who don&#39;t, they all use mmap_sem
in the same function context. No change in semantics.

The dup_mmap() needs two ranges, one for the new and old mms.
<span class="signed-off-by">
Signed-off-by: Davidlohr Bueso &lt;dbueso@suse.de&gt;</span>
---
 kernel/acct.c               |  5 +++--
 kernel/events/core.c        |  5 +++--
 kernel/events/uprobes.c     | 17 +++++++++--------
 kernel/fork.c               | 16 ++++++++++------
 kernel/futex.c              |  4 ++--
 kernel/sched/fair.c         |  5 +++--
 kernel/trace/trace_output.c |  5 +++--
 7 files changed, 33 insertions(+), 24 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/kernel/acct.c b/kernel/acct.c</span>
<span class="p_header">index addf7732fb56..bc8826f68002 100644</span>
<span class="p_header">--- a/kernel/acct.c</span>
<span class="p_header">+++ b/kernel/acct.c</span>
<span class="p_chunk">@@ -538,14 +538,15 @@</span> <span class="p_context"> void acct_collect(long exitcode, int group_dead)</span>
 
 	if (group_dead &amp;&amp; current-&gt;mm) {
 		struct vm_area_struct *vma;
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-		down_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(current-&gt;mm, &amp;mmrange);</span>
 		vma = current-&gt;mm-&gt;mmap;
 		while (vma) {
 			vsize += vma-&gt;vm_end - vma-&gt;vm_start;
 			vma = vma-&gt;vm_next;
 		}
<span class="p_del">-		up_read(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(current-&gt;mm, &amp;mmrange);</span>
 	}
 
 	spin_lock_irq(&amp;current-&gt;sighand-&gt;siglock);
<span class="p_header">diff --git a/kernel/events/core.c b/kernel/events/core.c</span>
<span class="p_header">index f0549e79978b..b21d0942d225 100644</span>
<span class="p_header">--- a/kernel/events/core.c</span>
<span class="p_header">+++ b/kernel/events/core.c</span>
<span class="p_chunk">@@ -8264,6 +8264,7 @@</span> <span class="p_context"> static void perf_event_addr_filters_apply(struct perf_event *event)</span>
 	struct mm_struct *mm = NULL;
 	unsigned int count = 0;
 	unsigned long flags;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	/*
 	 * We may observe TASK_TOMBSTONE, which means that the event tear-down
<span class="p_chunk">@@ -8279,7 +8280,7 @@</span> <span class="p_context"> static void perf_event_addr_filters_apply(struct perf_event *event)</span>
 	if (!mm)
 		goto restart;
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 
 	raw_spin_lock_irqsave(&amp;ifh-&gt;lock, flags);
 	list_for_each_entry(filter, &amp;ifh-&gt;list, entry) {
<span class="p_chunk">@@ -8299,7 +8300,7 @@</span> <span class="p_context"> static void perf_event_addr_filters_apply(struct perf_event *event)</span>
 	event-&gt;addr_filters_gen++;
 	raw_spin_unlock_irqrestore(&amp;ifh-&gt;lock, flags);
 
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	mmput(mm);
 
<span class="p_header">diff --git a/kernel/events/uprobes.c b/kernel/events/uprobes.c</span>
<span class="p_header">index 60e12b39182c..df6da03d5dc1 100644</span>
<span class="p_header">--- a/kernel/events/uprobes.c</span>
<span class="p_header">+++ b/kernel/events/uprobes.c</span>
<span class="p_chunk">@@ -818,7 +818,7 @@</span> <span class="p_context"> register_for_each_vma(struct uprobe *uprobe, struct uprobe_consumer *new)</span>
 		if (err &amp;&amp; is_register)
 			goto free;
 
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 		vma = find_vma(mm, info-&gt;vaddr);
 		if (!vma || !valid_vma(vma, is_register) ||
 		    file_inode(vma-&gt;vm_file) != uprobe-&gt;inode)
<span class="p_chunk">@@ -842,7 +842,7 @@</span> <span class="p_context"> register_for_each_vma(struct uprobe *uprobe, struct uprobe_consumer *new)</span>
 		}
 
  unlock:
<span class="p_del">-		up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_unlock(mm, &amp;mmrange);</span>
  free:
 		mmput(mm);
 		info = free_map_info(info);
<span class="p_chunk">@@ -984,7 +984,7 @@</span> <span class="p_context"> static int unapply_uprobe(struct uprobe *uprobe, struct mm_struct *mm)</span>
 	int err = 0;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	for (vma = mm-&gt;mmap; vma; vma = vma-&gt;vm_next) {
 		unsigned long vaddr;
 		loff_t offset;
<span class="p_chunk">@@ -1001,7 +1001,7 @@</span> <span class="p_context"> static int unapply_uprobe(struct uprobe *uprobe, struct mm_struct *mm)</span>
 		vaddr = offset_to_vaddr(vma, uprobe-&gt;offset);
 		err |= remove_breakpoint(uprobe, mm, vaddr, &amp;mmrange);
 	}
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	return err;
 }
<span class="p_chunk">@@ -1150,8 +1150,9 @@</span> <span class="p_context"> static int xol_add_vma(struct mm_struct *mm, struct xol_area *area)</span>
 {
 	struct vm_area_struct *vma;
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	if (down_write_killable(&amp;mm-&gt;mmap_sem))</span>
<span class="p_add">+	if (mm_write_lock_killable(mm, &amp;mmrange))</span>
 		return -EINTR;
 
 	if (mm-&gt;uprobes_state.xol_area) {
<span class="p_chunk">@@ -1181,7 +1182,7 @@</span> <span class="p_context"> static int xol_add_vma(struct mm_struct *mm, struct xol_area *area)</span>
 	/* pairs with get_xol_area() */
 	smp_store_release(&amp;mm-&gt;uprobes_state.xol_area, area); /* ^^^ */
  fail:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_chunk">@@ -1748,7 +1749,7 @@</span> <span class="p_context"> static struct uprobe *find_active_uprobe(unsigned long bp_vaddr, int *is_swbp)</span>
 	struct vm_area_struct *vma;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	vma = find_vma(mm, bp_vaddr);
 	if (vma &amp;&amp; vma-&gt;vm_start &lt;= bp_vaddr) {
 		if (valid_vma(vma, false)) {
<span class="p_chunk">@@ -1766,7 +1767,7 @@</span> <span class="p_context"> static struct uprobe *find_active_uprobe(unsigned long bp_vaddr, int *is_swbp)</span>
 
 	if (!uprobe &amp;&amp; test_and_clear_bit(MMF_RECALC_UPROBES, &amp;mm-&gt;flags))
 		mmf_recalc_uprobes(mm);
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	return uprobe;
 }
<span class="p_header">diff --git a/kernel/fork.c b/kernel/fork.c</span>
<span class="p_header">index 2113e252cb9d..060554e33111 100644</span>
<span class="p_header">--- a/kernel/fork.c</span>
<span class="p_header">+++ b/kernel/fork.c</span>
<span class="p_chunk">@@ -401,9 +401,11 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 	int retval;
 	unsigned long charge;
 	LIST_HEAD(uf);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(old_mmrange);</span>
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange); /* for the new mm */</span>
 
 	uprobe_start_dup_mmap();
<span class="p_del">-	if (down_write_killable(&amp;oldmm-&gt;mmap_sem)) {</span>
<span class="p_add">+	if (mm_write_lock_killable(oldmm, &amp;old_mmrange)) {</span>
 		retval = -EINTR;
 		goto fail_uprobe_end;
 	}
<span class="p_chunk">@@ -412,7 +414,7 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 	/*
 	 * Not linked in yet - no deadlock potential:
 	 */
<span class="p_del">-	down_write_nested(&amp;mm-&gt;mmap_sem, SINGLE_DEPTH_NESTING);</span>
<span class="p_add">+        mm_write_lock_nested(mm, &amp;mmrange, SINGLE_DEPTH_NESTING);</span>
 
 	/* No ordering required: file already has been exposed. */
 	RCU_INIT_POINTER(mm-&gt;exe_file, get_mm_exe_file(oldmm));
<span class="p_chunk">@@ -522,9 +524,9 @@</span> <span class="p_context"> static __latent_entropy int dup_mmap(struct mm_struct *mm,</span>
 	arch_dup_mmap(oldmm, mm);
 	retval = 0;
 out:
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	flush_tlb_mm(oldmm);
<span class="p_del">-	up_write(&amp;oldmm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(oldmm, &amp;old_mmrange);</span>
 	dup_userfaultfd_complete(&amp;uf);
 fail_uprobe_end:
 	uprobe_end_dup_mmap();
<span class="p_chunk">@@ -554,9 +556,11 @@</span> <span class="p_context"> static inline void mm_free_pgd(struct mm_struct *mm)</span>
 #else
 static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)
 {
<span class="p_del">-	down_write(&amp;oldmm-&gt;mmap_sem);</span>
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
<span class="p_add">+	mm_write_lock(oldmm, &amp;mmrange);</span>
 	RCU_INIT_POINTER(mm-&gt;exe_file, get_mm_exe_file(oldmm));
<span class="p_del">-	up_write(&amp;oldmm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(oldmm, &amp;mmrange);</span>
 	return 0;
 }
 #define mm_alloc_pgd(mm)	(0)
<span class="p_header">diff --git a/kernel/futex.c b/kernel/futex.c</span>
<span class="p_header">index 09a0d86f80a0..6764240e87bb 100644</span>
<span class="p_header">--- a/kernel/futex.c</span>
<span class="p_header">+++ b/kernel/futex.c</span>
<span class="p_chunk">@@ -727,10 +727,10 @@</span> <span class="p_context"> static int fault_in_user_writeable(u32 __user *uaddr)</span>
 	int ret;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	ret = fixup_user_fault(current, mm, (unsigned long)uaddr,
 			       FAULT_FLAG_WRITE, NULL, &amp;mmrange);
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	return ret &lt; 0 ? ret : 0;
 }
<span class="p_header">diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c</span>
<span class="p_header">index 7b6535987500..01f8c533aa21 100644</span>
<span class="p_header">--- a/kernel/sched/fair.c</span>
<span class="p_header">+++ b/kernel/sched/fair.c</span>
<span class="p_chunk">@@ -2470,6 +2470,7 @@</span> <span class="p_context"> void task_numa_work(struct callback_head *work)</span>
 	struct vm_area_struct *vma;
 	unsigned long start, end;
 	unsigned long nr_pte_updates = 0;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 	long pages, virtpages;
 
 	SCHED_WARN_ON(p != container_of(work, struct task_struct, numa_work));
<span class="p_chunk">@@ -2521,7 +2522,7 @@</span> <span class="p_context"> void task_numa_work(struct callback_head *work)</span>
 		return;
 
 
<span class="p_del">-	if (!down_read_trylock(&amp;mm-&gt;mmap_sem))</span>
<span class="p_add">+	if (!mm_read_trylock(mm, &amp;mmrange))</span>
 		return;
 	vma = find_vma(mm, start);
 	if (!vma) {
<span class="p_chunk">@@ -2589,7 +2590,7 @@</span> <span class="p_context"> void task_numa_work(struct callback_head *work)</span>
 		mm-&gt;numa_scan_offset = start;
 	else
 		reset_ptenuma_scan(p);
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	/*
 	 * Make sure tasks use at least 32x as much time to run other code
<span class="p_header">diff --git a/kernel/trace/trace_output.c b/kernel/trace/trace_output.c</span>
<span class="p_header">index 90db994ac900..0c3f5193de41 100644</span>
<span class="p_header">--- a/kernel/trace/trace_output.c</span>
<span class="p_header">+++ b/kernel/trace/trace_output.c</span>
<span class="p_chunk">@@ -395,8 +395,9 @@</span> <span class="p_context"> static int seq_print_user_ip(struct trace_seq *s, struct mm_struct *mm,</span>
 
 	if (mm) {
 		const struct vm_area_struct *vma;
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(mm, &amp;mmrange);</span>
 		vma = find_vma(mm, ip);
 		if (vma) {
 			file = vma-&gt;vm_file;
<span class="p_chunk">@@ -408,7 +409,7 @@</span> <span class="p_context"> static int seq_print_user_ip(struct trace_seq *s, struct mm_struct *mm,</span>
 				trace_seq_printf(s, &quot;[+0x%lx]&quot;,
 						 ip - vmstart);
 		}
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 	}
 	if (ret &amp;&amp; ((sym_flags &amp; TRACE_ITER_SYM_ADDR) || !file))
 		trace_seq_printf(s, &quot; &lt;&quot; IP_FMT &quot;&gt;&quot;, ip);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



