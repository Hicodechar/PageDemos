
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v10,27/27] mm: display pkey in smaps if arch_pkeys_enabled() is true - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v10,27/27] mm: display pkey in smaps if arch_pkeys_enabled() is true</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=2448">Ram Pai</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 19, 2018, 1:50 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1516326648-22775-28-git-send-email-linuxram@us.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10174443/mbox/"
   >mbox</a>
|
   <a href="/patch/10174443/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10174443/">/patch/10174443/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	D5BB3601E7 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Jan 2018 01:54:12 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id C80EA28546
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Jan 2018 01:54:12 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id BCBCF2855A; Fri, 19 Jan 2018 01:54:12 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5C6F328445
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 19 Jan 2018 01:54:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932959AbeASByI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 18 Jan 2018 20:54:08 -0500
Received: from mail-qt0-f196.google.com ([209.85.216.196]:37987 &quot;EHLO
	mail-qt0-f196.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1755870AbeASBxC (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 18 Jan 2018 20:53:02 -0500
Received: by mail-qt0-f196.google.com with SMTP id z10so445600qti.5;
	Thu, 18 Jan 2018 17:53:02 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=SmWIPNL9MTaxuVElIxS6c34H+Mh3PU5KbBtsaVSuT6I=;
	b=T4aqMCYhjrbqTuUGW+Q0i7bsOCbXT42v/0SALAVAfFqSJBlmaIuIlRV/oiqpZkSG9U
	AssxlsyaMdRMNT7lRHD1QOv9kM/Io6Hfb3AGFdYnlE2LitY2NnZ0D0DQ6TtOlzJgf2/b
	YKwBcV46vHF426NnawuwjrDkLhykKt31bQ4VvrHeltOwucuhDC9WLLX335WyLiv7VFco
	eqsL4xdPeV+ip/P11cIG1F0v2Lsn3FxUdUETPGazlPQ3XxGhGs7A0uwtrWcjRya6hrWC
	nkvtYuXvYvabDHu+/VTvk96a+nIIckcAFKTBaBvwAI4wPQdYmHoa8kSBuG9QilU0yTbs
	XlUg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:from:to:cc:subject:date:message-id
	:in-reply-to:references;
	bh=SmWIPNL9MTaxuVElIxS6c34H+Mh3PU5KbBtsaVSuT6I=;
	b=LxbYOkbZw+c9VK4Mp/ZhlRv+sSCkbMq7k5fHuW/LyVY8dTdVRz3HsKxWuzyeZVzlSE
	TwKQ2jlCvP7MchM1Vkk4Ls1Zxxb5V0W1WjD1pm/woJ+/gewJ0Tx4h2Uw+DD3zszCcoKy
	smRysfFAv908Ei1s8NNcIsGhXROzfnO/VwcmJskHyAFzCdjm0Cx18oOG7WeGyf0V0vuY
	P5SKZvTYMbEsZNq28trODIY+kwslOaoLukqxiRpm9tAKAwM57WpCx3U9ZN7JXCaq5ZgK
	SKqdRY9DCAmMFu+FRxBTscvEG+qKItX2dA1yucLHDIQycWNQstvwdKKX8CXBb5n50M70
	fd6A==
X-Gm-Message-State: AKwxyteIRPYGuo5qOwUCzwMMFeNEVVsK8UnV4tsz6+s487emLP3IiWLJ
	8FkzYRjzvU0csS56uFjRG8k=
X-Google-Smtp-Source: ACJfBovdV1jDVvUfstIhywkJuYjGL1lLERvCvX8uQQViK+vhvkzZqKD/mvhm9flg3JszwEENoVJ92A==
X-Received: by 10.55.22.29 with SMTP id g29mr65417541qkh.26.1516326781305;
	Thu, 18 Jan 2018 17:53:01 -0800 (PST)
Received: from localhost.localdomain (50-39-100-161.bvtn.or.frontiernet.net.
	[50.39.100.161]) by smtp.gmail.com with ESMTPSA id
	c127sm5483161qke.78.2018.01.18.17.52.58
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 18 Jan 2018 17:53:00 -0800 (PST)
From: Ram Pai &lt;linuxram@us.ibm.com&gt;
To: mpe@ellerman.id.au, mingo@redhat.com, akpm@linux-foundation.org,
	corbet@lwn.net, arnd@arndb.de
Cc: linuxppc-dev@lists.ozlabs.org, linux-mm@kvack.org, x86@kernel.org,
	linux-arch@vger.kernel.org, linux-doc@vger.kernel.org,
	linux-kselftest@vger.kernel.org, linux-kernel@vger.kernel.org,
	dave.hansen@intel.com, benh@kernel.crashing.org, paulus@samba.org,
	khandual@linux.vnet.ibm.com, aneesh.kumar@linux.vnet.ibm.com,
	bsingharora@gmail.com, hbabu@us.ibm.com, mhocko@kernel.org,
	bauerman@linux.vnet.ibm.com, ebiederm@xmission.com, linuxram@us.ibm.com
Subject: [PATCH v10 27/27] mm: display pkey in smaps if arch_pkeys_enabled()
	is true
Date: Thu, 18 Jan 2018 17:50:48 -0800
Message-Id: &lt;1516326648-22775-28-git-send-email-linuxram@us.ibm.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1516326648-22775-1-git-send-email-linuxram@us.ibm.com&gt;
References: &lt;1516326648-22775-1-git-send-email-linuxram@us.ibm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - Jan. 19, 2018, 1:50 a.m.</div>
<pre class="content">
Currently the  architecture  specific code is expected to
display  the  protection  keys  in  smap  for a given vma.
This can lead to redundant code and possibly to divergent
formats in which the key gets displayed.

This  patch  changes  the implementation. It displays the
pkey only if the architecture support pkeys.

x86 arch_show_smap() function is not needed anymore.
Delete it.
<span class="signed-off-by">
Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
---
 arch/x86/kernel/setup.c |    8 --------
 fs/proc/task_mmu.c      |   11 ++++++-----
 2 files changed, 6 insertions(+), 13 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=156">Eric W. Biederman</a> - Jan. 19, 2018, 4:09 p.m.</div>
<pre class="content">
Ram Pai &lt;linuxram@us.ibm.com&gt; writes:
<span class="quote">
&gt; Currently the  architecture  specific code is expected to</span>
<span class="quote">&gt; display  the  protection  keys  in  smap  for a given vma.</span>
<span class="quote">&gt; This can lead to redundant code and possibly to divergent</span>
<span class="quote">&gt; formats in which the key gets displayed.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This  patch  changes  the implementation. It displays the</span>
<span class="quote">&gt; pkey only if the architecture support pkeys.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; x86 arch_show_smap() function is not needed anymore.</span>
<span class="quote">&gt; Delete it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/x86/kernel/setup.c |    8 --------</span>
<span class="quote">&gt;  fs/proc/task_mmu.c      |   11 ++++++-----</span>
<span class="quote">&gt;  2 files changed, 6 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; index 8af2e8d..ddf945a 100644</span>
<span class="quote">&gt; --- a/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; +++ b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; @@ -1326,11 +1326,3 @@ static int __init register_kernel_offset_dumper(void)</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  __initcall(register_kernel_offset_dumper);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="quote">&gt; -		return;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index 0edd4da..4b39a94 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -18,6 +18,7 @@</span>
<span class="quote">&gt;  #include &lt;linux/page_idle.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/shmem_fs.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/uaccess.h&gt;</span>
<span class="quote">&gt; +#include &lt;linux/pkeys.h&gt;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #include &lt;asm/elf.h&gt;</span>
<span class="quote">&gt;  #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt; @@ -728,10 +729,6 @@ static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; -{</span>
<span class="quote">&gt; -}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt; @@ -851,9 +848,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="quote">&gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; +#endif</span>

Would it be worth it making vma_pkey a noop on architectures that don&#39;t
support protection keys so that we don&#39;t need the #ifdef here?

Eric
<span class="quote">

&gt;  		show_smap_vma_flags(m, vma);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	m_cache_vma(m, vma);</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  }</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - Jan. 19, 2018, 4:50 p.m.</div>
<pre class="content">
On Fri, Jan 19, 2018 at 10:09:41AM -0600, Eric W. Biederman wrote:
<span class="quote">&gt; Ram Pai &lt;linuxram@us.ibm.com&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Currently the  architecture  specific code is expected to</span>
<span class="quote">&gt; &gt; display  the  protection  keys  in  smap  for a given vma.</span>
<span class="quote">&gt; &gt; This can lead to redundant code and possibly to divergent</span>
<span class="quote">&gt; &gt; formats in which the key gets displayed.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; This  patch  changes  the implementation. It displays the</span>
<span class="quote">&gt; &gt; pkey only if the architecture support pkeys.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; x86 arch_show_smap() function is not needed anymore.</span>
<span class="quote">&gt; &gt; Delete it.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/x86/kernel/setup.c |    8 --------</span>
<span class="quote">&gt; &gt;  fs/proc/task_mmu.c      |   11 ++++++-----</span>
<span class="quote">&gt; &gt;  2 files changed, 6 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; &gt; index 8af2e8d..ddf945a 100644</span>
<span class="quote">&gt; &gt; --- a/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; &gt; +++ b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt; &gt; @@ -1326,11 +1326,3 @@ static int __init register_kernel_offset_dumper(void)</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  __initcall(register_kernel_offset_dumper);</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; &gt; -{</span>
<span class="quote">&gt; &gt; -	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="quote">&gt; &gt; -		return;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; &gt; -}</span>
<span class="quote">&gt; &gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; &gt; index 0edd4da..4b39a94 100644</span>
<span class="quote">&gt; &gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; &gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; &gt; @@ -18,6 +18,7 @@</span>
<span class="quote">&gt; &gt;  #include &lt;linux/page_idle.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;linux/shmem_fs.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;linux/uaccess.h&gt;</span>
<span class="quote">&gt; &gt; +#include &lt;linux/pkeys.h&gt;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  #include &lt;asm/elf.h&gt;</span>
<span class="quote">&gt; &gt;  #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt; &gt; @@ -728,10 +729,6 @@ static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  #endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt; &gt; -{</span>
<span class="quote">&gt; &gt; -}</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt; &gt; @@ -851,9 +848,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt; &gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt; &gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="quote">&gt; &gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt; &gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Would it be worth it making vma_pkey a noop on architectures that don&#39;t</span>
<span class="quote">&gt; support protection keys so that we don&#39;t need the #ifdef here?</span>

You mean something like this?
	#define vma_pkey(vma)  
It will lead to compilation error.


I can make it
	#define vma_pkey(vma)  0

and that will work and get rid of the #ifdef

RP
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=156">Eric W. Biederman</a> - Jan. 19, 2018, 5:04 p.m.</div>
<pre class="content">
Ram Pai &lt;linuxram@us.ibm.com&gt; writes:
<span class="quote">
&gt; On Fri, Jan 19, 2018 at 10:09:41AM -0600, Eric W. Biederman wrote:</span>
<span class="quote">&gt;&gt; Ram Pai &lt;linuxram@us.ibm.com&gt; writes:</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; &gt; Currently the  architecture  specific code is expected to</span>
<span class="quote">&gt;&gt; &gt; display  the  protection  keys  in  smap  for a given vma.</span>
<span class="quote">&gt;&gt; &gt; This can lead to redundant code and possibly to divergent</span>
<span class="quote">&gt;&gt; &gt; formats in which the key gets displayed.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; This  patch  changes  the implementation. It displays the</span>
<span class="quote">&gt;&gt; &gt; pkey only if the architecture support pkeys.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; x86 arch_show_smap() function is not needed anymore.</span>
<span class="quote">&gt;&gt; &gt; Delete it.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; Signed-off-by: Ram Pai &lt;linuxram@us.ibm.com&gt;</span>
<span class="quote">&gt;&gt; &gt; ---</span>
<span class="quote">&gt;&gt; &gt;  arch/x86/kernel/setup.c |    8 --------</span>
<span class="quote">&gt;&gt; &gt;  fs/proc/task_mmu.c      |   11 ++++++-----</span>
<span class="quote">&gt;&gt; &gt;  2 files changed, 6 insertions(+), 13 deletions(-)</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; index 8af2e8d..ddf945a 100644</span>
<span class="quote">&gt;&gt; &gt; --- a/arch/x86/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; +++ b/arch/x86/kernel/setup.c</span>
<span class="quote">&gt;&gt; &gt; @@ -1326,11 +1326,3 @@ static int __init register_kernel_offset_dumper(void)</span>
<span class="quote">&gt;&gt; &gt;  	return 0;</span>
<span class="quote">&gt;&gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt;  __initcall(register_kernel_offset_dumper);</span>
<span class="quote">&gt;&gt; &gt; -</span>
<span class="quote">&gt;&gt; &gt; -void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt;&gt; &gt; -{</span>
<span class="quote">&gt;&gt; &gt; -	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="quote">&gt;&gt; &gt; -		return;</span>
<span class="quote">&gt;&gt; &gt; -</span>
<span class="quote">&gt;&gt; &gt; -	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt;&gt; &gt; -}</span>
<span class="quote">&gt;&gt; &gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; &gt; index 0edd4da..4b39a94 100644</span>
<span class="quote">&gt;&gt; &gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; &gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt;&gt; &gt; @@ -18,6 +18,7 @@</span>
<span class="quote">&gt;&gt; &gt;  #include &lt;linux/page_idle.h&gt;</span>
<span class="quote">&gt;&gt; &gt;  #include &lt;linux/shmem_fs.h&gt;</span>
<span class="quote">&gt;&gt; &gt;  #include &lt;linux/uaccess.h&gt;</span>
<span class="quote">&gt;&gt; &gt; +#include &lt;linux/pkeys.h&gt;</span>
<span class="quote">&gt;&gt; &gt;  </span>
<span class="quote">&gt;&gt; &gt;  #include &lt;asm/elf.h&gt;</span>
<span class="quote">&gt;&gt; &gt;  #include &lt;asm/tlb.h&gt;</span>
<span class="quote">&gt;&gt; &gt; @@ -728,10 +729,6 @@ static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt;&gt; &gt;  }</span>
<span class="quote">&gt;&gt; &gt;  #endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt;&gt; &gt;  </span>
<span class="quote">&gt;&gt; &gt; -void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt;&gt; &gt; -{</span>
<span class="quote">&gt;&gt; &gt; -}</span>
<span class="quote">&gt;&gt; &gt; -</span>
<span class="quote">&gt;&gt; &gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;&gt; &gt;  {</span>
<span class="quote">&gt;&gt; &gt;  	struct proc_maps_private *priv = m-&gt;private;</span>
<span class="quote">&gt;&gt; &gt; @@ -851,9 +848,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;&gt; &gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt;&gt; &gt;  </span>
<span class="quote">&gt;&gt; &gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt;&gt; &gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt;&gt; &gt; +#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="quote">&gt;&gt; &gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt;&gt; &gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt;&gt; &gt; +#endif</span>
<span class="quote">&gt;&gt; </span>
<span class="quote">&gt;&gt; Would it be worth it making vma_pkey a noop on architectures that don&#39;t</span>
<span class="quote">&gt;&gt; support protection keys so that we don&#39;t need the #ifdef here?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; You mean something like this?</span>
<span class="quote">&gt; 	#define vma_pkey(vma)  </span>
<span class="quote">&gt; It will lead to compilation error.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I can make it</span>
<span class="quote">&gt; 	#define vma_pkey(vma)  0</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; and that will work and get rid of the #ifdef</span>

Yes the second is what I was thinking.

I don&#39;t know if it is worth it but #ifdefs can be problematic as the
result in code not being compile tested.

Eric
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Jan. 30, 2018, 12:16 p.m.</div>
<pre class="content">
On Thu 18-01-18 17:50:48, Ram Pai wrote:
[...]
<span class="quote">&gt; @@ -851,9 +848,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt; +#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="quote">&gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		show_smap_vma_flags(m, vma);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; +</span>

Why do you need to add ifdef here? The previous patch should make
arch_pkeys_enabled == F when CONFIG_ARCH_HAS_PKEYS=n. Btw. could you
merge those two patches into one. It is usually much easier to review a
new helper function if it is added along with a user.
<span class="quote">
&gt;  	m_cache_vma(m, vma);</span>
<span class="quote">&gt;  	return ret;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 1.7.1</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2448">Ram Pai</a> - Jan. 30, 2018, 4:28 p.m.</div>
<pre class="content">
On Tue, Jan 30, 2018 at 01:16:11PM +0100, Michal Hocko wrote:
<span class="quote">&gt; On Thu 18-01-18 17:50:48, Ram Pai wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; @@ -851,9 +848,13 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt; &gt;  			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	if (!rollup_mode) {</span>
<span class="quote">&gt; &gt; -		arch_show_smap(m, vma);</span>
<span class="quote">&gt; &gt; +#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="quote">&gt; &gt; +		if (arch_pkeys_enabled())</span>
<span class="quote">&gt; &gt; +			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="quote">&gt; &gt; +#endif</span>
<span class="quote">&gt; &gt;  		show_smap_vma_flags(m, vma);</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Why do you need to add ifdef here? The previous patch should make</span>
<span class="quote">&gt; arch_pkeys_enabled == F when CONFIG_ARCH_HAS_PKEYS=n.</span>

You are right. it need not be wrapped in CONFIG_ARCH_HAS_PKEYS.  I had to do it
because vma_pkey(vma)  is not defined in some architectures.

I will provide a generic vma_pkey() definition for architectures that do 
not support PKEYS.
<span class="quote">


&gt; Btw. could you</span>
<span class="quote">&gt; merge those two patches into one. It is usually much easier to review a</span>
<span class="quote">&gt; new helper function if it is added along with a user.</span>


ok.

Thanks,
RP
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c</span>
<span class="p_header">index 8af2e8d..ddf945a 100644</span>
<span class="p_header">--- a/arch/x86/kernel/setup.c</span>
<span class="p_header">+++ b/arch/x86/kernel/setup.c</span>
<span class="p_chunk">@@ -1326,11 +1326,3 @@</span> <span class="p_context"> static int __init register_kernel_offset_dumper(void)</span>
 	return 0;
 }
 __initcall(register_kernel_offset_dumper);
<span class="p_del">-</span>
<span class="p_del">-void arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-	if (!boot_cpu_has(X86_FEATURE_OSPKE))</span>
<span class="p_del">-		return;</span>
<span class="p_del">-</span>
<span class="p_del">-	seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="p_del">-}</span>
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index 0edd4da..4b39a94 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -18,6 +18,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/page_idle.h&gt;
 #include &lt;linux/shmem_fs.h&gt;
 #include &lt;linux/uaccess.h&gt;
<span class="p_add">+#include &lt;linux/pkeys.h&gt;</span>
 
 #include &lt;asm/elf.h&gt;
 #include &lt;asm/tlb.h&gt;
<span class="p_chunk">@@ -728,10 +729,6 @@</span> <span class="p_context"> static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
 }
 #endif /* HUGETLB_PAGE */
 
<span class="p_del">-void __weak arch_show_smap(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="p_del">-{</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct proc_maps_private *priv = m-&gt;private;
<span class="p_chunk">@@ -851,9 +848,13 @@</span> <span class="p_context"> static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
 			   (unsigned long)(mss-&gt;pss &gt;&gt; (10 + PSS_SHIFT)));
 
 	if (!rollup_mode) {
<span class="p_del">-		arch_show_smap(m, vma);</span>
<span class="p_add">+#ifdef CONFIG_ARCH_HAS_PKEYS</span>
<span class="p_add">+		if (arch_pkeys_enabled())</span>
<span class="p_add">+			seq_printf(m, &quot;ProtectionKey:  %8u\n&quot;, vma_pkey(vma));</span>
<span class="p_add">+#endif</span>
 		show_smap_vma_flags(m, vma);
 	}
<span class="p_add">+</span>
 	m_cache_vma(m, vma);
 	return ret;
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



