
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,02/07] iommu/ipmmu-vmsa: Rework interrupt code and use bitmap for context - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,02/07] iommu/ipmmu-vmsa: Rework interrupt code and use bitmap for context</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=19">Magnus Damm</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 19, 2016, 11:35 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161019233553.10506.72700.sendpatchset@little-apple&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9385605/mbox/"
   >mbox</a>
|
   <a href="/patch/9385605/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9385605/">/patch/9385605/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	48F9E60487 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 19 Oct 2016 23:45:19 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 2124628B5D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 19 Oct 2016 23:45:19 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 15F0C29087; Wed, 19 Oct 2016 23:45:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,
	DKIM_ADSP_CUSTOM_MED, 
	DKIM_SIGNED,FREEMAIL_FROM,RCVD_IN_DNSWL_HI,T_DKIM_INVALID
	autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9CA3C28B5D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 19 Oct 2016 23:45:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S932581AbcJSXnz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 19 Oct 2016 19:43:55 -0400
Received: from mail-pf0-f193.google.com ([209.85.192.193]:35074 &quot;EHLO
	mail-pf0-f193.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S932405AbcJSXnr (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 19 Oct 2016 19:43:47 -0400
Received: by mail-pf0-f193.google.com with SMTP id s8so3679713pfj.2;
	Wed, 19 Oct 2016 16:43:47 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=from:to:cc:date:message-id:in-reply-to:references:subject;
	bh=XsaHZZZLaXibbdBEjl4aoZ57oCcCMFDHDKV+wysyBs4=;
	b=thy5qUua9KRj3qEYlMswjRxA23n8qEw0j9/OLczmGLN9ioyb24nESGqRZYGOFxEYUH
	JQkj7KPj9rlfCk5LgbtdDQQaMmlB/gGzgmOGb4JpLih0t5bp+SZxrqhQ32EHe9269Y0N
	BppV59zpYlXgAm19tJgTY6ywOswoUqnMsKH4OJD6y61w+m6uDPutP4M52bd8/m+KcILO
	+VJAgiKKOgbZHOTjdIfgGcXjJ3kjnaPpo1S9tdla+YdI8gpE5sAI8LILEUY1+hERP4gq
	d+zSmgvUl2dTgTorUFjdysyNXZhxBMSLntLLPa7Ocrt5hlILABgISE38AaJP/WpCJjbH
	7rjA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20130820;
	h=x-gm-message-state:from:to:cc:date:message-id:in-reply-to
	:references:subject;
	bh=XsaHZZZLaXibbdBEjl4aoZ57oCcCMFDHDKV+wysyBs4=;
	b=aSet74dPujU4LY6ZVXgARsmuC3Ama+ZgzaydlLaQu5QjXwZ85oAm8DhmcPQ0n+c2yj
	E91+hSeliz+FPqvZjxM1bZtEF9ND8t6CYzvFSrF3yKbv96hkmZ7AI7BQ+wW0Y22mKPk1
	QSbqGd7Y9WsM3bq77Q83WqpAtntlTdCXulo5/2Pcu74o6OnnrZOZ8pGLk1JB/DOY/dtO
	Nmq1bE6uZBhapWDVbJ90jboanGajTNPHKbo79YLrrRqwcrX33lmz03iJIAcMdHcMEgTy
	DyMEYYCKUlrWSZQ3mUSeBmPEehXpPawO+4horjSa/O6XpoZNxYo5YB3Virk9oTGf9Sv3
	JrhQ==
X-Gm-Message-State: AA6/9Rk6yspLbmB7Zq+3vUCq71Q+GU6G3Pbg+cgnaLrkRDVUF/5bPsTYoa5yEky5ZfFk/w==
X-Received: by 10.98.205.207 with SMTP id
	o198mr15688904pfg.114.1476920626933; 
	Wed, 19 Oct 2016 16:43:46 -0700 (PDT)
Received: from [127.0.0.1] (s214090.ppp.asahi-net.or.jp. [220.157.214.90])
	by smtp.gmail.com with ESMTPSA id
	n2sm66055247pfa.75.2016.10.19.16.43.43
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 19 Oct 2016 16:43:45 -0700 (PDT)
From: Magnus Damm &lt;magnus.damm@gmail.com&gt;
To: iommu@lists.linux-foundation.org
Cc: laurent.pinchart+renesas@ideasonboard.com, geert+renesas@glider.be,
	joro@8bytes.org, linux-kernel@vger.kernel.org,
	linux-renesas-soc@vger.kernel.org, horms+renesas@verge.net.au,
	Magnus Damm &lt;magnus.damm@gmail.com&gt;, robin.murphy@arm.com,
	m.szyprowski@samsung.com
Date: Thu, 20 Oct 2016 08:35:53 +0900
Message-Id: &lt;20161019233553.10506.72700.sendpatchset@little-apple&gt;
In-Reply-To: &lt;20161019233533.10506.16810.sendpatchset@little-apple&gt;
References: &lt;20161019233533.10506.16810.sendpatchset@little-apple&gt;
Subject: [PATCH v6 02/07] iommu/ipmmu-vmsa: Rework interrupt code and use
	bitmap for context
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=19">Magnus Damm</a> - Oct. 19, 2016, 11:35 p.m.</div>
<pre class="content">
<span class="from">From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>

Introduce a bitmap for context handing and convert the
interrupt routine to handle all registered contexts.

At this point the number of contexts are still limited.

Also remove the use of the ARM specific mapping variable
from ipmmu_irq() to allow compile on ARM64.
<span class="signed-off-by">
Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="reviewed-by">Reviewed-by: Joerg Roedel &lt;jroedel@suse.de&gt;</span>
---

 Changes since V5:
 - None

 Changes since V4:
 - None

 Changes since V3:
 - None

 Changes since V2: (Thanks again to Laurent!)
 - Introduce a spinlock together with the bitmap and domain array.
 - Break out code into separate functions for alloc and free.
 - Perform free after (instead of before) configuring hardware registers.
 - Use the spinlock to protect the domain array in the interrupt handler.

 Changes since V1: (Thanks to Laurent for feedback!)
 - Use simple find_first_zero()/set_bit()/clear_bit() for context management.
 - For allocation rely on spinlock held when calling ipmmu_domain_init_context()
 - For test/free use atomic bitops
 - Return IRQ_HANDLED if any of the contexts generated interrupts

 drivers/iommu/ipmmu-vmsa.c |   76 ++++++++++++++++++++++++++++++++++++++------
 1 file changed, 66 insertions(+), 10 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2987">Laurent Pinchart</a> - Nov. 11, 2016, 12:46 a.m.</div>
<pre class="content">
Hi Magnus,

Thank you for the patch.

On Thursday 20 Oct 2016 08:35:53 Magnus Damm wrote:
<span class="quote">&gt; From: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Introduce a bitmap for context handing and convert the</span>
<span class="quote">&gt; interrupt routine to handle all registered contexts.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; At this point the number of contexts are still limited.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Also remove the use of the ARM specific mapping variable</span>
<span class="quote">&gt; from ipmmu_irq() to allow compile on ARM64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Magnus Damm &lt;damm+renesas@opensource.se&gt;</span>
<span class="quote">&gt; Reviewed-by: Joerg Roedel &lt;jroedel@suse.de&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V5:</span>
<span class="quote">&gt;  - None</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V4:</span>
<span class="quote">&gt;  - None</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V3:</span>
<span class="quote">&gt;  - None</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V2: (Thanks again to Laurent!)</span>
<span class="quote">&gt;  - Introduce a spinlock together with the bitmap and domain array.</span>
<span class="quote">&gt;  - Break out code into separate functions for alloc and free.</span>
<span class="quote">&gt;  - Perform free after (instead of before) configuring hardware registers.</span>
<span class="quote">&gt;  - Use the spinlock to protect the domain array in the interrupt handler.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  Changes since V1: (Thanks to Laurent for feedback!)</span>
<span class="quote">&gt;  - Use simple find_first_zero()/set_bit()/clear_bit() for context</span>
<span class="quote">&gt; management. - For allocation rely on spinlock held when calling</span>
<span class="quote">&gt; ipmmu_domain_init_context() - For test/free use atomic bitops</span>
<span class="quote">&gt;  - Return IRQ_HANDLED if any of the contexts generated interrupts</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  drivers/iommu/ipmmu-vmsa.c |   76 +++++++++++++++++++++++++++++++++++------</span>
<span class="quote">&gt;  1 file changed, 66 insertions(+), 10 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --- 0004/drivers/iommu/ipmmu-vmsa.c</span>
<span class="quote">&gt; +++ work/drivers/iommu/ipmmu-vmsa.c	2016-09-20 21:48:23.770607110 +0900</span>
<span class="quote">&gt; @@ -8,6 +8,7 @@</span>
<span class="quote">&gt;   * the Free Software Foundation; version 2 of the License.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#include &lt;linux/bitmap.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/delay.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/dma-mapping.h&gt;</span>
<span class="quote">&gt;  #include &lt;linux/err.h&gt;</span>
<span class="quote">&gt; @@ -26,12 +27,17 @@</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  #include &quot;io-pgtable.h&quot;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +#define IPMMU_CTX_MAX 1</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  struct ipmmu_vmsa_device {</span>
<span class="quote">&gt;  	struct device *dev;</span>
<span class="quote">&gt;  	void __iomem *base;</span>
<span class="quote">&gt;  	struct list_head list;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	unsigned int num_utlbs;</span>
<span class="quote">&gt; +	spinlock_t lock;			/* Protects ctx and domains[] </span>
*/
<span class="quote">&gt; +	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);</span>
<span class="quote">&gt; +	struct ipmmu_vmsa_domain *domains[IPMMU_CTX_MAX];</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	struct dma_iommu_mapping *mapping;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt; @@ -293,9 +299,29 @@ static struct iommu_gather_ops ipmmu_gat</span>
<span class="quote">&gt;   * Domain/Context Management</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static int ipmmu_domain_allocate_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="quote">&gt; +					 struct ipmmu_vmsa_domain *domain)</span>

Nitpicking, I&#39;d name this ipmmu_domain_alloc_context() as the driver uses the 
alloc abbreviation already.
<span class="quote">
&gt; +{</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	ret = find_first_zero_bit(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
<span class="quote">&gt; +	if (ret != IPMMU_CTX_MAX) {</span>
<span class="quote">&gt; +		mmu-&gt;domains[ret] = domain;</span>
<span class="quote">&gt; +		set_bit(ret, mmu-&gt;ctx);</span>
<span class="quote">&gt; +	}</span>

How about returning a negative error code on error instead of IPMMU_CTX_MAX ? 
I think it would make the API clearer, avoiding the need to think about 
special error handling for this function.

Having said that, I find that the init/alloc and destroy/free function names 
don&#39;t carry a very clear semantic. Given the size of the alloc and free 
functions, how about inlining them in their single caller ?
<span class="quote">
&gt; +</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return ret;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int ipmmu_domain_init_context(struct ipmmu_vmsa_domain *domain)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	u64 ttbr;</span>
<span class="quote">&gt; +	int ret;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Allocate the page table operations.</span>
<span class="quote">&gt; @@ -325,10 +351,15 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;  		return -EINVAL;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; -	 * TODO: When adding support for multiple contexts, find an unused</span>
<span class="quote">&gt; -	 * context.</span>
<span class="quote">&gt; +	 * Find an unused context.</span>
<span class="quote">&gt;  	 */</span>

The comment now holds on one line.
<span class="quote">
&gt; -	domain-&gt;context_id = 0;</span>
<span class="quote">&gt; +	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="quote">&gt; +	if (ret == IPMMU_CTX_MAX) {</span>
<span class="quote">&gt; +		free_io_pgtable_ops(domain-&gt;iop);</span>
<span class="quote">&gt; +		return -EBUSY;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	domain-&gt;context_id = ret;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/* TTBR0 */</span>
<span class="quote">&gt;  	ttbr = domain-&gt;cfg.arm_lpae_s1_cfg.ttbr[0];</span>
<span class="quote">&gt; @@ -370,6 +401,19 @@ static int ipmmu_domain_init_context(str</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; +static void ipmmu_domain_free_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="quote">&gt; +				      unsigned int context_id)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long flags;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	clear_bit(context_id, mmu-&gt;ctx);</span>
<span class="quote">&gt; +	mmu-&gt;domains[context_id] = NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static void ipmmu_domain_destroy_context(struct ipmmu_vmsa_domain *domain)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt; @@ -380,6 +424,7 @@ static void ipmmu_domain_destroy_context</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt;  	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);</span>
<span class="quote">&gt;  	ipmmu_tlb_sync(domain);</span>
<span class="quote">&gt; +	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; ---------------------------------------------------------------------------</span>
<span class="quote">&gt; -- @@ -437,16 +482,25 @@ static irqreturn_t ipmmu_domain_irq(stru</span>
<span class="quote">&gt;  static irqreturn_t ipmmu_irq(int irq, void *dev)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct ipmmu_vmsa_device *mmu = dev;</span>
<span class="quote">&gt; -	struct iommu_domain *io_domain;</span>
<span class="quote">&gt; -	struct ipmmu_vmsa_domain *domain;</span>
<span class="quote">&gt; +	irqreturn_t status = IRQ_NONE;</span>
<span class="quote">&gt; +	unsigned int i;</span>
<span class="quote">&gt; +	unsigned long flags;</span>

Nitpicking again I like to arrange variable declarations by decreasing line 
length when there&#39;s no reason not to :-)
<span class="quote">
&gt; -	if (!mmu-&gt;mapping)</span>
<span class="quote">&gt; -		return IRQ_NONE;</span>
<span class="quote">&gt; +	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/*</span>
<span class="quote">&gt; +	 * Check interrupts for all active contexts.</span>
<span class="quote">&gt; +	 */</span>

This comment holds on a single line too.

With all these small comments addressed,
<span class="reviewed-by">
Reviewed-by: Laurent Pinchart &lt;laurent.pinchart@ideasonboard.com&gt;</span>
<span class="quote">
&gt; +	for (i = 0; i &lt; IPMMU_CTX_MAX; i++) {</span>
<span class="quote">&gt; +		if (!mmu-&gt;domains[i])</span>
<span class="quote">&gt; +			continue;</span>
<span class="quote">&gt; +		if (ipmmu_domain_irq(mmu-&gt;domains[i]) == IRQ_HANDLED)</span>
<span class="quote">&gt; +			status = IRQ_HANDLED;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	io_domain = mmu-&gt;mapping-&gt;domain;</span>
<span class="quote">&gt; -	domain = to_vmsa_domain(io_domain);</span>
<span class="quote">&gt; +	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	return ipmmu_domain_irq(domain);</span>
<span class="quote">&gt; +	return status;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt; ---------------------------------------------------------------------------</span>
<span class="quote">&gt; -- @@ -774,6 +828,8 @@ static int ipmmu_probe(struct platform_d</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	mmu-&gt;dev = &amp;pdev-&gt;dev;</span>
<span class="quote">&gt;  	mmu-&gt;num_utlbs = 32;</span>
<span class="quote">&gt; +	spin_lock_init(&amp;mmu-&gt;lock);</span>
<span class="quote">&gt; +	bitmap_zero(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  	/* Map I/O memory and request IRQ. */</span>
<span class="quote">&gt;  	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- 0004/drivers/iommu/ipmmu-vmsa.c</span>
<span class="p_header">+++ work/drivers/iommu/ipmmu-vmsa.c	2016-09-20 21:48:23.770607110 +0900</span>
<span class="p_chunk">@@ -8,6 +8,7 @@</span> <span class="p_context"></span>
  * the Free Software Foundation; version 2 of the License.
  */
 
<span class="p_add">+#include &lt;linux/bitmap.h&gt;</span>
 #include &lt;linux/delay.h&gt;
 #include &lt;linux/dma-mapping.h&gt;
 #include &lt;linux/err.h&gt;
<span class="p_chunk">@@ -26,12 +27,17 @@</span> <span class="p_context"></span>
 
 #include &quot;io-pgtable.h&quot;
 
<span class="p_add">+#define IPMMU_CTX_MAX 1</span>
<span class="p_add">+</span>
 struct ipmmu_vmsa_device {
 	struct device *dev;
 	void __iomem *base;
 	struct list_head list;
 
 	unsigned int num_utlbs;
<span class="p_add">+	spinlock_t lock;			/* Protects ctx and domains[] */</span>
<span class="p_add">+	DECLARE_BITMAP(ctx, IPMMU_CTX_MAX);</span>
<span class="p_add">+	struct ipmmu_vmsa_domain *domains[IPMMU_CTX_MAX];</span>
 
 	struct dma_iommu_mapping *mapping;
 };
<span class="p_chunk">@@ -293,9 +299,29 @@</span> <span class="p_context"> static struct iommu_gather_ops ipmmu_gat</span>
  * Domain/Context Management
  */
 
<span class="p_add">+static int ipmmu_domain_allocate_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="p_add">+					 struct ipmmu_vmsa_domain *domain)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+	int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = find_first_zero_bit(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
<span class="p_add">+	if (ret != IPMMU_CTX_MAX) {</span>
<span class="p_add">+		mmu-&gt;domains[ret] = domain;</span>
<span class="p_add">+		set_bit(ret, mmu-&gt;ctx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static int ipmmu_domain_init_context(struct ipmmu_vmsa_domain *domain)
 {
 	u64 ttbr;
<span class="p_add">+	int ret;</span>
 
 	/*
 	 * Allocate the page table operations.
<span class="p_chunk">@@ -325,10 +351,15 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 		return -EINVAL;
 
 	/*
<span class="p_del">-	 * TODO: When adding support for multiple contexts, find an unused</span>
<span class="p_del">-	 * context.</span>
<span class="p_add">+	 * Find an unused context.</span>
 	 */
<span class="p_del">-	domain-&gt;context_id = 0;</span>
<span class="p_add">+	ret = ipmmu_domain_allocate_context(domain-&gt;mmu, domain);</span>
<span class="p_add">+	if (ret == IPMMU_CTX_MAX) {</span>
<span class="p_add">+		free_io_pgtable_ops(domain-&gt;iop);</span>
<span class="p_add">+		return -EBUSY;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	domain-&gt;context_id = ret;</span>
 
 	/* TTBR0 */
 	ttbr = domain-&gt;cfg.arm_lpae_s1_cfg.ttbr[0];
<span class="p_chunk">@@ -370,6 +401,19 @@</span> <span class="p_context"> static int ipmmu_domain_init_context(str</span>
 	return 0;
 }
 
<span class="p_add">+static void ipmmu_domain_free_context(struct ipmmu_vmsa_device *mmu,</span>
<span class="p_add">+				      unsigned int context_id)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	clear_bit(context_id, mmu-&gt;ctx);</span>
<span class="p_add">+	mmu-&gt;domains[context_id] = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void ipmmu_domain_destroy_context(struct ipmmu_vmsa_domain *domain)
 {
 	/*
<span class="p_chunk">@@ -380,6 +424,7 @@</span> <span class="p_context"> static void ipmmu_domain_destroy_context</span>
 	 */
 	ipmmu_ctx_write(domain, IMCTR, IMCTR_FLUSH);
 	ipmmu_tlb_sync(domain);
<span class="p_add">+	ipmmu_domain_free_context(domain-&gt;mmu, domain-&gt;context_id);</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -437,16 +482,25 @@</span> <span class="p_context"> static irqreturn_t ipmmu_domain_irq(stru</span>
 static irqreturn_t ipmmu_irq(int irq, void *dev)
 {
 	struct ipmmu_vmsa_device *mmu = dev;
<span class="p_del">-	struct iommu_domain *io_domain;</span>
<span class="p_del">-	struct ipmmu_vmsa_domain *domain;</span>
<span class="p_add">+	irqreturn_t status = IRQ_NONE;</span>
<span class="p_add">+	unsigned int i;</span>
<span class="p_add">+	unsigned long flags;</span>
 
<span class="p_del">-	if (!mmu-&gt;mapping)</span>
<span class="p_del">-		return IRQ_NONE;</span>
<span class="p_add">+	spin_lock_irqsave(&amp;mmu-&gt;lock, flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check interrupts for all active contexts.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	for (i = 0; i &lt; IPMMU_CTX_MAX; i++) {</span>
<span class="p_add">+		if (!mmu-&gt;domains[i])</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		if (ipmmu_domain_irq(mmu-&gt;domains[i]) == IRQ_HANDLED)</span>
<span class="p_add">+			status = IRQ_HANDLED;</span>
<span class="p_add">+	}</span>
 
<span class="p_del">-	io_domain = mmu-&gt;mapping-&gt;domain;</span>
<span class="p_del">-	domain = to_vmsa_domain(io_domain);</span>
<span class="p_add">+	spin_unlock_irqrestore(&amp;mmu-&gt;lock, flags);</span>
 
<span class="p_del">-	return ipmmu_domain_irq(domain);</span>
<span class="p_add">+	return status;</span>
 }
 
 /* -----------------------------------------------------------------------------
<span class="p_chunk">@@ -774,6 +828,8 @@</span> <span class="p_context"> static int ipmmu_probe(struct platform_d</span>
 
 	mmu-&gt;dev = &amp;pdev-&gt;dev;
 	mmu-&gt;num_utlbs = 32;
<span class="p_add">+	spin_lock_init(&amp;mmu-&gt;lock);</span>
<span class="p_add">+	bitmap_zero(mmu-&gt;ctx, IPMMU_CTX_MAX);</span>
 
 	/* Map I/O memory and request IRQ. */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



