
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[08/10] x86/hyper-v: use hypercall for remote TLB flush - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [08/10] x86/hyper-v: use hypercall for remote TLB flush</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=169083">kys@exchange.microsoft.com</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 25, 2017, 5:06 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1498410409-30997-8-git-send-email-kys@exchange.microsoft.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9808275/mbox/"
   >mbox</a>
|
   <a href="/patch/9808275/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9808275/">/patch/9808275/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	35768603F3 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 25 Jun 2017 17:08:52 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 1E73D27FA6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 25 Jun 2017 17:08:52 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 134512865B; Sun, 25 Jun 2017 17:08:52 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DC85927FA6
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun, 25 Jun 2017 17:08:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751474AbdFYRIJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 25 Jun 2017 13:08:09 -0400
Received: from a2nlsmtp01-05.prod.iad2.secureserver.net
	([198.71.225.49]:43998
	&quot;EHLO a2nlsmtp01-05.prod.iad2.secureserver.net&quot;
	rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751363AbdFYRHx (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 25 Jun 2017 13:07:53 -0400
Received: from linuxonhyperv.com ([107.180.71.197])
	by : HOSTING RELAY : with SMTP
	id PAzsdMxD5CQzGPAzsdvTbU; Sun, 25 Jun 2017 10:06:52 -0700
x-originating-ip: 107.180.71.197
Received: from kys by linuxonhyperv.com with local (Exim 4.89)
	(envelope-from &lt;kys@linuxonhyperv.com&gt;)
	id 1dPAzs-00085E-0V; Sun, 25 Jun 2017 10:06:52 -0700
From: kys@exchange.microsoft.com
To: gregkh@linuxfoundation.org, linux-kernel@vger.kernel.org,
	devel@linuxdriverproject.org, olaf@aepfle.de, apw@canonical.com,
	vkuznets@redhat.com, jasowang@redhat.com,
	leann.ogasawara@canonical.com, marcelo.cerri@canonical.com,
	sthemmin@microsoft.com
Cc: &quot;K. Y. Srinivasan&quot; &lt;kys@microsoft.com&gt;
Subject: [PATCH 08/10] x86/hyper-v: use hypercall for remote TLB flush
Date: Sun, 25 Jun 2017 10:06:47 -0700
Message-Id: &lt;1498410409-30997-8-git-send-email-kys@exchange.microsoft.com&gt;
X-Mailer: git-send-email 1.7.1
In-Reply-To: &lt;1498410380-30955-1-git-send-email-kys@exchange.microsoft.com&gt;
References: &lt;1498410380-30955-1-git-send-email-kys@exchange.microsoft.com&gt;
Reply-To: kys@microsoft.com
X-CMAE-Envelope: MS4wfFjTGhzRg8tCB6TY/2zhfd2T6gib2gHlO1vuTm3TX6NiBXDVr8KRCyqSuFKdv0kRY10uWyM+hjhyx057LAsmLCvtgsYKNG24ocIzkoQW3IDGxNgwgdy6
	vlTiP8Fg4z9VybOY4GPHFlfhp6CnCIzIMu9TU548HlUOYQtxMwzAMWXxC2n7a6WtYmK17UyGdRMEmbVKmx6m5gSi03GzdnKnVhGrQ4CAWRqDLZxS34+/lpJM
	AsKT38L/IUJCyOSe0HPStLRYTxqQJSd7Yitgu5B0R2k1NrQgKGBhk5T3B+piF52Ml6DhnATnMNAioAs0WnRySMNZn0nLz4gFxPCqhuf3k5hMol5wk1GqznLC
	A5p6vbtk/EEDjRSVzru25h05ro1bR/8LzC4QfwtpmLLN/EddR1YBxf2QNNQ8ddixpfUElexlOBDtm5Z2d7xUxgLkSKZ4N9HRwodcd9IHY5EYADYpPU83JGAP
	K0AjsKMJKY/YJGiXW8RrPU1apd59WCEvcKMg+rxNFFGc2cJJ9fqfWNii5dnKDfKf4FDpz9FoAtfGixfU
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=169083">kys@exchange.microsoft.com</a> - June 25, 2017, 5:06 p.m.</div>
<pre class="content">
<span class="from">From: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>

Hyper-V host can suggest us to use hypercall for doing remote TLB flush,
this is supposed to work faster than IPIs.

Implementation details: to do HvFlushVirtualAddress{Space,List} hypercalls
we need to put the input somewhere in memory and we don&#39;t really want to
have memory allocation on each call so we pre-allocate per cpu memory areas
on boot.

pv_ops patching is happening very early so we need to separate
hyperv_setup_mmu_ops() and hyper_alloc_mmu().

It is possible and easy to implement local TLB flushing too and there is
even a hint for that. However, I don&#39;t see a room for optimization on the
host side as both hypercall and native tlb flush will result in vmexit. The
hint is also not set on modern Hyper-V versions.
<span class="signed-off-by">
Signed-off-by: Vitaly Kuznetsov &lt;vkuznets@redhat.com&gt;</span>
<span class="signed-off-by">Signed-off-by: K. Y. Srinivasan &lt;kys@microsoft.com&gt;</span>
---
 arch/x86/hyperv/Makefile           |    2 +-
 arch/x86/hyperv/hv_init.c          |    2 +
 arch/x86/hyperv/mmu.c              |  135 ++++++++++++++++++++++++++++++++++++
 arch/x86/include/asm/mshyperv.h    |    4 +
 arch/x86/include/uapi/asm/hyperv.h |    7 ++
 arch/x86/kernel/cpu/mshyperv.c     |    1 +
 6 files changed, 150 insertions(+), 1 deletions(-)
 create mode 100644 arch/x86/hyperv/mmu.c
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - June 26, 2017, 6:33 a.m.</div>
<pre class="content">
Hi Vitaly,

[auto build test ERROR on next-20170619]
[cannot apply to tip/x86/core linus/master linux/master v4.12-rc6 v4.12-rc5 v4.12-rc4 v4.12-rc7]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/kys-exchange-microsoft-com/x86-hyper-v-include-hyperv-only-when-CONFIG_HYPERV-is-set/20170626-133601
config: i386-randconfig-a0-06250447 (attached as .config)
compiler: gcc-5 (Debian 5.4.1-2) 5.4.1 20160904
reproduce:
        # save the attached .config to linux build tree
        make ARCH=i386 

All errors (new ones prefixed by &gt;&gt;):

   arch/x86/hyperv/mmu.c: In function &#39;hyperv_flush_tlb_others&#39;:
<span class="quote">&gt;&gt; arch/x86/hyperv/mmu.c:120:32: error: passing argument 2 of &#39;native_flush_tlb_others&#39; from incompatible pointer type [-Werror=incompatible-pointer-types]</span>
     native_flush_tlb_others(cpus, mm, start, end);
                                   ^
   In file included from arch/x86/hyperv/mmu.c:9:0:
   arch/x86/include/asm/tlbflush.h:256:6: note: expected &#39;const struct flush_tlb_info *&#39; but argument is of type &#39;struct mm_struct *&#39;
    void native_flush_tlb_others(const struct cpumask *cpumask,
         ^
<span class="quote">&gt;&gt; arch/x86/hyperv/mmu.c:120:2: error: too many arguments to function &#39;native_flush_tlb_others&#39;</span>
     native_flush_tlb_others(cpus, mm, start, end);
     ^
   In file included from arch/x86/hyperv/mmu.c:9:0:
   arch/x86/include/asm/tlbflush.h:256:6: note: declared here
    void native_flush_tlb_others(const struct cpumask *cpumask,
         ^
   arch/x86/hyperv/mmu.c: In function &#39;hyperv_setup_mmu_ops&#39;:
<span class="quote">&gt;&gt; arch/x86/hyperv/mmu.c:127:31: error: assignment from incompatible pointer type [-Werror=incompatible-pointer-types]</span>
      pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;
                                  ^
   cc1: some warnings being treated as errors

vim +/native_flush_tlb_others +120 arch/x86/hyperv/mmu.c

   114	
   115		local_irq_restore(flags);
   116	
   117		if (!(status &amp; HV_HYPERCALL_RESULT_MASK))
   118			return;
   119	do_native:
<span class="quote"> &gt; 120		native_flush_tlb_others(cpus, mm, start, end);</span>
   121	}
   122	
   123	void hyperv_setup_mmu_ops(void)
   124	{
   125		if (ms_hyperv.hints &amp; HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED) {
   126			pr_info(&quot;Hyper-V: Using hypercall for remote TLB flush\n&quot;);
<span class="quote"> &gt; 127			pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;</span>
   128		}
   129	}
   130	

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=99981">Vitaly Kuznetsov</a> - June 26, 2017, 8:14 a.m.</div>
<pre class="content">
kbuild test robot &lt;lkp@intel.com&gt; writes:
<span class="quote">
&gt; Hi Vitaly,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; [auto build test ERROR on next-20170619]</span>
<span class="quote">&gt; [cannot apply to tip/x86/core linus/master linux/master v4.12-rc6 v4.12-rc5 v4.12-rc4 v4.12-rc7]</span>
<span class="quote">&gt; [if your patch is applied to the wrong git tree, please drop us a note to help improve the system]</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; url:    https://github.com/0day-ci/linux/commits/kys-exchange-microsoft-com/x86-hyper-v-include-hyperv-only-when-CONFIG_HYPERV-is-set/20170626-133601</span>
<span class="quote">&gt; config: i386-randconfig-a0-06250447 (attached as .config)</span>
<span class="quote">&gt; compiler: gcc-5 (Debian 5.4.1-2) 5.4.1 20160904</span>
<span class="quote">&gt; reproduce:</span>
<span class="quote">&gt;         # save the attached .config to linux build tree</span>
<span class="quote">&gt;         make ARCH=i386 </span>
<span class="quote">&gt;</span>
<span class="quote">&gt; All errors (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    arch/x86/hyperv/mmu.c: In function &#39;hyperv_flush_tlb_others&#39;:</span>
<span class="quote">&gt;&gt;&gt; arch/x86/hyperv/mmu.c:120:32: error: passing argument 2 of &#39;native_flush_tlb_others&#39; from incompatible pointer type [-Werror=incompatible-pointer-types]</span>
<span class="quote">&gt;      native_flush_tlb_others(cpus, mm, start, end);</span>
<span class="quote">&gt;                                    ^</span>

It seems we&#39;re clashing with Andy&#39;s 

commit a2055abe9c6789cedef29abbdaa488a087faccc3
Author: Andy Lutomirski &lt;luto@kernel.org&gt;
Date:   Sun May 28 10:00:10 2017 -0700

    x86/mm: Pass flush_tlb_info to flush_tlb_others() etc

The fix should be simple but in case you want me to rebase/resend please
let me know.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=22291">K. Y. Srinivasan</a> - June 26, 2017, 9 p.m.</div>
<pre class="content">
<span class="quote">&gt; -----Original Message-----</span>
<span class="quote">&gt; From: devel [mailto:driverdev-devel-bounces@linuxdriverproject.org] On</span>
<span class="quote">&gt; Behalf Of Vitaly Kuznetsov</span>
<span class="quote">&gt; Sent: Monday, June 26, 2017 1:15 AM</span>
<span class="quote">&gt; To: kys@exchange.microsoft.com</span>
<span class="quote">&gt; Cc: olaf@aepfle.de; Stephen Hemminger &lt;sthemmin@microsoft.com&gt;;</span>
<span class="quote">&gt; gregkh@linuxfoundation.org; jasowang@redhat.com; x86@kernel.org; linux-</span>
<span class="quote">&gt; kernel@vger.kernel.org; apw@canonical.com; kbuild-all@01.org; Andy</span>
<span class="quote">&gt; Lutomirski &lt;luto@kernel.org&gt;; marcelo.cerri@canonical.com;</span>
<span class="quote">&gt; devel@linuxdriverproject.org; leann.ogasawara@canonical.com</span>
<span class="quote">&gt; Subject: Re: [PATCH 08/10] x86/hyper-v: use hypercall for remote TLB flush</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; kbuild test robot &lt;lkp@intel.com&gt; writes:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Hi Vitaly,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; [auto build test ERROR on next-20170619]</span>
<span class="quote">&gt; &gt; [cannot apply to tip/x86/core linus/master linux/master v4.12-rc6 v4.12-rc5</span>
<span class="quote">&gt; v4.12-rc4 v4.12-rc7]</span>
<span class="quote">&gt; &gt; [if your patch is applied to the wrong git tree, please drop us a note to help</span>
<span class="quote">&gt; improve the system]</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; url:</span>
<span class="quote">&gt; https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub</span>
<span class="quote">&gt; .com%2F0day-ci%2Flinux%2Fcommits%2Fkys-exchange-microsoft-</span>
<span class="quote">&gt; com%2Fx86-hyper-v-include-hyperv-only-when-CONFIG_HYPERV-is-</span>
<span class="quote">&gt; set%2F20170626-</span>
<span class="quote">&gt; 133601&amp;data=02%7C01%7Ckys%40microsoft.com%7Ce74ee37675c1404b0388</span>
<span class="quote">&gt; 08d4bc6b7458%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636340</span>
<span class="quote">&gt; 617088680557&amp;sdata=EkwUQ0zdqgG%2B5NkK65oz%2FSPMwPiXyUz3Otck0x</span>
<span class="quote">&gt; EKGFA%3D&amp;reserved=0</span>
<span class="quote">&gt; &gt; config: i386-randconfig-a0-06250447 (attached as .config)</span>
<span class="quote">&gt; &gt; compiler: gcc-5 (Debian 5.4.1-2) 5.4.1 20160904</span>
<span class="quote">&gt; &gt; reproduce:</span>
<span class="quote">&gt; &gt;         # save the attached .config to linux build tree</span>
<span class="quote">&gt; &gt;         make ARCH=i386</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; All errors (new ones prefixed by &gt;&gt;):</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt;    arch/x86/hyperv/mmu.c: In function &#39;hyperv_flush_tlb_others&#39;:</span>
<span class="quote">&gt; &gt;&gt;&gt; arch/x86/hyperv/mmu.c:120:32: error: passing argument 2 of</span>
<span class="quote">&gt; &#39;native_flush_tlb_others&#39; from incompatible pointer type [-</span>
<span class="quote">&gt; Werror=incompatible-pointer-types]</span>
<span class="quote">&gt; &gt;      native_flush_tlb_others(cpus, mm, start, end);</span>
<span class="quote">&gt; &gt;                                    ^</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It seems we&#39;re clashing with Andy&#39;s</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; commit a2055abe9c6789cedef29abbdaa488a087faccc3</span>
<span class="quote">&gt; Author: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
<span class="quote">&gt; Date:   Sun May 28 10:00:10 2017 -0700</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;     x86/mm: Pass flush_tlb_info to flush_tlb_others() etc</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The fix should be simple but in case you want me to rebase/resend please</span>
<span class="quote">&gt; let me know.</span>

I can make the necessary adjustments; but I am not sure how we will
address the inter-tree dependencies.

We are planning to take this patch-set through Greg&#39;s tree. 
If I make these adjustments for linux-next, Greg&#39;s tree
will be broken. Should we just wait until Greg picks up these changes in
his tree.

This patch-set also has an issue with the PCI tree.

Regards,

K. Y
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=143191">kbuild test robot</a> - July 1, 2017, 12:17 a.m.</div>
<pre class="content">
Hi Vitaly,

[auto build test WARNING on next-20170619]
[cannot apply to tip/x86/core linus/master linux/master v4.12-rc6 v4.12-rc5 v4.12-rc4 v4.12-rc7]
[if your patch is applied to the wrong git tree, please drop us a note to help improve the system]

url:    https://github.com/0day-ci/linux/commits/kys-exchange-microsoft-com/x86-hyper-v-include-hyperv-only-when-CONFIG_HYPERV-is-set/20170626-133601
config: x86_64-randconfig-ws0-07010157 (attached as .config)
compiler: gcc-4.8 (Debian 4.8.4-1) 4.8.4
reproduce:
        # save the attached .config to linux build tree
        make ARCH=x86_64 

All warnings (new ones prefixed by &gt;&gt;):

   arch/x86//hyperv/mmu.c: In function &#39;hyperv_flush_tlb_others&#39;:
<span class="quote">&gt;&gt; arch/x86//hyperv/mmu.c:120:2: warning: passing argument 2 of &#39;native_flush_tlb_others&#39; from incompatible pointer type [enabled by default]</span>
     native_flush_tlb_others(cpus, mm, start, end);
     ^
   In file included from arch/x86//hyperv/mmu.c:9:0:
   arch/x86/include/asm/tlbflush.h:256:6: note: expected &#39;const struct flush_tlb_info *&#39; but argument is of type &#39;struct mm_struct *&#39;
    void native_flush_tlb_others(const struct cpumask *cpumask,
         ^
   arch/x86//hyperv/mmu.c:120:2: error: too many arguments to function &#39;native_flush_tlb_others&#39;
     native_flush_tlb_others(cpus, mm, start, end);
     ^
   In file included from arch/x86//hyperv/mmu.c:9:0:
   arch/x86/include/asm/tlbflush.h:256:6: note: declared here
    void native_flush_tlb_others(const struct cpumask *cpumask,
         ^
   arch/x86//hyperv/mmu.c: In function &#39;hyperv_setup_mmu_ops&#39;:
<span class="quote">&gt;&gt; arch/x86//hyperv/mmu.c:127:31: warning: assignment from incompatible pointer type [enabled by default]</span>
      pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;
                                  ^

vim +/native_flush_tlb_others +120 arch/x86//hyperv/mmu.c

   114	
   115		local_irq_restore(flags);
   116	
   117		if (!(status &amp; HV_HYPERCALL_RESULT_MASK))
   118			return;
   119	do_native:
<span class="quote"> &gt; 120		native_flush_tlb_others(cpus, mm, start, end);</span>
   121	}
   122	
   123	void hyperv_setup_mmu_ops(void)
   124	{
   125		if (ms_hyperv.hints &amp; HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED) {
   126			pr_info(&quot;Hyper-V: Using hypercall for remote TLB flush\n&quot;);
<span class="quote"> &gt; 127			pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;</span>
   128		}
   129	}
   130	

---
0-DAY kernel test infrastructure                Open Source Technology Center
https://lists.01.org/pipermail/kbuild-all                   Intel Corporation
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/hyperv/Makefile b/arch/x86/hyperv/Makefile</span>
<span class="p_header">index 171ae09..367a820 100644</span>
<span class="p_header">--- a/arch/x86/hyperv/Makefile</span>
<span class="p_header">+++ b/arch/x86/hyperv/Makefile</span>
<span class="p_chunk">@@ -1 +1 @@</span> <span class="p_context"></span>
<span class="p_del">-obj-y		:= hv_init.o</span>
<span class="p_add">+obj-y		:= hv_init.o mmu.o</span>
<span class="p_header">diff --git a/arch/x86/hyperv/hv_init.c b/arch/x86/hyperv/hv_init.c</span>
<span class="p_header">index e93b9a0..1a8eb55 100644</span>
<span class="p_header">--- a/arch/x86/hyperv/hv_init.c</span>
<span class="p_header">+++ b/arch/x86/hyperv/hv_init.c</span>
<span class="p_chunk">@@ -140,6 +140,8 @@</span> <span class="p_context"> void hyperv_init(void)</span>
 	hypercall_msr.guest_physical_address = vmalloc_to_pfn(hv_hypercall_pg);
 	wrmsrl(HV_X64_MSR_HYPERCALL, hypercall_msr.as_uint64);
 
<span class="p_add">+	hyper_alloc_mmu();</span>
<span class="p_add">+</span>
 	/*
 	 * Register Hyper-V specific clocksource.
 	 */
<span class="p_header">diff --git a/arch/x86/hyperv/mmu.c b/arch/x86/hyperv/mmu.c</span>
new file mode 100644
<span class="p_header">index 0000000..fe87ffe</span>
<span class="p_header">--- /dev/null</span>
<span class="p_header">+++ b/arch/x86/hyperv/mmu.c</span>
<span class="p_chunk">@@ -0,0 +1,135 @@</span> <span class="p_context"></span>
<span class="p_add">+#include &lt;linux/hyperv.h&gt;</span>
<span class="p_add">+#include &lt;linux/log2.h&gt;</span>
<span class="p_add">+#include &lt;linux/slab.h&gt;</span>
<span class="p_add">+#include &lt;linux/types.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+#include &lt;asm/fpu/api.h&gt;</span>
<span class="p_add">+#include &lt;asm/mshyperv.h&gt;</span>
<span class="p_add">+#include &lt;asm/msr.h&gt;</span>
<span class="p_add">+#include &lt;asm/tlbflush.h&gt;</span>
<span class="p_add">+</span>
<span class="p_add">+/* HvFlushVirtualAddressSpace, HvFlushVirtualAddressList hypercalls */</span>
<span class="p_add">+struct hv_flush_pcpu {</span>
<span class="p_add">+	u64 address_space;</span>
<span class="p_add">+	u64 flags;</span>
<span class="p_add">+	u64 processor_mask;</span>
<span class="p_add">+	u64 gva_list[];</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+/* Each gva in gva_list encodes up to 4096 pages to flush */</span>
<span class="p_add">+#define HV_TLB_FLUSH_UNIT (4096 * PAGE_SIZE)</span>
<span class="p_add">+</span>
<span class="p_add">+static struct hv_flush_pcpu __percpu *pcpu_flush;</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Fills in gva_list starting from offset. Returns the number of items filled</span>
<span class="p_add">+ * in gva_list (including offset)</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int fill_gva_list(u64 gva_list[], int offset,</span>
<span class="p_add">+				unsigned long start, unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int gva_n = offset;</span>
<span class="p_add">+	unsigned long cur = start, diff;</span>
<span class="p_add">+</span>
<span class="p_add">+	do {</span>
<span class="p_add">+		diff = end &gt; cur ? end - cur : 0;</span>
<span class="p_add">+</span>
<span class="p_add">+		gva_list[gva_n] = cur &amp; PAGE_MASK;</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Lower 12 bits encode the number of additional</span>
<span class="p_add">+		 * pages to flush (in addition to the &#39;cur&#39; page).</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (diff &gt;= HV_TLB_FLUSH_UNIT)</span>
<span class="p_add">+			gva_list[gva_n] |= ~PAGE_MASK;</span>
<span class="p_add">+		else if (diff)</span>
<span class="p_add">+			gva_list[gva_n] |= (diff - 1) &gt;&gt; PAGE_SHIFT;</span>
<span class="p_add">+</span>
<span class="p_add">+		cur += HV_TLB_FLUSH_UNIT;</span>
<span class="p_add">+		gva_n++;</span>
<span class="p_add">+</span>
<span class="p_add">+	} while (cur &lt; end);</span>
<span class="p_add">+</span>
<span class="p_add">+	return gva_n;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void hyperv_flush_tlb_others(const struct cpumask *cpus,</span>
<span class="p_add">+				    struct mm_struct *mm, unsigned long start,</span>
<span class="p_add">+				    unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int cpu, vcpu, gva_n, max_gvas;</span>
<span class="p_add">+	struct hv_flush_pcpu *flush;</span>
<span class="p_add">+	u64 status = U64_MAX;</span>
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!pcpu_flush || !hv_hypercall_pg)</span>
<span class="p_add">+		goto do_native;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (cpumask_empty(cpus))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_save(flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	flush = this_cpu_ptr(pcpu_flush);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mm) {</span>
<span class="p_add">+		flush-&gt;address_space = virt_to_phys(mm-&gt;pgd);</span>
<span class="p_add">+		flush-&gt;flags = 0;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		flush-&gt;address_space = 0;</span>
<span class="p_add">+		flush-&gt;flags = HV_FLUSH_ALL_VIRTUAL_ADDRESS_SPACES;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	flush-&gt;processor_mask = 0;</span>
<span class="p_add">+	if (cpumask_equal(cpus, cpu_present_mask)) {</span>
<span class="p_add">+		flush-&gt;flags |= HV_FLUSH_ALL_PROCESSORS;</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		for_each_cpu(cpu, cpus) {</span>
<span class="p_add">+			vcpu = hv_cpu_number_to_vp_number(cpu);</span>
<span class="p_add">+			if (vcpu &lt; 64)</span>
<span class="p_add">+				__set_bit(vcpu, (unsigned long *)</span>
<span class="p_add">+					  &amp;flush-&gt;processor_mask);</span>
<span class="p_add">+			else</span>
<span class="p_add">+				goto do_native;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We can flush not more than max_gvas with one hypercall. Flush the</span>
<span class="p_add">+	 * whole address space if we were asked to do more.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	max_gvas = (PAGE_SIZE - sizeof(*flush)) / sizeof(flush-&gt;gva_list[0]);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (end == TLB_FLUSH_ALL) {</span>
<span class="p_add">+		flush-&gt;flags |= HV_FLUSH_NON_GLOBAL_MAPPINGS_ONLY;</span>
<span class="p_add">+		status = hv_do_hypercall(HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE,</span>
<span class="p_add">+					 flush, NULL);</span>
<span class="p_add">+	} else if (end &amp;&amp; ((end - start)/HV_TLB_FLUSH_UNIT) &gt; max_gvas) {</span>
<span class="p_add">+		status = hv_do_hypercall(HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE,</span>
<span class="p_add">+					 flush, NULL);</span>
<span class="p_add">+	} else {</span>
<span class="p_add">+		gva_n = fill_gva_list(flush-&gt;gva_list, 0, start, end);</span>
<span class="p_add">+		status = hv_do_rep_hypercall(HVCALL_FLUSH_VIRTUAL_ADDRESS_LIST,</span>
<span class="p_add">+					     gva_n, 0, flush, NULL);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	local_irq_restore(flags);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!(status &amp; HV_HYPERCALL_RESULT_MASK))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+do_native:</span>
<span class="p_add">+	native_flush_tlb_others(cpus, mm, start, end);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void hyperv_setup_mmu_ops(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (ms_hyperv.hints &amp; HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED) {</span>
<span class="p_add">+		pr_info(&quot;Hyper-V: Using hypercall for remote TLB flush\n&quot;);</span>
<span class="p_add">+		pv_mmu_ops.flush_tlb_others = hyperv_flush_tlb_others;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+void hyper_alloc_mmu(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (ms_hyperv.hints &amp; HV_X64_REMOTE_TLB_FLUSH_RECOMMENDED)</span>
<span class="p_add">+		pcpu_flush = __alloc_percpu(PAGE_SIZE, PAGE_SIZE);</span>
<span class="p_add">+}</span>
<span class="p_header">diff --git a/arch/x86/include/asm/mshyperv.h b/arch/x86/include/asm/mshyperv.h</span>
<span class="p_header">index 7581251..fe4ebdb 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mshyperv.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mshyperv.h</span>
<span class="p_chunk">@@ -6,6 +6,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/clocksource.h&gt;
 #include &lt;linux/nmi.h&gt;
 #include &lt;asm/hyperv.h&gt;
<span class="p_add">+#include &lt;asm/paravirt_types.h&gt;</span>
 
 /*
  * The below CPUID leaves are present if VersionAndFeatures.HypervisorPresent
<span class="p_chunk">@@ -309,6 +310,8 @@</span> <span class="p_context"> static inline int hv_cpu_number_to_vp_number(int cpu_number)</span>
 }
 
 void hyperv_init(void);
<span class="p_add">+void hyperv_setup_mmu_ops(void);</span>
<span class="p_add">+void hyper_alloc_mmu(void);</span>
 void hyperv_report_panic(struct pt_regs *regs);
 bool hv_is_hypercall_page_setup(void);
 void hyperv_cleanup(void);
<span class="p_chunk">@@ -316,6 +319,7 @@</span> <span class="p_context"> static inline int hv_cpu_number_to_vp_number(int cpu_number)</span>
 static inline void hyperv_init(void) {}
 static inline bool hv_is_hypercall_page_setup(void) { return false; }
 static inline hyperv_cleanup(void) {}
<span class="p_add">+static inline void hyperv_setup_mmu_ops(void) {}</span>
 #endif /* CONFIG_HYPERV */
 
 #ifdef CONFIG_HYPERV_TSCPAGE
<span class="p_header">diff --git a/arch/x86/include/uapi/asm/hyperv.h b/arch/x86/include/uapi/asm/hyperv.h</span>
<span class="p_header">index 432df4b..cc0e70c 100644</span>
<span class="p_header">--- a/arch/x86/include/uapi/asm/hyperv.h</span>
<span class="p_header">+++ b/arch/x86/include/uapi/asm/hyperv.h</span>
<span class="p_chunk">@@ -239,6 +239,8 @@</span> <span class="p_context"></span>
 		(~((1ull &lt;&lt; HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT) - 1))
 
 /* Declare the various hypercall operations. */
<span class="p_add">+#define HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE	0x0002</span>
<span class="p_add">+#define HVCALL_FLUSH_VIRTUAL_ADDRESS_LIST	0x0003</span>
 #define HVCALL_NOTIFY_LONG_SPIN_WAIT		0x0008
 #define HVCALL_POST_MESSAGE			0x005c
 #define HVCALL_SIGNAL_EVENT			0x005d
<span class="p_chunk">@@ -256,6 +258,11 @@</span> <span class="p_context"></span>
 #define HV_PROCESSOR_POWER_STATE_C2		2
 #define HV_PROCESSOR_POWER_STATE_C3		3
 
<span class="p_add">+#define HV_FLUSH_ALL_PROCESSORS			BIT(0)</span>
<span class="p_add">+#define HV_FLUSH_ALL_VIRTUAL_ADDRESS_SPACES	BIT(1)</span>
<span class="p_add">+#define HV_FLUSH_NON_GLOBAL_MAPPINGS_ONLY	BIT(2)</span>
<span class="p_add">+#define HV_FLUSH_USE_EXTENDED_RANGE_FORMAT	BIT(3)</span>
<span class="p_add">+</span>
 /* hypercall status code */
 #define HV_STATUS_SUCCESS			0
 #define HV_STATUS_INVALID_HYPERCALL_CODE	2
<span class="p_header">diff --git a/arch/x86/kernel/cpu/mshyperv.c b/arch/x86/kernel/cpu/mshyperv.c</span>
<span class="p_header">index f259e01..2a1918d 100644</span>
<span class="p_header">--- a/arch/x86/kernel/cpu/mshyperv.c</span>
<span class="p_header">+++ b/arch/x86/kernel/cpu/mshyperv.c</span>
<span class="p_chunk">@@ -239,6 +239,7 @@</span> <span class="p_context"> static void __init ms_hyperv_init_platform(void)</span>
 	 * Setup the hook to get control post apic initialization.
 	 */
 	x86_platform.apic_post_init = hyperv_init;
<span class="p_add">+	hyperv_setup_mmu_ops();</span>
 #endif
 }
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



