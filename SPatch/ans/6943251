
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,2/8] xen: Make clear that swiotlb and biomerge are dealing with DMA address - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,2/8] xen: Make clear that swiotlb and biomerge are dealing with DMA address</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72882">Julien Grall</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 4, 2015, 6:12 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1438711972-18752-3-git-send-email-julien.grall@citrix.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6943251/mbox/"
   >mbox</a>
|
   <a href="/patch/6943251/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6943251/">/patch/6943251/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id C1E279F358
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 18:16:22 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 9FA8120520
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 18:16:21 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 218912053C
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 18:16:15 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753596AbbHDSNz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 4 Aug 2015 14:13:55 -0400
Received: from smtp.citrix.com ([66.165.176.89]:61345 &quot;EHLO SMTP.CITRIX.COM&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1751073AbbHDSNw (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 4 Aug 2015 14:13:52 -0400
X-IronPort-AV: E=Sophos;i=&quot;5.15,610,1432598400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;287966888&quot;
From: Julien Grall &lt;julien.grall@citrix.com&gt;
To: &lt;xen-devel@lists.xenproject.org&gt;
CC: &lt;ian.campbell@citrix.com&gt;, &lt;stefano.stabellini@eu.citrix.com&gt;,
	&lt;linux-kernel@vger.kernel.org&gt;, Julien Grall &lt;julien.grall@citrix.com&gt;,
	Russell King &lt;linux@arm.linux.org.uk&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	&quot;David Vrabel&quot; &lt;david.vrabel@citrix.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;Ingo Molnar&quot; &lt;mingo@redhat.com&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	&lt;x86@kernel.org&gt;, &lt;linux-arm-kernel@lists.infradead.org&gt;
Subject: [PATCH v2 2/8] xen: Make clear that swiotlb and biomerge are
	dealing with DMA address
Date: Tue, 4 Aug 2015 19:12:46 +0100
Message-ID: &lt;1438711972-18752-3-git-send-email-julien.grall@citrix.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1438711972-18752-1-git-send-email-julien.grall@citrix.com&gt;
References: &lt;1438711972-18752-1-git-send-email-julien.grall@citrix.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-DLP: MIA1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72882">Julien Grall</a> - Aug. 4, 2015, 6:12 p.m.</div>
<pre class="content">
The swiotlb is required when programming a DMA address on ARM when a
device is not protected by an IOMMU.

In this case, the DMA address should always be equal to the machine address.
For DOM0 memory, Xen ensure it by have an identity mapping between the
guest address and host address. However, when mapping a foreign grant
reference, the 1:1 model doesn&#39;t work.

For ARM guest, most of the callers of pfn_to_mfn expects to get a GFN
(Guest Frame Number), i.e a PFN (Page Frame Number) from the Linux point
of view given that all ARM guest are auto-translated.

Even though the name pfn_to_mfn is misleading, we need to ensure that
those caller get a GFN and not by mistake a MFN. In pratical, I haven&#39;t
seen error related to this but we should fix it for the sake of
correctness.

In order to fix the implementation of pfn_to_mfn on ARM in a follow-up
patch, we have to introduce new helpers to return the DMA from a PFN and
the invert.

On x86, the new helpers will be an alias of pfn_to_mfn and mfn_to_pfn.

The helpers will be used in swiotlb and xen_biovec_phys_mergeable.

This is necessary in the latter because we have to ensure that the
biovec code will not try to merge a biovec using foreign page and
another using Linux memory.

Lastly, the helper mfn_to_local_pfn has been renamed to dnf_to_local_pfn
given that the only usage was in swiotlb.
<span class="signed-off-by">
Signed-off-by: Julien Grall &lt;julien.grall@citrix.com&gt;</span>
Cc: Stefano Stabellini &lt;stefano.stabellini@eu.citrix.com&gt;
Cc: Russell King &lt;linux@arm.linux.org.uk&gt;
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: x86@kernel.org
Cc: linux-arm-kernel@lists.infradead.org

---
    Changes in v2:
        - Use bfn (Bus Frame Number) rather than dfn to match the
        proposed terminology for pv-iommu hypercall.
---
 arch/arm/include/asm/xen/page.h | 23 +++++++++++++++++++++--
 arch/arm/xen/mm.c               |  4 ++--
 arch/x86/include/asm/xen/page.h |  8 ++++++--
 drivers/xen/biomerge.c          |  6 +++---
 drivers/xen/swiotlb-xen.c       | 16 ++++++++--------
 5 files changed, 40 insertions(+), 17 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=999">Stefano Stabellini</a> - Aug. 5, 2015, 9:49 a.m.</div>
<pre class="content">
On Tue, 4 Aug 2015, Julien Grall wrote:
<span class="quote">&gt; The swiotlb is required when programming a DMA address on ARM when a</span>
<span class="quote">&gt; device is not protected by an IOMMU.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In this case, the DMA address should always be equal to the machine address.</span>
<span class="quote">&gt; For DOM0 memory, Xen ensure it by have an identity mapping between the</span>
<span class="quote">&gt; guest address and host address. However, when mapping a foreign grant</span>
<span class="quote">&gt; reference, the 1:1 model doesn&#39;t work.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For ARM guest, most of the callers of pfn_to_mfn expects to get a GFN</span>
<span class="quote">&gt; (Guest Frame Number), i.e a PFN (Page Frame Number) from the Linux point</span>
<span class="quote">&gt; of view given that all ARM guest are auto-translated.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Even though the name pfn_to_mfn is misleading, we need to ensure that</span>
<span class="quote">&gt; those caller get a GFN and not by mistake a MFN. In pratical, I haven&#39;t</span>
<span class="quote">&gt; seen error related to this but we should fix it for the sake of</span>
<span class="quote">&gt; correctness.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In order to fix the implementation of pfn_to_mfn on ARM in a follow-up</span>
<span class="quote">&gt; patch, we have to introduce new helpers to return the DMA from a PFN and</span>
<span class="quote">&gt; the invert.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On x86, the new helpers will be an alias of pfn_to_mfn and mfn_to_pfn.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The helpers will be used in swiotlb and xen_biovec_phys_mergeable.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This is necessary in the latter because we have to ensure that the</span>
<span class="quote">&gt; biovec code will not try to merge a biovec using foreign page and</span>
<span class="quote">&gt; another using Linux memory.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Lastly, the helper mfn_to_local_pfn has been renamed to dnf_to_local_pfn</span>
                                                          ^ please update
<span class="quote">

&gt; given that the only usage was in swiotlb.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Julien Grall &lt;julien.grall@citrix.com&gt;</span>
<span class="quote">&gt; Cc: Stefano Stabellini &lt;stefano.stabellini@eu.citrix.com&gt;</span>
<span class="quote">&gt; Cc: Russell King &lt;linux@arm.linux.org.uk&gt;</span>
<span class="quote">&gt; Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
<span class="quote">&gt; Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
<span class="quote">&gt; Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;</span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: linux-arm-kernel@lists.infradead.org</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;     Changes in v2:</span>
<span class="quote">&gt;         - Use bfn (Bus Frame Number) rather than dfn to match the</span>
<span class="quote">&gt;         proposed terminology for pv-iommu hypercall.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm/include/asm/xen/page.h | 23 +++++++++++++++++++++--</span>
<span class="quote">&gt;  arch/arm/xen/mm.c               |  4 ++--</span>
<span class="quote">&gt;  arch/x86/include/asm/xen/page.h |  8 ++++++--</span>
<span class="quote">&gt;  drivers/xen/biomerge.c          |  6 +++---</span>
<span class="quote">&gt;  drivers/xen/swiotlb-xen.c       | 16 ++++++++--------</span>
<span class="quote">&gt;  5 files changed, 40 insertions(+), 17 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm/include/asm/xen/page.h b/arch/arm/include/asm/xen/page.h</span>
<span class="quote">&gt; index 98b1084..bc5e77c 100644</span>
<span class="quote">&gt; --- a/arch/arm/include/asm/xen/page.h</span>
<span class="quote">&gt; +++ b/arch/arm/include/asm/xen/page.h</span>
<span class="quote">&gt; @@ -52,7 +52,26 @@ static inline unsigned long mfn_to_pfn(unsigned long mfn)</span>
<span class="quote">&gt;  	return mfn;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -#define mfn_to_local_pfn(mfn) mfn_to_pfn(mfn)</span>
<span class="quote">&gt; +/* Pseudo-physical &lt;-&gt; BUS conversion */</span>
<span class="quote">&gt; +static inline unsigned long pfn_to_bfn(unsigned long pfn)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long mfn;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (phys_to_mach.rb_node != NULL) {</span>
<span class="quote">&gt; +		mfn = __pfn_to_mfn(pfn);</span>
<span class="quote">&gt; +		if (mfn != INVALID_P2M_ENTRY)</span>
<span class="quote">&gt; +			return mfn;</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return pfn;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static inline unsigned long bfn_to_pfn(unsigned long bfn)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	return bfn;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define bfn_to_local_pfn(bfn)	bfn_to_pfn(bfn)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  /* VIRT &lt;-&gt; MACHINE conversion */</span>
<span class="quote">&gt;  #define virt_to_mfn(v)		(pfn_to_mfn(virt_to_pfn(v)))</span>
<span class="quote">&gt; @@ -96,7 +115,7 @@ static inline bool set_phys_to_machine(unsigned long pfn, unsigned long mfn)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  bool xen_arch_need_swiotlb(struct device *dev,</span>
<span class="quote">&gt;  			   unsigned long pfn,</span>
<span class="quote">&gt; -			   unsigned long mfn);</span>
<span class="quote">&gt; +			   unsigned long dfn);</span>
<span class="quote">&gt;  unsigned long xen_get_swiotlb_free_pages(unsigned int order);</span>

You missed a bunch of dfn-&gt;bfn renamings.

Aside from those and the commit message error:
<span class="reviewed-by">
Reviewed-by: Stefano Stabellini &lt;stefano.stabellini@eu.citrix.com&gt;</span>
<span class="quote">

&gt;  #endif /* _ASM_ARM_XEN_PAGE_H */</span>
<span class="quote">&gt; diff --git a/arch/arm/xen/mm.c b/arch/arm/xen/mm.c</span>
<span class="quote">&gt; index 03e75fe..12bde72 100644</span>
<span class="quote">&gt; --- a/arch/arm/xen/mm.c</span>
<span class="quote">&gt; +++ b/arch/arm/xen/mm.c</span>
<span class="quote">&gt; @@ -139,9 +139,9 @@ void __xen_dma_sync_single_for_device(struct device *hwdev,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  bool xen_arch_need_swiotlb(struct device *dev,</span>
<span class="quote">&gt;  			   unsigned long pfn,</span>
<span class="quote">&gt; -			   unsigned long mfn)</span>
<span class="quote">&gt; +			   unsigned long dfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	return (!hypercall_cflush &amp;&amp; (pfn != mfn) &amp;&amp; !is_device_dma_coherent(dev));</span>
<span class="quote">&gt; +	return (!hypercall_cflush &amp;&amp; (pfn != dfn) &amp;&amp; !is_device_dma_coherent(dev));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  int xen_create_contiguous_region(phys_addr_t pstart, unsigned int order,</span>
<span class="quote">&gt; diff --git a/arch/x86/include/asm/xen/page.h b/arch/x86/include/asm/xen/page.h</span>
<span class="quote">&gt; index c44a5d5..8ba04b8 100644</span>
<span class="quote">&gt; --- a/arch/x86/include/asm/xen/page.h</span>
<span class="quote">&gt; +++ b/arch/x86/include/asm/xen/page.h</span>
<span class="quote">&gt; @@ -178,6 +178,10 @@ static inline xpaddr_t machine_to_phys(xmaddr_t machine)</span>
<span class="quote">&gt;  	return XPADDR(PFN_PHYS(mfn_to_pfn(PFN_DOWN(machine.maddr))) | offset);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +/* Pseudo-physical &lt;-&gt; Bus conversion */</span>
<span class="quote">&gt; +#define pfn_to_bfn(pfn)		pfn_to_mfn(pfn)</span>
<span class="quote">&gt; +#define bfn_to_pfn(bfn)		mfn_to_pfn(bfn)</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  /*</span>
<span class="quote">&gt;   * We detect special mappings in one of two ways:</span>
<span class="quote">&gt;   *  1. If the MFN is an I/O page then Xen will set the m2p entry</span>
<span class="quote">&gt; @@ -198,7 +202,7 @@ static inline xpaddr_t machine_to_phys(xmaddr_t machine)</span>
<span class="quote">&gt;   *      require. In all the cases we care about, the FOREIGN_FRAME bit is</span>
<span class="quote">&gt;   *      masked (e.g., pfn_to_mfn()) so behaviour there is correct.</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt; -static inline unsigned long mfn_to_local_pfn(unsigned long mfn)</span>
<span class="quote">&gt; +static inline unsigned long bfn_to_local_pfn(unsigned long mfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	unsigned long pfn;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -264,7 +268,7 @@ void make_lowmem_page_readwrite(void *vaddr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline bool xen_arch_need_swiotlb(struct device *dev,</span>
<span class="quote">&gt;  					 unsigned long pfn,</span>
<span class="quote">&gt; -					 unsigned long mfn)</span>
<span class="quote">&gt; +					 unsigned long bfn)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return false;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/drivers/xen/biomerge.c b/drivers/xen/biomerge.c</span>
<span class="quote">&gt; index 0edb91c..8ae2fc90 100644</span>
<span class="quote">&gt; --- a/drivers/xen/biomerge.c</span>
<span class="quote">&gt; +++ b/drivers/xen/biomerge.c</span>
<span class="quote">&gt; @@ -6,10 +6,10 @@</span>
<span class="quote">&gt;  bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,</span>
<span class="quote">&gt;  			       const struct bio_vec *vec2)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long mfn1 = pfn_to_mfn(page_to_pfn(vec1-&gt;bv_page));</span>
<span class="quote">&gt; -	unsigned long mfn2 = pfn_to_mfn(page_to_pfn(vec2-&gt;bv_page));</span>
<span class="quote">&gt; +	unsigned long bfn1 = pfn_to_bfn(page_to_pfn(vec1-&gt;bv_page));</span>
<span class="quote">&gt; +	unsigned long bfn2 = pfn_to_bfn(page_to_pfn(vec2-&gt;bv_page));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	return __BIOVEC_PHYS_MERGEABLE(vec1, vec2) &amp;&amp;</span>
<span class="quote">&gt; -		((mfn1 == mfn2) || ((mfn1+1) == mfn2));</span>
<span class="quote">&gt; +		((bfn1 == bfn2) || ((bfn1+1) == bfn2));</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  EXPORT_SYMBOL(xen_biovec_phys_mergeable);</span>
<span class="quote">&gt; diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c</span>
<span class="quote">&gt; index 4c54932..d757a3e 100644</span>
<span class="quote">&gt; --- a/drivers/xen/swiotlb-xen.c</span>
<span class="quote">&gt; +++ b/drivers/xen/swiotlb-xen.c</span>
<span class="quote">&gt; @@ -82,8 +82,8 @@ static u64 start_dma_addr;</span>
<span class="quote">&gt;   */</span>
<span class="quote">&gt;  static inline dma_addr_t xen_phys_to_bus(phys_addr_t paddr)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long mfn = pfn_to_mfn(PFN_DOWN(paddr));</span>
<span class="quote">&gt; -	dma_addr_t dma = (dma_addr_t)mfn &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt; +	unsigned long bfn = pfn_to_bfn(PFN_DOWN(paddr));</span>
<span class="quote">&gt; +	dma_addr_t dma = (dma_addr_t)bfn &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	dma |= paddr &amp; ~PAGE_MASK;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -92,7 +92,7 @@ static inline dma_addr_t xen_phys_to_bus(phys_addr_t paddr)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline phys_addr_t xen_bus_to_phys(dma_addr_t baddr)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long pfn = mfn_to_pfn(PFN_DOWN(baddr));</span>
<span class="quote">&gt; +	unsigned long pfn = bfn_to_pfn(PFN_DOWN(baddr));</span>
<span class="quote">&gt;  	dma_addr_t dma = (dma_addr_t)pfn &lt;&lt; PAGE_SHIFT;</span>
<span class="quote">&gt;  	phys_addr_t paddr = dma;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -110,15 +110,15 @@ static int check_pages_physically_contiguous(unsigned long pfn,</span>
<span class="quote">&gt;  					     unsigned int offset,</span>
<span class="quote">&gt;  					     size_t length)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long next_mfn;</span>
<span class="quote">&gt; +	unsigned long next_bfn;</span>
<span class="quote">&gt;  	int i;</span>
<span class="quote">&gt;  	int nr_pages;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	next_mfn = pfn_to_mfn(pfn);</span>
<span class="quote">&gt; +	next_bfn = pfn_to_bfn(pfn);</span>
<span class="quote">&gt;  	nr_pages = (offset + length + PAGE_SIZE-1) &gt;&gt; PAGE_SHIFT;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	for (i = 1; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt; -		if (pfn_to_mfn(++pfn) != ++next_mfn)</span>
<span class="quote">&gt; +		if (pfn_to_bfn(++pfn) != ++next_bfn)</span>
<span class="quote">&gt;  			return 0;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  	return 1;</span>
<span class="quote">&gt; @@ -138,8 +138,8 @@ static inline int range_straddles_page_boundary(phys_addr_t p, size_t size)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static int is_xen_swiotlb_buffer(dma_addr_t dma_addr)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; -	unsigned long mfn = PFN_DOWN(dma_addr);</span>
<span class="quote">&gt; -	unsigned long pfn = mfn_to_local_pfn(mfn);</span>
<span class="quote">&gt; +	unsigned long bfn = PFN_DOWN(dma_addr);</span>
<span class="quote">&gt; +	unsigned long pfn = bfn_to_local_pfn(bfn);</span>
<span class="quote">&gt;  	phys_addr_t paddr;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* If the address is outside our domain, it CAN</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.1.4</span>
<span class="quote">&gt; </span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72882">Julien Grall</a> - Aug. 5, 2015, 10:31 a.m.</div>
<pre class="content">
Hi Stefano,

On 05/08/15 10:49, Stefano Stabellini wrote:
<span class="quote">&gt;&gt;  /* VIRT &lt;-&gt; MACHINE conversion */</span>
<span class="quote">&gt;&gt;  #define virt_to_mfn(v)		(pfn_to_mfn(virt_to_pfn(v)))</span>
<span class="quote">&gt;&gt; @@ -96,7 +115,7 @@ static inline bool set_phys_to_machine(unsigned long pfn, unsigned long mfn)</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  bool xen_arch_need_swiotlb(struct device *dev,</span>
<span class="quote">&gt;&gt;  			   unsigned long pfn,</span>
<span class="quote">&gt;&gt; -			   unsigned long mfn);</span>
<span class="quote">&gt;&gt; +			   unsigned long dfn);</span>
<span class="quote">&gt;&gt;  unsigned long xen_get_swiotlb_free_pages(unsigned int order);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You missed a bunch of dfn-&gt;bfn renamings.</span>

Sorry, I forgot to double check that before sending the patch. I will
fix it in the next version.
<span class="quote">
&gt; Aside from those and the commit message error:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Reviewed-by: Stefano Stabellini &lt;stefano.stabellini@eu.citrix.com&gt;</span>

Thank you!

Regards,
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm/include/asm/xen/page.h b/arch/arm/include/asm/xen/page.h</span>
<span class="p_header">index 98b1084..bc5e77c 100644</span>
<span class="p_header">--- a/arch/arm/include/asm/xen/page.h</span>
<span class="p_header">+++ b/arch/arm/include/asm/xen/page.h</span>
<span class="p_chunk">@@ -52,7 +52,26 @@</span> <span class="p_context"> static inline unsigned long mfn_to_pfn(unsigned long mfn)</span>
 	return mfn;
 }
 
<span class="p_del">-#define mfn_to_local_pfn(mfn) mfn_to_pfn(mfn)</span>
<span class="p_add">+/* Pseudo-physical &lt;-&gt; BUS conversion */</span>
<span class="p_add">+static inline unsigned long pfn_to_bfn(unsigned long pfn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long mfn;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (phys_to_mach.rb_node != NULL) {</span>
<span class="p_add">+		mfn = __pfn_to_mfn(pfn);</span>
<span class="p_add">+		if (mfn != INVALID_P2M_ENTRY)</span>
<span class="p_add">+			return mfn;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	return pfn;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long bfn_to_pfn(unsigned long bfn)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return bfn;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#define bfn_to_local_pfn(bfn)	bfn_to_pfn(bfn)</span>
 
 /* VIRT &lt;-&gt; MACHINE conversion */
 #define virt_to_mfn(v)		(pfn_to_mfn(virt_to_pfn(v)))
<span class="p_chunk">@@ -96,7 +115,7 @@</span> <span class="p_context"> static inline bool set_phys_to_machine(unsigned long pfn, unsigned long mfn)</span>
 
 bool xen_arch_need_swiotlb(struct device *dev,
 			   unsigned long pfn,
<span class="p_del">-			   unsigned long mfn);</span>
<span class="p_add">+			   unsigned long dfn);</span>
 unsigned long xen_get_swiotlb_free_pages(unsigned int order);
 
 #endif /* _ASM_ARM_XEN_PAGE_H */
<span class="p_header">diff --git a/arch/arm/xen/mm.c b/arch/arm/xen/mm.c</span>
<span class="p_header">index 03e75fe..12bde72 100644</span>
<span class="p_header">--- a/arch/arm/xen/mm.c</span>
<span class="p_header">+++ b/arch/arm/xen/mm.c</span>
<span class="p_chunk">@@ -139,9 +139,9 @@</span> <span class="p_context"> void __xen_dma_sync_single_for_device(struct device *hwdev,</span>
 
 bool xen_arch_need_swiotlb(struct device *dev,
 			   unsigned long pfn,
<span class="p_del">-			   unsigned long mfn)</span>
<span class="p_add">+			   unsigned long dfn)</span>
 {
<span class="p_del">-	return (!hypercall_cflush &amp;&amp; (pfn != mfn) &amp;&amp; !is_device_dma_coherent(dev));</span>
<span class="p_add">+	return (!hypercall_cflush &amp;&amp; (pfn != dfn) &amp;&amp; !is_device_dma_coherent(dev));</span>
 }
 
 int xen_create_contiguous_region(phys_addr_t pstart, unsigned int order,
<span class="p_header">diff --git a/arch/x86/include/asm/xen/page.h b/arch/x86/include/asm/xen/page.h</span>
<span class="p_header">index c44a5d5..8ba04b8 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/xen/page.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/xen/page.h</span>
<span class="p_chunk">@@ -178,6 +178,10 @@</span> <span class="p_context"> static inline xpaddr_t machine_to_phys(xmaddr_t machine)</span>
 	return XPADDR(PFN_PHYS(mfn_to_pfn(PFN_DOWN(machine.maddr))) | offset);
 }
 
<span class="p_add">+/* Pseudo-physical &lt;-&gt; Bus conversion */</span>
<span class="p_add">+#define pfn_to_bfn(pfn)		pfn_to_mfn(pfn)</span>
<span class="p_add">+#define bfn_to_pfn(bfn)		mfn_to_pfn(bfn)</span>
<span class="p_add">+</span>
 /*
  * We detect special mappings in one of two ways:
  *  1. If the MFN is an I/O page then Xen will set the m2p entry
<span class="p_chunk">@@ -198,7 +202,7 @@</span> <span class="p_context"> static inline xpaddr_t machine_to_phys(xmaddr_t machine)</span>
  *      require. In all the cases we care about, the FOREIGN_FRAME bit is
  *      masked (e.g., pfn_to_mfn()) so behaviour there is correct.
  */
<span class="p_del">-static inline unsigned long mfn_to_local_pfn(unsigned long mfn)</span>
<span class="p_add">+static inline unsigned long bfn_to_local_pfn(unsigned long mfn)</span>
 {
 	unsigned long pfn;
 
<span class="p_chunk">@@ -264,7 +268,7 @@</span> <span class="p_context"> void make_lowmem_page_readwrite(void *vaddr);</span>
 
 static inline bool xen_arch_need_swiotlb(struct device *dev,
 					 unsigned long pfn,
<span class="p_del">-					 unsigned long mfn)</span>
<span class="p_add">+					 unsigned long bfn)</span>
 {
 	return false;
 }
<span class="p_header">diff --git a/drivers/xen/biomerge.c b/drivers/xen/biomerge.c</span>
<span class="p_header">index 0edb91c..8ae2fc90 100644</span>
<span class="p_header">--- a/drivers/xen/biomerge.c</span>
<span class="p_header">+++ b/drivers/xen/biomerge.c</span>
<span class="p_chunk">@@ -6,10 +6,10 @@</span> <span class="p_context"></span>
 bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,
 			       const struct bio_vec *vec2)
 {
<span class="p_del">-	unsigned long mfn1 = pfn_to_mfn(page_to_pfn(vec1-&gt;bv_page));</span>
<span class="p_del">-	unsigned long mfn2 = pfn_to_mfn(page_to_pfn(vec2-&gt;bv_page));</span>
<span class="p_add">+	unsigned long bfn1 = pfn_to_bfn(page_to_pfn(vec1-&gt;bv_page));</span>
<span class="p_add">+	unsigned long bfn2 = pfn_to_bfn(page_to_pfn(vec2-&gt;bv_page));</span>
 
 	return __BIOVEC_PHYS_MERGEABLE(vec1, vec2) &amp;&amp;
<span class="p_del">-		((mfn1 == mfn2) || ((mfn1+1) == mfn2));</span>
<span class="p_add">+		((bfn1 == bfn2) || ((bfn1+1) == bfn2));</span>
 }
 EXPORT_SYMBOL(xen_biovec_phys_mergeable);
<span class="p_header">diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">index 4c54932..d757a3e 100644</span>
<span class="p_header">--- a/drivers/xen/swiotlb-xen.c</span>
<span class="p_header">+++ b/drivers/xen/swiotlb-xen.c</span>
<span class="p_chunk">@@ -82,8 +82,8 @@</span> <span class="p_context"> static u64 start_dma_addr;</span>
  */
 static inline dma_addr_t xen_phys_to_bus(phys_addr_t paddr)
 {
<span class="p_del">-	unsigned long mfn = pfn_to_mfn(PFN_DOWN(paddr));</span>
<span class="p_del">-	dma_addr_t dma = (dma_addr_t)mfn &lt;&lt; PAGE_SHIFT;</span>
<span class="p_add">+	unsigned long bfn = pfn_to_bfn(PFN_DOWN(paddr));</span>
<span class="p_add">+	dma_addr_t dma = (dma_addr_t)bfn &lt;&lt; PAGE_SHIFT;</span>
 
 	dma |= paddr &amp; ~PAGE_MASK;
 
<span class="p_chunk">@@ -92,7 +92,7 @@</span> <span class="p_context"> static inline dma_addr_t xen_phys_to_bus(phys_addr_t paddr)</span>
 
 static inline phys_addr_t xen_bus_to_phys(dma_addr_t baddr)
 {
<span class="p_del">-	unsigned long pfn = mfn_to_pfn(PFN_DOWN(baddr));</span>
<span class="p_add">+	unsigned long pfn = bfn_to_pfn(PFN_DOWN(baddr));</span>
 	dma_addr_t dma = (dma_addr_t)pfn &lt;&lt; PAGE_SHIFT;
 	phys_addr_t paddr = dma;
 
<span class="p_chunk">@@ -110,15 +110,15 @@</span> <span class="p_context"> static int check_pages_physically_contiguous(unsigned long pfn,</span>
 					     unsigned int offset,
 					     size_t length)
 {
<span class="p_del">-	unsigned long next_mfn;</span>
<span class="p_add">+	unsigned long next_bfn;</span>
 	int i;
 	int nr_pages;
 
<span class="p_del">-	next_mfn = pfn_to_mfn(pfn);</span>
<span class="p_add">+	next_bfn = pfn_to_bfn(pfn);</span>
 	nr_pages = (offset + length + PAGE_SIZE-1) &gt;&gt; PAGE_SHIFT;
 
 	for (i = 1; i &lt; nr_pages; i++) {
<span class="p_del">-		if (pfn_to_mfn(++pfn) != ++next_mfn)</span>
<span class="p_add">+		if (pfn_to_bfn(++pfn) != ++next_bfn)</span>
 			return 0;
 	}
 	return 1;
<span class="p_chunk">@@ -138,8 +138,8 @@</span> <span class="p_context"> static inline int range_straddles_page_boundary(phys_addr_t p, size_t size)</span>
 
 static int is_xen_swiotlb_buffer(dma_addr_t dma_addr)
 {
<span class="p_del">-	unsigned long mfn = PFN_DOWN(dma_addr);</span>
<span class="p_del">-	unsigned long pfn = mfn_to_local_pfn(mfn);</span>
<span class="p_add">+	unsigned long bfn = PFN_DOWN(dma_addr);</span>
<span class="p_add">+	unsigned long pfn = bfn_to_local_pfn(bfn);</span>
 	phys_addr_t paddr;
 
 	/* If the address is outside our domain, it CAN

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



