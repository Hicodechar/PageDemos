
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v5,04/10] arm64: Add __flush_tlb_one() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v5,04/10] arm64: Add __flush_tlb_one()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 9, 2017, 8:07 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170809200755.11234-5-tycho@docker.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9891891/mbox/"
   >mbox</a>
|
   <a href="/patch/9891891/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9891891/">/patch/9891891/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	1E8CA60363 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:10:42 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 112C428A8D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:10:42 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 053A128AA9; Wed,  9 Aug 2017 20:10:42 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.5 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, RCVD_IN_DNSWL_HI,
	RCVD_IN_SORBS_SPAM autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8312D28A8D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  9 Aug 2017 20:10:41 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752453AbdHIUKY (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 9 Aug 2017 16:10:24 -0400
Received: from mail-it0-f53.google.com ([209.85.214.53]:37252 &quot;EHLO
	mail-it0-f53.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752061AbdHIUI6 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 9 Aug 2017 16:08:58 -0400
Received: by mail-it0-f53.google.com with SMTP id 76so3293158ith.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Wed, 09 Aug 2017 13:08:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=docker.com; s=google;
	h=from:to:cc:subject:date:message-id:in-reply-to:references;
	bh=eLsE+eNx+aEXi3r1tgS5x4BZk/X6YslbrPT1U9fnk7Q=;
	b=fGUk5qKEvdw4jZoOSguUzyiax5Mg+tbflHJx+IbW6r547oinaBSNO2k8OX4rQdxWPE
	bvYRus08yQxa2FyWNVy7uwWviqjqHPI1V4vYV/qfMqj12XRd6aebaK1AWwxUjMIOitwh
	q81QAmzdP9ScZU1AHqW4Ov67uBjbsC4rx+qJA=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
	:references;
	bh=eLsE+eNx+aEXi3r1tgS5x4BZk/X6YslbrPT1U9fnk7Q=;
	b=P/dQGZGrvw4PLsHq5FdPtWGhiGElvFPBMJbzWcyh2WXq5cud+wLEY7GNId43Z8hDee
	lvN6WwBu8NBaAznUDNjz4Fnehg1tIehHWtMbRWRzg0v7eOed50D4gXYAod9IKFY32SzR
	8saxFZRpCiW/iPThlhni54on8NoFjBK8lCbMdPifwn+wGXcaaCktQFajrGevB6DXWaU9
	JaPOqPT0hVJXoG0uz0Q6Wgrd4+XhnByiLPxVvpMxn0TROvbJG3j1GRi7uYVHX3JrmyWy
	jk8YvYAvcPqFlfglVqB8V4zCt7M1Lg+MEYKGR360cXeBWttSK3nZbRaGsrUy0Hot3QEH
	uXDg==
X-Gm-Message-State: AIVw111gs9eSypva6TirJkJjobBB4f/ZIKN/nBLlFujo+u9P/JwSEbFS
	uZLKmU9R9M681yW5+7mo8A==
X-Received: by 10.36.165.5 with SMTP id k5mr8789072itf.64.1502309338161;
	Wed, 09 Aug 2017 13:08:58 -0700 (PDT)
Received: from localhost.localdomain ([8.24.24.129])
	by smtp.gmail.com with ESMTPSA id
	p63sm2324422itg.32.2017.08.09.13.08.57
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Wed, 09 Aug 2017 13:08:57 -0700 (PDT)
From: Tycho Andersen &lt;tycho@docker.com&gt;
To: linux-kernel@vger.kernel.org
Cc: linux-mm@kvack.org, kernel-hardening@lists.openwall.com,
	Marco Benatto &lt;marco.antonio.780@gmail.com&gt;,
	Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;,
	Juerg Haefliger &lt;juerg.haefliger@hpe.com&gt;
Subject: [PATCH v5 04/10] arm64: Add __flush_tlb_one()
Date: Wed,  9 Aug 2017 14:07:49 -0600
Message-Id: &lt;20170809200755.11234-5-tycho@docker.com&gt;
X-Mailer: git-send-email 2.11.0
In-Reply-To: &lt;20170809200755.11234-1-tycho@docker.com&gt;
References: &lt;20170809200755.11234-1-tycho@docker.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 9, 2017, 8:07 p.m.</div>
<pre class="content">
<span class="from">From: Juerg Haefliger &lt;juerg.haefliger@hpe.com&gt;</span>

Add a hook for flushing a single TLB entry on arm64.
<span class="signed-off-by">
Signed-off-by: Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;</span>
<span class="tested-by">Tested-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
---
 arch/arm64/include/asm/tlbflush.h | 8 ++++++++
 1 file changed, 8 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Aug. 12, 2017, 11:26 a.m.</div>
<pre class="content">
On Wed, Aug 09, 2017 at 02:07:49PM -0600, Tycho Andersen wrote:
<span class="quote">&gt; From: Juerg Haefliger &lt;juerg.haefliger@hpe.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add a hook for flushing a single TLB entry on arm64.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;</span>
<span class="quote">&gt; Tested-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  arch/arm64/include/asm/tlbflush.h | 8 ++++++++</span>
<span class="quote">&gt;  1 file changed, 8 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; index af1c76981911..8e0c49105d3e 100644</span>
<span class="quote">&gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; @@ -184,6 +184,14 @@ static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
<span class="quote">&gt;  	isb();</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	dsb(ishst);</span>
<span class="quote">&gt; +	__tlbi(vaae1is, addr &gt;&gt; 12);</span>
<span class="quote">&gt; +	dsb(ish);</span>
<span class="quote">&gt; +	isb();</span>
<span class="quote">&gt; +}</span>

Is this going to be called by generic code?

It would be nice if we could drop &#39;kernel&#39; into the name, to make it clear this
is intended to affect the kernel mappings, which have different maintenance
requirements to user mappings.

We should be able to implement this more simply as:

flush_tlb_kernel_page(unsigned long addr)
{
	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);
}

Thanks,
Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 14, 2017, 4:35 p.m.</div>
<pre class="content">
Hi Mark,

On Sat, Aug 12, 2017 at 12:26:03PM +0100, Mark Rutland wrote:
<span class="quote">&gt; On Wed, Aug 09, 2017 at 02:07:49PM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; From: Juerg Haefliger &lt;juerg.haefliger@hpe.com&gt;</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Add a hook for flushing a single TLB entry on arm64.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Juerg Haefliger &lt;juerg.haefliger@canonical.com&gt;</span>
<span class="quote">&gt; &gt; Tested-by: Tycho Andersen &lt;tycho@docker.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  arch/arm64/include/asm/tlbflush.h | 8 ++++++++</span>
<span class="quote">&gt; &gt;  1 file changed, 8 insertions(+)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt; index af1c76981911..8e0c49105d3e 100644</span>
<span class="quote">&gt; &gt; --- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt; +++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="quote">&gt; &gt; @@ -184,6 +184,14 @@ static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
<span class="quote">&gt; &gt;  	isb();</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; +static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; &gt; +{</span>
<span class="quote">&gt; &gt; +	dsb(ishst);</span>
<span class="quote">&gt; &gt; +	__tlbi(vaae1is, addr &gt;&gt; 12);</span>
<span class="quote">&gt; &gt; +	dsb(ish);</span>
<span class="quote">&gt; &gt; +	isb();</span>
<span class="quote">&gt; &gt; +}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is this going to be called by generic code?</span>

Yes, it&#39;s called in mm/xpfo.c:xpfo_kunmap.
<span class="quote">
&gt; It would be nice if we could drop &#39;kernel&#39; into the name, to make it clear this</span>
<span class="quote">&gt; is intended to affect the kernel mappings, which have different maintenance</span>
<span class="quote">&gt; requirements to user mappings.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We should be able to implement this more simply as:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; flush_tlb_kernel_page(unsigned long addr)</span>
<span class="quote">&gt; {</span>
<span class="quote">&gt; 	flush_tlb_kernel_range(addr, addr + PAGE_SIZE);</span>
<span class="quote">&gt; }</span>

It&#39;s named __flush_tlb_one after the x86 (and a few other arches)
function of the same name. I can change it to flush_tlb_kernel_page,
but then we&#39;ll need some x86-specific code to map the name as well.

Maybe since it&#39;s called from generic code that&#39;s warranted though?
I&#39;ll change the implementation for now, let me know what you want to
do about the name.

Cheers,

Tycho
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Aug. 14, 2017, 4:50 p.m.</div>
<pre class="content">
On Mon, Aug 14, 2017 at 10:35:36AM -0600, Tycho Andersen wrote:
<span class="quote">&gt; Hi Mark,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Sat, Aug 12, 2017 at 12:26:03PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt; On Wed, Aug 09, 2017 at 02:07:49PM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; &gt; +static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; +	dsb(ishst);</span>
<span class="quote">&gt; &gt; &gt; +	__tlbi(vaae1is, addr &gt;&gt; 12);</span>
<span class="quote">&gt; &gt; &gt; +	dsb(ish);</span>
<span class="quote">&gt; &gt; &gt; +	isb();</span>
<span class="quote">&gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Is this going to be called by generic code?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Yes, it&#39;s called in mm/xpfo.c:xpfo_kunmap.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; It would be nice if we could drop &#39;kernel&#39; into the name, to make it clear this</span>
<span class="quote">&gt; &gt; is intended to affect the kernel mappings, which have different maintenance</span>
<span class="quote">&gt; &gt; requirements to user mappings.</span>
<span class="quote">
&gt; It&#39;s named __flush_tlb_one after the x86 (and a few other arches)</span>
<span class="quote">&gt; function of the same name. I can change it to flush_tlb_kernel_page,</span>
<span class="quote">&gt; but then we&#39;ll need some x86-specific code to map the name as well.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Maybe since it&#39;s called from generic code that&#39;s warranted though?</span>
<span class="quote">&gt; I&#39;ll change the implementation for now, let me know what you want to</span>
<span class="quote">&gt; do about the name.</span>

I think it would be preferable to do so, to align with 
flush_tlb_kernel_range(), which is an existing generic interface.

That said, is there any reason not to use flush_tlb_kernel_range()
directly?

Thanks,
Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 14, 2017, 5:01 p.m.</div>
<pre class="content">
On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:
<span class="quote">&gt; On Mon, Aug 14, 2017 at 10:35:36AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; Hi Mark,</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; On Sat, Aug 12, 2017 at 12:26:03PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed, Aug 09, 2017 at 02:07:49PM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; +static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="quote">&gt; &gt; &gt; &gt; +{</span>
<span class="quote">&gt; &gt; &gt; &gt; +	dsb(ishst);</span>
<span class="quote">&gt; &gt; &gt; &gt; +	__tlbi(vaae1is, addr &gt;&gt; 12);</span>
<span class="quote">&gt; &gt; &gt; &gt; +	dsb(ish);</span>
<span class="quote">&gt; &gt; &gt; &gt; +	isb();</span>
<span class="quote">&gt; &gt; &gt; &gt; +}</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Is this going to be called by generic code?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Yes, it&#39;s called in mm/xpfo.c:xpfo_kunmap.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; It would be nice if we could drop &#39;kernel&#39; into the name, to make it clear this</span>
<span class="quote">&gt; &gt; &gt; is intended to affect the kernel mappings, which have different maintenance</span>
<span class="quote">&gt; &gt; &gt; requirements to user mappings.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; It&#39;s named __flush_tlb_one after the x86 (and a few other arches)</span>
<span class="quote">&gt; &gt; function of the same name. I can change it to flush_tlb_kernel_page,</span>
<span class="quote">&gt; &gt; but then we&#39;ll need some x86-specific code to map the name as well.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Maybe since it&#39;s called from generic code that&#39;s warranted though?</span>
<span class="quote">&gt; &gt; I&#39;ll change the implementation for now, let me know what you want to</span>
<span class="quote">&gt; &gt; do about the name.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think it would be preferable to do so, to align with </span>
<span class="quote">&gt; flush_tlb_kernel_range(), which is an existing generic interface.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt; directly?</span>

I don&#39;t think so, I&#39;ll change the generic code to that and drop this
patch.

Thanks!

Tycho
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 23, 2017, 4:58 p.m.</div>
<pre class="content">
Hi Mark,

On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:
<span class="quote">&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt; directly?</span>

So it turns out that there is a difference between __flush_tlb_one() and
flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs
via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which
I think is enough here).

As you might expect, this is quite a performance hit (at least under kvm), I
ran a little kernbench:

# __flush_tlb_one
Wed Aug 23 15:47:33 UTC 2017
4.13.0-rc5+
Average Half load -j 2 Run (std deviation):
Elapsed Time 50.3233 (1.82716)
User Time 87.1233 (1.26871)
System Time 15.36 (0.500899)
Percent CPU 203.667 (4.04145)
Context Switches 7350.33 (1339.65)
Sleeps 16008.3 (980.362)

Average Optimal load -j 4 Run (std deviation):
Elapsed Time 27.4267 (0.215019)
User Time 88.6983 (1.91501)
System Time 13.1933 (2.39488)
Percent CPU 286.333 (90.6083)
Context Switches 11393 (4509.14)
Sleeps 15764.7 (698.048)

# flush_tlb_kernel_range()
Wed Aug 23 16:00:03 UTC 2017
4.13.0-rc5+
Average Half load -j 2 Run (std deviation):
Elapsed Time 86.57 (1.06099)
User Time 103.25 (1.85475)
System Time 75.4433 (0.415852)
Percent CPU 205.667 (3.21455)
Context Switches 9363.33 (1361.57)
Sleeps 14703.3 (1439.12)

Average Optimal load -j 4 Run (std deviation):
Elapsed Time 51.27 (0.615873)
User Time 110.328 (7.93884)
System Time 74.06 (1.55788)
Percent CPU 288 (90.2197)
Context Switches 16557.5 (7930.01)
Sleeps 14774.7 (921.746)

So, I think we need to keep something like __flush_tlb_one around.
I&#39;ll call it flush_one_local_tlb() for now, and will cc x86@ on the
next version to see if they have any insight.

Cheers,

Tycho
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Aug. 23, 2017, 5:04 p.m.</div>
<pre class="content">
On Wed, Aug 23, 2017 at 10:58:42AM -0600, Tycho Andersen wrote:
<span class="quote">&gt; Hi Mark,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt; &gt; directly?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; So it turns out that there is a difference between __flush_tlb_one() and</span>
<span class="quote">&gt; flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs</span>
<span class="quote">&gt; via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which</span>
<span class="quote">&gt; I think is enough here).</span>

That sounds suspicious; I don&#39;t think that __flush_tlb_one() is
sufficient.

If you only do local TLB maintenance, then the page is left accessible
to other CPUs via the (stale) kernel mappings. i.e. the page isn&#39;t
exclusively mapped by userspace.

Thanks,
Mark.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176135">Juerg Haefliger</a> - Aug. 30, 2017, 5:31 a.m.</div>
<pre class="content">
On 08/23/2017 07:04 PM, Mark Rutland wrote:
<span class="quote">&gt; On Wed, Aug 23, 2017 at 10:58:42AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt;&gt; Hi Mark,</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt;&gt;&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt;&gt;&gt; directly?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; So it turns out that there is a difference between __flush_tlb_one() and</span>
<span class="quote">&gt;&gt; flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs</span>
<span class="quote">&gt;&gt; via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which</span>
<span class="quote">&gt;&gt; I think is enough here).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That sounds suspicious; I don&#39;t think that __flush_tlb_one() is</span>
<span class="quote">&gt; sufficient.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If you only do local TLB maintenance, then the page is left accessible</span>
<span class="quote">&gt; to other CPUs via the (stale) kernel mappings. i.e. the page isn&#39;t</span>
<span class="quote">&gt; exclusively mapped by userspace.</span>

We flush all CPUs to get rid of stale entries when a new page is
allocated to userspace that was previously allocated to the kernel.
Is that the scenario you were thinking of?

...Juerg
<span class="quote">

&gt; Thanks,</span>
<span class="quote">&gt; Mark.</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173139">Tycho Andersen</a> - Aug. 30, 2017, 4:47 p.m.</div>
<pre class="content">
On Wed, Aug 30, 2017 at 07:31:25AM +0200, Juerg Haefliger wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On 08/23/2017 07:04 PM, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt; On Wed, Aug 23, 2017 at 10:58:42AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt;&gt; Hi Mark,</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt; &gt;&gt;&gt; directly?</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; So it turns out that there is a difference between __flush_tlb_one() and</span>
<span class="quote">&gt; &gt;&gt; flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs</span>
<span class="quote">&gt; &gt;&gt; via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which</span>
<span class="quote">&gt; &gt;&gt; I think is enough here).</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; That sounds suspicious; I don&#39;t think that __flush_tlb_one() is</span>
<span class="quote">&gt; &gt; sufficient.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If you only do local TLB maintenance, then the page is left accessible</span>
<span class="quote">&gt; &gt; to other CPUs via the (stale) kernel mappings. i.e. the page isn&#39;t</span>
<span class="quote">&gt; &gt; exclusively mapped by userspace.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We flush all CPUs to get rid of stale entries when a new page is</span>
<span class="quote">&gt; allocated to userspace that was previously allocated to the kernel.</span>
<span class="quote">&gt; Is that the scenario you were thinking of?</span>

I think there are two cases, the one you describe above, where the
pages are first allocated, and a second one, where e.g. the pages are
mapped into the kernel because of DMA or whatever. In the case you
describe above, I think we&#39;re doing the right thing (which is why my
test worked correctly, because it tested this case).

In the second case, when the pages are unmapped (i.e. the kernel is
done doing DMA), do we need to flush the other CPUs TLBs? I think the
current code is not quite correct, because if multiple tasks (CPUs)
map the pages, only the TLB of the last one is flushed when the
mapping is cleared, because the tlb is only flushed when -&gt;mapcount
drops to zero, leaving stale entries in the other TLBs. It&#39;s not clear
to me what to do about this case.

Thoughts?

Tycho
<span class="quote">
&gt; ...Juerg</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Thanks,</span>
<span class="quote">&gt; &gt; Mark.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=176135">Juerg Haefliger</a> - Aug. 31, 2017, 9:43 a.m.</div>
<pre class="content">
On 08/30/2017 06:47 PM, Tycho Andersen wrote:
<span class="quote">&gt; On Wed, Aug 30, 2017 at 07:31:25AM +0200, Juerg Haefliger wrote:</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; On 08/23/2017 07:04 PM, Mark Rutland wrote:</span>
<span class="quote">&gt;&gt;&gt; On Wed, Aug 23, 2017 at 10:58:42AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Hi Mark,</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; directly?</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; So it turns out that there is a difference between __flush_tlb_one() and</span>
<span class="quote">&gt;&gt;&gt;&gt; flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs</span>
<span class="quote">&gt;&gt;&gt;&gt; via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which</span>
<span class="quote">&gt;&gt;&gt;&gt; I think is enough here).</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; That sounds suspicious; I don&#39;t think that __flush_tlb_one() is</span>
<span class="quote">&gt;&gt;&gt; sufficient.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; If you only do local TLB maintenance, then the page is left accessible</span>
<span class="quote">&gt;&gt;&gt; to other CPUs via the (stale) kernel mappings. i.e. the page isn&#39;t</span>
<span class="quote">&gt;&gt;&gt; exclusively mapped by userspace.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; We flush all CPUs to get rid of stale entries when a new page is</span>
<span class="quote">&gt;&gt; allocated to userspace that was previously allocated to the kernel.</span>
<span class="quote">&gt;&gt; Is that the scenario you were thinking of?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think there are two cases, the one you describe above, where the</span>
<span class="quote">&gt; pages are first allocated, and a second one, where e.g. the pages are</span>
<span class="quote">&gt; mapped into the kernel because of DMA or whatever. In the case you</span>
<span class="quote">&gt; describe above, I think we&#39;re doing the right thing (which is why my</span>
<span class="quote">&gt; test worked correctly, because it tested this case).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; In the second case, when the pages are unmapped (i.e. the kernel is</span>
<span class="quote">&gt; done doing DMA), do we need to flush the other CPUs TLBs? I think the</span>
<span class="quote">&gt; current code is not quite correct, because if multiple tasks (CPUs)</span>
<span class="quote">&gt; map the pages, only the TLB of the last one is flushed when the</span>
<span class="quote">&gt; mapping is cleared, because the tlb is only flushed when -&gt;mapcount</span>
<span class="quote">&gt; drops to zero, leaving stale entries in the other TLBs. It&#39;s not clear</span>
<span class="quote">&gt; to me what to do about this case.</span>

For this to happen, multiple CPUs need to have the same userspace page
mapped at the same time. Is this a valid scenario?

...Juerg
<span class="quote">

&gt; Thoughts?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Tycho</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; ...Juerg</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Thanks,</span>
<span class="quote">&gt;&gt;&gt; Mark.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=30282">Mark Rutland</a> - Aug. 31, 2017, 9:47 a.m.</div>
<pre class="content">
On Thu, Aug 31, 2017 at 11:43:53AM +0200, Juerg Haefliger wrote:
<span class="quote">&gt; On 08/30/2017 06:47 PM, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt; On Wed, Aug 30, 2017 at 07:31:25AM +0200, Juerg Haefliger wrote:</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; On 08/23/2017 07:04 PM, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt; On Wed, Aug 23, 2017 at 10:58:42AM -0600, Tycho Andersen wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; Hi Mark,</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; On Mon, Aug 14, 2017 at 05:50:47PM +0100, Mark Rutland wrote:</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; That said, is there any reason not to use flush_tlb_kernel_range()</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;&gt; directly?</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; So it turns out that there is a difference between __flush_tlb_one() and</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; flush_tlb_kernel_range() on x86: flush_tlb_kernel_range() flushes all the TLBs</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; via on_each_cpu(), where as __flush_tlb_one() only flushes the local TLB (which</span>
<span class="quote">&gt; &gt;&gt;&gt;&gt; I think is enough here).</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; That sounds suspicious; I don&#39;t think that __flush_tlb_one() is</span>
<span class="quote">&gt; &gt;&gt;&gt; sufficient.</span>
<span class="quote">&gt; &gt;&gt;&gt;</span>
<span class="quote">&gt; &gt;&gt;&gt; If you only do local TLB maintenance, then the page is left accessible</span>
<span class="quote">&gt; &gt;&gt;&gt; to other CPUs via the (stale) kernel mappings. i.e. the page isn&#39;t</span>
<span class="quote">&gt; &gt;&gt;&gt; exclusively mapped by userspace.</span>
<span class="quote">&gt; &gt;&gt;</span>
<span class="quote">&gt; &gt;&gt; We flush all CPUs to get rid of stale entries when a new page is</span>
<span class="quote">&gt; &gt;&gt; allocated to userspace that was previously allocated to the kernel.</span>
<span class="quote">&gt; &gt;&gt; Is that the scenario you were thinking of?</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think there are two cases, the one you describe above, where the</span>
<span class="quote">&gt; &gt; pages are first allocated, and a second one, where e.g. the pages are</span>
<span class="quote">&gt; &gt; mapped into the kernel because of DMA or whatever. In the case you</span>
<span class="quote">&gt; &gt; describe above, I think we&#39;re doing the right thing (which is why my</span>
<span class="quote">&gt; &gt; test worked correctly, because it tested this case).</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; In the second case, when the pages are unmapped (i.e. the kernel is</span>
<span class="quote">&gt; &gt; done doing DMA), do we need to flush the other CPUs TLBs? I think the</span>
<span class="quote">&gt; &gt; current code is not quite correct, because if multiple tasks (CPUs)</span>
<span class="quote">&gt; &gt; map the pages, only the TLB of the last one is flushed when the</span>
<span class="quote">&gt; &gt; mapping is cleared, because the tlb is only flushed when -&gt;mapcount</span>
<span class="quote">&gt; &gt; drops to zero, leaving stale entries in the other TLBs. It&#39;s not clear</span>
<span class="quote">&gt; &gt; to me what to do about this case.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; For this to happen, multiple CPUs need to have the same userspace page</span>
<span class="quote">&gt; mapped at the same time. Is this a valid scenario?</span>

I believe so. I think you could trigger that with a multi-threaded
application running across several CPUs. All those threads would share
the same page tables.

Thanks,
Mark.
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/include/asm/tlbflush.h b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">index af1c76981911..8e0c49105d3e 100644</span>
<span class="p_header">--- a/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -184,6 +184,14 @@</span> <span class="p_context"> static inline void flush_tlb_kernel_range(unsigned long start, unsigned long end</span>
 	isb();
 }
 
<span class="p_add">+static inline void __flush_tlb_one(unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	dsb(ishst);</span>
<span class="p_add">+	__tlbi(vaae1is, addr &gt;&gt; 12);</span>
<span class="p_add">+	dsb(ish);</span>
<span class="p_add">+	isb();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * Used to invalidate the TLB (walk caches) corresponding to intermediate page
  * table levels (pgd/pud/pmd).

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



