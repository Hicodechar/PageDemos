
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,3/3] mm: migrate: Stabilise page count when migrating transparent hugepages - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,3/3] mm: migrate: Stabilise page count when migrating transparent hugepages</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=7096">Will Deacon</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 13, 2017, 10:28 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1497349722-6731-4-git-send-email-will.deacon@arm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9783635/mbox/"
   >mbox</a>
|
   <a href="/patch/9783635/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9783635/">/patch/9783635/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	6DC6460325 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:29:37 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5EC2028583
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:29:37 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 537A428652; Tue, 13 Jun 2017 10:29:37 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D155528583
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:29:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752985AbdFMK3Q (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 13 Jun 2017 06:29:16 -0400
Received: from foss.arm.com ([217.140.101.70]:46160 &quot;EHLO foss.arm.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752168AbdFMK2f (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 13 Jun 2017 06:28:35 -0400
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.72.51.249])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 0B21715BE;
	Tue, 13 Jun 2017 03:28:35 -0700 (PDT)
Received: from edgewater-inn.cambridge.arm.com
	(usa-sjc-imap-foss1.foss.arm.com [10.72.51.249])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPA id
	D1BCB3F93D; Tue, 13 Jun 2017 03:28:34 -0700 (PDT)
Received: by edgewater-inn.cambridge.arm.com (Postfix, from userid 1000)
	id E62981AE322D; Tue, 13 Jun 2017 11:28:44 +0100 (BST)
From: Will Deacon &lt;will.deacon@arm.com&gt;
To: linux-mm@kvack.org, linux-kernel@vger.kernel.org
Cc: mark.rutland@arm.com, akpm@linux-foundation.org,
	kirill.shutemov@linux.intel.com, Punit.Agrawal@arm.com,
	mgorman@suse.de, steve.capper@arm.com, vbabka@suse.cz,
	Will Deacon &lt;will.deacon@arm.com&gt;
Subject: [PATCH v2 3/3] mm: migrate: Stabilise page count when migrating
	transparent hugepages
Date: Tue, 13 Jun 2017 11:28:42 +0100
Message-Id: &lt;1497349722-6731-4-git-send-email-will.deacon@arm.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1497349722-6731-1-git-send-email-will.deacon@arm.com&gt;
References: &lt;1497349722-6731-1-git-send-email-will.deacon@arm.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7096">Will Deacon</a> - June 13, 2017, 10:28 a.m.</div>
<pre class="content">
When migrating a transparent hugepage, migrate_misplaced_transhuge_page
guards itself against a concurrent fastgup of the page by checking that
the page count is equal to 2 before and after installing the new pmd.

If the page count changes, then the pmd is reverted back to the original
entry, however there is a small window where the new (possibly writable)
pmd is installed and the underlying page could be written by userspace.
Restoring the old pmd could therefore result in loss of data.

This patch fixes the problem by freezing the page count whilst updating
the page tables, which protects against a concurrent fastgup without the
need to restore the old pmd in the failure case (since the page count can
no longer change under our feet).

Cc: Mel Gorman &lt;mgorman@suse.de&gt;
<span class="acked-by">Acked-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Will Deacon &lt;will.deacon@arm.com&gt;</span>
---
 mm/migrate.c | 15 ++-------------
 1 file changed, 2 insertions(+), 13 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index 89a0a1707f4c..8b21f1b1ec6e 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -1913,7 +1913,6 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 	int page_lru = page_is_file_cache(page);
 	unsigned long mmun_start = address &amp; HPAGE_PMD_MASK;
 	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;
<span class="p_del">-	pmd_t orig_entry;</span>
 
 	/*
 	 * Rate-limit the amount of data that is being migrated to a node.
<span class="p_chunk">@@ -1956,8 +1955,7 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 	/* Recheck the target PMD */
 	mmu_notifier_invalidate_range_start(mm, mmun_start, mmun_end);
 	ptl = pmd_lock(mm, pmd);
<span class="p_del">-	if (unlikely(!pmd_same(*pmd, entry) || page_count(page) != 2)) {</span>
<span class="p_del">-fail_putback:</span>
<span class="p_add">+	if (unlikely(!pmd_same(*pmd, entry) || !page_ref_freeze(page, 2))) {</span>
 		spin_unlock(ptl);
 		mmu_notifier_invalidate_range_end(mm, mmun_start, mmun_end);
 
<span class="p_chunk">@@ -1979,7 +1977,6 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 		goto out_unlock;
 	}
 
<span class="p_del">-	orig_entry = *pmd;</span>
 	entry = mk_huge_pmd(new_page, vma-&gt;vm_page_prot);
 	entry = maybe_pmd_mkwrite(pmd_mkdirty(entry), vma);
 
<span class="p_chunk">@@ -1996,15 +1993,7 @@</span> <span class="p_context"> int migrate_misplaced_transhuge_page(struct mm_struct *mm,</span>
 	set_pmd_at(mm, mmun_start, pmd, entry);
 	update_mmu_cache_pmd(vma, address, &amp;entry);
 
<span class="p_del">-	if (page_count(page) != 2) {</span>
<span class="p_del">-		set_pmd_at(mm, mmun_start, pmd, orig_entry);</span>
<span class="p_del">-		flush_pmd_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="p_del">-		mmu_notifier_invalidate_range(mm, mmun_start, mmun_end);</span>
<span class="p_del">-		update_mmu_cache_pmd(vma, address, &amp;entry);</span>
<span class="p_del">-		page_remove_rmap(new_page, true);</span>
<span class="p_del">-		goto fail_putback;</span>
<span class="p_del">-	}</span>
<span class="p_del">-</span>
<span class="p_add">+	page_ref_unfreeze(page, 2);</span>
 	mlock_migrate_page(new_page, page);
 	page_remove_rmap(page, true);
 	set_page_owner_migrate_reason(new_page, MR_NUMA_MISPLACED);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



