
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[V2,2/3] mm: Enable HugeTLB allocation isolation for CDM nodes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [V2,2/3] mm: Enable HugeTLB allocation isolation for CDM nodes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 10, 2017, 10:06 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20170210100640.26927-3-khandual@linux.vnet.ibm.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9566395/mbox/"
   >mbox</a>
|
   <a href="/patch/9566395/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9566395/">/patch/9566395/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	A8EB360216 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Feb 2017 10:08:27 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 951EC28540
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Feb 2017 10:08:27 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 89EFD28556; Fri, 10 Feb 2017 10:08:27 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 06B5D28540
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 10 Feb 2017 10:08:27 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752618AbdBJKHz (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 10 Feb 2017 05:07:55 -0500
Received: from mx0a-001b2d01.pphosted.com ([148.163.156.1]:44784 &quot;EHLO
	mx0a-001b2d01.pphosted.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S1751668AbdBJKHs (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 10 Feb 2017 05:07:48 -0500
Received: from pps.filterd (m0098409.ppops.net [127.0.0.1])
	by mx0a-001b2d01.pphosted.com (8.16.0.20/8.16.0.20) with SMTP id
	v1AA3r6C107569
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 10 Feb 2017 05:07:48 -0500
Received: from e23smtp07.au.ibm.com (e23smtp07.au.ibm.com [202.81.31.140])
	by mx0a-001b2d01.pphosted.com with ESMTP id 28h4cnf8ng-1
	(version=TLSv1.2 cipher=AES256-SHA bits=256 verify=NOT)
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 10 Feb 2017 05:07:48 -0500
Received: from localhost
	by e23smtp07.au.ibm.com with IBM ESMTP SMTP Gateway: Authorized Use
	Only! Violators will be prosecuted
	for &lt;linux-kernel@vger.kernel.org&gt; from &lt;khandual@linux.vnet.ibm.com&gt;;
	Fri, 10 Feb 2017 20:07:45 +1000
Received: from d23dlp03.au.ibm.com (202.81.31.214)
	by e23smtp07.au.ibm.com (202.81.31.204) with IBM ESMTP SMTP Gateway:
	Authorized Use Only! Violators will be prosecuted; 
	Fri, 10 Feb 2017 20:07:44 +1000
Received: from d23relay07.au.ibm.com (d23relay07.au.ibm.com [9.190.26.37])
	by d23dlp03.au.ibm.com (Postfix) with ESMTP id A34013578057
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 10 Feb 2017 21:07:43 +1100 (EST)
Received: from d23av04.au.ibm.com (d23av04.au.ibm.com [9.190.235.139])
	by d23relay07.au.ibm.com (8.14.9/8.14.9/NCO v10.0) with ESMTP id
	v1AA7ZNq12386362
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 10 Feb 2017 21:07:43 +1100
Received: from d23av04.au.ibm.com (localhost [127.0.0.1])
	by d23av04.au.ibm.com (8.14.4/8.14.4/NCO v10.0 AVout) with ESMTP id
	v1AA7A0V002163
	for &lt;linux-kernel@vger.kernel.org&gt;; Fri, 10 Feb 2017 21:07:11 +1100
Received: from localhost.in.ibm.com ([9.79.188.193])
	by d23av04.au.ibm.com (8.14.4/8.14.4/NCO v10.0 AVin) with ESMTP id
	v1AA72Pj001740; Fri, 10 Feb 2017 21:07:08 +1100
From: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;
To: linux-kernel@vger.kernel.org, linux-mm@kvack.org
Cc: mhocko@suse.com, vbabka@suse.cz, mgorman@suse.de,
	minchan@kernel.org, aneesh.kumar@linux.vnet.ibm.com,
	bsingharora@gmail.com, srikar@linux.vnet.ibm.com,
	haren@linux.vnet.ibm.com, jglisse@redhat.com,
	dave.hansen@intel.com, dan.j.williams@intel.com
Subject: [PATCH V2 2/3] mm: Enable HugeTLB allocation isolation for CDM nodes
Date: Fri, 10 Feb 2017 15:36:39 +0530
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20170210100640.26927-1-khandual@linux.vnet.ibm.com&gt;
References: &lt;20170210100640.26927-1-khandual@linux.vnet.ibm.com&gt;
X-TM-AS-MML: disable
X-Content-Scanned: Fidelis XPS MAILER
x-cbid: 17021010-0044-0000-0000-0000022919A6
X-IBM-AV-DETECTION: SAVI=unused REMOTE=unused XFE=unused
x-cbparentid: 17021010-0045-0000-0000-000006829359
Message-Id: &lt;20170210100640.26927-3-khandual@linux.vnet.ibm.com&gt;
X-Proofpoint-Virus-Version: vendor=fsecure engine=2.50.10432:, ,
	definitions=2017-02-10_04:, , signatures=0
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
	spamscore=0 suspectscore=2
	malwarescore=0 phishscore=0 adultscore=0 bulkscore=0 classifier=spam
	adjust=0 reason=mlx scancount=1 engine=8.0.1-1612050000
	definitions=main-1702100101
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=36302">Anshuman Khandual</a> - Feb. 10, 2017, 10:06 a.m.</div>
<pre class="content">
HugeTLB allocation/release/accounting currently spans across all the nodes
under N_MEMORY node mask. Coherent memory nodes should not be part of these
allocations. So use system_mem_nodemask() call to fetch system RAM only
nodes on the platform which can then be used for HugeTLB allocation purpose
instead of N_MEMORY node mask. This isolates coherent device memory nodes
from HugeTLB allocations.
<span class="signed-off-by">
Signed-off-by: Anshuman Khandual &lt;khandual@linux.vnet.ibm.com&gt;</span>
---
 mm/hugetlb.c | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/hugetlb.c b/mm/hugetlb.c</span>
<span class="p_header">index c7025c1..9a46d9f 100644</span>
<span class="p_header">--- a/mm/hugetlb.c</span>
<span class="p_header">+++ b/mm/hugetlb.c</span>
<span class="p_chunk">@@ -1790,6 +1790,7 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
 					unsigned long unused_resv_pages)
 {
 	unsigned long nr_pages;
<span class="p_add">+	nodemask_t system_mem = system_mem_nodemask();</span>
 
 	/* Cannot return gigantic pages currently */
 	if (hstate_is_gigantic(h))
<span class="p_chunk">@@ -1816,7 +1817,7 @@</span> <span class="p_context"> static void return_unused_surplus_pages(struct hstate *h,</span>
 	while (nr_pages--) {
 		h-&gt;resv_huge_pages--;
 		unused_resv_pages--;
<span class="p_del">-		if (!free_pool_huge_page(h, &amp;node_states[N_MEMORY], 1))</span>
<span class="p_add">+		if (!free_pool_huge_page(h, &amp;system_mem, 1))</span>
 			goto out;
 		cond_resched_lock(&amp;hugetlb_lock);
 	}
<span class="p_chunk">@@ -2107,8 +2108,9 @@</span> <span class="p_context"> int __weak alloc_bootmem_huge_page(struct hstate *h)</span>
 {
 	struct huge_bootmem_page *m;
 	int nr_nodes, node;
<span class="p_add">+	nodemask_t system_mem = system_mem_nodemask();</span>
 
<span class="p_del">-	for_each_node_mask_to_alloc(h, nr_nodes, node, &amp;node_states[N_MEMORY]) {</span>
<span class="p_add">+	for_each_node_mask_to_alloc(h, nr_nodes, node, &amp;system_mem) {</span>
 		void *addr;
 
 		addr = memblock_virt_alloc_try_nid_nopanic(
<span class="p_chunk">@@ -2177,13 +2179,14 @@</span> <span class="p_context"> static void __init gather_bootmem_prealloc(void)</span>
 static void __init hugetlb_hstate_alloc_pages(struct hstate *h)
 {
 	unsigned long i;
<span class="p_add">+	nodemask_t system_mem = system_mem_nodemask();</span>
<span class="p_add">+</span>
 
 	for (i = 0; i &lt; h-&gt;max_huge_pages; ++i) {
 		if (hstate_is_gigantic(h)) {
 			if (!alloc_bootmem_huge_page(h))
 				break;
<span class="p_del">-		} else if (!alloc_fresh_huge_page(h,</span>
<span class="p_del">-					 &amp;node_states[N_MEMORY]))</span>
<span class="p_add">+		} else if (!alloc_fresh_huge_page(h, &amp;system_mem))</span>
 			break;
 	}
 	h-&gt;max_huge_pages = i;
<span class="p_chunk">@@ -2420,6 +2423,8 @@</span> <span class="p_context"> static ssize_t __nr_hugepages_store_common(bool obey_mempolicy,</span>
 					   unsigned long count, size_t len)
 {
 	int err;
<span class="p_add">+	nodemask_t system_mem = system_mem_nodemask();</span>
<span class="p_add">+</span>
 	NODEMASK_ALLOC(nodemask_t, nodes_allowed, GFP_KERNEL | __GFP_NORETRY);
 
 	if (hstate_is_gigantic(h) &amp;&amp; !gigantic_page_supported()) {
<span class="p_chunk">@@ -2434,7 +2439,7 @@</span> <span class="p_context"> static ssize_t __nr_hugepages_store_common(bool obey_mempolicy,</span>
 		if (!(obey_mempolicy &amp;&amp;
 				init_nodemask_of_mempolicy(nodes_allowed))) {
 			NODEMASK_FREE(nodes_allowed);
<span class="p_del">-			nodes_allowed = &amp;node_states[N_MEMORY];</span>
<span class="p_add">+			nodes_allowed = &amp;system_mem;</span>
 		}
 	} else if (nodes_allowed) {
 		/*
<span class="p_chunk">@@ -2444,11 +2449,11 @@</span> <span class="p_context"> static ssize_t __nr_hugepages_store_common(bool obey_mempolicy,</span>
 		count += h-&gt;nr_huge_pages - h-&gt;nr_huge_pages_node[nid];
 		init_nodemask_of_node(nodes_allowed, nid);
 	} else
<span class="p_del">-		nodes_allowed = &amp;node_states[N_MEMORY];</span>
<span class="p_add">+		nodes_allowed = &amp;system_mem;</span>
 
 	h-&gt;max_huge_pages = set_max_huge_pages(h, count, nodes_allowed);
 
<span class="p_del">-	if (nodes_allowed != &amp;node_states[N_MEMORY])</span>
<span class="p_add">+	if (nodes_allowed != &amp;system_mem)</span>
 		NODEMASK_FREE(nodes_allowed);
 
 	return len;
<span class="p_chunk">@@ -2745,9 +2750,10 @@</span> <span class="p_context"> static void hugetlb_register_node(struct node *node)</span>
  */
 static void __init hugetlb_register_all_nodes(void)
 {
<span class="p_add">+	nodemask_t nodes = system_mem_nodemask();</span>
 	int nid;
 
<span class="p_del">-	for_each_node_state(nid, N_MEMORY) {</span>
<span class="p_add">+	for_each_node_mask(nid, nodes) {</span>
 		struct node *node = node_devices[nid];
 		if (node-&gt;dev.id == nid)
 			hugetlb_register_node(node);
<span class="p_chunk">@@ -3019,11 +3025,12 @@</span> <span class="p_context"> void hugetlb_show_meminfo(void)</span>
 {
 	struct hstate *h;
 	int nid;
<span class="p_add">+	nodemask_t system_mem = system_mem_nodemask();</span>
 
 	if (!hugepages_supported())
 		return;
 
<span class="p_del">-	for_each_node_state(nid, N_MEMORY)</span>
<span class="p_add">+	for_each_node_mask(nid, system_mem)</span>
 		for_each_hstate(h)
 			pr_info(&quot;Node %d hugepages_total=%u hugepages_free=%u hugepages_surp=%u hugepages_size=%lukB\n&quot;,
 				nid,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



