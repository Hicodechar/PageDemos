
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v2,12/20] xen/balloon: Don&#39;t rely on the page granularity is the same for Xen and Linux - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v2,12/20] xen/balloon: Don&#39;t rely on the page granularity is the same for Xen and Linux</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=72882">Julien Grall</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>July 9, 2015, 8:42 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1436474552-31789-13-git-send-email-julien.grall@citrix.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6759351/mbox/"
   >mbox</a>
|
   <a href="/patch/6759351/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6759351/">/patch/6759351/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 397F9C05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Jul 2015 20:46:53 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 1DA532053B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Jul 2015 20:46:52 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id C2D6420790
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  9 Jul 2015 20:46:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754761AbbGIUqp (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 9 Jul 2015 16:46:45 -0400
Received: from smtp02.citrix.com ([66.165.176.63]:2082 &quot;EHLO
	SMTP02.CITRIX.COM&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754073AbbGIUqE (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 9 Jul 2015 16:46:04 -0400
X-IronPort-AV: E=Sophos;i=&quot;5.15,442,1432598400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;282742101&quot;
From: Julien Grall &lt;julien.grall@citrix.com&gt;
To: &lt;xen-devel@lists.xenproject.org&gt;
CC: &lt;linux-arm-kernel@lists.infradead.org&gt;, &lt;ian.campbell@citrix.com&gt;,
	&lt;stefano.stabellini@eu.citrix.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&quot;Julien Grall&quot; &lt;julien.grall@citrix.com&gt;,
	Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;,
	Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;,
	&quot;David Vrabel&quot; &lt;david.vrabel@citrix.com&gt;, Wei Liu &lt;wei.liu2@citrix.com&gt;
Subject: [PATCH v2 12/20] xen/balloon: Don&#39;t rely on the page granularity is
	the same for Xen and Linux
Date: Thu, 9 Jul 2015 21:42:24 +0100
Message-ID: &lt;1436474552-31789-13-git-send-email-julien.grall@citrix.com&gt;
X-Mailer: git-send-email 2.1.4
In-Reply-To: &lt;1436474552-31789-1-git-send-email-julien.grall@citrix.com&gt;
References: &lt;1436474552-31789-1-git-send-email-julien.grall@citrix.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-DLP: MIA2
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.2 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72882">Julien Grall</a> - July 9, 2015, 8:42 p.m.</div>
<pre class="content">
For ARM64 guests, Linux is able to support either 64K or 4K page
granularity. Although, the hypercall interface is always based on 4K
page granularity.

With 64K page granuliarty, a single page will be spread over multiple
Xen frame.

When a driver request/free a balloon page, the balloon driver will have
to split the Linux page in 4K chunk before asking Xen to add/remove the
frame from the guest.

Note that this can work on any page granularity assuming it&#39;s a multiple
of 4K.
<span class="signed-off-by">
Signed-off-by: Julien Grall &lt;julien.grall@citrix.com&gt;</span>
Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;
Cc: Wei Liu &lt;wei.liu2@citrix.com&gt;
---
    Changes in v2:
        - Use xen_apply_to_page to split a page in 4K chunk
        - It&#39;s not necessary to have a smaller frame list. Re-use
        PAGE_SIZE
        - Convert reserve_additional_memory to use XEN_... macro
---
 drivers/xen/balloon.c | 147 +++++++++++++++++++++++++++++++++++---------------
 1 file changed, 105 insertions(+), 42 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=999">Stefano Stabellini</a> - July 17, 2015, 2:03 p.m.</div>
<pre class="content">
On Thu, 9 Jul 2015, Julien Grall wrote:
<span class="quote">&gt; For ARM64 guests, Linux is able to support either 64K or 4K page</span>
<span class="quote">&gt; granularity. Although, the hypercall interface is always based on 4K</span>
<span class="quote">&gt; page granularity.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; With 64K page granuliarty, a single page will be spread over multiple</span>
<span class="quote">&gt; Xen frame.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; When a driver request/free a balloon page, the balloon driver will have</span>
<span class="quote">&gt; to split the Linux page in 4K chunk before asking Xen to add/remove the</span>
<span class="quote">&gt; frame from the guest.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that this can work on any page granularity assuming it&#39;s a multiple</span>
<span class="quote">&gt; of 4K.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Julien Grall &lt;julien.grall@citrix.com&gt;</span>
<span class="quote">&gt; Cc: Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>
<span class="quote">&gt; Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;</span>
<span class="quote">&gt; Cc: David Vrabel &lt;david.vrabel@citrix.com&gt;</span>
<span class="quote">&gt; Cc: Wei Liu &lt;wei.liu2@citrix.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;     Changes in v2:</span>
<span class="quote">&gt;         - Use xen_apply_to_page to split a page in 4K chunk</span>
<span class="quote">&gt;         - It&#39;s not necessary to have a smaller frame list. Re-use</span>
<span class="quote">&gt;         PAGE_SIZE</span>
<span class="quote">&gt;         - Convert reserve_additional_memory to use XEN_... macro</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  drivers/xen/balloon.c | 147 +++++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;  1 file changed, 105 insertions(+), 42 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c</span>
<span class="quote">&gt; index fd93369..19a72b1 100644</span>
<span class="quote">&gt; --- a/drivers/xen/balloon.c</span>
<span class="quote">&gt; +++ b/drivers/xen/balloon.c</span>
<span class="quote">&gt; @@ -230,6 +230,7 @@ static enum bp_state reserve_additional_memory(long credit)</span>
<span class="quote">&gt;  	nid = memory_add_physaddr_to_nid(hotplug_start_paddr);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  #ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt; +	/* TODO */</span>

I think you need to be more verbose than that: TODO what?
<span class="quote">

&gt;          /*</span>
<span class="quote">&gt;           * add_memory() will build page tables for the new memory so</span>
<span class="quote">&gt;           * the p2m must contain invalid entries so the correct</span>
<span class="quote">&gt; @@ -242,8 +243,8 @@ static enum bp_state reserve_additional_memory(long credit)</span>
<span class="quote">&gt;  	if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="quote">&gt;  		unsigned long pfn, i;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		pfn = PFN_DOWN(hotplug_start_paddr);</span>
<span class="quote">&gt; -		for (i = 0; i &lt; balloon_hotplug; i++) {</span>
<span class="quote">&gt; +		pfn = XEN_PFN_DOWN(hotplug_start_paddr);</span>
<span class="quote">&gt; +		for (i = 0; i &lt; (balloon_hotplug * XEN_PFN_PER_PAGE); i++) {</span>
<span class="quote">&gt;  			if (!set_phys_to_machine(pfn + i, INVALID_P2M_ENTRY)) {</span>
<span class="quote">&gt;  				pr_warn(&quot;set_phys_to_machine() failed, no memory added\n&quot;);</span>
<span class="quote">&gt;  				return BP_ECANCELED;</span>
<span class="quote">&gt; @@ -323,10 +324,72 @@ static enum bp_state reserve_additional_memory(long credit)</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  #endif /* CONFIG_XEN_BALLOON_MEMORY_HOTPLUG */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static int set_frame(struct page *page, unsigned long pfn, void *data)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long *index = data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	frame_list[(*index)++] = pfn;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt; +static int pvmmu_update_mapping(struct page *page, unsigned long pfn,</span>
<span class="quote">&gt; +				void *data)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long *index = data;</span>
<span class="quote">&gt; +	xen_pfn_t frame = frame_list[*index];</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	set_phys_to_machine(pfn, frame);</span>
<span class="quote">&gt; +	/* Link back into the page tables if not highmem. */</span>
<span class="quote">&gt; +	if (!PageHighMem(page)) {</span>
<span class="quote">&gt; +		int ret;</span>
<span class="quote">&gt; +		ret = HYPERVISOR_update_va_mapping(</span>
<span class="quote">&gt; +				(unsigned long)__va(pfn &lt;&lt; XEN_PAGE_SHIFT),</span>
<span class="quote">&gt; +				mfn_pte(frame, PAGE_KERNEL),</span>
<span class="quote">&gt; +				0);</span>
<span class="quote">&gt; +		BUG_ON(ret);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	(*index)++;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +static int balloon_remove_mapping(struct page *page, unsigned long pfn,</span>
<span class="quote">&gt; +				  void *data)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	unsigned long *index = data;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	/* We expect the frame_list to contain the same pfn */</span>
<span class="quote">&gt; +	BUG_ON(pfn != frame_list[*index]);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	frame_list[*index] = pfn_to_mfn(pfn);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt; +	if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="quote">&gt; +		if (!PageHighMem(page)) {</span>
<span class="quote">&gt; +			int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ret = HYPERVISOR_update_va_mapping(</span>
<span class="quote">&gt; +					(unsigned long)__va(pfn &lt;&lt; XEN_PAGE_SHIFT),</span>
<span class="quote">&gt; +					__pte_ma(0), 0);</span>
<span class="quote">&gt; +			BUG_ON(ret);</span>
<span class="quote">&gt; +		}</span>
<span class="quote">&gt; +		__set_phys_to_machine(pfn, INVALID_P2M_ENTRY);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	(*index)++;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int rc;</span>
<span class="quote">&gt; -	unsigned long  pfn, i;</span>
<span class="quote">&gt; +	unsigned long i, frame_idx;</span>
<span class="quote">&gt;  	struct page   *page;</span>
<span class="quote">&gt;  	struct xen_memory_reservation reservation = {</span>
<span class="quote">&gt;  		.address_bits = 0,</span>
<span class="quote">&gt; @@ -343,44 +406,43 @@ static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="quote">&gt; -		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="quote">&gt; +	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="quote">&gt; +		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	frame_idx = 0;</span>
<span class="quote">&gt;  	page = list_first_entry_or_null(&amp;ballooned_pages, struct page, lru);</span>
<span class="quote">&gt;  	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt;  		if (!page) {</span>
<span class="quote">&gt;  			nr_pages = i;</span>
<span class="quote">&gt;  			break;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; -		frame_list[i] = page_to_pfn(page);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		rc = xen_apply_to_page(page, set_frame, &amp;frame_idx);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  		page = balloon_next_page(page);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	set_xen_guest_handle(reservation.extent_start, frame_list);</span>
<span class="quote">&gt; -	reservation.nr_extents = nr_pages;</span>
<span class="quote">&gt; +	reservation.nr_extents = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt;  	rc = HYPERVISOR_memory_op(XENMEM_populate_physmap, &amp;reservation);</span>
<span class="quote">&gt;  	if (rc &lt;= 0)</span>
<span class="quote">&gt;  		return BP_EAGAIN;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	for (i = 0; i &lt; rc; i++) {</span>
<span class="quote">&gt; +	/* rc is equal to the number of Xen page populated */</span>
<span class="quote">&gt; +	nr_pages = rc / XEN_PFN_PER_PAGE;</span>

Here we are purposedly ignoring any spares (rc % XEN_PFN_PER_PAGE).
Instead of leaking them, maybe we should givem them back to Xen since we
cannot use them?
<span class="quote">


&gt; +	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt;  		page = balloon_retrieve(false);</span>
<span class="quote">&gt;  		BUG_ON(page == NULL);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		pfn = page_to_pfn(page);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  #ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt; +		frame_idx = 0;</span>

Shouldn&#39;t this be before the beginning of the loop above?
<span class="quote">

&gt;  		if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="quote">&gt; -			set_phys_to_machine(pfn, frame_list[i]);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -			/* Link back into the page tables if not highmem. */</span>
<span class="quote">&gt; -			if (!PageHighMem(page)) {</span>
<span class="quote">&gt; -				int ret;</span>
<span class="quote">&gt; -				ret = HYPERVISOR_update_va_mapping(</span>
<span class="quote">&gt; -						(unsigned long)__va(pfn &lt;&lt; PAGE_SHIFT),</span>
<span class="quote">&gt; -						mfn_pte(frame_list[i], PAGE_KERNEL),</span>
<span class="quote">&gt; -						0);</span>
<span class="quote">&gt; -				BUG_ON(ret);</span>
<span class="quote">&gt; -			}</span>
<span class="quote">&gt; +			int ret;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +			ret = xen_apply_to_page(page, pvmmu_update_mapping,</span>
<span class="quote">&gt; +						&amp;frame_idx);</span>
<span class="quote">&gt; +			BUG_ON(ret);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -388,7 +450,7 @@ static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;  		__free_reserved_page(page);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	balloon_stats.current_pages += rc;</span>
<span class="quote">&gt; +	balloon_stats.current_pages += nr_pages;</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  	return BP_DONE;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; @@ -396,7 +458,7 @@ static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;  static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	enum bp_state state = BP_DONE;</span>
<span class="quote">&gt; -	unsigned long  pfn, i;</span>
<span class="quote">&gt; +	unsigned long  pfn, i, frame_idx, nr_frames;</span>
<span class="quote">&gt;  	struct page   *page;</span>
<span class="quote">&gt;  	int ret;</span>
<span class="quote">&gt;  	struct xen_memory_reservation reservation = {</span>
<span class="quote">&gt; @@ -414,9 +476,10 @@ static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  #endif</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="quote">&gt; -		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="quote">&gt; +	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="quote">&gt; +		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	frame_idx = 0;</span>
<span class="quote">&gt;  	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt;  		page = alloc_page(gfp);</span>
<span class="quote">&gt;  		if (page == NULL) {</span>
<span class="quote">&gt; @@ -426,9 +489,12 @@ static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		scrub_page(page);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		frame_list[i] = page_to_pfn(page);</span>
<span class="quote">&gt; +		ret = xen_apply_to_page(page, set_frame, &amp;frame_idx);</span>
<span class="quote">&gt; +		BUG_ON(ret);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +	nr_frames = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Ensure that ballooned highmem pages don&#39;t have kmaps.</span>
<span class="quote">&gt;  	 *</span>
<span class="quote">&gt; @@ -439,22 +505,19 @@ static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
<span class="quote">&gt;  	kmap_flush_unused();</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Update direct mapping, invalidate P2M, and add to balloon. */</span>
<span class="quote">&gt; +	frame_idx = 0;</span>
<span class="quote">&gt;  	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt; -		pfn = frame_list[i];</span>
<span class="quote">&gt; -		frame_list[i] = pfn_to_mfn(pfn);</span>
<span class="quote">&gt; -		page = pfn_to_page(pfn);</span>
<span class="quote">&gt; +		/*</span>
<span class="quote">&gt; +		 * The Xen PFN for a given Linux Page are contiguous in</span>
<span class="quote">&gt; +		 * frame_list</span>
<span class="quote">&gt; +		 */</span>
<span class="quote">&gt; +		pfn = frame_list[frame_idx];</span>
<span class="quote">&gt; +		page = xen_pfn_to_page(pfn);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt; -		if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="quote">&gt; -			if (!PageHighMem(page)) {</span>
<span class="quote">&gt; -				ret = HYPERVISOR_update_va_mapping(</span>
<span class="quote">&gt; -						(unsigned long)__va(pfn &lt;&lt; PAGE_SHIFT),</span>
<span class="quote">&gt; -						__pte_ma(0), 0);</span>
<span class="quote">&gt; -				BUG_ON(ret);</span>
<span class="quote">&gt; -			}</span>
<span class="quote">&gt; -			__set_phys_to_machine(pfn, INVALID_P2M_ENTRY);</span>
<span class="quote">&gt; -		}</span>
<span class="quote">&gt; -#endif</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		ret = xen_apply_to_page(page, balloon_remove_mapping,</span>
<span class="quote">&gt; +					&amp;frame_idx);</span>
<span class="quote">&gt; +		BUG_ON(ret);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		balloon_append(page);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; @@ -462,9 +525,9 @@ static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
<span class="quote">&gt;  	flush_tlb_all();</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	set_xen_guest_handle(reservation.extent_start, frame_list);</span>
<span class="quote">&gt; -	reservation.nr_extents   = nr_pages;</span>
<span class="quote">&gt; +	reservation.nr_extents   = nr_frames;</span>
<span class="quote">&gt;  	ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation, &amp;reservation);</span>
<span class="quote">&gt; -	BUG_ON(ret != nr_pages);</span>
<span class="quote">&gt; +	BUG_ON(ret != nr_frames);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	balloon_stats.current_pages -= nr_pages;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.1.4</span>
<span class="quote">&gt; </span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72882">Julien Grall</a> - July 17, 2015, 2:32 p.m.</div>
<pre class="content">
Hi Stefano,

On 17/07/15 15:03, Stefano Stabellini wrote:
<span class="quote">&gt;&gt; ---</span>
<span class="quote">&gt;&gt;  drivers/xen/balloon.c | 147 +++++++++++++++++++++++++++++++++++---------------</span>
<span class="quote">&gt;&gt;  1 file changed, 105 insertions(+), 42 deletions(-)</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c</span>
<span class="quote">&gt;&gt; index fd93369..19a72b1 100644</span>
<span class="quote">&gt;&gt; --- a/drivers/xen/balloon.c</span>
<span class="quote">&gt;&gt; +++ b/drivers/xen/balloon.c</span>
<span class="quote">&gt;&gt; @@ -230,6 +230,7 @@ static enum bp_state reserve_additional_memory(long credit)</span>
<span class="quote">&gt;&gt;  	nid = memory_add_physaddr_to_nid(hotplug_start_paddr);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt;&gt; +	/* TODO */</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think you need to be more verbose than that: TODO what?</span>

It was for me to remember fixing reserve_additional_memory. I did it and
forgot to remove the TODO when I clean up.

I will drop it in the next version.

[...]
<span class="quote">
&gt;&gt;  static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;&gt;  {</span>
<span class="quote">&gt;&gt;  	int rc;</span>
<span class="quote">&gt;&gt; -	unsigned long  pfn, i;</span>
<span class="quote">&gt;&gt; +	unsigned long i, frame_idx;</span>
<span class="quote">&gt;&gt;  	struct page   *page;</span>
<span class="quote">&gt;&gt;  	struct xen_memory_reservation reservation = {</span>
<span class="quote">&gt;&gt;  		.address_bits = 0,</span>
<span class="quote">&gt;&gt; @@ -343,44 +406,43 @@ static enum bp_state increase_reservation(unsigned long nr_pages)</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;  #endif</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="quote">&gt;&gt; -		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="quote">&gt;&gt; +	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="quote">&gt;&gt; +		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; +	frame_idx = 0;</span>
<span class="quote">&gt;&gt;  	page = list_first_entry_or_null(&amp;ballooned_pages, struct page, lru);</span>
<span class="quote">&gt;&gt;  	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt;&gt;  		if (!page) {</span>
<span class="quote">&gt;&gt;  			nr_pages = i;</span>
<span class="quote">&gt;&gt;  			break;</span>
<span class="quote">&gt;&gt;  		}</span>
<span class="quote">&gt;&gt; -		frame_list[i] = page_to_pfn(page);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt; +		rc = xen_apply_to_page(page, set_frame, &amp;frame_idx);</span>
<span class="quote">&gt;&gt; +</span>
<span class="quote">&gt;&gt;  		page = balloon_next_page(page);</span>
<span class="quote">&gt;&gt;  	}</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt;  	set_xen_guest_handle(reservation.extent_start, frame_list);</span>
<span class="quote">&gt;&gt; -	reservation.nr_extents = nr_pages;</span>
<span class="quote">&gt;&gt; +	reservation.nr_extents = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt;&gt;  	rc = HYPERVISOR_memory_op(XENMEM_populate_physmap, &amp;reservation);</span>
<span class="quote">&gt;&gt;  	if (rc &lt;= 0)</span>
<span class="quote">&gt;&gt;  		return BP_EAGAIN;</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -	for (i = 0; i &lt; rc; i++) {</span>
<span class="quote">&gt;&gt; +	/* rc is equal to the number of Xen page populated */</span>
<span class="quote">&gt;&gt; +	nr_pages = rc / XEN_PFN_PER_PAGE;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Here we are purposedly ignoring any spares (rc % XEN_PFN_PER_PAGE).</span>
<span class="quote">&gt; Instead of leaking them, maybe we should givem them back to Xen since we</span>
<span class="quote">&gt; cannot use them?</span>

I will give a look to do it.
<span class="quote">
&gt;&gt; +	for (i = 0; i &lt; nr_pages; i++) {</span>
<span class="quote">&gt;&gt;  		page = balloon_retrieve(false);</span>
<span class="quote">&gt;&gt;  		BUG_ON(page == NULL);</span>
<span class="quote">&gt;&gt;  </span>
<span class="quote">&gt;&gt; -		pfn = page_to_pfn(page);</span>
<span class="quote">&gt;&gt; -</span>
<span class="quote">&gt;&gt;  #ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="quote">&gt;&gt; +		frame_idx = 0;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Shouldn&#39;t this be before the beginning of the loop above?</span>

Hmmmm... Yes. Note that I only compiled tested on x86, it would be good
if someone test on real hardware at some point (I don&#39;t have any x86 Xen
setup).

Regards,
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/xen/balloon.c b/drivers/xen/balloon.c</span>
<span class="p_header">index fd93369..19a72b1 100644</span>
<span class="p_header">--- a/drivers/xen/balloon.c</span>
<span class="p_header">+++ b/drivers/xen/balloon.c</span>
<span class="p_chunk">@@ -230,6 +230,7 @@</span> <span class="p_context"> static enum bp_state reserve_additional_memory(long credit)</span>
 	nid = memory_add_physaddr_to_nid(hotplug_start_paddr);
 
 #ifdef CONFIG_XEN_HAVE_PVMMU
<span class="p_add">+	/* TODO */</span>
         /*
          * add_memory() will build page tables for the new memory so
          * the p2m must contain invalid entries so the correct
<span class="p_chunk">@@ -242,8 +243,8 @@</span> <span class="p_context"> static enum bp_state reserve_additional_memory(long credit)</span>
 	if (!xen_feature(XENFEAT_auto_translated_physmap)) {
 		unsigned long pfn, i;
 
<span class="p_del">-		pfn = PFN_DOWN(hotplug_start_paddr);</span>
<span class="p_del">-		for (i = 0; i &lt; balloon_hotplug; i++) {</span>
<span class="p_add">+		pfn = XEN_PFN_DOWN(hotplug_start_paddr);</span>
<span class="p_add">+		for (i = 0; i &lt; (balloon_hotplug * XEN_PFN_PER_PAGE); i++) {</span>
 			if (!set_phys_to_machine(pfn + i, INVALID_P2M_ENTRY)) {
 				pr_warn(&quot;set_phys_to_machine() failed, no memory added\n&quot;);
 				return BP_ECANCELED;
<span class="p_chunk">@@ -323,10 +324,72 @@</span> <span class="p_context"> static enum bp_state reserve_additional_memory(long credit)</span>
 }
 #endif /* CONFIG_XEN_BALLOON_MEMORY_HOTPLUG */
 
<span class="p_add">+static int set_frame(struct page *page, unsigned long pfn, void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long *index = data;</span>
<span class="p_add">+</span>
<span class="p_add">+	frame_list[(*index)++] = pfn;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="p_add">+static int pvmmu_update_mapping(struct page *page, unsigned long pfn,</span>
<span class="p_add">+				void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long *index = data;</span>
<span class="p_add">+	xen_pfn_t frame = frame_list[*index];</span>
<span class="p_add">+</span>
<span class="p_add">+	set_phys_to_machine(pfn, frame);</span>
<span class="p_add">+	/* Link back into the page tables if not highmem. */</span>
<span class="p_add">+	if (!PageHighMem(page)) {</span>
<span class="p_add">+		int ret;</span>
<span class="p_add">+		ret = HYPERVISOR_update_va_mapping(</span>
<span class="p_add">+				(unsigned long)__va(pfn &lt;&lt; XEN_PAGE_SHIFT),</span>
<span class="p_add">+				mfn_pte(frame, PAGE_KERNEL),</span>
<span class="p_add">+				0);</span>
<span class="p_add">+		BUG_ON(ret);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	(*index)++;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+static int balloon_remove_mapping(struct page *page, unsigned long pfn,</span>
<span class="p_add">+				  void *data)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long *index = data;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* We expect the frame_list to contain the same pfn */</span>
<span class="p_add">+	BUG_ON(pfn != frame_list[*index]);</span>
<span class="p_add">+</span>
<span class="p_add">+	frame_list[*index] = pfn_to_mfn(pfn);</span>
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="p_add">+	if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="p_add">+		if (!PageHighMem(page)) {</span>
<span class="p_add">+			int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+			ret = HYPERVISOR_update_va_mapping(</span>
<span class="p_add">+					(unsigned long)__va(pfn &lt;&lt; XEN_PAGE_SHIFT),</span>
<span class="p_add">+					__pte_ma(0), 0);</span>
<span class="p_add">+			BUG_ON(ret);</span>
<span class="p_add">+		}</span>
<span class="p_add">+		__set_phys_to_machine(pfn, INVALID_P2M_ENTRY);</span>
<span class="p_add">+	}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+	(*index)++;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static enum bp_state increase_reservation(unsigned long nr_pages)
 {
 	int rc;
<span class="p_del">-	unsigned long  pfn, i;</span>
<span class="p_add">+	unsigned long i, frame_idx;</span>
 	struct page   *page;
 	struct xen_memory_reservation reservation = {
 		.address_bits = 0,
<span class="p_chunk">@@ -343,44 +406,43 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 	}
 #endif
 
<span class="p_del">-	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="p_del">-		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="p_add">+	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="p_add">+		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
 
<span class="p_add">+	frame_idx = 0;</span>
 	page = list_first_entry_or_null(&amp;ballooned_pages, struct page, lru);
 	for (i = 0; i &lt; nr_pages; i++) {
 		if (!page) {
 			nr_pages = i;
 			break;
 		}
<span class="p_del">-		frame_list[i] = page_to_pfn(page);</span>
<span class="p_add">+</span>
<span class="p_add">+		rc = xen_apply_to_page(page, set_frame, &amp;frame_idx);</span>
<span class="p_add">+</span>
 		page = balloon_next_page(page);
 	}
 
 	set_xen_guest_handle(reservation.extent_start, frame_list);
<span class="p_del">-	reservation.nr_extents = nr_pages;</span>
<span class="p_add">+	reservation.nr_extents = nr_pages * XEN_PFN_PER_PAGE;</span>
 	rc = HYPERVISOR_memory_op(XENMEM_populate_physmap, &amp;reservation);
 	if (rc &lt;= 0)
 		return BP_EAGAIN;
 
<span class="p_del">-	for (i = 0; i &lt; rc; i++) {</span>
<span class="p_add">+	/* rc is equal to the number of Xen page populated */</span>
<span class="p_add">+	nr_pages = rc / XEN_PFN_PER_PAGE;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; nr_pages; i++) {</span>
 		page = balloon_retrieve(false);
 		BUG_ON(page == NULL);
 
<span class="p_del">-		pfn = page_to_pfn(page);</span>
<span class="p_del">-</span>
 #ifdef CONFIG_XEN_HAVE_PVMMU
<span class="p_add">+		frame_idx = 0;</span>
 		if (!xen_feature(XENFEAT_auto_translated_physmap)) {
<span class="p_del">-			set_phys_to_machine(pfn, frame_list[i]);</span>
<span class="p_del">-</span>
<span class="p_del">-			/* Link back into the page tables if not highmem. */</span>
<span class="p_del">-			if (!PageHighMem(page)) {</span>
<span class="p_del">-				int ret;</span>
<span class="p_del">-				ret = HYPERVISOR_update_va_mapping(</span>
<span class="p_del">-						(unsigned long)__va(pfn &lt;&lt; PAGE_SHIFT),</span>
<span class="p_del">-						mfn_pte(frame_list[i], PAGE_KERNEL),</span>
<span class="p_del">-						0);</span>
<span class="p_del">-				BUG_ON(ret);</span>
<span class="p_del">-			}</span>
<span class="p_add">+			int ret;</span>
<span class="p_add">+</span>
<span class="p_add">+			ret = xen_apply_to_page(page, pvmmu_update_mapping,</span>
<span class="p_add">+						&amp;frame_idx);</span>
<span class="p_add">+			BUG_ON(ret);</span>
 		}
 #endif
 
<span class="p_chunk">@@ -388,7 +450,7 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 		__free_reserved_page(page);
 	}
 
<span class="p_del">-	balloon_stats.current_pages += rc;</span>
<span class="p_add">+	balloon_stats.current_pages += nr_pages;</span>
 
 	return BP_DONE;
 }
<span class="p_chunk">@@ -396,7 +458,7 @@</span> <span class="p_context"> static enum bp_state increase_reservation(unsigned long nr_pages)</span>
 static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)
 {
 	enum bp_state state = BP_DONE;
<span class="p_del">-	unsigned long  pfn, i;</span>
<span class="p_add">+	unsigned long  pfn, i, frame_idx, nr_frames;</span>
 	struct page   *page;
 	int ret;
 	struct xen_memory_reservation reservation = {
<span class="p_chunk">@@ -414,9 +476,10 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 	}
 #endif
 
<span class="p_del">-	if (nr_pages &gt; ARRAY_SIZE(frame_list))</span>
<span class="p_del">-		nr_pages = ARRAY_SIZE(frame_list);</span>
<span class="p_add">+	if (nr_pages &gt; (ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE))</span>
<span class="p_add">+		nr_pages = ARRAY_SIZE(frame_list) / XEN_PFN_PER_PAGE;</span>
 
<span class="p_add">+	frame_idx = 0;</span>
 	for (i = 0; i &lt; nr_pages; i++) {
 		page = alloc_page(gfp);
 		if (page == NULL) {
<span class="p_chunk">@@ -426,9 +489,12 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 		}
 		scrub_page(page);
 
<span class="p_del">-		frame_list[i] = page_to_pfn(page);</span>
<span class="p_add">+		ret = xen_apply_to_page(page, set_frame, &amp;frame_idx);</span>
<span class="p_add">+		BUG_ON(ret);</span>
 	}
 
<span class="p_add">+	nr_frames = nr_pages * XEN_PFN_PER_PAGE;</span>
<span class="p_add">+</span>
 	/*
 	 * Ensure that ballooned highmem pages don&#39;t have kmaps.
 	 *
<span class="p_chunk">@@ -439,22 +505,19 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 	kmap_flush_unused();
 
 	/* Update direct mapping, invalidate P2M, and add to balloon. */
<span class="p_add">+	frame_idx = 0;</span>
 	for (i = 0; i &lt; nr_pages; i++) {
<span class="p_del">-		pfn = frame_list[i];</span>
<span class="p_del">-		frame_list[i] = pfn_to_mfn(pfn);</span>
<span class="p_del">-		page = pfn_to_page(pfn);</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The Xen PFN for a given Linux Page are contiguous in</span>
<span class="p_add">+		 * frame_list</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		pfn = frame_list[frame_idx];</span>
<span class="p_add">+		page = xen_pfn_to_page(pfn);</span>
 
<span class="p_del">-#ifdef CONFIG_XEN_HAVE_PVMMU</span>
<span class="p_del">-		if (!xen_feature(XENFEAT_auto_translated_physmap)) {</span>
<span class="p_del">-			if (!PageHighMem(page)) {</span>
<span class="p_del">-				ret = HYPERVISOR_update_va_mapping(</span>
<span class="p_del">-						(unsigned long)__va(pfn &lt;&lt; PAGE_SHIFT),</span>
<span class="p_del">-						__pte_ma(0), 0);</span>
<span class="p_del">-				BUG_ON(ret);</span>
<span class="p_del">-			}</span>
<span class="p_del">-			__set_phys_to_machine(pfn, INVALID_P2M_ENTRY);</span>
<span class="p_del">-		}</span>
<span class="p_del">-#endif</span>
<span class="p_add">+</span>
<span class="p_add">+		ret = xen_apply_to_page(page, balloon_remove_mapping,</span>
<span class="p_add">+					&amp;frame_idx);</span>
<span class="p_add">+		BUG_ON(ret);</span>
 
 		balloon_append(page);
 	}
<span class="p_chunk">@@ -462,9 +525,9 @@</span> <span class="p_context"> static enum bp_state decrease_reservation(unsigned long nr_pages, gfp_t gfp)</span>
 	flush_tlb_all();
 
 	set_xen_guest_handle(reservation.extent_start, frame_list);
<span class="p_del">-	reservation.nr_extents   = nr_pages;</span>
<span class="p_add">+	reservation.nr_extents   = nr_frames;</span>
 	ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation, &amp;reservation);
<span class="p_del">-	BUG_ON(ret != nr_pages);</span>
<span class="p_add">+	BUG_ON(ret != nr_frames);</span>
 
 	balloon_stats.current_pages -= nr_pages;
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



