
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[Part1,v6.1,14/17] x86: Add support for changing memory encryption attribute in early boot - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [Part1,v6.1,14/17] x86: Add support for changing memory encryption attribute in early boot</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Oct. 16, 2017, 7:56 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171016195608.122752-1-brijesh.singh@amd.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10009769/mbox/"
   >mbox</a>
|
   <a href="/patch/10009769/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10009769/">/patch/10009769/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	28809601D5 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:56:32 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 18E00286C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:56:32 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0D61D286C5; Mon, 16 Oct 2017 19:56:32 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 514BD286C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 16 Oct 2017 19:56:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1755978AbdJPT43 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 16 Oct 2017 15:56:29 -0400
Received: from mail-co1nam03on0087.outbound.protection.outlook.com
	([104.47.40.87]:7354
	&quot;EHLO NAM03-CO1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752620AbdJPT41 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 16 Oct 2017 15:56:27 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=1TKU78JXG8RSHOvUrGUgJ0zvNKhWEEZSYbmz7xY1Uoo=;
	b=rF0UOlZj63mHgqGFaaJkmA8nbefjSoWZnKmZZxQ8kt+Aa6Sr5Qjl68Ta62pgZMCMfKl3i/P630dReerLptSymZv8JflOLeF1JIh/m16a4NZajHxH8Uvne1KSemjfbB/IyB/RvGfl6NKUeBUVv4Ky518RR3z3X4oJVpsD8aP/H5g=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from ubuntu-010236106000.amd.com (165.204.78.1) by
	BY2PR12MB0146.namprd12.prod.outlook.com (10.162.82.19) with Microsoft
	SMTP Server (version=TLS1_2,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384_P256) id
	15.20.77.7; Mon, 16 Oct 2017 19:56:22 +0000
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: x86@kernel.org
Cc: bp@alien8.de, Brijesh Singh &lt;brijesh.singh@amd.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, Ingo Molnar &lt;mingo@redhat.com&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@suse.de&gt;,
	linux-kernel@vger.kernel.org, Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Subject: [Part1 PATCH v6.1 14/17] x86: Add support for changing memory
	encryption attribute in early boot
Date: Mon, 16 Oct 2017 14:56:08 -0500
Message-Id: &lt;20171016195608.122752-1-brijesh.singh@amd.com&gt;
X-Mailer: git-send-email 2.9.5
In-Reply-To: &lt;20171016153423.2980-15-brijesh.singh@amd.com&gt;
References: &lt;20171016153423.2980-15-brijesh.singh@amd.com&gt;
MIME-Version: 1.0
Content-Type: text/plain
X-Originating-IP: [165.204.78.1]
X-ClientProxiedBy: DM5PR21CA0053.namprd21.prod.outlook.com (10.175.112.143)
	To BY2PR12MB0146.namprd12.prod.outlook.com (10.162.82.19)
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: 0c949095-e75d-40dd-75d6-08d514cffa0d
X-MS-Office365-Filtering-HT: Tenant
X-Microsoft-Antispam: UriScan:; BCL:0; PCL:0;
	RULEID:(22001)(2017030254152)(48565401081)(2017052603199)(201703131423075)(201703031133081)(201702281549075);
	SRVR:BY2PR12MB0146; 
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0146;
	3:CSN2dzdDn8F9sVKahdiJyTT25ZY+jdMHavC7IIEgoIgJYikewphWflwp4We2RGQqk3vDD6YnEalqMvKnSlfPDhkzMf/fxPyR0deU46yQCWE6XPau/kMepS1x/mmdRpCCnpvLVCfOuewRhSvADJsPJbQrXRvWnx23/nCHRwhw3uvIbEx8fpGjlaD8aV3Xu33Jog5XBh0sv37Bz23cy8bMYMzPAV5ucJNgmGap0zTaqXDkZlzTWG8Yq0c+5MIHKGz7;
	25:WiN8gqid/imqzgcw3ak0iqlutckDMlPY8DEO95vt1PXPL9TUi0ruyCaZ9IwIecTIYE/h4a0RezE9rnTDNRDDMEGQeimuxOd9i14A3sMatKwZcumyK3lU0eb69Qy8R4L8LinzDPlUvkhU5bquzgZWrqTWk3sxGoq+oMrP8AtRFSPst8hZKBGUykp8ox9wtuoRSWU5tV3DSpaldUireaFlQiDNU42FtFJ6QZV9wUAmnKU08RyFsU5YP53gF6xrjRVfBVMWeQ3a4Do1qeNDCBX/ajD6hXo5JsJJ8cIjPAAYUG9vHDn17hn8h03nlYO3UdaipB/u68aWuaxss7uc8PMXYw==;
	31:VTCI2GoaZATL+LKf303DXVsq1NPAR3BwL4CHeNelfG9fqN7rO0LNRrKFt20t5UB4Aj2HP2IfWN+TR6bozEDipVO2rB77fRAMLNsSHfaS6p++AocQ4fAWF8fRUilT9bu93CjMBv5e7/gilZ2o0ix3r5xVFSJxIEvUwG3EW/GouR80YbYsIk2QDUKEv+2bqKsis9Tv3aTT+S/HkIt9FrgqL88xTeneA2CDlVrxvX2YreU=
X-MS-TrafficTypeDiagnostic: BY2PR12MB0146:
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0146;
	20:XNqFYNt/PDa8UVaYBLXTYGoxkNFhJ8lL1JqZVjo4zTYVhNVl+e5ei4uoFF8PdwlA57CEMSVxd017cGqY32eRlQqyu3K95aNFHw7+K4sSwEZHKC38y8pdMGhBRO+p0pTPAX7mvNNehkQ5xMhl1R458nECPpntCq7CsvF3eWXYJOUOq/j1n40PfY5+Kxye50BhddOO093VLD6jVVRBpbKVH7RCuxcRD1RBfqrWiIfd88zXXen3P8wmtEycS+rrHF6869Dj7CUcLwnXQaPaCfUpXHQCWQzXJ8dgoTwD5uaWfoMGOAs6OqSHM4D5Vs2QHrAFC2oLkFTk71003EtgfBdwsf/WhXK6C7+C/slP2zJlXZp+0ZxUEpF1WS5SkVxmQ6uIdBvHCge2E0OhLxWfQH8BCxcsd+dmPttBI/FFVMnwpLvnYrhddvwJaMAghdmT+BvKnf1VbHlmX6Vh1blMDP0s7woA8+E66dXAClJ7tdbFQ/NdK+klXznP91Im60Gtm80n;
	4:Mnk8Wq1gUH4gW55+KiQAMh/b5vsuQiqtWtcSsmf4JHdOI6DnrqPvl7rZqgRramvRbe03lhiXctsSGtmZcgOLKOl3AOwbetBfq9dF41SlQgWt93RvuykfaYn/OR1qr6UUwVyp5UjzthpjTirZs4U+J49iYETiiezRuLKMEIlB+zUqWCjsjcvmq5tsScTAh8kNnjbbVeBQvSeKseLnSq4VSUKENccaGzSEftneyZcaYi1jE8o0C1DzXz2vefR/o01J4vc0XjHqT74F+KTNhnv7t8FEB5syiQMhK2gcJJWRNmkITjjMroj/HTE1a4Odx0Ny
X-Exchange-Antispam-Report-Test: UriScan:(9452136761055)(767451399110);
X-Microsoft-Antispam-PRVS: &lt;BY2PR12MB0146136C7AE44FED3AA9882EE54F0@BY2PR12MB0146.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(100000700101)(100105000095)(100000701101)(100105300095)(100000702101)(100105100095)(6040450)(2401047)(5005006)(8121501046)(93006095)(93001095)(3002001)(10201501046)(100000703101)(100105400095)(6055026)(6041248)(20161123560025)(201703131423075)(201702281528075)(201703061421075)(201703061406153)(20161123564025)(20161123558100)(20161123555025)(20161123562025)(6072148)(201708071742011)(100000704101)(100105200095)(100000705101)(100105500095);
	SRVR:BY2PR12MB0146; BCL:0; PCL:0;
	RULEID:(100000800101)(100110000095)(100000801101)(100110300095)(100000802101)(100110100095)(100000803101)(100110400095)(100000804101)(100110200095)(100000805101)(100110500095);
	SRVR:BY2PR12MB0146; 
X-Forefront-PRVS: 0462918D61
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(6009001)(39860400002)(376002)(346002)(199003)(189002)(2351001)(6486002)(5660300001)(101416001)(6666003)(16526018)(1076002)(3846002)(6116002)(25786009)(106356001)(2361001)(2906002)(33646002)(53416004)(4326008)(7736002)(105586002)(50226002)(189998001)(305945005)(68736007)(316002)(8936002)(16586007)(36756003)(86362001)(66066001)(81166006)(8676002)(48376002)(81156014)(53936002)(478600001)(6916009)(2950100002)(76176999)(50986999)(47776003)(5003940100001)(54906003)(97736004)(50466002);
	DIR:OUT; SFP:1101; SCL:1; SRVR:BY2PR12MB0146;
	H:ubuntu-010236106000.amd.com; FPR:; SPF:None;
	PTR:InfoNoRecords; A:1; MX:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?us-ascii?Q?1; BY2PR12MB0146;
	23:z18NTzCuTsktPs5ebyaSWuW0KMlElsI0vDh3uEsh/?=
	=?us-ascii?Q?IhQW9YBep+sAc9TWBOp5sPTqMerPXPsK2qLT59SPy6uJYV9KRjUZ5WR0ytM4?=
	=?us-ascii?Q?tId141NKhxJMxPffISsgPPqjvSDdi8g6p6su8colHlu2HEiRxtVMfgBS6bfs?=
	=?us-ascii?Q?bS86eBAjCF+wWwqM1DMHGD0wz0N0he/bReXPLI8EZvVy6uo3ARmBS9yq7Uen?=
	=?us-ascii?Q?KGiogbzWRo+Ivptc3NoMwhbCDP34801FS/upd8wv9leWcGj3iBXbUez/Wcre?=
	=?us-ascii?Q?o5hSwrT9rL2oxSf9o4/MKxzEA29PKaKSXfnvUZZnITta5tDdSyoXTg1xdbAQ?=
	=?us-ascii?Q?D754Ls4ORVMds5KcyBaZ6E0YlglD1myKs7s//T1WdFUmXxOfAquJ9nv6cfjq?=
	=?us-ascii?Q?FVr9PKQuiCRKGCuZVdACvXyPbUs9iLOmZdDnESoKA3MmKpASuZkUIfZaHyIA?=
	=?us-ascii?Q?ojklKouzljGBL37QSS+ChVazYrA3Pq9IKUZ5TAuEQgCPIGKrFnDuiBxvTKcx?=
	=?us-ascii?Q?WAmHFu+LOcw0TiQnAwM2eRxmQyaGam3t9oGx7VRjF9mWlEABwZ5csQm2eiVV?=
	=?us-ascii?Q?/L4b9GpyXFGFx9q/iSib433nGAQmfQ/wSyqcAwAT9SxsOU4G3MjQmA3WQfmJ?=
	=?us-ascii?Q?4qREU1tzRGDdNls/sob3BwNTocPtczuXXHkMp5lVOeKE0C95MgdIE6JMTMeM?=
	=?us-ascii?Q?Pgwi+YdR4nlh0fPQTn6aXgDJdcDrvJtrXz+6PBR6FZt3V+K2DY5w64xHRsDB?=
	=?us-ascii?Q?sPOiLmDFAmMfL0YftNNLI9izL1SkBkvJLZdUSTFIgq0chBYLcexaBV6b14JD?=
	=?us-ascii?Q?/nh5bR6FSCHRP/rGTjoqui7qPXCASQRcjYBd9ND8Juvo+3B/cSFB+uIg1XoP?=
	=?us-ascii?Q?EfALbxgx2XJ8lH9jiUdZo3o8RBqz04vl4z2kM8hPWpWGzrGqCqopfpC4CqyV?=
	=?us-ascii?Q?YEaJTTYLvlVjwqK5k04dNydeoktezwZLvtRm4cXpoh4jRnE8d/w2lFSQVIL+?=
	=?us-ascii?Q?dG0ws7PCV4jCNWCCwBpj0dNZ5+Ex7cDSB4jUy7IIpdMB3WhflWPqCN1YTeGh?=
	=?us-ascii?Q?EMbL8owKxEV8uUQFFO1x/OulzJjpVMqzrJWDXwoJnyKFt+rDeYMdtVTtK4N8?=
	=?us-ascii?Q?PJc/PPzkz/wpp84cZW44ybNsL/AT6R+?=
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0146;
	6:1GdRH7gYH/Vlll75rO3MEOUzJ65JnSDpLmUGdEJtCIwdXnEgNmrFE9m0uD1pbpzSAQa245WnSrC8IaBae6IV0wtsfEJYSO4NrDqNCFaY5eXLO/uXzr0qI6VRC3iXTDOwizFeCwwaUJhXQfabZFvUEj8fJwvEOLIVTGE7CHKQi7nZYUBUMAV+YyhT8Tddl92REvo95rHVFvMYYUel+oCOry2FqzV+BodPH93v2vWG5NeTO5oOtOdCYtUSCwfu4rme3XEdost1vMnLkP5tRTHNvY5hvpmmmVhCUVt3YKpLme9c6Qgku1TXBRQxW7lmVJOqt6RldWIcAHoLFZnDCUUOIA==;
	5:0RJq3eHaWPaoZup5JgxfF19RI3qZ1JYJQfO0qfmPGARE51KYxjmg5zqDQn7Gac75OstJV8SmWNFalUup/HobTABrts8Tub/VV2z9z0fVlEahiTUf/LTOTjFGb+S51f0S45vCR7v9FsPQvhgb7TxvTQ==;
	24:fbnsVldQ0z7vHXFtqoqvD9g+26mMKzL4kQ9jDYGB7VfsN2txvyMCJOBQgv9vBDMwXarEvwT/jIcnOKtNSMsws21ldJyciWxUc0rmJy8c/5w=;
	7:XiPwV0XEpt5IdsFUDKGodX13fQ5j6q2Jc77cG1XT6PYorvAqLt+fZCBBCXXlmXfwh2IgtvLa/7i7NcbIqWNkRoDeKUD7e6YleOaP1pfaLFtoMHAcCxonzqBtT5zvKWKUArgxUZEZFWWQgJ4Yu+vqtc0E0jGC3Uy0D5ALDiivhpPfV0qPRd1RCQSL65YN5cxqoRSz/UnXu95+n8Hg2/MvDvqp5BExUTIFEJca+Ga823A=
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; BY2PR12MB0146;
	20:alQREH3y7CRZ0mRgQxG0DCJTwrjZ0KjM+OowJjSmAmYB1mNhU06Oz6CWr8W9yNZjHBujN4zopJHKtQodow++5uTfic7Akkpuz7CizjSlvkvXmRLmqhKnYnQGAea0avYlHOqTSIFJfcQIISxaDzg/jCJ6qkjekXddG4pl6Xcn3OEHPVFmqS8IfE9Oj9MmMmMkJXo1iLsbWmVCOEJNe2yF4KeWnY0+CCJlhO4FrmY5R6FAUf76vW5mHTk2+BmZx0yh
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 16 Oct 2017 19:56:22.1265
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-Transport-CrossTenantHeadersStamped: BY2PR12MB0146
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Oct. 16, 2017, 7:56 p.m.</div>
<pre class="content">
Some KVM-specific custom MSRs share the guest physical address with the
hypervisor in early boot. When SEV is active, the shared physical address
must be mapped with memory encryption attribute cleared so that both
hypervisor and guest can access the data.

Add APIs to change the memory encryption attribute in early boot code.

Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Ingo Molnar &lt;mingo@redhat.com&gt;
Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Borislav Petkov &lt;bp@suse.de&gt;
Cc: x86@kernel.org
Cc: linux-kernel@vger.kernel.org
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Improvements-by: Borislav Petkov &lt;bp@suse.de&gt;
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---

Changes since v6:
 * applied the improvements from Boris

 arch/x86/include/asm/mem_encrypt.h |   8 +++
 arch/x86/mm/mem_encrypt.c          | 131 +++++++++++++++++++++++++++++++++++++
 2 files changed, 139 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=7500">Borislav Petkov</a> - Oct. 16, 2017, 9:25 p.m.</div>
<pre class="content">
On Mon, Oct 16, 2017 at 02:56:08PM -0500, Brijesh Singh wrote:
<span class="quote">&gt; Some KVM-specific custom MSRs share the guest physical address with the</span>
<span class="quote">&gt; hypervisor in early boot. When SEV is active, the shared physical address</span>
<span class="quote">&gt; must be mapped with memory encryption attribute cleared so that both</span>
<span class="quote">&gt; hypervisor and guest can access the data.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Add APIs to change the memory encryption attribute in early boot code.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="quote">&gt; Cc: Ingo Molnar &lt;mingo@redhat.com&gt;</span>
<span class="quote">&gt; Cc: &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;</span>
<span class="quote">&gt; Cc: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Cc: x86@kernel.org</span>
<span class="quote">&gt; Cc: linux-kernel@vger.kernel.org</span>
<span class="quote">&gt; Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="quote">&gt; Improvements-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="quote">&gt; Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Changes since v6:</span>
<span class="quote">&gt;  * applied the improvements from Boris</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;  arch/x86/include/asm/mem_encrypt.h |   8 +++</span>
<span class="quote">&gt;  arch/x86/mm/mem_encrypt.c          | 131 +++++++++++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 139 insertions(+)</span>
<span class="reviewed-by">
Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 2b024741bce9..3ba68c92be1b 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -42,6 +42,9 @@</span> <span class="p_context"> void __init sme_early_init(void);</span>
 void __init sme_encrypt_kernel(void);
 void __init sme_enable(struct boot_params *bp);
 
<span class="p_add">+int __init early_set_memory_decrypted(resource_size_t paddr, unsigned long size);</span>
<span class="p_add">+int __init early_set_memory_encrypted(resource_size_t paddr, unsigned long size);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void);
 
<span class="p_chunk">@@ -70,6 +73,11 @@</span> <span class="p_context"> static inline void __init sme_enable(struct boot_params *bp) { }</span>
 static inline bool sme_active(void) { return false; }
 static inline bool sev_active(void) { return false; }
 
<span class="p_add">+static inline int __init</span>
<span class="p_add">+early_set_memory_decrypted(resource_size_t paddr, unsigned long size) { return 0; }</span>
<span class="p_add">+static inline int __init</span>
<span class="p_add">+early_set_memory_encrypted(resource_size_t paddr, unsigned long size) { return 0; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 45110b60be21..476c80c67030 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -30,6 +30,8 @@</span> <span class="p_context"></span>
 #include &lt;asm/msr.h&gt;
 #include &lt;asm/cmdline.h&gt;
 
<span class="p_add">+#include &quot;mm_internal.h&quot;</span>
<span class="p_add">+</span>
 static char sme_cmdline_arg[] __initdata = &quot;mem_encrypt&quot;;
 static char sme_cmdline_on[]  __initdata = &quot;on&quot;;
 static char sme_cmdline_off[] __initdata = &quot;off&quot;;
<span class="p_chunk">@@ -260,6 +262,135 @@</span> <span class="p_context"> static void sev_free(struct device *dev, size_t size, void *vaddr,</span>
 	swiotlb_free_coherent(dev, size, vaddr, dma_handle);
 }
 
<span class="p_add">+static void __init __set_clr_pte_enc(pte_t *kpte, int level, bool enc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pgprot_t old_prot, new_prot;</span>
<span class="p_add">+	unsigned long pfn, pa, size;</span>
<span class="p_add">+	pte_t new_pte;</span>
<span class="p_add">+</span>
<span class="p_add">+	switch (level) {</span>
<span class="p_add">+	case PG_LEVEL_4K:</span>
<span class="p_add">+		pfn = pte_pfn(*kpte);</span>
<span class="p_add">+		old_prot = pte_pgprot(*kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_2M:</span>
<span class="p_add">+		pfn = pmd_pfn(*(pmd_t *)kpte);</span>
<span class="p_add">+		old_prot = pmd_pgprot(*(pmd_t *)kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	case PG_LEVEL_1G:</span>
<span class="p_add">+		pfn = pud_pfn(*(pud_t *)kpte);</span>
<span class="p_add">+		old_prot = pud_pgprot(*(pud_t *)kpte);</span>
<span class="p_add">+		break;</span>
<span class="p_add">+	default:</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	new_prot = old_prot;</span>
<span class="p_add">+	if (enc)</span>
<span class="p_add">+		pgprot_val(new_prot) |= _PAGE_ENC;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		pgprot_val(new_prot) &amp;= ~_PAGE_ENC;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* If prot is same then do nothing. */</span>
<span class="p_add">+	if (pgprot_val(old_prot) == pgprot_val(new_prot))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	pa = pfn &lt;&lt; page_level_shift(level);</span>
<span class="p_add">+	size = page_level_size(level);</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We are going to perform in-place en-/decryption and change the</span>
<span class="p_add">+	 * physical page attribute from C=1 to C=0 or vice versa. Flush the</span>
<span class="p_add">+	 * caches to ensure that data gets accessed with the correct C-bit.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	clflush_cache_range(__va(pa), size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Encrypt/decrypt the contents in-place */</span>
<span class="p_add">+	if (enc)</span>
<span class="p_add">+		sme_early_encrypt(pa, size);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		sme_early_decrypt(pa, size);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Change the page encryption mask. */</span>
<span class="p_add">+	new_pte = pfn_pte(pfn, new_prot);</span>
<span class="p_add">+	set_pte_atomic(kpte, new_pte);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static int __init early_set_memory_enc_dec(resource_size_t paddr,</span>
<span class="p_add">+					   unsigned long size, bool enc)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long vaddr, vaddr_end, vaddr_next;</span>
<span class="p_add">+	unsigned long psize, pmask;</span>
<span class="p_add">+	int split_page_size_mask;</span>
<span class="p_add">+	int level, ret;</span>
<span class="p_add">+	pte_t *kpte;</span>
<span class="p_add">+</span>
<span class="p_add">+	vaddr = (unsigned long)__va(paddr);</span>
<span class="p_add">+	vaddr_next = vaddr;</span>
<span class="p_add">+	vaddr_end = vaddr + size;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {</span>
<span class="p_add">+		kpte = lookup_address(vaddr, &amp;level);</span>
<span class="p_add">+		if (!kpte || pte_none(*kpte)) {</span>
<span class="p_add">+			ret = 1;</span>
<span class="p_add">+			goto out;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		if (level == PG_LEVEL_4K) {</span>
<span class="p_add">+			__set_clr_pte_enc(kpte, level, enc);</span>
<span class="p_add">+			vaddr_next = (vaddr &amp; PAGE_MASK) + PAGE_SIZE;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		psize = page_level_size(level);</span>
<span class="p_add">+		pmask = page_level_mask(level);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * Check whether we can change the large page in one go.</span>
<span class="p_add">+		 * We request a split when the address is not aligned and</span>
<span class="p_add">+		 * the number of pages to set/clear encryption bit is smaller</span>
<span class="p_add">+		 * than the number of pages in the large page.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (vaddr == (vaddr &amp; pmask) &amp;&amp;</span>
<span class="p_add">+		    ((vaddr_end - vaddr) &gt;= psize)) {</span>
<span class="p_add">+			__set_clr_pte_enc(kpte, level, enc);</span>
<span class="p_add">+			vaddr_next = (vaddr &amp; pmask) + psize;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * The virtual address is part of a larger page, create the next</span>
<span class="p_add">+		 * level page table mapping (4K or 2M). If it is part of a 2M</span>
<span class="p_add">+		 * page then we request a split of the large page into 4K</span>
<span class="p_add">+		 * chunks. A 1GB large page is split into 2M pages, resp.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (level == PG_LEVEL_2M)</span>
<span class="p_add">+			split_page_size_mask = 0;</span>
<span class="p_add">+		else</span>
<span class="p_add">+			split_page_size_mask = 1 &lt;&lt; PG_LEVEL_2M;</span>
<span class="p_add">+</span>
<span class="p_add">+		kernel_physical_mapping_init(__pa(vaddr &amp; pmask),</span>
<span class="p_add">+					     __pa((vaddr_end &amp; pmask) + psize),</span>
<span class="p_add">+					     split_page_size_mask);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	__flush_tlb_all();</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_decrypted(resource_size_t paddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return early_set_memory_enc_dec(paddr, size, false);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int __init early_set_memory_encrypted(resource_size_t paddr, unsigned long size)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return early_set_memory_enc_dec(paddr, size, true);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /*
  * SME and SEV are very similar but they are not the same, so there are
  * times that the kernel will need to distinguish between SME and SEV. The

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



