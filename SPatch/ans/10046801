
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/asm] x86/mm: Add Secure Encrypted Virtualization (SEV) support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/asm] x86/mm: Add Secure Encrypted Virtualization (SEV) support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 7, 2017, 2:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-d8aa7eea78a1401cce39b3bb61ead0150044a3df@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10046801/mbox/"
   >mbox</a>
|
   <a href="/patch/10046801/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10046801/">/patch/10046801/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	239E660360 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:45:38 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 13DE129DF1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:45:38 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 0655D29E83; Tue,  7 Nov 2017 14:45:38 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3005D29DF7
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  7 Nov 2017 14:45:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934275AbdKGOpd (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 7 Nov 2017 09:45:33 -0500
Received: from terminus.zytor.com ([65.50.211.136]:59875 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S933972AbdKGOpb (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 7 Nov 2017 09:45:31 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id vA7EhG8A025135;
	Tue, 7 Nov 2017 06:43:16 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id vA7EhFYw025128;
	Tue, 7 Nov 2017 06:43:15 -0800
Date: Tue, 7 Nov 2017 06:43:15 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Tom Lendacky &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-d8aa7eea78a1401cce39b3bb61ead0150044a3df@git.kernel.org&gt;
Cc: tglx@linutronix.de, hpa@zytor.com, luto@kernel.org,
	brijesh.singh@amd.com, bp@alien8.de, linux-kernel@vger.kernel.org,
	mingo@kernel.org, thomas.lendacky@amd.com, bp@suse.de
Reply-To: mingo@kernel.org, thomas.lendacky@amd.com, bp@suse.de,
	luto@kernel.org, brijesh.singh@amd.com, tglx@linutronix.de,
	hpa@zytor.com, bp@alien8.de, linux-kernel@vger.kernel.org
In-Reply-To: &lt;20171020143059.3291-3-brijesh.singh@amd.com&gt;
References: &lt;20171020143059.3291-3-brijesh.singh@amd.com&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/asm] x86/mm: Add Secure Encrypted Virtualization (SEV)
	support
Git-Commit-ID: d8aa7eea78a1401cce39b3bb61ead0150044a3df
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Nov. 7, 2017, 2:43 p.m.</div>
<pre class="content">
Commit-ID:  d8aa7eea78a1401cce39b3bb61ead0150044a3df
Gitweb:     https://git.kernel.org/tip/d8aa7eea78a1401cce39b3bb61ead0150044a3df
Author:     Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
AuthorDate: Fri, 20 Oct 2017 09:30:44 -0500
Committer:  Thomas Gleixner &lt;tglx@linutronix.de&gt;
CommitDate: Tue, 7 Nov 2017 15:35:54 +0100

x86/mm: Add Secure Encrypted Virtualization (SEV) support

Provide support for Secure Encrypted Virtualization (SEV). This initial
support defines a flag that is used by the kernel to determine if it is
running with SEV active.
<span class="signed-off-by">
Signed-off-by: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>
<span class="reviewed-by">Reviewed-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
<span class="tested-by">Tested-by: Borislav Petkov &lt;bp@suse.de&gt;</span>
Cc: kvm@vger.kernel.org
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Andy Lutomirski &lt;luto@kernel.org&gt;
Link: https://lkml.kernel.org/r/20171020143059.3291-3-brijesh.singh@amd.com

---
 arch/x86/include/asm/mem_encrypt.h |  6 ++++++
 arch/x86/mm/mem_encrypt.c          | 26 ++++++++++++++++++++++++++
 include/linux/mem_encrypt.h        |  7 +++++--
 3 files changed, 37 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/mem_encrypt.h b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">index 6a77c63..2b02474 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mem_encrypt.h</span>
<span class="p_chunk">@@ -47,6 +47,9 @@</span> <span class="p_context"> void __init mem_encrypt_init(void);</span>
 
 void swiotlb_set_mem_attributes(void *vaddr, unsigned long size);
 
<span class="p_add">+bool sme_active(void);</span>
<span class="p_add">+bool sev_active(void);</span>
<span class="p_add">+</span>
 #else	/* !CONFIG_AMD_MEM_ENCRYPT */
 
 #define sme_me_mask	0ULL
<span class="p_chunk">@@ -64,6 +67,9 @@</span> <span class="p_context"> static inline void __init sme_early_init(void) { }</span>
 static inline void __init sme_encrypt_kernel(void) { }
 static inline void __init sme_enable(struct boot_params *bp) { }
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_AMD_MEM_ENCRYPT */
 
 /*
<span class="p_header">diff --git a/arch/x86/mm/mem_encrypt.c b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">index 16c5f37..add836d 100644</span>
<span class="p_header">--- a/arch/x86/mm/mem_encrypt.c</span>
<span class="p_header">+++ b/arch/x86/mm/mem_encrypt.c</span>
<span class="p_chunk">@@ -42,6 +42,8 @@</span> <span class="p_context"> static char sme_cmdline_off[] __initdata = &quot;off&quot;;</span>
 u64 sme_me_mask __section(.data) = 0;
 EXPORT_SYMBOL_GPL(sme_me_mask);
 
<span class="p_add">+static bool sev_enabled __section(.data);</span>
<span class="p_add">+</span>
 /* Buffer used for early in-place encryption by BSP, no locking needed */
 static char sme_early_buffer[PAGE_SIZE] __aligned(PAGE_SIZE);
 
<span class="p_chunk">@@ -192,6 +194,30 @@</span> <span class="p_context"> void __init sme_early_init(void)</span>
 		protection_map[i] = pgprot_encrypted(protection_map[i]);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * SME and SEV are very similar but they are not the same, so there are</span>
<span class="p_add">+ * times that the kernel will need to distinguish between SME and SEV. The</span>
<span class="p_add">+ * sme_active() and sev_active() functions are used for this.  When a</span>
<span class="p_add">+ * distinction isn&#39;t needed, the mem_encrypt_active() function can be used.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * The trampoline code is a good example for this requirement.  Before</span>
<span class="p_add">+ * paging is activated, SME will access all memory as decrypted, but SEV</span>
<span class="p_add">+ * will access all memory as encrypted.  So, when APs are being brought</span>
<span class="p_add">+ * up under SME the trampoline area cannot be encrypted, whereas under SEV</span>
<span class="p_add">+ * the trampoline area must be encrypted.</span>
<span class="p_add">+ */</span>
<span class="p_add">+bool sme_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; !sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sme_active);</span>
<span class="p_add">+</span>
<span class="p_add">+bool sev_active(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return sme_me_mask &amp;&amp; sev_enabled;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(sev_active);</span>
<span class="p_add">+</span>
 /* Architecture __weak replacement functions */
 void __init mem_encrypt_init(void)
 {
<span class="p_header">diff --git a/include/linux/mem_encrypt.h b/include/linux/mem_encrypt.h</span>
<span class="p_header">index 265a9cd..b310a9c 100644</span>
<span class="p_header">--- a/include/linux/mem_encrypt.h</span>
<span class="p_header">+++ b/include/linux/mem_encrypt.h</span>
<span class="p_chunk">@@ -23,11 +23,14 @@</span> <span class="p_context"></span>
 
 #define sme_me_mask	0ULL
 
<span class="p_add">+static inline bool sme_active(void) { return false; }</span>
<span class="p_add">+static inline bool sev_active(void) { return false; }</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_ARCH_HAS_MEM_ENCRYPT */
 
<span class="p_del">-static inline bool sme_active(void)</span>
<span class="p_add">+static inline bool mem_encrypt_active(void)</span>
 {
<span class="p_del">-	return !!sme_me_mask;</span>
<span class="p_add">+	return sme_me_mask;</span>
 }
 
 static inline u64 sme_get_me_mask(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



