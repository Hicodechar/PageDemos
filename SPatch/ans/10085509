
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/2] TESTING! KVM: x86: add invalidate_range mmu notifier - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/2] TESTING! KVM: x86: add invalidate_range mmu notifier</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=69351">Radim Kr?má?</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 30, 2017, 6:05 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171130180546.4331-2-rkrcmar@redhat.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10085509/mbox/"
   >mbox</a>
|
   <a href="/patch/10085509/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10085509/">/patch/10085509/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	9505E6035E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8BEFA29957
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 8097D2A21D; Thu, 30 Nov 2017 18:06:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-5.9 required=2.0 tests=BAYES_00,HK_RANDOM_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 33C8729957
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 30 Nov 2017 18:06:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753900AbdK3SGM (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 30 Nov 2017 13:06:12 -0500
Received: from mx1.redhat.com ([209.132.183.28]:51542 &quot;EHLO mx1.redhat.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1753824AbdK3SGJ (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 30 Nov 2017 13:06:09 -0500
Received: from smtp.corp.redhat.com
	(int-mx04.intmail.prod.int.phx2.redhat.com [10.5.11.14])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mx1.redhat.com (Postfix) with ESMTPS id 7619B6A7E2;
	Thu, 30 Nov 2017 18:06:09 +0000 (UTC)
Received: from flask (ovpn-204-21.brq.redhat.com [10.40.204.21])
	by smtp.corp.redhat.com (Postfix) with SMTP id 3678F5D960;
	Thu, 30 Nov 2017 18:06:06 +0000 (UTC)
Received: by flask (sSMTP sendmail emulation);
	Thu, 30 Nov 2017 19:06:05 +0100
From: =?UTF-8?q?Radim=20Kr=C4=8Dm=C3=A1=C5=99?= &lt;rkrcmar@redhat.com&gt;
To: =?UTF-8?q?Fabian=20Gr=C3=BCnbichler?= &lt;f.gruenbichler@proxmox.com&gt;
Cc: linux-kernel@vger.kernel.org, linux-mm@kvack.org,
	kvm@vger.kernel.org, Paolo Bonzini &lt;pbonzini@redhat.com&gt;,
	Andrea Arcangeli &lt;aarcange@redhat.com&gt;,
	=?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= &lt;jglisse@redhat.com&gt;
Subject: [PATCH 2/2] TESTING! KVM: x86: add invalidate_range mmu notifier
Date: Thu, 30 Nov 2017 19:05:46 +0100
Message-Id: &lt;20171130180546.4331-2-rkrcmar@redhat.com&gt;
In-Reply-To: &lt;20171130180546.4331-1-rkrcmar@redhat.com&gt;
References: &lt;20171130161933.GB1606@flask&gt;
	&lt;20171130180546.4331-1-rkrcmar@redhat.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.14
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
	(mx1.redhat.com [10.5.110.27]);
	Thu, 30 Nov 2017 18:06:09 +0000 (UTC)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=69351">Radim Kr?má?</a> - Nov. 30, 2017, 6:05 p.m.</div>
<pre class="content">
Does roughly what kvm_mmu_notifier_invalidate_page did before.

I am not certain why this would be needed.  It might mean that we have
another bug with start/end or just that I missed something.

Please try just [1/2] first and apply this one only if [1/2] still bugs,
thanks!
---
 virt/kvm/kvm_main.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2536">Paolo Bonzini</a> - Dec. 1, 2017, 3:15 p.m.</div>
<pre class="content">
On 30/11/2017 19:05, Radim Krčmář wrote:
<span class="quote">&gt; Does roughly what kvm_mmu_notifier_invalidate_page did before.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I am not certain why this would be needed.  It might mean that we have</span>
<span class="quote">&gt; another bug with start/end or just that I missed something.</span>

I don&#39;t think this is needed, because we don&#39;t have shared page tables.
My understanding is that without shared page tables, you can assume that
all page modifications go through invalidate_range_start/end.  With
shared page tables, there are additional TLB flushes to take care of,
which require invalidate_range.

Thanks,

Paolo
<span class="quote">
&gt; Please try just [1/2] first and apply this one only if [1/2] still bugs,</span>
<span class="quote">&gt; thanks!</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  virt/kvm/kvm_main.c | 24 ++++++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 24 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; index b7f4689e373f..0825ea624f16 100644</span>
<span class="quote">&gt; --- a/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; +++ b/virt/kvm/kvm_main.c</span>
<span class="quote">&gt; @@ -342,6 +342,29 @@ static void kvm_mmu_notifier_change_pte(struct mmu_notifier *mn,</span>
<span class="quote">&gt;  	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +static void kvm_mmu_notifier_invalidate_range(struct mmu_notifier *mn,</span>
<span class="quote">&gt; +						    struct mm_struct *mm,</span>
<span class="quote">&gt; +						    unsigned long start,</span>
<span class="quote">&gt; +						    unsigned long end)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct kvm *kvm = mmu_notifier_to_kvm(mn);</span>
<span class="quote">&gt; +	int need_tlb_flush = 0, idx;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	idx = srcu_read_lock(&amp;kvm-&gt;srcu);</span>
<span class="quote">&gt; +	spin_lock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt; +	kvm-&gt;mmu_notifier_seq++;</span>
<span class="quote">&gt; +	need_tlb_flush = kvm_unmap_hva_range(kvm, start, end);</span>
<span class="quote">&gt; +	need_tlb_flush |= kvm-&gt;tlbs_dirty;</span>
<span class="quote">&gt; +	if (need_tlb_flush)</span>
<span class="quote">&gt; +		kvm_flush_remote_tlbs(kvm);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,</span>
<span class="quote">&gt;  						    struct mm_struct *mm,</span>
<span class="quote">&gt;  						    unsigned long start,</span>
<span class="quote">&gt; @@ -476,6 +499,7 @@ static void kvm_mmu_notifier_release(struct mmu_notifier *mn,</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static const struct mmu_notifier_ops kvm_mmu_notifier_ops = {</span>
<span class="quote">&gt; +	.invalidate_range	= kvm_mmu_notifier_invalidate_range,</span>
<span class="quote">&gt;  	.invalidate_range_start	= kvm_mmu_notifier_invalidate_range_start,</span>
<span class="quote">&gt;  	.invalidate_range_end	= kvm_mmu_notifier_invalidate_range_end,</span>
<span class="quote">&gt;  	.clear_flush_young	= kvm_mmu_notifier_clear_flush_young,</span>
<span class="quote">&gt;</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=965">Andrea Arcangeli</a> - Dec. 3, 2017, 5:24 p.m.</div>
<pre class="content">
On Fri, Dec 01, 2017 at 04:15:37PM +0100, Paolo Bonzini wrote:
<span class="quote">&gt; On 30/11/2017 19:05, Radim Krčmář wrote:</span>
<span class="quote">&gt; &gt; Does roughly what kvm_mmu_notifier_invalidate_page did before.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I am not certain why this would be needed.  It might mean that we have</span>
<span class="quote">&gt; &gt; another bug with start/end or just that I missed something.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t think this is needed, because we don&#39;t have shared page tables.</span>
<span class="quote">&gt; My understanding is that without shared page tables, you can assume that</span>
<span class="quote">&gt; all page modifications go through invalidate_range_start/end.  With</span>
<span class="quote">&gt; shared page tables, there are additional TLB flushes to take care of,</span>
<span class="quote">&gt; which require invalidate_range.</span>

Agreed, invalidate_range only is ever needed if you the secondary MMU
(i.e. KVM) shares the same pagetables of the primary MMU in the
host. Only in such case we need a special secondary MMU invalidate in
the tlb gather before the page is freed because there&#39;s no way to
block the secondary MMU from walking the host pagetables in
invalidate_range_start.

In KVM case the secondary MMU always go through the shadow pagetables,
so all shadow pagetable invalidates can happen in
invalidate_range_start and patch 2/2 is not needed here.

Note that the host kernel could have always decided to call
invalidate_range_start/end and never to call invalidate_page even
before invalidate_page was removed.

So the problem in practice could only be noticed after the removal of
invalidate_page of course, but in more theoretical terms 1/2 is
actually fixing a longstanding bug. The removal of invalidate_page
made the lack of kvm_arch_mmu_notifier_invalidate_page call in
invalidate_range_start more apparent.

Thanks,
Andrea
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c</span>
<span class="p_header">index b7f4689e373f..0825ea624f16 100644</span>
<span class="p_header">--- a/virt/kvm/kvm_main.c</span>
<span class="p_header">+++ b/virt/kvm/kvm_main.c</span>
<span class="p_chunk">@@ -342,6 +342,29 @@</span> <span class="p_context"> static void kvm_mmu_notifier_change_pte(struct mmu_notifier *mn,</span>
 	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);
 }
 
<span class="p_add">+static void kvm_mmu_notifier_invalidate_range(struct mmu_notifier *mn,</span>
<span class="p_add">+						    struct mm_struct *mm,</span>
<span class="p_add">+						    unsigned long start,</span>
<span class="p_add">+						    unsigned long end)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct kvm *kvm = mmu_notifier_to_kvm(mn);</span>
<span class="p_add">+	int need_tlb_flush = 0, idx;</span>
<span class="p_add">+</span>
<span class="p_add">+	idx = srcu_read_lock(&amp;kvm-&gt;srcu);</span>
<span class="p_add">+	spin_lock(&amp;kvm-&gt;mmu_lock);</span>
<span class="p_add">+	kvm-&gt;mmu_notifier_seq++;</span>
<span class="p_add">+	need_tlb_flush = kvm_unmap_hva_range(kvm, start, end);</span>
<span class="p_add">+	need_tlb_flush |= kvm-&gt;tlbs_dirty;</span>
<span class="p_add">+	if (need_tlb_flush)</span>
<span class="p_add">+		kvm_flush_remote_tlbs(kvm);</span>
<span class="p_add">+</span>
<span class="p_add">+	spin_unlock(&amp;kvm-&gt;mmu_lock);</span>
<span class="p_add">+</span>
<span class="p_add">+	kvm_arch_mmu_notifier_invalidate_range(kvm, start, end);</span>
<span class="p_add">+</span>
<span class="p_add">+	srcu_read_unlock(&amp;kvm-&gt;srcu, idx);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void kvm_mmu_notifier_invalidate_range_start(struct mmu_notifier *mn,
 						    struct mm_struct *mm,
 						    unsigned long start,
<span class="p_chunk">@@ -476,6 +499,7 @@</span> <span class="p_context"> static void kvm_mmu_notifier_release(struct mmu_notifier *mn,</span>
 }
 
 static const struct mmu_notifier_ops kvm_mmu_notifier_ops = {
<span class="p_add">+	.invalidate_range	= kvm_mmu_notifier_invalidate_range,</span>
 	.invalidate_range_start	= kvm_mmu_notifier_invalidate_range_start,
 	.invalidate_range_end	= kvm_mmu_notifier_invalidate_range_end,
 	.clear_flush_young	= kvm_mmu_notifier_clear_flush_young,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



