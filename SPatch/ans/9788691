
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>mm, oom: prevent additional oom kills before memory is freed - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    mm, oom: prevent additional oom kills before memory is freed</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 15, 2017, 11:32 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;201706152032.BFE21313.MSHQOtLVFFJOOF@I-love.SAKURA.ne.jp&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9788691/mbox/"
   >mbox</a>
|
   <a href="/patch/9788691/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9788691/">/patch/9788691/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	78B78602CB for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 11:32:53 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6C22028558
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 11:32:53 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5EC70285B3; Thu, 15 Jun 2017 11:32:53 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DF8C928558
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 15 Jun 2017 11:32:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752376AbdFOLcu (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 15 Jun 2017 07:32:50 -0400
Received: from www262.sakura.ne.jp ([202.181.97.72]:57177 &quot;EHLO
	www262.sakura.ne.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751902AbdFOLct (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 15 Jun 2017 07:32:49 -0400
Received: from fsav304.sakura.ne.jp (fsav304.sakura.ne.jp [153.120.85.135])
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id
	v5FBWedm006349; Thu, 15 Jun 2017 20:32:40 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
Received: from www262.sakura.ne.jp (202.181.97.72) by fsav304.sakura.ne.jp
	(F-Secure/fsigk_smtp/530/fsav304.sakura.ne.jp); 
	Thu, 15 Jun 2017 20:32:39 +0900 (JST)
X-Virus-Status: clean(F-Secure/fsigk_smtp/530/fsav304.sakura.ne.jp)
Received: from AQUA (softbank126227147111.bbtec.net [126.227.147.111])
	(authenticated bits=0)
	by www262.sakura.ne.jp (8.14.5/8.14.5) with ESMTP id v5FBWdbN006345; 
	Thu, 15 Jun 2017 20:32:39 +0900 (JST)
	(envelope-from penguin-kernel@I-love.SAKURA.ne.jp)
To: mhocko@kernel.org
Cc: rientjes@google.com, akpm@linux-foundation.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org
Subject: Re: [patch] mm,
	oom: prevent additional oom kills before memory is freed
From: Tetsuo Handa &lt;penguin-kernel@I-love.SAKURA.ne.jp&gt;
References: &lt;alpine.DEB.2.10.1706141632100.93071@chino.kir.corp.google.com&gt;
	&lt;20170615103909.GG1486@dhcp22.suse.cz&gt;
	&lt;201706151953.HFH78657.tFFLOOOQHSMVFJ@I-love.SAKURA.ne.jp&gt;
	&lt;20170615110119.GI1486@dhcp22.suse.cz&gt;
In-Reply-To: &lt;20170615110119.GI1486@dhcp22.suse.cz&gt;
Message-Id: &lt;201706152032.BFE21313.MSHQOtLVFFJOOF@I-love.SAKURA.ne.jp&gt;
X-Mailer: Winbiff [Version 2.51 PL2]
X-Accept-Language: ja,en,zh
Date: Thu, 15 Jun 2017 20:32:39 +0900
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - June 15, 2017, 11:32 a.m.</div>
<pre class="content">
Michal Hocko wrote:
<span class="quote">&gt; On Thu 15-06-17 19:53:24, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Wed 14-06-17 16:43:03, David Rientjes wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; If mm-&gt;mm_users is not incremented because it is already zero by the oom</span>
<span class="quote">&gt; &gt; &gt; &gt; reaper, meaning the final refcount has been dropped, do not set</span>
<span class="quote">&gt; &gt; &gt; &gt; MMF_OOM_SKIP prematurely.</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; __mmput() may not have had a chance to do exit_mmap() yet, so memory from</span>
<span class="quote">&gt; &gt; &gt; &gt; a previous oom victim is still mapped.</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; true and do we have a _guarantee_ it will do it? E.g. can somebody block</span>
<span class="quote">&gt; &gt; &gt; exit_aio from completing? Or can somebody hold mmap_sem and thus block</span>
<span class="quote">&gt; &gt; &gt; ksm_exit resp. khugepaged_exit from completing? The reason why I was</span>
<span class="quote">&gt; &gt; &gt; conservative and set such a mm as MMF_OOM_SKIP was because I couldn&#39;t</span>
<span class="quote">&gt; &gt; &gt; give a definitive answer to those questions. And we really _want_ to</span>
<span class="quote">&gt; &gt; &gt; have a guarantee of a forward progress here. Killing an additional</span>
<span class="quote">&gt; &gt; &gt; proecess is a price to pay and if that doesn&#39;t trigger normall it sounds</span>
<span class="quote">&gt; &gt; &gt; like a reasonable compromise to me.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Right. If you want this patch, __oom_reap_task_mm() must not return true without</span>
<span class="quote">&gt; &gt; setting MMF_OOM_SKIP (in other words, return false if __oom_reap_task_mm()</span>
<span class="quote">&gt; &gt; does not set MMF_OOM_SKIP). The most important role of the OOM reaper is to</span>
<span class="quote">&gt; &gt; guarantee that the OOM killer is re-enabled within finite time, for __mmput()</span>
<span class="quote">&gt; &gt; cannot guarantee that MMF_OOM_SKIP is set within finite time.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; An alternative would be to allow reaping and exit_mmap race. The unmap</span>
<span class="quote">&gt; part should just work I guess. We just have to be careful to not race</span>
<span class="quote">&gt; with free_pgtables and that shouldn&#39;t be too hard to implement (e.g.</span>
<span class="quote">&gt; (ab)use mmap_sem for write there). I haven&#39;t thought that through</span>
<span class="quote">&gt; completely though so I might miss something of course.</span>

I think below one is simpler.

 mm/oom_kill.c | 31 ++++++++++++-------------------
 1 file changed, 12 insertions(+), 19 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 15, 2017, 12:03 p.m.</div>
<pre class="content">
On Thu 15-06-17 20:32:39, Tetsuo Handa wrote:
<span class="quote">&gt; Michal Hocko wrote:</span>
[...]
<span class="quote">&gt; &gt; An alternative would be to allow reaping and exit_mmap race. The unmap</span>
<span class="quote">&gt; &gt; part should just work I guess. We just have to be careful to not race</span>
<span class="quote">&gt; &gt; with free_pgtables and that shouldn&#39;t be too hard to implement (e.g.</span>
<span class="quote">&gt; &gt; (ab)use mmap_sem for write there). I haven&#39;t thought that through</span>
<span class="quote">&gt; &gt; completely though so I might miss something of course.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I think below one is simpler.</span>
[...]
<span class="quote">&gt; @@ -556,25 +553,21 @@ static void oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt;  	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	/* Retry the down_read_trylock(mmap_sem) a few times */</span>
<span class="quote">&gt; -	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="quote">&gt; +	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="quote">&gt; +	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt;  		schedule_timeout_idle(HZ/10);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; -		goto done;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; -		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; -	debug_show_all_locks();</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -done:</span>
<span class="quote">&gt; -	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	/*</span>
<span class="quote">&gt;  	 * Hide this mm from OOM killer because it has been either reaped or</span>
<span class="quote">&gt;  	 * somebody can&#39;t call up_write(mmap_sem).</span>
<span class="quote">&gt;  	 */</span>
<span class="quote">&gt; -	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; +	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="quote">&gt; +		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; +			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; +		debug_show_all_locks();</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +</span>

How does this _solve_ anything? Why would you even retry when you
_know_ that the reference count dropped to zero. It will never
increment. So the above is basically just schedule_timeout_idle(HZ/10) *
MAX_OOM_REAP_RETRIES before we set MMF_OOM_SKIP. This might be enough
for victim to finish the exit_mmap but it is more a hack^Wworkround
than anything else. You could very well do the sleep without any
obfuscation...
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 15, 2017, 12:13 p.m.</div>
<pre class="content">
On Thu 15-06-17 14:03:35, Michal Hocko wrote:
<span class="quote">&gt; On Thu 15-06-17 20:32:39, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; Michal Hocko wrote:</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; &gt; An alternative would be to allow reaping and exit_mmap race. The unmap</span>
<span class="quote">&gt; &gt; &gt; part should just work I guess. We just have to be careful to not race</span>
<span class="quote">&gt; &gt; &gt; with free_pgtables and that shouldn&#39;t be too hard to implement (e.g.</span>
<span class="quote">&gt; &gt; &gt; (ab)use mmap_sem for write there). I haven&#39;t thought that through</span>
<span class="quote">&gt; &gt; &gt; completely though so I might miss something of course.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; I think below one is simpler.</span>
<span class="quote">&gt; [...]</span>
<span class="quote">&gt; &gt; @@ -556,25 +553,21 @@ static void oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt;  	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  	/* Retry the down_read_trylock(mmap_sem) a few times */</span>
<span class="quote">&gt; &gt; -	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="quote">&gt; &gt; +	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="quote">&gt; &gt; +	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt;  		schedule_timeout_idle(HZ/10);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; -		goto done;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; -		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; -	debug_show_all_locks();</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt; -done:</span>
<span class="quote">&gt; &gt; -	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt;  	/*</span>
<span class="quote">&gt; &gt;  	 * Hide this mm from OOM killer because it has been either reaped or</span>
<span class="quote">&gt; &gt;  	 * somebody can&#39;t call up_write(mmap_sem).</span>
<span class="quote">&gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; -	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; &gt; +	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="quote">&gt; &gt; +		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; +			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; +		debug_show_all_locks();</span>
<span class="quote">&gt; &gt; +	}</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; How does this _solve_ anything? Why would you even retry when you</span>
<span class="quote">&gt; _know_ that the reference count dropped to zero. It will never</span>
<span class="quote">&gt; increment. So the above is basically just schedule_timeout_idle(HZ/10) *</span>
<span class="quote">&gt; MAX_OOM_REAP_RETRIES before we set MMF_OOM_SKIP.</span>

Just to make myself more clear. The above assumes that the victim hasn&#39;t
passed exit_mmap and MMF_OOM_SKIP in __mmput. Which is the case we want to
address here.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - June 15, 2017, 1:01 p.m.</div>
<pre class="content">
Michal Hocko wrote:
<span class="quote">&gt; On Thu 15-06-17 14:03:35, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Thu 15-06-17 20:32:39, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; &gt; @@ -556,25 +553,21 @@ static void oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt; &gt;  	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt;  	/* Retry the down_read_trylock(mmap_sem) a few times */</span>
<span class="quote">&gt; &gt; &gt; -	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="quote">&gt; &gt; &gt; +	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="quote">&gt; &gt; &gt; +	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt;  		schedule_timeout_idle(HZ/10);</span>
<span class="quote">&gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; -	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt; -		goto done;</span>
<span class="quote">&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; -	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; -		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; -	debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; -done:</span>
<span class="quote">&gt; &gt; &gt; -	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="quote">&gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt;  	/*</span>
<span class="quote">&gt; &gt; &gt;  	 * Hide this mm from OOM killer because it has been either reaped or</span>
<span class="quote">&gt; &gt; &gt;  	 * somebody can&#39;t call up_write(mmap_sem).</span>
<span class="quote">&gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; -	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; &gt; &gt; +	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="quote">&gt; &gt; &gt; +		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; +			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; +		debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; How does this _solve_ anything? Why would you even retry when you</span>
<span class="quote">&gt; &gt; _know_ that the reference count dropped to zero. It will never</span>
<span class="quote">&gt; &gt; increment. So the above is basically just schedule_timeout_idle(HZ/10) *</span>
<span class="quote">&gt; &gt; MAX_OOM_REAP_RETRIES before we set MMF_OOM_SKIP.</span>

If the OOM reaper knows that mm-&gt;users == 0, it gives __mmput() some time
to &quot;complete exit_mmap() etc. and set MMF_OOM_SKIP&quot;. If __mmput() released
some memory, subsequent OOM killer invocation is automatically avoided.
If __mmput() did not release some memory, let the OOM killer invoke again.
<span class="quote">
&gt; </span>
<span class="quote">&gt; Just to make myself more clear. The above assumes that the victim hasn&#39;t</span>
<span class="quote">&gt; passed exit_mmap and MMF_OOM_SKIP in __mmput. Which is the case we want to</span>
<span class="quote">&gt; address here.</span>

David is trying to avoid setting MMF_OOM_SKIP when the OOM reaper found that
mm-&gt;users == 0. But we must not wait forever because __mmput() might fail to
release some memory immediately. If __mmput() did not release some memory within
schedule_timeout_idle(HZ/10) * MAX_OOM_REAP_RETRIES sleep, let the OOM killer
invoke again. So, this is the case we want to address here, isn&#39;t it?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - June 15, 2017, 1:22 p.m.</div>
<pre class="content">
On Thu 15-06-17 22:01:33, Tetsuo Handa wrote:
<span class="quote">&gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; On Thu 15-06-17 14:03:35, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Thu 15-06-17 20:32:39, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; @@ -556,25 +553,21 @@ static void oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt; &gt; &gt;  	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;</span>
<span class="quote">&gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt;  	/* Retry the down_read_trylock(mmap_sem) a few times */</span>
<span class="quote">&gt; &gt; &gt; &gt; -	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="quote">&gt; &gt; &gt; &gt; +	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="quote">&gt; &gt; &gt; &gt; +	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt; &gt;  		schedule_timeout_idle(HZ/10);</span>
<span class="quote">&gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; -	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt; &gt; -		goto done;</span>
<span class="quote">&gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; -	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; &gt; -		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; &gt; -	debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; -done:</span>
<span class="quote">&gt; &gt; &gt; &gt; -	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="quote">&gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt;  	/*</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 * Hide this mm from OOM killer because it has been either reaped or</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 * somebody can&#39;t call up_write(mmap_sem).</span>
<span class="quote">&gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; -	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; &gt; &gt; &gt; +	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="quote">&gt; &gt; &gt; &gt; +		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; &gt; +			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; &gt; +		debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; How does this _solve_ anything? Why would you even retry when you</span>
<span class="quote">&gt; &gt; &gt; _know_ that the reference count dropped to zero. It will never</span>
<span class="quote">&gt; &gt; &gt; increment. So the above is basically just schedule_timeout_idle(HZ/10) *</span>
<span class="quote">&gt; &gt; &gt; MAX_OOM_REAP_RETRIES before we set MMF_OOM_SKIP.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; If the OOM reaper knows that mm-&gt;users == 0, it gives __mmput() some time</span>
<span class="quote">&gt; to &quot;complete exit_mmap() etc. and set MMF_OOM_SKIP&quot;. If __mmput() released</span>
<span class="quote">&gt; some memory, subsequent OOM killer invocation is automatically avoided.</span>
<span class="quote">&gt; If __mmput() did not release some memory, let the OOM killer invoke again.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Just to make myself more clear. The above assumes that the victim hasn&#39;t</span>
<span class="quote">&gt; &gt; passed exit_mmap and MMF_OOM_SKIP in __mmput. Which is the case we want to</span>
<span class="quote">&gt; &gt; address here.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; David is trying to avoid setting MMF_OOM_SKIP when the OOM reaper found that</span>
<span class="quote">&gt; mm-&gt;users == 0. But we must not wait forever because __mmput() might fail to</span>
<span class="quote">&gt; release some memory immediately. If __mmput() did not release some memory within</span>
<span class="quote">&gt; schedule_timeout_idle(HZ/10) * MAX_OOM_REAP_RETRIES sleep, let the OOM killer</span>
<span class="quote">&gt; invoke again. So, this is the case we want to address here, isn&#39;t it?</span>

And we are back with a timeout based approach... Sigh. Just imagine that
you have a really large process which will take some time to tear down.
While it frees memory that might be in a different oom domain. Now you
pretend to keep retrying and eventually give up to allow a new oom
victim from that oom domain.

If we want to handle oom victims with mm_users == 0 then let&#39;s do it
properly, please.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - June 15, 2017, 9:37 p.m.</div>
<pre class="content">
On Thu, 15 Jun 2017, Tetsuo Handa wrote:
<span class="quote">
&gt; David is trying to avoid setting MMF_OOM_SKIP when the OOM reaper found that</span>
<span class="quote">&gt; mm-&gt;users == 0.</span>

Yes, because MMF_OOM_SKIP enables the oom killer to select another process 
to kill and will do so without the original victim&#39;s mm being able to 
undergo exit_mmap().  So now we kill two or more processes when one would 
have sufficied; I have seen up to four processes killed unnecessarily 
without this patch.
<span class="quote">
&gt; But we must not wait forever because __mmput() might fail to</span>
<span class="quote">&gt; release some memory immediately. If __mmput() did not release some memory within</span>
<span class="quote">&gt; schedule_timeout_idle(HZ/10) * MAX_OOM_REAP_RETRIES sleep, let the OOM killer</span>
<span class="quote">&gt; invoke again. So, this is the case we want to address here, isn&#39;t it?</span>
<span class="quote">&gt; </span>

It is obviously a function of the number of threads that share the mm with 
the oom victim to determine how long would be a sensible amount of time to 
wait for __mmput() to even get a chance to be called, along with 
potentially allowing a non-zero number of those threads to allocate from 
memory reserves to allow them to eventually drop mm-&gt;mmap_sem to make 
forward progress.

I have not witnessed any thread stalling in __mmput() that prevents the 
mm&#39;s memory to be freed.  I have witnessed several processes oom killed 
unnecessarily for a single oom condition where before MMF_OOM_SKIP was 
introduced, a single oom kill would have sufficed.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=28">Tetsuo Handa</a> - June 15, 2017, 9:43 p.m.</div>
<pre class="content">
Michal Hocko wrote:
<span class="quote">&gt; On Thu 15-06-17 22:01:33, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; On Thu 15-06-17 14:03:35, Michal Hocko wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; On Thu 15-06-17 20:32:39, Tetsuo Handa wrote:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; @@ -556,25 +553,21 @@ static void oom_reap_task(struct task_struct *tsk)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	/* Retry the down_read_trylock(mmap_sem) a few times */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  		schedule_timeout_idle(HZ/10);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  </span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -		goto done;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -done:</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	/*</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 * Hide this mm from OOM killer because it has been either reaped or</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 * somebody can&#39;t call up_write(mmap_sem).</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt;  	 */</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; -	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +		debug_show_all_locks();</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +	}</span>
<span class="quote">&gt; &gt; &gt; &gt; &gt; +</span>
<span class="quote">&gt; &gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; &gt; How does this _solve_ anything? Why would you even retry when you</span>
<span class="quote">&gt; &gt; &gt; &gt; _know_ that the reference count dropped to zero. It will never</span>
<span class="quote">&gt; &gt; &gt; &gt; increment. So the above is basically just schedule_timeout_idle(HZ/10) *</span>
<span class="quote">&gt; &gt; &gt; &gt; MAX_OOM_REAP_RETRIES before we set MMF_OOM_SKIP.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; If the OOM reaper knows that mm-&gt;users == 0, it gives __mmput() some time</span>
<span class="quote">&gt; &gt; to &quot;complete exit_mmap() etc. and set MMF_OOM_SKIP&quot;. If __mmput() released</span>
<span class="quote">&gt; &gt; some memory, subsequent OOM killer invocation is automatically avoided.</span>
<span class="quote">&gt; &gt; If __mmput() did not release some memory, let the OOM killer invoke again.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Just to make myself more clear. The above assumes that the victim hasn&#39;t</span>
<span class="quote">&gt; &gt; &gt; passed exit_mmap and MMF_OOM_SKIP in __mmput. Which is the case we want to</span>
<span class="quote">&gt; &gt; &gt; address here.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; David is trying to avoid setting MMF_OOM_SKIP when the OOM reaper found that</span>
<span class="quote">&gt; &gt; mm-&gt;users == 0. But we must not wait forever because __mmput() might fail to</span>
<span class="quote">&gt; &gt; release some memory immediately. If __mmput() did not release some memory within</span>
<span class="quote">&gt; &gt; schedule_timeout_idle(HZ/10) * MAX_OOM_REAP_RETRIES sleep, let the OOM killer</span>
<span class="quote">&gt; &gt; invoke again. So, this is the case we want to address here, isn&#39;t it?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; And we are back with a timeout based approach... Sigh. Just imagine that</span>
<span class="quote">&gt; you have a really large process which will take some time to tear down.</span>
<span class="quote">&gt; While it frees memory that might be in a different oom domain. Now you</span>
<span class="quote">&gt; pretend to keep retrying and eventually give up to allow a new oom</span>
<span class="quote">&gt; victim from that oom domain.</span>

We are already using timeout based approach at down_read_trylock(&amp;mm-&gt;mmap_sem)
in __oom_reap_task_mm(). It is possible that down_read_trylock(&amp;mm-&gt;mmap_sem)
succeeds if the OOM reaper waited for one more second, for the thread which is
holding mmap_sem for write could just be failing to get TIF_MEMDIE due to
oom_lock contention among unrelated threads, but we allow the OOM reaper to
give up after one second.

Even if the victim is a really large process which will take some time to tear
down &quot;&quot;&quot;inside __mmput()&quot;&quot;&quot;, subsequent OOM killer invocation will be _automatically
avoided_ if __mmput() released _some_ memory. Thus, giving up __mmput() after one
second as well as giving up down_read_trylock(&amp;mm-&gt;mmap_sem) after one second is
reasonable.
<span class="quote">
&gt; </span>
<span class="quote">&gt; If we want to handle oom victims with mm_users == 0 then let&#39;s do it</span>
<span class="quote">&gt; properly, please.</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/mm/oom_kill.c b/mm/oom_kill.c</span>
<span class="p_header">index 0e2c925..c63f514 100644</span>
<span class="p_header">--- a/mm/oom_kill.c</span>
<span class="p_header">+++ b/mm/oom_kill.c</span>
<span class="p_chunk">@@ -466,11 +466,10 @@</span> <span class="p_context"> bool process_shares_mm(struct task_struct *p, struct mm_struct *mm)</span>
 static struct task_struct *oom_reaper_list;
 static DEFINE_SPINLOCK(oom_reaper_lock);
 
<span class="p_del">-static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
<span class="p_add">+static void __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 {
 	struct mmu_gather tlb;
 	struct vm_area_struct *vma;
<span class="p_del">-	bool ret = true;</span>
 
 	/*
 	 * We have to make sure to not race with the victim exit path
<span class="p_chunk">@@ -488,10 +487,8 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 	 */
 	mutex_lock(&amp;oom_lock);
 
<span class="p_del">-	if (!down_read_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_del">-		ret = false;</span>
<span class="p_add">+	if (!down_read_trylock(&amp;mm-&gt;mmap_sem))</span>
 		goto unlock_oom;
<span class="p_del">-	}</span>
 
 	/*
 	 * increase mm_users only after we know we will reap something so
<span class="p_chunk">@@ -531,6 +528,7 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 					 NULL);
 	}
 	tlb_finish_mmu(&amp;tlb, 0, -1);
<span class="p_add">+	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
 	pr_info(&quot;oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n&quot;,
 			task_pid_nr(tsk), tsk-&gt;comm,
 			K(get_mm_counter(mm, MM_ANONPAGES)),
<span class="p_chunk">@@ -546,7 +544,6 @@</span> <span class="p_context"> static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)</span>
 	mmput_async(mm);
 unlock_oom:
 	mutex_unlock(&amp;oom_lock);
<span class="p_del">-	return ret;</span>
 }
 
 #define MAX_OOM_REAP_RETRIES 10
<span class="p_chunk">@@ -556,25 +553,21 @@</span> <span class="p_context"> static void oom_reap_task(struct task_struct *tsk)</span>
 	struct mm_struct *mm = tsk-&gt;signal-&gt;oom_mm;
 
 	/* Retry the down_read_trylock(mmap_sem) a few times */
<span class="p_del">-	while (attempts++ &lt; MAX_OOM_REAP_RETRIES &amp;&amp; !__oom_reap_task_mm(tsk, mm))</span>
<span class="p_add">+	while (__oom_reap_task_mm(tsk, mm), !test_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)</span>
<span class="p_add">+	       &amp;&amp; attempts++ &lt; MAX_OOM_REAP_RETRIES)</span>
 		schedule_timeout_idle(HZ/10);
 
<span class="p_del">-	if (attempts &lt;= MAX_OOM_REAP_RETRIES)</span>
<span class="p_del">-		goto done;</span>
<span class="p_del">-</span>
<span class="p_del">-</span>
<span class="p_del">-	pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="p_del">-		task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="p_del">-	debug_show_all_locks();</span>
<span class="p_del">-</span>
<span class="p_del">-done:</span>
<span class="p_del">-	tsk-&gt;oom_reaper_list = NULL;</span>
<span class="p_del">-</span>
 	/*
 	 * Hide this mm from OOM killer because it has been either reaped or
 	 * somebody can&#39;t call up_write(mmap_sem).
 	 */
<span class="p_del">-	set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags);</span>
<span class="p_add">+	if (!test_and_set_bit(MMF_OOM_SKIP, &amp;mm-&gt;flags)) {</span>
<span class="p_add">+		pr_info(&quot;oom_reaper: unable to reap pid:%d (%s)\n&quot;,</span>
<span class="p_add">+			task_pid_nr(tsk), tsk-&gt;comm);</span>
<span class="p_add">+		debug_show_all_locks();</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	tsk-&gt;oom_reaper_list = NULL;</span>
 
 	/* Drop a reference taken by wake_oom_reaper */
 	put_task_struct(tsk);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



