
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[PATCHv2,1/2] x86/mm: Do not allow non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [PATCHv2,1/2] x86/mm: Do not allow non-MAP_FIXED mapping across DEFAULT_MAP_WINDOW border</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 14, 2017, 1:43 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171114134322.40321-1-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10057659/mbox/"
   >mbox</a>
|
   <a href="/patch/10057659/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10057659/">/patch/10057659/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B15DC60231 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 13:43:43 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9596D297AD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 13:43:43 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 884A4297BA; Tue, 14 Nov 2017 13:43:43 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 776E7297AD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 14 Nov 2017 13:43:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754582AbdKNNnk (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 14 Nov 2017 08:43:40 -0500
Received: from mga06.intel.com ([134.134.136.31]:13664 &quot;EHLO mga06.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752526AbdKNNnc (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 14 Nov 2017 08:43:32 -0500
Received: from fmsmga003.fm.intel.com ([10.253.24.29])
	by orsmga104.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
	14 Nov 2017 05:43:31 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.44,395,1505804400&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1758484&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by FMSMGA003.fm.intel.com with ESMTP; 14 Nov 2017 05:43:28 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id EADB3DE; Tue, 14 Nov 2017 15:43:27 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	Nicholas Piggin &lt;npiggin@gmail.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [PATCHv2 1/2] x86/mm: Do not allow non-MAP_FIXED mapping across
	DEFAULT_MAP_WINDOW border
Date: Tue, 14 Nov 2017 16:43:21 +0300
Message-Id: &lt;20171114134322.40321-1-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.15.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Nov. 14, 2017, 1:43 p.m.</div>
<pre class="content">
In case of 5-level paging, we don&#39;t put any mapping above 47-bit, unless
userspace explicitly asked for it.

Userspace can ask for allocation from full address space by specifying
hint address above 47-bit.

Nicholas noticed that current implementation violates this interface:
we can get vma partly in high addresses if we ask for a mapping at very
end of 47-bit address space.

Let&#39;s make sure that, when consider hint address for non-MAP_FIXED
mapping, start and end of resulting vma are on the same side of 47-bit
border.
<span class="signed-off-by">
Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;</span>
Reported-by: Nicholas Piggin &lt;npiggin@gmail.com&gt;
---
 v2:
   - add a comment to explain behaviour;
   - cover hugetlb case too;
---
 arch/x86/kernel/sys_x86_64.c | 36 ++++++++++++++++++++++++++++++++++--
 arch/x86/mm/hugetlbpage.c    | 13 +++++++++++--
 2 files changed, 45 insertions(+), 4 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/kernel/sys_x86_64.c b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">index a63fe77b3217..472de4a9f0a6 100644</span>
<span class="p_header">--- a/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/sys_x86_64.c</span>
<span class="p_chunk">@@ -198,11 +198,43 @@</span> <span class="p_context"> arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,</span>
 	/* requesting a specific address */
 	if (addr) {
 		addr = PAGE_ALIGN(addr);
<span class="p_add">+		if (TASK_SIZE - len &lt; addr)</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * We don&#39;t want to put a mapping directly accross 47-bit</span>
<span class="p_add">+		 * boundary. It helps to address following theoretical issue:</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * We have an application that tries, for some reason, to</span>
<span class="p_add">+		 * allocate memory with mmap(addr), without MAP_FIXED, where addr</span>
<span class="p_add">+		 * is near the borderline of 47-bit address space and addr+len is</span>
<span class="p_add">+		 * above the border.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * On 4-level paging machine this request would succeed, but the</span>
<span class="p_add">+		 * address will always be within 47-bit VA -- cannot allocate by</span>
<span class="p_add">+		 * hint address, ignore it.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * If the application cannot handle high address this might be an</span>
<span class="p_add">+		 * issue on 5-level paging machine as such call would succeed</span>
<span class="p_add">+		 * *and* allocate memory by the specified hint address. In this</span>
<span class="p_add">+		 * case part of the mapping would be above the border line and</span>
<span class="p_add">+		 * may lead to misbehaviour if the application cannot handle</span>
<span class="p_add">+		 * addresses above 47-bit.</span>
<span class="p_add">+		 *</span>
<span class="p_add">+		 * Note, that mmap(addr, MAP_FIXED) would fail on 4-level</span>
<span class="p_add">+		 * paging machine if addr+len is above 47-bit. It&#39;s reasonable</span>
<span class="p_add">+		 * to expect that nobody would rely on such failure and it&#39;s</span>
<span class="p_add">+		 * safe to allocate such mapping.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if ((addr &gt; DEFAULT_MAP_WINDOW) !=</span>
<span class="p_add">+				(addr + len &gt; DEFAULT_MAP_WINDOW))</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="p_del">-				(!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="p_add">+		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
 			return addr;
 	}
<span class="p_add">+get_unmapped_area:</span>
 
 	info.flags = VM_UNMAPPED_AREA_TOPDOWN;
 	info.length = len;
<span class="p_header">diff --git a/arch/x86/mm/hugetlbpage.c b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">index 8ae0000cbdb3..5cdcb3ee9748 100644</span>
<span class="p_header">--- a/arch/x86/mm/hugetlbpage.c</span>
<span class="p_header">+++ b/arch/x86/mm/hugetlbpage.c</span>
<span class="p_chunk">@@ -166,11 +166,20 @@</span> <span class="p_context"> hugetlb_get_unmapped_area(struct file *file, unsigned long addr,</span>
 
 	if (addr) {
 		addr = ALIGN(addr, huge_page_size(h));
<span class="p_add">+		if (TASK_SIZE - len &gt;= addr)</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
<span class="p_add">+		/* See a comment in arch_get_unmapped_area_topdown */</span>
<span class="p_add">+		if ((addr &gt; DEFAULT_MAP_WINDOW) !=</span>
<span class="p_add">+				(addr + len &gt; DEFAULT_MAP_WINDOW))</span>
<span class="p_add">+			goto get_unmapped_area;</span>
<span class="p_add">+</span>
 		vma = find_vma(mm, addr);
<span class="p_del">-		if (TASK_SIZE - len &gt;= addr &amp;&amp;</span>
<span class="p_del">-		    (!vma || addr + len &lt;= vm_start_gap(vma)))</span>
<span class="p_add">+		if (!vma || addr + len &lt;= vm_start_gap(vma))</span>
 			return addr;
 	}
<span class="p_add">+</span>
<span class="p_add">+get_unmapped_area:</span>
 	if (mm-&gt;get_unmapped_area == arch_get_unmapped_area)
 		return hugetlb_get_unmapped_area_bottomup(file, addr, len,
 				pgoff, flags);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



