
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,09/13] x86/mm: Disable interrupts when flushing the TLB using CR3 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,09/13] x86/mm: Disable interrupts when flushing the TLB using CR3</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 8, 2016, 11:15 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;a75dbc8fb47148e7f7f3b171c033a5a11d83e690.1452294700.git.luto@kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7990991/mbox/"
   >mbox</a>
|
   <a href="/patch/7990991/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7990991/">/patch/7990991/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id C41169F6CD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:17:12 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 41AF8201C8
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:17:12 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 9FE4B201DD
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  8 Jan 2016 23:17:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756684AbcAHXRI (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 8 Jan 2016 18:17:08 -0500
Received: from mail.kernel.org ([198.145.29.136]:49771 &quot;EHLO mail.kernel.org&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1756127AbcAHXPs (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 8 Jan 2016 18:15:48 -0500
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0F43B201F2;
	Fri,  8 Jan 2016 23:15:48 +0000 (UTC)
Received: from localhost (50-76-60-73-ip-static.hfc.comcastbusiness.net
	[50.76.60.73])
	(using TLSv1.2 with cipher AES128-GCM-SHA256 (128/128 bits))
	(No client certificate requested)
	by mail.kernel.org (Postfix) with ESMTPSA id 55B12201C0;
	Fri,  8 Jan 2016 23:15:47 +0000 (UTC)
From: Andy Lutomirski &lt;luto@kernel.org&gt;
To: x86@kernel.org, linux-kernel@vger.kernel.org
Cc: Borislav Petkov &lt;bp@alien8.de&gt;, Brian Gerst &lt;brgerst@gmail.com&gt;,
	Dave Hansen &lt;dave.hansen@linux.intel.com&gt;,
	Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Oleg Nesterov &lt;oleg@redhat.com&gt;,
	&quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	Andy Lutomirski &lt;luto@kernel.org&gt;
Subject: [RFC 09/13] x86/mm: Disable interrupts when flushing the TLB using
	CR3
Date: Fri,  8 Jan 2016 15:15:27 -0800
Message-Id: &lt;a75dbc8fb47148e7f7f3b171c033a5a11d83e690.1452294700.git.luto@kernel.org&gt;
X-Mailer: git-send-email 2.5.0
In-Reply-To: &lt;cover.1452294700.git.luto@kernel.org&gt;
References: &lt;cover.1452294700.git.luto@kernel.org&gt;
In-Reply-To: &lt;cover.1452294700.git.luto@kernel.org&gt;
References: &lt;cover.1452294700.git.luto@kernel.org&gt;
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=125831">Andrew Lutomirski</a> - Jan. 8, 2016, 11:15 p.m.</div>
<pre class="content">
<span class="signed-off-by">Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
---
 arch/x86/include/asm/tlbflush.h | 10 ++++++++++
 1 file changed, 10 insertions(+)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Jan. 8, 2016, 11:41 p.m.</div>
<pre class="content">
On Fri, Jan 8, 2016 at 3:15 PM, Andy Lutomirski &lt;luto@kernel.org&gt; wrote:
<span class="quote">&gt; +       /*</span>
<span class="quote">&gt; +        * We mustn&#39;t be preempted or handle an IPI while reading and</span>
<span class="quote">&gt; +        * writing CR3.  Preemption could switch mms and switch back, and</span>
<span class="quote">&gt; +        * an IPI could call leave_mm.  Either of those could cause our</span>
<span class="quote">&gt; +        * PCID to change asynchronously.</span>
<span class="quote">&gt; +        */</span>
<span class="quote">&gt; +       raw_local_irq_save(flags);</span>
<span class="quote">&gt;         native_write_cr3(native_read_cr3());</span>
<span class="quote">&gt; +       raw_local_irq_restore(flags);</span>

This seems sad for two reasons:

 - it adds unnecessary overhead on non-pcid setups (32-bit being an
example of that)

 - on pcid setups, wouldn&#39;t invpcid_flush_single_context() be better?

So on the whole I hate it.

Why isn&#39;t this something like

        if (static_cpu_has_safe(X86_FEATURE_INVPCID)) {
                invpcid_flush_single_context();
                return;
        }
        native_write_cr3(native_read_cr3());

*without* any flag saving crud?

And yes, that means that we&#39;d require X86_FEATURE_INVPCID in order to
use X86_FEATURE_PCID, but that seems fine.

Or is there some reason you wanted the odd flags version? If so, that
should be documented.

               Linus
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 9, 2016, 12:18 a.m.</div>
<pre class="content">
On Jan 8, 2016 3:41 PM, &quot;Linus Torvalds&quot; &lt;torvalds@linux-foundation.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; On Fri, Jan 8, 2016 at 3:15 PM, Andy Lutomirski &lt;luto@kernel.org&gt; wrote:</span>
<span class="quote">&gt; &gt; +       /*</span>
<span class="quote">&gt; &gt; +        * We mustn&#39;t be preempted or handle an IPI while reading and</span>
<span class="quote">&gt; &gt; +        * writing CR3.  Preemption could switch mms and switch back, and</span>
<span class="quote">&gt; &gt; +        * an IPI could call leave_mm.  Either of those could cause our</span>
<span class="quote">&gt; &gt; +        * PCID to change asynchronously.</span>
<span class="quote">&gt; &gt; +        */</span>
<span class="quote">&gt; &gt; +       raw_local_irq_save(flags);</span>
<span class="quote">&gt; &gt;         native_write_cr3(native_read_cr3());</span>
<span class="quote">&gt; &gt; +       raw_local_irq_restore(flags);</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; This seems sad for two reasons:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;  - it adds unnecessary overhead on non-pcid setups (32-bit being an</span>
<span class="quote">&gt; example of that)</span>

I can certainly skip the flag saving on !PCID.
<span class="quote">
&gt;</span>
<span class="quote">&gt;  - on pcid setups, wouldn&#39;t invpcid_flush_single_context() be better?</span>
<span class="quote">&gt;</span>

I played with that and it was slower.  I don&#39;t pretend that makes any sense.
<span class="quote">
&gt; So on the whole I hate it.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Why isn&#39;t this something like</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;         if (static_cpu_has_safe(X86_FEATURE_INVPCID)) {</span>
<span class="quote">&gt;                 invpcid_flush_single_context();</span>
<span class="quote">&gt;                 return;</span>
<span class="quote">&gt;         }</span>
<span class="quote">&gt;         native_write_cr3(native_read_cr3());</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; *without* any flag saving crud?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; And yes, that means that we&#39;d require X86_FEATURE_INVPCID in order to</span>
<span class="quote">&gt; use X86_FEATURE_PCID, but that seems fine.</span>

I have an SNB &quot;Extreme&quot; with PCID but not INVPCID, and there could be
a whole generation of servers like that.  I think we should fully
support them.

We might be able to get away with just disabling preemption instead of
IRQs, at least if mm == active_mm.
<span class="quote">
&gt;</span>
<span class="quote">&gt; Or is there some reason you wanted the odd flags version? If so, that</span>
<span class="quote">&gt; should be documented.</span>

What do you mean &quot;odd&quot;?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=77">Linus Torvalds</a> - Jan. 9, 2016, 2:20 a.m.</div>
<pre class="content">
On Fri, Jan 8, 2016 at 4:18 PM, Andy Lutomirski &lt;luto@amacapital.net&gt; wrote:
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;  - on pcid setups, wouldn&#39;t invpcid_flush_single_context() be better?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I played with that and it was slower.  I don&#39;t pretend that makes any sense.</span>

Ugh. I guess reading and writing cr3 has been optimized.
<span class="quote">
&gt;&gt; And yes, that means that we&#39;d require X86_FEATURE_INVPCID in order to</span>
<span class="quote">&gt;&gt; use X86_FEATURE_PCID, but that seems fine.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I have an SNB &quot;Extreme&quot; with PCID but not INVPCID, and there could be</span>
<span class="quote">&gt; a whole generation of servers like that.  I think we should fully</span>
<span class="quote">&gt; support them.</span>

Can you check the timings? IOW, is it a win on SNB?

I think originally Intel only had two actual bits of process context
ID in the TLB, and it was meant to be used for virtualization or
something. Together with the hashing (to make it always appear as 12
bits to software - a nice idea but also means that the hardware ends
up invalidating more than software really expects), it may not work
all that well.

That _could_ explain why the original patch from intel didn&#39;t work.
<span class="quote">
&gt; We might be able to get away with just disabling preemption instead of</span>
<span class="quote">&gt; IRQs, at least if mm == active_mm.</span>

I&#39;m not convinced it is all that much faster. Of course, it&#39;s nicer on
non-preempt, but nobody seems to run things that way.
<span class="quote">
&gt;&gt; Or is there some reason you wanted the odd flags version? If so, that</span>
<span class="quote">&gt;&gt; should be documented.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; What do you mean &quot;odd&quot;?</span>

It&#39;s odd because it makes no sense for non-pcid (christ, I wish Intel
had just called it &quot;asid&quot; instead, &quot;pcid&quot; always makes me react to
&quot;pci&quot;), and I think it would make more sense to pair up the pcid case
with the invpcid rather than have those preemption rules here.

                 Linus
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Jan. 11, 2016, 10:51 a.m.</div>
<pre class="content">
* Linus Torvalds &lt;torvalds@linux-foundation.org&gt; wrote:
<span class="quote">
&gt; &gt;&gt; Or is there some reason you wanted the odd flags version? If so, that</span>
<span class="quote">&gt; &gt;&gt; should be documented.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; What do you mean &quot;odd&quot;?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s odd because it makes no sense for non-pcid (christ, I wish Intel had just </span>
<span class="quote">&gt; called it &quot;asid&quot; instead, &quot;pcid&quot; always makes me react to &quot;pci&quot;), and I think it </span>
<span class="quote">&gt; would make more sense to pair up the pcid case with the invpcid rather than have </span>
<span class="quote">&gt; those preemption rules here.</span>

The naming is really painful, so a trivial suggestion: could we just name all the 
Linux side bits &#39;asid&#39; or &#39;ctx_id&#39; (even in x86 arch code) and only use &#39;PCID&#39; 
nomenclature in the very lowest level code?

I.e. rename pcid_live_cpus et al and most functions to the asid or ctx_id or asid 
naming scheme or so. That would hide most of the naming ugliness.

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 13, 2016, 11:32 p.m.</div>
<pre class="content">
On Mon, Jan 11, 2016 at 2:51 AM, Ingo Molnar &lt;mingo@kernel.org&gt; wrote:
<span class="quote">&gt;</span>
<span class="quote">&gt; * Linus Torvalds &lt;torvalds@linux-foundation.org&gt; wrote:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; &gt;&gt; Or is there some reason you wanted the odd flags version? If so, that</span>
<span class="quote">&gt;&gt; &gt;&gt; should be documented.</span>
<span class="quote">&gt;&gt; &gt;</span>
<span class="quote">&gt;&gt; &gt; What do you mean &quot;odd&quot;?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It&#39;s odd because it makes no sense for non-pcid (christ, I wish Intel had just</span>
<span class="quote">&gt;&gt; called it &quot;asid&quot; instead, &quot;pcid&quot; always makes me react to &quot;pci&quot;), and I think it</span>
<span class="quote">&gt;&gt; would make more sense to pair up the pcid case with the invpcid rather than have</span>
<span class="quote">&gt;&gt; those preemption rules here.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; The naming is really painful, so a trivial suggestion: could we just name all the</span>
<span class="quote">&gt; Linux side bits &#39;asid&#39; or &#39;ctx_id&#39; (even in x86 arch code) and only use &#39;PCID&#39;</span>
<span class="quote">&gt; nomenclature in the very lowest level code?</span>

I&#39;d be okay with &quot;pctx_id&quot; or &quot;pctxid&quot; for this, I think.  I&#39;d like to
at least make it somewhat obvious how it maps back to hardware.

FWIW, I&#39;d guess that Intel deviated from convention because their
actual address space id is (vpid, pcid), and calling it (vpid, asid)
might have been slightly confusing.  Or not.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 13, 2016, 11:35 p.m.</div>
<pre class="content">
On Fri, Jan 8, 2016 at 6:20 PM, Linus Torvalds
&lt;torvalds@linux-foundation.org&gt; wrote:
<span class="quote">&gt; On Fri, Jan 8, 2016 at 4:18 PM, Andy Lutomirski &lt;luto@amacapital.net&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;  - on pcid setups, wouldn&#39;t invpcid_flush_single_context() be better?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I played with that and it was slower.  I don&#39;t pretend that makes any sense.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ugh. I guess reading and writing cr3 has been optimized.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt;&gt; And yes, that means that we&#39;d require X86_FEATURE_INVPCID in order to</span>
<span class="quote">&gt;&gt;&gt; use X86_FEATURE_PCID, but that seems fine.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I have an SNB &quot;Extreme&quot; with PCID but not INVPCID, and there could be</span>
<span class="quote">&gt;&gt; a whole generation of servers like that.  I think we should fully</span>
<span class="quote">&gt;&gt; support them.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Can you check the timings? IOW, is it a win on SNB?</span>

~80ns gain on SNB.  It&#39;s actually quite impressive on SNB: it knocks
the penalty for mm switches down to 20ns or so, which I find to be
fairly amazing.  (This is at 3.8GHz or thereabouts.)
<span class="quote">
&gt;</span>
<span class="quote">&gt; I think originally Intel only had two actual bits of process context</span>
<span class="quote">&gt; ID in the TLB, and it was meant to be used for virtualization or</span>
<span class="quote">&gt; something. Together with the hashing (to make it always appear as 12</span>
<span class="quote">&gt; bits to software - a nice idea but also means that the hardware ends</span>
<span class="quote">&gt; up invalidating more than software really expects), it may not work</span>
<span class="quote">&gt; all that well.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; That _could_ explain why the original patch from intel didn&#39;t work.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;&gt; We might be able to get away with just disabling preemption instead of</span>
<span class="quote">&gt;&gt; IRQs, at least if mm == active_mm.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I&#39;m not convinced it is all that much faster. Of course, it&#39;s nicer on</span>
<span class="quote">&gt; non-preempt, but nobody seems to run things that way.</span>

My current testing version has three different code paths now.  If
INVPCID and PCID are both available, then it uses INVPCID.  If PCID is
available but INVPCID is not, it does raw_local_irqsave.  If PCID is
not available, it just does the CR3 read/write.

Yeah, it&#39;s ugly, and it&#39;s a big blob of code to do something trivial,
but it seems to work and it should be the right thing to do in most
cases.

Can anyone here ask a hardware or microcode person what&#39;s going on
with CR3 writes possibly being faster than INVPCID?  Is there some
trick to it?

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Jan. 13, 2016, 11:43 p.m.</div>
<pre class="content">
On 01/13/2016 03:35 PM, Andy Lutomirski wrote:
<span class="quote">&gt; Can anyone here ask a hardware or microcode person what&#39;s going on</span>
<span class="quote">&gt; with CR3 writes possibly being faster than INVPCID?  Is there some</span>
<span class="quote">&gt; trick to it?</span>

I just went and measured it myself this morning.  &quot;INVPCID Type 3&quot; (all
contexts no global) on a Skylake system was 15% slower than a CR3 write.

Is that in the same ballpark from what you&#39;ve observed?
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 13, 2016, 11:51 p.m.</div>
<pre class="content">
On Wed, Jan 13, 2016 at 3:43 PM, Dave Hansen
&lt;dave.hansen@linux.intel.com&gt; wrote:
<span class="quote">&gt; On 01/13/2016 03:35 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; Can anyone here ask a hardware or microcode person what&#39;s going on</span>
<span class="quote">&gt;&gt; with CR3 writes possibly being faster than INVPCID?  Is there some</span>
<span class="quote">&gt;&gt; trick to it?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; I just went and measured it myself this morning.  &quot;INVPCID Type 3&quot; (all</span>
<span class="quote">&gt; contexts no global) on a Skylake system was 15% slower than a CR3 write.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Is that in the same ballpark from what you&#39;ve observed?</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;</span>

It&#39;s similar, except that I was comparing &quot;INVPCID Type 1&quot; (single
context no globals) to a CR3 write.

Type 2, at least, is dramatically faster than the pair of CR4 writes
it replaces.

--Andy
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=64071">Dave Hansen</a> - Jan. 13, 2016, 11:56 p.m.</div>
<pre class="content">
On 01/13/2016 03:51 PM, Andy Lutomirski wrote:
<span class="quote">&gt; On Wed, Jan 13, 2016 at 3:43 PM, Dave Hansen</span>
<span class="quote">&gt; &lt;dave.hansen@linux.intel.com&gt; wrote:</span>
<span class="quote">&gt;&gt; On 01/13/2016 03:35 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt; Can anyone here ask a hardware or microcode person what&#39;s going on</span>
<span class="quote">&gt;&gt;&gt; with CR3 writes possibly being faster than INVPCID?  Is there some</span>
<span class="quote">&gt;&gt;&gt; trick to it?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; I just went and measured it myself this morning.  &quot;INVPCID Type 3&quot; (all</span>
<span class="quote">&gt;&gt; contexts no global) on a Skylake system was 15% slower than a CR3 write.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Is that in the same ballpark from what you&#39;ve observed?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; It&#39;s similar, except that I was comparing &quot;INVPCID Type 1&quot; (single</span>
<span class="quote">&gt; context no globals) to a CR3 write.</span>

Ahh, because you&#39;re using PCID...  That one I saw as being ~1.85x the
number of cycles that a CR3 write was.
<span class="quote">
&gt; Type 2, at least, is dramatically faster than the pair of CR4 writes</span>
<span class="quote">&gt; it replaces.</span>

Yeah, I saw the same thing.  Type 2 was ~2.4x faster than the CR4 writes.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41531">Andy Lutomirski</a> - Jan. 14, 2016, 12:34 a.m.</div>
<pre class="content">
On Wed, Jan 13, 2016 at 3:56 PM, Dave Hansen
&lt;dave.hansen@linux.intel.com&gt; wrote:
<span class="quote">&gt; On 01/13/2016 03:51 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt; On Wed, Jan 13, 2016 at 3:43 PM, Dave Hansen</span>
<span class="quote">&gt;&gt; &lt;dave.hansen@linux.intel.com&gt; wrote:</span>
<span class="quote">&gt;&gt;&gt; On 01/13/2016 03:35 PM, Andy Lutomirski wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Can anyone here ask a hardware or microcode person what&#39;s going on</span>
<span class="quote">&gt;&gt;&gt;&gt; with CR3 writes possibly being faster than INVPCID?  Is there some</span>
<span class="quote">&gt;&gt;&gt;&gt; trick to it?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; I just went and measured it myself this morning.  &quot;INVPCID Type 3&quot; (all</span>
<span class="quote">&gt;&gt;&gt; contexts no global) on a Skylake system was 15% slower than a CR3 write.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Is that in the same ballpark from what you&#39;ve observed?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; It&#39;s similar, except that I was comparing &quot;INVPCID Type 1&quot; (single</span>
<span class="quote">&gt;&gt; context no globals) to a CR3 write.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Ahh, because you&#39;re using PCID...  That one I saw as being ~1.85x the</span>
<span class="quote">&gt; number of cycles that a CR3 write was.</span>
<span class="quote">&gt;</span>

I think that settles it, then:

if (static_cpu_has_safe(X86_FEATURE_PCID)) {
  raw_local_irqsave();
  native_write_cr3(native_read_cr3());
  raw_local_irqrestore();
} else {
  native_write_cr3(native_read_cr3());
}

I don&#39;t think it&#39;s worth hacking more complexity into switch_mm to
make that annoyance go away.

--Andy
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 3d905f12cda9..32e3d8769a22 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -135,7 +135,17 @@</span> <span class="p_context"> static inline void cr4_set_bits_and_update_boot(unsigned long mask)</span>
 
 static inline void __native_flush_tlb(void)
 {
<span class="p_add">+	unsigned long flags;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * We mustn&#39;t be preempted or handle an IPI while reading and</span>
<span class="p_add">+	 * writing CR3.  Preemption could switch mms and switch back, and</span>
<span class="p_add">+	 * an IPI could call leave_mm.  Either of those could cause our</span>
<span class="p_add">+	 * PCID to change asynchronously.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	raw_local_irq_save(flags);</span>
 	native_write_cr3(native_read_cr3());
<span class="p_add">+	raw_local_irq_restore(flags);</span>
 }
 
 static inline void __native_flush_tlb_global_irq_disabled(void)

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



