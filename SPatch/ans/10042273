
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[GIT,PULL] x86 fixes - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [GIT,PULL] x86 fixes</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 5, 2017, 2:46 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20171105144651.rey63ibj2wavzqwm@gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10042273/mbox/"
   >mbox</a>
|
   <a href="/patch/10042273/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10042273/">/patch/10042273/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	94F206037D for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Nov 2017 14:46:59 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 85DDF28E60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Nov 2017 14:46:59 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 79E51290A8; Sun,  5 Nov 2017 14:46:59 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.3 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI, RCVD_IN_SORBS_SPAM,
	T_DKIM_INVALID autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id DE3CD28E60
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Sun,  5 Nov 2017 14:46:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751779AbdKEOq5 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 5 Nov 2017 09:46:57 -0500
Received: from mail-wm0-f68.google.com ([74.125.82.68]:45469 &quot;EHLO
	mail-wm0-f68.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1750928AbdKEOqz (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 5 Nov 2017 09:46:55 -0500
Received: by mail-wm0-f68.google.com with SMTP id y80so9231094wmd.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Sun, 05 Nov 2017 06:46:54 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20161025;
	h=sender:date:from:to:cc:subject:message-id:mime-version
	:content-disposition:user-agent;
	bh=ZY2jS38bRaKSz/oIjFPujVirtgEi+jvLuoFJjB4E7UU=;
	b=mHpTIxCoEvn+Hb1xMvEy5CaymFUjxXI/OCQSWCkW0DNp8SllTkS+mBunf818PEU0MR
	gVYNCuSfIXc1PzSrG1dtTROtPUxPuHKiTIW+LnDzcXvineTMEc9MbBacD6jLNvTQ8mpi
	6ZkOehWGWx/r4HDUQszvDdzO4Kkmj8E4L+FFbCxAiivztn/xwZTw3WA7TRBwg8ImHXg8
	a6l1pNXKwIeXeP+VMkh/acu/2cLizoAXU0YFOsXTm8uLzZU9quWt72VThx06VnYn+T4/
	2q7JnbAOxFQxyFTruI8hgHDSEpatdHoE8Hut15/orRquIQ/rRytfUVDzxVqNIT5EhlkK
	okyA==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:sender:date:from:to:cc:subject:message-id
	:mime-version:content-disposition:user-agent;
	bh=ZY2jS38bRaKSz/oIjFPujVirtgEi+jvLuoFJjB4E7UU=;
	b=GfFGhGZO+/oNesPcSJiRoFV2iqKZLU8StG2hltYCpqeWPrsEdLTm+FfAkGjfEOsSMB
	vHBbJzoIaq5Jd3TGn1L6qjJqP3Y7WzY8CjAZi2eJPcvjDFgIzvqJxvt8GxJbot7sfxJt
	YroXZ0KklMuPyrUVUcExeW13Cxt8KKyqyRXcLSYH2ivH9Y8aIyM/h6eHEgjYcR/fnwqC
	4YlFEDM7PCPF9iTZbQB786tU+B/I87jotRzcqQEAAbjjiq1SGSRC5ZX4kZvlEPiyl2yP
	HQdZyT5YqBzToTZ1QPBhsW3hbY+KpguQd/6ZLyoSNpO77Ez14UN1cgwEEOp7r3J9xoN9
	m5IA==
X-Gm-Message-State: AJaThX4rPI/0Vf/YpLrYZHA/RMoT5mSe3+t+/nkf5VeWxtEzM1qKt4AI
	eGixA1hmjTKGQkzXfQSJqynOFw==
X-Google-Smtp-Source: ABhQp+TTeYf89e5u4eI4n1h3ypNfOx79M9Tljju/UjGtpVxLDpRguHW+7KF1KAkEYlgJGdNichIezQ==
X-Received: by 10.28.68.135 with SMTP id r129mr2970399wma.28.1509893214151; 
	Sun, 05 Nov 2017 06:46:54 -0800 (PST)
Received: from gmail.com (2E8B0CD5.catv.pool.telekom.hu. [46.139.12.213])
	by smtp.gmail.com with ESMTPSA id
	f84sm8909219wmh.47.2017.11.05.06.46.53
	(version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
	Sun, 05 Nov 2017 06:46:53 -0800 (PST)
Date: Sun, 5 Nov 2017 15:46:51 +0100
From: Ingo Molnar &lt;mingo@kernel.org&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: linux-kernel@vger.kernel.org, Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;, Borislav Petkov &lt;bp@alien8.de&gt;,
	Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Subject: [GIT PULL] x86 fixes
Message-ID: &lt;20171105144651.rey63ibj2wavzqwm@gmail.com&gt;
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: NeoMutt/20170609 (1.8.3)
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - Nov. 5, 2017, 2:46 p.m.</div>
<pre class="content">
Linus,

Please pull the latest x86-urgent-for-linus git tree from:

   git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git x86-urgent-for-linus

   # HEAD: eda9cec4c9a12208a6f69fbe68f72a6311d50032 x86/module: Detect and skip invalid relocations

Two fixes:

 - A PCID related revert that fixes power management and performance regressions.

 - The module loader robustization and sanity check commit is rather fresh, but it
   looked like a good idea to apply because of the hidden data corruption problem
   such invalid modules could cause.


  out-of-topic modifications in x86-urgent-for-linus:
  -----------------------------------------------------
  arch/ia64/include/asm/acpi.h       # 675357362aeb: Revert &quot;x86/mm: Stop calling
  drivers/acpi/processor_idle.c      # 675357362aeb: Revert &quot;x86/mm: Stop calling
  drivers/idle/intel_idle.c          # 675357362aeb: Revert &quot;x86/mm: Stop calling

 Thanks,

	Ingo

------------------&gt;
Andy Lutomirski (1):
      Revert &quot;x86/mm: Stop calling leave_mm() in idle code&quot;

Josh Poimboeuf (1):
      x86/module: Detect and skip invalid relocations


 arch/ia64/include/asm/acpi.h  |  2 ++
 arch/x86/include/asm/acpi.h   |  2 ++
 arch/x86/kernel/module.c      | 13 +++++++++++++
 arch/x86/mm/tlb.c             | 17 ++++++++++++++---
 drivers/acpi/processor_idle.c |  2 ++
 drivers/idle/intel_idle.c     |  9 +++++----
 6 files changed, 38 insertions(+), 7 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/ia64/include/asm/acpi.h b/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">index c86a947f5368..a3d0211970e9 100644</span>
<span class="p_header">--- a/arch/ia64/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/ia64/include/asm/acpi.h</span>
<span class="p_chunk">@@ -112,6 +112,8 @@</span> <span class="p_context"> static inline void arch_acpi_set_pdc_bits(u32 *buf)</span>
 	buf[2] |= ACPI_PDC_EST_CAPABILITY_SMP;
 }
 
<span class="p_add">+#define acpi_unlazy_tlb(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_NUMA
 extern cpumask_t early_cpu_possible_map;
 #define for_each_possible_early_cpu(cpu)  \
<span class="p_header">diff --git a/arch/x86/include/asm/acpi.h b/arch/x86/include/asm/acpi.h</span>
<span class="p_header">index 72d867f6b518..8d0ec9df1cbe 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/acpi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/acpi.h</span>
<span class="p_chunk">@@ -150,6 +150,8 @@</span> <span class="p_context"> static inline void disable_acpi(void) { }</span>
 extern int x86_acpi_numa_init(void);
 #endif /* CONFIG_ACPI_NUMA */
 
<span class="p_add">+#define acpi_unlazy_tlb(x)	leave_mm(x)</span>
<span class="p_add">+</span>
 #ifdef CONFIG_ACPI_APEI
 static inline pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
 {
<span class="p_header">diff --git a/arch/x86/kernel/module.c b/arch/x86/kernel/module.c</span>
<span class="p_header">index 62e7d70aadd5..da0c160e5589 100644</span>
<span class="p_header">--- a/arch/x86/kernel/module.c</span>
<span class="p_header">+++ b/arch/x86/kernel/module.c</span>
<span class="p_chunk">@@ -172,19 +172,27 @@</span> <span class="p_context"> int apply_relocate_add(Elf64_Shdr *sechdrs,</span>
 		case R_X86_64_NONE:
 			break;
 		case R_X86_64_64:
<span class="p_add">+			if (*(u64 *)loc != 0)</span>
<span class="p_add">+				goto invalid_relocation;</span>
 			*(u64 *)loc = val;
 			break;
 		case R_X86_64_32:
<span class="p_add">+			if (*(u32 *)loc != 0)</span>
<span class="p_add">+				goto invalid_relocation;</span>
 			*(u32 *)loc = val;
 			if (val != *(u32 *)loc)
 				goto overflow;
 			break;
 		case R_X86_64_32S:
<span class="p_add">+			if (*(s32 *)loc != 0)</span>
<span class="p_add">+				goto invalid_relocation;</span>
 			*(s32 *)loc = val;
 			if ((s64)val != *(s32 *)loc)
 				goto overflow;
 			break;
 		case R_X86_64_PC32:
<span class="p_add">+			if (*(u32 *)loc != 0)</span>
<span class="p_add">+				goto invalid_relocation;</span>
 			val -= (u64)loc;
 			*(u32 *)loc = val;
 #if 0
<span class="p_chunk">@@ -200,6 +208,11 @@</span> <span class="p_context"> int apply_relocate_add(Elf64_Shdr *sechdrs,</span>
 	}
 	return 0;
 
<span class="p_add">+invalid_relocation:</span>
<span class="p_add">+	pr_err(&quot;x86/modules: Skipping invalid relocation target, existing value is nonzero for type %d, loc %p, val %Lx\n&quot;,</span>
<span class="p_add">+	       (int)ELF64_R_TYPE(rel[i].r_info), loc, val);</span>
<span class="p_add">+	return -ENOEXEC;</span>
<span class="p_add">+</span>
 overflow:
 	pr_err(&quot;overflow in relocation type %d val %Lx\n&quot;,
 	       (int)ELF64_R_TYPE(rel[i].r_info), val);
<span class="p_header">diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c</span>
<span class="p_header">index 0f3d0cea4d00..3118392cdf75 100644</span>
<span class="p_header">--- a/arch/x86/mm/tlb.c</span>
<span class="p_header">+++ b/arch/x86/mm/tlb.c</span>
<span class="p_chunk">@@ -85,6 +85,7 @@</span> <span class="p_context"> void leave_mm(int cpu)</span>
 
 	switch_mm(NULL, &amp;init_mm, NULL);
 }
<span class="p_add">+EXPORT_SYMBOL_GPL(leave_mm);</span>
 
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
<span class="p_chunk">@@ -195,12 +196,22 @@</span> <span class="p_context"> void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,</span>
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].ctx_id, next-&gt;context.ctx_id);
 			this_cpu_write(cpu_tlbstate.ctxs[new_asid].tlb_gen, next_tlb_gen);
 			write_cr3(build_cr3(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH,</span>
<span class="p_del">-					TLB_FLUSH_ALL);</span>
<span class="p_add">+</span>
<span class="p_add">+			/*</span>
<span class="p_add">+			 * NB: This gets called via leave_mm() in the idle path</span>
<span class="p_add">+			 * where RCU functions differently.  Tracing normally</span>
<span class="p_add">+			 * uses RCU, so we need to use the _rcuidle variant.</span>
<span class="p_add">+			 *</span>
<span class="p_add">+			 * (There is no good reason for this.  The idle code should</span>
<span class="p_add">+			 *  be rearranged to call this before rcu_idle_enter().)</span>
<span class="p_add">+			 */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, TLB_FLUSH_ALL);</span>
 		} else {
 			/* The new ASID is already up to date. */
 			write_cr3(build_cr3_noflush(next, new_asid));
<span class="p_del">-			trace_tlb_flush(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
<span class="p_add">+</span>
<span class="p_add">+			/* See above wrt _rcuidle. */</span>
<span class="p_add">+			trace_tlb_flush_rcuidle(TLB_FLUSH_ON_TASK_SWITCH, 0);</span>
 		}
 
 		this_cpu_write(cpu_tlbstate.loaded_mm, next);
<span class="p_header">diff --git a/drivers/acpi/processor_idle.c b/drivers/acpi/processor_idle.c</span>
<span class="p_header">index 2736e25e9dc6..d50a7b6ccddd 100644</span>
<span class="p_header">--- a/drivers/acpi/processor_idle.c</span>
<span class="p_header">+++ b/drivers/acpi/processor_idle.c</span>
<span class="p_chunk">@@ -710,6 +710,8 @@</span> <span class="p_context"> static DEFINE_RAW_SPINLOCK(c3_lock);</span>
 static void acpi_idle_enter_bm(struct acpi_processor *pr,
 			       struct acpi_processor_cx *cx, bool timer_bc)
 {
<span class="p_add">+	acpi_unlazy_tlb(smp_processor_id());</span>
<span class="p_add">+</span>
 	/*
 	 * Must be done before busmaster disable as we might need to
 	 * access HPET !
<span class="p_header">diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c</span>
<span class="p_header">index 5dc7ea4b6bc4..f0b06b14e782 100644</span>
<span class="p_header">--- a/drivers/idle/intel_idle.c</span>
<span class="p_header">+++ b/drivers/idle/intel_idle.c</span>
<span class="p_chunk">@@ -913,15 +913,16 @@</span> <span class="p_context"> static __cpuidle int intel_idle(struct cpuidle_device *dev,</span>
 	struct cpuidle_state *state = &amp;drv-&gt;states[index];
 	unsigned long eax = flg2MWAIT(state-&gt;flags);
 	unsigned int cstate;
<span class="p_add">+	int cpu = smp_processor_id();</span>
 
 	cstate = (((eax) &gt;&gt; MWAIT_SUBSTATE_SIZE) &amp; MWAIT_CSTATE_MASK) + 1;
 
 	/*
<span class="p_del">-	 * NB: if CPUIDLE_FLAG_TLB_FLUSHED is set, this idle transition</span>
<span class="p_del">-	 * will probably flush the TLB.  It&#39;s not guaranteed to flush</span>
<span class="p_del">-	 * the TLB, though, so it&#39;s not clear that we can do anything</span>
<span class="p_del">-	 * useful with this knowledge.</span>
<span class="p_add">+	 * leave_mm() to avoid costly and often unnecessary wakeups</span>
<span class="p_add">+	 * for flushing the user TLB&#39;s associated with the active mm.</span>
 	 */
<span class="p_add">+	if (state-&gt;flags &amp; CPUIDLE_FLAG_TLB_FLUSHED)</span>
<span class="p_add">+		leave_mm(cpu);</span>
 
 	if (!(lapic_timer_reliable_states &amp; (1 &lt;&lt; (cstate))))
 		tick_broadcast_enter();

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



