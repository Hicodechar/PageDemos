
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,v1,20/28] KVM: SVM: prepare for SEV guest management API support - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,v1,20/28] KVM: SVM: prepare for SEV guest management API support</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 22, 2016, 11:28 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;147190848221.9523.931142742439444357.stgit@brijesh-build-machine&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9294813/mbox/"
   >mbox</a>
|
   <a href="/patch/9294813/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9294813/">/patch/9294813/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	7570E607FF for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Aug 2016 00:01:41 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 6387128A9B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Aug 2016 00:01:41 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 5692528AA0; Tue, 23 Aug 2016 00:01:41 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 596E128A9B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 23 Aug 2016 00:01:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1757313AbcHWABa (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 22 Aug 2016 20:01:30 -0400
Received: from mail-sn1nam01on0083.outbound.protection.outlook.com
	([104.47.32.83]:62399
	&quot;EHLO NAM01-SN1-obe.outbound.protection.outlook.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1757292AbcHWAB0 (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 22 Aug 2016 20:01:26 -0400
X-Greylist: delayed 1298 seconds by postgrey-1.27 at vger.kernel.org;
	Mon, 22 Aug 2016 20:01:25 EDT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=amdcloud.onmicrosoft.com; s=selector1-amd-com;
	h=From:Date:Subject:Message-ID:Content-Type:MIME-Version;
	bh=ZMWPpfxUfjgRNzIl6stUkf/lyoK0zA6EuEauEePa0a0=;
	b=A2IvVWkCgX6fkEcbkXIWlKCQA5O23sry91HZGyR6krqArthPNRN3Qt/MQriM2tY9x1qY40lxYyKjMPifj8Zaix1296P8iwZFexnYXlhobTKeQbOPRSBlQZOPfkPxvtAvRYF2O6pec9sOKyWcGlCrJ7CP6X1gd9OV+dPAFRQ/N+E=
Authentication-Results: spf=none (sender IP is )
	smtp.mailfrom=brijesh.singh@amd.com; 
Received: from [127.0.1.1] (165.204.77.1) by
	CY1PR12MB0667.namprd12.prod.outlook.com (10.163.238.152) with
	Microsoft SMTP Server (version=TLS1_0,
	cipher=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA_P384) id
	15.1.557.21; Mon, 22 Aug 2016 23:28:06 +0000
Subject: [RFC PATCH v1 20/28] KVM: SVM: prepare for SEV guest management API
	support
From: Brijesh Singh &lt;brijesh.singh@amd.com&gt;
To: &lt;simon.guinot@sequanux.org&gt;, &lt;linux-efi@vger.kernel.org&gt;,
	&lt;brijesh.singh@amd.com&gt;, &lt;kvm@vger.kernel.org&gt;,
	&lt;rkrcmar@redhat.com&gt;, &lt;matt@codeblueprint.co.uk&gt;,
	&lt;linus.walleij@linaro.org&gt;, &lt;linux-mm@kvack.org&gt;,
	&lt;paul.gortmaker@windriver.com&gt;, &lt;hpa@zytor.com&gt;,
	&lt;dan.j.williams@intel.com&gt;, &lt;aarcange@redhat.com&gt;,
	&lt;sfr@canb.auug.org.au&gt;, &lt;andriy.shevchenko@linux.intel.com&gt;,
	&lt;herbert@gondor.apana.org.au&gt;, &lt;bhe@redhat.com&gt;,
	&lt;xemul@parallels.com&gt;, &lt;joro@8bytes.org&gt;, &lt;x86@kernel.org&gt;,
	&lt;mingo@redhat.com&gt;, &lt;msalter@redhat.com&gt;,
	&lt;ross.zwisler@linux.intel.com&gt;, &lt;bp@suse.de&gt;, &lt;dyoung@redhat.com&gt;,
	&lt;thomas.lendacky@amd.com&gt;, &lt;jroedel@suse.de&gt;,
	&lt;keescook@chromium.org&gt;, &lt;toshi.kani@hpe.com&gt;,
	&lt;mathieu.desnoyers@efficios.com&gt;, &lt;devel@linuxdriverproject.org&gt;,
	&lt;tglx@linutronix.de&gt;, &lt;mchehab@kernel.org&gt;,
	&lt;iamjoonsoo.kim@lge.com&gt;, &lt;labbott@fedoraproject.org&gt;,
	&lt;tony.luck@intel.com&gt;, &lt;alexandre.bounine@idt.com&gt;,
	&lt;kuleshovmail@gmail.com&gt;, &lt;linux-kernel@vger.kernel.org&gt;,
	&lt;mcgrof@kernel.org&gt;, &lt;linux-crypto@vger.kernel.org&gt;,
	&lt;pbonzini@redhat.com&gt;, &lt;akpm@linux-foundation.org&gt;, &lt;davem@davemloft.net&gt;
Date: Mon, 22 Aug 2016 19:28:02 -0400
Message-ID: &lt;147190848221.9523.931142742439444357.stgit@brijesh-build-machine&gt;
In-Reply-To: &lt;147190820782.9523.4967724730957229273.stgit@brijesh-build-machine&gt;
References: &lt;147190820782.9523.4967724730957229273.stgit@brijesh-build-machine&gt;
User-Agent: StGit/0.17.1-dirty
MIME-Version: 1.0
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit
X-Originating-IP: [165.204.77.1]
X-ClientProxiedBy: BN6PR17CA0029.namprd17.prod.outlook.com (10.175.189.15) To
	CY1PR12MB0667.namprd12.prod.outlook.com (10.163.238.152)
X-MS-Office365-Filtering-Correlation-Id: 8a4fe64d-99d6-4d1f-6c6c-08d3cae3fafb
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0667;
	2:yxrefCUd3cwTcwVbO5W0c0v8Mcdrn5DUPB/A7QRDRoOccJzEPtm7QGUFIWa5OjdU7Wa+wHd+lSbXNL9gcHkWOUMdsWY0A+szfLOfWiRulAqrCyHxPRccU4Bl7a0kI7QWGaiLoqFACtOVdOfoc7oSm8NP+NyYSVXsH2ePRpfcuQn7OMkatGnJqtM8EwMIcUsz;
	3:rDiuqPGdLr+Xm7vyfVQsH6p1728k6HBJw8q9jo9P6rtsTwye2/hs6UV+zQCThwEs11DCqXPXpL3pUPVnp8qULy3L0xOTu7rL+EsnVO08CaX6P50eJyMaz+rSq+O73GqK;
	25:YSxVtnU9sQ0KGYFbzRgd8JbEK4usvSrCyS3EU5BjVt+uF2fGf6ZXjWMygJ+YnEF6R2/7aaBvlneiMrfHAZEBfTtHw/KDaNeVTN+aulZF1G1PjLkIjCiZJcBIbHS/JZs8Wy5o2y9i8JzvHoN07BnHNMti5l7LWTqQJqs9bRpoxnmjkK4UhMnVzFM/1mf99KtNLqQVNp1b47Ta/N2naJaVfEFRxBepqPvhNf35FSjrobDCfB0IWU/eSKU44aHiovYSU6qCm2UWiLs32QOtQ6utK7ILrhgPnaKjyAPBOszHofPjl+L62L4oAFR+bTmh2iLnmv8DZQUVzqMQ4kI6gmbiLDnvK0/38Sj6H8nPq2iE1XPl6y3ke7lR72sJzwR35CXbWSwSmFzdOXbR8m8CGN/AffLTc5mNJRW5RjA4e855gjw=
X-Microsoft-Antispam: UriScan:;BCL:0;PCL:0;RULEID:;SRVR:CY1PR12MB0667;
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0667;
	31:QI36LoSIUfe4ic6fN80B24KMgQeNCQdVdmsUzygzDOM7m/i5ZjXXlCeJ0RvtLSCXNGOrZsrWUFIGS4UKpawwp4+0sRO50aRzpDTw1l2Rwq3AsuztzCkC3WbCm7K2Euy6JTJ6SfuMORVbD5H1ek3Kcn12ZWC5itvE4GLBR1qGywjd7XGqxIyLE/1Nw2pDCmdw+PcwKV9JAvWc1MdVvc8JK9kgFjeiDAFCD+ELaZcLhIY=;
	20:1wSCmE+Eckud3uThTWBUBCK7RuQuoXNmMxiyxSCqzC63UkwO5GTQbcQrU9Ot5MU8tZ/AYfafJpQ3mOmydNi0dnveizuTyk4q8HRUBeWfgDvyWbBrdyy68Q2k1ocPirbelyQw5u8eyQ2iWP4FmcjKm6YS0MbE2XIASmU8DW+zF9ZU+MPavqqXN5ZsLAiEIJ2xkvVZw/GQIePLyGVUPjEc/XATYNc2CD2yezk4G+Sn58MRKoKvAnrMPYEuWSNhEZk46yB6SgejA6q7t7RLIOLD7mqIp5eiHyXGR249zYJ9P+gL3uzqpKIAcd3mT6fTbavzWY2YA8yQMPEAHc6ASdBflcskWO5nYuTObNJT1CKWxd+p2c2jqdNXseIdkT0t9MIR1GemuYdYF8xrOeYhz3+OgD1kzE0+015XRIZL4KVUf+KPfQCyTCHW56sY51p0rlCeXiZATS/Q4peeqcf6+e0zx+Tq7m6q6v6A82jDrtaIygfKHQbdPuGIxzKkfCuARJZR
X-Microsoft-Antispam-PRVS: &lt;CY1PR12MB0667C38F00088F4FE5417656E5E80@CY1PR12MB0667.namprd12.prod.outlook.com&gt;
X-Exchange-Antispam-Report-Test: UriScan:(767451399110);
X-Exchange-Antispam-Report-CFA-Test: BCL:0; PCL:0;
	RULEID:(6040176)(601004)(2401047)(5005006)(8121501046)(10201501046)(3002001)(6055026);
	SRVR:CY1PR12MB0667; BCL:0; PCL:0; RULEID:; SRVR:CY1PR12MB0667;
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0667;
	4:UHZUmt7XFWoaugQMLnBLnCcirZBXEpqOfBu6uxSAxwsD8qCIknjtm5c936UjicZ7jmMT9MZ3vP7+iSEb1XgO/RANE6/yrJVwrKoa8DQS6VxH7d3NQeJjlhJ65NBS3nbGx5MuEgsvpadsaDHKURZmExyc2L4Na9+lRtzdbs09WIrYRYgBY8TdEeYggMtihU/V3afK4n48/kpLEVcUmWx03JOzGEdSVvmHjjPBIJk9imhmqOu8oTV66I+8yfCtskX2tN6rw/NOR6Rq+k77TUijOJzEgxnFmuIULPpITe0McfDfoyZ+HfSJ+68X4xuDZoNq8QXa7vTP9CAtB35P1+PRttRNwLUpHFoCqCiEY67PY4nO4FFHnfjtKUDPYBP5qei7JBAn+j//tOMphsJveWGFnqJweWmEU8MvkOeVXfd3KT5hnljulxl6FdlaeryTOgFK
X-Forefront-PRVS: 00429279BA
X-Forefront-Antispam-Report: SFV:NSPM;
	SFS:(10009020)(4630300001)(6049001)(6009001)(7916002)(189002)(199003)(2201001)(19580395003)(230700001)(33716001)(23676002)(66066001)(19580405001)(107886002)(189998001)(83506001)(97736004)(86362001)(229853001)(5001770100001)(77096005)(106356001)(4001350100001)(42186005)(5660300001)(7846002)(305945005)(7736002)(586003)(9686002)(68736007)(33646002)(50466002)(105586002)(81166006)(81156014)(8676002)(47776003)(2906002)(101416001)(6116002)(7406005)(3846002)(7416002)(103116003)(2950100001)(50986999)(76176999)(54356999)(92566002)(921003)(83996005)(217873001)(2101003)(1121003);
	DIR:OUT; SFP:1101; SCL:1; SRVR:CY1PR12MB0667; H:[127.0.1.1];
	FPR:; SPF:None; PTR:InfoNoRecords; MX:1; A:1; LANG:en; 
Received-SPF: None (protection.outlook.com: amd.com does not designate
	permitted sender hosts)
X-Microsoft-Exchange-Diagnostics: =?utf-8?B?MTtDWTFQUjEyTUIwNjY3OzIzOndjVG41UksxMlA1YnZ0SWd1cEozaWZES3NS?=
	=?utf-8?B?czJEcmxmVnR1REtYT1ZjUWxwYVBMdXpCemh4dmZYSU5uNFBBWW9sckRDNEI3?=
	=?utf-8?B?dm9Zd2pISUxScVFYN3BsSUtqTm1jdEpDY2IzQWhMZk5ycnpQRVhudkljczc4?=
	=?utf-8?B?b2Q0UEhPR3g1T3BjM0JLYU0rL3FpUjYxbVBQa0lNWHdTYWsrbzMwUlpCNFQ4?=
	=?utf-8?B?VllhMEJpSG51Yk9GbXc4T3haaHZQeVJKYVl1b0NXTDc2T0hyTDhhRXBxM1FJ?=
	=?utf-8?B?eXJHalh3TUhLckUranJXazVIU2lVM1hCOGxXTC9qV3M1OXd0QnZlYUdyR0Js?=
	=?utf-8?B?WnI5a2RwMlhVdE9ZeGZnSDd6VHdFUkxaUVVVby9YS2pPeWRmeDBQWUZmOFlr?=
	=?utf-8?B?NGNaTTBUMHBLejgwSmdsZC9UWGtYbnluUDQyQ1M2dlY0dUkxNTJ6NGsvZ0lF?=
	=?utf-8?B?RmorcjlkZmZoby8vYkVRbjFvVS9QKzZzc05NMDU3cExzbUg2WEJIVkdvSmJq?=
	=?utf-8?B?aHBhR3NTdkdiZitBZFJCUExYcjJVM04vdHU4QXA0SVowcWVKdGpzc0ZHaVo4?=
	=?utf-8?B?VWE5SE1FaDl2aVNKOVFmZENlRWJzNGpSUXlmMi92aStTNDJDcHpNbzJuMmxV?=
	=?utf-8?B?T05QTUFucUJCNUVOWVUrQU9CdFJ4YktTUldBQzMzU1BPdWZEZ2srbUROUUU3?=
	=?utf-8?B?S2dWWlhUNmQydVZmL3pDM1R4MU4rQ1BOSTIwdDV0RmNiZ0pHUmpYNVNxeXZX?=
	=?utf-8?B?Vmw0bzZUNDIvdXpHc2Y3TStFdjlrNEVkeHArNlpMejFYSTEyaWgwaWNBMjNy?=
	=?utf-8?B?MEQ2NlVwVkF1TzNBanNyLzM5dnoxc2J2aGs0Y3FLeWlUd1FOcHlBTENUbFN5?=
	=?utf-8?B?WVYyN1JQbEU4dENEbFcvekV4KzNLZmovR2paR3B0WkZONTNoTmdmdnd3MlZJ?=
	=?utf-8?B?Qi8zK0x1d2toQ081YVJRNmNqNGFCTlltNVZlUWFqTHZhWDJFK3NqUURLdXUv?=
	=?utf-8?B?OW5Ndy9SZldSejRWSWdkRmRoUHpubGxSR1RwZlFDMFhKUUFHQ3NJdnVJY2VQ?=
	=?utf-8?B?dHB2ZjU3NU1Fb1FjaCtkSDJhVG9OUFVjcUx6ZUZNSmt4aTFrSWpEekhtYzNi?=
	=?utf-8?B?WTlGVFFFYncxOXFpU04vcXJ1WFF4dldLNDFRWUNvTXpua3hrV2MxNjRXLzZK?=
	=?utf-8?B?QTczb0JqaWtKT2ZOVXpkeXZaaXY1Wm85Q2JVTFBnVis5dTA5UTcybDBzK2xS?=
	=?utf-8?B?OXlPQXJuVmNzNzVTZDRFZmxRN3RDSWU0OVRrSDNKTEx2Nk1NeDYwOEhLbHhx?=
	=?utf-8?B?bkZoSFM4Sk44ajd3UG1Ibi9oY09NVzFWYU5xcTIyVzl1Z1IwMmh5bFRjdmpC?=
	=?utf-8?B?eC9HN1NiNEFkS0o2MHlNZVM0RCtLaTg0d3lwZ0JKeUZkVUMzd2c0d09DVXhj?=
	=?utf-8?B?QzZzV2tiQ2c3VFM2ZkozazJ4RzJRZVBPc3I5REJST3NEenlNaXlGRkJhOXFj?=
	=?utf-8?B?QmdGc0pZOHpoOHVaQklBWWgzRDdCWFZTazZSNHRvNFZnMllGeHV6L3NiWFp5?=
	=?utf-8?B?ZzhCak1JcEV5WDJLWHJxZUU4S2lsaHVVVGVHLzVWeHBYd2c4V3dwYTFLQWxk?=
	=?utf-8?B?QksyaTYyaVRJS1MvaXJ6eno3MkdXSDNDa2MvQXdoVUNRUzBodG1BQ2pGaXJU?=
	=?utf-8?B?OGxYVE5EUjFNWHZOUHM0bHNSajVFajM2T1pmVW9zb2l2NUJMR0VkQkFBcTNJ?=
	=?utf-8?B?bm50SjhQeExzNVpCeEF0bys1WnB2YUN5ZlJZRkR2RVorVjI3UU5KbGxGWmRk?=
	=?utf-8?Q?xItFKzkA1TsJR?=
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0667;
	6:9HcZvuNtKRaqvm4TwYaURwNOauTlnpme1pUEUsNeAJknOqvn6SyP5cXlDFBeLBe1XK/ZX+zXj6SQEOxwte5hlA7P1Y/t+N6TgcgpWTfIU3hlAaxm+aQMj2ISxQvoigouEs3P3qXoj970xQ5RM2tIBudirIo7WZAZOiz2LzmR7ObjDF0AugRuzLlfkG3yW1sFP+97rNABkTpRPhnSsQ1x12ydmNEir0iuJyTiLxDttW7lNpuDIoYrv1aXETRACjXLCZDoxW9FfhkIBtwJbz9wzmXwxpuvF4j5+2jt+VuZqBSECo4kYRsB3bFGMWBpwrF3rK5qm8T6MCaAup1uj0L8QQ==;
	5:7xZ2krBKy2jK0b6sOIMpESXvGdJ0x2EGOwiB/1TxJ5SHloJJo5hxCY0HIv7E813Md41CorJexSgQzQrCaZ6ouGDG5PEyqNBZWe33/x7nUXqYCrX11iBFscEBIC2j15QehoRQdi6fuuonuVuptbRUTw==;
	24:Ncf13hTnfyk3kGu5ZHu4GBVjef+ZsLrT7YbpCZ/BHgW07ByX3+cqde2rMOBYnOF6XAor7HGGfDbDQII+SK4oj4PuVHopuv072eJ/xT1m1s8=;
	7:BDt3sCfQIRY5Sfstz2geBApx8B2qxhh3e074VWtUUOf5icHcHE8TyebQktRR5o1NVd2qei+88mfwoG6c9j88QSjWujvIUIbq7ReEon8N0Z6XKNY74S36XFic1EESlCMzi+tn+2vA+yyR7sLE2Kae6lahVI3MyqigfSCrLP4Ymfpq/5EoqJehr75Azb5mNA6LWwgwKUCK4aCcOk8aFvI5YonHGTjGHo5gwIrfvQkN9ct7UvK+wfw58Pltcf2PW0eZ
SpamDiagnosticOutput: 1:99
SpamDiagnosticMetadata: NSPM
X-Microsoft-Exchange-Diagnostics: 1; CY1PR12MB0667;
	20:U96DXnh+V7SdMB9wRiQRP2U8Py1eddCz9tJ0cwz3zDfrhoWuOjXiy6kFA7byoukZYVhISxfjkp0aZDkUMfFR/8kljQkZ/TCUsepZzZGDGoRa4axUopDr122pkQeGtnMZ4VJkppciUs6j2QIng6xp6Vrz1Ng2fEADEtSK9/EEttjJCkije98N+F6ut6gcBk8HH41H2DADxPZxiL9hvZ6N3pFf3b2Fcu3TZPoEuTZ0705ru9EOwGZiAFxeqQ7yLN1b
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 22 Aug 2016 23:28:06.3845
	(UTC)
X-MS-Exchange-CrossTenant-FromEntityHeader: Hosted
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY1PR12MB0667
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=150921">Brijesh Singh</a> - Aug. 22, 2016, 11:28 p.m.</div>
<pre class="content">
The patch adds initial support required for Secure Encrypted
Virtualization (SEV) guest management API&#39;s.

ASID management:
 - Reserve asid range for SEV guest, SEV asid range is obtained
   through CPUID Fn8000_001f[ECX]. A non-SEV guest can use any
   asid outside the SEV asid range.
 - SEV guest must have asid value within asid range obtained
   through CPUID.
 - SEV guest must have the same asid for all vcpu&#39;s. A TLB flush
   is required if different vcpu for the same ASID is to be run
   on the same host CPU.

- save SEV private structure in kvm_arch.

- If SEV is available then initialize PSP firmware during hardware probe
<span class="signed-off-by">
Signed-off-by: Brijesh Singh &lt;brijesh.singh@amd.com&gt;</span>
---
 arch/x86/include/asm/kvm_host.h |    9 ++
 arch/x86/kvm/svm.c              |  213 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 221 insertions(+), 1 deletion(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">index b1dd673..9b885fc 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/kvm_host.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/kvm_host.h</span>
<span class="p_chunk">@@ -715,6 +715,12 @@</span> <span class="p_context"> struct kvm_hv {</span>
 	u64 hv_crash_ctl;
 };
 
<span class="p_add">+struct kvm_sev_info {</span>
<span class="p_add">+	unsigned int asid;	/* asid for this guest */</span>
<span class="p_add">+	unsigned int handle;	/* firmware handle */</span>
<span class="p_add">+	unsigned int ref_count; /* number of active vcpus */</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
 struct kvm_arch {
 	unsigned int n_used_mmu_pages;
 	unsigned int n_requested_mmu_pages;
<span class="p_chunk">@@ -799,6 +805,9 @@</span> <span class="p_context"> struct kvm_arch {</span>
 
 	bool x2apic_format;
 	bool x2apic_broadcast_quirk_disabled;
<span class="p_add">+</span>
<span class="p_add">+	/* struct for SEV guest */</span>
<span class="p_add">+	struct kvm_sev_info sev_info;</span>
 };
 
 struct kvm_vm_stat {
<span class="p_header">diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c</span>
<span class="p_header">index f010b23..dcee635 100644</span>
<span class="p_header">--- a/arch/x86/kvm/svm.c</span>
<span class="p_header">+++ b/arch/x86/kvm/svm.c</span>
<span class="p_chunk">@@ -34,6 +34,7 @@</span> <span class="p_context"></span>
 #include &lt;linux/sched.h&gt;
 #include &lt;linux/trace_events.h&gt;
 #include &lt;linux/slab.h&gt;
<span class="p_add">+#include &lt;linux/ccp-psp.h&gt;</span>
 
 #include &lt;asm/apic.h&gt;
 #include &lt;asm/perf_event.h&gt;
<span class="p_chunk">@@ -186,6 +187,9 @@</span> <span class="p_context"> struct vcpu_svm {</span>
 	struct page *avic_backing_page;
 	u64 *avic_physical_id_cache;
 	bool avic_is_running;
<span class="p_add">+</span>
<span class="p_add">+	/* which host cpu was used for running this vcpu */</span>
<span class="p_add">+	bool last_cpuid;</span>
 };
 
 #define AVIC_LOGICAL_ID_ENTRY_GUEST_PHYSICAL_ID_MASK	(0xFF)
<span class="p_chunk">@@ -243,6 +247,25 @@</span> <span class="p_context"> static int avic;</span>
 module_param(avic, int, S_IRUGO);
 #endif
 
<span class="p_add">+/* Secure Encrypted Virtualization */</span>
<span class="p_add">+static bool sev_enabled;</span>
<span class="p_add">+static unsigned long max_sev_asid;</span>
<span class="p_add">+static unsigned long *sev_asid_bitmap;</span>
<span class="p_add">+</span>
<span class="p_add">+#define kvm_sev_guest()		(kvm-&gt;arch.sev_info.handle)</span>
<span class="p_add">+#define kvm_sev_handle()	(kvm-&gt;arch.sev_info.handle)</span>
<span class="p_add">+#define kvm_sev_ref()		(kvm-&gt;arch.sev_info.ref_count++)</span>
<span class="p_add">+#define kvm_sev_unref()		(kvm-&gt;arch.sev_info.ref_count--)</span>
<span class="p_add">+#define svm_sev_handle()	(svm-&gt;vcpu.kvm-&gt;arch.sev_info.handle)</span>
<span class="p_add">+#define svm_sev_asid()		(svm-&gt;vcpu.kvm-&gt;arch.sev_info.asid)</span>
<span class="p_add">+#define svm_sev_ref()		(svm-&gt;vcpu.kvm-&gt;arch.sev_info.ref_count++)</span>
<span class="p_add">+#define svm_sev_unref()		(svm-&gt;vcpu.kvm-&gt;arch.sev_info.ref_count--)</span>
<span class="p_add">+#define svm_sev_guest()		(svm-&gt;vcpu.kvm-&gt;arch.sev_info.handle)</span>
<span class="p_add">+#define svm_sev_ref_count()	(svm-&gt;vcpu.kvm-&gt;arch.sev_info.ref_count)</span>
<span class="p_add">+</span>
<span class="p_add">+static int sev_asid_new(void);</span>
<span class="p_add">+static void sev_asid_free(int asid);</span>
<span class="p_add">+</span>
 static void svm_set_cr0(struct kvm_vcpu *vcpu, unsigned long cr0);
 static void svm_flush_tlb(struct kvm_vcpu *vcpu);
 static void svm_complete_interrupts(struct vcpu_svm *svm);
<span class="p_chunk">@@ -474,6 +497,8 @@</span> <span class="p_context"> struct svm_cpu_data {</span>
 	struct kvm_ldttss_desc *tss_desc;
 
 	struct page *save_area;
<span class="p_add">+</span>
<span class="p_add">+	void **sev_vmcb;  /* index = sev_asid, value = vmcb pointer */</span>
 };
 
 static DEFINE_PER_CPU(struct svm_cpu_data *, svm_data);
<span class="p_chunk">@@ -727,7 +752,10 @@</span> <span class="p_context"> static int svm_hardware_enable(void)</span>
 	sd-&gt;asid_generation = 1;
 	sd-&gt;max_asid = cpuid_ebx(SVM_CPUID_FUNC) - 1;
 	sd-&gt;next_asid = sd-&gt;max_asid + 1;
<span class="p_del">-	sd-&gt;min_asid = 1;</span>
<span class="p_add">+	sd-&gt;min_asid = max_sev_asid + 1;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sev_enabled)</span>
<span class="p_add">+		memset(sd-&gt;sev_vmcb, 0, (max_sev_asid + 1) * sizeof(void *));</span>
 
 	native_store_gdt(&amp;gdt_descr);
 	gdt = (struct desc_struct *)gdt_descr.address;
<span class="p_chunk">@@ -788,6 +816,7 @@</span> <span class="p_context"> static void svm_cpu_uninit(int cpu)</span>
 
 	per_cpu(svm_data, raw_smp_processor_id()) = NULL;
 	__free_page(sd-&gt;save_area);
<span class="p_add">+	kfree(sd-&gt;sev_vmcb);</span>
 	kfree(sd);
 }
 
<span class="p_chunk">@@ -805,6 +834,14 @@</span> <span class="p_context"> static int svm_cpu_init(int cpu)</span>
 	if (!sd-&gt;save_area)
 		goto err_1;
 
<span class="p_add">+	if (sev_enabled) {</span>
<span class="p_add">+		sd-&gt;sev_vmcb = kmalloc((max_sev_asid + 1) * sizeof(void *),</span>
<span class="p_add">+					GFP_KERNEL);</span>
<span class="p_add">+		r = -ENOMEM;</span>
<span class="p_add">+		if (!sd-&gt;sev_vmcb)</span>
<span class="p_add">+			goto err_1;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	per_cpu(svm_data, cpu) = sd;
 
 	return 0;
<span class="p_chunk">@@ -931,6 +968,74 @@</span> <span class="p_context"> static void svm_disable_lbrv(struct vcpu_svm *svm)</span>
 	set_msr_interception(msrpm, MSR_IA32_LASTINTTOIP, 0, 0);
 }
 
<span class="p_add">+static __init void sev_hardware_setup(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret, psp_ret;</span>
<span class="p_add">+	struct psp_data_init *init;</span>
<span class="p_add">+	struct psp_data_status *status;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Check SEV Feature Support: Fn8001_001F[EAX]</span>
<span class="p_add">+	 * 	Bit 1: Secure Memory Virtualization supported</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (!(cpuid_eax(0x8000001F) &amp; 0x2))</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Get maximum number of encrypted guest supported: Fn8001_001F[ECX]</span>
<span class="p_add">+	 * 	Bit 31:0: Number of supported guest</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	max_sev_asid = cpuid_ecx(0x8000001F);</span>
<span class="p_add">+	if (!max_sev_asid)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	init = kzalloc(sizeof(*init), GFP_KERNEL);</span>
<span class="p_add">+	if (!init)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	status = kzalloc(sizeof(*status), GFP_KERNEL);</span>
<span class="p_add">+	if (!status)</span>
<span class="p_add">+		goto err_1;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Initialize PSP firmware */</span>
<span class="p_add">+	init-&gt;hdr.buffer_len = sizeof(*init);</span>
<span class="p_add">+	init-&gt;flags = 0;</span>
<span class="p_add">+	ret = psp_platform_init(init, &amp;psp_ret);</span>
<span class="p_add">+	if (ret) {</span>
<span class="p_add">+		printk(KERN_ERR &quot;SEV: PSP_INIT ret=%d (%#x)\n&quot;, ret, psp_ret);</span>
<span class="p_add">+		goto err_2;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Initialize SEV ASID bitmap */</span>
<span class="p_add">+	sev_asid_bitmap = kmalloc(max(sizeof(unsigned long),</span>
<span class="p_add">+				      max_sev_asid/8 + 1), GFP_KERNEL);</span>
<span class="p_add">+	if (IS_ERR(sev_asid_bitmap)) {</span>
<span class="p_add">+		psp_platform_shutdown(&amp;psp_ret);</span>
<span class="p_add">+		goto err_2;</span>
<span class="p_add">+	}</span>
<span class="p_add">+	bitmap_zero(sev_asid_bitmap, max_sev_asid);</span>
<span class="p_add">+	set_bit(0, sev_asid_bitmap);  /* mark ASID 0 as used */</span>
<span class="p_add">+</span>
<span class="p_add">+	sev_enabled = 1;</span>
<span class="p_add">+	printk(KERN_INFO &quot;kvm: SEV enabled\n&quot;);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Query the platform status and print API version */</span>
<span class="p_add">+	status-&gt;hdr.buffer_len = sizeof(*status);</span>
<span class="p_add">+	ret = psp_platform_status(status, &amp;psp_ret);</span>
<span class="p_add">+	if (ret) {</span>
<span class="p_add">+		printk(KERN_ERR &quot;SEV: PLATFORM_STATUS ret=%#x\n&quot;, psp_ret);</span>
<span class="p_add">+		goto err_2;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	printk(KERN_INFO &quot;SEV API: %d.%d\n&quot;,</span>
<span class="p_add">+			status-&gt;api_major, status-&gt;api_minor);</span>
<span class="p_add">+err_2:</span>
<span class="p_add">+	kfree(status);</span>
<span class="p_add">+err_1:</span>
<span class="p_add">+	kfree(init);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static __init int svm_hardware_setup(void)
 {
 	int cpu;
<span class="p_chunk">@@ -966,6 +1071,8 @@</span> <span class="p_context"> static __init int svm_hardware_setup(void)</span>
 		kvm_enable_efer_bits(EFER_SVME | EFER_LMSLE);
 	}
 
<span class="p_add">+	sev_hardware_setup();</span>
<span class="p_add">+</span>
 	for_each_possible_cpu(cpu) {
 		r = svm_cpu_init(cpu);
 		if (r)
<span class="p_chunk">@@ -1003,10 +1110,25 @@</span> <span class="p_context"> err:</span>
 	return r;
 }
 
<span class="p_add">+static __exit void sev_hardware_unsetup(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int ret, psp_ret;</span>
<span class="p_add">+</span>
<span class="p_add">+	ret = psp_platform_shutdown(&amp;psp_ret);</span>
<span class="p_add">+	if (ret)</span>
<span class="p_add">+		printk(KERN_ERR &quot;failed to shutdown PSP rc=%d (%#0x10x)\n&quot;,</span>
<span class="p_add">+		ret, psp_ret);</span>
<span class="p_add">+</span>
<span class="p_add">+	kfree(sev_asid_bitmap);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static __exit void svm_hardware_unsetup(void)
 {
 	int cpu;
 
<span class="p_add">+	if (sev_enabled)</span>
<span class="p_add">+		sev_hardware_unsetup();</span>
<span class="p_add">+</span>
 	for_each_possible_cpu(cpu)
 		svm_cpu_uninit(cpu);
 
<span class="p_chunk">@@ -1088,6 +1210,11 @@</span> <span class="p_context"> static void avic_init_vmcb(struct vcpu_svm *svm)</span>
 	svm-&gt;vcpu.arch.apicv_active = true;
 }
 
<span class="p_add">+static void sev_init_vmcb(struct vcpu_svm *svm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.nested_ctl |= SVM_NESTED_CTL_SEV_ENABLE;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void init_vmcb(struct vcpu_svm *svm)
 {
 	struct vmcb_control_area *control = &amp;svm-&gt;vmcb-&gt;control;
<span class="p_chunk">@@ -1202,6 +1329,10 @@</span> <span class="p_context"> static void init_vmcb(struct vcpu_svm *svm)</span>
 	if (avic)
 		avic_init_vmcb(svm);
 
<span class="p_add">+	if (svm_sev_guest())</span>
<span class="p_add">+		sev_init_vmcb(svm);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 	mark_all_dirty(svm-&gt;vmcb);
 
 	enable_gif(svm);
<span class="p_chunk">@@ -1413,6 +1544,14 @@</span> <span class="p_context"> static void svm_vcpu_reset(struct kvm_vcpu *vcpu, bool init_event)</span>
 		avic_update_vapic_bar(svm, APIC_DEFAULT_PHYS_BASE);
 }
 
<span class="p_add">+static void sev_init_vcpu(struct vcpu_svm *svm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (!svm_sev_guest())</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm_sev_ref();</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct kvm_vcpu *svm_create_vcpu(struct kvm *kvm, unsigned int id)
 {
 	struct vcpu_svm *svm;
<span class="p_chunk">@@ -1475,6 +1614,7 @@</span> <span class="p_context"> static struct kvm_vcpu *svm_create_vcpu(struct kvm *kvm, unsigned int id)</span>
 	init_vmcb(svm);
 
 	svm_init_osvw(&amp;svm-&gt;vcpu);
<span class="p_add">+	sev_init_vcpu(svm);</span>
 
 	return &amp;svm-&gt;vcpu;
 
<span class="p_chunk">@@ -1494,6 +1634,23 @@</span> <span class="p_context"> out:</span>
 	return ERR_PTR(err);
 }
 
<span class="p_add">+static void sev_uninit_vcpu(struct vcpu_svm *svm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int cpu;</span>
<span class="p_add">+	int asid = svm_sev_asid();</span>
<span class="p_add">+	struct svm_cpu_data *sd;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!svm_sev_guest())</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm_sev_unref();</span>
<span class="p_add">+</span>
<span class="p_add">+	for_each_possible_cpu(cpu) {</span>
<span class="p_add">+		sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+		sd-&gt;sev_vmcb[asid] = NULL;</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void svm_free_vcpu(struct kvm_vcpu *vcpu)
 {
 	struct vcpu_svm *svm = to_svm(vcpu);
<span class="p_chunk">@@ -1502,6 +1659,7 @@</span> <span class="p_context"> static void svm_free_vcpu(struct kvm_vcpu *vcpu)</span>
 	__free_pages(virt_to_page(svm-&gt;msrpm), MSRPM_ALLOC_ORDER);
 	__free_page(virt_to_page(svm-&gt;nested.hsave));
 	__free_pages(virt_to_page(svm-&gt;nested.msrpm), MSRPM_ALLOC_ORDER);
<span class="p_add">+	sev_uninit_vcpu(svm);</span>
 	kvm_vcpu_uninit(vcpu);
 	kmem_cache_free(kvm_vcpu_cache, svm);
 }
<span class="p_chunk">@@ -1945,6 +2103,11 @@</span> <span class="p_context"> static int pf_interception(struct vcpu_svm *svm)</span>
 	default:
 		error_code = svm-&gt;vmcb-&gt;control.exit_info_1;
 
<span class="p_add">+		/* In SEV mode, the guest physical address will have C-bit</span>
<span class="p_add">+		 * set. C-bit must be cleared before handling the fault.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		if (svm_sev_guest())</span>
<span class="p_add">+			fault_address &amp;= ~sme_me_mask;</span>
 		trace_kvm_page_fault(fault_address, error_code);
 		if (!npt_enabled &amp;&amp; kvm_event_needs_reinjection(&amp;svm-&gt;vcpu))
 			kvm_mmu_unprotect_page_virt(&amp;svm-&gt;vcpu, fault_address);
<span class="p_chunk">@@ -4131,12 +4294,40 @@</span> <span class="p_context"> static void reload_tss(struct kvm_vcpu *vcpu)</span>
 	load_TR_desc();
 }
 
<span class="p_add">+static void pre_sev_run(struct vcpu_svm *svm)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int asid = svm_sev_asid();</span>
<span class="p_add">+	int cpu = raw_smp_processor_id();</span>
<span class="p_add">+	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Assign the asid allocated for this SEV guest */</span>
<span class="p_add">+	svm-&gt;vmcb-&gt;control.asid = svm_sev_asid();</span>
<span class="p_add">+</span>
<span class="p_add">+	/* Flush guest TLB:</span>
<span class="p_add">+	 * - when different VMCB for the same ASID is to be run on the</span>
<span class="p_add">+	 *   same host CPU</span>
<span class="p_add">+	 *   or </span>
<span class="p_add">+	 * - this VMCB was executed on different host cpu in previous VMRUNs.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (sd-&gt;sev_vmcb[asid] != (void *)svm-&gt;vmcb ||</span>
<span class="p_add">+		svm-&gt;last_cpuid != cpu)</span>
<span class="p_add">+		svm-&gt;vmcb-&gt;control.tlb_ctl = TLB_CONTROL_FLUSH_ALL_ASID;</span>
<span class="p_add">+</span>
<span class="p_add">+	svm-&gt;last_cpuid = cpu;</span>
<span class="p_add">+	sd-&gt;sev_vmcb[asid] = (void *)svm-&gt;vmcb;</span>
<span class="p_add">+</span>
<span class="p_add">+	mark_dirty(svm-&gt;vmcb, VMCB_ASID);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void pre_svm_run(struct vcpu_svm *svm)
 {
 	int cpu = raw_smp_processor_id();
 
 	struct svm_cpu_data *sd = per_cpu(svm_data, cpu);
 
<span class="p_add">+	if (svm_sev_guest())</span>
<span class="p_add">+		return pre_sev_run(svm);</span>
<span class="p_add">+</span>
 	/* FIXME: handle wraparound of asid_generation */
 	if (svm-&gt;asid_generation != sd-&gt;asid_generation)
 		new_asid(svm, sd);
<span class="p_chunk">@@ -4985,6 +5176,26 @@</span> <span class="p_context"> static inline void avic_post_state_restore(struct kvm_vcpu *vcpu)</span>
 	avic_handle_ldr_update(vcpu);
 }
 
<span class="p_add">+static int sev_asid_new(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	int pos;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!sev_enabled)</span>
<span class="p_add">+		return -ENOTTY;</span>
<span class="p_add">+</span>
<span class="p_add">+	pos = find_first_zero_bit(sev_asid_bitmap, max_sev_asid);</span>
<span class="p_add">+	if (pos &gt;= max_sev_asid)</span>
<span class="p_add">+		return -EBUSY;</span>
<span class="p_add">+</span>
<span class="p_add">+	set_bit(pos, sev_asid_bitmap);</span>
<span class="p_add">+	return pos;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void sev_asid_free(int asid)</span>
<span class="p_add">+{</span>
<span class="p_add">+	clear_bit(asid, sev_asid_bitmap);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static struct kvm_x86_ops svm_x86_ops __ro_after_init = {
 	.cpu_has_kvm_support = has_svm,
 	.disabled_by_bios = is_disabled,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



