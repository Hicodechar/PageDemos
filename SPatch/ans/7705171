
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1] mm: hugetlb: call huge_pte_alloc() only if ptep is null - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1] mm: hugetlb: call huge_pte_alloc() only if ptep is null</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Nov. 26, 2015, 8:02 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1448524936-10501-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7705171/mbox/"
   >mbox</a>
|
   <a href="/patch/7705171/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7705171/">/patch/7705171/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id 99C789F443
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Nov 2015 08:02:41 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id B98C420620
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Nov 2015 08:02:40 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id CAD1F2057F
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 26 Nov 2015 08:02:39 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752709AbbKZICf (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 26 Nov 2015 03:02:35 -0500
Received: from mail-io0-f175.google.com ([209.85.223.175]:33442 &quot;EHLO
	mail-io0-f175.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1752486AbbKZIC2 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 26 Nov 2015 03:02:28 -0500
Received: by iouu10 with SMTP id u10so79297424iou.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Thu, 26 Nov 2015 00:02:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=gmail.com; s=20120113;
	h=sender:from:to:cc:subject:date:message-id;
	bh=zvnTp8XiG9WXEZF/wA8p2sbBKucLTW7evSYz4mAVmfU=;
	b=LoU+X9IkqHHcRiaCfqi4RVWtV/SXHtd/xWcPfXS6FGYi91PqkF8XPRevob30ee97D0
	0KJC6Lqa/ooBOj3ggKZjpvVInbQixIIJEH1UraQMaMC8GX0e6dbU96XuddcH69dx6ACg
	tAxDO1i+9CMXCs4tK+qzmXemPVj7XrKEs7omf8vwB0OvlRQPm3i58SxN2frYlrzQAVLA
	MOGD7ai3WvTLWIQaJTcT4rKg1/93OeA1Zb47Qwn4RPOI2s7zCr/IHLVAU7AjAiDMSyRi
	dFHdXZHHIHUFNn7LfXYDznztAueylTG4PTOyqj5W2BNsPpe6GzvWvZIn1OHkW9Pb938j
	kvZA==
X-Received: by 10.98.15.76 with SMTP id x73mr36884782pfi.81.1448524940442;
	Thu, 26 Nov 2015 00:02:20 -0800 (PST)
Received: from localhost.localdomain (www9186uo.sakura.ne.jp.
	[153.121.56.200]) by smtp.gmail.com with ESMTPSA id
	w85sm25483041pfa.48.2015.11.26.00.02.17
	(version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
	Thu, 26 Nov 2015 00:02:19 -0800 (PST)
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Andrew Morton &lt;akpm@linux-foundation.org&gt;
Cc: David Rientjes &lt;rientjes@google.com&gt;, Hugh Dickins &lt;hughd@google.com&gt;,
	Dave Hansen &lt;dave.hansen@intel.com&gt;, Mel Gorman &lt;mgorman@suse.de&gt;,
	Joonsoo Kim &lt;iamjoonsoo.kim@lge.com&gt;,
	Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;,
	Mike Kravetz &lt;mike.kravetz@oracle.com&gt;, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;,
	Naoya Horiguchi &lt;nao.horiguchi@gmail.com&gt;
Subject: [PATCH v1] mm: hugetlb: call huge_pte_alloc() only if ptep is null
Date: Thu, 26 Nov 2015 17:02:16 +0900
Message-Id: &lt;1448524936-10501-1-git-send-email-n-horiguchi@ah.jp.nec.com&gt;
X-Mailer: git-send-email 1.7.1
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.8 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,RP_MATCHES_RCVD,T_DKIM_INVALID,UNPARSEABLE_RELAY
	autolearn=ham version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Nov. 26, 2015, 8:02 a.m.</div>
<pre class="content">
Currently at the beginning of hugetlb_fault(), we call huge_pte_offset()
and check whether the obtained *ptep is a migration/hwpoison entry or not.
And if not, then we get to call huge_pte_alloc(). This is racy because the
*ptep could turn into migration/hwpoison entry after the huge_pte_offset()
check. This race results in BUG_ON in huge_pte_alloc().

We don&#39;t have to call huge_pte_alloc() when the huge_pte_offset() returns
non-NULL, so let&#39;s fix this bug with moving the code into else block.

Note that the *ptep could turn into a migration/hwpoison entry after
this block, but that&#39;s not a problem because we have another !pte_present
check later (we never go into hugetlb_no_page() in that case.)

Fixes: 290408d4a250 (&quot;hugetlb: hugepage migration core&quot;)
<span class="signed-off-by">Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Cc: &lt;stable@vger.kernel.org&gt; [2.6.36+]
---
 mm/hugetlb.c |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=113021">Hillf Danton</a> - Nov. 26, 2015, 8:29 a.m.</div>
<pre class="content">
<span class="quote">&gt; </span>
<span class="quote">&gt; Currently at the beginning of hugetlb_fault(), we call huge_pte_offset()</span>
<span class="quote">&gt; and check whether the obtained *ptep is a migration/hwpoison entry or not.</span>
<span class="quote">&gt; And if not, then we get to call huge_pte_alloc(). This is racy because the</span>
<span class="quote">&gt; *ptep could turn into migration/hwpoison entry after the huge_pte_offset()</span>
<span class="quote">&gt; check. This race results in BUG_ON in huge_pte_alloc().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We don&#39;t have to call huge_pte_alloc() when the huge_pte_offset() returns</span>
<span class="quote">&gt; non-NULL, so let&#39;s fix this bug with moving the code into else block.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that the *ptep could turn into a migration/hwpoison entry after</span>
<span class="quote">&gt; this block, but that&#39;s not a problem because we have another !pte_present</span>
<span class="quote">&gt; check later (we never go into hugetlb_no_page() in that case.)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 290408d4a250 (&quot;hugetlb: hugepage migration core&quot;)</span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Cc: &lt;stable@vger.kernel.org&gt; [2.6.36+]</span>
<span class="quote">&gt; ---</span>
<span class="acked-by">
Acked-by: Hillf Danton &lt;hillf.zj@alibaba-inc.com&gt;</span>
<span class="quote">
&gt;  mm/hugetlb.c |    8 ++++----</span>
<span class="quote">&gt;  1 files changed, 4 insertions(+), 4 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git next-20151123/mm/hugetlb.c next-20151123_patched/mm/hugetlb.c</span>
<span class="quote">&gt; index 1101ccd..6ad5e91 100644</span>
<span class="quote">&gt; --- next-20151123/mm/hugetlb.c</span>
<span class="quote">&gt; +++ next-20151123_patched/mm/hugetlb.c</span>
<span class="quote">&gt; @@ -3696,12 +3696,12 @@ int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt;  		} else if (unlikely(is_hugetlb_entry_hwpoisoned(entry)))</span>
<span class="quote">&gt;  			return VM_FAULT_HWPOISON_LARGE |</span>
<span class="quote">&gt;  				VM_FAULT_SET_HINDEX(hstate_index(h));</span>
<span class="quote">&gt; +	} else {</span>
<span class="quote">&gt; +		ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="quote">&gt; +		if (!ptep)</span>
<span class="quote">&gt; +			return VM_FAULT_OOM;</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; -	ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="quote">&gt; -	if (!ptep)</span>
<span class="quote">&gt; -		return VM_FAULT_OOM;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt;  	mapping = vma-&gt;vm_file-&gt;f_mapping;</span>
<span class="quote">&gt;  	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; --</span>
<span class="quote">&gt; 1.7.1</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Nov. 30, 2015, 10:10 p.m.</div>
<pre class="content">
On Thu, 26 Nov 2015, Naoya Horiguchi wrote:
<span class="quote">
&gt; Currently at the beginning of hugetlb_fault(), we call huge_pte_offset()</span>
<span class="quote">&gt; and check whether the obtained *ptep is a migration/hwpoison entry or not.</span>
<span class="quote">&gt; And if not, then we get to call huge_pte_alloc(). This is racy because the</span>
<span class="quote">&gt; *ptep could turn into migration/hwpoison entry after the huge_pte_offset()</span>
<span class="quote">&gt; check. This race results in BUG_ON in huge_pte_alloc().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; We don&#39;t have to call huge_pte_alloc() when the huge_pte_offset() returns</span>
<span class="quote">&gt; non-NULL, so let&#39;s fix this bug with moving the code into else block.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Note that the *ptep could turn into a migration/hwpoison entry after</span>
<span class="quote">&gt; this block, but that&#39;s not a problem because we have another !pte_present</span>
<span class="quote">&gt; check later (we never go into hugetlb_no_page() in that case.)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Fixes: 290408d4a250 (&quot;hugetlb: hugepage migration core&quot;)</span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Cc: &lt;stable@vger.kernel.org&gt; [2.6.36+]</span>
<span class="acked-by">
Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>

It would be nice to provide a sample of the BUG_ON() output in the commit 
message, however, so people can quickly find this if greping for what they 
just saw kill their machine.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=124511">Mike Kravetz</a> - Dec. 1, 2015, 1:20 a.m.</div>
<pre class="content">
On 11/26/2015 12:02 AM, Naoya Horiguchi wrote:
<span class="quote">&gt; Currently at the beginning of hugetlb_fault(), we call huge_pte_offset()</span>
<span class="quote">&gt; and check whether the obtained *ptep is a migration/hwpoison entry or not.</span>
<span class="quote">&gt; And if not, then we get to call huge_pte_alloc(). This is racy because the</span>
<span class="quote">&gt; *ptep could turn into migration/hwpoison entry after the huge_pte_offset()</span>
<span class="quote">&gt; check. This race results in BUG_ON in huge_pte_alloc().</span>

I assume the BUG_ON you hit in huge_pte_alloc is:

	BUG_ON(pte &amp;&amp; !pte_none(*pte) &amp;&amp; !pte_huge(*pte));

Correct?

This means either:
1) The pte was present when entering hugetlb_fault() and not marked
   for migration or hwpoisoned.
2) The pte was added to the page table after the call to huge_pte_offset()
   and before the call to huge_pte_alloc().

Your patch will take care of case # 1.  I am not sure case # 2 is possible,
but your patch would not address this situation.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Dec. 1, 2015, 1:58 a.m.</div>
<pre class="content">
On Mon, Nov 30, 2015 at 05:20:22PM -0800, Mike Kravetz wrote:
<span class="quote">&gt; On 11/26/2015 12:02 AM, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; Currently at the beginning of hugetlb_fault(), we call huge_pte_offset()</span>
<span class="quote">&gt; &gt; and check whether the obtained *ptep is a migration/hwpoison entry or not.</span>
<span class="quote">&gt; &gt; And if not, then we get to call huge_pte_alloc(). This is racy because the</span>
<span class="quote">&gt; &gt; *ptep could turn into migration/hwpoison entry after the huge_pte_offset()</span>
<span class="quote">&gt; &gt; check. This race results in BUG_ON in huge_pte_alloc().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I assume the BUG_ON you hit in huge_pte_alloc is:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	BUG_ON(pte &amp;&amp; !pte_none(*pte) &amp;&amp; !pte_huge(*pte));</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Correct?</span>

Yes, that&#39;s correct. Actually what I saw was like below:

  [ 1292.609405] kernel BUG at arch/x86/mm/hugetlbpage.c:161!
  [ 1292.614706] invalid opcode: 0000 [#1] SMP
  [ 1292.618830] Modules linked in: hwpoison_inject mce_inject xt_CHECKSUM iptable_mangle it_MASQUERADE nf_nat_masquerade_ipv4 iptable_nat nf_nat_ipv4 nf_nat nf_conntrack_ipv4 nf_dfrag_ipv4 xt_conntrack nf_conntrack ipt_REJECT tun bridge stp llc ebtable_filter ebtablesip6_tables iptable_filter xprtrdma ib_isert iscsi_target_mod ib_iser libiscsi scsi_transprt_iscsi ib_srpt target_core_mod ib_srp scsi_transport_srp scsi_tgt ib_ipoib rdma_ucm ib_cm ib_uverbs ib_umad rdma_cm ib_cm iw_cm coretemp kvm_intel kvm iTCO_wdt iTCO_vendor_supprt sg lpc_ich mfd_core i7core_edac pcspkr shpchp edac_core ioatdma i2c_i801 acpi_cpufreqfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables ext4 mbcache jbd2 mlx4_ib mlx4_en ibsa ib_mad vxlan ip6_udp_tunnel ib_core udp_tunnel ib_addr sd_mod crc_t10dif crct10dif_genric crct10dif_common mgag200 ata_generic syscopyarea sysfillrect pata_acpi sysimgblt drm_ms_helper igb ttm ata_piix ptp libata drm pps_core crc32c_intel serio_raw mlx4_core dca ic_algo_bit
  i2c_core dm_mirror dm_region_hash dm_log dm_mod
  [ 1292.711755] CPU: 10 PID: 15818 Comm: iterate_hugepag Tainted: G          I    --------
  ---   3.10.0-324.el7.hm.x86_64 #1
  [ 1292.722643] Hardware name: Supermicro X8DTT/X8DTT, BIOS 080016  05/20/2010
  [ 1292.729506] task: ffff88032c4d3980 ti: ffff88061525c000 task.ti: ffff88061525c000
  [ 1292.736977] RIP: 0010:[&lt;ffffffff810667f2&gt;]  [&lt;ffffffff810667f2&gt;] huge_pte_alloc+0x452/
  x4d0
  [ 1292.745373] RSP: 0000:ffff88061525fd78  EFLAGS: 00010246
  [ 1292.750684] RAX: ffff88032b637000 RBX: ffff8800bb265700 RCX: ffff880000000000
  [ 1292.757806] RDX: 0000000016b80000 RSI: 0000700000000000 RDI: 000000032b637067
  [ 1292.764928] RBP: ffff88061525fdb8 R08: ffff880000000000 R09: 00000000000000a9
  [ 1292.772050] R10: 0000000000000000 R11: 00007f87ca84e20a R12: 0000000000200000
  [ 1292.779199] R13: ffff88032b486000 R14: ffff880000000000 R15: ffff88032cbed780
  [ 1292.786321] FS:  00007f87cb1bf740(0000) GS:ffff880333cc0000(0000) knlGS:00000000000000
  0
  [ 1292.794407] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
  [ 1292.800143] CR2: 0000700000046690 CR3: 00000000bb265000 CR4: 00000000000007e0
  [ 1292.807265] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
  [ 1292.814388] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
  [ 1292.821535] Stack:
  [ 1292.823574]  80000000b5c000a5 0000000000000000 ffff88032cbed780 ffffffff81e8ae20
  [ 1292.831024]  0000700000000000 ffff8806152b0bd0 ffff88032b637000 ffff88032cbed780
  [ 1292.838474]  ffff88061525fe38 ffffffff811b2f51 ffffea000cad8df0 0000000000002008
  [ 1292.845926] Call Trace:
  [ 1292.848374]  [&lt;ffffffff811b2f51&gt;] hugetlb_fault+0xa1/0x900
  [ 1292.853876]  [&lt;ffffffff811976fd&gt;] handle_mm_fault+0xd0d/0xf50
  [ 1292.859621]  [&lt;ffffffff813020e7&gt;] ? call_rwsem_wake+0x17/0x30
  [ 1292.865391]  [&lt;ffffffff81641922&gt;] __do_page_fault+0x152/0x420
  [ 1292.871126]  [&lt;ffffffff81641c13&gt;] do_page_fault+0x23/0x80
  [ 1292.876516]  [&lt;ffffffff8163df08&gt;] page_fault+0x28/0x30

This was on RHEL7 kernel and I didn&#39;t reproduce it on upstream. But the fix
itself was confirmed, and upstream has the same code, so I&#39;d like the fix
to be applied on upstream before it will get visible in the future.
<span class="quote">
&gt; This means either:</span>
<span class="quote">&gt; 1) The pte was present when entering hugetlb_fault() and not marked</span>
<span class="quote">&gt;    for migration or hwpoisoned.</span>
<span class="quote">&gt; 2) The pte was added to the page table after the call to huge_pte_offset()</span>
<span class="quote">&gt;    and before the call to huge_pte_alloc().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Your patch will take care of case # 1.</span>

Right. In case #1, huge_pte_alloc() is just needless because we already
have ptep allocated.
<span class="quote">
&gt;  I am not sure case # 2 is possible,</span>
<span class="quote">&gt; but your patch would not address this situation.</span>

In case #2, the huge_ptep_get() in hugetlb_fault() after holding
hugetlb_fault_mutex_table should get the valid (just added) pte,
so the fault should be properly handled.

Thanks,
Naoya Horiguchi
<span class="quote">
&gt; -- </span>
<span class="quote">&gt; Mike Kravetz</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; We don&#39;t have to call huge_pte_alloc() when the huge_pte_offset() returns</span>
<span class="quote">&gt; &gt; non-NULL, so let&#39;s fix this bug with moving the code into else block.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Note that the *ptep could turn into a migration/hwpoison entry after</span>
<span class="quote">&gt; &gt; this block, but that&#39;s not a problem because we have another !pte_present</span>
<span class="quote">&gt; &gt; check later (we never go into hugetlb_no_page() in that case.)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Fixes: 290408d4a250 (&quot;hugetlb: hugepage migration core&quot;)</span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; Cc: &lt;stable@vger.kernel.org&gt; [2.6.36+]</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  mm/hugetlb.c |    8 ++++----</span>
<span class="quote">&gt; &gt;  1 files changed, 4 insertions(+), 4 deletions(-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git next-20151123/mm/hugetlb.c next-20151123_patched/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; index 1101ccd..6ad5e91 100644</span>
<span class="quote">&gt; &gt; --- next-20151123/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; +++ next-20151123_patched/mm/hugetlb.c</span>
<span class="quote">&gt; &gt; @@ -3696,12 +3696,12 @@ int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
<span class="quote">&gt; &gt;  		} else if (unlikely(is_hugetlb_entry_hwpoisoned(entry)))</span>
<span class="quote">&gt; &gt;  			return VM_FAULT_HWPOISON_LARGE |</span>
<span class="quote">&gt; &gt;  				VM_FAULT_SET_HINDEX(hstate_index(h));</span>
<span class="quote">&gt; &gt; +	} else {</span>
<span class="quote">&gt; &gt; +		ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="quote">&gt; &gt; +		if (!ptep)</span>
<span class="quote">&gt; &gt; +			return VM_FAULT_OOM;</span>
<span class="quote">&gt; &gt;  	}</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -	ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="quote">&gt; &gt; -	if (!ptep)</span>
<span class="quote">&gt; &gt; -		return VM_FAULT_OOM;</span>
<span class="quote">&gt; &gt; -</span>
<span class="quote">&gt; &gt;  	mapping = vma-&gt;vm_file-&gt;f_mapping;</span>
<span class="quote">&gt; &gt;  	idx = vma_hugecache_offset(h, vma, address);</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; --</span>
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git next-20151123/mm/hugetlb.c next-20151123_patched/mm/hugetlb.c</span>
<span class="p_header">index 1101ccd..6ad5e91 100644</span>
<span class="p_header">--- next-20151123/mm/hugetlb.c</span>
<span class="p_header">+++ next-20151123_patched/mm/hugetlb.c</span>
<span class="p_chunk">@@ -3696,12 +3696,12 @@</span> <span class="p_context"> int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,</span>
 		} else if (unlikely(is_hugetlb_entry_hwpoisoned(entry)))
 			return VM_FAULT_HWPOISON_LARGE |
 				VM_FAULT_SET_HINDEX(hstate_index(h));
<span class="p_add">+	} else {</span>
<span class="p_add">+		ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="p_add">+		if (!ptep)</span>
<span class="p_add">+			return VM_FAULT_OOM;</span>
 	}
 
<span class="p_del">-	ptep = huge_pte_alloc(mm, address, huge_page_size(h));</span>
<span class="p_del">-	if (!ptep)</span>
<span class="p_del">-		return VM_FAULT_OOM;</span>
<span class="p_del">-</span>
 	mapping = vma-&gt;vm_file-&gt;f_mapping;
 	idx = vma_hugecache_offset(h, vma, address);
 

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



