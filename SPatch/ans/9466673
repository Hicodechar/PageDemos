
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC,PATCHv1,13/28] x86: convert the rest of the code to support p4d_t - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC,PATCHv1,13/28] x86: convert the rest of the code to support p4d_t</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Dec. 8, 2016, 4:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20161208162150.148763-15-kirill.shutemov@linux.intel.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9466673/mbox/"
   >mbox</a>
|
   <a href="/patch/9466673/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9466673/">/patch/9466673/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	739F16071E for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:28:55 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5F83F285CB
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:28:55 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 53F9D285D2; Thu,  8 Dec 2016 16:28:55 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id ACE7C285D1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu,  8 Dec 2016 16:28:53 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S933042AbcLHQ2r (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Thu, 8 Dec 2016 11:28:47 -0500
Received: from mga14.intel.com ([192.55.52.115]:54725 &quot;EHLO mga14.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1754081AbcLHQWc (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Thu, 8 Dec 2016 11:22:32 -0500
Received: from orsmga001.jf.intel.com ([10.7.209.18])
	by fmsmga103.fm.intel.com with ESMTP; 08 Dec 2016 08:22:31 -0800
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.33,320,1477983600&quot;; d=&quot;scan&#39;208&quot;;a=&quot;1069672967&quot;
Received: from black.fi.intel.com ([10.237.72.28])
	by orsmga001.jf.intel.com with ESMTP; 08 Dec 2016 08:22:26 -0800
Received: by black.fi.intel.com (Postfix, from userid 1000)
	id A95FA5F0; Thu,  8 Dec 2016 18:22:14 +0200 (EET)
From: &quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
To: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;, x86@kernel.org,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Ingo Molnar &lt;mingo@redhat.com&gt;, Arnd Bergmann &lt;arnd@arndb.de&gt;,
	&quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;
Cc: Andi Kleen &lt;ak@linux.intel.com&gt;, Dave Hansen &lt;dave.hansen@intel.com&gt;,
	Andy Lutomirski &lt;luto@amacapital.net&gt;,
	linux-arch@vger.kernel.org, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org,
	&quot;Kirill A. Shutemov&quot; &lt;kirill.shutemov@linux.intel.com&gt;
Subject: [RFC,
	PATCHv1 13/28] x86: convert the rest of the code to support p4d_t
Date: Thu,  8 Dec 2016 19:21:35 +0300
Message-Id: &lt;20161208162150.148763-15-kirill.shutemov@linux.intel.com&gt;
X-Mailer: git-send-email 2.10.2
In-Reply-To: &lt;20161208162150.148763-1-kirill.shutemov@linux.intel.com&gt;
References: &lt;20161208162150.148763-1-kirill.shutemov@linux.intel.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=40781">Kirill A. Shutemov</a> - Dec. 8, 2016, 4:21 p.m.</div>
<pre class="content">
This patch converts x86 to use proper folding of new page table level
with &lt;asm-generic/pgtable-nop4d.h&gt;.

TODO: split it up futher.
FIXME: XEN is broken.

Not-yet-Signed-off-by: Kirill A. Shutemov &lt;kirill.shutemov@linux.intel.com&gt;
---
 arch/x86/include/asm/paravirt.h       |  33 ++++++-
 arch/x86/include/asm/paravirt_types.h |  12 ++-
 arch/x86/include/asm/pgalloc.h        |  35 ++++++-
 arch/x86/include/asm/pgtable.h        |  75 +++++++++++++--
 arch/x86/include/asm/pgtable_64.h     |  12 ++-
 arch/x86/include/asm/pgtable_types.h  |  10 +-
 arch/x86/kernel/paravirt.c            |  10 +-
 arch/x86/mm/init_64.c                 | 168 ++++++++++++++++++++++++++--------
 arch/x86/mm/kasan_init_64.c           |  12 ++-
 arch/x86/mm/pageattr.c                |  56 +++++++++---
 arch/x86/platform/efi/efi_64.c        |   8 +-
 arch/x86/xen/Kconfig                  |   1 +
 12 files changed, 345 insertions(+), 87 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">index 2970d22d7766..2196ec33063e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt.h</span>
<span class="p_chunk">@@ -534,7 +534,7 @@</span> <span class="p_context"> static inline void set_pud(pud_t *pudp, pud_t pud)</span>
 		PVOP_VCALL2(pv_mmu_ops.set_pud, pudp,
 			    val);
 }
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 static inline pud_t __pud(pudval_t val)
 {
 	pudval_t ret;
<span class="p_chunk">@@ -563,6 +563,32 @@</span> <span class="p_context"> static inline pudval_t pud_val(pud_t pud)</span>
 	return ret;
 }
 
<span class="p_add">+static inline void pud_clear(pud_t *pudp)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_pud(pudp, __pud(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void set_p4d(p4d_t *p4dp, p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	p4dval_t val = native_p4d_val(p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (sizeof(p4dval_t) &gt; sizeof(long))</span>
<span class="p_add">+		PVOP_VCALL3(pv_mmu_ops.set_p4d, p4dp,</span>
<span class="p_add">+			    val, (u64)val &gt;&gt; 32);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		PVOP_VCALL2(pv_mmu_ops.set_p4d, p4dp,</span>
<span class="p_add">+			    val);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void p4d_clear(p4d_t *p4dp)</span>
<span class="p_add">+{</span>
<span class="p_add">+	set_p4d(p4dp, __p4d(0));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+</span>
 static inline void set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 	pgdval_t val = native_pgd_val(pgd);
<span class="p_chunk">@@ -580,10 +606,7 @@</span> <span class="p_context"> static inline void pgd_clear(pgd_t *pgdp)</span>
 	set_pgd(pgdp, __pgd(0));
 }
 
<span class="p_del">-static inline void pud_clear(pud_t *pudp)</span>
<span class="p_del">-{</span>
<span class="p_del">-	set_pud(pudp, __pud(0));</span>
<span class="p_del">-}</span>
<span class="p_add">+#endif  /* CONFIG_PGTABLE_LEVELS == 5 */</span>
 
 #endif	/* CONFIG_PGTABLE_LEVELS == 4 */
 
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">index 7fa9e7740ba3..cdfa758ce7de 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt_types.h</span>
<span class="p_chunk">@@ -280,12 +280,18 @@</span> <span class="p_context"> struct pv_mmu_ops {</span>
 	struct paravirt_callee_save pmd_val;
 	struct paravirt_callee_save make_pmd;
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	struct paravirt_callee_save pud_val;
 	struct paravirt_callee_save make_pud;
 
<span class="p_del">-	void (*set_pgd)(pgd_t *pudp, pgd_t pgdval);</span>
<span class="p_del">-#endif	/* CONFIG_PGTABLE_LEVELS == 4 */</span>
<span class="p_add">+	void (*set_p4d)(p4d_t *p4dp, p4d_t p4dval);</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt;= 5 */</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
<span class="p_add">+</span>
 #endif	/* CONFIG_PGTABLE_LEVELS &gt;= 3 */
 
 	struct pv_lazy_ops lazy_mode;
<span class="p_header">diff --git a/arch/x86/include/asm/pgalloc.h b/arch/x86/include/asm/pgalloc.h</span>
<span class="p_header">index b6d425999f99..2f585054c63c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgalloc.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgalloc.h</span>
<span class="p_chunk">@@ -121,10 +121,10 @@</span> <span class="p_context"> static inline void pud_populate(struct mm_struct *mm, pud_t *pud, pmd_t *pmd)</span>
 #endif	/* CONFIG_X86_PAE */
 
 #if CONFIG_PGTABLE_LEVELS &gt; 3
<span class="p_del">-static inline void pgd_populate(struct mm_struct *mm, pgd_t *pgd, pud_t *pud)</span>
<span class="p_add">+static inline void p4d_populate(struct mm_struct *mm, p4d_t *p4d, pud_t *pud)</span>
 {
 	paravirt_alloc_pud(mm, __pa(pud) &gt;&gt; PAGE_SHIFT);
<span class="p_del">-	set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(pud)));</span>
<span class="p_add">+	set_p4d(p4d, __p4d(_PAGE_TABLE | __pa(pud)));</span>
 }
 
 static inline pud_t *pud_alloc_one(struct mm_struct *mm, unsigned long addr)
<span class="p_chunk">@@ -150,6 +150,37 @@</span> <span class="p_context"> static inline void __pud_free_tlb(struct mmu_gather *tlb, pud_t *pud,</span>
 	___pud_free_tlb(tlb, pud);
 }
 
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 4</span>
<span class="p_add">+static inline void pgd_populate(struct mm_struct *mm, pgd_t *pgd, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	paravirt_alloc_p4d(mm, __pa(p4d) &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+	set_pgd(pgd, __pgd(_PAGE_TABLE | __pa(p4d)));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline p4d_t *p4d_alloc_one(struct mm_struct *mm, unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	gfp_t gfp = GFP_KERNEL_ACCOUNT;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mm == &amp;init_mm)</span>
<span class="p_add">+		gfp &amp;= ~__GFP_ACCOUNT;</span>
<span class="p_add">+	return (p4d_t *)get_zeroed_page(gfp);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void p4d_free(struct mm_struct *mm, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	BUG_ON((unsigned long)p4d &amp; (PAGE_SIZE-1));</span>
<span class="p_add">+	free_page((unsigned long)p4d);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+extern void ___p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void __p4d_free_tlb(struct mmu_gather *tlb, p4d_t *p4d,</span>
<span class="p_add">+				  unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	___p4d_free_tlb(tlb, p4d);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 2 */
 
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index 54b6632723d5..398adab9a167 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -52,11 +52,19 @@</span> <span class="p_context"> extern struct mm_struct *pgd_page_get_mm(struct page *page);</span>
 
 #define set_pmd(pmdp, pmd)		native_set_pmd(pmdp, pmd)
 
<span class="p_del">-#ifndef __PAGETABLE_PUD_FOLDED</span>
<span class="p_add">+#ifndef __PAGETABLE_P4D_FOLDED</span>
 #define set_pgd(pgdp, pgd)		native_set_pgd(pgdp, pgd)
 #define pgd_clear(pgd)			native_pgd_clear(pgd)
 #endif
 
<span class="p_add">+#ifndef set_p4d</span>
<span class="p_add">+# define set_p4d(p4dp, p4d)		native_set_p4d(p4dp, p4d)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
<span class="p_add">+#ifndef __PAGETABLE_PUD_FOLDED</span>
<span class="p_add">+#define p4d_clear(p4d)			native_p4d_clear(p4d)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef set_pud
 # define set_pud(pudp, pud)		native_set_pud(pudp, pud)
 #endif
<span class="p_chunk">@@ -73,6 +81,11 @@</span> <span class="p_context"> extern struct mm_struct *pgd_page_get_mm(struct page *page);</span>
 #define pgd_val(x)	native_pgd_val(x)
 #define __pgd(x)	native_make_pgd(x)
 
<span class="p_add">+#ifndef __PAGETABLE_P4D_FOLDED</span>
<span class="p_add">+#define p4d_val(x)	native_p4d_val(x)</span>
<span class="p_add">+#define __p4d(x)	native_make_p4d(x)</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifndef __PAGETABLE_PUD_FOLDED
 #define pud_val(x)	native_pud_val(x)
 #define __pud(x)	native_make_pud(x)
<span class="p_chunk">@@ -439,6 +452,7 @@</span> <span class="p_context"> static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)</span>
 #define pte_pgprot(x) __pgprot(pte_flags(x))
 #define pmd_pgprot(x) __pgprot(pmd_flags(x))
 #define pud_pgprot(x) __pgprot(pud_flags(x))
<span class="p_add">+#define p4d_pgprot(x) __pgprot(p4d_flags(x))</span>
 
 #define canon_pgprot(p) __pgprot(massage_pgprot(p))
 
<span class="p_chunk">@@ -671,12 +685,58 @@</span> <span class="p_context"> static inline int pud_large(pud_t pud)</span>
 }
 #endif	/* CONFIG_PGTABLE_LEVELS &gt; 2 */
 
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_add">+static inline int p4d_none(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (native_p4d_val(p4d) &amp; ~(_PAGE_KNL_ERRATUM_MASK)) == 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int p4d_present(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return p4d_flags(p4d) &amp; _PAGE_PRESENT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline unsigned long p4d_page_vaddr(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (unsigned long)__va(p4d_val(p4d) &amp; p4d_pfn_mask(p4d));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Currently stuck as a macro due to indirect forward reference to</span>
<span class="p_add">+ * linux/mmzone.h&#39;s __section_mem_map_addr() definition:</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define p4d_page(p4d)		\</span>
<span class="p_add">+	pfn_to_page((p4d_val(p4d) &amp; p4d_pfn_mask(p4d)) &gt;&gt; PAGE_SHIFT)</span>
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * the pud page can be thought of an array like this: pud_t[PTRS_PER_PUD]</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * this macro returns the index of the entry in the pud page which would</span>
<span class="p_add">+ * control the given virtual address</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline unsigned long pud_index(unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (address &gt;&gt; PUD_SHIFT) &amp; (PTRS_PER_PUD - 1);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+/* Find an entry in the third-level page table.. */</span>
<span class="p_add">+static inline pud_t *pud_offset(p4d_t *p4d, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (pud_t *)p4d_page_vaddr(*p4d) + pud_index(address);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int p4d_bad(p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return (p4d_flags(p4d) &amp; ~(_KERNPG_TABLE | _PAGE_USER)) != 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif  /* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="p_add">+</span>
 static inline unsigned long p4d_index(unsigned long address)
 {
 	return (address &gt;&gt; P4D_SHIFT) &amp; (PTRS_PER_P4D - 1);
 }
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS &gt; 3</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt; 4</span>
 static inline int pgd_present(pgd_t pgd)
 {
 	return pgd_flags(pgd) &amp; _PAGE_PRESENT;
<span class="p_chunk">@@ -694,14 +754,9 @@</span> <span class="p_context"> static inline unsigned long pgd_page_vaddr(pgd_t pgd)</span>
 #define pgd_page(pgd)		pfn_to_page(pgd_val(pgd) &gt;&gt; PAGE_SHIFT)
 
 /* to find an entry in a page-table-directory. */
<span class="p_del">-static inline unsigned long pud_index(unsigned long address)</span>
<span class="p_del">-{</span>
<span class="p_del">-	return (address &gt;&gt; PUD_SHIFT) &amp; (PTRS_PER_PUD - 1);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static inline pud_t *pud_offset(pgd_t *pgd, unsigned long address)</span>
<span class="p_add">+static inline p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)</span>
 {
<span class="p_del">-	return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);</span>
<span class="p_add">+	return (p4d_t *)pgd_page_vaddr(*pgd) + p4d_index(address);</span>
 }
 
 static inline int pgd_bad(pgd_t pgd)
<span class="p_chunk">@@ -719,7 +774,7 @@</span> <span class="p_context"> static inline int pgd_none(pgd_t pgd)</span>
 	 */
 	return !native_pgd_val(pgd);
 }
<span class="p_del">-#endif	/* CONFIG_PGTABLE_LEVELS &gt; 3 */</span>
<span class="p_add">+#endif	/* CONFIG_PGTABLE_LEVELS &gt; 4 */</span>
 
 #endif	/* __ASSEMBLY__ */
 
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 1cc82ece9ac1..f14bbe95ca08 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -41,7 +41,7 @@</span> <span class="p_context"> extern void paging_init(void);</span>
 
 struct mm_struct;
 
<span class="p_del">-void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);</span>
<span class="p_add">+void set_pte_vaddr_p4d(pgd_t *pgd, unsigned long vaddr, pte_t new_pte);</span>
 
 
 static inline void native_pte_clear(struct mm_struct *mm, unsigned long addr,
<span class="p_chunk">@@ -106,6 +106,16 @@</span> <span class="p_context"> static inline void native_pud_clear(pud_t *pud)</span>
 	native_set_pud(pud, native_make_pud(0));
 }
 
<span class="p_add">+static inline void native_set_p4d(p4d_t *p4dp, p4d_t p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	*p4dp = p4d;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void native_p4d_clear(p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	native_set_p4d(p4d, (p4d_t) { .pgd = native_make_pgd(0)});</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
 {
 	*pgdp = pgd;
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">index 4aa91e440b4a..0af5650e118c 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_types.h</span>
<span class="p_chunk">@@ -277,11 +277,11 @@</span> <span class="p_context"> static inline pgdval_t pgd_flags(pgd_t pgd)</span>
 #error FIXME
 
 #else
<span class="p_del">-#include &lt;asm-generic/5level-fixup.h&gt;</span>
<span class="p_add">+#include &lt;asm-generic/pgtable-nop4d.h&gt;</span>
 
 static inline p4dval_t native_p4d_val(p4d_t p4d)
 {
<span class="p_del">-       return native_pgd_val(p4d);</span>
<span class="p_add">+	return native_pgd_val(p4d.pgd);</span>
 }
 #endif
 
<span class="p_chunk">@@ -298,12 +298,11 @@</span> <span class="p_context"> static inline pudval_t native_pud_val(pud_t pud)</span>
 	return pud.pud;
 }
 #else
<span class="p_del">-#define __ARCH_USE_5LEVEL_HACK</span>
 #include &lt;asm-generic/pgtable-nopud.h&gt;
 
 static inline pudval_t native_pud_val(pud_t pud)
 {
<span class="p_del">-	return native_pgd_val(pud.pgd);</span>
<span class="p_add">+	return native_pgd_val(pud.p4d.pgd);</span>
 }
 #endif
 
<span class="p_chunk">@@ -320,12 +319,11 @@</span> <span class="p_context"> static inline pmdval_t native_pmd_val(pmd_t pmd)</span>
 	return pmd.pmd;
 }
 #else
<span class="p_del">-#define __ARCH_USE_5LEVEL_HACK</span>
 #include &lt;asm-generic/pgtable-nopmd.h&gt;
 
 static inline pmdval_t native_pmd_val(pmd_t pmd)
 {
<span class="p_del">-	return native_pgd_val(pmd.pud.pgd);</span>
<span class="p_add">+	return native_pgd_val(pmd.pud.p4d.pgd);</span>
 }
 #endif
 
<span class="p_header">diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c</span>
<span class="p_header">index 1acfd76e3e26..d81c0c4e6bcf 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt.c</span>
<span class="p_chunk">@@ -431,12 +431,16 @@</span> <span class="p_context"> struct pv_mmu_ops pv_mmu_ops = {</span>
 	.pmd_val = PTE_IDENT,
 	.make_pmd = PTE_IDENT,
 
<span class="p_del">-#if CONFIG_PGTABLE_LEVELS == 4</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 4</span>
 	.pud_val = PTE_IDENT,
 	.make_pud = PTE_IDENT,
 
<span class="p_del">-	.set_pgd = native_set_pgd,</span>
<span class="p_del">-#endif</span>
<span class="p_add">+	.set_p4d = native_set_p4d,</span>
<span class="p_add">+</span>
<span class="p_add">+#if CONFIG_PGTABLE_LEVELS &gt;= 5</span>
<span class="p_add">+#error FIXME</span>
<span class="p_add">+#endif /* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
<span class="p_add">+#endif /* CONFIG_PGTABLE_LEVELS &gt;= 4 */</span>
 #endif /* CONFIG_PGTABLE_LEVELS &gt;= 3 */
 
 	.pte_val = PTE_IDENT,
<span class="p_header">diff --git a/arch/x86/mm/init_64.c b/arch/x86/mm/init_64.c</span>
<span class="p_header">index 14b9dd71d9e8..a991f5c4c2c4 100644</span>
<span class="p_header">--- a/arch/x86/mm/init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/init_64.c</span>
<span class="p_chunk">@@ -97,37 +97,47 @@</span> <span class="p_context"> void sync_global_pgds(unsigned long start, unsigned long end, int removed)</span>
 	unsigned long address;
 
 	for (address = start; address &lt;= end; address += PGDIR_SIZE) {
<span class="p_del">-		const pgd_t *pgd_ref = pgd_offset_k(address);</span>
<span class="p_add">+		pgd_t *pgd_ref = pgd_offset_k(address);</span>
<span class="p_add">+		const p4d_t *p4d_ref;</span>
 		struct page *page;
 
 		/*
<span class="p_del">-		 * When it is called after memory hot remove, pgd_none()</span>
<span class="p_add">+		 * With folded p4d, pgd_none() is always false, we need to</span>
<span class="p_add">+		 * handle synchonization on pgd level.</span>
<span class="p_add">+		 */</span>
<span class="p_add">+		BUILD_BUG_ON(pgd_none(*pgd_ref));</span>
<span class="p_add">+		p4d_ref = p4d_offset(pgd_ref, address);</span>
<span class="p_add">+</span>
<span class="p_add">+		/*</span>
<span class="p_add">+		 * When it is called after memory hot remove, p4d_none()</span>
 		 * returns true. In this case (removed == 1), we must clear
<span class="p_del">-		 * the PGD entries in the local PGD level page.</span>
<span class="p_add">+		 * the P4D entries in the local P4D level page.</span>
 		 */
<span class="p_del">-		if (pgd_none(*pgd_ref) &amp;&amp; !removed)</span>
<span class="p_add">+		if (p4d_none(*p4d_ref) &amp;&amp; !removed)</span>
 			continue;
 
 		spin_lock(&amp;pgd_lock);
 		list_for_each_entry(page, &amp;pgd_list, lru) {
 			pgd_t *pgd;
<span class="p_add">+			p4d_t *p4d;</span>
 			spinlock_t *pgt_lock;
 
 			pgd = (pgd_t *)page_address(page) + pgd_index(address);
<span class="p_add">+			p4d = p4d_offset(pgd, address);</span>
 			/* the pgt_lock only for Xen */
 			pgt_lock = &amp;pgd_page_get_mm(page)-&gt;page_table_lock;
 			spin_lock(pgt_lock);
 
<span class="p_del">-			if (!pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
<span class="p_del">-				BUG_ON(pgd_page_vaddr(*pgd)</span>
<span class="p_del">-				       != pgd_page_vaddr(*pgd_ref));</span>
<span class="p_add">+			if (!p4d_none(*p4d_ref) &amp;&amp; !p4d_none(*p4d))</span>
<span class="p_add">+				BUG_ON(p4d_page_vaddr(*p4d)</span>
<span class="p_add">+				       != p4d_page_vaddr(*p4d_ref));</span>
 
 			if (removed) {
<span class="p_del">-				if (pgd_none(*pgd_ref) &amp;&amp; !pgd_none(*pgd))</span>
<span class="p_del">-					pgd_clear(pgd);</span>
<span class="p_add">+				if (p4d_none(*p4d_ref) &amp;&amp; !p4d_none(*p4d))</span>
<span class="p_add">+					p4d_clear(p4d);</span>
 			} else {
<span class="p_del">-				if (pgd_none(*pgd))</span>
<span class="p_del">-					set_pgd(pgd, *pgd_ref);</span>
<span class="p_add">+				if (p4d_none(*p4d))</span>
<span class="p_add">+					set_p4d(p4d, *p4d_ref);</span>
 			}
 
 			spin_unlock(pgt_lock);
<span class="p_chunk">@@ -159,16 +169,28 @@</span> <span class="p_context"> static __ref void *spp_getpage(void)</span>
 	return ptr;
 }
 
<span class="p_del">-static pud_t *fill_pud(pgd_t *pgd, unsigned long vaddr)</span>
<span class="p_add">+static p4d_t *fill_p4d(pgd_t *pgd, unsigned long vaddr)</span>
 {
 	if (pgd_none(*pgd)) {
<span class="p_del">-		pud_t *pud = (pud_t *)spp_getpage();</span>
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, pud);</span>
<span class="p_del">-		if (pud != pud_offset(pgd, 0))</span>
<span class="p_add">+		p4d_t *p4d = (p4d_t *)spp_getpage();</span>
<span class="p_add">+		pgd_populate(&amp;init_mm, pgd, p4d);</span>
<span class="p_add">+		if (p4d != p4d_offset(pgd, 0))</span>
 			printk(KERN_ERR &quot;PAGETABLE BUG #00! %p &lt;-&gt; %p\n&quot;,
<span class="p_del">-			       pud, pud_offset(pgd, 0));</span>
<span class="p_add">+			       p4d, p4d_offset(pgd, 0));</span>
<span class="p_add">+	}</span>
<span class="p_add">+	return p4d_offset(pgd, vaddr);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static pud_t *fill_pud(p4d_t *p4d, unsigned long vaddr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	if (p4d_none(*p4d)) {</span>
<span class="p_add">+		pud_t *pud = (pud_t *)spp_getpage();</span>
<span class="p_add">+		p4d_populate(&amp;init_mm, p4d, pud);</span>
<span class="p_add">+		if (pud != pud_offset(p4d, 0))</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #01! %p &lt;-&gt; %p\n&quot;,</span>
<span class="p_add">+			       pud, pud_offset(p4d, 0));</span>
 	}
<span class="p_del">-	return pud_offset(pgd, vaddr);</span>
<span class="p_add">+	return pud_offset(p4d, vaddr);</span>
 }
 
 static pmd_t *fill_pmd(pud_t *pud, unsigned long vaddr)
<span class="p_chunk">@@ -177,7 +199,7 @@</span> <span class="p_context"> static pmd_t *fill_pmd(pud_t *pud, unsigned long vaddr)</span>
 		pmd_t *pmd = (pmd_t *) spp_getpage();
 		pud_populate(&amp;init_mm, pud, pmd);
 		if (pmd != pmd_offset(pud, 0))
<span class="p_del">-			printk(KERN_ERR &quot;PAGETABLE BUG #01! %p &lt;-&gt; %p\n&quot;,</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #02! %p &lt;-&gt; %p\n&quot;,</span>
 			       pmd, pmd_offset(pud, 0));
 	}
 	return pmd_offset(pud, vaddr);
<span class="p_chunk">@@ -189,18 +211,20 @@</span> <span class="p_context"> static pte_t *fill_pte(pmd_t *pmd, unsigned long vaddr)</span>
 		pte_t *pte = (pte_t *) spp_getpage();
 		pmd_populate_kernel(&amp;init_mm, pmd, pte);
 		if (pte != pte_offset_kernel(pmd, 0))
<span class="p_del">-			printk(KERN_ERR &quot;PAGETABLE BUG #02!\n&quot;);</span>
<span class="p_add">+			printk(KERN_ERR &quot;PAGETABLE BUG #03!\n&quot;);</span>
 	}
 	return pte_offset_kernel(pmd, vaddr);
 }
 
<span class="p_del">-void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte)</span>
<span class="p_add">+void set_pte_vaddr_p4d(pgd_t *pgd, unsigned long vaddr, pte_t new_pte)</span>
 {
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
 
<span class="p_del">-	pud = pud_page + pud_index(vaddr);</span>
<span class="p_add">+	p4d = fill_p4d(pgd, vaddr);</span>
<span class="p_add">+	pud = fill_pud(p4d, vaddr);</span>
 	pmd = fill_pmd(pud, vaddr);
 	pte = fill_pte(pmd, vaddr);
 
<span class="p_chunk">@@ -216,7 +240,6 @@</span> <span class="p_context"> void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte)</span>
 void set_pte_vaddr(unsigned long vaddr, pte_t pteval)
 {
 	pgd_t *pgd;
<span class="p_del">-	pud_t *pud_page;</span>
 
 	pr_debug(&quot;set_pte_vaddr %lx to %lx\n&quot;, vaddr, native_pte_val(pteval));
 
<span class="p_chunk">@@ -226,17 +249,18 @@</span> <span class="p_context"> void set_pte_vaddr(unsigned long vaddr, pte_t pteval)</span>
 			&quot;PGD FIXMAP MISSING, it should be setup in head.S!\n&quot;);
 		return;
 	}
<span class="p_del">-	pud_page = (pud_t*)pgd_page_vaddr(*pgd);</span>
<span class="p_del">-	set_pte_vaddr_pud(pud_page, vaddr, pteval);</span>
<span class="p_add">+	set_pte_vaddr_p4d(pgd, vaddr, pteval);</span>
 }
 
 pmd_t * __init populate_extra_pmd(unsigned long vaddr)
 {
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 
 	pgd = pgd_offset_k(vaddr);
<span class="p_del">-	pud = fill_pud(pgd, vaddr);</span>
<span class="p_add">+	p4d = fill_p4d(pgd, vaddr);</span>
<span class="p_add">+	pud = fill_pud(p4d, vaddr);</span>
 	return fill_pmd(pud, vaddr);
 }
 
<span class="p_chunk">@@ -255,6 +279,7 @@</span> <span class="p_context"> static void __init __init_extra_mapping(unsigned long phys, unsigned long size,</span>
 					enum page_cache_mode cache)
 {
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	pgprot_t prot;
<span class="p_chunk">@@ -265,11 +290,17 @@</span> <span class="p_context"> static void __init __init_extra_mapping(unsigned long phys, unsigned long size,</span>
 	for (; size; phys += PMD_SIZE, size -= PMD_SIZE) {
 		pgd = pgd_offset_k((unsigned long)__va(phys));
 		if (pgd_none(*pgd)) {
<span class="p_add">+			p4d = (p4d_t *) spp_getpage();</span>
<span class="p_add">+			set_pgd(pgd, __pgd(__pa(p4d) | _KERNPG_TABLE |</span>
<span class="p_add">+						_PAGE_USER));</span>
<span class="p_add">+		}</span>
<span class="p_add">+		p4d = p4d_offset(pgd, (unsigned long)__va(phys));</span>
<span class="p_add">+		if (p4d_none(*p4d)) {</span>
 			pud = (pud_t *) spp_getpage();
<span class="p_del">-			set_pgd(pgd, __pgd(__pa(pud) | _KERNPG_TABLE |</span>
<span class="p_add">+			set_p4d(p4d, __p4d(__pa(pud) | _KERNPG_TABLE |</span>
 						_PAGE_USER));
 		}
<span class="p_del">-		pud = pud_offset(pgd, (unsigned long)__va(phys));</span>
<span class="p_add">+		pud = pud_offset(p4d, (unsigned long)__va(phys));</span>
 		if (pud_none(*pud)) {
 			pmd = (pmd_t *) spp_getpage();
 			set_pud(pud, __pud(__pa(pmd) | _KERNPG_TABLE |
<span class="p_chunk">@@ -573,12 +604,15 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 
 	for (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {
 		pgd_t *pgd = pgd_offset_k(vaddr);
<span class="p_add">+		p4d_t *p4d;</span>
 		pud_t *pud;
 
 		vaddr_next = (vaddr &amp; PGDIR_MASK) + PGDIR_SIZE;
 
<span class="p_del">-		if (pgd_val(*pgd)) {</span>
<span class="p_del">-			pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		BUILD_BUG_ON(pgd_none(*pgd));</span>
<span class="p_add">+		p4d = p4d_offset(pgd, vaddr);</span>
<span class="p_add">+		if (p4d_val(*p4d)) {</span>
<span class="p_add">+			pud = (pud_t *)p4d_page_vaddr(*p4d);</span>
 			paddr_last = phys_pud_init(pud, __pa(vaddr),
 						   __pa(vaddr_end),
 						   page_size_mask);
<span class="p_chunk">@@ -590,7 +624,7 @@</span> <span class="p_context"> kernel_physical_mapping_init(unsigned long paddr_start,</span>
 					   page_size_mask);
 
 		spin_lock(&amp;init_mm.page_table_lock);
<span class="p_del">-		pgd_populate(&amp;init_mm, pgd, pud);</span>
<span class="p_add">+		p4d_populate(&amp;init_mm, p4d, pud);</span>
 		spin_unlock(&amp;init_mm.page_table_lock);
 		pgd_changed = true;
 	}
<span class="p_chunk">@@ -736,6 +770,24 @@</span> <span class="p_context"> static void __meminit free_pmd_table(pmd_t *pmd_start, pud_t *pud)</span>
 	spin_unlock(&amp;init_mm.page_table_lock);
 }
 
<span class="p_add">+static void __meminit free_pud_table(pud_t *pud_start, p4d_t *p4d)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	int i;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (i = 0; i &lt; PTRS_PER_PUD; i++) {</span>
<span class="p_add">+		pud = pud_start + i;</span>
<span class="p_add">+		if (!pud_none(*pud))</span>
<span class="p_add">+			return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* free a pud talbe */</span>
<span class="p_add">+	free_pagetable(p4d_page(*p4d), 0);</span>
<span class="p_add">+	spin_lock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+	p4d_clear(p4d);</span>
<span class="p_add">+	spin_unlock(&amp;init_mm.page_table_lock);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void __meminit
 remove_pte_table(pte_t *pte_start, unsigned long addr, unsigned long end,
 		 bool direct)
<span class="p_chunk">@@ -918,6 +970,32 @@</span> <span class="p_context"> remove_pud_table(pud_t *pud_start, unsigned long addr, unsigned long end,</span>
 		update_page_count(PG_LEVEL_1G, -pages);
 }
 
<span class="p_add">+static void __meminit</span>
<span class="p_add">+remove_p4d_table(p4d_t *p4d_start, unsigned long addr, unsigned long end,</span>
<span class="p_add">+		 bool direct)</span>
<span class="p_add">+{</span>
<span class="p_add">+	unsigned long next, pages = 0;</span>
<span class="p_add">+	pud_t *pud_base;</span>
<span class="p_add">+	p4d_t *p4d;</span>
<span class="p_add">+</span>
<span class="p_add">+	p4d = p4d_start + p4d_index(addr);</span>
<span class="p_add">+	for (; addr &lt; end; addr = next, p4d++) {</span>
<span class="p_add">+		next = p4d_addr_end(addr, end);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (!p4d_present(*p4d))</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+</span>
<span class="p_add">+		BUILD_BUG_ON(p4d_large(*p4d));</span>
<span class="p_add">+</span>
<span class="p_add">+		pud_base = (pud_t *)p4d_page_vaddr(*p4d);</span>
<span class="p_add">+		remove_pud_table(pud_base, addr, next, direct);</span>
<span class="p_add">+		free_pud_table(pud_base, p4d);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (direct)</span>
<span class="p_add">+		update_page_count(PG_LEVEL_512G, -pages);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 /* start and end are both virtual address. */
 static void __meminit
 remove_pagetable(unsigned long start, unsigned long end, bool direct)
<span class="p_chunk">@@ -925,7 +1003,7 @@</span> <span class="p_context"> remove_pagetable(unsigned long start, unsigned long end, bool direct)</span>
 	unsigned long next;
 	unsigned long addr;
 	pgd_t *pgd;
<span class="p_del">-	pud_t *pud;</span>
<span class="p_add">+	p4d_t *p4d;</span>
 
 	for (addr = start; addr &lt; end; addr = next) {
 		next = pgd_addr_end(addr, end);
<span class="p_chunk">@@ -934,8 +1012,8 @@</span> <span class="p_context"> remove_pagetable(unsigned long start, unsigned long end, bool direct)</span>
 		if (!pgd_present(*pgd))
 			continue;
 
<span class="p_del">-		pud = (pud_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_del">-		remove_pud_table(pud, addr, next, direct);</span>
<span class="p_add">+		p4d = (p4d_t *)pgd_page_vaddr(*pgd);</span>
<span class="p_add">+		remove_p4d_table(p4d, addr, next, direct);</span>
 	}
 
 	flush_tlb_all();
<span class="p_chunk">@@ -1105,6 +1183,7 @@</span> <span class="p_context"> int kern_addr_valid(unsigned long addr)</span>
 {
 	unsigned long above = ((long)addr) &gt;&gt; __VIRTUAL_MASK_SHIFT;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
<span class="p_chunk">@@ -1116,7 +1195,11 @@</span> <span class="p_context"> int kern_addr_valid(unsigned long addr)</span>
 	if (pgd_none(*pgd))
 		return 0;
 
<span class="p_del">-	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, addr);</span>
 	if (pud_none(*pud))
 		return 0;
 
<span class="p_chunk">@@ -1173,6 +1256,7 @@</span> <span class="p_context"> static int __meminit vmemmap_populate_hugepages(unsigned long start,</span>
 	unsigned long addr;
 	unsigned long next;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 
<span class="p_chunk">@@ -1183,7 +1267,11 @@</span> <span class="p_context"> static int __meminit vmemmap_populate_hugepages(unsigned long start,</span>
 		if (!pgd)
 			return -ENOMEM;
 
<span class="p_del">-		pud = vmemmap_pud_populate(pgd, addr, node);</span>
<span class="p_add">+		p4d = vmemmap_p4d_populate(pgd, addr, node);</span>
<span class="p_add">+		if (!p4d)</span>
<span class="p_add">+			return -ENOMEM;</span>
<span class="p_add">+</span>
<span class="p_add">+		pud = vmemmap_pud_populate(p4d, addr, node);</span>
 		if (!pud)
 			return -ENOMEM;
 
<span class="p_chunk">@@ -1251,6 +1339,7 @@</span> <span class="p_context"> void register_page_bootmem_memmap(unsigned long section_nr,</span>
 	unsigned long end = (unsigned long)(start_page + size);
 	unsigned long next;
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 	unsigned int nr_pages;
<span class="p_chunk">@@ -1266,7 +1355,14 @@</span> <span class="p_context"> void register_page_bootmem_memmap(unsigned long section_nr,</span>
 		}
 		get_page_bootmem(section_nr, pgd_page(*pgd), MIX_SECTION_INFO);
 
<span class="p_del">-		pud = pud_offset(pgd, addr);</span>
<span class="p_add">+		p4d = p4d_offset(pgd, addr);</span>
<span class="p_add">+		if (p4d_none(*p4d)) {</span>
<span class="p_add">+			next = (addr + PAGE_SIZE) &amp; PAGE_MASK;</span>
<span class="p_add">+			continue;</span>
<span class="p_add">+		}</span>
<span class="p_add">+		get_page_bootmem(section_nr, p4d_page(*p4d), MIX_SECTION_INFO);</span>
<span class="p_add">+</span>
<span class="p_add">+		pud = pud_offset(p4d, addr);</span>
 		if (pud_none(*pud)) {
 			next = (addr + PAGE_SIZE) &amp; PAGE_MASK;
 			continue;
<span class="p_header">diff --git a/arch/x86/mm/kasan_init_64.c b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">index 0493c17b8a51..2964de48e177 100644</span>
<span class="p_header">--- a/arch/x86/mm/kasan_init_64.c</span>
<span class="p_header">+++ b/arch/x86/mm/kasan_init_64.c</span>
<span class="p_chunk">@@ -31,8 +31,16 @@</span> <span class="p_context"> static int __init map_range(struct range *range)</span>
 static void __init clear_pgds(unsigned long start,
 			unsigned long end)
 {
<span class="p_del">-	for (; start &lt; end; start += PGDIR_SIZE)</span>
<span class="p_del">-		pgd_clear(pgd_offset_k(start));</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+</span>
<span class="p_add">+	for (; start &lt; end; start += PGDIR_SIZE) {</span>
<span class="p_add">+		pgd = pgd_offset_k(start);</span>
<span class="p_add">+#ifdef __PAGETABLE_P4D_FOLDED</span>
<span class="p_add">+		p4d_clear(p4d_offset(pgd, start));</span>
<span class="p_add">+#else</span>
<span class="p_add">+		pgd_clear(pgd);</span>
<span class="p_add">+#endif</span>
<span class="p_add">+	}</span>
 }
 
 static void __init kasan_map_early_shadow(pgd_t *pgd)
<span class="p_header">diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c</span>
<span class="p_header">index e3353c97d086..1cf11ffeb4c1 100644</span>
<span class="p_header">--- a/arch/x86/mm/pageattr.c</span>
<span class="p_header">+++ b/arch/x86/mm/pageattr.c</span>
<span class="p_chunk">@@ -333,6 +333,7 @@</span> <span class="p_context"> static inline pgprot_t static_protections(pgprot_t prot, unsigned long address,</span>
 pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
 			     unsigned int *level)
 {
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 	pmd_t *pmd;
 
<span class="p_chunk">@@ -341,7 +342,15 @@</span> <span class="p_context"> pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,</span>
 	if (pgd_none(*pgd))
 		return NULL;
 
<span class="p_del">-	pud = pud_offset(pgd, address);</span>
<span class="p_add">+	p4d = p4d_offset(pgd, address);</span>
<span class="p_add">+	if (p4d_none(*p4d))</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	*level = PG_LEVEL_512G;</span>
<span class="p_add">+	if (p4d_large(*p4d) || !p4d_present(*p4d))</span>
<span class="p_add">+		return (pte_t *)p4d;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, address);</span>
 	if (pud_none(*pud))
 		return NULL;
 
<span class="p_chunk">@@ -393,13 +402,18 @@</span> <span class="p_context"> static pte_t *_lookup_address_cpa(struct cpa_data *cpa, unsigned long address,</span>
 pmd_t *lookup_pmd_address(unsigned long address)
 {
 	pgd_t *pgd;
<span class="p_add">+	p4d_t *p4d;</span>
 	pud_t *pud;
 
 	pgd = pgd_offset_k(address);
 	if (pgd_none(*pgd))
 		return NULL;
 
<span class="p_del">-	pud = pud_offset(pgd, address);</span>
<span class="p_add">+	p4d = p4d_offset(pgd, address);</span>
<span class="p_add">+	if (p4d_none(*p4d) || p4d_large(*p4d) || !p4d_present(*p4d))</span>
<span class="p_add">+		return NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	pud = pud_offset(p4d, address);</span>
 	if (pud_none(*pud) || pud_large(*pud) || !pud_present(*pud))
 		return NULL;
 
<span class="p_chunk">@@ -464,11 +478,13 @@</span> <span class="p_context"> static void __set_pmd_pte(pte_t *kpte, unsigned long address, pte_t pte)</span>
 
 		list_for_each_entry(page, &amp;pgd_list, lru) {
 			pgd_t *pgd;
<span class="p_add">+			p4d_t *p4d;</span>
 			pud_t *pud;
 			pmd_t *pmd;
 
 			pgd = (pgd_t *)page_address(page) + pgd_index(address);
<span class="p_del">-			pud = pud_offset(pgd, address);</span>
<span class="p_add">+			p4d = p4d_offset(pgd, address);</span>
<span class="p_add">+			pud = pud_offset(p4d, address);</span>
 			pmd = pmd_offset(pud, address);
 			set_pte_atomic((pte_t *)pmd, pte);
 		}
<span class="p_chunk">@@ -823,9 +839,9 @@</span> <span class="p_context"> static void unmap_pmd_range(pud_t *pud, unsigned long start, unsigned long end)</span>
 			pud_clear(pud);
 }
 
<span class="p_del">-static void unmap_pud_range(pgd_t *pgd, unsigned long start, unsigned long end)</span>
<span class="p_add">+static void unmap_pud_range(p4d_t *p4d, unsigned long start, unsigned long end)</span>
 {
<span class="p_del">-	pud_t *pud = pud_offset(pgd, start);</span>
<span class="p_add">+	pud_t *pud = pud_offset(p4d, start);</span>
 
 	/*
 	 * Not on a GB page boundary?
<span class="p_chunk">@@ -991,8 +1007,8 @@</span> <span class="p_context"> static long populate_pmd(struct cpa_data *cpa,</span>
 	return num_pages;
 }
 
<span class="p_del">-static long populate_pud(struct cpa_data *cpa, unsigned long start, pgd_t *pgd,</span>
<span class="p_del">-			 pgprot_t pgprot)</span>
<span class="p_add">+static int populate_pud(struct cpa_data *cpa, unsigned long start, p4d_t *p4d,</span>
<span class="p_add">+			pgprot_t pgprot)</span>
 {
 	pud_t *pud;
 	unsigned long end;
<span class="p_chunk">@@ -1013,7 +1029,7 @@</span> <span class="p_context"> static long populate_pud(struct cpa_data *cpa, unsigned long start, pgd_t *pgd,</span>
 		cur_pages = (pre_end - start) &gt;&gt; PAGE_SHIFT;
 		cur_pages = min_t(int, (int)cpa-&gt;numpages, cur_pages);
 
<span class="p_del">-		pud = pud_offset(pgd, start);</span>
<span class="p_add">+		pud = pud_offset(p4d, start);</span>
 
 		/*
 		 * Need a PMD page?
<span class="p_chunk">@@ -1034,7 +1050,7 @@</span> <span class="p_context"> static long populate_pud(struct cpa_data *cpa, unsigned long start, pgd_t *pgd,</span>
 	if (cpa-&gt;numpages == cur_pages)
 		return cur_pages;
 
<span class="p_del">-	pud = pud_offset(pgd, start);</span>
<span class="p_add">+	pud = pud_offset(p4d, start);</span>
 	pud_pgprot = pgprot_4k_2_large(pgprot);
 
 	/*
<span class="p_chunk">@@ -1054,7 +1070,7 @@</span> <span class="p_context"> static long populate_pud(struct cpa_data *cpa, unsigned long start, pgd_t *pgd,</span>
 	if (start &lt; end) {
 		long tmp;
 
<span class="p_del">-		pud = pud_offset(pgd, start);</span>
<span class="p_add">+		pud = pud_offset(p4d, start);</span>
 		if (pud_none(*pud))
 			if (alloc_pmd_page(pud))
 				return -1;
<span class="p_chunk">@@ -1077,33 +1093,43 @@</span> <span class="p_context"> static int populate_pgd(struct cpa_data *cpa, unsigned long addr)</span>
 {
 	pgprot_t pgprot = __pgprot(_KERNPG_TABLE);
 	pud_t *pud = NULL;	/* shut up gcc */
<span class="p_add">+	p4d_t *p4d;</span>
 	pgd_t *pgd_entry;
 	long ret;
 
 	pgd_entry = cpa-&gt;pgd + pgd_index(addr);
 
<span class="p_add">+	if (pgd_none(*pgd_entry)) {</span>
<span class="p_add">+		p4d = (p4d_t *)get_zeroed_page(GFP_KERNEL | __GFP_NOTRACK);</span>
<span class="p_add">+		if (!p4d)</span>
<span class="p_add">+			return -1;</span>
<span class="p_add">+</span>
<span class="p_add">+		set_p4d(p4d, __p4d(__pa(p4d) | _KERNPG_TABLE));</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
 	/*
<span class="p_del">-	 * Allocate a PUD page and hand it down for mapping.</span>
<span class="p_add">+	 * Allocate a P4D page and hand it down for mapping.</span>
 	 */
<span class="p_del">-	if (pgd_none(*pgd_entry)) {</span>
<span class="p_add">+	p4d = p4d_offset(pgd_entry, addr);</span>
<span class="p_add">+	if (p4d_none(*p4d)) {</span>
 		pud = (pud_t *)get_zeroed_page(GFP_KERNEL | __GFP_NOTRACK);
 		if (!pud)
 			return -1;
 
<span class="p_del">-		set_pgd(pgd_entry, __pgd(__pa(pud) | _KERNPG_TABLE));</span>
<span class="p_add">+		set_p4d(p4d, __p4d(__pa(pud) | _KERNPG_TABLE));</span>
 	}
 
 	pgprot_val(pgprot) &amp;= ~pgprot_val(cpa-&gt;mask_clr);
 	pgprot_val(pgprot) |=  pgprot_val(cpa-&gt;mask_set);
 
<span class="p_del">-	ret = populate_pud(cpa, addr, pgd_entry, pgprot);</span>
<span class="p_add">+	ret = populate_pud(cpa, addr, p4d, pgprot);</span>
 	if (ret &lt; 0) {
 		/*
 		 * Leave the PUD page in place in case some other CPU or thread
 		 * already found it, but remove any useless entries we just
 		 * added to it.
 		 */
<span class="p_del">-		unmap_pud_range(pgd_entry, addr,</span>
<span class="p_add">+		unmap_pud_range(p4d, addr,</span>
 				addr + (cpa-&gt;numpages &lt;&lt; PAGE_SHIFT));
 		return ret;
 	}
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index ac4b0cbd479b..9c4f3cd31bf0 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -134,7 +134,7 @@</span> <span class="p_context"> static pgd_t *efi_pgd;</span>
 int __init efi_alloc_page_tables(void)
 {
 	pgd_t *pgd;
<span class="p_del">-	pud_t *pud;</span>
<span class="p_add">+	p4d_t *p4d;</span>
 	gfp_t gfp_mask;
 
 	if (efi_enabled(EFI_OLD_MEMMAP))
<span class="p_chunk">@@ -147,13 +147,13 @@</span> <span class="p_context"> int __init efi_alloc_page_tables(void)</span>
 
 	pgd = efi_pgd + pgd_index(EFI_VA_END);
 
<span class="p_del">-	pud = pud_alloc_one(NULL, 0);</span>
<span class="p_del">-	if (!pud) {</span>
<span class="p_add">+	p4d = p4d_alloc_one(NULL, 0);</span>
<span class="p_add">+	if (!p4d) {</span>
 		free_page((unsigned long)efi_pgd);
 		return -ENOMEM;
 	}
 
<span class="p_del">-	pgd_populate(NULL, pgd, pud);</span>
<span class="p_add">+	pgd_populate(NULL, pgd, p4d);</span>
 
 	return 0;
 }
<span class="p_header">diff --git a/arch/x86/xen/Kconfig b/arch/x86/xen/Kconfig</span>
<span class="p_header">index c7b15f3e2cf3..2aecee939095 100644</span>
<span class="p_header">--- a/arch/x86/xen/Kconfig</span>
<span class="p_header">+++ b/arch/x86/xen/Kconfig</span>
<span class="p_chunk">@@ -4,6 +4,7 @@</span> <span class="p_context"></span>
 
 config XEN
 	bool &quot;Xen guest support&quot;
<span class="p_add">+	depends on BROKEN</span>
 	depends on PARAVIRT
 	select PARAVIRT_CLOCK
 	select XEN_HAVE_PVMMU

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



