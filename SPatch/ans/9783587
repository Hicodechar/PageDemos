
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:x86/mm] x86/mm: Split read_cr3() into read_cr3_pa() and __read_cr3() - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:x86/mm] x86/mm: Split read_cr3() into read_cr3_pa() and __read_cr3()</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>June 13, 2017, 10:04 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-6c690ee1039b251e583fc65b28da30e97d6a7385@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9783587/mbox/"
   >mbox</a>
|
   <a href="/patch/9783587/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9783587/">/patch/9783587/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	28A15602DC for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:10:14 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 13D6427F97
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:10:14 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 04F5A2823D; Tue, 13 Jun 2017 10:10:14 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8D6FC27F97
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue, 13 Jun 2017 10:10:12 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752572AbdFMKJ7 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 13 Jun 2017 06:09:59 -0400
Received: from terminus.zytor.com ([65.50.211.136]:37397 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751895AbdFMKJ4 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 13 Jun 2017 06:09:56 -0400
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id v5DA43kN028564;
	Tue, 13 Jun 2017 03:04:03 -0700
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id v5DA426P028433;
	Tue, 13 Jun 2017 03:04:02 -0700
Date: Tue, 13 Jun 2017 03:04:02 -0700
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Andy Lutomirski &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-6c690ee1039b251e583fc65b28da30e97d6a7385@git.kernel.org&gt;
Cc: linux-kernel@vger.kernel.org, hpa@zytor.com, jpoimboe@redhat.com,
	peterz@infradead.org, tglx@linutronix.de, jgross@suse.com,
	bp@alien8.de, brgerst@gmail.com, thomas.lendacky@amd.com,
	luto@kernel.org, torvalds@linux-foundation.org, mingo@kernel.org,
	boris.ostrovsky@oracle.com, dvlasenk@redhat.com, xen-devel@lists.xen.org
Reply-To: tglx@linutronix.de, jpoimboe@redhat.com, peterz@infradead.org,
	linux-kernel@vger.kernel.org, hpa@zytor.com, jgross@suse.com,
	bp@alien8.de, brgerst@gmail.com, thomas.lendacky@amd.com,
	luto@kernel.org, torvalds@linux-foundation.org,
	boris.ostrovsky@oracle.com, mingo@kernel.org,
	xen-devel@lists.xen.org, dvlasenk@redhat.com
In-Reply-To: &lt;883f8fb121f4616c1c1427ad87350bb2f5ffeca1.1497288170.git.luto@kernel.org&gt;
References: &lt;883f8fb121f4616c1c1427ad87350bb2f5ffeca1.1497288170.git.luto@kernel.org&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:x86/mm] x86/mm: Split read_cr3() into read_cr3_pa() and
	__read_cr3()
Git-Commit-ID: 6c690ee1039b251e583fc65b28da30e97d6a7385
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - June 13, 2017, 10:04 a.m.</div>
<pre class="content">
Commit-ID:  6c690ee1039b251e583fc65b28da30e97d6a7385
Gitweb:     http://git.kernel.org/tip/6c690ee1039b251e583fc65b28da30e97d6a7385
Author:     Andy Lutomirski &lt;luto@kernel.org&gt;
AuthorDate: Mon, 12 Jun 2017 10:26:14 -0700
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Tue, 13 Jun 2017 08:48:09 +0200

x86/mm: Split read_cr3() into read_cr3_pa() and __read_cr3()

The kernel has several code paths that read CR3.  Most of them assume that
CR3 contains the PGD&#39;s physical address, whereas some of them awkwardly
use PHYSICAL_PAGE_MASK to mask off low bits.

Add explicit mask macros for CR3 and convert all of the CR3 readers.
This will keep them from breaking when PCID is enabled.
<span class="signed-off-by">
Signed-off-by: Andy Lutomirski &lt;luto@kernel.org&gt;</span>
Cc: Boris Ostrovsky &lt;boris.ostrovsky@oracle.com&gt;
Cc: Borislav Petkov &lt;bp@alien8.de&gt;
Cc: Brian Gerst &lt;brgerst@gmail.com&gt;
Cc: Denys Vlasenko &lt;dvlasenk@redhat.com&gt;
Cc: H. Peter Anvin &lt;hpa@zytor.com&gt;
Cc: Josh Poimboeuf &lt;jpoimboe@redhat.com&gt;
Cc: Juergen Gross &lt;jgross@suse.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Tom Lendacky &lt;thomas.lendacky@amd.com&gt;
Cc: xen-devel &lt;xen-devel@lists.xen.org&gt;
Link: http://lkml.kernel.org/r/883f8fb121f4616c1c1427ad87350bb2f5ffeca1.1497288170.git.luto@kernel.org
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 arch/x86/boot/compressed/pagetable.c   |  2 +-
 arch/x86/include/asm/efi.h             |  2 +-
 arch/x86/include/asm/mmu_context.h     |  4 ++--
 arch/x86/include/asm/paravirt.h        |  2 +-
 arch/x86/include/asm/processor-flags.h | 36 ++++++++++++++++++++++++++++++++++
 arch/x86/include/asm/processor.h       |  8 ++++++++
 arch/x86/include/asm/special_insns.h   | 10 +++++++---
 arch/x86/include/asm/tlbflush.h        |  4 ++--
 arch/x86/kernel/head64.c               |  3 ++-
 arch/x86/kernel/paravirt.c             |  2 +-
 arch/x86/kernel/process_32.c           |  2 +-
 arch/x86/kernel/process_64.c           |  2 +-
 arch/x86/kvm/vmx.c                     |  2 +-
 arch/x86/mm/fault.c                    | 10 +++++-----
 arch/x86/mm/ioremap.c                  |  2 +-
 arch/x86/platform/efi/efi_64.c         |  4 ++--
 arch/x86/platform/olpc/olpc-xo1-pm.c   |  2 +-
 arch/x86/power/cpu.c                   |  2 +-
 arch/x86/power/hibernate_64.c          |  3 ++-
 arch/x86/xen/mmu_pv.c                  |  6 +++---
 20 files changed, 79 insertions(+), 29 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/boot/compressed/pagetable.c b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">index 1d78f17..8e69df9 100644</span>
<span class="p_header">--- a/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_header">+++ b/arch/x86/boot/compressed/pagetable.c</span>
<span class="p_chunk">@@ -92,7 +92,7 @@</span> <span class="p_context"> void initialize_identity_maps(void)</span>
 	 * and we must append to the existing area instead of entirely
 	 * overwriting it.
 	 */
<span class="p_del">-	level4p = read_cr3();</span>
<span class="p_add">+	level4p = read_cr3_pa();</span>
 	if (level4p == (unsigned long)_pgtable) {
 		debug_putstr(&quot;booted via startup_32()\n&quot;);
 		pgt_data.pgt_buf = _pgtable + BOOT_INIT_PGT_SIZE;
<span class="p_header">diff --git a/arch/x86/include/asm/efi.h b/arch/x86/include/asm/efi.h</span>
<span class="p_header">index 2f77bce..d2ff779 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/efi.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/efi.h</span>
<span class="p_chunk">@@ -74,7 +74,7 @@</span> <span class="p_context"> struct efi_scratch {</span>
 	__kernel_fpu_begin();						\
 									\
 	if (efi_scratch.use_pgd) {					\
<span class="p_del">-		efi_scratch.prev_cr3 = read_cr3();			\</span>
<span class="p_add">+		efi_scratch.prev_cr3 = __read_cr3();			\</span>
 		write_cr3((unsigned long)efi_scratch.efi_pgt);		\
 		__flush_tlb_all();					\
 	}								\
<span class="p_header">diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">index 5a93f62..cfe6034 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/mmu_context.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/mmu_context.h</span>
<span class="p_chunk">@@ -269,7 +269,7 @@</span> <span class="p_context"> static inline bool arch_vma_access_permitted(struct vm_area_struct *vma,</span>
 
 /*
  * This can be used from process context to figure out what the value of
<span class="p_del">- * CR3 is without needing to do a (slow) read_cr3().</span>
<span class="p_add">+ * CR3 is without needing to do a (slow) __read_cr3().</span>
  *
  * It&#39;s intended to be used for code like KVM that sneakily changes CR3
  * and needs to restore it.  It needs to be used very carefully.
<span class="p_chunk">@@ -281,7 +281,7 @@</span> <span class="p_context"> static inline unsigned long __get_current_cr3_fast(void)</span>
 	/* For now, be very restrictive about when this can be called. */
 	VM_WARN_ON(in_nmi() || !in_atomic());
 
<span class="p_del">-	VM_BUG_ON(cr3 != read_cr3());</span>
<span class="p_add">+	VM_BUG_ON(cr3 != __read_cr3());</span>
 	return cr3;
 }
 
<span class="p_header">diff --git a/arch/x86/include/asm/paravirt.h b/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">index 9a15739..a63e77f 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/paravirt.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/paravirt.h</span>
<span class="p_chunk">@@ -61,7 +61,7 @@</span> <span class="p_context"> static inline void write_cr2(unsigned long x)</span>
 	PVOP_VCALL1(pv_mmu_ops.write_cr2, x);
 }
 
<span class="p_del">-static inline unsigned long read_cr3(void)</span>
<span class="p_add">+static inline unsigned long __read_cr3(void)</span>
 {
 	return PVOP_CALL0(unsigned long, pv_mmu_ops.read_cr3);
 }
<span class="p_header">diff --git a/arch/x86/include/asm/processor-flags.h b/arch/x86/include/asm/processor-flags.h</span>
<span class="p_header">index 39fb618..79aa2f9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor-flags.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor-flags.h</span>
<span class="p_chunk">@@ -8,4 +8,40 @@</span> <span class="p_context"></span>
 #else
 #define X86_VM_MASK	0 /* No VM86 support */
 #endif
<span class="p_add">+</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * CR3&#39;s layout varies depending on several things.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * If CR4.PCIDE is set (64-bit only), then CR3[11:0] is the address space ID.</span>
<span class="p_add">+ * If PAE is enabled, then CR3[11:5] is part of the PDPT address</span>
<span class="p_add">+ * (i.e. it&#39;s 32-byte aligned, not page-aligned) and CR3[4:0] is ignored.</span>
<span class="p_add">+ * Otherwise (non-PAE, non-PCID), CR3[3] is PWT, CR3[4] is PCD, and</span>
<span class="p_add">+ * CR3[2:0] and CR3[11:5] are ignored.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * In all cases, Linux puts zeros in the low ignored bits and in PWT and PCD.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * CR3[63] is always read as zero.  If CR4.PCIDE is set, then CR3[63] may be</span>
<span class="p_add">+ * written as 1 to prevent the write to CR3 from flushing the TLB.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * On systems with SME, one bit (in a variable position!) is stolen to indicate</span>
<span class="p_add">+ * that the top-level paging structure is encrypted.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * All of the remaining bits indicate the physical address of the top-level</span>
<span class="p_add">+ * paging structure.</span>
<span class="p_add">+ *</span>
<span class="p_add">+ * CR3_ADDR_MASK is the mask used by read_cr3_pa().</span>
<span class="p_add">+ */</span>
<span class="p_add">+#ifdef CONFIG_X86_64</span>
<span class="p_add">+/* Mask off the address space ID bits. */</span>
<span class="p_add">+#define CR3_ADDR_MASK 0x7FFFFFFFFFFFF000ull</span>
<span class="p_add">+#define CR3_PCID_MASK 0xFFFull</span>
<span class="p_add">+#else</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * CR3_ADDR_MASK needs at least bits 31:5 set on PAE systems, and we save</span>
<span class="p_add">+ * a tiny bit of code size by setting all the bits.</span>
<span class="p_add">+ */</span>
<span class="p_add">+#define CR3_ADDR_MASK 0xFFFFFFFFull</span>
<span class="p_add">+#define CR3_PCID_MASK 0ull</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #endif /* _ASM_X86_PROCESSOR_FLAGS_H */
<span class="p_header">diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h</span>
<span class="p_header">index 3cada99..9de02c9 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/processor.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/processor.h</span>
<span class="p_chunk">@@ -231,6 +231,14 @@</span> <span class="p_context"> native_cpuid_reg(ebx)</span>
 native_cpuid_reg(ecx)
 native_cpuid_reg(edx)
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Friendlier CR3 helpers.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline unsigned long read_cr3_pa(void)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return __read_cr3() &amp; CR3_ADDR_MASK;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static inline void load_cr3(pgd_t *pgdir)
 {
 	write_cr3(__pa(pgdir));
<span class="p_header">diff --git a/arch/x86/include/asm/special_insns.h b/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">index 12af3e3..9efaabf 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/special_insns.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/special_insns.h</span>
<span class="p_chunk">@@ -39,7 +39,7 @@</span> <span class="p_context"> static inline void native_write_cr2(unsigned long val)</span>
 	asm volatile(&quot;mov %0,%%cr2&quot;: : &quot;r&quot; (val), &quot;m&quot; (__force_order));
 }
 
<span class="p_del">-static inline unsigned long native_read_cr3(void)</span>
<span class="p_add">+static inline unsigned long __native_read_cr3(void)</span>
 {
 	unsigned long val;
 	asm volatile(&quot;mov %%cr3,%0\n\t&quot; : &quot;=r&quot; (val), &quot;=m&quot; (__force_order));
<span class="p_chunk">@@ -159,9 +159,13 @@</span> <span class="p_context"> static inline void write_cr2(unsigned long x)</span>
 	native_write_cr2(x);
 }
 
<span class="p_del">-static inline unsigned long read_cr3(void)</span>
<span class="p_add">+/*</span>
<span class="p_add">+ * Careful!  CR3 contains more than just an address.  You probably want</span>
<span class="p_add">+ * read_cr3_pa() instead.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline unsigned long __read_cr3(void)</span>
 {
<span class="p_del">-	return native_read_cr3();</span>
<span class="p_add">+	return __native_read_cr3();</span>
 }
 
 static inline void write_cr3(unsigned long x)
<span class="p_header">diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">index 388c246..5f78c6a 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/tlbflush.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/tlbflush.h</span>
<span class="p_chunk">@@ -156,7 +156,7 @@</span> <span class="p_context"> static inline void __native_flush_tlb(void)</span>
 	 * back:
 	 */
 	preempt_disable();
<span class="p_del">-	native_write_cr3(native_read_cr3());</span>
<span class="p_add">+	native_write_cr3(__native_read_cr3());</span>
 	preempt_enable();
 }
 
<span class="p_chunk">@@ -264,7 +264,7 @@</span> <span class="p_context"> static inline void reset_lazy_tlbstate(void)</span>
 	this_cpu_write(cpu_tlbstate.state, 0);
 	this_cpu_write(cpu_tlbstate.loaded_mm, &amp;init_mm);
 
<span class="p_del">-	WARN_ON(read_cr3() != __pa_symbol(swapper_pg_dir));</span>
<span class="p_add">+	WARN_ON(read_cr3_pa() != __pa_symbol(swapper_pg_dir));</span>
 }
 
 static inline void arch_tlbbatch_add_mm(struct arch_tlbflush_unmap_batch *batch,
<span class="p_header">diff --git a/arch/x86/kernel/head64.c b/arch/x86/kernel/head64.c</span>
<span class="p_header">index 43b7002..794e8f5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/head64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/head64.c</span>
<span class="p_chunk">@@ -55,7 +55,8 @@</span> <span class="p_context"> int __init early_make_pgtable(unsigned long address)</span>
 	pmdval_t pmd, *pmd_p;
 
 	/* Invalid address or early pgt is done ?  */
<span class="p_del">-	if (physaddr &gt;= MAXMEM || read_cr3() != __pa_nodebug(early_level4_pgt))</span>
<span class="p_add">+	if (physaddr &gt;= MAXMEM ||</span>
<span class="p_add">+	    read_cr3_pa() != __pa_nodebug(early_level4_pgt))</span>
 		return -1;
 
 again:
<span class="p_header">diff --git a/arch/x86/kernel/paravirt.c b/arch/x86/kernel/paravirt.c</span>
<span class="p_header">index 3586996..bc0a849 100644</span>
<span class="p_header">--- a/arch/x86/kernel/paravirt.c</span>
<span class="p_header">+++ b/arch/x86/kernel/paravirt.c</span>
<span class="p_chunk">@@ -391,7 +391,7 @@</span> <span class="p_context"> struct pv_mmu_ops pv_mmu_ops __ro_after_init = {</span>
 
 	.read_cr2 = native_read_cr2,
 	.write_cr2 = native_write_cr2,
<span class="p_del">-	.read_cr3 = native_read_cr3,</span>
<span class="p_add">+	.read_cr3 = __native_read_cr3,</span>
 	.write_cr3 = native_write_cr3,
 
 	.flush_tlb_user = native_flush_tlb,
<span class="p_header">diff --git a/arch/x86/kernel/process_32.c b/arch/x86/kernel/process_32.c</span>
<span class="p_header">index ffeae81..c6d6dc5 100644</span>
<span class="p_header">--- a/arch/x86/kernel/process_32.c</span>
<span class="p_header">+++ b/arch/x86/kernel/process_32.c</span>
<span class="p_chunk">@@ -92,7 +92,7 @@</span> <span class="p_context"> void __show_regs(struct pt_regs *regs, int all)</span>
 
 	cr0 = read_cr0();
 	cr2 = read_cr2();
<span class="p_del">-	cr3 = read_cr3();</span>
<span class="p_add">+	cr3 = __read_cr3();</span>
 	cr4 = __read_cr4();
 	printk(KERN_DEFAULT &quot;CR0: %08lx CR2: %08lx CR3: %08lx CR4: %08lx\n&quot;,
 			cr0, cr2, cr3, cr4);
<span class="p_header">diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c</span>
<span class="p_header">index 9c39ab8..c3169be 100644</span>
<span class="p_header">--- a/arch/x86/kernel/process_64.c</span>
<span class="p_header">+++ b/arch/x86/kernel/process_64.c</span>
<span class="p_chunk">@@ -104,7 +104,7 @@</span> <span class="p_context"> void __show_regs(struct pt_regs *regs, int all)</span>
 
 	cr0 = read_cr0();
 	cr2 = read_cr2();
<span class="p_del">-	cr3 = read_cr3();</span>
<span class="p_add">+	cr3 = __read_cr3();</span>
 	cr4 = __read_cr4();
 
 	printk(KERN_DEFAULT &quot;FS:  %016lx(%04x) GS:%016lx(%04x) knlGS:%016lx\n&quot;,
<span class="p_header">diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c</span>
<span class="p_header">index 19cde55..d143dd3 100644</span>
<span class="p_header">--- a/arch/x86/kvm/vmx.c</span>
<span class="p_header">+++ b/arch/x86/kvm/vmx.c</span>
<span class="p_chunk">@@ -5024,7 +5024,7 @@</span> <span class="p_context"> static void vmx_set_constant_host_state(struct vcpu_vmx *vmx)</span>
 	 * Save the most likely value for this task&#39;s CR3 in the VMCS.
 	 * We can&#39;t use __get_current_cr3_fast() because we&#39;re not atomic.
 	 */
<span class="p_del">-	cr3 = read_cr3();</span>
<span class="p_add">+	cr3 = __read_cr3();</span>
 	vmcs_writel(HOST_CR3, cr3);		/* 22.2.3  FIXME: shadow tables */
 	vmx-&gt;host_state.vmcs_host_cr3 = cr3;
 
<span class="p_header">diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c</span>
<span class="p_header">index 8ad91a0..2a1fa10c 100644</span>
<span class="p_header">--- a/arch/x86/mm/fault.c</span>
<span class="p_header">+++ b/arch/x86/mm/fault.c</span>
<span class="p_chunk">@@ -346,7 +346,7 @@</span> <span class="p_context"> static noinline int vmalloc_fault(unsigned long address)</span>
 	 * Do _not_ use &quot;current&quot; here. We might be inside
 	 * an interrupt in the middle of a task switch..
 	 */
<span class="p_del">-	pgd_paddr = read_cr3();</span>
<span class="p_add">+	pgd_paddr = read_cr3_pa();</span>
 	pmd_k = vmalloc_sync_one(__va(pgd_paddr), address);
 	if (!pmd_k)
 		return -1;
<span class="p_chunk">@@ -388,7 +388,7 @@</span> <span class="p_context"> static bool low_pfn(unsigned long pfn)</span>
 
 static void dump_pagetable(unsigned long address)
 {
<span class="p_del">-	pgd_t *base = __va(read_cr3());</span>
<span class="p_add">+	pgd_t *base = __va(read_cr3_pa());</span>
 	pgd_t *pgd = &amp;base[pgd_index(address)];
 	p4d_t *p4d;
 	pud_t *pud;
<span class="p_chunk">@@ -451,7 +451,7 @@</span> <span class="p_context"> static noinline int vmalloc_fault(unsigned long address)</span>
 	 * happen within a race in page table update. In the later
 	 * case just flush:
 	 */
<span class="p_del">-	pgd = (pgd_t *)__va(read_cr3()) + pgd_index(address);</span>
<span class="p_add">+	pgd = (pgd_t *)__va(read_cr3_pa()) + pgd_index(address);</span>
 	pgd_ref = pgd_offset_k(address);
 	if (pgd_none(*pgd_ref))
 		return -1;
<span class="p_chunk">@@ -555,7 +555,7 @@</span> <span class="p_context"> static int bad_address(void *p)</span>
 
 static void dump_pagetable(unsigned long address)
 {
<span class="p_del">-	pgd_t *base = __va(read_cr3() &amp; PHYSICAL_PAGE_MASK);</span>
<span class="p_add">+	pgd_t *base = __va(read_cr3_pa());</span>
 	pgd_t *pgd = base + pgd_index(address);
 	p4d_t *p4d;
 	pud_t *pud;
<span class="p_chunk">@@ -700,7 +700,7 @@</span> <span class="p_context"> show_fault_oops(struct pt_regs *regs, unsigned long error_code,</span>
 		pgd_t *pgd;
 		pte_t *pte;
 
<span class="p_del">-		pgd = __va(read_cr3() &amp; PHYSICAL_PAGE_MASK);</span>
<span class="p_add">+		pgd = __va(read_cr3_pa());</span>
 		pgd += pgd_index(address);
 
 		pte = lookup_address_in_pgd(pgd, address, &amp;level);
<span class="p_header">diff --git a/arch/x86/mm/ioremap.c b/arch/x86/mm/ioremap.c</span>
<span class="p_header">index bbc558b..4c1b5fd 100644</span>
<span class="p_header">--- a/arch/x86/mm/ioremap.c</span>
<span class="p_header">+++ b/arch/x86/mm/ioremap.c</span>
<span class="p_chunk">@@ -424,7 +424,7 @@</span> <span class="p_context"> static pte_t bm_pte[PAGE_SIZE/sizeof(pte_t)] __page_aligned_bss;</span>
 static inline pmd_t * __init early_ioremap_pmd(unsigned long addr)
 {
 	/* Don&#39;t assume we&#39;re using swapper_pg_dir at this point */
<span class="p_del">-	pgd_t *base = __va(read_cr3());</span>
<span class="p_add">+	pgd_t *base = __va(read_cr3_pa());</span>
 	pgd_t *pgd = &amp;base[pgd_index(addr)];
 	p4d_t *p4d = p4d_offset(pgd, addr);
 	pud_t *pud = pud_offset(p4d, addr);
<span class="p_header">diff --git a/arch/x86/platform/efi/efi_64.c b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">index eb8dff1..f40bf62 100644</span>
<span class="p_header">--- a/arch/x86/platform/efi/efi_64.c</span>
<span class="p_header">+++ b/arch/x86/platform/efi/efi_64.c</span>
<span class="p_chunk">@@ -80,7 +80,7 @@</span> <span class="p_context"> pgd_t * __init efi_call_phys_prolog(void)</span>
 	int n_pgds, i, j;
 
 	if (!efi_enabled(EFI_OLD_MEMMAP)) {
<span class="p_del">-		save_pgd = (pgd_t *)read_cr3();</span>
<span class="p_add">+		save_pgd = (pgd_t *)__read_cr3();</span>
 		write_cr3((unsigned long)efi_scratch.efi_pgt);
 		goto out;
 	}
<span class="p_chunk">@@ -646,7 +646,7 @@</span> <span class="p_context"> efi_status_t efi_thunk_set_virtual_address_map(</span>
 	efi_sync_low_kernel_mappings();
 	local_irq_save(flags);
 
<span class="p_del">-	efi_scratch.prev_cr3 = read_cr3();</span>
<span class="p_add">+	efi_scratch.prev_cr3 = __read_cr3();</span>
 	write_cr3((unsigned long)efi_scratch.efi_pgt);
 	__flush_tlb_all();
 
<span class="p_header">diff --git a/arch/x86/platform/olpc/olpc-xo1-pm.c b/arch/x86/platform/olpc/olpc-xo1-pm.c</span>
<span class="p_header">index c5350fd..0668aaf 100644</span>
<span class="p_header">--- a/arch/x86/platform/olpc/olpc-xo1-pm.c</span>
<span class="p_header">+++ b/arch/x86/platform/olpc/olpc-xo1-pm.c</span>
<span class="p_chunk">@@ -77,7 +77,7 @@</span> <span class="p_context"> static int xo1_power_state_enter(suspend_state_t pm_state)</span>
 
 asmlinkage __visible int xo1_do_sleep(u8 sleep_state)
 {
<span class="p_del">-	void *pgd_addr = __va(read_cr3());</span>
<span class="p_add">+	void *pgd_addr = __va(read_cr3_pa());</span>
 
 	/* Program wakeup mask (using dword access to CS5536_PM1_EN) */
 	outl(wakeup_mask &lt;&lt; 16, acpi_base + CS5536_PM1_STS);
<span class="p_header">diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c</span>
<span class="p_header">index 6b05a92..78459a6 100644</span>
<span class="p_header">--- a/arch/x86/power/cpu.c</span>
<span class="p_header">+++ b/arch/x86/power/cpu.c</span>
<span class="p_chunk">@@ -129,7 +129,7 @@</span> <span class="p_context"> static void __save_processor_state(struct saved_context *ctxt)</span>
 	 */
 	ctxt-&gt;cr0 = read_cr0();
 	ctxt-&gt;cr2 = read_cr2();
<span class="p_del">-	ctxt-&gt;cr3 = read_cr3();</span>
<span class="p_add">+	ctxt-&gt;cr3 = __read_cr3();</span>
 	ctxt-&gt;cr4 = __read_cr4();
 #ifdef CONFIG_X86_64
 	ctxt-&gt;cr8 = read_cr8();
<span class="p_header">diff --git a/arch/x86/power/hibernate_64.c b/arch/x86/power/hibernate_64.c</span>
<span class="p_header">index a6e21fe..e3e62c8 100644</span>
<span class="p_header">--- a/arch/x86/power/hibernate_64.c</span>
<span class="p_header">+++ b/arch/x86/power/hibernate_64.c</span>
<span class="p_chunk">@@ -150,7 +150,8 @@</span> <span class="p_context"> static int relocate_restore_code(void)</span>
 	memcpy((void *)relocated_restore_code, &amp;core_restore_code, PAGE_SIZE);
 
 	/* Make the page containing the relocated code executable */
<span class="p_del">-	pgd = (pgd_t *)__va(read_cr3()) + pgd_index(relocated_restore_code);</span>
<span class="p_add">+	pgd = (pgd_t *)__va(read_cr3_pa()) +</span>
<span class="p_add">+		pgd_index(relocated_restore_code);</span>
 	p4d = p4d_offset(pgd, relocated_restore_code);
 	if (p4d_large(*p4d)) {
 		set_p4d(p4d, __p4d(p4d_val(*p4d) &amp; ~_PAGE_NX));
<span class="p_header">diff --git a/arch/x86/xen/mmu_pv.c b/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">index 21beb37..4f63830 100644</span>
<span class="p_header">--- a/arch/x86/xen/mmu_pv.c</span>
<span class="p_header">+++ b/arch/x86/xen/mmu_pv.c</span>
<span class="p_chunk">@@ -2017,7 +2017,7 @@</span> <span class="p_context"> static phys_addr_t __init xen_early_virt_to_phys(unsigned long vaddr)</span>
 	pmd_t pmd;
 	pte_t pte;
 
<span class="p_del">-	pa = read_cr3();</span>
<span class="p_add">+	pa = read_cr3_pa();</span>
 	pgd = native_make_pgd(xen_read_phys_ulong(pa + pgd_index(vaddr) *
 						       sizeof(pgd)));
 	if (!pgd_present(pgd))
<span class="p_chunk">@@ -2097,7 +2097,7 @@</span> <span class="p_context"> void __init xen_relocate_p2m(void)</span>
 	pt_phys = pmd_phys + PFN_PHYS(n_pmd);
 	p2m_pfn = PFN_DOWN(pt_phys) + n_pt;
 
<span class="p_del">-	pgd = __va(read_cr3());</span>
<span class="p_add">+	pgd = __va(read_cr3_pa());</span>
 	new_p2m = (unsigned long *)(2 * PGDIR_SIZE);
 	idx_p4d = 0;
 	save_pud = n_pud;
<span class="p_chunk">@@ -2204,7 +2204,7 @@</span> <span class="p_context"> static void __init xen_write_cr3_init(unsigned long cr3)</span>
 {
 	unsigned long pfn = PFN_DOWN(__pa(swapper_pg_dir));
 
<span class="p_del">-	BUG_ON(read_cr3() != __pa(initial_page_table));</span>
<span class="p_add">+	BUG_ON(read_cr3_pa() != __pa(initial_page_table));</span>
 	BUG_ON(cr3 != __pa(swapper_pg_dir));
 
 	/*

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



