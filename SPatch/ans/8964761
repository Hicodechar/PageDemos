
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[07/21] X86_64, UV: Remove Support for UV1 - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [07/21] X86_64, UV: Remove Support for UV1</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=170">Mike Travis</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>April 28, 2016, 12:55 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160428005458.729286570@asylum.americas.sgi.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/8964761/mbox/"
   >mbox</a>
|
   <a href="/patch/8964761/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/8964761/">/patch/8964761/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork1.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork1.web.kernel.org (Postfix) with ESMTP id D74F49F1D3
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 01:12:19 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 0A1A920219
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 01:12:19 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 16E7B2027D
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Thu, 28 Apr 2016 01:12:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1753760AbcD1BMJ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 27 Apr 2016 21:12:09 -0400
Received: from relay2.sgi.com ([192.48.180.65]:46824 &quot;EHLO relay.sgi.com&quot;
	rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
	id S1752533AbcD1BGF (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 27 Apr 2016 21:06:05 -0400
Received: from asylum.americas.sgi.com (asylum.americas.sgi.com
	[128.162.237.107])
	by relay2.corp.sgi.com (Postfix) with ESMTP id 20E1B304039;
	Wed, 27 Apr 2016 17:54:59 -0700 (PDT)
Received: by asylum.americas.sgi.com (Postfix, from userid 5508)
	id D558CC3FD94; Wed, 27 Apr 2016 19:54:58 -0500 (CDT)
Message-Id: &lt;20160428005458.729286570@asylum.americas.sgi.com&gt;
References: &lt;20160428005457.471061412@asylum.americas.sgi.com&gt;
User-Agent: quilt/0.46-1
Date: Wed, 27 Apr 2016 19:55:04 -0500
From: Mike Travis &lt;travis@sgi.com&gt;
To: Ingo Molnar &lt;mingo@redhat.com&gt;, &quot;H. Peter Anvin&quot; &lt;hpa@zytor.com&gt;,
	Thomas Gleixner &lt;tglx@linutronix.de&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;,
	Len Brown &lt;len.brown@intel.com&gt;
Cc: x86@kernel.org, linux-kernel@vger.kernel.org, uv4-kernel@sgi.com
Subject: [PATCH 07/21] X86_64, UV: Remove Support for UV1
Content-Disposition: inline; filename=uv4_remove_uv1_support
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170">Mike Travis</a> - April 28, 2016, 12:55 a.m.</div>
<pre class="content">
The UV1 architecture is no longer being supported in future Linux kernels, so
remove UV1 specific code.
<span class="signed-off-by">
Signed-off-by: Mike Travis &lt;travis@sgi.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Dimitri Sivanich &lt;sivanich@sgi.com&gt;</span>
<span class="tested-by">Tested-by: John Estabrook &lt;estabrook@sgi.com&gt;</span>
<span class="tested-by">Tested-by: Gary Kroening &lt;gfk@sgi.com&gt;</span>
---
 arch/x86/include/asm/uv/uv_hub.h   |    9 ------
 arch/x86/kernel/apic/x2apic_uv_x.c |   53 ++-----------------------------------
 arch/x86/platform/uv/tlb_uv.c      |    2 -
 arch/x86/platform/uv/uv_time.c     |    3 --
 4 files changed, 5 insertions(+), 62 deletions(-)


--
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=35552">Ingo Molnar</a> - April 28, 2016, 8:48 a.m.</div>
<pre class="content">
* Mike Travis &lt;travis@sgi.com&gt; wrote:
<span class="quote">
&gt; The UV1 architecture is no longer being supported in future Linux kernels, so</span>

Is such hardware still out there? If yes then please don&#39;t break it.

You might not want to test it, and if no-one else does it will eventually and 
inevitably bit rot, but please don&#39;t intentionally cripple it ..

Thanks,

	Ingo
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=170">Mike Travis</a> - April 28, 2016, 9:52 p.m.</div>
<pre class="content">
Hi Ingo,

I updated that patch to not remove any code, but instead there is now a
config option to enable or disable UV1 support, as well as an config help
message on why that might be done.  I also addressed the other issues
you raised in the following 2 emails.  And I found out that the newer
&quot;checkpatches&quot; script also had some new &quot;concerns&quot;.  I was able to fix
all that were possible (or practical).

The patches follow...

Thanks!
Mike

On 4/28/2016 1:48 AM, Ingo Molnar wrote:
<span class="quote">&gt; </span>
<span class="quote">&gt; * Mike Travis &lt;travis@sgi.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;&gt; The UV1 architecture is no longer being supported in future Linux kernels, so</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Is such hardware still out there? If yes then please don&#39;t break it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; You might not want to test it, and if no-one else does it will eventually and </span>
<span class="quote">&gt; inevitably bit rot, but please don&#39;t intentionally cripple it ..</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; 	Ingo</span>
<span class="quote">&gt;</span>
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">--- linux.orig/arch/x86/include/asm/uv/uv_hub.h</span>
<span class="p_header">+++ linux/arch/x86/include/asm/uv/uv_hub.h</span>
<span class="p_chunk">@@ -289,25 +289,21 @@</span> <span class="p_context"> union uvh_apicid {</span>
 #define UV4_GLOBAL_MMR32_SIZE		(16UL * 1024 * 1024)
 
 #define UV_LOCAL_MMR_BASE		(				\
<span class="p_del">-					is_uv1_hub() ? UV1_LOCAL_MMR_BASE : \</span>
 					is_uv2_hub() ? UV2_LOCAL_MMR_BASE : \
 					is_uv3_hub() ? UV3_LOCAL_MMR_BASE : \
 					/*is_uv4_hub*/ UV4_LOCAL_MMR_BASE)
 
 #define UV_GLOBAL_MMR32_BASE		(				\
<span class="p_del">-					is_uv1_hub() ? UV1_GLOBAL_MMR32_BASE : \</span>
 					is_uv2_hub() ? UV2_GLOBAL_MMR32_BASE : \
 					is_uv3_hub() ? UV3_GLOBAL_MMR32_BASE : \
 					/*is_uv4_hub*/ UV4_GLOBAL_MMR32_BASE)
 
 #define UV_LOCAL_MMR_SIZE		(				\
<span class="p_del">-					is_uv1_hub() ? UV1_LOCAL_MMR_SIZE : \</span>
 					is_uv2_hub() ? UV2_LOCAL_MMR_SIZE : \
 					is_uv3_hub() ? UV3_LOCAL_MMR_SIZE : \
 					/*is_uv4_hub*/ UV4_LOCAL_MMR_SIZE)
 
 #define UV_GLOBAL_MMR32_SIZE		(				\
<span class="p_del">-					is_uv1_hub() ? UV1_GLOBAL_MMR32_SIZE : \</span>
 					is_uv2_hub() ? UV2_GLOBAL_MMR32_SIZE : \
 					is_uv3_hub() ? UV3_GLOBAL_MMR32_SIZE : \
 					/*is_uv4_hub*/ UV4_GLOBAL_MMR32_SIZE)
<span class="p_chunk">@@ -445,9 +441,6 @@</span> <span class="p_context"> static inline int uv_apicid_to_pnode(int</span>
  */
 static inline int uv_apicid_to_socket(int apicid)
 {
<span class="p_del">-	if (is_uv1_hub())</span>
<span class="p_del">-		return (apicid &gt;&gt; (uv_hub_info-&gt;apic_pnode_shift - 1)) &amp; 1;</span>
<span class="p_del">-	else</span>
 		return 0;
 }
 
<span class="p_chunk">@@ -704,10 +697,8 @@</span> <span class="p_context"> static inline void uv_set_cpu_scir_bits(</span>
 	}
 }
 
<span class="p_del">-extern unsigned int uv_apicid_hibits;</span>
 static unsigned long uv_hub_ipi_value(int apicid, int vector, int mode)
 {
<span class="p_del">-	apicid |= uv_apicid_hibits;</span>
 	return (1UL &lt;&lt; UVH_IPI_INT_SEND_SHFT) |
 			((apicid) &lt;&lt; UVH_IPI_INT_APIC_ID_SHFT) |
 			(mode &lt;&lt; UVH_IPI_INT_DELIVERY_MODE_SHFT) |
<span class="p_header">--- linux.orig/arch/x86/kernel/apic/x2apic_uv_x.c</span>
<span class="p_header">+++ linux/arch/x86/kernel/apic/x2apic_uv_x.c</span>
<span class="p_chunk">@@ -39,8 +39,6 @@</span> <span class="p_context"></span>
 #include &lt;asm/x86_init.h&gt;
 #include &lt;asm/nmi.h&gt;
 
<span class="p_del">-DEFINE_PER_CPU(int, x2apic_extra_bits);</span>
<span class="p_del">-</span>
 #define PR_DEVEL(fmt, args...)	pr_devel(&quot;%s: &quot; fmt, __func__, args)
 
 static enum uv_system_type uv_system_type;
<span class="p_chunk">@@ -50,8 +48,6 @@</span> <span class="p_context"> static u64 gru_dist_lmask, gru_dist_umas</span>
 static union uvh_apicid uvh_apicid;
 int uv_min_hub_revision_id;
 EXPORT_SYMBOL_GPL(uv_min_hub_revision_id);
<span class="p_del">-unsigned int uv_apicid_hibits;</span>
<span class="p_del">-EXPORT_SYMBOL_GPL(uv_apicid_hibits);</span>
 
 static struct apic apic_x2apic_uv_x;
 
<span class="p_chunk">@@ -140,23 +136,6 @@</span> <span class="p_context"> static void __init early_get_apic_pnode_</span>
 		uvh_apicid.s.pnode_shift = UV_APIC_PNODE_SHIFT;
 }
 
<span class="p_del">-/*</span>
<span class="p_del">- * Add an extra bit as dictated by bios to the destination apicid of</span>
<span class="p_del">- * interrupts potentially passing through the UV HUB.  This prevents</span>
<span class="p_del">- * a deadlock between interrupts and IO port operations.</span>
<span class="p_del">- */</span>
<span class="p_del">-static void __init uv_set_apicid_hibit(void)</span>
<span class="p_del">-{</span>
<span class="p_del">-	union uv1h_lb_target_physical_apic_id_mask_u apicid_mask;</span>
<span class="p_del">-</span>
<span class="p_del">-	if (is_uv1_hub()) {</span>
<span class="p_del">-		apicid_mask.v =</span>
<span class="p_del">-			uv_early_read_mmr(UV1H_LB_TARGET_PHYSICAL_APIC_ID_MASK);</span>
<span class="p_del">-		uv_apicid_hibits =</span>
<span class="p_del">-			apicid_mask.s1.bit_enables &amp; UV_APICID_HIBIT_MASK;</span>
<span class="p_del">-	}</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 static int __init uv_acpi_madt_oem_check(char *oem_id, char *oem_table_id)
 {
 	int pnodeid;
<span class="p_chunk">@@ -189,14 +168,6 @@</span> <span class="p_context"> static int __init uv_acpi_madt_oem_check</span>
 	if (!strcmp(oem_table_id, &quot;UVX&quot;)) {		/* most common */
 		uv_system_type = UV_X2APIC;
 		uv_apic = 0;
<span class="p_del">-</span>
<span class="p_del">-	} else if (!strcmp(oem_table_id, &quot;UVH&quot;)) {	/* only UV1 systems */</span>
<span class="p_del">-		uv_system_type = UV_NON_UNIQUE_APIC;</span>
<span class="p_del">-		__this_cpu_write(x2apic_extra_bits,</span>
<span class="p_del">-			pnodeid &lt;&lt; uvh_apicid.s.pnode_shift);</span>
<span class="p_del">-		uv_set_apicid_hibit();</span>
<span class="p_del">-		uv_apic = 1;</span>
<span class="p_del">-</span>
 	} else	if (!strcmp(oem_table_id, &quot;UVL&quot;)) {	/* only used for */
 		uv_system_type = UV_LEGACY_APIC;	/* very small systems */
 		uv_apic = 0;
<span class="p_chunk">@@ -252,7 +223,6 @@</span> <span class="p_context"> static int uv_wakeup_secondary(int phys_</span>
 	int pnode;
 
 	pnode = uv_apicid_to_pnode(phys_apicid);
<span class="p_del">-	phys_apicid |= uv_apicid_hibits;</span>
 	val = (1UL &lt;&lt; UVH_IPI_INT_SEND_SHFT) |
 	    (phys_apicid &lt;&lt; UVH_IPI_INT_APIC_ID_SHFT) |
 	    ((start_rip &lt;&lt; UVH_IPI_INT_VECTOR_SHFT) &gt;&gt; 12) |
<span class="p_chunk">@@ -344,7 +314,7 @@</span> <span class="p_context"> uv_cpu_mask_to_apicid_and(const struct c</span>
 	}
 
 	if (likely(cpu &lt; nr_cpu_ids)) {
<span class="p_del">-		*apicid = per_cpu(x86_cpu_to_apicid, cpu) | uv_apicid_hibits;</span>
<span class="p_add">+		*apicid = per_cpu(x86_cpu_to_apicid, cpu);</span>
 		return 0;
 	}
 
<span class="p_chunk">@@ -353,21 +323,12 @@</span> <span class="p_context"> uv_cpu_mask_to_apicid_and(const struct c</span>
 
 static unsigned int x2apic_get_apic_id(unsigned long x)
 {
<span class="p_del">-	unsigned int id;</span>
<span class="p_del">-</span>
<span class="p_del">-	WARN_ON(preemptible() &amp;&amp; num_online_cpus() &gt; 1);</span>
<span class="p_del">-	id = x | __this_cpu_read(x2apic_extra_bits);</span>
<span class="p_del">-</span>
<span class="p_del">-	return id;</span>
<span class="p_add">+	return x;</span>
 }
 
 static unsigned long set_apic_id(unsigned int id)
 {
<span class="p_del">-	unsigned long x;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* maskout x2apic_extra_bits ? */</span>
<span class="p_del">-	x = id;</span>
<span class="p_del">-	return x;</span>
<span class="p_add">+	return id;</span>
 }
 
 static unsigned int uv_read_apic_id(void)
<span class="p_chunk">@@ -442,11 +403,6 @@</span> <span class="p_context"> static struct apic __refdata apic_x2apic</span>
 	.safe_wait_icr_idle		= native_safe_x2apic_wait_icr_idle,
 };
 
<span class="p_del">-static void set_x2apic_extra_bits(int pnode)</span>
<span class="p_del">-{</span>
<span class="p_del">-	__this_cpu_write(x2apic_extra_bits, pnode &lt;&lt; uvh_apicid.s.pnode_shift);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
 /*
  * Called on boot cpu.
  */
<span class="p_chunk">@@ -878,9 +834,6 @@</span> <span class="p_context"> void uv_cpu_init(void)</span>
 		return;
 
 	uv_blade_info[uv_numa_blade_id()].nr_online_cpus++;
<span class="p_del">-</span>
<span class="p_del">-	if (get_uv_system_type() == UV_NON_UNIQUE_APIC)</span>
<span class="p_del">-		set_x2apic_extra_bits(uv_hub_info-&gt;pnode);</span>
 }
 
 struct mn {
<span class="p_header">--- linux.orig/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_header">+++ linux/arch/x86/platform/uv/tlb_uv.c</span>
<span class="p_chunk">@@ -1834,7 +1834,7 @@</span> <span class="p_context"> static void __init init_uvhub(int uvhub,</span>
 	 * The below initialization can&#39;t be in firmware because the
 	 * messaging IRQ will be determined by the OS.
 	 */
<span class="p_del">-	apicid = uvhub_to_first_apicid(uvhub) | uv_apicid_hibits;</span>
<span class="p_add">+	apicid = uvhub_to_first_apicid(uvhub);</span>
 	write_mmr_data_config(pnode, ((apicid &lt;&lt; 32) | vector));
 }
 
<span class="p_header">--- linux.orig/arch/x86/platform/uv/uv_time.c</span>
<span class="p_header">+++ linux/arch/x86/platform/uv/uv_time.c</span>
<span class="p_chunk">@@ -87,7 +87,6 @@</span> <span class="p_context"> static void uv_rtc_send_IPI(int cpu)</span>
 
 	apicid = cpu_physical_id(cpu);
 	pnode = uv_apicid_to_pnode(apicid);
<span class="p_del">-	apicid |= uv_apicid_hibits;</span>
 	val = (1UL &lt;&lt; UVH_IPI_INT_SEND_SHFT) |
 	      (apicid &lt;&lt; UVH_IPI_INT_APIC_ID_SHFT) |
 	      (X86_PLATFORM_IPI_VECTOR &lt;&lt; UVH_IPI_INT_VECTOR_SHFT);
<span class="p_chunk">@@ -111,7 +110,7 @@</span> <span class="p_context"> static int uv_intr_pending(int pnode)</span>
 static int uv_setup_intr(int cpu, u64 expires)
 {
 	u64 val;
<span class="p_del">-	unsigned long apicid = cpu_physical_id(cpu) | uv_apicid_hibits;</span>
<span class="p_add">+	unsigned long apicid = cpu_physical_id(cpu);</span>
 	int pnode = uv_cpu_to_pnode(cpu);
 
 	uv_write_global_mmr64(pnode, UVH_RTC1_INT_CONFIG,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



