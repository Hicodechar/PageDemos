
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[RFC] iommu/dma: account pci host bridge dma_mask for IOVA allocation - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [RFC] iommu/dma: account pci host bridge dma_mask for IOVA allocation</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>March 17, 2017, 11:20 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;2590a8ed35af9d95dd5ea3bbded45d39@mail.gmail.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9630391/mbox/"
   >mbox</a>
|
   <a href="/patch/9630391/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9630391/">/patch/9630391/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	45F3760245 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Mar 2017 11:21:02 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 3665B28512
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Mar 2017 11:21:02 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 29E3928647; Fri, 17 Mar 2017 11:21:02 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 24C1228512
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri, 17 Mar 2017 11:21:01 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751786AbdCQLUy (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 17 Mar 2017 07:20:54 -0400
Received: from mail-wm0-f43.google.com ([74.125.82.43]:37698 &quot;EHLO
	mail-wm0-f43.google.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751677AbdCQLUu (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 17 Mar 2017 07:20:50 -0400
Received: by mail-wm0-f43.google.com with SMTP id n11so13247186wma.0
	for &lt;linux-kernel@vger.kernel.org&gt;;
	Fri, 17 Mar 2017 04:20:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=broadcom.com; s=google;
	h=from:references:in-reply-to:mime-version:thread-index:date
	:message-id:subject:to:cc;
	bh=nBnkbLzq4tSc8GDXJVFzeMUfJmPSRNiqkTISY71/8To=;
	b=g0/VK1dvzRjW4qGZMzUrebN7444HSXd1ZYuMNbS+X/IBw+zOyiW38BIh7i8dM2lD5U
	XGS4JC2EOmqyptPwdQLhsSF68c5xYqVmo3IZHJvksBdGZ4MDBTgxEObxejeT66vRbzvb
	X15Kct8ZM+G9qc2JOdRMCiOL1nPuqEGWfgFzE=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
	d=1e100.net; s=20161025;
	h=x-gm-message-state:from:references:in-reply-to:mime-version
	:thread-index:date:message-id:subject:to:cc;
	bh=nBnkbLzq4tSc8GDXJVFzeMUfJmPSRNiqkTISY71/8To=;
	b=uPMLVmyFARYrDd7ZT2+Igbmn0JJh77p9l8e8fX8bj4Kt6kF6dYu88BOq6KQ/BgIAmf
	wJjw6sByyaQgT7wa2f4QX6JXxIAHAEBEtpA6OerJXJb4Vu7gMTtVnL/eJJWl7d/g9fKa
	S9mcjzZQp9bTTFS1sWlKaRo4ugQ5O2BMiXibMuEfqoN0y9MUQNMKmv3cLeAUCXjTtfDx
	Cv338VXL7e3rZG/l23I+f84qt6xJgy/44xrxcnBbZoqVrfbr5xmZoTXQBsgOO1E554ur
	tBQAaSNtustaiqDPZL3Q7zu53DeZcDsKRMRT1J9w0GWiRzsw/1CWWbKVTYvhe/ur65nc
	Ld7A==
X-Gm-Message-State: AFeK/H39MRUDrNU6IHmAc3PzMLYSUEIGOyfrBLeyuYWQPAb1z9VFNnH5yxtU+pRlyt4E9CncS5obg1J87rcV4wAf
X-Received: by 10.28.32.70 with SMTP id g67mr2444065wmg.3.1489749648442; Fri,
	17 Mar 2017 04:20:48 -0700 (PDT)
From: Oza Oza &lt;oza.oza@broadcom.com&gt;
References: &lt;1489731045-6719-1-git-send-email-oza.oza@broadcom.com&gt;
	d70f83cb517c082ee4ac280b96f1aa60@mail.gmail.com
In-Reply-To: d70f83cb517c082ee4ac280b96f1aa60@mail.gmail.com
MIME-Version: 1.0
X-Mailer: Microsoft Outlook 14.0
Thread-Index: AQGV8RCV4h9/pBjdUVwijp9U8unVDaIR6IQAgABVM4A=
Date: Fri, 17 Mar 2017 16:50:47 +0530
Message-ID: &lt;2590a8ed35af9d95dd5ea3bbded45d39@mail.gmail.com&gt;
Subject: RE: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for
	IOVA allocation
To: Joerg Roedel &lt;joro@8bytes.org&gt;, Robin Murphy &lt;robin.murphy@arm.com&gt;
Cc: iommu@lists.linux-foundation.org, linux-kernel@vger.kernel.org,
	linux-arm-kernel@lists.infradead.org, devicetree@vger.kernel.org,
	bcm-kernel-feedback-list@broadcom.com
Content-Type: text/plain; charset=UTF-8
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=173199">Oza Pawandeep</a> - March 17, 2017, 11:20 a.m.</div>
<pre class="content">
Hi Robin,

Currently this patch involves multiple framework.
I have coalesced the patch into one to present it as a whole as one RFC.

it involves

1) pcie of framework changes
2) iommu ops
3) pci dma-ranges discussion.
4) also it talks about the bug in device tree framework (dma-ranges) (just
in the commit message)

There are some minor glitches it remains with, which is open for feedback
and improvement.
And this could be split later into separate patches, once you see it as a
potential scope for solving the problem statement end to end.

Regards,
Oza.
-----Original Message-----
<span class="from">From: Oza Oza [mailto:oza.oza@broadcom.com]</span>
Sent: Friday, March 17, 2017 11:45 AM
To: &#39;Joerg Roedel&#39;; &#39;Robin Murphy&#39;
Cc: &#39;iommu@lists.linux-foundation.org&#39;; &#39;linux-kernel@vger.kernel.org&#39;;
&#39;linux-arm-kernel@lists.infradead.org&#39;; &#39;devicetree@vger.kernel.org&#39;;
&#39;bcm-kernel-feedback-list@broadcom.com&#39;
Subject: RE: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for
IOVA allocation

Hi,

There are certain areas which requires contemplation.
And this problem requires more attention from Pci of framework and iommu,
and integration of both.

Regards,
Oza.

-----Original Message-----
<span class="from">From: Oza Pawandeep [mailto:oza.oza@broadcom.com]</span>
Sent: Friday, March 17, 2017 11:41 AM
To: Joerg Roedel; Robin Murphy
Cc: iommu@lists.linux-foundation.org; linux-kernel@vger.kernel.org;
linux-arm-kernel@lists.infradead.org; devicetree@vger.kernel.org;
bcm-kernel-feedback-list@broadcom.com; Oza Pawandeep
Subject: [RFC PATCH] iommu/dma: account pci host bridge dma_mask for IOVA
allocation

It is possible that PCI device supports 64-bit DMA addressing, and thus
it&#39;s driver sets device&#39;s dma_mask to DMA_BIT_MASK(64), however PCI host
bridge may have limitations on the inbound transaction addressing. As an
example, consider NVME SSD device connected to iproc-PCIe controller.

Currently, the IOMMU DMA ops only considers PCI device dma_mask when
allocating an IOVA. This is particularly problematic on
ARM/ARM64 SOCs where the IOMMU (i.e. SMMU) translates IOVA to PA for
in-bound transactions only after PCI Host has forwarded these transactions
on SOC IO bus. This means on such ARM/ARM64 SOCs the IOVA of in-bound
transactions has to honor the addressing restrictions of the PCI Host.

this patch is inspired by
http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1306545.html
http://www.spinics.net/lists/arm-kernel/msg566947.html

but above inspiraiton solves the half of the problem.
the rest of the problem is descrbied below, what we face on iproc based
SOCs.

current pcie frmework and of framework integration assumes dma-ranges in a
way where memory-mapped devices define their dma-ranges.
dma-ranges: (child-bus-address, parent-bus-address, length).

but iproc based SOCs and even Rcar based SOCs has PCI world dma-ranges.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;;

of_dma_configure is specifically witten to take care of memory mapped
devices.
but no implementation exists for pci to take care of pcie based memory
ranges.
in fact pci world doesnt seem to define standard dma-ranges since there is
an absense of the same, the dma_mask used to remain 32bit because of
0 size return (parsed by of_dma_configure())

this patch also implements of_pci_get_dma_ranges to cater to pci world
dma-ranges.
so then the returned size get best possible (largest) dma_mask.
for e.g.
dma-ranges = &lt;0x43000000 0x00 0x00 0x00 0x00 0x80 0x00&gt;; we should get
dev-&gt;coherent_dma_mask=0x7fffffffff.

conclusion: there are following problems
1) linux pci and iommu framework integration has glitches with respect to
dma-ranges
2) pci linux framework look very uncertain about dma-ranges, rather
binding is not defined
   the way it is defined for memory mapped devices.
   rcar and iproc based SOCs use their custom one dma-ranges
   (rather can be standard)
3) even if in case of default parser of_dma_get_ranges,:
   it throws and erro&quot;
   &quot;no dma-ranges found for node&quot;
   because of the bug which exists.
   following lines should be moved to the end of while(1)
	839                 node = of_get_next_parent(node);
	840                 if (!node)
	841                         break;
<span class="reviewed-by">
Reviewed-by: Anup Patel &lt;anup.patel@broadcom.com&gt;</span>
<span class="reviewed-by">Reviewed-by: Scott Branden &lt;scott.branden@broadcom.com&gt;</span>
<span class="signed-off-by">Signed-off-by: Oza Pawandeep &lt;oza.oza@broadcom.com&gt;</span>

*dev,
 			unsigned char busno, unsigned char bus_max, @@
-83,6 +84,11 @@ static inline int of_pci_get_host_bridge_resources(struct
device_node *dev,  {
 	return -EINVAL;
 }
+
+static inline int of_pci_get_dma_ranges(struct device_node *np, u64
+*dma_addr, u64 *paddr, u64 *size) {
+	return -EINVAL;
+}
 #endif

 #if defined(CONFIG_OF) &amp;&amp; defined(CONFIG_PCI_MSI)
--
1.9.1
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig index</span>
8c7c244..20cfff7 100644
<span class="p_header">--- a/arch/arm64/Kconfig</span>
<span class="p_header">+++ b/arch/arm64/Kconfig</span>
<span class="p_chunk">@@ -217,6 +217,9 @@</span> <span class="p_context"> config NEED_DMA_MAP_STATE  config NEED_SG_DMA_LENGTH</span>
 	def_bool y

<span class="p_add">+config ARCH_HAS_DMA_SET_COHERENT_MASK</span>
<span class="p_add">+	def_bool y</span>
<span class="p_add">+</span>
 config SMP
 	def_bool y

<span class="p_header">diff --git a/arch/arm64/include/asm/device.h</span>
b/arch/arm64/include/asm/device.h index 73d5bab..64b4dc3 100644
<span class="p_header">--- a/arch/arm64/include/asm/device.h</span>
<span class="p_header">+++ b/arch/arm64/include/asm/device.h</span>
<span class="p_chunk">@@ -20,6 +20,7 @@</span> <span class="p_context"> struct dev_archdata {</span>
 #ifdef CONFIG_IOMMU_API
 	void *iommu;			/* private IOMMU data */
 #endif
<span class="p_add">+	u64 parent_dma_mask;</span>
 	bool dma_coherent;
 };

<span class="p_header">diff --git a/arch/arm64/mm/dma-mapping.c b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">index 81cdb2e..5845ecd 100644</span>
<span class="p_header">--- a/arch/arm64/mm/dma-mapping.c</span>
<span class="p_header">+++ b/arch/arm64/mm/dma-mapping.c</span>
<span class="p_chunk">@@ -564,6 +564,7 @@</span> <span class="p_context"> static void flush_page(struct device *dev, const void</span>
*virt, phys_addr_t phys)
 	__dma_flush_area(virt, PAGE_SIZE);
 }

<span class="p_add">+</span>
 static void *__iommu_alloc_attrs(struct device *dev, size_t size,
 				 dma_addr_t *handle, gfp_t gfp,
 				 unsigned long attrs)
<span class="p_chunk">@@ -795,6 +796,20 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device</span>
*dev,
 	iommu_dma_unmap_sg(dev, sgl, nelems, dir, attrs);  }

<span class="p_add">+static int __iommu_set_dma_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	/* device is not DMA capable */</span>
<span class="p_add">+	if (!dev-&gt;dma_mask)</span>
<span class="p_add">+		return -EIO;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	*dev-&gt;dma_mask = mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static const struct dma_map_ops iommu_dma_ops = {
 	.alloc = __iommu_alloc_attrs,
 	.free = __iommu_free_attrs,
<span class="p_chunk">@@ -811,8 +826,21 @@</span> <span class="p_context"> static void __iommu_unmap_sg_attrs(struct device</span>
*dev,
 	.map_resource = iommu_dma_map_resource,
 	.unmap_resource = iommu_dma_unmap_resource,
 	.mapping_error = iommu_dma_mapping_error,
<span class="p_add">+	.set_dma_mask = __iommu_set_dma_mask,</span>
 };

<span class="p_add">+int dma_set_coherent_mask(struct device *dev, u64 mask) {</span>
<span class="p_add">+	if (get_dma_ops(dev) == &amp;iommu_dma_ops &amp;&amp;</span>
<span class="p_add">+	    mask &gt; dev-&gt;archdata.parent_dma_mask)</span>
<span class="p_add">+		mask = dev-&gt;archdata.parent_dma_mask;</span>
<span class="p_add">+</span>
<span class="p_add">+	dev-&gt;coherent_dma_mask = mask;</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL(dma_set_coherent_mask);</span>
<span class="p_add">+</span>
<span class="p_add">+</span>
 /*
  * TODO: Right now __iommu_setup_dma_ops() gets called too early to do
  * everything it needs to - the device is only partially created and the
<span class="p_chunk">@@ -975,6 +1003,8 @@</span> <span class="p_context"> void arch_setup_dma_ops(struct device *dev, u64</span>
dma_base, u64 size,
 	if (!dev-&gt;dma_ops)
 		dev-&gt;dma_ops = &amp;swiotlb_dma_ops;

<span class="p_add">+	dev-&gt;archdata.parent_dma_mask = size - 1;</span>
<span class="p_add">+</span>
 	dev-&gt;archdata.dma_coherent = coherent;
 	__iommu_setup_dma_ops(dev, dma_base, size, iommu);  } diff --git
a/drivers/of/of_pci.c b/drivers/of/of_pci.c index 0ee42c3..5804717 100644
<span class="p_header">--- a/drivers/of/of_pci.c</span>
<span class="p_header">+++ b/drivers/of/of_pci.c</span>
<span class="p_chunk">@@ -283,6 +283,51 @@</span> <span class="p_context"> int of_pci_get_host_bridge_resources(struct</span>
device_node *dev,
 	return err;
 }
 EXPORT_SYMBOL_GPL(of_pci_get_host_bridge_resources);
<span class="p_add">+</span>
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size) {</span>
<span class="p_add">+	struct device_node *node = of_node_get(np);</span>
<span class="p_add">+	int rlen, naddr, nsize, pna;</span>
<span class="p_add">+	int ret = 0;</span>
<span class="p_add">+	const int na = 3, ns = 2;</span>
<span class="p_add">+	struct of_pci_range_parser parser;</span>
<span class="p_add">+	struct of_pci_range range;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!node)</span>
<span class="p_add">+		return -EINVAL;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.node = node;</span>
<span class="p_add">+	parser.pna = of_n_addr_cells(node);</span>
<span class="p_add">+	parser.np = parser.pna + na + ns;</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.range = of_get_property(node, &quot;dma-ranges&quot;, &amp;rlen);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (!parser.range) {</span>
<span class="p_add">+		pr_debug(&quot;pcie device has no dma-ranges defined for</span>
node(%s)\n&quot;, np-&gt;full_name);
<span class="p_add">+		ret = -ENODEV;</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	parser.end = parser.range + rlen / sizeof(__be32);</span>
<span class="p_add">+</span>
<span class="p_add">+	/* how do we take care of multiple dma windows ?. */</span>
<span class="p_add">+	for_each_of_pci_range(&amp;parser, &amp;range) {</span>
<span class="p_add">+		*dma_addr = range.pci_addr;</span>
<span class="p_add">+		*size = range.size;</span>
<span class="p_add">+		*paddr = range.cpu_addr;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	pr_debug(&quot;dma_addr(%llx) cpu_addr(%llx) size(%llx)\n&quot;,</span>
<span class="p_add">+		 *dma_addr, *paddr, *size);</span>
<span class="p_add">+		 *dma_addr = range.pci_addr;</span>
<span class="p_add">+		 *size = range.size;</span>
<span class="p_add">+</span>
<span class="p_add">+out:</span>
<span class="p_add">+	of_node_put(node);</span>
<span class="p_add">+	return ret;</span>
<span class="p_add">+</span>
<span class="p_add">+}</span>
<span class="p_add">+EXPORT_SYMBOL_GPL(of_pci_get_dma_ranges);</span>
 #endif /* CONFIG_OF_ADDRESS */

 #ifdef CONFIG_PCI_MSI
<span class="p_header">diff --git a/include/linux/of_pci.h b/include/linux/of_pci.h index</span>
0e0974e..907ace0 100644
<span class="p_header">--- a/include/linux/of_pci.h</span>
<span class="p_header">+++ b/include/linux/of_pci.h</span>
<span class="p_chunk">@@ -76,6 +76,7 @@</span> <span class="p_context"> static inline void of_pci_check_probe_only(void) { }</span>
int of_pci_get_host_bridge_resources(struct device_node *dev,
 			unsigned char busno, unsigned char bus_max,
 			struct list_head *resources, resource_size_t
*io_base);
<span class="p_add">+int of_pci_get_dma_ranges(struct device_node *np, u64 *dma_addr, u64</span>
<span class="p_add">+*paddr, u64 *size);</span>
 #else
 static inline int of_pci_get_host_bridge_resources(struct device_node

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



