
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[2/6] perf, tools, stat: Abstract stat metrics printing - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [2/6] perf, tools, stat: Abstract stat metrics printing</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=104">Andi Kleen</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 4, 2015, 10:45 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;1441406717-1717-3-git-send-email-andi@firstfloor.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/7126571/mbox/"
   >mbox</a>
|
   <a href="/patch/7126571/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/7126571/">/patch/7126571/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id F1221BEEC1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Sep 2015 22:46:38 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 5C59D208C1
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Sep 2015 22:46:37 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 7FDEC208B9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Fri,  4 Sep 2015 22:46:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S934160AbbIDWp2 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Fri, 4 Sep 2015 18:45:28 -0400
Received: from mga02.intel.com ([134.134.136.20]:28626 &quot;EHLO mga02.intel.com&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S934106AbbIDWpY (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Fri, 4 Sep 2015 18:45:24 -0400
Received: from orsmga002.jf.intel.com ([10.7.209.21])
	by orsmga101.jf.intel.com with ESMTP; 04 Sep 2015 15:45:22 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i=&quot;5.17,470,1437462000&quot;; d=&quot;scan&#39;208&quot;;a=&quot;798125934&quot;
Received: from tassilo.jf.intel.com (HELO tassilo.localdomain)
	([10.7.201.36])
	by orsmga002.jf.intel.com with ESMTP; 04 Sep 2015 15:45:22 -0700
Received: by tassilo.localdomain (Postfix, from userid 1000)
	id 1B42C302801; Fri,  4 Sep 2015 15:45:22 -0700 (PDT)
From: Andi Kleen &lt;andi@firstfloor.org&gt;
To: acme@kernel.org
Cc: jolsa@kernel.org, linux-kernel@vger.kernel.org,
	Andi Kleen &lt;ak@linux.intel.com&gt;
Subject: [PATCH 2/6] perf, tools, stat: Abstract stat metrics printing
Date: Fri,  4 Sep 2015 15:45:13 -0700
Message-Id: &lt;1441406717-1717-3-git-send-email-andi@firstfloor.org&gt;
X-Mailer: git-send-email 2.4.3
In-Reply-To: &lt;1441406717-1717-1-git-send-email-andi@firstfloor.org&gt;
References: &lt;1441406717-1717-1-git-send-email-andi@firstfloor.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-6.9 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=104">Andi Kleen</a> - Sept. 4, 2015, 10:45 p.m.</div>
<pre class="content">
<span class="from">From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>

Abstract the printing of shadow metrics. Instead of every
metric calling fprintf directly and taking care of indentation,
use two call backs: one to print metrics and another to
start a new line.

This will allow adding metrics to CSV mode and also
using them for other purposes.

The computation of padding is now done in the central
callback, instead of every metric doing it manually.
This makes it easier to add new metrics.

v2: Refactor functions, printout now does more. Move
shadow printing. Improve fallback callbacks. Don&#39;t
use void * callback data.
v3: Remove unnecessary hunk. Add typedef for new_line
<span class="signed-off-by">Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
---
 tools/perf/builtin-stat.c     | 100 ++++++++++++++------
 tools/perf/util/stat-shadow.c | 212 +++++++++++++++++++++++-------------------
 tools/perf/util/stat.h        |  15 ++-
 3 files changed, 197 insertions(+), 130 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Sept. 7, 2015, 11:43 a.m.</div>
<pre class="content">
On Fri, Sep 04, 2015 at 03:45:13PM -0700, Andi Kleen wrote:

SNIP
<span class="quote">
&gt; @@ -695,11 +743,7 @@ static void print_counter_aggr(struct perf_evsel *counter, char *prefix)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	uval = avg * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	if (nsec_counter(counter))</span>
<span class="quote">&gt; -		nsec_printout(-1, 0, counter, uval);</span>
<span class="quote">&gt; -	else</span>
<span class="quote">&gt; -		abs_printout(-1, 0, counter, uval);</span>
<span class="quote">&gt; +	printout(-1, 0, counter, uval);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	print_noise(counter, avg);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -752,15 +796,9 @@ static void print_counter(struct perf_evsel *counter, char *prefix)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		uval = val * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		if (nsec_counter(counter))</span>
<span class="quote">&gt; -			nsec_printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt; -		else</span>
<span class="quote">&gt; -			abs_printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +		printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt;  		if (!csv_output)</span>
<span class="quote">&gt;  			print_noise(counter, 1.0);</span>
<span class="quote">&gt; -		print_running(run, ena);</span>

why is this one removed?

jirka
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Sept. 7, 2015, 12:14 p.m.</div>
<pre class="content">
On Fri, Sep 04, 2015 at 03:45:13PM -0700, Andi Kleen wrote:
<span class="quote">&gt; From: Andi Kleen &lt;ak@linux.intel.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Abstract the printing of shadow metrics. Instead of every</span>
<span class="quote">&gt; metric calling fprintf directly and taking care of indentation,</span>
<span class="quote">&gt; use two call backs: one to print metrics and another to</span>
<span class="quote">&gt; start a new line.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This will allow adding metrics to CSV mode and also</span>
<span class="quote">&gt; using them for other purposes.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The computation of padding is now done in the central</span>
<span class="quote">&gt; callback, instead of every metric doing it manually.</span>
<span class="quote">&gt; This makes it easier to add new metrics.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; v2: Refactor functions, printout now does more. Move</span>
<span class="quote">&gt; shadow printing. Improve fallback callbacks. Don&#39;t</span>
<span class="quote">&gt; use void * callback data.</span>
<span class="quote">&gt; v3: Remove unnecessary hunk. Add typedef for new_line</span>
<span class="quote">&gt; Signed-off-by: Andi Kleen &lt;ak@linux.intel.com&gt;</span>


before this patch:

[jolsa@krava perf]$ ./perf stat -e cycles  -I 1000 -x, yes &gt; /dev/null
    28.002841829,2907511555,,cycles,1000612137,100.00
    29.002944242,2893835898,,cycles,1000615661,100.00
    30.003043253,2910405767,,cycles,1000618513,100.00
    31.003140585,2909645607,,cycles,1000621442,100.00
    32.003244286,2910397988,,cycles,1000624150,100.00
    33.003347139,2908927486,,cycles,1000626890,100.00
^C    33.581210913,1677490047,,cycles,988203059,100.00
    33.581315820,157136,,cycles,959970233,100.00
yes: Interrupt

after this patch:
[jolsa@krava perf]$ ./perf stat -e cycles  -I 1000 -x, yes &gt; /dev/null
     1.000101739,3074999967,,cycles #  Ghz                             ,1000247731,100.00
     2.000223351,3019361712,,cycles #  Ghz                             ,999945890,100.00
     3.000327235,3012966500,,cycles #  Ghz                             ,999805678,100.00
     4.000430983,3009829158,,cycles #  Ghz                             ,999871044,100.00


I think the reason is that this patch does too much and needs
to be separated to smaller changes, like:

  - introduce the print_metrics interface for perf_stat__print_shadow_stats
  - introduce printout function
  - introduce support for printing metrics in csv in interval mode
  - and enable it


or any other way you find feasible *easy to review*.. I cannot ack it at this state

jirka
<span class="quote">

&gt; ---</span>
<span class="quote">&gt;  tools/perf/builtin-stat.c     | 100 ++++++++++++++------</span>
<span class="quote">&gt;  tools/perf/util/stat-shadow.c | 212 +++++++++++++++++++++++-------------------</span>
<span class="quote">&gt;  tools/perf/util/stat.h        |  15 ++-</span>
<span class="quote">&gt;  3 files changed, 197 insertions(+), 130 deletions(-)</span>
<span class="quote">&gt; </span>

SNIP
<span class="quote">
&gt; @@ -544,12 +581,32 @@ static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	if (evsel-&gt;cgrp)</span>
<span class="quote">&gt;  		fprintf(output, &quot;%s%s&quot;, csv_sep, evsel-&gt;cgrp-&gt;name);</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	if (csv_output || stat_config.interval)</span>
<span class="quote">&gt; -		return;</span>

now you printout metrics for interval/csv
<span class="quote">

&gt; +static void printout(int id, int nr, struct perf_evsel *counter, double uval)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct outstate os = { .fh = stat_config.output };</span>
<span class="quote">&gt; +	struct perf_stat_output_ctx out;</span>
<span class="quote">&gt; +	print_metric_t pm = print_metric_std;</span>
<span class="quote">&gt; +	void (*nl)(void *);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (stat_config.aggr_mode == AGGR_NONE)</span>
<span class="quote">&gt; +		nl = new_line_no_aggr_std;</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		nl = new_line_std;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	perf_stat__print_shadow_stats(output, evsel, avg, cpu,</span>
<span class="quote">&gt; -				      stat_config.aggr_mode);</span>
<span class="quote">&gt; +	if (nsec_counter(counter))</span>
<span class="quote">&gt; +		nsec_printout(id, nr, counter, uval);</span>
<span class="quote">&gt; +	else</span>
<span class="quote">&gt; +		abs_printout(id, nr, counter, uval);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	out.print_metric = pm;</span>
<span class="quote">&gt; +	out.new_line = nl;</span>
<span class="quote">&gt; +	out.ctx = &amp;os;</span>
<span class="quote">&gt; +	perf_stat__print_shadow_stats(counter, uval,</span>
<span class="quote">&gt; +				stat_config.aggr_mode == AGGR_GLOBAL ? 0 :</span>
<span class="quote">&gt; +				cpu_map__id_to_cpu(id),</span>
<span class="quote">&gt; +				&amp;out);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static void print_aggr(char *prefix)</span>
<span class="quote">&gt; @@ -605,12 +662,7 @@ static void print_aggr(char *prefix)</span>
<span class="quote">&gt;  				continue;</span>
<span class="quote">&gt;  			}</span>
<span class="quote">&gt;  			uval = val * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -			if (nsec_counter(counter))</span>
<span class="quote">&gt; -				nsec_printout(id, nr, counter, uval);</span>
<span class="quote">&gt; -			else</span>
<span class="quote">&gt; -				abs_printout(id, nr, counter, uval);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +			printout(id, nr, counter, uval);</span>
<span class="quote">&gt;  			if (!csv_output)</span>
<span class="quote">&gt;  				print_noise(counter, 1.0);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -641,11 +693,7 @@ static void print_aggr_thread(struct perf_evsel *counter, char *prefix)</span>
<span class="quote">&gt;  			fprintf(output, &quot;%s&quot;, prefix);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		uval = val * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		if (nsec_counter(counter))</span>
<span class="quote">&gt; -			nsec_printout(thread, 0, counter, uval);</span>
<span class="quote">&gt; -		else</span>
<span class="quote">&gt; -			abs_printout(thread, 0, counter, uval);</span>
<span class="quote">&gt; +		printout(thread, 0, counter, uval);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (!csv_output)</span>
<span class="quote">&gt;  			print_noise(counter, 1.0);</span>
<span class="quote">&gt; @@ -695,11 +743,7 @@ static void print_counter_aggr(struct perf_evsel *counter, char *prefix)</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	uval = avg * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	if (nsec_counter(counter))</span>
<span class="quote">&gt; -		nsec_printout(-1, 0, counter, uval);</span>
<span class="quote">&gt; -	else</span>
<span class="quote">&gt; -		abs_printout(-1, 0, counter, uval);</span>
<span class="quote">&gt; +	printout(-1, 0, counter, uval);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	print_noise(counter, avg);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -752,15 +796,9 @@ static void print_counter(struct perf_evsel *counter, char *prefix)</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		uval = val * counter-&gt;scale;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		if (nsec_counter(counter))</span>
<span class="quote">&gt; -			nsec_printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt; -		else</span>
<span class="quote">&gt; -			abs_printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +		printout(cpu, 0, counter, uval);</span>
<span class="quote">&gt;  		if (!csv_output)</span>
<span class="quote">&gt;  			print_noise(counter, 1.0);</span>
<span class="quote">&gt; -		print_running(run, ena);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		fputc(&#39;\n&#39;, output);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt; diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; index 625ab3b..d7d27b5 100644</span>
<span class="quote">&gt; --- a/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; +++ b/tools/perf/util/stat-shadow.c</span>
<span class="quote">&gt; @@ -137,9 +137,10 @@ static const char *get_ratio_color(enum grc_type type, double ratio)</span>
<span class="quote">&gt;  	return color;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_stalled_cycles_frontend(int cpu,</span>
<span class="quote">&gt;  					  struct perf_evsel *evsel</span>
<span class="quote">&gt; -					  __maybe_unused, double avg)</span>
<span class="quote">&gt; +					  __maybe_unused, double avg,</span>
<span class="quote">&gt; +					  struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -152,14 +153,13 @@ static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;frontend cycles idle&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_stalled_cycles_backend(int cpu,</span>
<span class="quote">&gt;  					 struct perf_evsel *evsel</span>
<span class="quote">&gt; -					 __maybe_unused, double avg)</span>
<span class="quote">&gt; +					 __maybe_unused, double avg,</span>
<span class="quote">&gt; +					 struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -172,14 +172,13 @@ static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%6.2f%%&quot;, &quot;backend cycles idle&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_branch_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_branch_misses(int cpu,</span>
<span class="quote">&gt;  				struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				double avg)</span>
<span class="quote">&gt; +				double avg,</span>
<span class="quote">&gt; +				struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -192,14 +191,13 @@ static void print_branch_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all branches&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_l1_dcache_misses(int cpu,</span>
<span class="quote">&gt;  				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				   double avg)</span>
<span class="quote">&gt; +				   double avg,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -212,14 +210,13 @@ static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-dcache hits&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_l1_icache_misses(int cpu,</span>
<span class="quote">&gt;  				   struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				   double avg)</span>
<span class="quote">&gt; +				   double avg,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -231,15 +228,13 @@ static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  		ratio = avg / total * 100.0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-icache hits&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_dtlb_cache_misses(int cpu,</span>
<span class="quote">&gt;  				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				    double avg)</span>
<span class="quote">&gt; +				    double avg,</span>
<span class="quote">&gt; +				    struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -251,15 +246,13 @@ static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  		ratio = avg / total * 100.0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all dTLB cache hits&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_itlb_cache_misses(int cpu,</span>
<span class="quote">&gt;  				    struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				    double avg)</span>
<span class="quote">&gt; +				    double avg,</span>
<span class="quote">&gt; +				    struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -271,15 +264,13 @@ static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  		ratio = avg / total * 100.0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all iTLB cache hits&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt; +static void print_ll_cache_misses(int cpu,</span>
<span class="quote">&gt;  				  struct perf_evsel *evsel __maybe_unused,</span>
<span class="quote">&gt; -				  double avg)</span>
<span class="quote">&gt; +				  double avg,</span>
<span class="quote">&gt; +				  struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	double total, ratio = 0.0;</span>
<span class="quote">&gt;  	const char *color;</span>
<span class="quote">&gt; @@ -291,15 +282,15 @@ static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="quote">&gt;  		ratio = avg / total * 100.0;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  	color = get_ratio_color(GRC_CACHE_MISSES, ratio);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	fprintf(out, &quot; #  &quot;);</span>
<span class="quote">&gt; -	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="quote">&gt; -	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="quote">&gt; +	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt; -				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="quote">&gt; +void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="quote">&gt; +				   double avg, int cpu,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt; +	void *ctxp = out-&gt;ctx;</span>
<span class="quote">&gt; +	print_metric_t print_metric = out-&gt;print_metric;</span>
<span class="quote">&gt;  	double total, ratio = 0.0, total2;</span>
<span class="quote">&gt;  	int ctx = evsel_context(evsel);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -307,117 +298,144 @@ void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		if (total) {</span>
<span class="quote">&gt;  			ratio = avg / total;</span>
<span class="quote">&gt; -			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="quote">&gt; +					&quot;insn per cycle&quot;, ratio);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (total &amp;&amp; avg) {</span>
<span class="quote">&gt;  			ratio = total / avg;</span>
<span class="quote">&gt; -			fprintf(out, &quot;\n&quot;);</span>
<span class="quote">&gt; -			if (aggr == AGGR_NONE)</span>
<span class="quote">&gt; -				fprintf(out, &quot;        &quot;);</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="quote">&gt; +			out-&gt;new_line(ctxp);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="quote">&gt; +					&quot;stalled cycles per insn&quot;,</span>
<span class="quote">&gt; +					ratio);</span>
<span class="quote">&gt; +		} else {</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL,</span>
<span class="quote">&gt; +				     &quot;stalled cycles per insn&quot;, 0);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES)) {</span>
<span class="quote">&gt; +		if (runtime_branches_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_branch_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all branches&quot;, 0);</span>
<span class="quote">&gt;  	} else if (</span>
<span class="quote">&gt;  		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="quote">&gt;  		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |</span>
<span class="quote">&gt;  					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="quote">&gt; -					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="quote">&gt; +		if (runtime_l1_dcache_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_l1_dcache_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all L1-dcache hits&quot;, 0);</span>
<span class="quote">&gt;  	} else if (</span>
<span class="quote">&gt;  		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="quote">&gt;  		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |</span>
<span class="quote">&gt;  					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="quote">&gt; -					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="quote">&gt; +		if (runtime_l1_icache_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_l1_icache_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all L1-icache hits&quot;, 0);</span>
<span class="quote">&gt;  	} else if (</span>
<span class="quote">&gt;  		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="quote">&gt;  		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |</span>
<span class="quote">&gt;  					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="quote">&gt; -					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="quote">&gt; +		if (runtime_dtlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_dtlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all dTLB cache hits&quot;, 0);</span>
<span class="quote">&gt;  	} else if (</span>
<span class="quote">&gt;  		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="quote">&gt;  		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |</span>
<span class="quote">&gt;  					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="quote">&gt; -					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="quote">&gt; +		if (runtime_itlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_itlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all iTLB cache hits&quot;, 0);</span>
<span class="quote">&gt;  	} else if (</span>
<span class="quote">&gt;  		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;</span>
<span class="quote">&gt;  		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |</span>
<span class="quote">&gt;  					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |</span>
<span class="quote">&gt; -					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; -		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="quote">&gt; -	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="quote">&gt; -			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; +					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="quote">&gt; +		if (runtime_ll_cache_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_ll_cache_misses(cpu, evsel, avg, out);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all LL-cache hits&quot;, 0);</span>
<span class="quote">&gt; +	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (total)</span>
<span class="quote">&gt;  			ratio = avg * 100 / total;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; +		if (runtime_cacherefs_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%8.3f %%&quot;,</span>
<span class="quote">&gt; +				     &quot;of all cache refs&quot;, ratio);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;of all cache refs&quot;, 0);</span>
<span class="quote">&gt;  	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {</span>
<span class="quote">&gt; -		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +		print_stalled_cycles_frontend(cpu, evsel, avg, out);</span>
<span class="quote">&gt;  	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {</span>
<span class="quote">&gt; -		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="quote">&gt; +		print_stalled_cycles_backend(cpu, evsel, avg, out);</span>
<span class="quote">&gt;  	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (total) {</span>
<span class="quote">&gt;  			ratio = avg / total;</span>
<span class="quote">&gt; -			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;GHz&quot;, ratio);</span>
<span class="quote">&gt;  		} else {</span>
<span class="quote">&gt; -			fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;Ghz&quot;, 0);</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt;  	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		if (total)</span>
<span class="quote">&gt; -			fprintf(out,</span>
<span class="quote">&gt; -				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="quote">&gt; -				100.0 * (avg / total));</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL,</span>
<span class="quote">&gt; +					&quot;%7.2f%%&quot;, &quot;transactional cycles&quot;,</span>
<span class="quote">&gt; +					100.0 * (avg / total));</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;transactional cycles&quot;,</span>
<span class="quote">&gt; +				     0);</span>
<span class="quote">&gt;  	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="quote">&gt;  		if (total2 &lt; avg)</span>
<span class="quote">&gt;  			total2 = avg;</span>
<span class="quote">&gt;  		if (total)</span>
<span class="quote">&gt; -			fprintf(out,</span>
<span class="quote">&gt; -				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%7.2f%%&quot;, &quot;aborted cycles&quot;,</span>
<span class="quote">&gt;  				100.0 * ((total2-avg) / total));</span>
<span class="quote">&gt; -	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="quote">&gt; -		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;aborted cycles&quot;, 0);</span>
<span class="quote">&gt; +	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (avg)</span>
<span class="quote">&gt;  			ratio = total / avg;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="quote">&gt; -	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="quote">&gt; -		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="quote">&gt; +		if (runtime_cycles_in_tx_stats[ctx][cpu].n != 0)</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%8.0f&quot;,</span>
<span class="quote">&gt; +				     &quot;cycles / transaction&quot;, ratio);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;cycles / transaction&quot;,</span>
<span class="quote">&gt; +				     0);</span>
<span class="quote">&gt; +	} else if (perf_stat_evsel__is(evsel, ELISION_START)) {</span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		if (avg)</span>
<span class="quote">&gt;  			ratio = total / avg;</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="quote">&gt; -	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK) &amp;&amp;</span>
<span class="quote">&gt; -		   (ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0) {</span>
<span class="quote">&gt; -		fprintf(out, &quot; # %8.3f CPUs utilized          &quot;, avg / ratio);</span>
<span class="quote">&gt; +		print_metric(ctxp, NULL, &quot;%8.0f&quot;, &quot;cycles / elision&quot;, ratio);</span>
<span class="quote">&gt; +	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK)) {</span>
<span class="quote">&gt; +		if ((ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0)</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;CPUs utilized&quot;,</span>
<span class="quote">&gt; +				     avg / ratio);</span>
<span class="quote">&gt; +		else</span>
<span class="quote">&gt; +			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);</span>
<span class="quote">&gt;  	} else if (runtime_nsecs_stats[cpu].n != 0) {</span>
<span class="quote">&gt;  		char unit = &#39;M&#39;;</span>
<span class="quote">&gt; +		char unit_buf[10];</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -427,9 +445,9 @@ void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt;  			ratio *= 1000;</span>
<span class="quote">&gt;  			unit = &#39;K&#39;;</span>
<span class="quote">&gt;  		}</span>
<span class="quote">&gt; -</span>
<span class="quote">&gt; -		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="quote">&gt; +		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);</span>
<span class="quote">&gt; +		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);</span>
<span class="quote">&gt;  	} else {</span>
<span class="quote">&gt; -		fprintf(out, &quot;                                   &quot;);</span>
<span class="quote">&gt; +		print_metric(ctxp, NULL, NULL, NULL, 0);</span>
<span class="quote">&gt;  	}</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="quote">&gt; index 62448c8..e1899f6 100644</span>
<span class="quote">&gt; --- a/tools/perf/util/stat.h</span>
<span class="quote">&gt; +++ b/tools/perf/util/stat.h</span>
<span class="quote">&gt; @@ -67,11 +67,22 @@ void perf_stat_evsel_id_init(struct perf_evsel *evsel);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  extern struct stats walltime_nsecs_stats;</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +typedef void (*print_metric_t)(void *ctx, const char *color, const char *unit,</span>
<span class="quote">&gt; +			       const char *fmt, double val);</span>
<span class="quote">&gt; +typedef void (*new_line_t )(void *ctx);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  void perf_stat__reset_shadow_stats(void);</span>
<span class="quote">&gt;  void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,</span>
<span class="quote">&gt;  				    int cpu);</span>
<span class="quote">&gt; -void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="quote">&gt; -				   double avg, int cpu, enum aggr_mode aggr);</span>
<span class="quote">&gt; +struct perf_stat_output_ctx {</span>
<span class="quote">&gt; +	void *ctx;</span>
<span class="quote">&gt; +	print_metric_t print_metric;</span>
<span class="quote">&gt; +	new_line_t new_line;</span>
<span class="quote">&gt; +};</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="quote">&gt; +				   double avg, int cpu,</span>
<span class="quote">&gt; +				   struct perf_stat_output_ctx *out);</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  void perf_evsel__reset_stat_priv(struct perf_evsel *evsel);</span>
<span class="quote">&gt;  int perf_evsel__alloc_stat_priv(struct perf_evsel *evsel);</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.4.3</span>
<span class="quote">&gt; </span>
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=123">Andi Kleen</a> - Sept. 8, 2015, 4:03 p.m.</div>
<pre class="content">
<span class="quote">&gt;   - introduce the print_metrics interface for perf_stat__print_shadow_stats</span>
<span class="quote">&gt;   - introduce printout function</span>
<span class="quote">&gt;   - introduce support for printing metrics in csv in interval mode</span>

That&#39;s already a separate patch.
<span class="quote">
&gt;   - and enable i</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; or any other way you find feasible *easy to review*.. I cannot ack it at this state</span>

Well it&#39;s just printing out values. It&#39;s really not rocket science. Nobody
is asking you to review a new VM subsystems or something like that.

I expect each more &quot;refactoring&quot; to add more problems. It&#39;s just really hard to to do,
and usually adds more problems.

I can try one more time, but if it doesn&#39;t work out we&#39;ll have to give up on this.

-Andi

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=2522">Jiri Olsa</a> - Sept. 8, 2015, 4:20 p.m.</div>
<pre class="content">
On Tue, Sep 08, 2015 at 09:03:17AM -0700, Andi Kleen wrote:
<span class="quote">&gt; &gt;   - introduce the print_metrics interface for perf_stat__print_shadow_stats</span>
<span class="quote">&gt; &gt;   - introduce printout function</span>
<span class="quote">&gt; &gt;   - introduce support for printing metrics in csv in interval mode</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; That&#39;s already a separate patch.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt;   - and enable i</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; or any other way you find feasible *easy to review*.. I cannot ack it at this state</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Well it&#39;s just printing out values. It&#39;s really not rocket science. Nobody</span>
<span class="quote">&gt; is asking you to review a new VM subsystems or something like that.</span>

right, it&#39;s easy.. and it should be done in &#39;easy to review&#39; way
<span class="quote">
&gt; </span>
<span class="quote">&gt; I expect each more &quot;refactoring&quot; to add more problems. It&#39;s just really hard to to do,</span>
<span class="quote">&gt; and usually adds more problems.</span>

yep, that&#39;s why we test things
<span class="quote">
&gt; </span>
<span class="quote">&gt; I can try one more time, but if it doesn&#39;t work out we&#39;ll have to give up on this.</span>

ok

jirka
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c</span>
<span class="p_header">index 77e5781..fbe457c 100644</span>
<span class="p_header">--- a/tools/perf/builtin-stat.c</span>
<span class="p_header">+++ b/tools/perf/builtin-stat.c</span>
<span class="p_chunk">@@ -484,6 +484,47 @@</span> <span class="p_context"> static void aggr_printout(struct perf_evsel *evsel, int id, int nr)</span>
 	}
 }
 
<span class="p_add">+struct outstate {</span>
<span class="p_add">+	FILE *fh;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+#define BASE_INDENT 41</span>
<span class="p_add">+#define AGGR_INDENT  8</span>
<span class="p_add">+#define METRIC_LEN  35</span>
<span class="p_add">+#define NA_INDENT   16</span>
<span class="p_add">+</span>
<span class="p_add">+static void new_line_no_aggr_std(void *ctx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+	fprintf(os-&gt;fh, &quot;\n%*s&quot;, BASE_INDENT + NA_INDENT, &quot;&quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void new_line_std(void *ctx)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+	fprintf(os-&gt;fh, &quot;\n%-*s&quot;, BASE_INDENT + AGGR_INDENT, &quot;&quot;);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static void print_metric_std(void *ctx, const char *color, const char *fmt,</span>
<span class="p_add">+			     const char *unit, double val)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate *os = ctx;</span>
<span class="p_add">+	FILE *out = os-&gt;fh;</span>
<span class="p_add">+	int n;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (unit == NULL) {</span>
<span class="p_add">+		fprintf(out, &quot;%-*s&quot;, METRIC_LEN, &quot;&quot;);</span>
<span class="p_add">+		return;</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	n = fprintf(out, &quot; # &quot;);</span>
<span class="p_add">+	if (color)</span>
<span class="p_add">+		n += color_fprintf(out, color, fmt, val);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		n += fprintf(out, fmt, val);</span>
<span class="p_add">+	fprintf(out, &quot; %-*s&quot;, METRIC_LEN - n - 1, unit);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 static void nsec_printout(int id, int nr, struct perf_evsel *evsel, double avg)
 {
 	FILE *output = stat_config.output;
<span class="p_chunk">@@ -517,7 +558,6 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 	FILE *output = stat_config.output;
 	double sc =  evsel-&gt;scale;
 	const char *fmt;
<span class="p_del">-	int cpu = cpu_map__id_to_cpu(id);</span>
 
 	if (csv_output) {
 		fmt = sc != 1.0 ?  &quot;%.2f%s&quot; : &quot;%.0f%s&quot;;
<span class="p_chunk">@@ -530,9 +570,6 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 
 	aggr_printout(evsel, id, nr);
 
<span class="p_del">-	if (stat_config.aggr_mode == AGGR_GLOBAL)</span>
<span class="p_del">-		cpu = 0;</span>
<span class="p_del">-</span>
 	fprintf(output, fmt, avg, csv_sep);
 
 	if (evsel-&gt;unit)
<span class="p_chunk">@@ -544,12 +581,32 @@</span> <span class="p_context"> static void abs_printout(int id, int nr, struct perf_evsel *evsel, double avg)</span>
 
 	if (evsel-&gt;cgrp)
 		fprintf(output, &quot;%s%s&quot;, csv_sep, evsel-&gt;cgrp-&gt;name);
<span class="p_add">+}</span>
 
<span class="p_del">-	if (csv_output || stat_config.interval)</span>
<span class="p_del">-		return;</span>
<span class="p_add">+static void printout(int id, int nr, struct perf_evsel *counter, double uval)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct outstate os = { .fh = stat_config.output };</span>
<span class="p_add">+	struct perf_stat_output_ctx out;</span>
<span class="p_add">+	print_metric_t pm = print_metric_std;</span>
<span class="p_add">+	void (*nl)(void *);</span>
<span class="p_add">+</span>
<span class="p_add">+	if (stat_config.aggr_mode == AGGR_NONE)</span>
<span class="p_add">+		nl = new_line_no_aggr_std;</span>
<span class="p_add">+	else</span>
<span class="p_add">+		nl = new_line_std;</span>
 
<span class="p_del">-	perf_stat__print_shadow_stats(output, evsel, avg, cpu,</span>
<span class="p_del">-				      stat_config.aggr_mode);</span>
<span class="p_add">+	if (nsec_counter(counter))</span>
<span class="p_add">+		nsec_printout(id, nr, counter, uval);</span>
<span class="p_add">+	else</span>
<span class="p_add">+		abs_printout(id, nr, counter, uval);</span>
<span class="p_add">+</span>
<span class="p_add">+	out.print_metric = pm;</span>
<span class="p_add">+	out.new_line = nl;</span>
<span class="p_add">+	out.ctx = &amp;os;</span>
<span class="p_add">+	perf_stat__print_shadow_stats(counter, uval,</span>
<span class="p_add">+				stat_config.aggr_mode == AGGR_GLOBAL ? 0 :</span>
<span class="p_add">+				cpu_map__id_to_cpu(id),</span>
<span class="p_add">+				&amp;out);</span>
 }
 
 static void print_aggr(char *prefix)
<span class="p_chunk">@@ -605,12 +662,7 @@</span> <span class="p_context"> static void print_aggr(char *prefix)</span>
 				continue;
 			}
 			uval = val * counter-&gt;scale;
<span class="p_del">-</span>
<span class="p_del">-			if (nsec_counter(counter))</span>
<span class="p_del">-				nsec_printout(id, nr, counter, uval);</span>
<span class="p_del">-			else</span>
<span class="p_del">-				abs_printout(id, nr, counter, uval);</span>
<span class="p_del">-</span>
<span class="p_add">+			printout(id, nr, counter, uval);</span>
 			if (!csv_output)
 				print_noise(counter, 1.0);
 
<span class="p_chunk">@@ -641,11 +693,7 @@</span> <span class="p_context"> static void print_aggr_thread(struct perf_evsel *counter, char *prefix)</span>
 			fprintf(output, &quot;%s&quot;, prefix);
 
 		uval = val * counter-&gt;scale;
<span class="p_del">-</span>
<span class="p_del">-		if (nsec_counter(counter))</span>
<span class="p_del">-			nsec_printout(thread, 0, counter, uval);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			abs_printout(thread, 0, counter, uval);</span>
<span class="p_add">+		printout(thread, 0, counter, uval);</span>
 
 		if (!csv_output)
 			print_noise(counter, 1.0);
<span class="p_chunk">@@ -695,11 +743,7 @@</span> <span class="p_context"> static void print_counter_aggr(struct perf_evsel *counter, char *prefix)</span>
 	}
 
 	uval = avg * counter-&gt;scale;
<span class="p_del">-</span>
<span class="p_del">-	if (nsec_counter(counter))</span>
<span class="p_del">-		nsec_printout(-1, 0, counter, uval);</span>
<span class="p_del">-	else</span>
<span class="p_del">-		abs_printout(-1, 0, counter, uval);</span>
<span class="p_add">+	printout(-1, 0, counter, uval);</span>
 
 	print_noise(counter, avg);
 
<span class="p_chunk">@@ -752,15 +796,9 @@</span> <span class="p_context"> static void print_counter(struct perf_evsel *counter, char *prefix)</span>
 		}
 
 		uval = val * counter-&gt;scale;
<span class="p_del">-</span>
<span class="p_del">-		if (nsec_counter(counter))</span>
<span class="p_del">-			nsec_printout(cpu, 0, counter, uval);</span>
<span class="p_del">-		else</span>
<span class="p_del">-			abs_printout(cpu, 0, counter, uval);</span>
<span class="p_del">-</span>
<span class="p_add">+		printout(cpu, 0, counter, uval);</span>
 		if (!csv_output)
 			print_noise(counter, 1.0);
<span class="p_del">-		print_running(run, ena);</span>
 
 		fputc(&#39;\n&#39;, output);
 	}
<span class="p_header">diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c</span>
<span class="p_header">index 625ab3b..d7d27b5 100644</span>
<span class="p_header">--- a/tools/perf/util/stat-shadow.c</span>
<span class="p_header">+++ b/tools/perf/util/stat-shadow.c</span>
<span class="p_chunk">@@ -137,9 +137,10 @@</span> <span class="p_context"> static const char *get_ratio_color(enum grc_type type, double ratio)</span>
 	return color;
 }
 
<span class="p_del">-static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_frontend(int cpu,</span>
 					  struct perf_evsel *evsel
<span class="p_del">-					  __maybe_unused, double avg)</span>
<span class="p_add">+					  __maybe_unused, double avg,</span>
<span class="p_add">+					  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -152,14 +153,13 @@</span> <span class="p_context"> static void print_stalled_cycles_frontend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_FE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; frontend cycles idle   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;frontend cycles idle&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
<span class="p_add">+static void print_stalled_cycles_backend(int cpu,</span>
 					 struct perf_evsel *evsel
<span class="p_del">-					 __maybe_unused, double avg)</span>
<span class="p_add">+					 __maybe_unused, double avg,</span>
<span class="p_add">+					 struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -172,14 +172,13 @@</span> <span class="p_context"> static void print_stalled_cycles_backend(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_STALLED_CYCLES_BE, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; backend  cycles idle   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%6.2f%%&quot;, &quot;backend cycles idle&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_branch_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_branch_misses(int cpu,</span>
 				struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				double avg)</span>
<span class="p_add">+				double avg,</span>
<span class="p_add">+				struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -192,14 +191,13 @@</span> <span class="p_context"> static void print_branch_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all branches        &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all branches&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_dcache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_dcache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -212,14 +210,13 @@</span> <span class="p_context"> static void print_l1_dcache_misses(FILE *out, int cpu,</span>
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
 
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-dcache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-dcache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_l1_icache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_l1_icache_misses(int cpu,</span>
 				   struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				   double avg)</span>
<span class="p_add">+				   double avg,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -231,15 +228,13 @@</span> <span class="p_context"> static void print_l1_icache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all L1-icache hits  &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all L1-icache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_dtlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -251,15 +246,13 @@</span> <span class="p_context"> static void print_dtlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all dTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all dTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_itlb_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_itlb_cache_misses(int cpu,</span>
 				    struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				    double avg)</span>
<span class="p_add">+				    double avg,</span>
<span class="p_add">+				    struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -271,15 +264,13 @@</span> <span class="p_context"> static void print_itlb_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all iTLB cache hits &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all iTLB cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-static void print_ll_cache_misses(FILE *out, int cpu,</span>
<span class="p_add">+static void print_ll_cache_misses(int cpu,</span>
 				  struct perf_evsel *evsel __maybe_unused,
<span class="p_del">-				  double avg)</span>
<span class="p_add">+				  double avg,</span>
<span class="p_add">+				  struct perf_stat_output_ctx *out)</span>
 {
 	double total, ratio = 0.0;
 	const char *color;
<span class="p_chunk">@@ -291,15 +282,15 @@</span> <span class="p_context"> static void print_ll_cache_misses(FILE *out, int cpu,</span>
 		ratio = avg / total * 100.0;
 
 	color = get_ratio_color(GRC_CACHE_MISSES, ratio);
<span class="p_del">-</span>
<span class="p_del">-	fprintf(out, &quot; #  &quot;);</span>
<span class="p_del">-	color_fprintf(out, color, &quot;%6.2f%%&quot;, ratio);</span>
<span class="p_del">-	fprintf(out, &quot; of all LL-cache hits   &quot;);</span>
<span class="p_add">+	out-&gt;print_metric(out-&gt;ctx, color, &quot;%7.2f%%&quot;, &quot;of all LL-cache hits&quot;, ratio);</span>
 }
 
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr)</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out)</span>
 {
<span class="p_add">+	void *ctxp = out-&gt;ctx;</span>
<span class="p_add">+	print_metric_t print_metric = out-&gt;print_metric;</span>
 	double total, ratio = 0.0, total2;
 	int ctx = evsel_context(evsel);
 
<span class="p_chunk">@@ -307,117 +298,144 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; #   %5.2f  insns per cycle        &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;insn per cycle&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;insn per cycle&quot;, 0);</span>
 		}
 		total = avg_stats(&amp;runtime_stalled_cycles_front_stats[ctx][cpu]);
 		total = max(total, avg_stats(&amp;runtime_stalled_cycles_back_stats[ctx][cpu]));
 
 		if (total &amp;&amp; avg) {
 			ratio = total / avg;
<span class="p_del">-			fprintf(out, &quot;\n&quot;);</span>
<span class="p_del">-			if (aggr == AGGR_NONE)</span>
<span class="p_del">-				fprintf(out, &quot;        &quot;);</span>
<span class="p_del">-			fprintf(out, &quot;                                                  #   %5.2f  stalled cycles per insn&quot;, ratio);</span>
<span class="p_add">+			out-&gt;new_line(ctxp);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f &quot;,</span>
<span class="p_add">+					&quot;stalled cycles per insn&quot;,</span>
<span class="p_add">+					ratio);</span>
<span class="p_add">+		} else {</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL,</span>
<span class="p_add">+				     &quot;stalled cycles per insn&quot;, 0);</span>
 		}
<span class="p_del">-</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_branches_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_branch_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_BRANCH_MISSES)) {</span>
<span class="p_add">+		if (runtime_branches_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_branch_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all branches&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_dcache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_dcache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_dcache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_dcache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-dcache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_l1_icache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_l1_icache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_l1_icache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_l1_icache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all L1-icache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_dtlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_dtlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_dtlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_dtlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all dTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_itlb_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_itlb_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_itlb_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_itlb_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all iTLB cache hits&quot;, 0);</span>
 	} else if (
 		evsel-&gt;attr.type == PERF_TYPE_HW_CACHE &amp;&amp;
 		evsel-&gt;attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) &lt;&lt; 8) |
<span class="p_del">-					((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16)) &amp;&amp;</span>
<span class="p_del">-			runtime_ll_cache_stats[ctx][cpu].n != 0) {</span>
<span class="p_del">-		print_ll_cache_misses(out, cpu, evsel, avg);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES) &amp;&amp;</span>
<span class="p_del">-			runtime_cacherefs_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) &lt;&lt; 16))) {</span>
<span class="p_add">+		if (runtime_ll_cache_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_ll_cache_misses(cpu, evsel, avg, out);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all LL-cache hits&quot;, 0);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, HARDWARE, HW_CACHE_MISSES)) {</span>
 		total = avg_stats(&amp;runtime_cacherefs_stats[ctx][cpu]);
 
 		if (total)
 			ratio = avg * 100 / total;
 
<span class="p_del">-		fprintf(out, &quot; # %8.3f %% of all cache refs    &quot;, ratio);</span>
<span class="p_del">-</span>
<span class="p_add">+		if (runtime_cacherefs_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f %%&quot;,</span>
<span class="p_add">+				     &quot;of all cache refs&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;of all cache refs&quot;, 0);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_FRONTEND)) {
<span class="p_del">-		print_stalled_cycles_frontend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_frontend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_STALLED_CYCLES_BACKEND)) {
<span class="p_del">-		print_stalled_cycles_backend(out, cpu, evsel, avg);</span>
<span class="p_add">+		print_stalled_cycles_backend(cpu, evsel, avg, out);</span>
 	} else if (perf_evsel__match(evsel, HARDWARE, HW_CPU_CYCLES)) {
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
 		if (total) {
 			ratio = avg / total;
<span class="p_del">-			fprintf(out, &quot; # %8.3f GHz                    &quot;, ratio);</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;GHz&quot;, ratio);</span>
 		} else {
<span class="p_del">-			fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;Ghz&quot;, 0);</span>
 		}
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% transactional cycles   &quot;,</span>
<span class="p_del">-				100.0 * (avg / total));</span>
<span class="p_add">+			print_metric(ctxp, NULL,</span>
<span class="p_add">+					&quot;%7.2f%%&quot;, &quot;transactional cycles&quot;,</span>
<span class="p_add">+					100.0 * (avg / total));</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;transactional cycles&quot;,</span>
<span class="p_add">+				     0);</span>
 	} else if (perf_stat_evsel__is(evsel, CYCLES_IN_TX_CP)) {
 		total = avg_stats(&amp;runtime_cycles_stats[ctx][cpu]);
 		total2 = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 		if (total2 &lt; avg)
 			total2 = avg;
 		if (total)
<span class="p_del">-			fprintf(out,</span>
<span class="p_del">-				&quot; #   %5.2f%% aborted cycles         &quot;,</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%7.2f%%&quot;, &quot;aborted cycles&quot;,</span>
 				100.0 * ((total2-avg) / total));
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;aborted cycles&quot;, 0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, TRANSACTION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
 
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / transaction   &quot;, ratio);</span>
<span class="p_del">-	} else if (perf_stat_evsel__is(evsel, ELISION_START) &amp;&amp;</span>
<span class="p_del">-		   runtime_cycles_in_tx_stats[ctx][cpu].n != 0) {</span>
<span class="p_add">+		if (runtime_cycles_in_tx_stats[ctx][cpu].n != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.0f&quot;,</span>
<span class="p_add">+				     &quot;cycles / transaction&quot;, ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;cycles / transaction&quot;,</span>
<span class="p_add">+				     0);</span>
<span class="p_add">+	} else if (perf_stat_evsel__is(evsel, ELISION_START)) {</span>
 		total = avg_stats(&amp;runtime_cycles_in_tx_stats[ctx][cpu]);
 
 		if (avg)
 			ratio = total / avg;
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.0f cycles / elision       &quot;, ratio);</span>
<span class="p_del">-	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK) &amp;&amp;</span>
<span class="p_del">-		   (ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0) {</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f CPUs utilized          &quot;, avg / ratio);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.0f&quot;, &quot;cycles / elision&quot;, ratio);</span>
<span class="p_add">+	} else if (perf_evsel__match(evsel, SOFTWARE, SW_TASK_CLOCK)) {</span>
<span class="p_add">+		if ((ratio = avg_stats(&amp;walltime_nsecs_stats)) != 0)</span>
<span class="p_add">+			print_metric(ctxp, NULL, &quot;%8.3f&quot;, &quot;CPUs utilized&quot;,</span>
<span class="p_add">+				     avg / ratio);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			print_metric(ctxp, NULL, NULL, &quot;CPUs utilized&quot;, 0);</span>
 	} else if (runtime_nsecs_stats[cpu].n != 0) {
 		char unit = &#39;M&#39;;
<span class="p_add">+		char unit_buf[10];</span>
 
 		total = avg_stats(&amp;runtime_nsecs_stats[cpu]);
 
<span class="p_chunk">@@ -427,9 +445,9 @@</span> <span class="p_context"> void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
 			ratio *= 1000;
 			unit = &#39;K&#39;;
 		}
<span class="p_del">-</span>
<span class="p_del">-		fprintf(out, &quot; # %8.3f %c/sec                  &quot;, ratio, unit);</span>
<span class="p_add">+		snprintf(unit_buf, sizeof(unit_buf), &quot;%c/sec&quot;, unit);</span>
<span class="p_add">+		print_metric(ctxp, NULL, &quot;%8.3f&quot;, unit_buf, ratio);</span>
 	} else {
<span class="p_del">-		fprintf(out, &quot;                                   &quot;);</span>
<span class="p_add">+		print_metric(ctxp, NULL, NULL, NULL, 0);</span>
 	}
 }
<span class="p_header">diff --git a/tools/perf/util/stat.h b/tools/perf/util/stat.h</span>
<span class="p_header">index 62448c8..e1899f6 100644</span>
<span class="p_header">--- a/tools/perf/util/stat.h</span>
<span class="p_header">+++ b/tools/perf/util/stat.h</span>
<span class="p_chunk">@@ -67,11 +67,22 @@</span> <span class="p_context"> void perf_stat_evsel_id_init(struct perf_evsel *evsel);</span>
 
 extern struct stats walltime_nsecs_stats;
 
<span class="p_add">+typedef void (*print_metric_t)(void *ctx, const char *color, const char *unit,</span>
<span class="p_add">+			       const char *fmt, double val);</span>
<span class="p_add">+typedef void (*new_line_t )(void *ctx);</span>
<span class="p_add">+</span>
 void perf_stat__reset_shadow_stats(void);
 void perf_stat__update_shadow_stats(struct perf_evsel *counter, u64 *count,
 				    int cpu);
<span class="p_del">-void perf_stat__print_shadow_stats(FILE *out, struct perf_evsel *evsel,</span>
<span class="p_del">-				   double avg, int cpu, enum aggr_mode aggr);</span>
<span class="p_add">+struct perf_stat_output_ctx {</span>
<span class="p_add">+	void *ctx;</span>
<span class="p_add">+	print_metric_t print_metric;</span>
<span class="p_add">+	new_line_t new_line;</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+void perf_stat__print_shadow_stats(struct perf_evsel *evsel,</span>
<span class="p_add">+				   double avg, int cpu,</span>
<span class="p_add">+				   struct perf_stat_output_ctx *out);</span>
 
 void perf_evsel__reset_stat_priv(struct perf_evsel *evsel);
 int perf_evsel__alloc_stat_priv(struct perf_evsel *evsel);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



