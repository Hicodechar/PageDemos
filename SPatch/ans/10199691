
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[58/64] drivers/infiniband: use mm locking wrappers - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [58/64] drivers/infiniband: use mm locking wrappers</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Feb. 5, 2018, 1:27 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180205012754.23615-59-dbueso@wotan.suse.de&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10199691/mbox/"
   >mbox</a>
|
   <a href="/patch/10199691/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10199691/">/patch/10199691/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	24CE16056F for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:30:47 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 142B527FAC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:30:47 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 08532285B6; Mon,  5 Feb 2018 01:30:47 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 113FD285A9
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon,  5 Feb 2018 01:30:46 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752824AbeBEBal (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Sun, 4 Feb 2018 20:30:41 -0500
Received: from mx2.suse.de ([195.135.220.15]:43681 &quot;EHLO mx2.suse.de&quot;
	rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
	id S1752421AbeBEB3f (ORCPT &lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Sun, 4 Feb 2018 20:29:35 -0500
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (charybdis-ext.suse.de [195.135.220.254])
	by mx2.suse.de (Postfix) with ESMTP id EC110AE2A;
	Mon,  5 Feb 2018 01:28:01 +0000 (UTC)
From: Davidlohr Bueso &lt;dbueso@suse.de&gt;
To: akpm@linux-foundation.org, mingo@kernel.org
Cc: peterz@infradead.org, ldufour@linux.vnet.ibm.com, jack@suse.cz,
	mhocko@kernel.org, kirill.shutemov@linux.intel.com,
	mawilcox@microsoft.com, mgorman@techsingularity.net,
	dave@stgolabs.net, linux-mm@kvack.org,
	linux-kernel@vger.kernel.org, Davidlohr Bueso &lt;dbueso@suse.de&gt;
Subject: [PATCH 58/64] drivers/infiniband: use mm locking wrappers
Date: Mon,  5 Feb 2018 02:27:48 +0100
Message-Id: &lt;20180205012754.23615-59-dbueso@wotan.suse.de&gt;
X-Mailer: git-send-email 2.12.3
In-Reply-To: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
References: &lt;20180205012754.23615-1-dbueso@wotan.suse.de&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=109101">Davidlohr Bueso</a> - Feb. 5, 2018, 1:27 a.m.</div>
<pre class="content">
<span class="from">From: Davidlohr Bueso &lt;dave@stgolabs.net&gt;</span>

This becomes quite straightforward with the mmrange in place.
<span class="signed-off-by">
Signed-off-by: Davidlohr Bueso &lt;dbueso@suse.de&gt;</span>
---
 drivers/infiniband/core/umem.c             | 16 +++++++++-------
 drivers/infiniband/core/umem_odp.c         | 11 ++++++-----
 drivers/infiniband/hw/hfi1/user_pages.c    | 15 +++++++++------
 drivers/infiniband/hw/mlx4/main.c          |  5 +++--
 drivers/infiniband/hw/mlx5/main.c          |  5 +++--
 drivers/infiniband/hw/qib/qib_user_pages.c | 10 ++++++----
 drivers/infiniband/hw/usnic/usnic_uiom.c   | 16 +++++++++-------
 7 files changed, 45 insertions(+), 33 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/infiniband/core/umem.c b/drivers/infiniband/core/umem.c</span>
<span class="p_header">index fd9601ed5b84..bdbb345916d0 100644</span>
<span class="p_header">--- a/drivers/infiniband/core/umem.c</span>
<span class="p_header">+++ b/drivers/infiniband/core/umem.c</span>
<span class="p_chunk">@@ -164,7 +164,7 @@</span> <span class="p_context"> struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,</span>
 
 	npages = ib_umem_num_pages(umem);
 
<span class="p_del">-	down_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(current-&gt;mm, &amp;mmrange);</span>
 
 	locked     = npages + current-&gt;mm-&gt;pinned_vm;
 	lock_limit = rlimit(RLIMIT_MEMLOCK) &gt;&gt; PAGE_SHIFT;
<span class="p_chunk">@@ -237,7 +237,7 @@</span> <span class="p_context"> struct ib_umem *ib_umem_get(struct ib_ucontext *context, unsigned long addr,</span>
 	} else
 		current-&gt;mm-&gt;pinned_vm = locked;
 
<span class="p_del">-	up_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(current-&gt;mm, &amp;mmrange);</span>
 	if (vma_list)
 		free_page((unsigned long) vma_list);
 	free_page((unsigned long) page_list);
<span class="p_chunk">@@ -249,10 +249,11 @@</span> <span class="p_context"> EXPORT_SYMBOL(ib_umem_get);</span>
 static void ib_umem_account(struct work_struct *work)
 {
 	struct ib_umem *umem = container_of(work, struct ib_umem, work);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_write(&amp;umem-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(umem-&gt;mm, &amp;mmrange);</span>
 	umem-&gt;mm-&gt;pinned_vm -= umem-&gt;diff;
<span class="p_del">-	up_write(&amp;umem-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(umem-&gt;mm, &amp;mmrange);</span>
 	mmput(umem-&gt;mm);
 	kfree(umem);
 }
<span class="p_chunk">@@ -267,6 +268,7 @@</span> <span class="p_context"> void ib_umem_release(struct ib_umem *umem)</span>
 	struct mm_struct *mm;
 	struct task_struct *task;
 	unsigned long diff;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	if (umem-&gt;odp_data) {
 		ib_umem_odp_release(umem);
<span class="p_chunk">@@ -295,7 +297,7 @@</span> <span class="p_context"> void ib_umem_release(struct ib_umem *umem)</span>
 	 * we defer the vm_locked accounting to the system workqueue.
 	 */
 	if (context-&gt;closing) {
<span class="p_del">-		if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+		if (!mm_write_trylock(mm, &amp;mmrange)) {</span>
 			INIT_WORK(&amp;umem-&gt;work, ib_umem_account);
 			umem-&gt;mm   = mm;
 			umem-&gt;diff = diff;
<span class="p_chunk">@@ -304,10 +306,10 @@</span> <span class="p_context"> void ib_umem_release(struct ib_umem *umem)</span>
 			return;
 		}
 	} else
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 
 	mm-&gt;pinned_vm -= diff;
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	mmput(mm);
 out:
 	kfree(umem);
<span class="p_header">diff --git a/drivers/infiniband/core/umem_odp.c b/drivers/infiniband/core/umem_odp.c</span>
<span class="p_header">index 0572953260e8..3b5f6814ba41 100644</span>
<span class="p_header">--- a/drivers/infiniband/core/umem_odp.c</span>
<span class="p_header">+++ b/drivers/infiniband/core/umem_odp.c</span>
<span class="p_chunk">@@ -334,16 +334,17 @@</span> <span class="p_context"> int ib_umem_odp_get(struct ib_ucontext *context, struct ib_umem *umem,</span>
 	if (access &amp; IB_ACCESS_HUGETLB) {
 		struct vm_area_struct *vma;
 		struct hstate *h;
<span class="p_add">+		DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-		down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(mm, &amp;mmrange);</span>
 		vma = find_vma(mm, ib_umem_start(umem));
 		if (!vma || !is_vm_hugetlb_page(vma)) {
<span class="p_del">-			up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+			mm_read_unlock(mm, &amp;mmrange);</span>
 			return -EINVAL;
 		}
 		h = hstate_vma(vma);
 		umem-&gt;page_shift = huge_page_shift(h);
<span class="p_del">-		up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(mm, &amp;mmrange);</span>
 		umem-&gt;hugetlb = 1;
 	} else {
 		umem-&gt;hugetlb = 0;
<span class="p_chunk">@@ -674,7 +675,7 @@</span> <span class="p_context"> int ib_umem_odp_map_dma_pages(struct ib_umem *umem, u64 user_virt, u64 bcnt,</span>
 				(bcnt + BIT(page_shift) - 1) &gt;&gt; page_shift,
 				PAGE_SIZE / sizeof(struct page *));
 
<span class="p_del">-		down_read(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_lock(owning_mm, &amp;mmrange);</span>
 		/*
 		 * Note: this might result in redundent page getting. We can
 		 * avoid this by checking dma_list to be 0 before calling
<span class="p_chunk">@@ -685,7 +686,7 @@</span> <span class="p_context"> int ib_umem_odp_map_dma_pages(struct ib_umem *umem, u64 user_virt, u64 bcnt,</span>
 		npages = get_user_pages_remote(owning_process, owning_mm,
 				user_virt, gup_num_pages,
 				flags, local_page_list, NULL, NULL, &amp;mmrange);
<span class="p_del">-		up_read(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_read_unlock(owning_mm, &amp;mmrange);</span>
 
 		if (npages &lt; 0)
 			break;
<span class="p_header">diff --git a/drivers/infiniband/hw/hfi1/user_pages.c b/drivers/infiniband/hw/hfi1/user_pages.c</span>
<span class="p_header">index e341e6dcc388..1a6103d4f367 100644</span>
<span class="p_header">--- a/drivers/infiniband/hw/hfi1/user_pages.c</span>
<span class="p_header">+++ b/drivers/infiniband/hw/hfi1/user_pages.c</span>
<span class="p_chunk">@@ -76,6 +76,7 @@</span> <span class="p_context"> bool hfi1_can_pin_pages(struct hfi1_devdata *dd, struct mm_struct *mm,</span>
 	unsigned int usr_ctxts =
 			dd-&gt;num_rcv_contexts - dd-&gt;first_dyn_alloc_ctxt;
 	bool can_lock = capable(CAP_IPC_LOCK);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	/*
 	 * Calculate per-cache size. The calculation below uses only a quarter
<span class="p_chunk">@@ -91,9 +92,9 @@</span> <span class="p_context"> bool hfi1_can_pin_pages(struct hfi1_devdata *dd, struct mm_struct *mm,</span>
 	/* Convert to number of pages */
 	size = DIV_ROUND_UP(size, PAGE_SIZE);
 
<span class="p_del">-	down_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_lock(mm, &amp;mmrange);</span>
 	pinned = mm-&gt;pinned_vm;
<span class="p_del">-	up_read(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_read_unlock(mm, &amp;mmrange);</span>
 
 	/* First, check the absolute limit against all pinned pages. */
 	if (pinned + npages &gt;= ulimit &amp;&amp; !can_lock)
<span class="p_chunk">@@ -106,14 +107,15 @@</span> <span class="p_context"> int hfi1_acquire_user_pages(struct mm_struct *mm, unsigned long vaddr, size_t np</span>
 			    bool writable, struct page **pages)
 {
 	int ret;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	ret = get_user_pages_fast(vaddr, npages, writable, pages);
 	if (ret &lt; 0)
 		return ret;
 
<span class="p_del">-	down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(mm, &amp;mmrange);</span>
 	mm-&gt;pinned_vm += ret;
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 
 	return ret;
 }
<span class="p_chunk">@@ -122,6 +124,7 @@</span> <span class="p_context"> void hfi1_release_user_pages(struct mm_struct *mm, struct page **p,</span>
 			     size_t npages, bool dirty)
 {
 	size_t i;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	for (i = 0; i &lt; npages; i++) {
 		if (dirty)
<span class="p_chunk">@@ -130,8 +133,8 @@</span> <span class="p_context"> void hfi1_release_user_pages(struct mm_struct *mm, struct page **p,</span>
 	}
 
 	if (mm) { /* during close after signal, mm can be NULL */
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 		mm-&gt;pinned_vm -= npages;
<span class="p_del">-		up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_unlock(mm, &amp;mmrange);</span>
 	}
 }
<span class="p_header">diff --git a/drivers/infiniband/hw/mlx4/main.c b/drivers/infiniband/hw/mlx4/main.c</span>
<span class="p_header">index 8d2ee9322f2e..3124717bda45 100644</span>
<span class="p_header">--- a/drivers/infiniband/hw/mlx4/main.c</span>
<span class="p_header">+++ b/drivers/infiniband/hw/mlx4/main.c</span>
<span class="p_chunk">@@ -1188,6 +1188,7 @@</span> <span class="p_context"> static void mlx4_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 	struct mlx4_ib_ucontext *context = to_mucontext(ibcontext);
 	struct task_struct *owning_process  = NULL;
 	struct mm_struct   *owning_mm       = NULL;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	owning_process = get_pid_task(ibcontext-&gt;tgid, PIDTYPE_PID);
 	if (!owning_process)
<span class="p_chunk">@@ -1219,7 +1220,7 @@</span> <span class="p_context"> static void mlx4_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 	/* need to protect from a race on closing the vma as part of
 	 * mlx4_ib_vma_close().
 	 */
<span class="p_del">-	down_write(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(owning_mm, &amp;mmrange);</span>
 	for (i = 0; i &lt; HW_BAR_COUNT; i++) {
 		vma = context-&gt;hw_bar_info[i].vma;
 		if (!vma)
<span class="p_chunk">@@ -1239,7 +1240,7 @@</span> <span class="p_context"> static void mlx4_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 		context-&gt;hw_bar_info[i].vma-&gt;vm_ops = NULL;
 	}
 
<span class="p_del">-	up_write(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(owning_mm, &amp;mmrange);</span>
 	mmput(owning_mm);
 	put_task_struct(owning_process);
 }
<span class="p_header">diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c</span>
<span class="p_header">index 4236c8086820..303fed2657fe 100644</span>
<span class="p_header">--- a/drivers/infiniband/hw/mlx5/main.c</span>
<span class="p_header">+++ b/drivers/infiniband/hw/mlx5/main.c</span>
<span class="p_chunk">@@ -1902,6 +1902,7 @@</span> <span class="p_context"> static void mlx5_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 	struct mlx5_ib_ucontext *context = to_mucontext(ibcontext);
 	struct task_struct *owning_process  = NULL;
 	struct mm_struct   *owning_mm       = NULL;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	owning_process = get_pid_task(ibcontext-&gt;tgid, PIDTYPE_PID);
 	if (!owning_process)
<span class="p_chunk">@@ -1931,7 +1932,7 @@</span> <span class="p_context"> static void mlx5_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 	/* need to protect from a race on closing the vma as part of
 	 * mlx5_ib_vma_close.
 	 */
<span class="p_del">-	down_write(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(owning_mm, &amp;mmrange);</span>
 	mutex_lock(&amp;context-&gt;vma_private_list_mutex);
 	list_for_each_entry_safe(vma_private, n, &amp;context-&gt;vma_private_list,
 				 list) {
<span class="p_chunk">@@ -1948,7 +1949,7 @@</span> <span class="p_context"> static void mlx5_ib_disassociate_ucontext(struct ib_ucontext *ibcontext)</span>
 		kfree(vma_private);
 	}
 	mutex_unlock(&amp;context-&gt;vma_private_list_mutex);
<span class="p_del">-	up_write(&amp;owning_mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(owning_mm, &amp;mmrange);</span>
 	mmput(owning_mm);
 	put_task_struct(owning_process);
 }
<span class="p_header">diff --git a/drivers/infiniband/hw/qib/qib_user_pages.c b/drivers/infiniband/hw/qib/qib_user_pages.c</span>
<span class="p_header">index 6bcb4f9f9b30..13b7f6f93560 100644</span>
<span class="p_header">--- a/drivers/infiniband/hw/qib/qib_user_pages.c</span>
<span class="p_header">+++ b/drivers/infiniband/hw/qib/qib_user_pages.c</span>
<span class="p_chunk">@@ -136,24 +136,26 @@</span> <span class="p_context"> int qib_get_user_pages(unsigned long start_page, size_t num_pages,</span>
 	int ret;
 	DEFINE_RANGE_LOCK_FULL(mmrange);
 
<span class="p_del">-	down_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(current-&gt;mm, &amp;mmrange);</span>
 
 	ret = __qib_get_user_pages(start_page, num_pages, p, &amp;mmrange);
 
<span class="p_del">-	up_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(current-&gt;mm, &amp;mmrange);</span>
 
 	return ret;
 }
 
 void qib_release_user_pages(struct page **p, size_t num_pages)
 {
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
<span class="p_add">+</span>
 	if (current-&gt;mm) /* during close after signal, mm can be NULL */
<span class="p_del">-		down_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(current-&gt;mm, &amp;mmrange);</span>
 
 	__qib_release_user_pages(p, num_pages, 1);
 
 	if (current-&gt;mm) {
 		current-&gt;mm-&gt;pinned_vm -= num_pages;
<span class="p_del">-		up_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_unlock(current-&gt;mm, &amp;mmrange);</span>
 	}
 }
<span class="p_header">diff --git a/drivers/infiniband/hw/usnic/usnic_uiom.c b/drivers/infiniband/hw/usnic/usnic_uiom.c</span>
<span class="p_header">index 5f36c6d2e21b..7cb05133311c 100644</span>
<span class="p_header">--- a/drivers/infiniband/hw/usnic/usnic_uiom.c</span>
<span class="p_header">+++ b/drivers/infiniband/hw/usnic/usnic_uiom.c</span>
<span class="p_chunk">@@ -57,10 +57,11 @@</span> <span class="p_context"> static void usnic_uiom_reg_account(struct work_struct *work)</span>
 {
 	struct usnic_uiom_reg *umem = container_of(work,
 						struct usnic_uiom_reg, work);
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
<span class="p_del">-	down_write(&amp;umem-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(umem-&gt;mm, &amp;mmrange);</span>
 	umem-&gt;mm-&gt;locked_vm -= umem-&gt;diff;
<span class="p_del">-	up_write(&amp;umem-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(umem-&gt;mm, &amp;mmrange);</span>
 	mmput(umem-&gt;mm);
 	kfree(umem);
 }
<span class="p_chunk">@@ -126,7 +127,7 @@</span> <span class="p_context"> static int usnic_uiom_get_pages(unsigned long addr, size_t size, int writable,</span>
 
 	npages = PAGE_ALIGN(size + (addr &amp; ~PAGE_MASK)) &gt;&gt; PAGE_SHIFT;
 
<span class="p_del">-	down_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_lock(current-&gt;mm, &amp;mmrange);</span>
 
 	locked = npages + current-&gt;mm-&gt;locked_vm;
 	lock_limit = rlimit(RLIMIT_MEMLOCK) &gt;&gt; PAGE_SHIFT;
<span class="p_chunk">@@ -189,7 +190,7 @@</span> <span class="p_context"> static int usnic_uiom_get_pages(unsigned long addr, size_t size, int writable,</span>
 	else
 		current-&gt;mm-&gt;locked_vm = locked;
 
<span class="p_del">-	up_write(&amp;current-&gt;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(current-&gt;mm, &amp;mmrange);</span>
 	free_page((unsigned long) page_list);
 	return ret;
 }
<span class="p_chunk">@@ -425,6 +426,7 @@</span> <span class="p_context"> void usnic_uiom_reg_release(struct usnic_uiom_reg *uiomr, int closing)</span>
 {
 	struct mm_struct *mm;
 	unsigned long diff;
<span class="p_add">+	DEFINE_RANGE_LOCK_FULL(mmrange);</span>
 
 	__usnic_uiom_reg_release(uiomr-&gt;pd, uiomr, 1);
 
<span class="p_chunk">@@ -445,7 +447,7 @@</span> <span class="p_context"> void usnic_uiom_reg_release(struct usnic_uiom_reg *uiomr, int closing)</span>
 	 * we defer the vm_locked accounting to the system workqueue.
 	 */
 	if (closing) {
<span class="p_del">-		if (!down_write_trylock(&amp;mm-&gt;mmap_sem)) {</span>
<span class="p_add">+		if (!mm_write_trylock(mm, &amp;mmrange)) {</span>
 			INIT_WORK(&amp;uiomr-&gt;work, usnic_uiom_reg_account);
 			uiomr-&gt;mm = mm;
 			uiomr-&gt;diff = diff;
<span class="p_chunk">@@ -454,10 +456,10 @@</span> <span class="p_context"> void usnic_uiom_reg_release(struct usnic_uiom_reg *uiomr, int closing)</span>
 			return;
 		}
 	} else
<span class="p_del">-		down_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+		mm_write_lock(mm, &amp;mmrange);</span>
 
 	current-&gt;mm-&gt;locked_vm -= diff;
<span class="p_del">-	up_write(&amp;mm-&gt;mmap_sem);</span>
<span class="p_add">+	mm_write_unlock(mm, &amp;mmrange);</span>
 	mmput(mm);
 	kfree(uiomr);
 }

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



