
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v6,82/99] s390: Convert gmap to XArray - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v6,82/99] s390: Convert gmap to XArray</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=172187">willy@infradead.org</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 17, 2018, 8:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20180117202203.19756-83-willy@infradead.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10170759/mbox/"
   >mbox</a>
|
   <a href="/patch/10170759/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10170759/">/patch/10170759/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E487860386 for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 20:23:33 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D49DE20602
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 20:23:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C892420855; Wed, 17 Jan 2018 20:23:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.8 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	RCVD_IN_DNSWL_HI,T_DKIM_INVALID autolearn=unavailable version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 0510820602
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed, 17 Jan 2018 20:23:33 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1754220AbeAQUXW (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 17 Jan 2018 15:23:22 -0500
Received: from bombadil.infradead.org ([65.50.211.133]:53217 &quot;EHLO
	bombadil.infradead.org&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1753975AbeAQUXB (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 17 Jan 2018 15:23:01 -0500
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=infradead.org; s=bombadil.20170209;
	h=References:In-Reply-To:Message-Id:
	Date:Subject:Cc:To:From:Sender:Reply-To:MIME-Version:Content-Type:
	Content-Transfer-Encoding:Content-ID:Content-Description:Resent-Date:
	Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:
	List-Help:List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
	bh=BhcDWdKAwuWF3LIU7GdrG7kHtPpz05IOVlXmV3FQ338=;
	b=q3pSQyCzdaR930+LQU2cRyNvu
	mg83xdOukkjrq07/X8Rs0HggCENMlRibEMqUV0chU9CyYXaWWh6FaLJsSR74KOhbud+az0D9SgBYD
	KNkzMdPyIhjUHb38i7X/llx7sTQLptvas8Xmvd96Qv7V/ww3LE/Tq1GcQTA2cgQ/zWtlPk/vmwnba
	jSfOwAoFDWgKsj1aXH0Kz/x4M/yTa+UFcfBaXiqSz6JIaigRl4FLvUpaKJHHx4Z9q2xa2ZC1f5Jqi
	kO7yz5/PncO/HK8570xtIKWcxMvV7elXDwAUc/ueLkRtfQA7Qnu7A0XIyyzcOluhSAV+TAbITiEEm
	DKBlz+hsQ==;
Received: from willy by bombadil.infradead.org with local (Exim 4.89 #1 (Red
	Hat Linux)) id 1ebuEd-0006Fb-PW; Wed, 17 Jan 2018 20:22:59 +0000
From: Matthew Wilcox &lt;willy@infradead.org&gt;
To: linux-kernel@vger.kernel.org
Cc: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;, linux-mm@kvack.org,
	linux-fsdevel@vger.kernel.org, linux-f2fs-devel@lists.sourceforge.net,
	linux-nilfs@vger.kernel.org, linux-btrfs@vger.kernel.org,
	linux-xfs@vger.kernel.org, linux-usb@vger.kernel.org,
	Bjorn Andersson &lt;bjorn.andersson@linaro.org&gt;,
	Stefano Stabellini &lt;sstabellini@kernel.org&gt;,
	iommu@lists.linux-foundation.org, linux-remoteproc@vger.kernel.org,
	linux-s390@vger.kernel.org, intel-gfx@lists.freedesktop.org,
	cgroups@vger.kernel.org, linux-sh@vger.kernel.org,
	David Howells &lt;dhowells@redhat.com&gt;
Subject: [PATCH v6 82/99] s390: Convert gmap to XArray
Date: Wed, 17 Jan 2018 12:21:46 -0800
Message-Id: &lt;20180117202203.19756-83-willy@infradead.org&gt;
X-Mailer: git-send-email 2.14.3
In-Reply-To: &lt;20180117202203.19756-1-willy@infradead.org&gt;
References: &lt;20180117202203.19756-1-willy@infradead.org&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=172187">willy@infradead.org</a> - Jan. 17, 2018, 8:21 p.m.</div>
<pre class="content">
<span class="from">From: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;</span>

The three radix trees in gmap are all converted to the XArray.
This is another case where the multiple locks held mandates the use
of the xa_reserve() API.  The gmap_insert_rmap() function is
considerably simplified by using the advanced API;
gmap_radix_tree_free() turns out to just be xa_destroy(), and
gmap_rmap_radix_tree_free() is a nice little iteration followed
by xa_destroy().
<span class="signed-off-by">
Signed-off-by: Matthew Wilcox &lt;mawilcox@microsoft.com&gt;</span>
---
 arch/s390/include/asm/gmap.h |  12 ++--
 arch/s390/mm/gmap.c          | 133 +++++++++++++++----------------------------
 2 files changed, 51 insertions(+), 94 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/s390/include/asm/gmap.h b/arch/s390/include/asm/gmap.h</span>
<span class="p_header">index e07cce88dfb0..7695a01d19d7 100644</span>
<span class="p_header">--- a/arch/s390/include/asm/gmap.h</span>
<span class="p_header">+++ b/arch/s390/include/asm/gmap.h</span>
<span class="p_chunk">@@ -14,14 +14,14 @@</span> <span class="p_context"></span>
  * @list: list head for the mm-&gt;context gmap list
  * @crst_list: list of all crst tables used in the guest address space
  * @mm: pointer to the parent mm_struct
<span class="p_del">- * @guest_to_host: radix tree with guest to host address translation</span>
<span class="p_del">- * @host_to_guest: radix tree with pointer to segment table entries</span>
<span class="p_add">+ * @guest_to_host: guest to host address translation</span>
<span class="p_add">+ * @host_to_guest: pointers to segment table entries</span>
  * @guest_table_lock: spinlock to protect all entries in the guest page table
  * @ref_count: reference counter for the gmap structure
  * @table: pointer to the page directory
  * @asce: address space control element for gmap page table
  * @pfault_enabled: defines if pfaults are applicable for the guest
<span class="p_del">- * @host_to_rmap: radix tree with gmap_rmap lists</span>
<span class="p_add">+ * @host_to_rmap: gmap_rmap lists</span>
  * @children: list of shadow gmap structures
  * @pt_list: list of all page tables used in the shadow guest address space
  * @shadow_lock: spinlock to protect the shadow gmap list
<span class="p_chunk">@@ -35,8 +35,8 @@</span> <span class="p_context"> struct gmap {</span>
 	struct list_head list;
 	struct list_head crst_list;
 	struct mm_struct *mm;
<span class="p_del">-	struct radix_tree_root guest_to_host;</span>
<span class="p_del">-	struct radix_tree_root host_to_guest;</span>
<span class="p_add">+	struct xarray guest_to_host;</span>
<span class="p_add">+	struct xarray host_to_guest;</span>
 	spinlock_t guest_table_lock;
 	atomic_t ref_count;
 	unsigned long *table;
<span class="p_chunk">@@ -45,7 +45,7 @@</span> <span class="p_context"> struct gmap {</span>
 	void *private;
 	bool pfault_enabled;
 	/* Additional data for shadow guest address spaces */
<span class="p_del">-	struct radix_tree_root host_to_rmap;</span>
<span class="p_add">+	struct xarray host_to_rmap;</span>
 	struct list_head children;
 	struct list_head pt_list;
 	spinlock_t shadow_lock;
<span class="p_header">diff --git a/arch/s390/mm/gmap.c b/arch/s390/mm/gmap.c</span>
<span class="p_header">index 05d459b638f5..818a5e80914d 100644</span>
<span class="p_header">--- a/arch/s390/mm/gmap.c</span>
<span class="p_header">+++ b/arch/s390/mm/gmap.c</span>
<span class="p_chunk">@@ -60,9 +60,9 @@</span> <span class="p_context"> static struct gmap *gmap_alloc(unsigned long limit)</span>
 	INIT_LIST_HEAD(&amp;gmap-&gt;crst_list);
 	INIT_LIST_HEAD(&amp;gmap-&gt;children);
 	INIT_LIST_HEAD(&amp;gmap-&gt;pt_list);
<span class="p_del">-	INIT_RADIX_TREE(&amp;gmap-&gt;guest_to_host, GFP_KERNEL);</span>
<span class="p_del">-	INIT_RADIX_TREE(&amp;gmap-&gt;host_to_guest, GFP_ATOMIC);</span>
<span class="p_del">-	INIT_RADIX_TREE(&amp;gmap-&gt;host_to_rmap, GFP_ATOMIC);</span>
<span class="p_add">+	xa_init(&amp;gmap-&gt;guest_to_host);</span>
<span class="p_add">+	xa_init(&amp;gmap-&gt;host_to_guest);</span>
<span class="p_add">+	xa_init(&amp;gmap-&gt;host_to_rmap);</span>
 	spin_lock_init(&amp;gmap-&gt;guest_table_lock);
 	spin_lock_init(&amp;gmap-&gt;shadow_lock);
 	atomic_set(&amp;gmap-&gt;ref_count, 1);
<span class="p_chunk">@@ -121,55 +121,16 @@</span> <span class="p_context"> static void gmap_flush_tlb(struct gmap *gmap)</span>
 		__tlb_flush_global();
 }
 
<span class="p_del">-static void gmap_radix_tree_free(struct radix_tree_root *root)</span>
<span class="p_del">-{</span>
<span class="p_del">-	struct radix_tree_iter iter;</span>
<span class="p_del">-	unsigned long indices[16];</span>
<span class="p_del">-	unsigned long index;</span>
<span class="p_del">-	void __rcu **slot;</span>
<span class="p_del">-	int i, nr;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* A radix tree is freed by deleting all of its entries */</span>
<span class="p_del">-	index = 0;</span>
<span class="p_del">-	do {</span>
<span class="p_del">-		nr = 0;</span>
<span class="p_del">-		radix_tree_for_each_slot(slot, root, &amp;iter, index) {</span>
<span class="p_del">-			indices[nr] = iter.index;</span>
<span class="p_del">-			if (++nr == 16)</span>
<span class="p_del">-				break;</span>
<span class="p_del">-		}</span>
<span class="p_del">-		for (i = 0; i &lt; nr; i++) {</span>
<span class="p_del">-			index = indices[i];</span>
<span class="p_del">-			radix_tree_delete(root, index);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	} while (nr &gt; 0);</span>
<span class="p_del">-}</span>
<span class="p_del">-</span>
<span class="p_del">-static void gmap_rmap_radix_tree_free(struct radix_tree_root *root)</span>
<span class="p_add">+static void gmap_rmap_free(struct xarray *xa)</span>
 {
 	struct gmap_rmap *rmap, *rnext, *head;
<span class="p_del">-	struct radix_tree_iter iter;</span>
<span class="p_del">-	unsigned long indices[16];</span>
<span class="p_del">-	unsigned long index;</span>
<span class="p_del">-	void __rcu **slot;</span>
<span class="p_del">-	int i, nr;</span>
<span class="p_del">-</span>
<span class="p_del">-	/* A radix tree is freed by deleting all of its entries */</span>
<span class="p_del">-	index = 0;</span>
<span class="p_del">-	do {</span>
<span class="p_del">-		nr = 0;</span>
<span class="p_del">-		radix_tree_for_each_slot(slot, root, &amp;iter, index) {</span>
<span class="p_del">-			indices[nr] = iter.index;</span>
<span class="p_del">-			if (++nr == 16)</span>
<span class="p_del">-				break;</span>
<span class="p_del">-		}</span>
<span class="p_del">-		for (i = 0; i &lt; nr; i++) {</span>
<span class="p_del">-			index = indices[i];</span>
<span class="p_del">-			head = radix_tree_delete(root, index);</span>
<span class="p_del">-			gmap_for_each_rmap_safe(rmap, rnext, head)</span>
<span class="p_del">-				kfree(rmap);</span>
<span class="p_del">-		}</span>
<span class="p_del">-	} while (nr &gt; 0);</span>
<span class="p_add">+	unsigned long index = 0;</span>
<span class="p_add">+</span>
<span class="p_add">+	xa_for_each(xa, head, index, ULONG_MAX, XA_PRESENT) {</span>
<span class="p_add">+		gmap_for_each_rmap_safe(rmap, rnext, head)</span>
<span class="p_add">+			kfree(rmap);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	xa_destroy(xa);</span>
 }
 
 /**
<span class="p_chunk">@@ -188,15 +149,15 @@</span> <span class="p_context"> static void gmap_free(struct gmap *gmap)</span>
 	/* Free all segment &amp; region tables. */
 	list_for_each_entry_safe(page, next, &amp;gmap-&gt;crst_list, lru)
 		__free_pages(page, CRST_ALLOC_ORDER);
<span class="p_del">-	gmap_radix_tree_free(&amp;gmap-&gt;guest_to_host);</span>
<span class="p_del">-	gmap_radix_tree_free(&amp;gmap-&gt;host_to_guest);</span>
<span class="p_add">+	xa_destroy(&amp;gmap-&gt;guest_to_host);</span>
<span class="p_add">+	xa_destroy(&amp;gmap-&gt;host_to_guest);</span>
 
 	/* Free additional data for a shadow gmap */
 	if (gmap_is_shadow(gmap)) {
 		/* Free all page tables. */
 		list_for_each_entry_safe(page, next, &amp;gmap-&gt;pt_list, lru)
 			page_table_free_pgste(page);
<span class="p_del">-		gmap_rmap_radix_tree_free(&amp;gmap-&gt;host_to_rmap);</span>
<span class="p_add">+		gmap_rmap_free(&amp;gmap-&gt;host_to_rmap);</span>
 		/* Release reference to the parent */
 		gmap_put(gmap-&gt;parent);
 	}
<span class="p_chunk">@@ -358,7 +319,7 @@</span> <span class="p_context"> static int __gmap_unlink_by_vmaddr(struct gmap *gmap, unsigned long vmaddr)</span>
 
 	BUG_ON(gmap_is_shadow(gmap));
 	spin_lock(&amp;gmap-&gt;guest_table_lock);
<span class="p_del">-	entry = radix_tree_delete(&amp;gmap-&gt;host_to_guest, vmaddr &gt;&gt; PMD_SHIFT);</span>
<span class="p_add">+	entry = xa_erase(&amp;gmap-&gt;host_to_guest, vmaddr &gt;&gt; PMD_SHIFT);</span>
 	if (entry) {
 		flush = (*entry != _SEGMENT_ENTRY_EMPTY);
 		*entry = _SEGMENT_ENTRY_EMPTY;
<span class="p_chunk">@@ -378,7 +339,7 @@</span> <span class="p_context"> static int __gmap_unmap_by_gaddr(struct gmap *gmap, unsigned long gaddr)</span>
 {
 	unsigned long vmaddr;
 
<span class="p_del">-	vmaddr = (unsigned long) radix_tree_delete(&amp;gmap-&gt;guest_to_host,</span>
<span class="p_add">+	vmaddr = (unsigned long) xa_erase(&amp;gmap-&gt;guest_to_host,</span>
 						   gaddr &gt;&gt; PMD_SHIFT);
 	return vmaddr ? __gmap_unlink_by_vmaddr(gmap, vmaddr) : 0;
 }
<span class="p_chunk">@@ -441,9 +402,9 @@</span> <span class="p_context"> int gmap_map_segment(struct gmap *gmap, unsigned long from,</span>
 		/* Remove old translation */
 		flush |= __gmap_unmap_by_gaddr(gmap, to + off);
 		/* Store new translation */
<span class="p_del">-		if (radix_tree_insert(&amp;gmap-&gt;guest_to_host,</span>
<span class="p_add">+		if (xa_is_err(xa_store(&amp;gmap-&gt;guest_to_host,</span>
 				      (to + off) &gt;&gt; PMD_SHIFT,
<span class="p_del">-				      (void *) from + off))</span>
<span class="p_add">+				      (void *) from + off, GFP_KERNEL)))</span>
 			break;
 	}
 	up_write(&amp;gmap-&gt;mm-&gt;mmap_sem);
<span class="p_chunk">@@ -474,7 +435,7 @@</span> <span class="p_context"> unsigned long __gmap_translate(struct gmap *gmap, unsigned long gaddr)</span>
 	unsigned long vmaddr;
 
 	vmaddr = (unsigned long)
<span class="p_del">-		radix_tree_lookup(&amp;gmap-&gt;guest_to_host, gaddr &gt;&gt; PMD_SHIFT);</span>
<span class="p_add">+		xa_load(&amp;gmap-&gt;guest_to_host, gaddr &gt;&gt; PMD_SHIFT);</span>
 	/* Note: guest_to_host is empty for a shadow gmap */
 	return vmaddr ? (vmaddr | (gaddr &amp; ~PMD_MASK)) : -EFAULT;
 }
<span class="p_chunk">@@ -588,21 +549,19 @@</span> <span class="p_context"> int __gmap_link(struct gmap *gmap, unsigned long gaddr, unsigned long vmaddr)</span>
 	if (pmd_large(*pmd))
 		return -EFAULT;
 	/* Link gmap segment table entry location to page table. */
<span class="p_del">-	rc = radix_tree_preload(GFP_KERNEL);</span>
<span class="p_add">+	rc = xa_reserve(&amp;gmap-&gt;host_to_guest, vmaddr &gt;&gt; PMD_SHIFT, GFP_KERNEL);</span>
 	if (rc)
 		return rc;
 	ptl = pmd_lock(mm, pmd);
 	spin_lock(&amp;gmap-&gt;guest_table_lock);
 	if (*table == _SEGMENT_ENTRY_EMPTY) {
<span class="p_del">-		rc = radix_tree_insert(&amp;gmap-&gt;host_to_guest,</span>
<span class="p_del">-				       vmaddr &gt;&gt; PMD_SHIFT, table);</span>
<span class="p_add">+		rc = xa_err(xa_store(&amp;gmap-&gt;host_to_guest, vmaddr &gt;&gt; PMD_SHIFT,</span>
<span class="p_add">+				table, GFP_NOWAIT | __GFP_NOFAIL));</span>
 		if (!rc)
 			*table = pmd_val(*pmd);
<span class="p_del">-	} else</span>
<span class="p_del">-		rc = 0;</span>
<span class="p_add">+	}</span>
 	spin_unlock(&amp;gmap-&gt;guest_table_lock);
 	spin_unlock(ptl);
<span class="p_del">-	radix_tree_preload_end();</span>
 	return rc;
 }
 
<span class="p_chunk">@@ -660,7 +619,7 @@</span> <span class="p_context"> void __gmap_zap(struct gmap *gmap, unsigned long gaddr)</span>
 	pte_t *ptep;
 
 	/* Find the vm address for the guest address */
<span class="p_del">-	vmaddr = (unsigned long) radix_tree_lookup(&amp;gmap-&gt;guest_to_host,</span>
<span class="p_add">+	vmaddr = (unsigned long) xa_load(&amp;gmap-&gt;guest_to_host,</span>
 						   gaddr &gt;&gt; PMD_SHIFT);
 	if (vmaddr) {
 		vmaddr |= gaddr &amp; ~PMD_MASK;
<span class="p_chunk">@@ -682,8 +641,7 @@</span> <span class="p_context"> void gmap_discard(struct gmap *gmap, unsigned long from, unsigned long to)</span>
 	for (gaddr = from; gaddr &lt; to;
 	     gaddr = (gaddr + PMD_SIZE) &amp; PMD_MASK) {
 		/* Find the vm address for the guest address */
<span class="p_del">-		vmaddr = (unsigned long)</span>
<span class="p_del">-			radix_tree_lookup(&amp;gmap-&gt;guest_to_host,</span>
<span class="p_add">+		vmaddr = (unsigned long) xa_load(&amp;gmap-&gt;guest_to_host,</span>
 					  gaddr &gt;&gt; PMD_SHIFT);
 		if (!vmaddr)
 			continue;
<span class="p_chunk">@@ -1002,29 +960,24 @@</span> <span class="p_context"> int gmap_read_table(struct gmap *gmap, unsigned long gaddr, unsigned long *val)</span>
 EXPORT_SYMBOL_GPL(gmap_read_table);
 
 /**
<span class="p_del">- * gmap_insert_rmap - add a rmap to the host_to_rmap radix tree</span>
<span class="p_add">+ * gmap_insert_rmap - add a rmap to the host_to_rmap</span>
  * @sg: pointer to the shadow guest address space structure
  * @vmaddr: vm address associated with the rmap
  * @rmap: pointer to the rmap structure
  *
<span class="p_del">- * Called with the sg-&gt;guest_table_lock</span>
<span class="p_add">+ * Called with the sg-&gt;guest_table_lock and page table lock held</span>
  */
 static inline void gmap_insert_rmap(struct gmap *sg, unsigned long vmaddr,
 				    struct gmap_rmap *rmap)
 {
<span class="p_del">-	void __rcu **slot;</span>
<span class="p_add">+	XA_STATE(xas, &amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT);</span>
 
 	BUG_ON(!gmap_is_shadow(sg));
<span class="p_del">-	slot = radix_tree_lookup_slot(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT);</span>
<span class="p_del">-	if (slot) {</span>
<span class="p_del">-		rmap-&gt;next = radix_tree_deref_slot_protected(slot,</span>
<span class="p_del">-							&amp;sg-&gt;guest_table_lock);</span>
<span class="p_del">-		radix_tree_replace_slot(&amp;sg-&gt;host_to_rmap, slot, rmap);</span>
<span class="p_del">-	} else {</span>
<span class="p_del">-		rmap-&gt;next = NULL;</span>
<span class="p_del">-		radix_tree_insert(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT,</span>
<span class="p_del">-				  rmap);</span>
<span class="p_del">-	}</span>
<span class="p_add">+</span>
<span class="p_add">+	xas_lock(&amp;xas);</span>
<span class="p_add">+	rmap-&gt;next = xas_load(&amp;xas);</span>
<span class="p_add">+	xas_store(&amp;xas, rmap);</span>
<span class="p_add">+	xas_unlock(&amp;xas);</span>
 }
 
 /**
<span class="p_chunk">@@ -1058,7 +1011,8 @@</span> <span class="p_context"> static int gmap_protect_rmap(struct gmap *sg, unsigned long raddr,</span>
 		if (!rmap)
 			return -ENOMEM;
 		rmap-&gt;raddr = raddr;
<span class="p_del">-		rc = radix_tree_preload(GFP_KERNEL);</span>
<span class="p_add">+		rc = xa_reserve(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT,</span>
<span class="p_add">+				GFP_KERNEL);</span>
 		if (rc) {
 			kfree(rmap);
 			return rc;
<span class="p_chunk">@@ -1074,7 +1028,7 @@</span> <span class="p_context"> static int gmap_protect_rmap(struct gmap *sg, unsigned long raddr,</span>
 			spin_unlock(&amp;sg-&gt;guest_table_lock);
 			gmap_pte_op_end(ptl);
 		}
<span class="p_del">-		radix_tree_preload_end();</span>
<span class="p_add">+		xa_release(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT);</span>
 		if (rc) {
 			kfree(rmap);
 			rc = gmap_pte_op_fixup(parent, paddr, vmaddr, prot);
<span class="p_chunk">@@ -1962,7 +1916,8 @@</span> <span class="p_context"> int gmap_shadow_page(struct gmap *sg, unsigned long saddr, pte_t pte)</span>
 			rc = vmaddr;
 			break;
 		}
<span class="p_del">-		rc = radix_tree_preload(GFP_KERNEL);</span>
<span class="p_add">+		rc = xa_reserve(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT,</span>
<span class="p_add">+				GFP_KERNEL);</span>
 		if (rc)
 			break;
 		rc = -EAGAIN;
<span class="p_chunk">@@ -1974,7 +1929,8 @@</span> <span class="p_context"> int gmap_shadow_page(struct gmap *sg, unsigned long saddr, pte_t pte)</span>
 			if (!tptep) {
 				spin_unlock(&amp;sg-&gt;guest_table_lock);
 				gmap_pte_op_end(ptl);
<span class="p_del">-				radix_tree_preload_end();</span>
<span class="p_add">+				xa_release(&amp;sg-&gt;host_to_rmap,</span>
<span class="p_add">+						vmaddr &gt;&gt; PAGE_SHIFT);</span>
 				break;
 			}
 			rc = ptep_shadow_pte(sg-&gt;mm, saddr, sptep, tptep, pte);
<span class="p_chunk">@@ -1983,11 +1939,13 @@</span> <span class="p_context"> int gmap_shadow_page(struct gmap *sg, unsigned long saddr, pte_t pte)</span>
 				gmap_insert_rmap(sg, vmaddr, rmap);
 				rmap = NULL;
 				rc = 0;
<span class="p_add">+			} else {</span>
<span class="p_add">+				xa_release(&amp;sg-&gt;host_to_rmap,</span>
<span class="p_add">+						vmaddr &gt;&gt; PAGE_SHIFT);</span>
 			}
 			gmap_pte_op_end(ptl);
 			spin_unlock(&amp;sg-&gt;guest_table_lock);
 		}
<span class="p_del">-		radix_tree_preload_end();</span>
 		if (!rc)
 			break;
 		rc = gmap_pte_op_fixup(parent, paddr, vmaddr, prot);
<span class="p_chunk">@@ -2030,7 +1988,7 @@</span> <span class="p_context"> static void gmap_shadow_notify(struct gmap *sg, unsigned long vmaddr,</span>
 		return;
 	}
 	/* Remove the page table tree from on specific entry */
<span class="p_del">-	head = radix_tree_delete(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT);</span>
<span class="p_add">+	head = xa_erase(&amp;sg-&gt;host_to_rmap, vmaddr &gt;&gt; PAGE_SHIFT);</span>
 	gmap_for_each_rmap_safe(rmap, rnext, head) {
 		bits = rmap-&gt;raddr &amp; _SHADOW_RMAP_MASK;
 		raddr = rmap-&gt;raddr ^ bits;
<span class="p_chunk">@@ -2078,8 +2036,7 @@</span> <span class="p_context"> void ptep_notify(struct mm_struct *mm, unsigned long vmaddr,</span>
 	rcu_read_lock();
 	list_for_each_entry_rcu(gmap, &amp;mm-&gt;context.gmap_list, list) {
 		spin_lock(&amp;gmap-&gt;guest_table_lock);
<span class="p_del">-		table = radix_tree_lookup(&amp;gmap-&gt;host_to_guest,</span>
<span class="p_del">-					  vmaddr &gt;&gt; PMD_SHIFT);</span>
<span class="p_add">+		table = xa_load(&amp;gmap-&gt;host_to_guest, vmaddr &gt;&gt; PMD_SHIFT);</span>
 		if (table)
 			gaddr = __gmap_segment_gaddr(table) + offset;
 		spin_unlock(&amp;gmap-&gt;guest_table_lock);

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



