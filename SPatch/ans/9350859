
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[v1,03/12] mm: thp: add helpers related to thp/pmd migration - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [v1,03/12] mm: thp: add helpers related to thp/pmd migration</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=168825">Zi Yan</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Sept. 26, 2016, 3:22 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20160926152234.14809-4-zi.yan@sent.com&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/9350859/mbox/"
   >mbox</a>
|
   <a href="/patch/9350859/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/9350859/">/patch/9350859/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	E32FA6077B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 15:25:38 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id D324828D4A
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 15:25:38 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id C759428D60; Mon, 26 Sep 2016 15:25:38 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.0 required=2.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID, DKIM_VALID_AU, FREEMAIL_FROM,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 5303B28D51
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Mon, 26 Sep 2016 15:25:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1161376AbcIZPZZ (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Mon, 26 Sep 2016 11:25:25 -0400
Received: from out2-smtp.messagingengine.com ([66.111.4.26]:40489 &quot;EHLO
	out2-smtp.messagingengine.com&quot; rhost-flags-OK-OK-OK-OK)
	by vger.kernel.org with ESMTP id S941598AbcIZPYN (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Mon, 26 Sep 2016 11:24:13 -0400
Received: from compute7.internal (compute7.nyi.internal [10.202.2.47])
	by mailout.nyi.internal (Postfix) with ESMTP id 27DB220715;
	Mon, 26 Sep 2016 11:24:07 -0400 (EDT)
Received: from frontend2 ([10.202.2.161])
	by compute7.internal (MEProxy); Mon, 26 Sep 2016 11:24:07 -0400
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=sent.com; h=cc
	:date:from:in-reply-to:message-id:references:subject:to
	:x-sasl-enc:x-sasl-enc; s=mesmtp; bh=fSJYxIsQML9Ghx0Z8g0BOq59Dfg
	=; b=T7WgMrH8Om5rhThjLk8U4F7SQfUDkztfgiH96/Ud/vy89puUJ5PrFygkDJM
	nxC0txFJm7IJJSwCpasrl5rDWiLXq1NuMOaAXIgWz0rWyzDQlgNlz+5N91WlGObr
	essERjhzS7YKNi2NkakJvrCUy/E2lmssT0AjQDn7yRtZkJUY=
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed/relaxed; d=
	messagingengine.com; h=cc:date:from:in-reply-to:message-id
	:references:subject:to:x-sasl-enc:x-sasl-enc; s=smtpout; bh=fSJY
	xIsQML9Ghx0Z8g0BOq59Dfg=; b=iXDdEp6sc0R0nthaxqNVibQT1lZjJlP9HEsA
	tM+bLcbgFTRaetoe3n9LrByQfoUTjkKUa+cvrrMOzFgUMF8OzzBYhWXHcsiNPCVy
	qAJB+hnzETVMK6KcggVm6pLyF/lAd+LaV+LoEisT/8IAP4TWo5/0mYrOH4ZUSEr8
	LTs/FQo=
X-Sasl-enc: oBcEv6r//MuFp1rAMCYzek2s1bc09RvoplW3iE114SX9 1474903446
Received: from tenansix.rutgers.edu (pool-165-230-225-59.nat.rutgers.edu
	[165.230.225.59])
	by mail.messagingengine.com (Postfix) with ESMTPA id AA31ECCE92;
	Mon, 26 Sep 2016 11:24:06 -0400 (EDT)
From: zi.yan@sent.com
To: linux-kernel@vger.kernel.org, linux-mm@kvack.org
Cc: benh@kernel.crashing.org, mgorman@techsingularity.net,
	kirill.shutemov@linux.intel.com, akpm@linux-foundation.org,
	dave.hansen@linux.intel.com, n-horiguchi@ah.jp.nec.com
Subject: [PATCH v1 03/12] mm: thp: add helpers related to thp/pmd migration
Date: Mon, 26 Sep 2016 11:22:25 -0400
Message-Id: &lt;20160926152234.14809-4-zi.yan@sent.com&gt;
X-Mailer: git-send-email 2.9.3
In-Reply-To: &lt;20160926152234.14809-1-zi.yan@sent.com&gt;
References: &lt;20160926152234.14809-1-zi.yan@sent.com&gt;
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=168825">Zi Yan</a> - Sept. 26, 2016, 3:22 p.m.</div>
<pre class="content">
<span class="from">From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>

This patch prepares thp migration&#39;s core code. These code will be open when
unmap_and_move() stops unconditionally splitting thp and get_new_page() starts
to allocate destination thps.
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
---
 arch/x86/include/asm/pgtable.h    | 11 ++++++
 arch/x86/include/asm/pgtable_64.h |  2 +
 include/linux/swapops.h           | 62 +++++++++++++++++++++++++++++++
 mm/huge_memory.c                  | 77 +++++++++++++++++++++++++++++++++++++++
 mm/migrate.c                      | 23 ++++++++++++
 5 files changed, 175 insertions(+)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">index 437feb4..5ff861f 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable.h</span>
<span class="p_chunk">@@ -530,6 +530,17 @@</span> <span class="p_context"> static inline int pmd_present(pmd_t pmd)</span>
 	return pmd_flags(pmd) &amp; (_PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE);
 }
 
<span class="p_add">+/*</span>
<span class="p_add">+ * Unlike pmd_present(), __pmd_present() checks only _PAGE_PRESENT bit.</span>
<span class="p_add">+ * Combined with is_migration_entry(), this routine is used to detect pmd</span>
<span class="p_add">+ * migration entries. To make it work fine, callers should make sure that</span>
<span class="p_add">+ * pmd_trans_huge() returns true beforehand.</span>
<span class="p_add">+ */</span>
<span class="p_add">+static inline int __pmd_present(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return pmd_flags(pmd) &amp; _PAGE_PRESENT;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 #ifdef CONFIG_NUMA_BALANCING
 /*
  * These work without NUMA balancing but the kernel does not care. See the
<span class="p_header">diff --git a/arch/x86/include/asm/pgtable_64.h b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">index 1cc82ec..3a1b48e 100644</span>
<span class="p_header">--- a/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_header">+++ b/arch/x86/include/asm/pgtable_64.h</span>
<span class="p_chunk">@@ -167,7 +167,9 @@</span> <span class="p_context"> static inline int pgd_large(pgd_t pgd) { return 0; }</span>
 					 ((type) &lt;&lt; (SWP_TYPE_FIRST_BIT)) \
 					 | ((offset) &lt;&lt; SWP_OFFSET_FIRST_BIT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
<span class="p_add">+#define __pmd_to_swp_entry(pte)		((swp_entry_t) { pmd_val((pmd)) })</span>
 #define __swp_entry_to_pte(x)		((pte_t) { .pte = (x).val })
<span class="p_add">+#define __swp_entry_to_pmd(x)		((pmd_t) { .pmd = (x).val })</span>
 
 extern int kern_addr_valid(unsigned long addr);
 extern void cleanup_highmap(void);
<span class="p_header">diff --git a/include/linux/swapops.h b/include/linux/swapops.h</span>
<span class="p_header">index 5c3a5f3..b402a2c 100644</span>
<span class="p_header">--- a/include/linux/swapops.h</span>
<span class="p_header">+++ b/include/linux/swapops.h</span>
<span class="p_chunk">@@ -163,6 +163,68 @@</span> <span class="p_context"> static inline int is_write_migration_entry(swp_entry_t entry)</span>
 
 #endif
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+extern int set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+		struct mm_struct *mm, unsigned long address);</span>
<span class="p_add">+</span>
<span class="p_add">+extern int remove_migration_pmd(struct page *new,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old);</span>
<span class="p_add">+</span>
<span class="p_add">+extern void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd);</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __pmd_to_swp_entry(pmd);</span>
<span class="p_add">+	return swp_entry(__swp_type(arch_entry), __swp_offset(arch_entry));</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	swp_entry_t arch_entry;</span>
<span class="p_add">+</span>
<span class="p_add">+	arch_entry = __swp_entry(swp_type(entry), swp_offset(entry));</span>
<span class="p_add">+	return __swp_entry_to_pmd(arch_entry);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return !__pmd_present(pmd) &amp;&amp; is_migration_entry(pmd_to_swp_entry(pmd));</span>
<span class="p_add">+}</span>
<span class="p_add">+#else</span>
<span class="p_add">+static inline int set_pmd_migration_entry(struct page *page,</span>
<span class="p_add">+				struct mm_struct *mm, unsigned long address)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int remove_migration_pmd(struct page *new,</span>
<span class="p_add">+		struct vm_area_struct *vma, unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline void pmd_migration_entry_wait(struct mm_struct *m, pmd_t *p) { }</span>
<span class="p_add">+</span>
<span class="p_add">+static inline swp_entry_t pmd_to_swp_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return swp_entry(0, 0);</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline pmd_t swp_entry_to_pmd(swp_entry_t entry)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pmd_t pmd = {};</span>
<span class="p_add">+</span>
<span class="p_add">+	return pmd;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+static inline int is_pmd_migration_entry(pmd_t pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_MEMORY_FAILURE
 
 extern atomic_long_t num_poisoned_pages __read_mostly;
<span class="p_header">diff --git a/mm/huge_memory.c b/mm/huge_memory.c</span>
<span class="p_header">index a6abd76..0cd39ef 100644</span>
<span class="p_header">--- a/mm/huge_memory.c</span>
<span class="p_header">+++ b/mm/huge_memory.c</span>
<span class="p_chunk">@@ -2252,3 +2252,80 @@</span> <span class="p_context"> static int __init split_huge_pages_debugfs(void)</span>
 }
 late_initcall(split_huge_pages_debugfs);
 #endif
<span class="p_add">+</span>
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+int set_pmd_migration_entry(struct page *page, struct mm_struct *mm,</span>
<span class="p_add">+				unsigned long addr)</span>
<span class="p_add">+{</span>
<span class="p_add">+	pte_t *pte;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pmd_t pmdval;</span>
<span class="p_add">+	pmd_t pmdswp;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+</span>
<span class="p_add">+	mmu_notifier_invalidate_range_start(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	if (!page_check_address_transhuge(page, mm, addr, &amp;pmd, &amp;pte, &amp;ptl))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	if (pte)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pmdval = pmdp_huge_get_and_clear(mm, addr, pmd);</span>
<span class="p_add">+	entry = make_migration_entry(page, pmd_write(pmdval));</span>
<span class="p_add">+	pmdswp = swp_entry_to_pmd(entry);</span>
<span class="p_add">+	pmdswp = pmd_mkhuge(pmdswp);</span>
<span class="p_add">+	set_pmd_at(mm, addr, pmd, pmdswp);</span>
<span class="p_add">+	page_remove_rmap(page, true);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	mmu_notifier_invalidate_range_end(mm, addr, addr + HPAGE_PMD_SIZE);</span>
<span class="p_add">+	return SWAP_AGAIN;</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
<span class="p_add">+int remove_migration_pmd(struct page *new, struct vm_area_struct *vma,</span>
<span class="p_add">+			unsigned long addr, void *old)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mm_struct *mm = vma-&gt;vm_mm;</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	pgd_t *pgd;</span>
<span class="p_add">+	pud_t *pud;</span>
<span class="p_add">+	pmd_t *pmd;</span>
<span class="p_add">+	pmd_t pmde;</span>
<span class="p_add">+	swp_entry_t entry;</span>
<span class="p_add">+	unsigned long mmun_start = addr &amp; HPAGE_PMD_MASK;</span>
<span class="p_add">+	unsigned long mmun_end = mmun_start + HPAGE_PMD_SIZE;</span>
<span class="p_add">+</span>
<span class="p_add">+	pgd = pgd_offset(mm, addr);</span>
<span class="p_add">+	if (!pgd_present(*pgd))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pud = pud_offset(pgd, addr);</span>
<span class="p_add">+	if (!pud_present(*pud))</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	pmd = pmd_offset(pud, addr);</span>
<span class="p_add">+	if (!pmd)</span>
<span class="p_add">+		goto out;</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	pmde = *pmd;</span>
<span class="p_add">+	if (!is_pmd_migration_entry(pmde))</span>
<span class="p_add">+		goto unlock_ptl;</span>
<span class="p_add">+	entry = pmd_to_swp_entry(pmde);</span>
<span class="p_add">+	if (migration_entry_to_page(entry) != old)</span>
<span class="p_add">+		goto unlock_ptl;</span>
<span class="p_add">+	get_page(new);</span>
<span class="p_add">+	pmde = mk_huge_pmd(new, vma-&gt;vm_page_prot);</span>
<span class="p_add">+	if (is_write_migration_entry(entry))</span>
<span class="p_add">+		pmde = maybe_pmd_mkwrite(pmde, vma);</span>
<span class="p_add">+	flush_cache_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	page_add_anon_rmap(new, vma, mmun_start, true);</span>
<span class="p_add">+	pmdp_huge_clear_flush_notify(vma, mmun_start, pmd);</span>
<span class="p_add">+	set_pmd_at(mm, mmun_start, pmd, pmde);</span>
<span class="p_add">+	flush_tlb_range(vma, mmun_start, mmun_end);</span>
<span class="p_add">+	if (vma-&gt;vm_flags &amp; VM_LOCKED)</span>
<span class="p_add">+		mlock_vma_page(new);</span>
<span class="p_add">+	update_mmu_cache_pmd(vma, addr, pmd);</span>
<span class="p_add">+unlock_ptl:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+out:</span>
<span class="p_add">+	return SWAP_AGAIN;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_header">diff --git a/mm/migrate.c b/mm/migrate.c</span>
<span class="p_header">index f7ee04a..95613e7 100644</span>
<span class="p_header">--- a/mm/migrate.c</span>
<span class="p_header">+++ b/mm/migrate.c</span>
<span class="p_chunk">@@ -207,6 +207,8 @@</span> <span class="p_context"> static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,</span>
 		if (!ptep)
 			goto out;
 		ptl = huge_pte_lockptr(hstate_vma(vma), mm, ptep);
<span class="p_add">+	} else if (PageTransHuge(new)) {</span>
<span class="p_add">+		return remove_migration_pmd(new, vma, addr, old);</span>
 	} else {
 		pmd = mm_find_pmd(mm, addr);
 		if (!pmd)
<span class="p_chunk">@@ -344,6 +346,27 @@</span> <span class="p_context"> void migration_entry_wait_huge(struct vm_area_struct *vma,</span>
 	__migration_entry_wait(mm, pte, ptl);
 }
 
<span class="p_add">+#ifdef CONFIG_ARCH_ENABLE_THP_MIGRATION</span>
<span class="p_add">+void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)</span>
<span class="p_add">+{</span>
<span class="p_add">+	spinlock_t *ptl;</span>
<span class="p_add">+	struct page *page;</span>
<span class="p_add">+</span>
<span class="p_add">+	ptl = pmd_lock(mm, pmd);</span>
<span class="p_add">+	if (!is_pmd_migration_entry(*pmd))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	page = migration_entry_to_page(pmd_to_swp_entry(*pmd));</span>
<span class="p_add">+	if (!get_page_unless_zero(page))</span>
<span class="p_add">+		goto unlock;</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+	wait_on_page_locked(page);</span>
<span class="p_add">+	put_page(page);</span>
<span class="p_add">+	return;</span>
<span class="p_add">+unlock:</span>
<span class="p_add">+	spin_unlock(ptl);</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif</span>
<span class="p_add">+</span>
 #ifdef CONFIG_BLOCK
 /* Returns true if all buffers are successfully locked */
 static bool buffer_migrate_lock_buffers(struct buffer_head *head,

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



