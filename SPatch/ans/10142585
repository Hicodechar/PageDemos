
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>[tip:efi/core] efi: Parse ARM error information value - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    [tip:efi/core] efi: Parse ARM error information value</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Jan. 3, 2018, 4:21 p.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;tip-301f55b1a9177132d2b9ce8a90bf0ae4b37bb850@git.kernel.org&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/10142585/mbox/"
   >mbox</a>
|
   <a href="/patch/10142585/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/10142585/">/patch/10142585/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
	[172.30.200.125])
	by pdx-korg-patchwork.web.codeaurora.org (Postfix) with ESMTP id
	B2D766034B for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 16:26:34 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id A35EB29259
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 16:26:33 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id 96F8029295; Wed,  3 Jan 2018 16:26:33 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-6.9 required=2.0 tests=BAYES_00,RCVD_IN_DNSWL_HI
	autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 9D1F929259
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Wed,  3 Jan 2018 16:26:32 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1751401AbeACQ01 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Wed, 3 Jan 2018 11:26:27 -0500
Received: from terminus.zytor.com ([65.50.211.136]:58467 &quot;EHLO
	terminus.zytor.com&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751388AbeACQ0X (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Wed, 3 Jan 2018 11:26:23 -0500
Received: from terminus.zytor.com (localhost [127.0.0.1])
	by terminus.zytor.com (8.15.2/8.15.2) with ESMTP id w03GL0hu025988;
	Wed, 3 Jan 2018 08:21:00 -0800
Received: (from tipbot@localhost)
	by terminus.zytor.com (8.15.2/8.15.2/Submit) id w03GL0A2025985;
	Wed, 3 Jan 2018 08:21:00 -0800
Date: Wed, 3 Jan 2018 08:21:00 -0800
X-Authentication-Warning: terminus.zytor.com: tipbot set sender to
	tipbot@zytor.com using -f
From: tip-bot for Tyler Baicar &lt;tipbot@zytor.com&gt;
Message-ID: &lt;tip-301f55b1a9177132d2b9ce8a90bf0ae4b37bb850@git.kernel.org&gt;
Cc: gomonovych@gmail.com, tglx@linutronix.de,
	ard.biesheuvel@linaro.org, hpa@zytor.com, sboyd@codeaurora.org,
	mingo@kernel.org, linux-kernel@vger.kernel.org,
	matt@codeblueprint.co.uk, tbaicar@codeaurora.org,
	peterz@infradead.org, torvalds@linux-foundation.org,
	arvind.yadav.cs@gmail.com
Reply-To: ard.biesheuvel@linaro.org, tglx@linutronix.de,
	gomonovych@gmail.com, torvalds@linux-foundation.org,
	arvind.yadav.cs@gmail.com, peterz@infradead.org,
	tbaicar@codeaurora.org, matt@codeblueprint.co.uk,
	linux-kernel@vger.kernel.org, hpa@zytor.com, mingo@kernel.org,
	sboyd@codeaurora.org
In-Reply-To: &lt;20180102181042.19074-6-ard.biesheuvel@linaro.org&gt;
References: &lt;20180102181042.19074-6-ard.biesheuvel@linaro.org&gt;
To: linux-tip-commits@vger.kernel.org
Subject: [tip:efi/core] efi: Parse ARM error information value
Git-Commit-ID: 301f55b1a9177132d2b9ce8a90bf0ae4b37bb850
X-Mailer: tip-git-log-daemon
Robot-ID: &lt;tip-bot.git.kernel.org&gt;
Robot-Unsubscribe: Contact &lt;mailto:hpa@kernel.org&gt; to get blacklisted from
	these emails
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=UTF-8
Content-Disposition: inline
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=60001">tip-bot for Jacob Shin</a> - Jan. 3, 2018, 4:21 p.m.</div>
<pre class="content">
Commit-ID:  301f55b1a9177132d2b9ce8a90bf0ae4b37bb850
Gitweb:     https://git.kernel.org/tip/301f55b1a9177132d2b9ce8a90bf0ae4b37bb850
Author:     Tyler Baicar &lt;tbaicar@codeaurora.org&gt;
AuthorDate: Tue, 2 Jan 2018 18:10:42 +0000
Committer:  Ingo Molnar &lt;mingo@kernel.org&gt;
CommitDate: Wed, 3 Jan 2018 14:03:48 +0100

efi: Parse ARM error information value

ARM errors just print out the error information value, then the
value needs to be manually decoded as per the UEFI spec. Add
decoding of the ARM error information value so that the kernel
logs capture all of the valid information at first glance.

ARM error information value decoding is captured in UEFI 2.7
spec tables 263-265.
<span class="signed-off-by">
Signed-off-by: Tyler Baicar &lt;tbaicar@codeaurora.org&gt;</span>
<span class="signed-off-by">Signed-off-by: Ard Biesheuvel &lt;ard.biesheuvel@linaro.org&gt;</span>
Cc: Arvind Yadav &lt;arvind.yadav.cs@gmail.com&gt;
Cc: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;
Cc: Matt Fleming &lt;matt@codeblueprint.co.uk&gt;
Cc: Peter Zijlstra &lt;peterz@infradead.org&gt;
Cc: Stephen Boyd &lt;sboyd@codeaurora.org&gt;
Cc: Thomas Gleixner &lt;tglx@linutronix.de&gt;
Cc: Vasyl Gomonovych &lt;gomonovych@gmail.com&gt;
Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/20180102181042.19074-6-ard.biesheuvel@linaro.org
<span class="signed-off-by">Signed-off-by: Ingo Molnar &lt;mingo@kernel.org&gt;</span>
---
 drivers/firmware/efi/cper-arm.c | 213 +++++++++++++++++++++++++++++++++++++++-
 include/linux/cper.h            |  44 +++++++++
 2 files changed, 255 insertions(+), 2 deletions(-)
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/drivers/firmware/efi/cper-arm.c b/drivers/firmware/efi/cper-arm.c</span>
<span class="p_header">index 4afbfed..698e5c8 100644</span>
<span class="p_header">--- a/drivers/firmware/efi/cper-arm.c</span>
<span class="p_header">+++ b/drivers/firmware/efi/cper-arm.c</span>
<span class="p_chunk">@@ -44,13 +44,218 @@</span> <span class="p_context"> static const char * const arm_reg_ctx_strs[] = {</span>
 	&quot;Misc. system register structure&quot;,
 };
 
<span class="p_add">+static const char * const arm_err_trans_type_strs[] = {</span>
<span class="p_add">+	&quot;Instruction&quot;,</span>
<span class="p_add">+	&quot;Data Access&quot;,</span>
<span class="p_add">+	&quot;Generic&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char * const arm_bus_err_op_strs[] = {</span>
<span class="p_add">+	&quot;Generic error (type cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic read (type of instruction or data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic write (type of instruction of data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Data read&quot;,</span>
<span class="p_add">+	&quot;Data write&quot;,</span>
<span class="p_add">+	&quot;Instruction fetch&quot;,</span>
<span class="p_add">+	&quot;Prefetch&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char * const arm_cache_err_op_strs[] = {</span>
<span class="p_add">+	&quot;Generic error (type cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic read (type of instruction or data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic write (type of instruction of data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Data read&quot;,</span>
<span class="p_add">+	&quot;Data write&quot;,</span>
<span class="p_add">+	&quot;Instruction fetch&quot;,</span>
<span class="p_add">+	&quot;Prefetch&quot;,</span>
<span class="p_add">+	&quot;Eviction&quot;,</span>
<span class="p_add">+	&quot;Snooping (processor initiated a cache snoop that resulted in an error)&quot;,</span>
<span class="p_add">+	&quot;Snooped (processor raised a cache error caused by another processor or device snooping its cache)&quot;,</span>
<span class="p_add">+	&quot;Management&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char * const arm_tlb_err_op_strs[] = {</span>
<span class="p_add">+	&quot;Generic error (type cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic read (type of instruction or data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Generic write (type of instruction of data request cannot be determined)&quot;,</span>
<span class="p_add">+	&quot;Data read&quot;,</span>
<span class="p_add">+	&quot;Data write&quot;,</span>
<span class="p_add">+	&quot;Instruction fetch&quot;,</span>
<span class="p_add">+	&quot;Prefetch&quot;,</span>
<span class="p_add">+	&quot;Local management operation (processor initiated a TLB management operation that resulted in an error)&quot;,</span>
<span class="p_add">+	&quot;External management operation (processor raised a TLB error caused by another processor or device broadcasting TLB operations)&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char * const arm_bus_err_part_type_strs[] = {</span>
<span class="p_add">+	&quot;Local processor originated request&quot;,</span>
<span class="p_add">+	&quot;Local processor responded to request&quot;,</span>
<span class="p_add">+	&quot;Local processor observed&quot;,</span>
<span class="p_add">+	&quot;Generic&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static const char * const arm_bus_err_addr_space_strs[] = {</span>
<span class="p_add">+	&quot;External Memory Access&quot;,</span>
<span class="p_add">+	&quot;Internal Memory Access&quot;,</span>
<span class="p_add">+	&quot;Unknown&quot;,</span>
<span class="p_add">+	&quot;Device Memory Access&quot;,</span>
<span class="p_add">+};</span>
<span class="p_add">+</span>
<span class="p_add">+static void cper_print_arm_err_info(const char *pfx, u32 type,</span>
<span class="p_add">+				    u64 error_info)</span>
<span class="p_add">+{</span>
<span class="p_add">+	u8 trans_type, op_type, level, participation_type, address_space;</span>
<span class="p_add">+	u16 mem_attributes;</span>
<span class="p_add">+	bool proc_context_corrupt, corrected, precise_pc, restartable_pc;</span>
<span class="p_add">+	bool time_out, access_mode;</span>
<span class="p_add">+</span>
<span class="p_add">+	/* If the type is unknown, bail. */</span>
<span class="p_add">+	if (type &gt; CPER_ARM_MAX_TYPE)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	/*</span>
<span class="p_add">+	 * Vendor type errors have error information values that are vendor</span>
<span class="p_add">+	 * specific.</span>
<span class="p_add">+	 */</span>
<span class="p_add">+	if (type == CPER_ARM_VENDOR_ERROR)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_TRANSACTION_TYPE) {</span>
<span class="p_add">+		trans_type = ((error_info &gt;&gt; CPER_ARM_ERR_TRANSACTION_SHIFT)</span>
<span class="p_add">+			      &amp; CPER_ARM_ERR_TRANSACTION_MASK);</span>
<span class="p_add">+		if (trans_type &lt; ARRAY_SIZE(arm_err_trans_type_strs)) {</span>
<span class="p_add">+			printk(&quot;%stransaction type: %s\n&quot;, pfx,</span>
<span class="p_add">+			       arm_err_trans_type_strs[trans_type]);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_OPERATION_TYPE) {</span>
<span class="p_add">+		op_type = ((error_info &gt;&gt; CPER_ARM_ERR_OPERATION_SHIFT)</span>
<span class="p_add">+			   &amp; CPER_ARM_ERR_OPERATION_MASK);</span>
<span class="p_add">+		switch (type) {</span>
<span class="p_add">+		case CPER_ARM_CACHE_ERROR:</span>
<span class="p_add">+			if (op_type &lt; ARRAY_SIZE(arm_cache_err_op_strs)) {</span>
<span class="p_add">+				printk(&quot;%soperation type: %s\n&quot;, pfx,</span>
<span class="p_add">+				       arm_cache_err_op_strs[op_type]);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		case CPER_ARM_TLB_ERROR:</span>
<span class="p_add">+			if (op_type &lt; ARRAY_SIZE(arm_tlb_err_op_strs)) {</span>
<span class="p_add">+				printk(&quot;%soperation type: %s\n&quot;, pfx,</span>
<span class="p_add">+				       arm_tlb_err_op_strs[op_type]);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		case CPER_ARM_BUS_ERROR:</span>
<span class="p_add">+			if (op_type &lt; ARRAY_SIZE(arm_bus_err_op_strs)) {</span>
<span class="p_add">+				printk(&quot;%soperation type: %s\n&quot;, pfx,</span>
<span class="p_add">+				       arm_bus_err_op_strs[op_type]);</span>
<span class="p_add">+			}</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_LEVEL) {</span>
<span class="p_add">+		level = ((error_info &gt;&gt; CPER_ARM_ERR_LEVEL_SHIFT)</span>
<span class="p_add">+			 &amp; CPER_ARM_ERR_LEVEL_MASK);</span>
<span class="p_add">+		switch (type) {</span>
<span class="p_add">+		case CPER_ARM_CACHE_ERROR:</span>
<span class="p_add">+			printk(&quot;%scache level: %d\n&quot;, pfx, level);</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		case CPER_ARM_TLB_ERROR:</span>
<span class="p_add">+			printk(&quot;%sTLB level: %d\n&quot;, pfx, level);</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		case CPER_ARM_BUS_ERROR:</span>
<span class="p_add">+			printk(&quot;%saffinity level at which the bus error occurred: %d\n&quot;,</span>
<span class="p_add">+			       pfx, level);</span>
<span class="p_add">+			break;</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_PROC_CONTEXT_CORRUPT) {</span>
<span class="p_add">+		proc_context_corrupt = ((error_info &gt;&gt; CPER_ARM_ERR_PC_CORRUPT_SHIFT)</span>
<span class="p_add">+					&amp; CPER_ARM_ERR_PC_CORRUPT_MASK);</span>
<span class="p_add">+		if (proc_context_corrupt)</span>
<span class="p_add">+			printk(&quot;%sprocessor context corrupted\n&quot;, pfx);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			printk(&quot;%sprocessor context not corrupted\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_CORRECTED) {</span>
<span class="p_add">+		corrected = ((error_info &gt;&gt; CPER_ARM_ERR_CORRECTED_SHIFT)</span>
<span class="p_add">+			     &amp; CPER_ARM_ERR_CORRECTED_MASK);</span>
<span class="p_add">+		if (corrected)</span>
<span class="p_add">+			printk(&quot;%sthe error has been corrected\n&quot;, pfx);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			printk(&quot;%sthe error has not been corrected\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_PRECISE_PC) {</span>
<span class="p_add">+		precise_pc = ((error_info &gt;&gt; CPER_ARM_ERR_PRECISE_PC_SHIFT)</span>
<span class="p_add">+			      &amp; CPER_ARM_ERR_PRECISE_PC_MASK);</span>
<span class="p_add">+		if (precise_pc)</span>
<span class="p_add">+			printk(&quot;%sPC is precise\n&quot;, pfx);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			printk(&quot;%sPC is imprecise\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_RESTARTABLE_PC) {</span>
<span class="p_add">+		restartable_pc = ((error_info &gt;&gt; CPER_ARM_ERR_RESTARTABLE_PC_SHIFT)</span>
<span class="p_add">+				  &amp; CPER_ARM_ERR_RESTARTABLE_PC_MASK);</span>
<span class="p_add">+		if (restartable_pc)</span>
<span class="p_add">+			printk(&quot;%sProgram execution can be restarted reliably at the PC associated with the error.\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	/* The rest of the fields are specific to bus errors */</span>
<span class="p_add">+	if (type != CPER_ARM_BUS_ERROR)</span>
<span class="p_add">+		return;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_PARTICIPATION_TYPE) {</span>
<span class="p_add">+		participation_type = ((error_info &gt;&gt; CPER_ARM_ERR_PARTICIPATION_TYPE_SHIFT)</span>
<span class="p_add">+				      &amp; CPER_ARM_ERR_PARTICIPATION_TYPE_MASK);</span>
<span class="p_add">+		if (participation_type &lt; ARRAY_SIZE(arm_bus_err_part_type_strs)) {</span>
<span class="p_add">+			printk(&quot;%sparticipation type: %s\n&quot;, pfx,</span>
<span class="p_add">+			       arm_bus_err_part_type_strs[participation_type]);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_TIME_OUT) {</span>
<span class="p_add">+		time_out = ((error_info &gt;&gt; CPER_ARM_ERR_TIME_OUT_SHIFT)</span>
<span class="p_add">+			    &amp; CPER_ARM_ERR_TIME_OUT_MASK);</span>
<span class="p_add">+		if (time_out)</span>
<span class="p_add">+			printk(&quot;%srequest timed out\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_ADDRESS_SPACE) {</span>
<span class="p_add">+		address_space = ((error_info &gt;&gt; CPER_ARM_ERR_ADDRESS_SPACE_SHIFT)</span>
<span class="p_add">+				 &amp; CPER_ARM_ERR_ADDRESS_SPACE_MASK);</span>
<span class="p_add">+		if (address_space &lt; ARRAY_SIZE(arm_bus_err_addr_space_strs)) {</span>
<span class="p_add">+			printk(&quot;%saddress space: %s\n&quot;, pfx,</span>
<span class="p_add">+			       arm_bus_err_addr_space_strs[address_space]);</span>
<span class="p_add">+		}</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_MEM_ATTRIBUTES) {</span>
<span class="p_add">+		mem_attributes = ((error_info &gt;&gt; CPER_ARM_ERR_MEM_ATTRIBUTES_SHIFT)</span>
<span class="p_add">+				  &amp; CPER_ARM_ERR_MEM_ATTRIBUTES_MASK);</span>
<span class="p_add">+		printk(&quot;%smemory access attributes:0x%x\n&quot;, pfx, mem_attributes);</span>
<span class="p_add">+	}</span>
<span class="p_add">+</span>
<span class="p_add">+	if (error_info &amp; CPER_ARM_ERR_VALID_ACCESS_MODE) {</span>
<span class="p_add">+		access_mode = ((error_info &gt;&gt; CPER_ARM_ERR_ACCESS_MODE_SHIFT)</span>
<span class="p_add">+			       &amp; CPER_ARM_ERR_ACCESS_MODE_MASK);</span>
<span class="p_add">+		if (access_mode)</span>
<span class="p_add">+			printk(&quot;%saccess mode: normal\n&quot;, pfx);</span>
<span class="p_add">+		else</span>
<span class="p_add">+			printk(&quot;%saccess mode: secure\n&quot;, pfx);</span>
<span class="p_add">+	}</span>
<span class="p_add">+}</span>
<span class="p_add">+</span>
 void cper_print_proc_arm(const char *pfx,
 			 const struct cper_sec_proc_arm *proc)
 {
 	int i, len, max_ctx_type;
 	struct cper_arm_err_info *err_info;
 	struct cper_arm_ctx_info *ctx_info;
<span class="p_del">-	char newpfx[64];</span>
<span class="p_add">+	char newpfx[64], infopfx[64];</span>
 
 	printk(&quot;%sMIDR: 0x%016llx\n&quot;, pfx, proc-&gt;midr);
 
<span class="p_chunk">@@ -102,9 +307,13 @@</span> <span class="p_context"> void cper_print_proc_arm(const char *pfx,</span>
 		printk(&quot;%serror_type: %d, %s\n&quot;, newpfx, err_info-&gt;type,
 			err_info-&gt;type &lt; ARRAY_SIZE(cper_proc_error_type_strs) ?
 			cper_proc_error_type_strs[err_info-&gt;type] : &quot;unknown&quot;);
<span class="p_del">-		if (err_info-&gt;validation_bits &amp; CPER_ARM_INFO_VALID_ERR_INFO)</span>
<span class="p_add">+		if (err_info-&gt;validation_bits &amp; CPER_ARM_INFO_VALID_ERR_INFO) {</span>
 			printk(&quot;%serror_info: 0x%016llx\n&quot;, newpfx,
 			       err_info-&gt;error_info);
<span class="p_add">+			snprintf(infopfx, sizeof(infopfx), &quot;%s%s&quot;, newpfx, INDENT_SP);</span>
<span class="p_add">+			cper_print_arm_err_info(infopfx, err_info-&gt;type,</span>
<span class="p_add">+						err_info-&gt;error_info);</span>
<span class="p_add">+		}</span>
 		if (err_info-&gt;validation_bits &amp; CPER_ARM_INFO_VALID_VIRT_ADDR)
 			printk(&quot;%svirtual fault address: 0x%016llx\n&quot;,
 				newpfx, err_info-&gt;virt_fault_addr);
<span class="p_header">diff --git a/include/linux/cper.h b/include/linux/cper.h</span>
<span class="p_header">index 3299e43..d14ef4e 100644</span>
<span class="p_header">--- a/include/linux/cper.h</span>
<span class="p_header">+++ b/include/linux/cper.h</span>
<span class="p_chunk">@@ -275,6 +275,50 @@</span> <span class="p_context"> enum {</span>
 #define CPER_ARM_INFO_FLAGS_PROPAGATED		BIT(2)
 #define CPER_ARM_INFO_FLAGS_OVERFLOW		BIT(3)
 
<span class="p_add">+#define CPER_ARM_CACHE_ERROR			0</span>
<span class="p_add">+#define CPER_ARM_TLB_ERROR			1</span>
<span class="p_add">+#define CPER_ARM_BUS_ERROR			2</span>
<span class="p_add">+#define CPER_ARM_VENDOR_ERROR			3</span>
<span class="p_add">+#define CPER_ARM_MAX_TYPE			CPER_ARM_VENDOR_ERROR</span>
<span class="p_add">+</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_TRANSACTION_TYPE	BIT(0)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_OPERATION_TYPE	BIT(1)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_LEVEL		BIT(2)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_PROC_CONTEXT_CORRUPT	BIT(3)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_CORRECTED		BIT(4)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_PRECISE_PC		BIT(5)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_RESTARTABLE_PC	BIT(6)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_PARTICIPATION_TYPE	BIT(7)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_TIME_OUT		BIT(8)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_ADDRESS_SPACE	BIT(9)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_MEM_ATTRIBUTES	BIT(10)</span>
<span class="p_add">+#define CPER_ARM_ERR_VALID_ACCESS_MODE		BIT(11)</span>
<span class="p_add">+</span>
<span class="p_add">+#define CPER_ARM_ERR_TRANSACTION_SHIFT		16</span>
<span class="p_add">+#define CPER_ARM_ERR_TRANSACTION_MASK		GENMASK(1,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_OPERATION_SHIFT		18</span>
<span class="p_add">+#define CPER_ARM_ERR_OPERATION_MASK		GENMASK(3,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_LEVEL_SHIFT		22</span>
<span class="p_add">+#define CPER_ARM_ERR_LEVEL_MASK			GENMASK(2,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_PC_CORRUPT_SHIFT		25</span>
<span class="p_add">+#define CPER_ARM_ERR_PC_CORRUPT_MASK		GENMASK(0,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_CORRECTED_SHIFT		26</span>
<span class="p_add">+#define CPER_ARM_ERR_CORRECTED_MASK		GENMASK(0,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_PRECISE_PC_SHIFT		27</span>
<span class="p_add">+#define CPER_ARM_ERR_PRECISE_PC_MASK		GENMASK(0,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_RESTARTABLE_PC_SHIFT	28</span>
<span class="p_add">+#define CPER_ARM_ERR_RESTARTABLE_PC_MASK	GENMASK(0,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_PARTICIPATION_TYPE_SHIFT	29</span>
<span class="p_add">+#define CPER_ARM_ERR_PARTICIPATION_TYPE_MASK	GENMASK(1,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_TIME_OUT_SHIFT		31</span>
<span class="p_add">+#define CPER_ARM_ERR_TIME_OUT_MASK		GENMASK(0,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_ADDRESS_SPACE_SHIFT	32</span>
<span class="p_add">+#define CPER_ARM_ERR_ADDRESS_SPACE_MASK		GENMASK(1,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_MEM_ATTRIBUTES_SHIFT	34</span>
<span class="p_add">+#define CPER_ARM_ERR_MEM_ATTRIBUTES_MASK	GENMASK(8,0)</span>
<span class="p_add">+#define CPER_ARM_ERR_ACCESS_MODE_SHIFT		43</span>
<span class="p_add">+#define CPER_ARM_ERR_ACCESS_MODE_MASK		GENMASK(0,0)</span>
<span class="p_add">+</span>
 /*
  * All tables and structs must be byte-packed to match CPER
  * specification, since the tables are provided by the system BIOS

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



