
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <title>smaps: fill missing fields for vma(VM_HUGETLB) - Patchwork</title>
  <link rel="stylesheet" type="text/css" href="/static/css/style.css"/>
  <script type="text/javascript" src="/static/js/common.js"></script>
  <script type="text/javascript" src="/static/js/jquery-1.10.1.min.js"></script>

 </head>
 <body>
  <div id="title">
  <h1 style="float: left;">
     <a
      href="/">Patchwork</a>
    smaps: fill missing fields for vma(VM_HUGETLB)</h1>
  <div id="auth">

     <a href="/user/login/">login</a>
     <br/>
     <a href="/register/">register</a>
     <br/>
     <a href="/mail/">mail settings</a>

   </div>
   <div style="clear: both;"></div>
  </div>
  <div id="nav">
   <div id="navleft">
   
    <strong>Project</strong>: LKML
     :
     <a href="/project/LKML/list/"
      >patches</a>
     :
     <a href="/project/LKML/"
      >project info</a>
    
     :
     <a href="/"
     >other projects</a>
     
    
   </div>
   <div id="navright">
    <a href="/help/about/">about</a>
   </div>
   <div style="clear: both"></div>
  </div>

  <div id="content">

<script language="JavaScript" type="text/javascript">
function toggle_headers(link_id, headers_id)
{
    var link = document.getElementById(link_id)
    var headers = document.getElementById(headers_id)

    var hidden = headers.style['display'] == 'none';

    if (hidden) {
        link.innerHTML = 'hide';
        headers.style['display'] = 'block';
    } else {
        link.innerHTML = 'show';
        headers.style['display'] = 'none';
    }

}
</script>

<table class="patchmeta">
 <tr>
  <th>Submitter</th>
  <td><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a></td>
 </tr>
 <tr>
  <th>Date</th>
  <td>Aug. 4, 2015, 5:13 a.m.</td>
 </tr>
 <tr>
  <th>Message ID</th>
  <td>&lt;20150804051339.GA24931@hori1.linux.bs1.fc.nec.co.jp&gt;</td>
 </tr>
 <tr>
  <th>Download</th>
  <td>
   <a href="/patch/6933951/mbox/"
   >mbox</a>
|
   <a href="/patch/6933951/raw/"
   >patch</a>

   </td>
 </tr>
 <tr>
  <th>Permalink</th>
  <td><a href="/patch/6933951/">/patch/6933951/</a>
 </tr>
  <tr>
   <th>State</th>
   <td>New</td>
  </tr>


 <tr>
  <th>Headers</th>
  <td><a id="togglepatchheaders"
   href="javascript:toggle_headers('togglepatchheaders', 'patchheaders')"
   >show</a>
   <div id="patchheaders" class="patchheaders" style="display:none;">
    <pre>Return-Path: &lt;linux-kernel-owner@kernel.org&gt;
X-Original-To: patchwork-LKML@patchwork.kernel.org
Delivered-To: patchwork-parsemail@patchwork2.web.kernel.org
Received: from mail.kernel.org (mail.kernel.org [198.145.29.136])
	by patchwork2.web.kernel.org (Postfix) with ESMTP id 32D6BC05AC
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 05:18:49 +0000 (UTC)
Received: from mail.kernel.org (localhost [127.0.0.1])
	by mail.kernel.org (Postfix) with ESMTP id 901C82064B
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 05:18:48 +0000 (UTC)
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.kernel.org (Postfix) with ESMTP id 16F2620642
	for &lt;patchwork-LKML@patchwork.kernel.org&gt;;
	Tue,  4 Aug 2015 05:18:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1752166AbbHDFS1 (ORCPT
	&lt;rfc822;patchwork-LKML@patchwork.kernel.org&gt;);
	Tue, 4 Aug 2015 01:18:27 -0400
Received: from TYO202.gate.nec.co.jp ([210.143.35.52]:49450 &quot;EHLO
	tyo202.gate.nec.co.jp&quot; rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1751771AbbHDFS0 (ORCPT
	&lt;rfc822;linux-kernel@vger.kernel.org&gt;);
	Tue, 4 Aug 2015 01:18:26 -0400
Received: from mailgate3.nec.co.jp ([10.7.69.192])
	by tyo202.gate.nec.co.jp (8.13.8/8.13.4) with ESMTP id t745IG09007300;
	Tue, 4 Aug 2015 14:18:16 +0900 (JST)
Received: from mailsv3.nec.co.jp (imss61.nec.co.jp [10.7.69.156]) by
	mailgate3.nec.co.jp (8.11.7/3.7W-MAILGATE-NEC) with ESMTP
	id t745IF227234; Tue, 4 Aug 2015 14:18:15 +0900 (JST)
Received: from mail01b.kamome.nec.co.jp (mail01b.kamome.nec.co.jp
	[10.25.43.2])
	by mailsv3.nec.co.jp (8.13.8/8.13.4) with ESMTP id t745IFmE025222;
	Tue, 4 Aug 2015 14:18:15 +0900 (JST)
Received: from bpxc99gp.gisp.nec.co.jp ([10.38.151.149] [10.38.151.149]) by
	mail03.kamome.nec.co.jp with ESMTP id BT-MMP-999997;
	Tue, 4 Aug 2015 14:13:40 +0900
Received: from BPXM23GP.gisp.nec.co.jp ([169.254.2.23]) by
	BPXC21GP.gisp.nec.co.jp ([10.38.151.149]) with mapi id 14.03.0224.002;
	Tue, 4 Aug 2015 14:13:39 +0900
From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
To: Mike Kravetz &lt;mike.kravetz@oracle.com&gt;,
	David Rientjes &lt;rientjes@google.com&gt;,
	=?utf-8?B?SsO2cm4gRW5nZWw=?= &lt;joern@purestorage.com&gt;,
	Andrew Morton &lt;akpm@linux-foundation.org&gt;
CC: &quot;linux-mm@kvack.org&quot; &lt;linux-mm@kvack.org&gt;,
	linux-kernel &lt;linux-kernel@vger.kernel.org&gt;,
	Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;
Subject: [PATCH] smaps: fill missing fields for vma(VM_HUGETLB)
Thread-Topic: [PATCH] smaps: fill missing fields for vma(VM_HUGETLB)
Thread-Index: AQHQznRSEg5CNM2w20WnYVDLM1ypkA==
Date: Tue, 4 Aug 2015 05:13:39 +0000
Message-ID: &lt;20150804051339.GA24931@hori1.linux.bs1.fc.nec.co.jp&gt;
References: &lt;55B6BE37.3010804@oracle.com&gt;
	&lt;20150728183248.GB1406@Sligo.logfs.org&gt; &lt;55B7F0F8.8080909@oracle.com&gt;
	&lt;alpine.DEB.2.10.1507281509420.23577@chino.kir.corp.google.com&gt;
	&lt;20150728222654.GA28456@Sligo.logfs.org&gt;
	&lt;alpine.DEB.2.10.1507281622470.10368@chino.kir.corp.google.com&gt;
	&lt;20150729005332.GB17938@Sligo.logfs.org&gt;
	&lt;alpine.DEB.2.10.1507291205590.24373@chino.kir.corp.google.com&gt;
	&lt;55B95FDB.1000801@oracle.com&gt;
	&lt;20150804025530.GA13210@hori1.linux.bs1.fc.nec.co.jp&gt;
In-Reply-To: &lt;20150804025530.GA13210@hori1.linux.bs1.fc.nec.co.jp&gt;
Accept-Language: ja-JP, en-US
Content-Language: ja-JP
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [10.128.101.25]
Content-Type: text/plain; charset=&quot;utf-8&quot;
Content-ID: &lt;D702EB50A1EE8E4AB3996A1307D939AE@gisp.nec.co.jp&gt;
Content-Transfer-Encoding: base64
MIME-Version: 1.0
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: &lt;linux-kernel.vger.kernel.org&gt;
X-Mailing-List: linux-kernel@vger.kernel.org
X-Spam-Status: No, score=-7.0 required=5.0 tests=BAYES_00, RCVD_IN_DNSWL_HI, 
	RP_MATCHES_RCVD,
	UNPARSEABLE_RELAY autolearn=unavailable version=3.3.1
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on mail.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP
</pre>
   </div>
  </td>
 </tr>
</table>

<div class="patchforms">





 <div style="clear: both;">
 </div>
</div>



<h2>Comments</h2>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 4, 2015, 5:13 a.m.</div>
<pre class="content">
On Tue, Aug 04, 2015 at 02:55:30AM +0000, Naoya Horiguchi wrote:
<span class="quote">&gt; On Wed, Jul 29, 2015 at 04:20:59PM -0700, Mike Kravetz wrote:</span>
<span class="quote">&gt; &gt; On 07/29/2015 12:08 PM, David Rientjes wrote:</span>
<span class="quote">&gt; &gt; &gt;On Tue, 28 Jul 2015, Jörn Engel wrote:</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;&gt;Well, we definitely need something.  Having a 100GB process show 3GB of</span>
<span class="quote">&gt; &gt; &gt;&gt;rss is not very useful.  How would we notice a memory leak if it only</span>
<span class="quote">&gt; &gt; &gt;&gt;affects hugepages, for example?</span>
<span class="quote">&gt; &gt; &gt;&gt;</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Since the hugetlb pool is a global resource, it would also be helpful to</span>
<span class="quote">&gt; &gt; &gt;determine if a process is mapping more than expected.  You can&#39;t do that</span>
<span class="quote">&gt; &gt; &gt;just by adding a huge rss metric, however: if you have 2MB and 1GB</span>
<span class="quote">&gt; &gt; &gt;hugepages configured you wouldn&#39;t know if a process was mapping 512 2MB</span>
<span class="quote">&gt; &gt; &gt;hugepages or 1 1GB hugepage.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;That&#39;s the purpose of hugetlb_cgroup, after all, and it supports usage</span>
<span class="quote">&gt; &gt; &gt;counters for all hstates.  The test could be converted to use that to</span>
<span class="quote">&gt; &gt; &gt;measure usage if configured in the kernel.</span>
<span class="quote">&gt; &gt; &gt;</span>
<span class="quote">&gt; &gt; &gt;Beyond that, I&#39;m not sure how a per-hstate rss metric would be exported to</span>
<span class="quote">&gt; &gt; &gt;userspace in a clean way and other ways of obtaining the same data are</span>
<span class="quote">&gt; &gt; &gt;possible with hugetlb_cgroup.  I&#39;m not sure how successful you&#39;d be in</span>
<span class="quote">&gt; &gt; &gt;arguing that we need separate rss counters for it.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; If I want to track hugetlb usage on a per-task basis, do I then need to</span>
<span class="quote">&gt; &gt; create one cgroup per task?</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; For example, suppose I have many tasks using hugetlb and the global pool</span>
<span class="quote">&gt; &gt; is getting low on free pages.  It might be useful to know which tasks are</span>
<span class="quote">&gt; &gt; using hugetlb pages, and how many they are using.</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; I don&#39;t actually have this need (I think), but it appears to be what</span>
<span class="quote">&gt; &gt; Jörn is asking for.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; One possible way to get hugetlb metric in per-task basis is to walk page</span>
<span class="quote">&gt; table via /proc/pid/pagemap, and counting page flags for each mapped page</span>
<span class="quote">&gt; (we can easily do this with tools/vm/page-types.c like &quot;page-types -p &lt;PID&gt;</span>
<span class="quote">&gt; -b huge&quot;). This is obviously slower than just storing the counter as</span>
<span class="quote">&gt; in-kernel data and just exporting it, but might be useful in some situation.</span>

BTW, currently smaps doesn&#39;t report any meaningful info for vma(VM_HUGETLB).
I wrote the following patch, which hopefully is helpful for your purpose.

Thanks,
Naoya Horiguchi

---
<span class="from">From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
Subject: [PATCH] smaps: fill missing fields for vma(VM_HUGETLB)

Currently smaps reports many zero fields for vma(VM_HUGETLB), which is
inconvenient when we want to know per-task or per-vma base hugetlb usage.
This patch enables these fields by introducing smaps_hugetlb_range().

before patch:

  Size:              20480 kB
  Rss:                   0 kB
  Pss:                   0 kB
  Shared_Clean:          0 kB
  Shared_Dirty:          0 kB
  Private_Clean:         0 kB
  Private_Dirty:         0 kB
  Referenced:            0 kB
  Anonymous:             0 kB
  AnonHugePages:         0 kB
  Swap:                  0 kB
  KernelPageSize:     2048 kB
  MMUPageSize:        2048 kB
  Locked:                0 kB
  VmFlags: rd wr mr mw me de ht

after patch:

  Size:              20480 kB
  Rss:               18432 kB
  Pss:               18432 kB
  Shared_Clean:          0 kB
  Shared_Dirty:          0 kB
  Private_Clean:         0 kB
  Private_Dirty:     18432 kB
  Referenced:        18432 kB
  Anonymous:         18432 kB
  AnonHugePages:         0 kB
  Swap:                  0 kB
  KernelPageSize:     2048 kB
  MMUPageSize:        2048 kB
  Locked:                0 kB
  VmFlags: rd wr mr mw me de ht
<span class="signed-off-by">
Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
---
 fs/proc/task_mmu.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

-- 
2.4.3
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137441">Jörn Engel</a> - Aug. 4, 2015, 6:21 p.m.</div>
<pre class="content">
On Tue, Aug 04, 2015 at 05:13:39AM +0000, Naoya Horiguchi wrote:
<span class="quote">&gt; On Tue, Aug 04, 2015 at 02:55:30AM +0000, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; One possible way to get hugetlb metric in per-task basis is to walk page</span>
<span class="quote">&gt; &gt; table via /proc/pid/pagemap, and counting page flags for each mapped page</span>
<span class="quote">&gt; &gt; (we can easily do this with tools/vm/page-types.c like &quot;page-types -p &lt;PID&gt;</span>
<span class="quote">&gt; &gt; -b huge&quot;). This is obviously slower than just storing the counter as</span>
<span class="quote">&gt; &gt; in-kernel data and just exporting it, but might be useful in some situation.</span>

Maybe.  The current situation is a mess and I don&#39;t know the best way
out of it yet.
<span class="quote">
&gt; BTW, currently smaps doesn&#39;t report any meaningful info for vma(VM_HUGETLB).</span>
<span class="quote">&gt; I wrote the following patch, which hopefully is helpful for your purpose.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Naoya Horiguchi</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Subject: [PATCH] smaps: fill missing fields for vma(VM_HUGETLB)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Currently smaps reports many zero fields for vma(VM_HUGETLB), which is</span>
<span class="quote">&gt; inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; This patch enables these fields by introducing smaps_hugetlb_range().</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; before patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; after patch:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:               18432 kB</span>
<span class="quote">&gt;   Pss:               18432 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:     18432 kB</span>
<span class="quote">&gt;   Referenced:        18432 kB</span>
<span class="quote">&gt;   Anonymous:         18432 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>

Nice!
<span class="quote">
&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  fs/proc/task_mmu.c | 27 +++++++++++++++++++++++++++</span>
<span class="quote">&gt;  1 file changed, 27 insertions(+)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index ca1e091881d4..c7218603306d 100644</span>
<span class="quote">&gt; --- a/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ b/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -610,12 +610,39 @@ static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt;  	seq_putc(m, &#39;\n&#39;);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt; +				 unsigned long addr, unsigned long end,</span>
<span class="quote">&gt; +				 struct mm_walk *walk)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mem_size_stats *mss = walk-&gt;private;</span>
<span class="quote">&gt; +	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="quote">&gt; +	struct page *page = NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (pte_present(*pte)) {</span>
<span class="quote">&gt; +		page = vm_normal_page(vma, addr, *pte);</span>
<span class="quote">&gt; +	} else if (is_swap_pte(*pte)) {</span>
<span class="quote">&gt; +		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (is_migration_entry(swpent))</span>
<span class="quote">&gt; +			page = migration_entry_to_page(swpent);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	if (page)</span>
<span class="quote">&gt; +		smaps_account(mss, page, huge_page_size(hstate_vma(vma)),</span>
<span class="quote">&gt; +			      pte_young(*pte), pte_dirty(*pte));</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct vm_area_struct *vma = v;</span>
<span class="quote">&gt;  	struct mem_size_stats mss;</span>
<span class="quote">&gt;  	struct mm_walk smaps_walk = {</span>
<span class="quote">&gt;  		.pmd_entry = smaps_pte_range,</span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +		.hugetlb_entry = smaps_hugetlb_range,</span>
<span class="quote">&gt; +#endif</span>

Not too fond of the #ifdef.  But I won&#39;t blame you, as there already is
an example of the same and - worse - a contradicting example that
unconditionally assigns and moved the #ifdef elsewhere.

Hugetlb is the unloved stepchild with 13 years of neglect and
half-measures.  It shows.

Patch looks good to me.
<span class="acked-by">
Acked-by: Jörn Engel &lt;joern@logfs.org&gt;</span>

Jörn

--
Functionality is an asset, but code is a liability.
--Ted Dziuba
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Aug. 6, 2015, 2:18 a.m.</div>
<pre class="content">
On Tue, 4 Aug 2015, Jörn Engel wrote:
<span class="quote">
&gt; &gt; From: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; Subject: [PATCH] smaps: fill missing fields for vma(VM_HUGETLB)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Currently smaps reports many zero fields for vma(VM_HUGETLB), which is</span>
<span class="quote">&gt; &gt; inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; &gt; This patch enables these fields by introducing smaps_hugetlb_range().</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; before patch:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   Size:              20480 kB</span>
<span class="quote">&gt; &gt;   Rss:                   0 kB</span>
<span class="quote">&gt; &gt;   Pss:                   0 kB</span>
<span class="quote">&gt; &gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt; &gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt; &gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt;   Referenced:            0 kB</span>
<span class="quote">&gt; &gt;   Anonymous:             0 kB</span>
<span class="quote">&gt; &gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt;   Swap:                  0 kB</span>
<span class="quote">&gt; &gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt; &gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt; &gt;   Locked:                0 kB</span>
<span class="quote">&gt; &gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; after patch:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   Size:              20480 kB</span>
<span class="quote">&gt; &gt;   Rss:               18432 kB</span>
<span class="quote">&gt; &gt;   Pss:               18432 kB</span>
<span class="quote">&gt; &gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt; &gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt; &gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt;   Private_Dirty:     18432 kB</span>
<span class="quote">&gt; &gt;   Referenced:        18432 kB</span>
<span class="quote">&gt; &gt;   Anonymous:         18432 kB</span>
<span class="quote">&gt; &gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt;   Swap:                  0 kB</span>
<span class="quote">&gt; &gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt; &gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt; &gt;   Locked:                0 kB</span>
<span class="quote">&gt; &gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Nice!</span>
<span class="quote">&gt; </span>

Hmm, wouldn&#39;t this be confusing since VmRSS in /proc/pid/status doesn&#39;t 
match the rss shown in smaps, since hugetlb mappings aren&#39;t accounted in 
get_mm_rss()?

Not sure this is a good idea, I think consistency amongst rss values would 
be more important.
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 6, 2015, 7:44 a.m.</div>
<pre class="content">
On Wed, Aug 05, 2015 at 07:18:44PM -0700, David Rientjes wrote:
...
<span class="quote">&gt; Hmm, wouldn&#39;t this be confusing since VmRSS in /proc/pid/status doesn&#39;t </span>
<span class="quote">&gt; match the rss shown in smaps, since hugetlb mappings aren&#39;t accounted in </span>
<span class="quote">&gt; get_mm_rss()?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Not sure this is a good idea, I think consistency amongst rss values would </span>
<span class="quote">&gt; be more important.</span>

Right, so one option is making get_mm_rss() count hugetlb, but that could
make oom/memcg less efficient or broken as you stated in a previous email.
So another one is to add &quot;VmHugetlbRSS:&quot; field in /proc/pid/status?

Thanks,
Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 7, 2015, 7:24 a.m.</div>
<pre class="content">
I wrote patches to export hugetlb usage info via /proc/pid/{smaps,status}.
In this version, I added patch 2 for /proc/pid/status to deal with the
inconsistency concern from David (thanks for the comment).

Thanks,
Naoya Horiguchi
---
Summary:

Naoya Horiguchi (2):
      smaps: fill missing fields for vma(VM_HUGETLB)
      mm: hugetlb: add VmHugetlbRSS: field in /proc/pid/status

 fs/proc/task_mmu.c       | 32 +++++++++++++++++++++++++++++++-
 include/linux/hugetlb.h  | 18 ++++++++++++++++++
 include/linux/mm.h       |  3 +++
 include/linux/mm_types.h |  3 +++
 mm/hugetlb.c             |  9 +++++++++
 mm/memory.c              |  4 ++--
 mm/rmap.c                |  4 +++-
 7 files changed, 69 insertions(+), 4 deletions(-)
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=41">Andrew Morton</a> - Aug. 7, 2015, 10:55 p.m.</div>
<pre class="content">
On Fri, 7 Aug 2015 07:24:50 +0000 Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt; wrote:
<span class="quote">
&gt; Currently there&#39;s no easy way to get per-process usage of hugetlb pages, which</span>
<span class="quote">&gt; is inconvenient because applications which use hugetlb typically want to control</span>
<span class="quote">&gt; their processes on the basis of how much memory (including hugetlb) they use.</span>
<span class="quote">&gt; So this patch simply provides easy access to the info via /proc/pid/status.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; This patch shouldn&#39;t change the OOM behavior (so hugetlb usage is ignored as</span>
<span class="quote">&gt; is now,) which I guess is fine until we have some strong reason to do it.</span>
<span class="quote">&gt; </span>

A procfs change triggers a documentation change.  Always, please. 
Documentation/filesystems/proc.txt is the place.
<span class="quote">
&gt;</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -504,6 +519,9 @@ static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	return &amp;mm-&gt;page_table_lock;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +#define get_hugetlb_rss(mm)	0</span>
<span class="quote">&gt; +#define mod_hugetlb_rss(mm, value)	do {} while (0)</span>

I don&#39;t think these have to be macros?  inline functions are nicer in
several ways: more readable, more likely to be documented, can prevent
unused variable warnings.
<span class="quote">
&gt;  #endif	/* CONFIG_HUGETLB_PAGE */</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  static inline spinlock_t *huge_pte_lock(struct hstate *h,</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; ...</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; --- v4.2-rc4.orig/mm/memory.c</span>
<span class="quote">&gt; +++ v4.2-rc4/mm/memory.c</span>
<span class="quote">&gt; @@ -620,12 +620,12 @@ int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)</span>
<span class="quote">&gt;  	return 0;</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline void init_rss_vec(int *rss)</span>
<span class="quote">&gt; +inline void init_rss_vec(int *rss)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	memset(rss, 0, sizeof(int) * NR_MM_COUNTERS);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; -static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
<span class="quote">&gt; +inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	int i;</span>

The inlines are a bit odd, but this does save ~10 bytes in memory.o for
some reason.


--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 10, 2015, 12:47 a.m.</div>
<pre class="content">
On Fri, Aug 07, 2015 at 03:55:37PM -0700, Andrew Morton wrote:
<span class="quote">&gt; On Fri, 7 Aug 2015 07:24:50 +0000 Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt; wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Currently there&#39;s no easy way to get per-process usage of hugetlb pages, which</span>
<span class="quote">&gt; &gt; is inconvenient because applications which use hugetlb typically want to control</span>
<span class="quote">&gt; &gt; their processes on the basis of how much memory (including hugetlb) they use.</span>
<span class="quote">&gt; &gt; So this patch simply provides easy access to the info via /proc/pid/status.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; This patch shouldn&#39;t change the OOM behavior (so hugetlb usage is ignored as</span>
<span class="quote">&gt; &gt; is now,) which I guess is fine until we have some strong reason to do it.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; A procfs change triggers a documentation change.  Always, please. </span>
<span class="quote">&gt; Documentation/filesystems/proc.txt is the place.</span>

OK, I&#39;ll do this.
<span class="quote">
&gt; &gt;</span>
<span class="quote">&gt; &gt; ...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; @@ -504,6 +519,9 @@ static inline spinlock_t *huge_pte_lockptr(struct hstate *h,</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	return &amp;mm-&gt;page_table_lock;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt; +</span>
<span class="quote">&gt; &gt; +#define get_hugetlb_rss(mm)	0</span>
<span class="quote">&gt; &gt; +#define mod_hugetlb_rss(mm, value)	do {} while (0)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; I don&#39;t think these have to be macros?  inline functions are nicer in</span>
<span class="quote">&gt; several ways: more readable, more likely to be documented, can prevent</span>
<span class="quote">&gt; unused variable warnings.</span>

Right, I&#39;ll use inline functions.
<span class="quote">
&gt; &gt;  #endif	/* CONFIG_HUGETLB_PAGE */</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  static inline spinlock_t *huge_pte_lock(struct hstate *h,</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; ...</span>
<span class="quote">&gt; &gt;</span>
<span class="quote">&gt; &gt; --- v4.2-rc4.orig/mm/memory.c</span>
<span class="quote">&gt; &gt; +++ v4.2-rc4/mm/memory.c</span>
<span class="quote">&gt; &gt; @@ -620,12 +620,12 @@ int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)</span>
<span class="quote">&gt; &gt;  	return 0;</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -static inline void init_rss_vec(int *rss)</span>
<span class="quote">&gt; &gt; +inline void init_rss_vec(int *rss)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	memset(rss, 0, sizeof(int) * NR_MM_COUNTERS);</span>
<span class="quote">&gt; &gt;  }</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt; -static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
<span class="quote">&gt; &gt; +inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)</span>
<span class="quote">&gt; &gt;  {</span>
<span class="quote">&gt; &gt;  	int i;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; The inlines are a bit odd, but this does save ~10 bytes in memory.o for</span>
<span class="quote">&gt; some reason.</span>

so I&#39;ll keep going with this.

Thanks,
Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Aug. 11, 2015, 12:44 a.m.</div>
<pre class="content">
On Mon, 10 Aug 2015, Naoya Horiguchi wrote:
<span class="quote">
&gt; diff --git v4.2-rc4.orig/Documentation/filesystems/proc.txt v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; index 6f7fafde0884..cb8565e150ed 100644</span>
<span class="quote">&gt; --- v4.2-rc4.orig/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; +++ v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; @@ -168,6 +168,7 @@ For example, to get the status information of a process, all you have to do is</span>
<span class="quote">&gt;    VmLck:         0 kB</span>
<span class="quote">&gt;    VmHWM:       476 kB</span>
<span class="quote">&gt;    VmRSS:       476 kB</span>
<span class="quote">&gt; +  VmHugetlbRSS:  0 kB</span>
<span class="quote">&gt;    VmData:      156 kB</span>
<span class="quote">&gt;    VmStk:        88 kB</span>
<span class="quote">&gt;    VmExe:        68 kB</span>
<span class="quote">&gt; @@ -230,6 +231,7 @@ Table 1-2: Contents of the status files (as of 4.1)</span>
<span class="quote">&gt;   VmLck                       locked memory size</span>
<span class="quote">&gt;   VmHWM                       peak resident set size (&quot;high water mark&quot;)</span>
<span class="quote">&gt;   VmRSS                       size of memory portions</span>
<span class="quote">&gt; + VmHugetlbRSS                size of hugetlb memory portions</span>
<span class="quote">&gt;   VmData                      size of data, stack, and text segments</span>
<span class="quote">&gt;   VmStk                       size of data, stack, and text segments</span>
<span class="quote">&gt;   VmExe                       size of text segment</span>
<span class="quote">&gt; @@ -440,8 +442,12 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; -swap.</span>
<span class="quote">&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt; +Since 4.3, &quot;RSS&quot; contains the amount of mappings for hugetlb pages. Although</span>
<span class="quote">&gt; +RSS of hugetlb mappings is maintained separately from normal mappings</span>
<span class="quote">&gt; +(displayed in &quot;VmHugetlbRSS&quot; field of /proc/PID/status,) /proc/PID/smaps shows</span>
<span class="quote">&gt; +both mappings in &quot;RSS&quot; field. Userspace applications clearly distinguish the</span>
<span class="quote">&gt; +type of mapping with &#39;ht&#39; flag in &quot;VmFlags&quot; field.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  &quot;VmFlags&quot; field deserves a separate description. This member represents the kernel</span>
<span class="quote">&gt;  flags associated with the particular virtual memory area in two letter encoded</span>

My objection to adding hugetlb memory to the RSS field of /proc/pid/smaps 
still stands and can be addressed in the thread of the first patch.  Since 
this includes wording that describes that change, then the objection would 
also cover that.

With regard to adding VmHugetlbRSS, I think the change is fine, and I 
appreciate that you call it VmHugetlbRSS and not VmHugeRSS since that 
would be confused with thp.

My only concern regarding VmHugetlbRSS would be extendability and whether 
we will eventually, or even today, want to differentiate between various 
hugetlb page sizes.  For example, if 1GB hugetlb pages on x86 are a 
precious resource, then how do I determine which process has mapped it 
rather than 512 2MB hugetlb pages?
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Aug. 12, 2015, 12:03 a.m.</div>
<pre class="content">
On Mon, Aug 10, 2015 at 05:44:54PM -0700, David Rientjes wrote:
<span class="quote">&gt; On Mon, 10 Aug 2015, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; diff --git v4.2-rc4.orig/Documentation/filesystems/proc.txt v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; index 6f7fafde0884..cb8565e150ed 100644</span>
<span class="quote">&gt; &gt; --- v4.2-rc4.orig/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; +++ v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; @@ -168,6 +168,7 @@ For example, to get the status information of a process, all you have to do is</span>
<span class="quote">&gt; &gt;    VmLck:         0 kB</span>
<span class="quote">&gt; &gt;    VmHWM:       476 kB</span>
<span class="quote">&gt; &gt;    VmRSS:       476 kB</span>
<span class="quote">&gt; &gt; +  VmHugetlbRSS:  0 kB</span>
<span class="quote">&gt; &gt;    VmData:      156 kB</span>
<span class="quote">&gt; &gt;    VmStk:        88 kB</span>
<span class="quote">&gt; &gt;    VmExe:        68 kB</span>
<span class="quote">&gt; &gt; @@ -230,6 +231,7 @@ Table 1-2: Contents of the status files (as of 4.1)</span>
<span class="quote">&gt; &gt;   VmLck                       locked memory size</span>
<span class="quote">&gt; &gt;   VmHWM                       peak resident set size (&quot;high water mark&quot;)</span>
<span class="quote">&gt; &gt;   VmRSS                       size of memory portions</span>
<span class="quote">&gt; &gt; + VmHugetlbRSS                size of hugetlb memory portions</span>
<span class="quote">&gt; &gt;   VmData                      size of data, stack, and text segments</span>
<span class="quote">&gt; &gt;   VmStk                       size of data, stack, and text segments</span>
<span class="quote">&gt; &gt;   VmExe                       size of text segment</span>
<span class="quote">&gt; &gt; @@ -440,8 +442,12 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt; &gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt; &gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt; &gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; &gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; &gt; -swap.</span>
<span class="quote">&gt; &gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt; &gt; +Since 4.3, &quot;RSS&quot; contains the amount of mappings for hugetlb pages. Although</span>
<span class="quote">&gt; &gt; +RSS of hugetlb mappings is maintained separately from normal mappings</span>
<span class="quote">&gt; &gt; +(displayed in &quot;VmHugetlbRSS&quot; field of /proc/PID/status,) /proc/PID/smaps shows</span>
<span class="quote">&gt; &gt; +both mappings in &quot;RSS&quot; field. Userspace applications clearly distinguish the</span>
<span class="quote">&gt; &gt; +type of mapping with &#39;ht&#39; flag in &quot;VmFlags&quot; field.</span>
<span class="quote">&gt; &gt;  </span>
<span class="quote">&gt; &gt;  &quot;VmFlags&quot; field deserves a separate description. This member represents the kernel</span>
<span class="quote">&gt; &gt;  flags associated with the particular virtual memory area in two letter encoded</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; My objection to adding hugetlb memory to the RSS field of /proc/pid/smaps </span>
<span class="quote">&gt; still stands and can be addressed in the thread of the first patch.  Since </span>
<span class="quote">&gt; this includes wording that describes that change, then the objection would </span>
<span class="quote">&gt; also cover that.</span>

OK, I&#39;ll update this in accordance with the change on the first patch.
<span class="quote">
&gt; With regard to adding VmHugetlbRSS, I think the change is fine, and I </span>
<span class="quote">&gt; appreciate that you call it VmHugetlbRSS and not VmHugeRSS since that </span>
<span class="quote">&gt; would be confused with thp.</span>

I plan to rename the field, then the new name will/should be unconfusing
between thp and hugetlb.
<span class="quote">
&gt; My only concern regarding VmHugetlbRSS would be extendability and whether </span>
<span class="quote">&gt; we will eventually, or even today, want to differentiate between various </span>
<span class="quote">&gt; hugetlb page sizes.  For example, if 1GB hugetlb pages on x86 are a </span>
<span class="quote">&gt; precious resource, then how do I determine which process has mapped it </span>
<span class="quote">&gt; rather than 512 2MB hugetlb pages?</span>

&quot;KernelPageSize&quot; field in /proc/PID/smaps is aware of hugetlb page sizes,
so I expected userspace to detect the size itself. But /proc/PID/status shows
only proccess-wide info, so userspace applications must read both of these
files to know the usage per hugepage size, which might be inconvenient.

One idea is to show the new field like &quot;VmHugetlbRSS: 2x512kB 1x1GB&quot; for
both of /proc/PID/{status,smaps}, which passes the full hugetlb info in a
single line so easier to parse and process. Or some other fields shows in
&quot;kB&quot;, so &quot;VmHugetlbRSS: 1052672 kB (2x512kB 1x1GB)&quot; is possible for human
readability.

Thank you very much for the feedback, I&#39;ll repost soon, but any additional
comment is appreciated.

Naoya
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=137061">Michal Hocko</a> - Aug. 20, 2015, 10:49 a.m.</div>
<pre class="content">
On Thu 20-08-15 08:26:26, Naoya Horiguchi wrote:
<span class="quote">&gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>

I have only now got to this thread. This is indeed very helpful. I would
just suggest to update Documentation/filesystems/proc.txt to be explicit
that Rss: doesn&#39;t count hugetlb pages for historical reasons.
<span class="quote"> 
&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="acked-by">
Acked-by: Michal Hocko &lt;mhocko@suse.cz&gt;</span>
<span class="quote">
&gt; ---</span>
<span class="quote">&gt; v3 -&gt; v4:</span>
<span class="quote">&gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt;   info.</span>
<span class="quote">&gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt;  Referenced:          892 kB</span>
<span class="quote">&gt;  Anonymous:             0 kB</span>
<span class="quote">&gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt;  Swap:                  0 kB</span>
<span class="quote">&gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; -swap.</span>
<span class="quote">&gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt;  &quot;VmFlags&quot; field deserves a separate description. This member represents the kernel</span>
<span class="quote">&gt;  flags associated with the particular virtual memory area in two letter encoded</span>
<span class="quote">&gt; diff --git v4.2-rc4/fs/proc/task_mmu.c v4.2-rc4_patched/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index ca1e091881d4..2c37938b82ee 100644</span>
<span class="quote">&gt; --- v4.2-rc4/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ v4.2-rc4_patched/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -445,6 +445,7 @@ struct mem_size_stats {</span>
<span class="quote">&gt;  	unsigned long anonymous;</span>
<span class="quote">&gt;  	unsigned long anonymous_thp;</span>
<span class="quote">&gt;  	unsigned long swap;</span>
<span class="quote">&gt; +	unsigned long hugetlb;</span>
<span class="quote">&gt;  	u64 pss;</span>
<span class="quote">&gt;  };</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; @@ -610,12 +611,38 @@ static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt;  	seq_putc(m, &#39;\n&#39;);</span>
<span class="quote">&gt;  }</span>
<span class="quote">&gt;  </span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt; +				 unsigned long addr, unsigned long end,</span>
<span class="quote">&gt; +				 struct mm_walk *walk)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mem_size_stats *mss = walk-&gt;private;</span>
<span class="quote">&gt; +	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="quote">&gt; +	struct page *page = NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (pte_present(*pte)) {</span>
<span class="quote">&gt; +		page = vm_normal_page(vma, addr, *pte);</span>
<span class="quote">&gt; +	} else if (is_swap_pte(*pte)) {</span>
<span class="quote">&gt; +		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (is_migration_entry(swpent))</span>
<span class="quote">&gt; +			page = migration_entry_to_page(swpent);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	if (page)</span>
<span class="quote">&gt; +		mss-&gt;hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;  static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  {</span>
<span class="quote">&gt;  	struct vm_area_struct *vma = v;</span>
<span class="quote">&gt;  	struct mem_size_stats mss;</span>
<span class="quote">&gt;  	struct mm_walk smaps_walk = {</span>
<span class="quote">&gt;  		.pmd_entry = smaps_pte_range,</span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +		.hugetlb_entry = smaps_hugetlb_range,</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;  		.mm = vma-&gt;vm_mm,</span>
<span class="quote">&gt;  		.private = &amp;mss,</span>
<span class="quote">&gt;  	};</span>
<span class="quote">&gt; @@ -637,6 +664,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="quote">&gt;  		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="quote">&gt;  		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;HugetlbPages:   %8lu kB\n&quot;</span>
<span class="quote">&gt;  		   &quot;Swap:           %8lu kB\n&quot;</span>
<span class="quote">&gt;  		   &quot;KernelPageSize: %8lu kB\n&quot;</span>
<span class="quote">&gt;  		   &quot;MMUPageSize:    %8lu kB\n&quot;</span>
<span class="quote">&gt; @@ -651,6 +679,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;  		   mss.referenced &gt;&gt; 10,</span>
<span class="quote">&gt;  		   mss.anonymous &gt;&gt; 10,</span>
<span class="quote">&gt;  		   mss.anonymous_thp &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss.hugetlb &gt;&gt; 10,</span>
<span class="quote">&gt;  		   mss.swap &gt;&gt; 10,</span>
<span class="quote">&gt;  		   vma_kernel_pagesize(vma) &gt;&gt; 10,</span>
<span class="quote">&gt;  		   vma_mmu_pagesize(vma) &gt;&gt; 10,</span>
<span class="quote">&gt; -- </span>
<span class="quote">&gt; 2.4.3</span>
<span class="quote">&gt; N?????r??y????b?X???v?^?)?{.n?+????{????zX?????}????z?&amp;j:+v???????zZ+??+zf???h???~????i???z??w?????????&amp;?)?f??^j?y?m??@A?a???0??h???i</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4164">PÃ¡draig Brady</a> - Sept. 7, 2015, 1:29 a.m.</div>
<pre class="content">
On 20/08/15 09:26, Naoya Horiguchi wrote:
<span class="quote">&gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt; </span>
<span class="quote">&gt;   Size:              20480 kB</span>
<span class="quote">&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;   Locked:                0 kB</span>
<span class="quote">&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt; v3 -&gt; v4:</span>
<span class="quote">&gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt;   info.</span>
<span class="quote">&gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt;  Referenced:          892 kB</span>
<span class="quote">&gt;  Anonymous:             0 kB</span>
<span class="quote">&gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt;  Swap:                  0 kB</span>
<span class="quote">&gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; -swap.</span>
<span class="quote">&gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>

There is no distinction between &quot;private&quot; and &quot;shared&quot; in this &quot;huge page&quot; accounting right?
Would it be possible to account for the huge pages in the {Private,Shared}_{Clean,Dirty} fields?
Or otherwise split the huge page accounting into shared/private?

thanks!
Pádraig.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Sept. 7, 2015, 2:23 a.m.</div>
<pre class="content">
On Mon, Sep 07, 2015 at 02:29:53AM +0100, Pádraig Brady wrote:
<span class="quote">&gt; On 20/08/15 09:26, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; &gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; &gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;   Size:              20480 kB</span>
<span class="quote">&gt; &gt;   Rss:                   0 kB</span>
<span class="quote">&gt; &gt;   Pss:                   0 kB</span>
<span class="quote">&gt; &gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt; &gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt; &gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt;   Referenced:            0 kB</span>
<span class="quote">&gt; &gt;   Anonymous:             0 kB</span>
<span class="quote">&gt; &gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt; &gt;   Swap:                  0 kB</span>
<span class="quote">&gt; &gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt; &gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt; &gt;   Locked:                0 kB</span>
<span class="quote">&gt; &gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; &gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt; v3 -&gt; v4:</span>
<span class="quote">&gt; &gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt; &gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt; &gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt; &gt;   info.</span>
<span class="quote">&gt; &gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt; &gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt; &gt; ---</span>
<span class="quote">&gt; &gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt; &gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt; &gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt;  Referenced:          892 kB</span>
<span class="quote">&gt; &gt;  Anonymous:             0 kB</span>
<span class="quote">&gt; &gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt; &gt;  Swap:                  0 kB</span>
<span class="quote">&gt; &gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt; &gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt; &gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt; &gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt; &gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt; &gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; &gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; &gt; -swap.</span>
<span class="quote">&gt; &gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt; &gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt; &gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; There is no distinction between &quot;private&quot; and &quot;shared&quot; in this &quot;huge page&quot; accounting right?</span>

Right for current version. And I think that private/shared distinction
gives some help.
<span class="quote">
&gt; Would it be possible to account for the huge pages in the {Private,Shared}_{Clean,Dirty} fields?</span>
<span class="quote">&gt; Or otherwise split the huge page accounting into shared/private?</span>

As for clean/dirty distinction, I&#39;m not sure how it&#39;s worthwhile because
hugetlb pages are always on memory and never swapped out (userspace doesn&#39;t
care about dirtiness of hugetlb?).

According to commit log of commit b4d1d99fdd8b (&quot;hugetlb: handle updating
of ACCESSED and DIRTY in hugetlb_fault()&quot;), dirty bit of hugetlb is maintained
to make arch-specific TLB handling convenient. It looks purely kernel-internal,
so I think we don&#39;t have to expose it.

Thanks,
Naoya Horiguchi
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Sept. 7, 2015, 6:46 a.m.</div>
<pre class="content">
On Mon, Sep 07, 2015 at 02:23:44AM +0000, Horiguchi Naoya(?? ??) wrote:
<span class="quote">&gt; On Mon, Sep 07, 2015 at 02:29:53AM +0100, Pádraig Brady wrote:</span>
<span class="quote">&gt; &gt; On 20/08/15 09:26, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; &gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; &gt; &gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; &gt; &gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt;   Size:              20480 kB</span>
<span class="quote">&gt; &gt; &gt;   Rss:                   0 kB</span>
<span class="quote">&gt; &gt; &gt;   Pss:                   0 kB</span>
<span class="quote">&gt; &gt; &gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt; &gt; &gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt; &gt; &gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt; &gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt; &gt;   Referenced:            0 kB</span>
<span class="quote">&gt; &gt; &gt;   Anonymous:             0 kB</span>
<span class="quote">&gt; &gt; &gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt; &gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt; &gt; &gt;   Swap:                  0 kB</span>
<span class="quote">&gt; &gt; &gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt; &gt; &gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt; &gt; &gt;   Locked:                0 kB</span>
<span class="quote">&gt; &gt; &gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; &gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; &gt; &gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt; &gt; &gt; ---</span>
<span class="quote">&gt; &gt; &gt; v3 -&gt; v4:</span>
<span class="quote">&gt; &gt; &gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt; &gt; &gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt; &gt; &gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt; &gt; &gt;   info.</span>
<span class="quote">&gt; &gt; &gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt; &gt; &gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt; &gt; &gt; ---</span>
<span class="quote">&gt; &gt; &gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt; &gt; &gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt; &gt; &gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt; &gt; &gt; </span>
<span class="quote">&gt; &gt; &gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; &gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt; &gt; &gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; &gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; &gt; &gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt; &gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt; &gt;  Referenced:          892 kB</span>
<span class="quote">&gt; &gt; &gt;  Anonymous:             0 kB</span>
<span class="quote">&gt; &gt; &gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt; &gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt; &gt; &gt;  Swap:                  0 kB</span>
<span class="quote">&gt; &gt; &gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt; &gt; &gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt; &gt; &gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt; &gt; &gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt; &gt; &gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt; &gt; &gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; &gt; &gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; &gt; &gt; -swap.</span>
<span class="quote">&gt; &gt; &gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt; &gt; &gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt; &gt; &gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; There is no distinction between &quot;private&quot; and &quot;shared&quot; in this &quot;huge page&quot; accounting right?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Right for current version. And I think that private/shared distinction</span>
<span class="quote">&gt; gives some help.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; &gt; Would it be possible to account for the huge pages in the {Private,Shared}_{Clean,Dirty} fields?</span>
<span class="quote">&gt; &gt; Or otherwise split the huge page accounting into shared/private?</span>

Sorry, I didn&#39;t catch you properly.
I think that accounting for hugetlb pages should be done only with HugetlbPages
or any other new field for hugetlb, in order not to break the behavior of existing
fields. So splitting HugetlbPages into shared/private looks good to me.

Thanks,
Naoya Horiguchi
<span class="quote">
&gt; As for clean/dirty distinction, I&#39;m not sure how it&#39;s worthwhile because</span>
<span class="quote">&gt; hugetlb pages are always on memory and never swapped out (userspace doesn&#39;t</span>
<span class="quote">&gt; care about dirtiness of hugetlb?).</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; According to commit log of commit b4d1d99fdd8b (&quot;hugetlb: handle updating</span>
<span class="quote">&gt; of ACCESSED and DIRTY in hugetlb_fault()&quot;), dirty bit of hugetlb is maintained</span>
<span class="quote">&gt; to make arch-specific TLB handling convenient. It looks purely kernel-internal,</span>
<span class="quote">&gt; so I think we don&#39;t have to expose it.</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Thanks,</span>
<span class="quote">&gt; Naoya Horiguchi</span>
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4164">PÃ¡draig Brady</a> - Sept. 7, 2015, 9:52 a.m.</div>
<pre class="content">
On 07/09/15 07:46, Naoya Horiguchi wrote:
<span class="quote">&gt; On Mon, Sep 07, 2015 at 02:23:44AM +0000, Horiguchi Naoya(?? ??) wrote:</span>
<span class="quote">&gt;&gt; On Mon, Sep 07, 2015 at 02:29:53AM +0100, Pádraig Brady wrote:</span>
<span class="quote">&gt;&gt;&gt; On 20/08/15 09:26, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt;&gt;&gt;&gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt;&gt;&gt;&gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;   Size:              20480 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   Locked:                0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt; v3 -&gt; v4:</span>
<span class="quote">&gt;&gt;&gt;&gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt;&gt;&gt;&gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt;&gt;&gt;&gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt;&gt;&gt;&gt;   info.</span>
<span class="quote">&gt;&gt;&gt;&gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt;&gt;&gt;&gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt;&gt;&gt;&gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;&gt;&gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt;&gt;&gt;&gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  Referenced:          892 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  Anonymous:             0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  Swap:                  0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt;&gt;&gt;&gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;&gt;&gt;&gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;&gt;&gt;&gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;&gt;&gt;&gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt;&gt;&gt;&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt;&gt;&gt;&gt; -swap.</span>
<span class="quote">&gt;&gt;&gt;&gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt;&gt;&gt;&gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt;&gt;&gt;&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; There is no distinction between &quot;private&quot; and &quot;shared&quot; in this &quot;huge page&quot; accounting right?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Right for current version. And I think that private/shared distinction</span>
<span class="quote">&gt;&gt; gives some help.</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Would it be possible to account for the huge pages in the {Private,Shared}_{Clean,Dirty} fields?</span>
<span class="quote">&gt;&gt;&gt; Or otherwise split the huge page accounting into shared/private?</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry, I didn&#39;t catch you properly.</span>
<span class="quote">&gt; I think that accounting for hugetlb pages should be done only with HugetlbPages</span>
<span class="quote">&gt; or any other new field for hugetlb, in order not to break the behavior of existing</span>
<span class="quote">&gt; fields. </span>

On a more general note I&#39;d be inclined to just account
for hugetlb pages in Rss and {Private,Shared}_Dirty
and fix any tools that double count.
<span class="quote">
&gt; So splitting HugetlbPages into shared/private looks good to me.</span>

Yes this is the most compatible solution,
and will allow one to accurately determine
how much core mem a process is using.

thanks!
Pádraig.

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4164">PÃ¡draig Brady</a> - Sept. 7, 2015, 10:52 a.m.</div>
<pre class="content">
On 07/09/15 10:52, Pádraig Brady wrote:
<span class="quote">&gt; On 07/09/15 07:46, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt; On Mon, Sep 07, 2015 at 02:23:44AM +0000, Horiguchi Naoya(?? ??) wrote:</span>
<span class="quote">&gt;&gt;&gt; On Mon, Sep 07, 2015 at 02:29:53AM +0100, Pádraig Brady wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt; On 20/08/15 09:26, Naoya Horiguchi wrote:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Size:              20480 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Rss:                   0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Pss:                   0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Shared_Clean:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Shared_Dirty:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Private_Clean:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Referenced:            0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   AnonHugePages:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   HugetlbPages:      18432 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   KernelPageSize:     2048 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   MMUPageSize:        2048 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   Locked:                0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; v3 -&gt; v4:</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   info.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;   AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; ---</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  Private_Dirty:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  Referenced:          892 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  Anonymous:             0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  Swap:                  0 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  KernelPageSize:        4 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  MMUPageSize:           4 kB</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt;  and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; -swap.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt;&gt;&gt;&gt;&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt;&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; There is no distinction between &quot;private&quot; and &quot;shared&quot; in this &quot;huge page&quot; accounting right?</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt; Right for current version. And I think that private/shared distinction</span>
<span class="quote">&gt;&gt;&gt; gives some help.</span>
<span class="quote">&gt;&gt;&gt;</span>
<span class="quote">&gt;&gt;&gt;&gt; Would it be possible to account for the huge pages in the {Private,Shared}_{Clean,Dirty} fields?</span>
<span class="quote">&gt;&gt;&gt;&gt; Or otherwise split the huge page accounting into shared/private?</span>
<span class="quote">&gt;&gt;</span>
<span class="quote">&gt;&gt; Sorry, I didn&#39;t catch you properly.</span>
<span class="quote">&gt;&gt; I think that accounting for hugetlb pages should be done only with HugetlbPages</span>
<span class="quote">&gt;&gt; or any other new field for hugetlb, in order not to break the behavior of existing</span>
<span class="quote">&gt;&gt; fields. </span>
<span class="quote">&gt; </span>
<span class="quote">&gt; On a more general note I&#39;d be inclined to just account</span>
<span class="quote">&gt; for hugetlb pages in Rss and {Private,Shared}_Dirty</span>
<span class="quote">&gt; and fix any tools that double count.</span>

By the same argument I presume the existing THP &quot;AnonHugePages&quot; smaps field
is not accounted for in the {Private,Shared}_... fields?
I.E. AnonHugePages may also benefit from splitting to Private/Shared?

thanks,
Pádraig.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=72672">Vlastimil Babka</a> - Sept. 9, 2015, 3:12 p.m.</div>
<pre class="content">
On 08/20/2015 10:26 AM, Naoya Horiguchi wrote:
<span class="quote">&gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;    Size:              20480 kB</span>
<span class="quote">&gt;    Rss:                   0 kB</span>
<span class="quote">&gt;    Pss:                   0 kB</span>
<span class="quote">&gt;    Shared_Clean:          0 kB</span>
<span class="quote">&gt;    Shared_Dirty:          0 kB</span>
<span class="quote">&gt;    Private_Clean:         0 kB</span>
<span class="quote">&gt;    Private_Dirty:         0 kB</span>
<span class="quote">&gt;    Referenced:            0 kB</span>
<span class="quote">&gt;    Anonymous:             0 kB</span>
<span class="quote">&gt;    AnonHugePages:         0 kB</span>
<span class="quote">&gt;    HugetlbPages:      18432 kB</span>
<span class="quote">&gt;    Swap:                  0 kB</span>
<span class="quote">&gt;    KernelPageSize:     2048 kB</span>
<span class="quote">&gt;    MMUPageSize:        2048 kB</span>
<span class="quote">&gt;    Locked:                0 kB</span>
<span class="quote">&gt;    VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>

Sorry for coming late to this thread. It&#39;s a nice improvement, but I 
find it somewhat illogical that the per-process stats (status) are more 
detailed than the per-mapping stats (smaps) with respect to the size 
breakdown. I would expect it to be the other way around. That would 
simplify the per-process accounting (I realize this has been a hot topic 
already), and allow those who really care to look at smaps.

I&#39;m just not sure about the format in that case. In smaps, a line per 
size would probably make more sense. Even in status, the extra 
information in parentheses looks somewhat out of place. But of course, 
adding shared/private breakdown as suggested would lead to an explosion 
of number of lines in that case...
<span class="quote">
&gt; ---</span>
<span class="quote">&gt; v3 -&gt; v4:</span>
<span class="quote">&gt; - suspend Acked-by tag because v3-&gt;v4 change is not trivial</span>
<span class="quote">&gt; - I stated in previous discussion that HugetlbPages line can contain page</span>
<span class="quote">&gt;    size info, but that&#39;s not necessary because we already have KernelPageSize</span>
<span class="quote">&gt;    info.</span>
<span class="quote">&gt; - merged documentation update, where the current documentation doesn&#39;t mention</span>
<span class="quote">&gt;    AnonHugePages, so it&#39;s also added.</span>
<span class="quote">&gt; ---</span>
<span class="quote">&gt;   Documentation/filesystems/proc.txt |  7 +++++--</span>
<span class="quote">&gt;   fs/proc/task_mmu.c                 | 29 +++++++++++++++++++++++++++++</span>
<span class="quote">&gt;   2 files changed, 34 insertions(+), 2 deletions(-)</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; diff --git v4.2-rc4/Documentation/filesystems/proc.txt v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; index 6f7fafde0884..22e40211ef64 100644</span>
<span class="quote">&gt; --- v4.2-rc4/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; +++ v4.2-rc4_patched/Documentation/filesystems/proc.txt</span>
<span class="quote">&gt; @@ -423,6 +423,8 @@ Private_Clean:         0 kB</span>
<span class="quote">&gt;   Private_Dirty:         0 kB</span>
<span class="quote">&gt;   Referenced:          892 kB</span>
<span class="quote">&gt;   Anonymous:             0 kB</span>
<span class="quote">&gt; +AnonHugePages:         0 kB</span>
<span class="quote">&gt; +HugetlbPages:          0 kB</span>
<span class="quote">&gt;   Swap:                  0 kB</span>
<span class="quote">&gt;   KernelPageSize:        4 kB</span>
<span class="quote">&gt;   MMUPageSize:           4 kB</span>
<span class="quote">&gt; @@ -440,8 +442,9 @@ indicates the amount of memory currently marked as referenced or accessed.</span>
<span class="quote">&gt;   &quot;Anonymous&quot; shows the amount of memory that does not belong to any file.  Even</span>
<span class="quote">&gt;   a mapping associated with a file may contain anonymous pages: when MAP_PRIVATE</span>
<span class="quote">&gt;   and a page is modified, the file page is replaced by a private anonymous copy.</span>
<span class="quote">&gt; -&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on</span>
<span class="quote">&gt; -swap.</span>
<span class="quote">&gt; +&quot;AnonHugePages&quot; shows the ammount of memory backed by transparent hugepage.</span>
<span class="quote">&gt; +&quot;HugetlbPages&quot; shows the ammount of memory backed by hugetlbfs page.</span>
<span class="quote">&gt; +&quot;Swap&quot; shows how much would-be-anonymous memory is also used, but out on swap.</span>
<span class="quote">&gt;</span>
<span class="quote">&gt;   &quot;VmFlags&quot; field deserves a separate description. This member represents the kernel</span>
<span class="quote">&gt;   flags associated with the particular virtual memory area in two letter encoded</span>
<span class="quote">&gt; diff --git v4.2-rc4/fs/proc/task_mmu.c v4.2-rc4_patched/fs/proc/task_mmu.c</span>
<span class="quote">&gt; index ca1e091881d4..2c37938b82ee 100644</span>
<span class="quote">&gt; --- v4.2-rc4/fs/proc/task_mmu.c</span>
<span class="quote">&gt; +++ v4.2-rc4_patched/fs/proc/task_mmu.c</span>
<span class="quote">&gt; @@ -445,6 +445,7 @@ struct mem_size_stats {</span>
<span class="quote">&gt;   	unsigned long anonymous;</span>
<span class="quote">&gt;   	unsigned long anonymous_thp;</span>
<span class="quote">&gt;   	unsigned long swap;</span>
<span class="quote">&gt; +	unsigned long hugetlb;</span>
<span class="quote">&gt;   	u64 pss;</span>
<span class="quote">&gt;   };</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; @@ -610,12 +611,38 @@ static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
<span class="quote">&gt;   	seq_putc(m, &#39;\n&#39;);</span>
<span class="quote">&gt;   }</span>
<span class="quote">&gt;</span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="quote">&gt; +				 unsigned long addr, unsigned long end,</span>
<span class="quote">&gt; +				 struct mm_walk *walk)</span>
<span class="quote">&gt; +{</span>
<span class="quote">&gt; +	struct mem_size_stats *mss = walk-&gt;private;</span>
<span class="quote">&gt; +	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="quote">&gt; +	struct page *page = NULL;</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +	if (pte_present(*pte)) {</span>
<span class="quote">&gt; +		page = vm_normal_page(vma, addr, *pte);</span>
<span class="quote">&gt; +	} else if (is_swap_pte(*pte)) {</span>
<span class="quote">&gt; +		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt; +		if (is_migration_entry(swpent))</span>
<span class="quote">&gt; +			page = migration_entry_to_page(swpent);</span>
<span class="quote">&gt; +	}</span>
<span class="quote">&gt; +	if (page)</span>
<span class="quote">&gt; +		mss-&gt;hugetlb += huge_page_size(hstate_vma(vma));</span>
<span class="quote">&gt; +	return 0;</span>
<span class="quote">&gt; +}</span>
<span class="quote">&gt; +#endif /* HUGETLB_PAGE */</span>
<span class="quote">&gt; +</span>
<span class="quote">&gt;   static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;   {</span>
<span class="quote">&gt;   	struct vm_area_struct *vma = v;</span>
<span class="quote">&gt;   	struct mem_size_stats mss;</span>
<span class="quote">&gt;   	struct mm_walk smaps_walk = {</span>
<span class="quote">&gt;   		.pmd_entry = smaps_pte_range,</span>
<span class="quote">&gt; +#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="quote">&gt; +		.hugetlb_entry = smaps_hugetlb_range,</span>
<span class="quote">&gt; +#endif</span>
<span class="quote">&gt;   		.mm = vma-&gt;vm_mm,</span>
<span class="quote">&gt;   		.private = &amp;mss,</span>
<span class="quote">&gt;   	};</span>
<span class="quote">&gt; @@ -637,6 +664,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;   		   &quot;Referenced:     %8lu kB\n&quot;</span>
<span class="quote">&gt;   		   &quot;Anonymous:      %8lu kB\n&quot;</span>
<span class="quote">&gt;   		   &quot;AnonHugePages:  %8lu kB\n&quot;</span>
<span class="quote">&gt; +		   &quot;HugetlbPages:   %8lu kB\n&quot;</span>
<span class="quote">&gt;   		   &quot;Swap:           %8lu kB\n&quot;</span>
<span class="quote">&gt;   		   &quot;KernelPageSize: %8lu kB\n&quot;</span>
<span class="quote">&gt;   		   &quot;MMUPageSize:    %8lu kB\n&quot;</span>
<span class="quote">&gt; @@ -651,6 +679,7 @@ static int show_smap(struct seq_file *m, void *v, int is_pid)</span>
<span class="quote">&gt;   		   mss.referenced &gt;&gt; 10,</span>
<span class="quote">&gt;   		   mss.anonymous &gt;&gt; 10,</span>
<span class="quote">&gt;   		   mss.anonymous_thp &gt;&gt; 10,</span>
<span class="quote">&gt; +		   mss.hugetlb &gt;&gt; 10,</span>
<span class="quote">&gt;   		   mss.swap &gt;&gt; 10,</span>
<span class="quote">&gt;   		   vma_kernel_pagesize(vma) &gt;&gt; 10,</span>
<span class="quote">&gt;   		   vma_mmu_pagesize(vma) &gt;&gt; 10,</span>
<span class="quote">&gt;</span>

--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=579">David Rientjes</a> - Sept. 9, 2015, 10:14 p.m.</div>
<pre class="content">
On Wed, 9 Sep 2015, Vlastimil Babka wrote:
<span class="quote">
&gt; On 08/20/2015 10:26 AM, Naoya Horiguchi wrote:</span>
<span class="quote">&gt; &gt; Currently /proc/PID/smaps provides no usage info for vma(VM_HUGETLB), which</span>
<span class="quote">&gt; &gt; is inconvenient when we want to know per-task or per-vma base hugetlb usage.</span>
<span class="quote">&gt; &gt; To solve this, this patch adds a new line for hugetlb usage like below:</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt;    Size:              20480 kB</span>
<span class="quote">&gt; &gt;    Rss:                   0 kB</span>
<span class="quote">&gt; &gt;    Pss:                   0 kB</span>
<span class="quote">&gt; &gt;    Shared_Clean:          0 kB</span>
<span class="quote">&gt; &gt;    Shared_Dirty:          0 kB</span>
<span class="quote">&gt; &gt;    Private_Clean:         0 kB</span>
<span class="quote">&gt; &gt;    Private_Dirty:         0 kB</span>
<span class="quote">&gt; &gt;    Referenced:            0 kB</span>
<span class="quote">&gt; &gt;    Anonymous:             0 kB</span>
<span class="quote">&gt; &gt;    AnonHugePages:         0 kB</span>
<span class="quote">&gt; &gt;    HugetlbPages:      18432 kB</span>
<span class="quote">&gt; &gt;    Swap:                  0 kB</span>
<span class="quote">&gt; &gt;    KernelPageSize:     2048 kB</span>
<span class="quote">&gt; &gt;    MMUPageSize:        2048 kB</span>
<span class="quote">&gt; &gt;    Locked:                0 kB</span>
<span class="quote">&gt; &gt;    VmFlags: rd wr mr mw me de ht</span>
<span class="quote">&gt; &gt; </span>
<span class="quote">&gt; &gt; Signed-off-by: Naoya Horiguchi &lt;n-horiguchi@ah.jp.nec.com&gt;</span>
<span class="quote">&gt; &gt; Acked-by: Joern Engel &lt;joern@logfs.org&gt;</span>
<span class="quote">&gt; &gt; Acked-by: David Rientjes &lt;rientjes@google.com&gt;</span>
<span class="quote">&gt; </span>
<span class="quote">&gt; Sorry for coming late to this thread. It&#39;s a nice improvement, but I find it</span>
<span class="quote">&gt; somewhat illogical that the per-process stats (status) are more detailed than</span>
<span class="quote">&gt; the per-mapping stats (smaps) with respect to the size breakdown. I would</span>
<span class="quote">&gt; expect it to be the other way around. That would simplify the per-process</span>
<span class="quote">&gt; accounting (I realize this has been a hot topic already), and allow those who</span>
<span class="quote">&gt; really care to look at smaps.</span>
<span class="quote">&gt; </span>

Smaps shows the pagesize for the hugepage of the vma and the rss, I 
believe you have all the information needed.  Some distributions also 
change smaps to only be readable by the owner or root for security 
reasons.
--
To unsubscribe from this list: send the line &quot;unsubscribe linux-kernel&quot; in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
Please read the FAQ at  http://www.tux.org/lkml/
</pre>
</div>

<div class="comment">
<div class="meta"><a href="/project/LKML/list/?submitter=4407">Naoya Horiguchi</a> - Sept. 17, 2015, 9:39 a.m.</div>
<pre class="content">
On Mon, Sep 07, 2015 at 11:52:41AM +0100, Pádraig Brady wrote:
...
<span class="quote">&gt; </span>
<span class="quote">&gt; By the same argument I presume the existing THP &quot;AnonHugePages&quot; smaps field</span>
<span class="quote">&gt; is not accounted for in the {Private,Shared}_... fields?</span>
<span class="quote">&gt; I.E. AnonHugePages may also benefit from splitting to Private/Shared?</span>

smaps_pmd_entry() not only increments mss-&gt;anonymous_thp, but also calls
smaps_account() which updates mss-&gt;anonymous, mss-&gt;referenced and
mss-&gt;{shared,private}_{clean,dirty}, so thp&#39;s shared/private characteristic
is included in other existing fields.
I think that even if we know the thp-specific shared/private profiles, it
might be hard to do something beneficial using that information, so I feel
keeping this field as-is is ok for now.

Thanks,
Naoya Horiguchi
</pre>
</div>



<h2>Patch</h2>
<div class="patch">
<pre class="content">
<span class="p_header">diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c</span>
<span class="p_header">index ca1e091881d4..c7218603306d 100644</span>
<span class="p_header">--- a/fs/proc/task_mmu.c</span>
<span class="p_header">+++ b/fs/proc/task_mmu.c</span>
<span class="p_chunk">@@ -610,12 +610,39 @@</span> <span class="p_context"> static void show_smap_vma_flags(struct seq_file *m, struct vm_area_struct *vma)</span>
 	seq_putc(m, &#39;\n&#39;);
 }
 
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+static int smaps_hugetlb_range(pte_t *pte, unsigned long hmask,</span>
<span class="p_add">+				 unsigned long addr, unsigned long end,</span>
<span class="p_add">+				 struct mm_walk *walk)</span>
<span class="p_add">+{</span>
<span class="p_add">+	struct mem_size_stats *mss = walk-&gt;private;</span>
<span class="p_add">+	struct vm_area_struct *vma = walk-&gt;vma;</span>
<span class="p_add">+	struct page *page = NULL;</span>
<span class="p_add">+</span>
<span class="p_add">+	if (pte_present(*pte)) {</span>
<span class="p_add">+		page = vm_normal_page(vma, addr, *pte);</span>
<span class="p_add">+	} else if (is_swap_pte(*pte)) {</span>
<span class="p_add">+		swp_entry_t swpent = pte_to_swp_entry(*pte);</span>
<span class="p_add">+</span>
<span class="p_add">+		if (is_migration_entry(swpent))</span>
<span class="p_add">+			page = migration_entry_to_page(swpent);</span>
<span class="p_add">+	}</span>
<span class="p_add">+	if (page)</span>
<span class="p_add">+		smaps_account(mss, page, huge_page_size(hstate_vma(vma)),</span>
<span class="p_add">+			      pte_young(*pte), pte_dirty(*pte));</span>
<span class="p_add">+	return 0;</span>
<span class="p_add">+}</span>
<span class="p_add">+#endif /* HUGETLB_PAGE */</span>
<span class="p_add">+</span>
 static int show_smap(struct seq_file *m, void *v, int is_pid)
 {
 	struct vm_area_struct *vma = v;
 	struct mem_size_stats mss;
 	struct mm_walk smaps_walk = {
 		.pmd_entry = smaps_pte_range,
<span class="p_add">+#ifdef CONFIG_HUGETLB_PAGE</span>
<span class="p_add">+		.hugetlb_entry = smaps_hugetlb_range,</span>
<span class="p_add">+#endif</span>
 		.mm = vma-&gt;vm_mm,
 		.private = &amp;mss,
 	};

</pre>
</div>




  </div>
  <div id="footer">
   <a href="http://jk.ozlabs.org/projects/patchwork/">patchwork</a>
   patch tracking system
  </div>
 </body>
</html>



